diff --git a/tmp/929ff172-681b-4bfb-99c2-ba7342ded112_buggy.java b/tmp/bf007582-1358-41ac-a9b6-5adbae81ca9f_fixed.java
index 7b8ee38..cf9b0a8 100644
--- a/tmp/929ff172-681b-4bfb-99c2-ba7342ded112_buggy.java
+++ b/tmp/bf007582-1358-41ac-a9b6-5adbae81ca9f_fixed.java
@@ -1,179 +1,235 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.skipBytes(1); // '[' header
         manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
 
         int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (idIndex < 0) {
+            return null; // Malformed message
+        }
         String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         buf.skipBytes(1); // '*' delimiter
 
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        hasIndex = false; // Reset hasIndex for each message
+        int headerEndIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (headerEndIndex < 0) {
+            return null; // Malformed message
+        }
+        int nextDelimiterIndex = buf.indexOf(headerEndIndex + 1, buf.writerIndex(), (byte) '*');
+        if (nextDelimiterIndex > 0) {
+            // Check if the segment between delimiters looks like an index (hex) and the next segment is length (4 hex digits)
+             if (nextDelimiterIndex + 5 < buf.writerIndex() && buf.getByte(nextDelimiterIndex + 5) == '*'
+                && buf.toString(nextDelimiterIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+
+                index = buf.readSlice(headerEndIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
                 hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+                buf.skipBytes(1); // '*' delimiter (after index)
+                headerEndIndex = nextDelimiterIndex; // Update header end index to after the index
             }
+        }
+
 
-        buf.skipBytes(4); // length
+        buf.skipBytes(4); // length (hex digits)
         buf.skipBytes(1); // '*' delimiter
 
         buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+            contentIndex = buf.writerIndex(); // No comma, type is the whole remaining content
         }
 
         String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
         if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+             buf.readerIndex(contentIndex + 1); // Move reader index past the comma if it exists
+        } else {
+             buf.readerIndex(contentIndex); // Move reader index to the end if no comma exists
         }
 
+
         if (type.equals("INIT")) {
 
             sendResponse(channel, id, index, "INIT,1");
 
         } else if (type.equals("LK")) {
 
             sendResponse(channel, id, index, "LK");
 
             if (buf.isReadable()) {
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
-                    getLastLocation(position, null);
+                    // Use current time as fallback if last location time is not available
+                    getLastLocation(position, new Date());
 
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                     return position;
                 }
             }
 
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
+                    // Alarm type might be determined within decodePosition or based on specific AL payload
+                    // For now, setting general alarm if position exists. Specific alarms handled in decodePosition.
+                    if (!position.getAttributes().containsKey(Position.KEY_ALARM)) {
                          position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                     }
+                }
                 sendResponse(channel, id, index, "AL");
             }
 
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
             sendResponse(channel, id, index, type);
 
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
             if (buf.isReadable()) {
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
-                getLastLocation(position, new Date());
+                getLastLocation(position, new Date()); // Use current time
 
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 int valueIndex = 0;
 
+                if (values.length > valueIndex) { // Check if array has enough elements
                     if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                        if (Integer.parseInt(values[valueIndex++]) > 0 && values.length > valueIndex) {
                             position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                         }
                     } else {
                         if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                            if (values.length > valueIndex + 1) { // Need at least two values
                                 position.set("pressureHigh", values[valueIndex++]);
                                 position.set("pressureLow", values[valueIndex++]);
+                            } else {
+                                valueIndex = values.length; // Skip heart rate if not enough values for pressure
                             }
-                    if (valueIndex <= values.length - 1) {
+                        }
+                        if (valueIndex <= values.length - 1) { // Check if heart rate value exists
                             position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                         }
                     }
+                }
 
+                // Only return position if some data was actually set
+                if (!position.getAttributes().isEmpty()) {
                      return position;
-
+                }
             }
 
         } else if (type.equals("img")) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            getLastLocation(position, null);
+            getLastLocation(position, new Date()); // Use current time
 
             int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+            if (timeIndex >= 0 && timeIndex + 14 <= buf.writerIndex()) { // Check bounds before setting reader index
+                 buf.readerIndex(timeIndex + 12 + 2); // Skip time and comma potentially
+                 if (buf.isReadable()) {
                       position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
                       return position;
+                 }
+            }
+
 
         } else if (type.equals("JXTK")) {
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            // Find the 4th comma to locate the start of binary data
+            int dataIndex = -1;
+            int commaCount = 0;
+            for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+                if (buf.getByte(i) == ',') {
+                    commaCount++;
+                    if (commaCount == 4) {
+                        dataIndex = i + 1;
+                        break;
+                    }
+                }
+            }
+
+            if (dataIndex < 0 || dataIndex <= buf.readerIndex()) {
+                 return null; // Malformed JXTK message
+            }
+
+
+            String headerPart = buf.readCharSequence(dataIndex - 1 - buf.readerIndex(), StandardCharsets.US_ASCII).toString();
+            String[] values = headerPart.split(",");
+            buf.readerIndex(dataIndex); // Move reader index to start of binary data
+
+            if (values.length < 4) {
+                 return null; // Malformed JXTK header
+            }
 
             int current = Integer.parseInt(values[2]);
             int total = Integer.parseInt(values[3]);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
-            audio.writeBytes(buf);
+            audio.writeBytes(buf); // Append binary audio data
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
-                return null;
+                return null; // More parts expected
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                getLastLocation(position, null);
+                getLastLocation(position, new Date()); // Use current time
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
-                audio.release();
-                audio = null;
+                audio.release(); // Release buffer
+                audio = null;    // Reset state variable
                 return position;
             }
 
         } else if (type.equals("TK")) {
 
-            if (buf.readableBytes() == 1) {
+            // The byte check might be for an empty payload after TK,
+            if (!buf.isReadable() || buf.readableBytes() <= 1) { // Check if there's actual audio data beyond just ']' potentially
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            getLastLocation(position, null);
+            getLastLocation(position, new Date()); // Use current time
 
             position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
             return position;
 
         }
 
-        return null;
+        return null; // Unknown type or message handled without returning position
     }
\ No newline at end of file
