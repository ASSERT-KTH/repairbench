diff --git a/tmp/ecee09ac-e404-4609-8fe1-1ade546576f2_buggy.java b/tmp/1decd04e-3a1a-4dd8-864d-3e84f0202fe3_fixed.java
index 7b8ee38..d6dc21c 100644
--- a/tmp/ecee09ac-e404-4609-8fe1-1ade546576f2_buggy.java
+++ b/tmp/1decd04e-3a1a-4dd8-864d-3e84f0202fe3_fixed.java
@@ -1,179 +1,282 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.skipBytes(1); // '[' header
         manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
 
         int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (idIndex < 0) {
+            return null; // Invalid format
+        }
         String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         buf.skipBytes(1); // '*' delimiter
 
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        boolean hasIndex = false; // Track if index was found and parsed
+        int lengthDelimiterIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        if (lengthDelimiterIndex > 0) {
+            // Check if the part before lengthDelimiterIndex might be an index,
+            // and if what follows looks like *LLLL* (4 hex digits length)
+            int potentialLengthIndex = lengthDelimiterIndex + 1;
+            if (potentialLengthIndex + 4 < buf.writerIndex() && buf.getByte(potentialLengthIndex + 4) == '*'
+                    && buf.toString(potentialLengthIndex, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+
+                int indexLength = lengthDelimiterIndex - buf.readerIndex();
+                if (indexLength > 0) {
                     hasIndex = true;
                     index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+                }
+                buf.skipBytes(1); // Skip '*' delimiter after index (or the first '*' if index was empty)
+            }
         }
 
+        // Skip LLLL (length) and '*' delimiter
+        // This assumes length is always present, either after index* or after id*
+        if (buf.readableBytes() >= 5) {
             buf.skipBytes(4); // length
             buf.skipBytes(1); // '*' delimiter
+        } else {
+            // Not enough bytes for length and delimiter, likely invalid format
+            return null;
+        }
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (buf.readableBytes() < 1 || buf.getByte(buf.writerIndex() - 1) != ']') {
+            // Missing trailing ']'
+            return null;
+        }
+        buf.writerIndex(buf.writerIndex() - 1); // ignore trailing ']'
+
+        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
         if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+            contentIndex = buf.writerIndex(); // No comma, type is the whole remaining part
         }
 
         String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
         if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+            buf.readerIndex(contentIndex + 1); // Move reader index past the comma if it exists
         }
 
         if (type.equals("INIT")) {
 
             sendResponse(channel, id, index, "INIT,1");
 
         } else if (type.equals("LK")) {
 
             sendResponse(channel, id, index, "LK");
 
             if (buf.isReadable()) {
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 if (values.length >= 3) {
+                    try {
                         Position position = new Position(getProtocolName());
                         position.setDeviceId(deviceSession.getDeviceId());
 
                         getLastLocation(position, null);
 
                         position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                         position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                         return position;
+                    } catch (NumberFormatException e) {
+                        Log.warning("Failed to parse LK values: " + buf.toString(StandardCharsets.US_ASCII), e);
+                        return null;
+                    }
                 }
             }
 
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                    // Alarm type might be part of the decoded position data (e.g. status bits)
+                    // Or it might need specific parsing from the AL message content if decodePosition doesn't handle it
+                    // For now, assume decodePosition handles it or sets a default alarm.
+                    // If a specific alarm type needs to be parsed from AL message payload, add logic here.
+                    if (!position.getAttributes().containsKey(Position.KEY_ALARM)) {
+                         position.set(Position.KEY_ALARM, Position.ALARM_GENERAL); // Default if not set by decodePosition
+                    }
                 }
                 sendResponse(channel, id, index, "AL");
             }
 
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
             sendResponse(channel, id, index, type);
 
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
             if (buf.isReadable()) {
-
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
-                getLastLocation(position, new Date());
+                getLastLocation(position, new Date()); // Use current time for health data
 
+                try {
                     String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                     int valueIndex = 0;
 
                     if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                        if (values.length > valueIndex + 1 && Integer.parseInt(values[valueIndex++]) > 0) {
                             position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                         }
                     } else {
                         if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                            if (values.length > valueIndex) {
                                 position.set("pressureHigh", values[valueIndex++]);
+                            }
+                            if (values.length > valueIndex) {
                                 position.set("pressureLow", values[valueIndex++]);
                             }
-                    if (valueIndex <= values.length - 1) {
+                        }
+                        if (values.length > valueIndex) {
                             position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                         }
                     }
-
                     return position;
-
+                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                     Log.warning("Failed to parse health data: " + buf.toString(StandardCharsets.US_ASCII), e);
+                     return null;
+                }
             }
 
         } else if (type.equals("img")) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
+            // Assuming format is img,YYYYMMDDHHMMSS,IMAGE_DATA
             int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+            if (timeIndex > 0 && timeIndex + 12 + 2 <= buf.writerIndex() && buf.getByte(timeIndex + 1 + 12) == ',') {
+                 buf.readerIndex(timeIndex + 12 + 2); // Skip time and comma
+                 if (buf.isReadable()) {
                     position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
                     return position;
+                 }
+            } else {
+                 Log.warning("Invalid img format: " + buf.toString(StandardCharsets.US_ASCII));
+            }
 
         } else if (type.equals("JXTK")) {
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+            // Format: JXTK,seq,filename,current,total,AUDIO_DATA
+            int dataStartIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4);
+            if (dataStartIndex < 0) {
+                 Log.warning("Failed to parse JXTK header (commas): " + buf.toString(StandardCharsets.US_ASCII));
+                 return null;
+            }
+            dataStartIndex += 1; // Point after 4th comma
 
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+            String headerPart = buf.toString(buf.readerIndex(), dataStartIndex - buf.readerIndex(), StandardCharsets.US_ASCII);
+            String[] values = headerPart.split(",");
+            if (values.length < 4) {
+                 Log.warning("Failed to parse JXTK header values: " + headerPart);
+                 return null;
+            }
 
+            int current;
+            int total;
+            try {
+                 current = Integer.parseInt(values[2]); // Index 2 is 'current'
+                 total = Integer.parseInt(values[3]);   // Index 3 is 'total'
+            } catch (NumberFormatException e) {
+                 Log.warning("Failed to parse JXTK current/total: " + headerPart, e);
+                 return null;
+            }
+
+            // Advance reader index past the header part we parsed as string
+            buf.readerIndex(buf.readerIndex() + headerPart.length());
+
+            // Get or create audio buffer (assuming 'audio' is an instance variable Map<String, ByteBuf>)
+            // Need a way to associate buffer with ongoing JXTK session (e.g., device ID + filename?)
+            // For simplicity, assuming 'audio' is a single instance buffer (potential issue with concurrent streams)
+            // A better approach would use DeviceSession state or a Map.
              if (audio == null) {
                  audio = Unpooled.buffer();
              }
-            audio.writeBytes(buf);
+            audio.writeBytes(buf); // Read actual audio data
 
-            sendResponse(channel, id, index, "JXTKR,1");
+            sendResponse(channel, id, index, "JXTKR,1"); // Acknowledge chunk
 
             if (current < total) {
+                // More chunks expected
                 return null;
             } else {
+                // Last chunk received
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
+                ByteBuf completedAudio = null; // Reference to the buffer to process
+                try {
                     getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
-                audio.release();
+                    completedAudio = audio; // Use the accumulated buffer
+                    audio = null; // Null out instance variable immediately
+
+                    String mediaFile = writeMediaFile(id, completedAudio, "amr");
+                    if (mediaFile != null) {
+                        position.set(Position.KEY_AUDIO, mediaFile);
+                    } else {
+                         Log.warning("Failed to write JXTK media file for device: " + id);
+                         // Return position without audio? Or null? Returning position.
+                    }
+                    return position; // Return position on success
+                } catch (Exception e) {
+                    Log.warning("Error processing final JXTK chunk for device: " + id, e);
+                    // Return null on any exception during final processing
+                    return null;
+                } finally {
+                    // Ensure the buffer we worked with is released
+                    if (completedAudio != null) {
+                        try { completedAudio.release(); } catch (Exception ex) { Log.warning("Failed to release audio buffer", ex); }
+                    }
+                    // Ensure instance variable is null if not already
+                    if (audio != null) {
+                       try { audio.release(); } catch (Exception ex) { /* Already logged potentially */ }
                        audio = null;
-                return position;
+                    }
+                }
             }
 
         } else if (type.equals("TK")) {
 
-            if (buf.readableBytes() == 1) {
+            if (buf.readableBytes() <= 1) { // Check if there's actual data beyond potential delimiters
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
+            try {
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
+            } catch (Exception e) {
+                 Log.warning("Error processing TK audio for device: " + id, e);
+                 return null; // Return null if writing file fails
+            }
 
             return position;
 
         }
 
-        return null;
+        return null; // Unknown type or case not resulting in a position
     }
\ No newline at end of file
