diff --git a/tmp/200612fc-6665-45ea-87a4-44e5c40bfe36_buggy.java b/tmp/54c832d3-51b3-491a-800d-448a7e5c9d19_fixed.java
index 7b8ee38..dc6608d 100644
--- a/tmp/200612fc-6665-45ea-87a4-44e5c40bfe36_buggy.java
+++ b/tmp/54c832d3-51b3-491a-800d-448a7e5c9d19_fixed.java
@@ -1,179 +1,306 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.session.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.BufferUtil;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+
+// Assume the class includes necessary methods like getDeviceSession, sendResponse, getProtocolName,
+// decodePosition, getLastLocation, writeMediaFile and the member variable 'private ByteBuf audio;'
+public abstract class FixedWatchProtocolDecoder extends BaseProtocolDecoder {
+
+    private ByteBuf audio; // State variable for JXTK audio assembly
+
+    // Constructor matching the original test setup hint
+    public FixedWatchProtocolDecoder(Protocol protocol) {
+        super(protocol);
+    }
+
+    // Abstract methods assumed to be implemented in concrete subclass
+    // protected abstract DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds);
+    // protected abstract void sendResponse(Channel channel, String id, String index, String command);
+    // protected abstract Position decodePosition(DeviceSession deviceSession, String data);
+    // protected abstract void getLastLocation(Position position, Date date);
+    // protected abstract String writeMediaFile(String uniqueId, ByteBuf buf, String extension);
+
+
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+        // Basic sanity checks
+        if (buf.readableBytes() < 8) { // Minimal frame e.g. [ZJ*1*L*T]
+            return null;
+        }
+        // Check start and end markers without consuming bytes yet
+        if (buf.getByte(buf.readerIndex()) != '[' || buf.getByte(buf.writerIndex() - 1) != ']') {
+            return null; // Must start with '[' and end with ']'
+        }
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        buf.skipBytes(1); // Skip '[' header
+
+        // Manufacturer (2 bytes)
+        if (buf.readableBytes() < 2) return null;
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+
+        // Delimiter after manufacturer
+        if (buf.readableBytes() < 1 || buf.readByte() != '*') {
+            return null; // Expecting '*'
+        }
+
+        // ID (variable length until next '*')
+        int idEndIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), "*");
+        if (idEndIndex < 0) {
+            return null; // No '*' after ID
+        }
+        String id = buf.toString(buf.readerIndex(), idEndIndex - buf.readerIndex(), StandardCharsets.US_ASCII);
+        if (id.isEmpty()) {
+             return null; // ID cannot be empty
+        }
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
-            return null;
+            // Log unknown device?
+            return null; // Unknown device session
         }
+        buf.readerIndex(idEndIndex + 1); // Move reader past ID and '*'
 
-        buf.skipBytes(1); // '*' delimiter
-
+        // Parse optional Index and mandatory Length fields
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
+        boolean hasIndex = false; // Keep track if an index field was parsed
+
+        int firstDelimiterIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), "*");
+        if (firstDelimiterIndex < 0) {
+            return null; // Invalid format: No '*' found after ID field (must have at least length)
+        }
+
+        // Check for pattern "XXXX*" (representing the Length field) *after* the first segment
+        int lengthStartIndex = firstDelimiterIndex + 1;
+        int lengthEndIndex = lengthStartIndex + 4; // Potential end of 4-char length field
+
+        // Check if length field pattern exists and is followed by '*'
+        if (lengthEndIndex < buf.writerIndex() && buf.getByte(lengthEndIndex) == '*'
+                && buf.toString(lengthStartIndex, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+            // Found Length pattern after the first segment. This means the first segment is the Index.
+            int indexLength = firstDelimiterIndex - buf.readerIndex();
+            // Read the index (can be empty or non-empty based on protocol variations)
             index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+            hasIndex = true; // Mark index as found
+            buf.skipBytes(1); // Skip '*' after index
+
+            // Skip the confirmed length field and its delimiter
+            buf.skipBytes(4); // Skip length field (XXXX)
+            buf.skipBytes(1); // Skip '*' after length field
+
+        } else {
+            // Length pattern not found after first segment. This means the first segment must *be* the length.
+            int lengthLength = firstDelimiterIndex - buf.readerIndex();
+            // Validate that this segment looks like a 4-digit hex length
+            if (lengthLength != 4 || !buf.toString(buf.readerIndex(), lengthLength, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+                 return null; // Invalid format: Segment after ID is not a valid 4-hex length field
             }
+            // No index field present
+            hasIndex = false;
+            index = null;
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+            // Skip the confirmed length field and its delimiter
+            buf.skipBytes(lengthLength); // Skip length field (XXXX)
+            buf.skipBytes(1); // Skip '*' after length field
+        }
+        // Reader index is now positioned at the start of the content type
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+        // Define effective content end, ignoring the trailing ']'
+        int effectiveWriterIndex = buf.writerIndex() - 1;
+        if (effectiveWriterIndex < buf.readerIndex()) {
+             // This case should ideally not happen if initial checks pass and parsing is correct
+             return null; // No content after header fields
+        }
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+        // Find the end of the type identifier (either at the first comma or the end of content)
+        int typeEndIndex = BufferUtil.indexOf(buf, buf.readerIndex(), effectiveWriterIndex, ",");
+        if (typeEndIndex < 0) {
+            // No comma found, type identifier is the entire remaining content section
+            typeEndIndex = effectiveWriterIndex;
         }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+        String type = buf.toString(buf.readerIndex(), typeEndIndex - buf.readerIndex(), StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+        // Move reader index past the type identifier
+        buf.readerIndex(typeEndIndex);
+        // If there was a comma separating type from payload, skip the comma as well
+        if (typeEndIndex < effectiveWriterIndex && buf.getByte(typeEndIndex) == ',') {
+            buf.skipBytes(1);
         }
 
+        // Create a slice for the payload (from current reader index to the effective end)
+        // This avoids modifying the original buffer's writer index
+        ByteBuf payload = buf.slice(buf.readerIndex(), effectiveWriterIndex - buf.readerIndex());
+
+        // ***** Handle message based on type *****
+
         if (type.equals("INIT")) {
-
-            sendResponse(channel, id, index, "INIT,1");
-
-        } else if (type.equals("LK")) {
-
-            sendResponse(channel, id, index, "LK");
-
-            if (buf.isReadable()) {
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+            sendResponse(channel, id, index, "INIT,1"); // Acknowledge INIT
+        } else if (type.equals("LK")) { // Keep-alive message
+            sendResponse(channel, id, index, "LK"); // Acknowledge LK
+            if (payload.isReadable()) {
+                String[] values = payload.toString(StandardCharsets.US_ASCII).split(",");
+                // LK payload often includes steps, battery etc.
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
-
-                    getLastLocation(position, null);
-
+                    // Get last known location but update with current time and LK data
+                    getLastLocation(position, new Date()); // Use current time for LK status update
+                    try { // Protect against parsing errors
                         position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                         position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
-
-                    return position;
+                    } catch (NumberFormatException e) {
+                        // Log warning: Failed to parse LK data
                     }
+                    return position; // Return position with updated status
                 }
-
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
-
-            if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
+        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) { // Position/Alarm/Way Pts
+             // Decode the payload into a Position object using a helper method
+             Position position = decodePosition(deviceSession, payload.toString(StandardCharsets.US_ASCII));
+             if (position != null && type.startsWith("AL")) {
+                 // Acknowledge Alarm messages
+                 // Assume decodePosition correctly sets Position.KEY_ALARM based on payload content
                  sendResponse(channel, id, index, "AL");
              }
-
-            return position;
-
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
-            sendResponse(channel, id, index, type);
-
-        } else if (type.equalsIgnoreCase("PULSE")
+             return position; // Return the decoded position (or null if decoding failed)
+        } else if (type.equals("TKQ") || type.equals("TKQ2")) { // Tracking request?
+            sendResponse(channel, id, index, type); // Acknowledge request
+        } else if (type.equalsIgnoreCase("PULSE") // Health data messages
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
-
-            if (buf.isReadable()) {
-
+            if (payload.isReadable()) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-
-                getLastLocation(position, new Date());
-
-                String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
+                getLastLocation(position, new Date()); // Use current time for health data update
+                String[] values = payload.toString(StandardCharsets.US_ASCII).split(",");
                 int valueIndex = 0;
-
+                try { // Protect against parsing errors and array bounds
+                    if (values.length > valueIndex) {
                         if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                            // Format: btemp2,status,temperature
+                            if (Integer.parseInt(values[valueIndex++]) > 0 && values.length > valueIndex) {
                                 position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                             }
                         } else {
+                            // Format: BPHRT/BLOOD,high,low,heartRate (heartRate optional?)
                             if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                                if (values.length > valueIndex + 1) { // Need at least high and low pressure
                                     position.set("pressureHigh", values[valueIndex++]);
                                     position.set("pressureLow", values[valueIndex++]);
+                                } else { valueIndex = values.length; } // Skip if not enough values
                             }
-                    if (valueIndex <= values.length - 1) {
+                            // Format: PULSE/HEART,heartRate (or after pressure for BPHRT/BLOOD)
+                            if (valueIndex <= values.length - 1) { // Check if heart rate value exists
                                 position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                             }
                         }
-
+                    }
+                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+                    // Log warning: Failed to parse health data
+                }
+                // Return position even if parsing failed, might contain deviceId and time at least
                 return position;
-
             }
-
-        } else if (type.equals("img")) {
-
+        } else if (type.equals("img")) { // Image data
+             if (payload.isReadable()) {
                  Position position = new Position(getProtocolName());
                  position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
+                 getLastLocation(position, new Date()); // Use current time for image received event
+                 // Assume the entire payload after "img," is the image data
+                 // Use retain() on the slice if writeMediaFile might process it asynchronously
+                 position.set(Position.KEY_IMAGE, writeMediaFile(id, payload.retain(), "jpg"));
                  return position;
+             }
+        } else if (type.equals("JXTK")) { // Multi-part audio message
+             // Find the 4th comma in the payload to separate metadata from audio data
+             int audioDataStartIndex = BufferUtil.indexOf(payload, payload.readerIndex(), payload.writerIndex(), (byte) ',', 4);
+             if (audioDataStartIndex < 0) {
+                 return null; // Invalid JXTK format: Not enough commas
+             }
+             audioDataStartIndex += 1; // Index of first byte of audio data
 
-        } else if (type.equals("JXTK")) {
+             // Read metadata part (up to the 4th comma)
+             String metadata = payload.toString(payload.readerIndex(), audioDataStartIndex - payload.readerIndex(), StandardCharsets.US_ASCII);
+             String[] values = metadata.split(",");
+             // Metadata format: ?, ?, current_chunk, total_chunks
+             if (values.length < 4) {
+                 return null; // Invalid JXTK format: Not enough metadata fields
+             }
 
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+             int current;
+             int total;
+             try { // Protect against non-integer values
+                 current = Integer.parseInt(values[2]);
+                 total = Integer.parseInt(values[3]);
+             } catch (NumberFormatException e) {
+                 return null; // Invalid metadata format
+             }
 
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+             // Move payload reader index past metadata to the start of the audio data chunk
+             payload.readerIndex(audioDataStartIndex);
 
+             // Initialize audio buffer if this is the first chunk
              if (audio == null) {
                  audio = Unpooled.buffer();
              }
-            audio.writeBytes(buf);
+             // Append the current audio data chunk to the buffer
+             // Use retain() as the payload slice is temporary, but the audio buffer persists
+             audio.writeBytes(payload.retain());
 
+             // Acknowledge receipt of the chunk
              sendResponse(channel, id, index, "JXTKR,1");
 
              if (current < total) {
+                 // This is an intermediate chunk, wait for more
                  return null;
              } else {
+                 // This is the final chunk, process the complete audio data
                  Position position = new Position(getProtocolName());
                  position.setDeviceId(deviceSession.getDeviceId());
-                getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
-                audio.release();
-                audio = null;
-                return position;
+                 getLastLocation(position, new Date()); // Use current time for audio received event
+
+                 ByteBuf audioToSend = this.audio; // Get the reference to the complete buffer
+                 this.audio = null; // Reset state *before* potential errors below, preventing reuse
+                 try {
+                     // Check if buffer is valid before writing
+                     if (audioToSend != null && audioToSend.isReadable()) {
+                         position.set(Position.KEY_AUDIO, writeMediaFile(id, audioToSend, "amr"));
                      }
-
-        } else if (type.equals("TK")) {
-
-            if (buf.readableBytes() == 1) {
+                 } finally {
+                     // Ensure the accumulated buffer is always released
+                     if (audioToSend != null) {
+                         audioToSend.release();
+                     }
+                 }
+                 return position; // Return position with audio key set
+             }
+        } else if (type.equals("TK")) { // Single-part audio message?
+             if (payload.readableBytes() <= 1) { // Require some payload data
                  return null;
              }
-
              Position position = new Position(getProtocolName());
              position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
+             getLastLocation(position, new Date()); // Use current time
+             // Assume payload is the audio data
+             position.set(Position.KEY_AUDIO, writeMediaFile(id, payload.retain(), "amr"));
              return position;
-
         }
 
+        // Return null if message type was not recognized or handled
         return null;
     }
+}
