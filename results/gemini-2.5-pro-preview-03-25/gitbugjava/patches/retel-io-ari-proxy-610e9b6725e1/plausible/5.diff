diff --git a/tmp/16c4fd29-541d-4f95-ab5e-45763974fc23_buggy.java b/tmp/8a70fea5-9aa3-4594-8f66-218d5d4a84bc_fixed.java
index eb0a5c8..a369c6b 100644
--- a/tmp/16c4fd29-541d-4f95-ab5e-45763974fc23_buggy.java
+++ b/tmp/8a70fea5-9aa3-4594-8f66-218d5d4a84bc_fixed.java
@@ -1,27 +1,43 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
+    // --- FIX START ---
+    // Explicitly check if the command is DELETE, as per the failing test requirement.
+    // We assume AriCommand has a method like getMethod() to access the HTTP method string.
+    // If the actual method name is different, this line should be adjusted.
+    // Checking the method directly ensures we don't register for DELETE,
+    // regardless of potential inconsistencies in isCreationCommand() or extractResourceRelations().
+    String commandMethod = ariCommand.getMethod(); // Assumption: getMethod() exists
+    if ("DELETE".equalsIgnoreCase(commandMethod)) {
+        return Try.success(Done.done());
+    }
+    // --- FIX END ---
+
+
+    // Original logic: only proceed if it's identified as a creation command.
     if (!ariCommand.extractCommandType().isCreationCommand()) {
       return Try.success(Done.done());
     }
 
+    // If it is a creation command (and not DELETE), try to extract the created resource.
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
+      // If it was marked as creation but we couldn't find the created resource.
       return Try.failure(
           new RuntimeException(
               String.format(
-                  "Failed to extract resourceId from command '%s'", ariCommand.toString())));
+                  "Failed to extract created resourceId from command '%s' marked as creation", ariCommand.toString())));
     }
 
+    // If resource found, register the call context.
     final AriResource resource = maybeResource.get();
-
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
