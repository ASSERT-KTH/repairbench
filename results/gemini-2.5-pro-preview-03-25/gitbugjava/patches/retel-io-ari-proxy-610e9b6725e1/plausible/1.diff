diff --git a/tmp/1c1506f7-857e-418a-9902-44097f5b3263_buggy.java b/tmp/62d52b6d-9be2-4978-954c-760341310833_fixed.java
index eb0a5c8..107cad3 100644
--- a/tmp/1c1506f7-857e-418a-9902-44097f5b3263_buggy.java
+++ b/tmp/62d52b6d-9be2-4978-954c-760341310833_fixed.java
@@ -1,27 +1,38 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Ensure we only proceed for actual creation commands.
+    // The test shows that the isCreationCommand check might be insufficient or
+    // misleading for methods like DELETE. Add an explicit check.
+    // Assuming AriCommand has a method to get the HTTP verb like getMethod().
+    // If the method name is different, it should be adjusted accordingly.
+    String httpMethod = ariCommand.getMethod(); // Assuming this method exists
+
+    if ("DELETE".equalsIgnoreCase(httpMethod) || !ariCommand.extractCommandType().isCreationCommand()) {
+      // If it's a DELETE request or not a creation command, do nothing and succeed.
       return Try.success(Done.done());
     }
 
+    // Original logic for creation commands:
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
-            .find(AriResourceRelation::isCreated)
+            .find(AriResourceRelation::isCreated) // Look for the resource marked as created
             .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
+      // If it was identified as a creation command but we can't find the created resource,
+      // it's an unexpected state.
       return Try.failure(
           new RuntimeException(
               String.format(
-                  "Failed to extract resourceId from command '%s'", ariCommand.toString())));
+                  "Failed to extract created resourceId from creation command '%s'", ariCommand.toString())));
     }
 
+    // If a created resource was found, register its context.
     final AriResource resource = maybeResource.get();
-
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
