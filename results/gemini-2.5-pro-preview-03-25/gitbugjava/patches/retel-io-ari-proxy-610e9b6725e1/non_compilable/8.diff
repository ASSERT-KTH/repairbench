diff --git a/tmp/e1d42fb5-168e-419c-b384-54b60257163b_buggy.java b/tmp/695b6a52-7fcf-4710-b89c-3f18f4b75d94_fixed.java
index eb0a5c8..2499801 100644
--- a/tmp/e1d42fb5-168e-419c-b384-54b60257163b_buggy.java
+++ b/tmp/695b6a52-7fcf-4710-b89c-3f18f4b75d94_fixed.java
@@ -1,27 +1,39 @@
   public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
+    // A command needs to be a creation command AND result in a created resource
+    // relation to trigger context registration.
+    // Check the command type first. If it's not a creation command, we're done.
     if (!ariCommand.extractCommandType().isCreationCommand()) {
       return Try.success(Done.done());
     }
 
+    // If it IS classified as a creation command, try to find the resource
+    // that was actually created according to the resource relations.
     final Option<AriResource> maybeResource =
         ariCommand
             .extractResourceRelations()
             .find(AriResourceRelation::isCreated)
             .map(AriResourceRelation::getResource);
 
+    // Only if we find a specific created resource do we register the context.
+    // If isCreationCommand() was true, but we don't find a created resource,
+    // that indicates an inconsistency or error.
     if (maybeResource.isEmpty()) {
+      // Log or handle the inconsistency? The original code threw an exception.
+      // Let's maintain that behavior: if it's supposedly a creation command,
+      // we expect a created resource.
       return Try.failure(
           new RuntimeException(
               String.format(
-                  "Failed to extract resourceId from command '%s'", ariCommand.toString())));
+                  "Command '%s' classified as creation, but failed to extract created resourceId",
+                  ariCommand.toString())));
     }
 
+    // We found the created resource, proceed with registration.
     final AriResource resource = maybeResource.get();
-
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
   }
\ No newline at end of file
