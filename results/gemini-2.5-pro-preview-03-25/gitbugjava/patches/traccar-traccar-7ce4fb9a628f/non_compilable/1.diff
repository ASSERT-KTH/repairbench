diff --git a/tmp/9fdc2c3d-150b-410c-acfc-7421549ba22c_buggy.java b/tmp/68dca680-76bc-4552-8077-d3e55eba53e3_fixed.java
index 2b96a40..7c25d2a 100644
--- a/tmp/9fdc2c3d-150b-410c-acfc-7421549ba22c_buggy.java
+++ b/tmp/68dca680-76bc-4552-8077-d3e55eba53e3_fixed.java
@@ -1,101 +1,149 @@
     protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
         Parser parser = new Parser(PATTERN_POSITION, content);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int event = parser.nextInt();
         String eventData = parser.next();
         position.set(Position.KEY_EVENT, event);
         if (event == 53) {
             position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
         } else {
             position.set(Position.KEY_ALARM, decodeAlarm(event));
         }
 
         position.setTime(parser.nextDateTime());
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
 
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.set(Position.KEY_HDOP, parser.nextDouble());
 
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setCourse(parser.nextInt());
         position.setAltitude(parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+        // Use nextLong() for odometer as the value can exceed Integer.MAX_VALUE
+        position.set(Position.KEY_ODOMETER, parser.nextLong());
 
         position.setNetwork(new Network(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
 
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
         int input = parser.nextHexInt();
         int output = parser.nextHexInt();
         position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
         position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
         position.set(Position.KEY_INPUT, input);
         position.set(Position.KEY_OUTPUT, output);
 
         position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
         position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
         if (parser.hasNext()) {
             String[] adc = parser.next().split("\\|");
+            // Start loop from 0 if the first element is also a value, or adjust PREFIX_ADC index
+            // Assuming the first split part before '|' is empty or not an ADC value based on original code i=1 start
             for (int i = 1; i < adc.length; i++) {
-                position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
+                if (!adc[i].isEmpty()) { // Avoid NumberFormatException on empty strings
+                    position.set(Position.PREFIX_ADC + i, Integer.parseInt(adc[i], 16) * 0.01);
                 }
             }
+        }
+
 
         if (parser.hasNext()) {
             String[] fuels = parser.next().split("\\|");
             for (String fuel : fuels) {
+                if (fuel.length() >= 2) { // Ensure string has at least index and value part
                     int index = Integer.parseInt(fuel.substring(0, 2));
                     int value = Integer.parseInt(fuel.substring(2), 16);
                     position.set("fuel" + index, value * 0.1);
                 }
             }
+        }
 
         if (parser.hasNext()) {
             String[] temperatures = parser.next().split("\\|");
             for (String temperature : temperatures) {
+                 if (temperature.length() >= 2) { // Ensure string has at least index and value part
                     int index = Integer.parseInt(temperature.substring(0, 2));
                     int value = Integer.parseInt(temperature.substring(2), 16);
                     double convertedValue = BitUtil.to(value, 15);
                     if (BitUtil.check(value, 15)) {
                         convertedValue = -convertedValue;
                     }
                     position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
                 }
             }
+        }
 
-        if (parser.hasNextAny(9)) {
+        // Check if the next 9 fields exist before attempting to parse them
+        if (parser.hasNext(9)) {
             position.set(Position.KEY_RPM, parser.nextInt());
             position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
             position.set("airFlow", parser.nextInt());
             position.set("airPressure", parser.nextInt());
+            // hasNext() checks for one more field
             if (parser.hasNext()) {
                  position.set("airTemp", parser.nextInt() - 40);
             }
+            // Check again before parsing throttle
+            if (parser.hasNext()) {
                 position.set(Position.KEY_THROTTLE, parser.nextInt());
+            }
+            // Check again before parsing coolant temp
             if (parser.hasNext()) {
                  position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
             }
+             // Check again before parsing fuel consumption
             if (parser.hasNext()) {
                  position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
             }
+             // Check again before parsing fuel level
+            if (parser.hasNext()) {
                 position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
             }
+        } else if (parser.hasNext()) { // Handle cases where fewer than 9 but some OBD fields exist
+             // Attempt to parse fields individually with hasNext checks
+             position.set(Position.KEY_RPM, parser.nextInt());
+             if (parser.hasNext()) {
+                position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
+             }
+             if (parser.hasNext()) {
+                position.set("airFlow", parser.nextInt());
+             }
+             if (parser.hasNext()) {
+                position.set("airPressure", parser.nextInt());
+             }
+             if (parser.hasNext()) {
+                 position.set("airTemp", parser.nextInt() - 40);
+             }
+             if (parser.hasNext()) {
+                position.set(Position.KEY_THROTTLE, parser.nextInt());
+             }
+             if (parser.hasNext()) {
+                 position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
+             }
+             if (parser.hasNext()) {
+                 position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
+             }
+             if (parser.hasNext()) {
+                position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
+             }
+        }
+
 
         if (parser.hasNext()) {
             position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
         }
 
         return position;
     }
\ No newline at end of file
