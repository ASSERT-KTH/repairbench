diff --git a/tmp/e02f611e-0676-4ee1-8243-da12982be410_buggy.java b/tmp/91a3cf17-52c2-40f6-9bf9-27469ce7ef56_fixed.java
index 2b96a40..6be18d4 100644
--- a/tmp/e02f611e-0676-4ee1-8243-da12982be410_buggy.java
+++ b/tmp/91a3cf17-52c2-40f6-9bf9-27469ce7ef56_fixed.java
@@ -1,101 +1,145 @@
     protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
         Parser parser = new Parser(PATTERN_POSITION, content);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int event = parser.nextInt();
         String eventData = parser.next();
         position.set(Position.KEY_EVENT, event);
         if (event == 53) {
             position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
         } else {
             position.set(Position.KEY_ALARM, decodeAlarm(event));
         }
 
         position.setTime(parser.nextDateTime());
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
 
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.set(Position.KEY_HDOP, parser.nextDouble());
 
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setCourse(parser.nextInt());
         position.setAltitude(parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.nextInt());
+        // Fix: Odometer value can exceed Integer.MAX_VALUE
+        position.set(Position.KEY_ODOMETER, parser.nextLong());
 
         position.setNetwork(new Network(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
 
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
         int input = parser.nextHexInt();
         int output = parser.nextHexInt();
         position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
         position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
         position.set(Position.KEY_INPUT, input);
         position.set(Position.KEY_OUTPUT, output);
 
         position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
         position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
         if (parser.hasNext()) {
             String[] adc = parser.next().split("\\|");
             for (int i = 1; i < adc.length; i++) {
+                // Check if the adc value is empty before parsing
+                if (!adc[i].isEmpty()) {
                     position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
                 }
             }
+        }
 
         if (parser.hasNext()) {
-            String[] fuels = parser.next().split("\\|");
+            String data = parser.next();
+            if (data != null && !data.isEmpty()) {
+                String[] fuels = data.split("\\|");
                 for (String fuel : fuels) {
+                    if (fuel.length() >= 3) { // Ensure string has at least index (2 chars) and value (1 char)
                         int index = Integer.parseInt(fuel.substring(0, 2));
                         int value = Integer.parseInt(fuel.substring(2), 16);
                         position.set("fuel" + index, value * 0.1);
                     }
                 }
+            }
+        }
 
         if (parser.hasNext()) {
-            String[] temperatures = parser.next().split("\\|");
+            String data = parser.next();
+            if (data != null && !data.isEmpty()) {
+                String[] temperatures = data.split("\\|");
                 for (String temperature : temperatures) {
+                     if (temperature.length() >= 3) { // Ensure string has at least index (2 chars) and value (1 char)
                         int index = Integer.parseInt(temperature.substring(0, 2));
                         int value = Integer.parseInt(temperature.substring(2), 16);
                         double convertedValue = BitUtil.to(value, 15);
                         if (BitUtil.check(value, 15)) {
                             convertedValue = -convertedValue;
                         }
                         position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
                     }
                 }
+            }
+        }
 
-        if (parser.hasNextAny(9)) {
+        // Check if there are enough fields for CAN data before parsing
+        if (parser.hasNext(9)) { // Check if at least 9 fields might exist
             position.set(Position.KEY_RPM, parser.nextInt());
             position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
             position.set("airFlow", parser.nextInt());
             position.set("airPressure", parser.nextInt());
-            if (parser.hasNext()) {
-                position.set("airTemp", parser.nextInt() - 40);
+            if (parser.hasNext()) { // Air Temp might be optional
+                 String airTempStr = parser.next();
+                 if (airTempStr != null && !airTempStr.isEmpty()) {
+                    position.set("airTemp", Integer.parseInt(airTempStr) - 40);
                  }
-            position.set(Position.KEY_THROTTLE, parser.nextInt());
-            if (parser.hasNext()) {
-                position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
             }
-            if (parser.hasNext()) {
-                position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
+            if (parser.hasNext()) { // Throttle might be optional
+                 String throttleStr = parser.next();
+                 if (throttleStr != null && !throttleStr.isEmpty()) {
+                    position.set(Position.KEY_THROTTLE, Integer.parseInt(throttleStr));
+                 }
+            }
+            if (parser.hasNext()) { // Coolant Temp might be optional
+                 String coolantTempStr = parser.next();
+                 if (coolantTempStr != null && !coolantTempStr.isEmpty()) {
+                    position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(coolantTempStr) - 40);
+                 }
             }
-            position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
+            if (parser.hasNext()) { // Fuel Consumption might be optional
+                 String fuelConsumptionStr = parser.next();
+                 if (fuelConsumptionStr != null && !fuelConsumptionStr.isEmpty()) {
+                    position.set(Position.KEY_FUEL_CONSUMPTION, Integer.parseInt(fuelConsumptionStr) * 0.1);
                  }
+            }
+             if (parser.hasNext()) { // Fuel Level might be optional
+                 String fuelLevelStr = parser.next();
+                 if (fuelLevelStr != null && !fuelLevelStr.isEmpty()) {
+                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuelLevelStr));
+                 } else {
+                     // Handle case like R187 where fuel level is empty: ,,
+                     // We might want to set it to null explicitly or let it be unset
+                     // Position.set() handles null values correctly (doesn't add the attribute).
+                     // So just ensuring we don't parse an empty string is sufficient.
+                 }
+             }
+        }
+
 
         if (parser.hasNext()) {
-            position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
+            String hoursStr = parser.next();
+            // Ensure hours string is not empty before parsing
+            if (hoursStr != null && !hoursStr.isEmpty()) {
+                position.set(Position.KEY_HOURS, Long.parseLong(hoursStr) * 1000L);
+            }
         }
 
         return position;
     }
\ No newline at end of file
