diff --git a/tmp/29d249ba-ad91-44da-9633-3d0429d0e12b_buggy.java b/tmp/2535096a-efb0-4653-a3b3-c32da8052056_fixed.java
index cd6f89c..765d66d 100644
--- a/tmp/29d249ba-ad91-44da-9633-3d0429d0e12b_buggy.java
+++ b/tmp/2535096a-efb0-4653-a3b3-c32da8052056_fixed.java
@@ -1,102 +1,162 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
-        long mask = parser.nextHexLong();
+        long mask = parser.nextHexLong(); // Original mask from the message
 
         LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
+        Integer power = parser.nextInt(); // External power voltage reported before location block
 
+        // Parse location block which might contain multiple locations
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            decodeLocation(position, itemParser);
+            decodeLocation(position, itemParser); // Decodes GPS data, time, cell towers etc.
 
             positions.add(position);
         }
 
+        if (positions.isEmpty()) {
+             // Should not happen if PATTERN_ERI matched, but good practice to check
+             return null;
+        }
+
+        // Use the last reported position to add further details like odometer, battery etc.
         Position position = positions.getLast();
 
+        // Advance the main parser past the location block that was just processed by itemParser
         skipLocation(parser);
 
+        // Set power attribute from the value parsed before the location block
         if (power != null) {
-            position.set(Position.KEY_POWER, power * 0.001);
+            position.set(Position.KEY_POWER, power * 0.001); // Assuming power is in mV
         }
 
-        if (parser.hasNextAny(12)) {
-
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+        // Attempt to parse optional fields sequentially after the location block
+        // Odometer, Hours, ADC1-3
+        if (parser.hasNext()) { // Odometer
+             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000); // Assuming value is in km
+             if (parser.hasNext()) { // Hours
                  position.set(Position.KEY_HOURS, parseHours(parser.next()));
+                 if (parser.hasNext()) { // ADC1
                      position.set(Position.PREFIX_ADC + 1, parser.next());
+                     if (parser.hasNext()) { // ADC2
                          position.set(Position.PREFIX_ADC + 2, parser.next());
+                         if (parser.hasNext()) { // ADC3
                              position.set(Position.PREFIX_ADC + 3, parser.next());
+                         }
+                     }
+                 }
+             }
+        }
+
+        // Attempt to parse Input, Output status
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
-            if (parser.hasNext(4)) {
+
+        // Attempt to parse Battery Level, followed by either Status (if mask=0) or ERI data (if mask>0)
+        if (parser.hasNext()) { // Check if there's at least a battery field
              position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
-            }
-
-            int index = 0;
-            String[] data = parser.next().split(",");
-
-            index += 1; // device type
 
-            if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+             // Check for Status (if mask is 0) or ERI data (if mask > 0)
+             if (mask == 0) {
+                 // If mask is 0, no extended report information, assume next field is Status
+                 if (parser.hasNext()) {
+                     decodeStatus(position, parser); // Parses the next field as status
                  }
-
-            if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+             } else { // mask > 0, parse Extended Report Information based on mask bits
+                 if (BitUtil.check(mask, 0)) { // Digital Fuel Sensor Data
+                     if (parser.hasNext()) {
+                         String fuelData = parser.next();
+                         try {
+                             // Assign to fuel level; might be overwritten by mask bit 3 later
+                             position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(fuelData, 16));
+                         } catch (NumberFormatException e) {
+                             // Optionally store raw value if parsing fails
+                             // addUnknownField(position, "fuelSensorDataRaw", fuelData);
+                         }
+                     }
+                 }
+                 if (BitUtil.check(mask, 1)) { // Dallas Temperature Sensors
+                     if (parser.hasNext()) {
+                         try {
+                            // Get the count of temperature sensors reported
+                            int deviceCount = parser.nextInt();
                             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                                // Consume sensor ID and type fields
+                                if (parser.hasNext()) { parser.next(); } // Sensor ID (e.g., "28F8A149F69A3C25")
+                                else { break; }
+                                if (parser.hasNext()) { parser.next(); } // Sensor Type (e.g., "1")
+                                else { break; }
+                                // Parse temperature value
+                                if (parser.hasNext()) {
+                                    String tempValue = parser.next(); // e.g., "0190"
+                                    if (!tempValue.isEmpty()) {
+                                        try {
+                                            // Temperature = hexValue * 0.0625
+                                            position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(tempValue, 16) * 0.0625);
+                                        } catch (NumberFormatException e) { /* ignore */ }
                                     }
+                                } else { break; } // Stop if fields run out unexpectedly
                             }
+                         } catch (NumberFormatException e) { /* Ignore potential error parsing deviceCount */ }
                      }
-
-            if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
                  }
-
-            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                 if (BitUtil.check(mask, 2)) { // CAN data field
+                     // Consume the CAN data field if present. Actual parsing might need a dedicated method.
+                     if (parser.hasNext()) { parser.next(); }
+                 }
+                 if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) { // Fuel Level Sensors (LLS)
+                     if (parser.hasNext()) {
+                         try {
+                            // Get the count of LLS devices reported
+                            int deviceCount = parser.nextInt();
                             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                                // Consume sensor type field
+                                if (parser.hasNext()) { parser.next(); } // type
+                                else { break; }
+                                // Parse fuel level if mask bit 3 is set
                                 if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                                    if (parser.hasNext()) {
+                                        // This will overwrite fuel level potentially set by mask bit 0
+                                        position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble());
+                                    } else { break; }
                                 }
+                                // Consume fuel volume if mask bit 4 is set
                                 if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                                    if (parser.hasNext()) { parser.next(); } // volume
+                                    else { break; }
                                 }
                             }
+                         } catch (NumberFormatException e) { /* Ignore potential error parsing deviceCount */ }
                      }
-
-        }
-
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
                  }
+             } // end else (mask > 0)
+        } // end if (parser.hasNext()) for Battery/Status/ERI block
 
+        // Final field should be the device timestamp
         decodeDeviceTime(position, parser);
+
+        // Handle potential cached positions based on ignoreFixTime flag
         if (ignoreFixTime) {
+            // If ignoring older fixes, clear list and add only the latest updated position
             positions.clear();
             positions.add(position);
         }
+        // Otherwise, return the full list. Note that only the last position in the list
+        // will contain the Odometer, Battery, ERI etc. information parsed after the location block.
 
         return positions;
     }
\ No newline at end of file
