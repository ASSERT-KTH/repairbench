diff --git a/tmp/02d2fc76-b18d-4661-b832-8aa80eed5d55_buggy.java b/tmp/5ff8c63a-3751-4e57-99f7-2b3b02b9ec9f_fixed.java
index cd6f89c..4aa1cad 100644
--- a/tmp/02d2fc76-b18d-4661-b832-8aa80eed5d55_buggy.java
+++ b/tmp/5ff8c63a-3751-4e57-99f7-2b3b02b9ec9f_fixed.java
@@ -1,102 +1,147 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
+        // Location block can repeat, parse all occurrences
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
-
             decodeLocation(position, itemParser);
-
             positions.add(position);
         }
 
+        // If no location data was found, we can't proceed
+        if (positions.isEmpty()) {
+             return null;
+        }
+
+        // Use the last position for subsequent data
         Position position = positions.getLast();
 
+        // Skip Cell/Wifi Tower ID field that follows location block
         skipLocation(parser);
 
+        // External Power Voltage
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
-
+        // Optional Fields before Mask data
+        // Check for Odometer
+        if (parser.hasNext()) {
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+        }
+        // Check for Hours
+        if (parser.hasNext()) {
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
+        }
+        // Check for ADC 1, 2, 3
+        if (parser.hasNext()) {
             position.set(Position.PREFIX_ADC + 1, parser.next());
+        }
+        if (parser.hasNext()) {
             position.set(Position.PREFIX_ADC + 2, parser.next());
+        }
+        if (parser.hasNext()) {
             position.set(Position.PREFIX_ADC + 3, parser.next());
+        }
+        // Check for Input/Output (2 fields)
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
-            }
-
-            int index = 0;
-            String[] data = parser.next().split(",");
 
-            index += 1; // device type
+        // Optional Mask-Based Data Fields
+        boolean maskDataParsed = false;
+        if (mask != 0 && parser.hasNext()) { // Check if mask is non-zero and there's at least one field for device type
+            maskDataParsed = true;
+            parser.nextInt(); // Consume device type field (usually '1' or '2' based on examples)
 
-            if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+            // Parse fields based on mask bits
+            if (BitUtil.check(mask, 0)) { // Digital Fuel Sensor Data
+                if (parser.hasNext()) {
+                    // Example shows "0099" parsed as 153, suggesting hex
+                    position.set(Position.KEY_FUEL_LEVEL, parser.nextHexInt());
+                }
             }
 
-            if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+            if (BitUtil.check(mask, 1)) { // Temperature Sensors
+                if (parser.hasNext()) { // Check for count field
+                    int deviceCount = parser.nextInt();
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                        if (parser.hasNext()) {
+                            parser.next(); // skip id
+                        }
+                        if (parser.hasNext()) {
+                             parser.next(); // skip type
+                        }
+                        if (parser.hasNext()) {
+                            String tempData = parser.next();
+                            if (!tempData.isEmpty()) {
+                                // Formula from original code
+                                position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(tempData, 16) * 0.0625);
+                            }
+                        }
                     }
                 }
             }
 
-            if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+            if (BitUtil.check(mask, 2)) { // CAN Data
+                if (parser.hasNext()) {
+                    parser.next(); // Skip CAN data field
+                }
             }
 
-            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) { // Fuel Level / Volume Sensors
+                if (parser.hasNext()) { // Check for count field
+                    int deviceCount = parser.nextInt();
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                        if (parser.hasNext()) {
+                            parser.next(); // skip type
+                        }
+                        if (BitUtil.check(mask, 3)) { // Fuel Level
+                            if (parser.hasNext()) {
+                                // Assume double based on other examples with this mask bit
+                                position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble());
+                            }
+                        }
+                        if (BitUtil.check(mask, 4)) { // Volume
+                            if (parser.hasNext()) {
+                                parser.next(); // Skip volume field
+                            }
                         }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
                     }
                 }
             }
-
         }
 
-        if (parser.hasNext()) {
+        // Battery Level: Parse only if mask data wasn't present (common pattern in other messages like GTFRI)
+        if (!maskDataParsed && parser.hasNext()) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         }
 
+        // Device Time (should be the last field before checksum)
         decodeDeviceTime(position, parser);
+
+        // Handle potential time rollback
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
