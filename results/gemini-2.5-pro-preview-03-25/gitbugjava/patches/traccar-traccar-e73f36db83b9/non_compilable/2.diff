diff --git a/tmp/fbc4a37a-ca29-4718-acd4-d6cee3f9ce3c_buggy.java b/tmp/ead43845-8691-474b-b074-7c21904deebf_fixed.java
index cd6f89c..8cb0635 100644
--- a/tmp/fbc4a37a-ca29-4718-acd4-d6cee3f9ce3c_buggy.java
+++ b/tmp/ead43845-8691-474b-b074-7c21904deebf_fixed.java
@@ -1,102 +1,213 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.Parser;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.util.LinkedList;
+
+// ... other imports and context assumed from the original code ...
+
+// Assume Gl200BaseProtocolDecoder provides necessary methods and fields like:
+// getProtocolName(), getDeviceSession(), decodeLocation(), parseHours(), decodeStatus(), decodeDeviceTime()
+// PATTERN_ERI, PATTERN_LOCATION, ignoreFixTime
+// Assume decodeStatus(Position position, int statusValue) signature works.
+
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
+        // Regex might need adjustment based on actual PATTERN_ERI definition to capture fields correctly
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next()); // IMEI
         if (deviceSession == null) {
             return null;
         }
 
-        long mask = parser.nextHexLong();
+        long mask = parser.nextHexLong(); // Mask
 
         LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
+        Integer power = parser.nextInt(); // Reserved / Power
 
-        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
+        // Location Data Block (assuming parser.next() gets the whole block)
+        // Check if location field exists before creating itemParser
+        if (parser.hasNext()) {
+            String locationBlock = parser.next();
+            if (locationBlock != null && !locationBlock.isEmpty()) {
+                // Use a pattern that splits the location block by commas but handles potential internal structures if needed
+                // Assuming PATTERN_LOCATION works on the whole block string for find() loop
+                Parser itemParser = new Parser(PATTERN_LOCATION, locationBlock);
                 while (itemParser.find()) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
-
-            decodeLocation(position, itemParser);
-
+                    decodeLocation(position, itemParser); // Parses location fields from itemParser match
                     positions.add(position);
                 }
+            }
+        }
 
-        Position position = positions.getLast();
+        // If no positions were created (e.g., empty/invalid location block), create a basic one
+        if (positions.isEmpty()) {
+             Position position = new Position(getProtocolName());
+             position.setDeviceId(deviceSession.getDeviceId());
+             positions.add(position);
+        }
 
-        skipLocation(parser);
+        Position position = positions.getLast(); // Use the last position for subsequent attributes
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        // Parse optional fixed fields after location block
+        if (parser.hasNext()) {
+            position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000); // Odometer
+        }
+        if (parser.hasNext()) {
+            position.set(Position.KEY_HOURS, parseHours(parser.next())); // Hours
+        }
+        if (parser.hasNext()) {
+            position.set(Position.PREFIX_ADC + 1, parser.next()); // ADC1
+        }
+        if (parser.hasNext()) {
+            position.set(Position.PREFIX_ADC + 2, parser.next()); // ADC2
+        }
+        if (parser.hasNext()) {
+            position.set(Position.PREFIX_ADC + 3, parser.next()); // ADC3
+        }
 
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-            position.set(Position.KEY_HOURS, parseHours(parser.next()));
-            position.set(Position.PREFIX_ADC + 1, parser.next());
-            position.set(Position.PREFIX_ADC + 2, parser.next());
-            position.set(Position.PREFIX_ADC + 3, parser.next());
+        // Input / Output
         if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
+            Integer input = parser.nextHexInt();
+            Integer output = parser.nextHexInt();
+            if (input != null) {
+                position.set(Position.KEY_INPUT, input);
+            }
+            if (output != null) {
+                 position.set(Position.KEY_OUTPUT, output);
             }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
         }
 
+        // Battery Level / Status
+        Integer batteryLevel = null;
+        Integer statusValue = null; // Store status value for potential fuel parsing
+        if (parser.hasNext(2)) {
+            batteryLevel = parser.nextInt(); // Parse battery first
+            statusValue = parser.nextHexInt(); // Parse status as Hex Int second
+
+            if (batteryLevel != null) {
+                position.set(Position.KEY_BATTERY_LEVEL, batteryLevel);
+            }
+            if (statusValue != null) {
+                // Assuming decodeStatus takes Integer value.
+                // If decodeStatus needs the parser object, this logic must change.
+                decodeStatus(position, statusValue);
+            }
+        }
+
+        // Check if extended data field exists (heuristic: check if 3+ fields remain before time/checksum)
+        // Needs at least time and checksum (2), plus the extended data (1) = 3
+        boolean extendedDataPresent = parser.hasNext(3);
+
+        if (extendedDataPresent) {
             int index = 0;
-            String[] data = parser.next().split(",");
+            String extendedData = parser.next(); // Consume the extended data field
+            String[] data = extendedData.split(",");
 
-            index += 1; // device type
+            // Skip device type/info field at index 0 if present
+            if (data.length > index) {
+                index++;
+            }
 
-            if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+            if (BitUtil.check(mask, 0)) { // Digital Fuel Sensor Data Field Index
+                 if (data.length > index) { index++; } // Skip field
             }
 
+            // Temperature sensor parsing
             if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                 if (data.length > index) { // Check index valid for count
+                    try {
+                        int deviceCount = Integer.parseInt(data[index++]); // Read count, increment index
                         for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                            // Skip ID & Type fields if they exist
+                            if (data.length > index) { index++; } // Skip ID
+                            if (data.length > index) { index++; } // Skip Type
+
+                            // Read value field if it exists
+                            if (data.length > index && !data[index].isEmpty()) {
+                                try {
+                                    // Value is at current index, parse it
+                                    position.set(Position.PREFIX_TEMP + i, Integer.parseInt(data[index], 16) * 0.0625);
+                                } catch (NumberFormatException e) { /* ignore temp parse error */ }
+                                index++; // Increment index AFTER parsing/attempting value
+                            } else if (data.length > index) {
+                                // Increment even if value is empty or missing to move past this sensor's value field
+                                index++;
+                            }
                         }
+                    } catch (NumberFormatException e) { /* ignore count parse error */ }
                  }
             }
 
+            // CAN data parsing
             if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                // Skip CAN data field index
+                 if (data.length > index) { index++; }
             }
 
+            // Fuel level/volume parsing
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (data.length > index) { // Check index valid for count
+                    try {
+                        int deviceCount = Integer.parseInt(data[index++]); // Read count, increment index
                         for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                            // Skip Type field if it exists
+                            if (data.length > index) { index++; } // Skip Type
+
+                            boolean fuelLevelPresent = BitUtil.check(mask, 3);
+                            boolean fuelVolumePresent = BitUtil.check(mask, 4);
+                            boolean consumedIndex = false; // Track if index was consumed for this device
+
+                            if (fuelLevelPresent) {
+                                // Read fuel level field if it exists
+                                if (data.length > index) {
+                                    try {
+                                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index]));
+                                    } catch (NumberFormatException e) { /* ignore */ }
+                                    index++; // Increment index after reading/skipping fuel level
+                                    consumedIndex = true;
                                 }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
                             }
+                            if (fuelVolumePresent) {
+                                // Skip volume field if it exists
+                                // Increment only if fuel level wasn't present or didn't consume index
+                                if (data.length > index && !consumedIndex) {
+                                     index++;
+                                }
+                            }
+                        }
+                    } catch (NumberFormatException e) { /* ignore count parse error */ }
                 }
             }
-
         }
 
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+        // Fallback fuel level check: If mask bit 3 (Fuel Level) is OFF, but mask bit 0 (Digital Fuel Sensor) is ON,
+        // and fuel level attribute is not already set, use the 'status' field value as fuel level.
+        if (!BitUtil.check(mask, 3) && BitUtil.check(mask, 0) && statusValue != null
+                && !position.hasAttribute(Position.KEY_FUEL_LEVEL)) {
+            position.set(Position.KEY_FUEL_LEVEL, statusValue.doubleValue());
         }
 
+        // Device Time is expected to be the next field after optional extended data
         decodeDeviceTime(position, parser);
-        if (ignoreFixTime) {
-            positions.clear();
-            positions.add(position);
+
+        // ignoreFixTime logic (keep only last position)
+        if (ignoreFixTime && positions.size() > 1) {
+            Position lastPosition = positions.getLast(); // Keep last position
+            positions.clear(); // Clear the list
+            positions.add(lastPosition); // Add the last one back
         }
 
-        return positions;
+        return positions; // Return the list (may contain one or more positions)
     }
\ No newline at end of file
