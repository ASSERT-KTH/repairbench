diff --git a/tmp/4f304769-5f9b-4f7f-b239-b1a00593da5b_buggy.java b/tmp/c814744a-2218-46b5-9967-f9c49713ca93_fixed.java
index cd6f89c..749744c 100644
--- a/tmp/4f304769-5f9b-4f7f-b239-b1a00593da5b_buggy.java
+++ b/tmp/c814744a-2218-46b5-9967-f9c49713ca93_fixed.java
@@ -1,102 +1,139 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
+        // If no positions were decoded from location data, return null or handle appropriately
+        if (positions.isEmpty()) {
+            // Example: Create a basic position if needed, or return null based on protocol requirements
+            // For now, assume getLast() will fail if positions is empty, let's return null early
+             // Or potentially create a position here if some data outside location block is expected
+             return null; // Or handle as per protocol spec if location is optional but other data isn't
+        }
+
+
         Position position = positions.getLast();
 
         skipLocation(parser);
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        // Check for minimum fields required for the following block: Odometer, Hours, ADC1-3, ExtendedData
+        if (parser.hasNextAny(6)) {
 
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());
             position.set(Position.PREFIX_ADC + 3, parser.next());
             if (parser.hasNext(2)) {
                 position.set(Position.KEY_INPUT, parser.nextHexInt());
                 position.set(Position.KEY_OUTPUT, parser.nextHexInt());
             }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+            if (parser.hasNext(4)) { // Check must be done *before* parsing battery/status
+                Integer batteryLevel = parser.nextInt(); // Parse battery level first
+                if (batteryLevel != null) {
+                    position.set(Position.KEY_BATTERY_LEVEL, batteryLevel);
                 }
+                decodeStatus(position, parser); // Then parse status
+            }
+
 
+            // Check if there's still a field for extended data before trying to parse it
+            if (parser.hasNext()) {
                 int index = 0;
                 String[] data = parser.next().split(",");
 
                 index += 1; // device type
 
-            if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                if (BitUtil.check(mask, 0)) { // digital fuel sensor data
+                    if (index < data.length && !data[index].isEmpty()) {
+                        // Assuming digital fuel sensor value maps to fuel level key based on test case
+                        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(data[index], 16));
+                    }
+                    index += 1;
                 }
 
-            if (BitUtil.check(mask, 1)) {
+                if (BitUtil.check(mask, 1)) { // temperature sensors
+                    if (index < data.length && !data[index].isEmpty()) {
                         int deviceCount = Integer.parseInt(data[index++]);
                         for (int i = 1; i <= deviceCount; i++) {
                             index += 1; // id
                             index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                            if (index < data.length && !data[index].isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index], 16) * 0.0625);
                             }
+                            index++; // Consume temperature value index
+                        }
+                    } else {
+                         index++; // Consume device count index even if empty/missing
                     }
                 }
 
-            if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                if (BitUtil.check(mask, 2)) { // can data
+                    // Placeholder: If CAN data is present, consume its index/data
+                     if (index < data.length) {
+                         index += 1; // Assuming CAN data is one comma-separated field or needs complex parsing
+                     }
                 }
 
-            if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+                if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) { // Fuel level / Fuel volume sensors
+                     if (index < data.length && !data[index].isEmpty()) {
                         int deviceCount = Integer.parseInt(data[index++]);
                         for (int i = 1; i <= deviceCount; i++) {
                             index += 1; // type
                             if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                                if (index < data.length && !data[index].isEmpty()) {
+                                    position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index]));
+                                }
+                                index++; // Consume fuel level index
                             }
                             if (BitUtil.check(mask, 4)) {
+                                // Placeholder: If volume is present, consume its index
+                                if (index < data.length) {
                                      index += 1; // volume
                                 }
                             }
                         }
-
+                    } else {
+                         index++; // Consume device count index even if empty/missing
+                    }
+                }
             }
 
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         }
 
+        // Removed the potentially incorrect battery parsing block here
+
         decodeDeviceTime(position, parser);
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
