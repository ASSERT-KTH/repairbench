diff --git a/tmp/78b164eb-4e98-443b-b65c-ebeff2a49e0f_buggy.java b/tmp/c4e96770-2799-47eb-9909-07977471f8d9_fixed.java
index cd6f89c..2edf258 100644
--- a/tmp/78b164eb-4e98-443b-b65c-ebeff2a49e0f_buggy.java
+++ b/tmp/c4e96770-2799-47eb-9909-07977471f8d9_fixed.java
@@ -1,102 +1,181 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
-        long mask = parser.nextHexLong();
+        long mask = parser.nextHexLong(0); // Use default 0 if empty/invalid
 
         LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
+        Integer power = parser.nextInt(); // Handles potential empty string
 
-        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
+        // Use try-with-resources for itemParser if it implemented AutoCloseable, but it doesn't
+        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next()); // Consumes the location data field
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            decodeLocation(position, itemParser);
+            decodeLocation(position, itemParser); // Parses fields within the location data
 
             positions.add(position);
         }
 
+        // Check if any position was actually decoded
+        if (positions.isEmpty()) {
+            return null; // No valid location data found
+        }
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        // Note: skipLocation(parser) from original code removed as parser is already past location data
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        // Optional fields parsing
+        String statusValue = null;
+        String dataField = null;
+        boolean statusUsedForFuel = false; // Flag to track if statusValue was used for fuel
 
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+        // Safely parse optional fields using hasNext() checks
+        if (parser.hasNext()) { // Odometer
+            position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
+        }
+        if (parser.hasNext()) { // Hours
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
+        }
+        if (parser.hasNext()) { // ADC1
             position.set(Position.PREFIX_ADC + 1, parser.next());
+        }
+        if (parser.hasNext()) { // ADC2
             position.set(Position.PREFIX_ADC + 2, parser.next());
+        }
+        if (parser.hasNext()) { // ADC3
             position.set(Position.PREFIX_ADC + 3, parser.next());
-            if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+        if (parser.hasNext(2)) { // Input, Output
+            position.set(Position.KEY_INPUT, parser.nextHexInt(0));
+            position.set(Position.KEY_OUTPUT, parser.nextHexInt(0));
+        }
+        if (parser.hasNext(2)) { // Battery, Status Field
+            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
+            statusValue = parser.next(); // Capture the field potentially containing status or fuel
+        }
+
+        // Check for the comma-separated data field (only if mask suggests it might exist)
+        if (BitUtil.isAnySet(mask, 0b11111) && parser.hasNext()) { // Mask bits 0-4 relate to the data field
+            dataField = parser.next();
         }
 
+        // Process dataField based on mask (sets fuel level if mask bits 3 or 4 are set)
+        if (dataField != null) {
+            String[] data = dataField.split(",");
             int index = 0;
-            String[] data = parser.next().split(",");
 
-            index += 1; // device type
+            // Field 0: device type (always present in this field?) - skip
+            if (data.length > index) { index += 1; }
 
+            // Field 1: digital fuel sensor data (just skip index, handled later if necessary)
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                if (data.length > index) { index += 1; }
             }
 
+            // Field 2: temperature sensor data
             if (BitUtil.check(mask, 1)) {
+                 if (data.length > index) { // Check if deviceCount exists
+                     try {
                          int deviceCount = Integer.parseInt(data[index++]);
                          for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                             // Safely skip id and type
+                             if (data.length > index) { index += 1; } else { break; } // id
+                             if (data.length > index) { index += 1; } else { break; } // type
+                             // Parse temperature value
+                             if (data.length > index) {
+                                 String tempValue = data[index++];
+                                 if (!tempValue.isEmpty()) {
+                                     // Use parseShort to avoid potential overflow with Integer.parseInt for hex short
+                                     position.set(Position.PREFIX_TEMP + i, Short.parseShort(tempValue, 16) * 0.0625);
                                  }
+                             } else { break; } // Avoid out of bounds if data is short
+                         }
+                     } catch (RuntimeException e) { /* ignore parsing errors in this sub-section */ }
                  }
             }
 
+            // Field 3: can data
             if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                 if (data.length > index) { index += 1; } // skip can data string
             }
 
+            // Field 4/5: Fuel level / volume
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+                if (data.length > index) { // Check if deviceCount exists
+                    try {
                         int deviceCount = Integer.parseInt(data[index++]);
                         for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                             // Safely skip type
+                             if (data.length > index) { index += 1; } else { break; } // type
+                             // Parse fuel level if mask bit 3 is set
                              if (BitUtil.check(mask, 3)) {
+                                if (data.length > index) {
                                     position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                                } else { break; }
                              }
+                            // Skip volume if mask bit 4 is set
                             if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                                if (data.length > index) { index += 1; } // volume
+                                else { break; }
                             }
                         }
+                    } catch (RuntimeException e) { /* ignore parsing errors in this sub-section */ }
                 }
+            }
+        } // end dataField processing
 
+        // Special Case: If fuel level was NOT set by dataField (mask bits 3/4)
+        // AND mask bit 0 (digital fuel) is set, THEN try using statusValue as hex fuel.
+        if (position.get(Position.KEY_FUEL_LEVEL) == null && statusValue != null && BitUtil.check(mask, 0)) {
+            try {
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(statusValue, 16));
+                statusUsedForFuel = true; // Mark statusValue as used for fuel
+            } catch (NumberFormatException e) {
+                // Ignore: statusValue was not a valid hex fuel level
+            }
+        }
+
+        // If statusValue was captured BUT was NOT used for fuel, treat it as standard status.
+        // The original code called decodeStatus(position, parser) which isn't possible here directly.
+        // We will set KEY_STATUS if statusValue is a valid hex integer.
+        if (statusValue != null && !statusUsedForFuel) {
+            try {
+                position.set(Position.KEY_STATUS, Integer.parseInt(statusValue, 16));
+                // Note: This simplified status handling might miss details from original decodeStatus.
+            } catch (NumberFormatException e) {
+                // Ignore: statusValue was not valid hex status either
+            }
         }
 
+        // Final optional battery level check (present in original code)
         if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+            // This might overwrite the battery level set earlier if it exists.
+            // Keep consistent with original logic for now.
+            Integer finalBattery = parser.nextInt();
+            if (finalBattery != null) {
+                position.set(Position.KEY_BATTERY_LEVEL, finalBattery);
+            }
         }
 
-        decodeDeviceTime(position, parser);
+        decodeDeviceTime(position, parser); // Parse timestamp if available
         if (ignoreFixTime) {
-            positions.clear();
+            positions.clear(); // Keep only the last position if ignoreFixTime is true
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
