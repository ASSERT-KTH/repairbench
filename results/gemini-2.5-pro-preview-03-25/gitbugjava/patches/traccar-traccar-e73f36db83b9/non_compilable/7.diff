diff --git a/tmp/cea7cea6-5c44-4530-ac5e-b1989224d7a9_buggy.java b/tmp/b7f723a3-2843-4fc3-828c-a2c4f0525787_fixed.java
index cd6f89c..f83e29e 100644
--- a/tmp/cea7cea6-5c44-4530-ac5e-b1989224d7a9_buggy.java
+++ b/tmp/b7f723a3-2843-4fc3-828c-a2c4f0525787_fixed.java
@@ -1,102 +1,180 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
+        // If no positions were decoded from location data, return null or handle error
+        if (positions.isEmpty()) {
+             // Or potentially create a basic position if other data exists? Depends on protocol spec.
+             return null;
+        }
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        // skipLocation(parser); // This was incorrect, fields are parsed sequentially below
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        Integer fuelLevelHex = null; // Variable to store potential hex fuel parsed later
+
+        if (parser.hasNextAny(12)) { // Check if Odometer to Status fields exist
 
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());
             position.set(Position.PREFIX_ADC + 3, parser.next());
             if (parser.hasNext(2)) {
                 position.set(Position.KEY_INPUT, parser.nextHexInt());
                 position.set(Position.KEY_OUTPUT, parser.nextHexInt());
             }
             if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Battery Level 1
+                decodeStatus(position, parser); // Status
             }
 
+            // Parse Extra Data based on mask
+            if (parser.hasNext()) { // Check if Extra Data field exists
+                String extraData = parser.next(); // Consume Extra Data field
+                // Only parse extraData if it's not null and not empty
+                if (extraData != null && !extraData.isEmpty()) {
                     int index = 0;
-            String[] data = parser.next().split(",");
+                    String[] data = extraData.split(",");
 
-            index += 1; // device type
+                    // Assuming the first field is always device type if extraData is present
+                    if (index < data.length) {
+                        index += 1; // device type (Skip)
+                    }
 
                     if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                        // Original logic just incremented index. Keep it, but ensure index is valid.
+                        if (index < data.length) {
+                            index += 1; // digital fuel sensor data field (skipped)
+                        }
                     }
 
                     if (BitUtil.check(mask, 1)) {
+                        if (index < data.length) { // Check index before reading deviceCount
                             int deviceCount = Integer.parseInt(data[index++]);
                             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                                // Need 3 fields: id, type, temp value
+                                if (index + 2 < data.length) {
+                                    index += 1; // id (skipped)
+                                    index += 1; // type (skipped)
+                                    String tempValue = data[index++];
+                                    if (!tempValue.isEmpty()) {
+                                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(tempValue, 16) * 0.0625);
+                                    }
+                                } else {
+                                    break; // Not enough fields left in data array
+                                }
                             }
                         }
                     }
 
                     if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                        if (index < data.length) {
+                            index += 1; // can data (skipped)
+                        }
                     }
 
                     if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
+                        if (index < data.length) { // Check index before reading deviceCount
                             int deviceCount = Integer.parseInt(data[index++]);
                             for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                                // Need at least type field
+                                if (index < data.length) {
+                                    index += 1; // type (skipped)
                                     if (BitUtil.check(mask, 3)) {
+                                        // Need fuel level field
+                                        if (index < data.length) {
                                             position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                                        } else { break; } // Not enough fields
                                     }
                                     if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                                         // Need volume field
+                                         if (index < data.length) {
+                                            index += 1; // volume (skipped)
+                                         } else { break; } // Not enough fields
+                                    }
+                                } else {
+                                    break; // Not enough fields left in data array
+                                }
                             }
                         }
                     }
-
                 }
+            } // End of Extra Data parsing
+        } // End of if (parser.hasNextAny(12))
 
+        // Handle fields potentially after Extra Data (BatteryLevel2, FuelLevelHex?, DeviceTime)
+        // This logic specifically handles the case where mask bit 0 is set,
+        // inserting a hex fuel level between BatteryLevel2 and DeviceTime.
         if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+            String field1 = parser.peekNext();
+            if (field1.matches("\\d+")) { // Field 1 looks like Battery Level 2 (numeric)
+                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Consume and set Battery Level 2
+
+                // If mask bit 0 is set, check if the *next* field is the hex fuel level
+                if (BitUtil.check(mask, 0) && parser.hasNext()) {
+                    String field2 = parser.peekNext();
+                    if (field2.matches("^[\\p{XDigit}]+$")) { // Field 2 looks like hex fuel
+                        // Check if it's followed by a 14-digit timestamp
+                        if (parser.hasNext(2) && parser.peekNext(2).matches("^\\d{14}$")) {
+                             fuelLevelHex = parser.nextHexInt(); // Consume hex fuel
+                             position.set(Position.KEY_FUEL_LEVEL, fuelLevelHex); // Set fuel level from hex value
+                        } else {
+                             // It looked like hex fuel, but wasn't followed by time. Consume it anyway.
+                             parser.next();
+                        }
+                    }
+                    // If field2 doesn't look hex, do nothing, let decodeDeviceTime handle the next field
+                }
+            } else if (BitUtil.check(mask, 0) && field1.matches("^[\\p{XDigit}]+$")) {
+                 // Field1 wasn't numeric battery, but mask bit 0 is set and field1 looks hex.
+                 // Assume this is fuel level directly (no Battery Level 2 reported).
+                 if (parser.hasNext(2) && parser.peekNext(2).matches("^\\d{14}$")) { // Check if followed by time
+                     fuelLevelHex = parser.nextHexInt(); // Consume hex fuel
+                     position.set(Position.KEY_FUEL_LEVEL, fuelLevelHex); // Set fuel level
+                 } else {
+                     // Hex field not followed by time. Consume it.
+                     parser.next();
+                 }
+            } else {
+                // Field1 is neither expected Battery Level 2 nor Hex Fuel. Consume it.
+                parser.next();
+            }
         }
+        // If fuelLevelHex was parsed from extraData (mask bit 3), this won't overwrite it unless null
 
-        decodeDeviceTime(position, parser);
+        decodeDeviceTime(position, parser); // Parse device time (should be the next field now)
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
