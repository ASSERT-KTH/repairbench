diff --git a/tmp/3d5756ca-ac1d-45b9-be07-5cd75a364945_buggy.java b/tmp/3b650d06-03d0-433a-b6b4-cb9c8b9312d7_fixed.java
index cd6f89c..c080c56 100644
--- a/tmp/3d5756ca-ac1d-45b9-be07-5cd75a364945_buggy.java
+++ b/tmp/3b650d06-03d0-433a-b6b4-cb9c8b9312d7_fixed.java
@@ -1,102 +1,156 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
+        Integer power = parser.nextInt(); // External power voltage
 
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
+        // If no positions found from location data, return null or handle error
+        if (positions.isEmpty()) {
+             // Or potentially create a basic position if other data exists
+             return null;
+        }
+
         Position position = positions.getLast();
 
-        skipLocation(parser);
+        // Skip the location part in the main parser if not already consumed by itemParser logic
+        // Assuming PATTERN_ERI might capture location into a group that parser.next() already consumed for itemParser.
+        // If skipLocation is necessary, ensure it doesn't consume fields parsed below.
+        // skipLocation(parser); // Potentially remove or adjust depending on PATTERN_ERI and skipLocation implementation
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNextAny(12)) {
+        // Check if the extended data block exists
+        if (parser.hasNext()) { // Use simple hasNext initially, more specific checks later
 
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+            // Parse fixed extended fields first
+            if (parser.hasNext()) {
+                position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
+            }
+            if (parser.hasNext()) {
                 position.set(Position.KEY_HOURS, parseHours(parser.next()));
+            }
+            if (parser.hasNext()) {
                 position.set(Position.PREFIX_ADC + 1, parser.next());
+            }
+            if (parser.hasNext()) {
                 position.set(Position.PREFIX_ADC + 2, parser.next());
+            }
+            if (parser.hasNext()) {
                 position.set(Position.PREFIX_ADC + 3, parser.next());
+            }
             if (parser.hasNext(2)) {
-                position.set(Position.KEY_INPUT, parser.nextHexInt());
-                position.set(Position.KEY_OUTPUT, parser.nextHexInt());
+                position.set(Position.KEY_INPUT, parser.nextHexInt(0));
+                position.set(Position.KEY_OUTPUT, parser.nextHexInt(0));
             }
-            if (parser.hasNext(4)) {
-                position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-                decodeStatus(position, parser);
+            if (parser.hasNext()) { // Check for battery before mask data
+                 position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0)); // Internal battery percentage
             }
 
-            int index = 0;
-            String[] data = parser.next().split(",");
-
-            index += 1; // device type
+            // Parse fields based on the mask
+            // Note: Removed the assumption that mask data is in a single sub-field
 
+            // Bit 0: Digital Fuel Sensor
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                if (parser.hasNext()) {
+                    try {
+                        // Assuming the value represents fuel level and is hex encoded
+                        position.set(Position.KEY_FUEL_LEVEL, parser.nextHexInt());
+                    } catch (Exception e) {
+                        // Log error or handle non-hex/missing value
+                         android.util.Log.w(Gl200TextProtocolDecoder.class.getSimpleName(), "Failed to parse fuel level (mask 0): " + e.getMessage());
+                    }
+                }
             }
 
+            // Bit 1: Temperature Sensors
             if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (parser.hasNext()) {
+                    int deviceCount = parser.nextInt(0);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                        if (parser.hasNext()) parser.next(); // Skip id
+                        if (parser.hasNext()) parser.next(); // Skip type
+                        if (parser.hasNext()) {
+                            String tempValue = parser.next();
+                            if (tempValue != null && !tempValue.isEmpty()) {
+                                try {
+                                    position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(tempValue, 16) * 0.0625);
+                                } catch (NumberFormatException e) {
+                                     android.util.Log.w(Gl200TextProtocolDecoder.class.getSimpleName(), "Failed to parse temperature: " + e.getMessage());
+                                }
+                            }
+                        } else {
+                            break; // Avoid infinite loop if data is truncated
+                        }
                     }
                 }
             }
 
+            // Bit 2: CAN Data (Just skip the field for now)
             if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                if (parser.hasNext()) parser.next(); // Skip CAN data field
             }
 
+            // Bit 3/4: Analog Fuel Sensors
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
+                if (parser.hasNext()) {
+                    int deviceCount = parser.nextInt(0);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                        if (parser.hasNext()) parser.next(); // Skip type
                         if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
+                            if (parser.hasNext()) {
+                                try {
+                                     // Value seems to be double precision percentage
+                                    position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble());
+                                } catch (Exception e) {
+                                     android.util.Log.w(Gl200TextProtocolDecoder.class.getSimpleName(), "Failed to parse fuel level (mask 3): " + e.getMessage());
+                                }
+                            }
                         }
                         if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                            if (parser.hasNext()) parser.next(); // Skip volume
+                        }
+                         if (!parser.hasNext()) {
+                             break; // Avoid infinite loop if data is truncated
                          }
                     }
                 }
-
             }
 
-        if (parser.hasNext()) {
-            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
+            // Assuming Status might be related to mask data or not consistently present
+            // decodeStatus(position, parser); // Removed from here, potentially needs placing after mask data if present
+
         }
 
+        // Removed redundant battery level parsing from here
+
         decodeDeviceTime(position, parser);
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
