diff --git a/tmp/e0d51dd4-c3d6-4bf7-b6f8-a15ac364beac_buggy.java b/tmp/5e99364a-51cf-4942-893e-6e48214ae589_fixed.java
index 2a0dceb..b438041 100644
--- a/tmp/e0d51dd4-c3d6-4bf7-b6f8-a15ac364beac_buggy.java
+++ b/tmp/5e99364a-51cf-4942-893e-6e48214ae589_fixed.java
@@ -1,68 +1,130 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            // Check array bounds before accessing elements in the loop
+            if (index + 5 >= values.length) {
+                 break; // Not enough elements for a full cell tower entry
+            }
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
+        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
+        }
 
+        // Check bounds before accessing battery, archive, index, status
+        if (index < values.length) {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+        }
+        if (index < values.length) {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        }
+        if (index < values.length) {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        }
+        if (index < values.length) {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        }
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        // Optional field check (e.g., collaborative network)
+        if (index < values.length && values[index].length() == 3) {
+            // Consider adding a check if values[index] is numeric if that's guaranteed
+            index += 1;
         }
 
+        // Date and Time
+        if (index + 1 < values.length) { // Ensure fields exist
+            String date = values[index];
+            String time = values[index + 1];
+            // Check if both date and time strings are non-empty before parsing
+            if (!date.isEmpty() && !time.isEmpty()) {
                 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+                // ParseException is still possible if format is wrong, but empty string is handled
+                position.setTime(dateFormat.parse(date + time));
+            }
+            index += 2; // Consume date and time fields even if they were empty
+        } else {
+             // Not enough fields left for date/time, advance index past theoretical positions if possible
+             if (index < values.length) {
+                 index++;
+             }
+             if (index < values.length) {
+                 index++;
+             }
+        }
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+        // Latitude
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setLatitude(Double.parseDouble(values[index]));
+        }
+        index++;
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        // Longitude
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setLongitude(Double.parseDouble(values[index]));
+        }
+        index++;
 
-        position.setValid(values[index++].equals("1"));
+        // Speed
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+        }
+        index++;
+
+        // Course
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setCourse(Double.parseDouble(values[index]));
+        }
+        index++;
+
+        // Satellites
+        if (index < values.length && !values[index].isEmpty()) {
+            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+        }
+        index++;
+
+        // Validity
+        if (index < values.length && !values[index].isEmpty()) {
+            position.setValid(values[index].equals("1"));
+        }
+        // No need to increment index after the last expected field
 
         return position;
     }
\ No newline at end of file
