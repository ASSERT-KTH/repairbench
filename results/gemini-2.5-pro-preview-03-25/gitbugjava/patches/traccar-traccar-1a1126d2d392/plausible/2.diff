diff --git a/tmp/17cb1c71-bc09-471e-81dd-37220ad19d88_buggy.java b/tmp/63925222-1a00-451e-8143-e464e69ee95a_fixed.java
index 2a0dceb..07c2e15 100644
--- a/tmp/17cb1c71-bc09-471e-81dd-37220ad19d88_buggy.java
+++ b/tmp/63925222-1a00-451e-8143-e464e69ee95a_fixed.java
@@ -1,68 +1,96 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
+        // Check if enough elements exist for mandatory fields up to network info
+        if (values.length <= index + 1 + (7 * 6)) { // FW version, model, 7x6 network fields
+             // Not enough fields for basic structure, return early or throw?
+             // Let's return what we have, but network might be incomplete/missing
+        }
+
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            // Check bounds for each iteration of network info (6 fields per iteration + 1 timing advance = 6 total per loop)
+            if (values.length <= index + 5) {
+                break; // Not enough fields for this cell tower block
+            }
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
+        // Check if enough elements exist for battery, archive, index, status
+        if (values.length <= index + 3) {
+             return position; // Not enough fields, return position as is
+        }
+
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
+        // Check for optional collaborative network field (length 3)
+        // Ensure index is valid before accessing
+        if (values.length > index && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Check if there are enough fields remaining for date, time, and GPS data (8 fields)
+        if (values.length > index + 7) {
+            String dateString = values[index];
+            String timeString = values[index + 1];
+
+            // Only parse time and GPS data if date and time strings are not empty
+            if (!dateString.isEmpty() && !timeString.isEmpty()) {
                 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+                position.setTime(dateFormat.parse(dateString + timeString)); // Let ParseException propagate if format is wrong
 
-        position.setLatitude(Double.parseDouble(values[index++]));
-        position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-        position.setCourse(Double.parseDouble(values[index++]));
+                position.setLatitude(Double.parseDouble(values[index + 2]));
+                position.setLongitude(Double.parseDouble(values[index + 3]));
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index + 4])));
+                position.setCourse(Double.parseDouble(values[index + 5]));
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index + 6]));
+                position.setValid(values[index + 7].equals("1"));
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
-        position.setValid(values[index++].equals("1"));
+                index += 8; // Consume the 8 fields only if they were parsed
+            }
+            // If date/time strings were empty, do not parse time/GPS and do not advance index here
+        }
+        // If not enough fields (values.length <= index + 7), skip time/GPS parsing.
 
         return position;
     }
\ No newline at end of file
