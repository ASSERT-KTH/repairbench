diff --git a/tmp/aab2c945-03a5-470b-8eb3-84529fe799a3_buggy.java b/tmp/7ace6ac3-548d-434f-b01c-e1f73b56d5f0_fixed.java
index 2a0dceb..402c81f 100644
--- a/tmp/aab2c945-03a5-470b-8eb3-84529fe799a3_buggy.java
+++ b/tmp/7ace6ac3-548d-434f-b01c-e1f73b56d5f0_fixed.java
@@ -1,68 +1,131 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
+            // Check array bounds before accessing elements inside the loop
+            if (index + 5 >= values.length) {
+                // Not enough fields for a full cell tower entry, maybe log or return partial data
+                Log.warning("decode4: Incomplete cell tower data for device " + deviceSession.getDeviceId());
+                // Cannot continue parsing network reliably, break or return position as is?
+                // Let's return what we have so far, as network data is incomplete.
+                return position;
+            }
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
+        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
+        }
 
+        // Check bounds before accessing subsequent fields
+        if (index < values.length) {
             position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+        } else { return position; } // Not enough fields
+
+        if (index < values.length) {
             position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+        } else { return position; }
+
+        if (index < values.length) {
             position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+        } else { return position; }
+
+        if (index < values.length) {
             position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        } else { return position; }
 
-        if (values[index].length() == 3) {
+        // Check for optional collaborative network field (check bounds first)
+        if (index < values.length && values[index].length() == 3) {
             index += 1; // collaborative network
         }
 
+        // Check bounds for date and time fields
+        if (index + 1 < values.length) {
+            String dateString = values[index];
+            String timeString = values[index + 1];
+            // Fix: Only attempt parsing if date and time strings are not empty
+            if (!dateString.isEmpty() && !timeString.isEmpty()) {
                 DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+                position.setTime(dateFormat.parse(dateString + timeString));
+            }
+            // Always advance index past date and time fields regardless of parsing result
+            index += 2;
+        } else {
+            // Not enough fields for date/time, advance index if possible
+            if (index < values.length) {
+                index++;
+            }
+            if (index < values.length) {
+                index++;
+            }
+             // Return early as critical time information is missing/corrupt
+             return position;
+        }
 
+        // Check bounds for remaining fields
+        if (index < values.length) {
             position.setLatitude(Double.parseDouble(values[index++]));
+        } else { return position; }
+
+        if (index < values.length) {
             position.setLongitude(Double.parseDouble(values[index++]));
+        } else { return position; }
+
+        if (index < values.length) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+        } else { return position; }
+
+        if (index < values.length) {
             position.setCourse(Double.parseDouble(values[index++]));
+        } else { return position; }
 
+        if (index < values.length) {
             position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        } else { return position; }
 
+        if (index < values.length) {
             position.setValid(values[index++].equals("1"));
+        } else {
+            // If validity is missing, the position data might be incomplete/unreliable
+            position.setValid(false); // Assume invalid if the field is missing
+            return position;
+        }
 
         return position;
     }
\ No newline at end of file
