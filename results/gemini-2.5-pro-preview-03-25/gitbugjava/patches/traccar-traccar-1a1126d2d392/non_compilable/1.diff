diff --git a/tmp/25927053-bfe7-46c5-99d2-202a549d050b_buggy.java b/tmp/13f06821-d359-41e9-b2c4-adad4b15c294_fixed.java
index 2a0dceb..ba078e4 100644
--- a/tmp/25927053-bfe7-46c5-99d2-202a549d050b_buggy.java
+++ b/tmp/13f06821-d359-41e9-b2c4-adad4b15c294_fixed.java
@@ -1,68 +1,92 @@
     private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
+        if (index < values.length && values[index].length() == 3) { // Check bounds before accessing length
             index += 1; // collaborative network
         }
 
+        // Combine date and time parts, removing colon from time for parsing
+        String datePart = values[index++];
+        String timePart = values[index++];
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+        // Ensure timePart has the expected format before replacing ':'
+        if (timePart.length() == 8 && timePart.charAt(2) == ':' && timePart.charAt(5) == ':') {
+             position.setTime(dateFormat.parse(datePart + timePart.replace(":", "")));
+        } else {
+             // Handle unexpected time format or log error, potentially throwing ParseException
+             // For now, try parsing assuming it might be correct if SimpleDateFormat is lenient enough
+             // or throw a more specific error. Let's maintain original attempt for now if format mismatch.
+             // A safer approach might be throwing new ParseException("Invalid time format", index -1);
+             // However, the original issue was the colon, so removing it should fix the main problem.
+             // If timePart is empty or wrong format, parse below will likely fail anyway.
+             position.setTime(dateFormat.parse(datePart + timePart)); // Fallback or throw specific error
+        }
+
 
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
 
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
 
         position.setValid(values[index++].equals("1"));
 
+        // Check for optional HDOP field at the end
+        if (index < values.length) {
+            try {
+                position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            } catch (NumberFormatException e) {
+                // Ignore if the last field is not a valid double
+            }
+        }
+
         return position;
     }
\ No newline at end of file
