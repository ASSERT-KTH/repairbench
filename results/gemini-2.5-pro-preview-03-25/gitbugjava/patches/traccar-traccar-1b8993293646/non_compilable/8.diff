diff --git a/tmp/9eaad91a-02d2-4d59-b0ac-dc5cfb60740b_buggy.java b/tmp/d759b924-0215-40d0-81ce-c79134ac7ef7_fixed.java
index 7374e5f..fd563af 100644
--- a/tmp/9eaad91a-02d2-4d59-b0ac-dc5cfb60740b_buggy.java
+++ b/tmp/d759b924-0215-40d0-81ce-c79134ac7ef7_fixed.java
@@ -1,61 +1,85 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Alarm field comes after index, before timestamp in some formats
         position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
+        // Parse cell info string
+        String cellInfo = parser.next();
+        String[] cell = cellInfo.split("\\|");
+        if (cell.length >= 4 && !cell[0].isEmpty() && !cell[1].isEmpty() && !cell[2].isEmpty() && !cell[3].isEmpty()) {
+            // Validate parts are not empty before parsing
+            try {
                 network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+                        Integer.parseInt(cell[0]),        // MCC
+                        Integer.parseInt(cell[1]),        // MNC
+                        Integer.parseInt(cell[2], 16),    // LAC
+                        Integer.parseInt(cell[3], 16)));  // CID
+            } catch (NumberFormatException e) {
+                // Ignore invalid cell information
+            }
+        }
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
+        // Check if GPS data is available (validity, speed, satellites, lat, lon = 5 fields)
         if (parser.hasNext(5)) {
 
             position.setValid(parser.next().equals("A"));
             position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
+            // Order is Speed then Satellites according to test data
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+            position.set(Position.KEY_SATELLITES, parser.nextInt());
             position.setLatitude(parser.nextDouble());
             position.setLongitude(parser.nextDouble());
 
-        } else {
+        } else if (parser.hasNext()) { // Check if there's at least one field for WIFI
 
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
+                if (wifi.length == 2) {
+                    // Format MAC address correctly: XX:XX:XX:XX:XX:XX
+                    String mac = wifi[0].replaceAll("(?<=[0-9A-Fa-f]{2})(?=[0-9A-Fa-f]{2})", ":");
+                    try {
                         network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                                mac, Integer.parseInt(wifi[1])));
+                    } catch (NumberFormatException e) {
+                        // Ignore invalid WiFi information
+                    }
+                }
             }
 
         }
 
         position.setNetwork(network);
 
+        // Response generation
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
