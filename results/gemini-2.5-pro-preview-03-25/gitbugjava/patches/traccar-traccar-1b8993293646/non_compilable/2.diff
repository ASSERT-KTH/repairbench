diff --git a/tmp/1df723cd-e8be-42d8-982a-ddd3fa39d843_buggy.java b/tmp/ff6dd4f9-a576-4b2a-8e07-62af25006f1f_fixed.java
index 7374e5f..22495d6 100644
--- a/tmp/1df723cd-e8be-42d8-982a-ddd3fa39d843_buggy.java
+++ b/tmp/ff6dd4f9-a576-4b2a-8e07-62af25006f1f_fixed.java
@@ -1,61 +1,85 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
+        // Example GPS: $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74
+        // Example WiFi:$$136,866104023192332,1,A03,,210414055249,460|0|25FC|104C,4.18,100,000F,1,94D9B377EB53:-60|EC6C9FA4CAD8:-55*3E
+
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
-        String index = parser.next();
+        String index = parser.next(); // e.g., 7F, 1
+        parser.next(); // Command type, e.g., A03
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+        // The field after command seems to be the alarm code (can be empty)
+        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt(0))); // Use default 0 if empty/invalid
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
+        // Cell info: MCC|MNC|LAC|CID
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
-        position.set(Position.KEY_BATTERY, parser.nextDouble());
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+        position.set(Position.KEY_BATTERY, parser.nextDouble()); // Battery voltage
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Battery level percentage
+        position.set(Position.KEY_STATUS, parser.nextHexInt()); // Status flags
 
-        if (parser.hasNext(5)) {
+        // Next field indicates location data type: 0 = GPS, 1 = WiFi
+        int locationType = parser.nextInt();
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+        if (locationType == 0 && parser.hasNext(5)) { // GPS Data: Validity,Speed,Satellites,Lat,Lon
 
-        } else {
+            position.setValid(parser.next().equals("A")); // Validity (A=Active, V=Void)
+            position.setFixTime(position.getDeviceTime()); // Use device time as fix time
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed in KPH
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Number of satellites
+            position.setLatitude(parser.nextDouble()); // Latitude
+            position.setLongitude(parser.nextDouble()); // Longitude
 
-            String[] points = parser.next().split("\\|");
+        } else if (locationType == 1 && parser.hasNext(1)) { // WiFi Data: MAC1:Signal1|MAC2:Signal2...
+
+            String pointsString = parser.next();
+            if (pointsString != null && !pointsString.isEmpty()) {
+                String[] points = pointsString.split("\\|");
                 for (String point : points) {
                     String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
-                network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                    if (wifi.length >= 2) {
+                        String macRaw = wifi[0];
+                        // Ensure MAC is 12 hex characters before formatting
+                        if (macRaw != null && macRaw.matches("^[0-9a-fA-F]{12}$")) {
+                            // Format MAC address with colons: XX:XX:XX:XX:XX:XX
+                            String mac = macRaw.replaceAll("(..)", "$1:").substring(0, 17);
+                            try {
+                                int signalStrength = Integer.parseInt(wifi[1]);
+                                network.addWifiAccessPoint(WifiAccessPoint.from(mac, signalStrength));
+                            } catch (NumberFormatException e) {
+                                // Ignore invalid signal strength
                             }
-
                         }
+                    }
+                }
+            }
+        }
+        // Note: Potential other fields after GPS/WiFi are ignored in this logic
 
         position.setNetwork(network);
 
+        // Send ACK response
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        String response = index + ",A03," + dateFormat.format(new Date());
+        String response = index + ",A03," + dateFormat.format(new Date()); // Use A03 in response regardless of incoming command?
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
