diff --git a/tmp/166b9384-1d53-4cc7-bd8e-22fc4e719571_buggy.java b/tmp/9111049f-6738-400e-9355-2bb3389fdc15_fixed.java
index 7374e5f..4398096 100644
--- a/tmp/166b9384-1d53-4cc7-bd8e-22fc4e719571_buggy.java
+++ b/tmp/9111049f-6738-400e-9355-2bb3389fdc15_fixed.java
@@ -1,61 +1,89 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+        parser.skip(1); // Skip type field (e.g., A03)
+        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt())); // Alarm field
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
+        // Cell info parsing
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
+        // Parse ignition status (field after status, before GPS/Wifi specific fields)
+        // Assuming this field is always present based on pattern and examples.
+        position.set(Position.KEY_IGNITION, parser.nextInt() == 1);
+
+        // Check if the next fields represent GPS data (validity, speed, satellites, lat, lon)
         if (parser.hasNext(5)) {
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+            position.setValid(parser.next().equals("A")); // Validity
+            position.setFixTime(position.getDeviceTime()); // Use device time as fix time
 
-        } else {
+            // Corrected order: Speed first, then Satellites
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed (kph)
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Satellites
 
-            String[] points = parser.next().split("\\|");
+            position.setLatitude(parser.nextDouble());  // Latitude
+            position.setLongitude(parser.nextDouble()); // Longitude
+
+        } else if (parser.hasNext()) { // Check if there's a field for Wifi data instead
+
+            // Wifi parsing logic (with added safety checks)
+            String wifiData = parser.next();
+            String[] points = wifiData.split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
+                if (wifi.length >= 2) { // Ensure MAC and RSSI parts exist
+                    String macRaw = wifi[0];
+                    String rssiRaw = wifi[1];
+                    if (!macRaw.isEmpty() && !rssiRaw.isEmpty()) { // Ensure parts are not empty
+                         // Format MAC address by adding colons
+                         String macFormatted = macRaw.replaceAll("(..)", "$1:");
+                         if (macFormatted.endsWith(":")) { // Remove trailing colon if added
+                            macFormatted = macFormatted.substring(0, macFormatted.length() - 1);
+                         }
+                         try {
+                             // Add Wifi access point to network data
                              network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                                     macFormatted, Integer.parseInt(rssiRaw)));
+                         } catch (NumberFormatException e) {
+                             // Log or ignore if RSSI is not a valid integer
+                         }
+                    }
+                }
             }
-
         }
 
+        // Set the parsed network (Cell + Wifi) data
         position.setNetwork(network);
 
+        // Prepare and send response
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
