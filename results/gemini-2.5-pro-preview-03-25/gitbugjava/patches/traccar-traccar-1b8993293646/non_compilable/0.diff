diff --git a/tmp/c716c00a-9b65-425e-b52a-00a2da469de9_buggy.java b/tmp/4d89fa3e-42ff-4b6f-a63e-453d39a2f0a7_fixed.java
index 7374e5f..ac4d2e6 100644
--- a/tmp/c716c00a-9b65-425e-b52a-00a2da469de9_buggy.java
+++ b/tmp/4d89fa3e-42ff-4b6f-a63e-453d39a2f0a7_fixed.java
@@ -1,61 +1,90 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
+        // Example GPS: $$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74
+        // Example Wifi: $$136,866104023192332,1,A03,,210414055249,460|0|25FC|104C,4.18,100,000F,1,94D9B377EB53:-60|EC6C9FA4CAD8:-55|...*3E
+        // Structure: $$,<len>,<imei>,<index>,<type>,,<timestamp>,<cell>,<battV>,<battL>,<status>,<alarm>,<data>*<checksum>
+        // <data> for GPS: <validity>,<speedKph>,<satellites>,<latitude>,<longitude>
+        // <data> for Wifi: <mac>:<rssi>|<mac>:<rssi>|...
+
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
-        String imei = parser.next();
+        String imei = parser.next(); // IMEI
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
-        String index = parser.next();
+        String index = parser.next(); // Index
+        parser.skip(1); // Skip Type (e.g., A03)
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
-
-        position.setDeviceTime(parser.nextDateTime());
+        position.setDeviceTime(parser.nextDateTime()); // Timestamp
 
         Network network = new Network();
+        String[] cell = parser.next().split("\\|"); // Cell info
+        if (cell.length >= 4) {
+             try {
                  network.addCellTower(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
+                         Integer.parseInt(cell[0]), // MCC
+                         Integer.parseInt(cell[1]), // MNC
+                         Integer.parseInt(cell[2], 16), // LAC
+                         Integer.parseInt(cell[3], 16))); // CID
+             } catch (NumberFormatException e) {
+                 // Ignore invalid cell info
+             }
+        }
 
-        position.set(Position.KEY_BATTERY, parser.nextDouble());
-        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+        position.set(Position.KEY_BATTERY, parser.nextDouble()); // Battery Voltage
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt()); // Battery Level
+        position.set(Position.KEY_STATUS, parser.nextHexInt()); // Status
+        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt())); // Alarm Code
 
-        if (parser.hasNext(5)) {
+        // Now check for GPS (5 fields) or WiFi (1 field)
+        if (parser.hasNext(5)) { // GPS data: validity, speed, satellites, lat, lon
 
-            position.setValid(parser.next().equals("A"));
-            position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
-            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
-            position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+            position.setValid(parser.next().equals("A")); // Validity
+            position.setFixTime(position.getDeviceTime()); // Use device time as fix time
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt())); // Speed (KPH)
+            position.set(Position.KEY_SATELLITES, parser.nextInt()); // Satellites
+            position.setLatitude(parser.nextDouble()); // Latitude
+            position.setLongitude(parser.nextDouble()); // Longitude
 
-        } else {
+        } else if (parser.hasNext()) { // WiFi data
 
-            String[] points = parser.next().split("\\|");
+            String wifiData = parser.next(); // e.g., "94D9B377EB53:-60|EC6C9FA4CAD8:-55|..."
+            String[] points = wifiData.split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
+                if (wifi.length >= 2) {
+                    String mac = wifi[0].replaceAll("(..)", "$1:"); // Add colons
+                    if (mac.endsWith(":")) {
+                        mac = mac.substring(0, mac.length() - 1);
+                    }
+                    try {
                         network.addWifiAccessPoint(WifiAccessPoint.from(
-                        mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
+                                mac, Integer.parseInt(wifi[1])));
+                    } catch (NumberFormatException e) {
+                        // Ignore invalid wifi point
+                    }
+                }
             }
-
         }
 
         position.setNetwork(network);
 
+        // Send response if needed (original logic)
+        if (!index.isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
             String response = index + ",A03," + dateFormat.format(new Date());
             sendResponse(channel, remoteAddress, imei, response);
+        }
 
         return position;
     }
\ No newline at end of file
