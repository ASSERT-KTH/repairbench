diff --git a/tmp/6717265f-551c-4f34-8231-fc2de9337b2f_buggy.java b/tmp/a494cc8d-2688-4d0b-a4e8-47fa9bd7217d_fixed.java
index bdde834..17ef96d 100644
--- a/tmp/6717265f-551c-4f34-8231-fc2de9337b2f_buggy.java
+++ b/tmp/a494cc8d-2688-4d0b-a4e8-47fa9bd7217d_fixed.java
@@ -1,10 +1,33 @@
   static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {
-    return response != null
-        && (response.getStatusLine().getStatusCode() < 500
-            || // service unavailable
-            response.getStatusLine().getStatusCode() >= 600)
-        && // gateway timeout
-        response.getStatusLine().getStatusCode() != 408
-        && // request timeout
-        (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403);
+    // If the response is null, we cannot determine the status code,
+    // returning false to align with the original code's behavior (short-circuit).
+    // However, the caller should ideally handle null responses separately.
+    if (response == null) {
+      return false;
+    }
+    int statusCode = response.getStatusLine().getStatusCode();
+
+    // Server errors (5xx) are generally considered retryable.
+    if (statusCode >= 500 && statusCode < 600) {
+      return false; // Retryable
+    }
+
+    // Specific client errors that are designated as retryable.
+    // 408 Request Timeout
+    if (statusCode == 408) {
+      return false; // Retryable
+    }
+    // 429 Too Many Requests
+    if (statusCode == 429) {
+      return false; // Retryable
+    }
+
+    // 403 Forbidden might be retryable depending on the configuration.
+    if (statusCode == 403 && retryHTTP403) {
+      return false; // Retryable only if retryHTTP403 is true
+    }
+
+    // All other status codes (1xx, 2xx, 3xx, other 4xx, >=600)
+    // are considered non-retryable by this logic.
+    return true; // Non-retryable
   }
\ No newline at end of file
