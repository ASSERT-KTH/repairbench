diff --git a/tmp/17461726-a12f-45d1-a60c-6fcd5b82d896_buggy.java b/tmp/bba76c11-a44e-40ba-bceb-9fe9a4f77eee_fixed.java
index bdde834..7233e01 100644
--- a/tmp/17461726-a12f-45d1-a60c-6fcd5b82d896_buggy.java
+++ b/tmp/bba76c11-a44e-40ba-bceb-9fe9a4f77eee_fixed.java
@@ -1,10 +1,28 @@
   static boolean isNonRetryableHTTPCode(CloseableHttpResponse response, boolean retryHTTP403) {
-    return response != null
-        && (response.getStatusLine().getStatusCode() < 500
-            || // service unavailable
-            response.getStatusLine().getStatusCode() >= 600)
-        && // gateway timeout
-        response.getStatusLine().getStatusCode() != 408
-        && // request timeout
-        (!retryHTTP403 || response.getStatusLine().getStatusCode() != 403);
+    if (response == null) {
+      return false; // Or handle as an error, but current logic implies false for null
+    }
+    int statusCode = response.getStatusLine().getStatusCode();
+
+    // Codes in 5xx range (500-599) are generally retryable server errors
+    // Codes 408 (Request Timeout) and 429 (Too Many Requests) are specifically retryable
+    // Code 403 (Forbidden) is retryable only if retryHTTP403 is true
+    // All other codes < 500 or >= 600 are considered non-retryable
+
+    // Check for retryable conditions first (easier to read)
+    if (statusCode >= 500 && statusCode < 600) {
+      return false; // 5xx errors are retryable
+    }
+    if (statusCode == 408) {
+      return false; // Request Timeout is retryable
+    }
+    if (statusCode == 429) {
+      return false; // Too Many Requests is retryable
+    }
+    if (retryHTTP403 && statusCode == 403) {
+      return false; // Forbidden is retryable if retryHTTP403 is true
+    }
+
+    // If none of the retryable conditions are met, it's non-retryable
+    return true;
   }
\ No newline at end of file
