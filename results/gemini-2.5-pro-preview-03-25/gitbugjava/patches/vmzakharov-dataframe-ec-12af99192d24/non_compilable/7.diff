diff --git a/tmp/b6d959ef-ad0d-4cbe-81cd-24200cc80e14_buggy.java b/tmp/8f5dc7e6-79d4-4892-bed4-154656e26100_fixed.java
index 8bae155..cba8dee 100644
--- a/tmp/b6d959ef-ad0d-4cbe-81cd-24200cc80e14_buggy.java
+++ b/tmp/8f5dc7e6-79d4-4892-bed4-154656e26100_fixed.java
@@ -1,5 +1,29 @@
     @Override
     public String asStringLiteral()
     {
-        return '"' + this.value + '"';
+        boolean containsDoubleQuote = this.value.contains("\"");
+        boolean containsSingleQuote = this.value.contains("'");
+
+        // Rule: Prefer double quotes unless the string contains double quotes but no single quotes.
+        // This heuristic aims to minimize escaping.
+        if (containsDoubleQuote && !containsSingleQuote)
+        {
+            // Use single quotes if the string contains double quotes but no single quotes.
+            // Escape backslashes within the string. Single quotes don't need escaping inside single-quoted strings.
+            // Note: Java string literals don't technically require escaping single quotes within single quotes,
+            // but depending on the target language/context of this pretty print, it might.
+            // Assuming standard string literal representation where only the surrounding quote needs escaping.
+            String escapedValue = this.value.replace("\\", "\\\\"); // Escape backslashes
+            return "'" + escapedValue + "'";
+        }
+        else
+        {
+            // Use double quotes in all other cases:
+            // 1. Contains ' but not " (e.g., "wal'do")
+            // 2. Contains neither ' nor " (e.g., "foo")
+            // 3. Contains both ' and " (e.g., "a'b\"c")
+            // Escape backslashes and double quotes within the string.
+            String escapedValue = this.value.replace("\\", "\\\\").replace("\"", "\\\"");
+            return '"' + escapedValue + '"';
+        }
     }
\ No newline at end of file
