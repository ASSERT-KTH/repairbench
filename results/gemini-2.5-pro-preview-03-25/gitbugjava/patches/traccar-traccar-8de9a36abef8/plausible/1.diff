diff --git a/tmp/56cbc8b3-7439-459b-9cb9-1ed8eb54b0dd_buggy.java b/tmp/df0dd4ad-c1e2-4480-ba2b-e6924539f78b_fixed.java
index ad77f15..80d22f3 100644
--- a/tmp/56cbc8b3-7439-459b-9cb9-1ed8eb54b0dd_buggy.java
+++ b/tmp/df0dd4ad-c1e2-4480-ba2b-e6924539f78b_fixed.java
@@ -1,112 +1,391 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex == -1) {
+             // Invalid fragment format, ignore or log
+             return;
+        }
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Use split with -1 limit to preserve trailing empty strings, which might be present
+            values = fragment.substring(dataIndex + 1).split(";", -1);
         }
 
-        switch (fragment.substring(0, dataIndex)) {
+        String type = fragment.substring(0, dataIndex);
+
+        // Wrap decoding in a try-catch to prevent unexpected errors from stopping processing,
+        // though specific NumberFormatExceptions are handled inline.
+        try {
+            switch (type) {
                 case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                    if (index < values.length) { // Validity
+                        position.setValid(values[index].equals("A"));
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                    index++;
+
+                    if (index < values.length) { // Satellites
+                        String satellitesStr = values[index];
+                        if (!satellitesStr.isEmpty()) {
+                           try {
+                               position.set(Position.KEY_SATELLITES, Integer.parseInt(satellitesStr));
+                           } catch (NumberFormatException e) { /* ignore parse error */ }
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    index++;
+
+                    if (index < values.length) { // Latitude
+                        String latValue = values[index];
+                        // Check if the value has at least the direction character and a number part
+                        if (latValue.length() > 1) {
+                            String latNumStr = latValue.substring(1);
+                            if (!latNumStr.isEmpty()) {
+                                try {
+                                    double latitude = Double.parseDouble(latNumStr);
+                                    // Apply direction sign
+                                    if (latValue.charAt(0) == 'S') {
+                                        latitude = -latitude;
                                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                                    position.setLatitude(latitude);
+                                } catch (NumberFormatException e) { /* ignore parse error */ }
                             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
                         }
-                break;
+                    }
+                    index++;
+
+                    if (index < values.length) { // Longitude
+                        String lonValue = values[index];
+                         // Check if the value has at least the direction character and a number part
+                         if (lonValue.length() > 1) {
+                            String lonNumStr = lonValue.substring(1);
+                            if (!lonNumStr.isEmpty()) {
+                                try {
+                                    double longitude = Double.parseDouble(lonNumStr);
+                                    // Apply direction sign
+                                    if (lonValue.charAt(0) == 'W') {
+                                        longitude = -longitude;
+                                    }
+                                    position.setLongitude(longitude);
+                                } catch (NumberFormatException e) { /* ignore parse error */ }
+                            }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // Speed
+                        String speedKphStr = values[index];
+                        if (!speedKphStr.isEmpty()) {
+                            try {
+                                // Use Double.parseDouble, as speed might not always be integer kph
+                                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedKphStr)));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // Course
+                        String courseStr = values[index];
+                        if (!courseStr.isEmpty()) {
+                            try {
+                                // Course is often represented as double
+                                position.setCourse(Double.parseDouble(courseStr));
+                             } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // Altitude
+                        String altitudeStr = values[index];
+                        if (!altitudeStr.isEmpty()) {
+                             try {
+                                // Altitude can be double
+                                position.setAltitude(Double.parseDouble(altitudeStr));
+                             } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // HDOP
+                        String hdopStr = values[index];
+                        if (!hdopStr.isEmpty()) {
+                             try {
+                                position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                             } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // VDOP
+                        String vdopStr = values[index];
+                        if (!vdopStr.isEmpty()) {
+                             try {
+                                position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                             } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+                    break; // End of GPS case
+
                 case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    index++; // Skip registration status field
+                    index++; // Skip signal strength field
+
+                    // Initialize variables to store parsed GSM info
+                    Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+
+                    // Parse MCC, MNC, LAC, CID, RSSI safely
+                    if (index < values.length) {
+                        String mccStr = values[index];
+                        if (!mccStr.isEmpty()) { try { mcc = Integer.parseInt(mccStr); } catch (NumberFormatException e) {} }
+                    }
+                    index++;
+                    if (index < values.length) {
+                        String mncStr = values[index];
+                        if (!mncStr.isEmpty()) { try { mnc = Integer.parseInt(mncStr); } catch (NumberFormatException e) {} }
+                    }
+                    index++;
+                    if (index < values.length) {
+                        String lacStr = values[index];
+                        if (!lacStr.isEmpty()) { try { lac = Integer.parseInt(lacStr, 16); } catch (NumberFormatException e) {} }
+                    }
+                    index++;
+                    if (index < values.length) {
+                        String cidStr = values[index];
+                        if (!cidStr.isEmpty()) { try { cid = Integer.parseInt(cidStr, 16); } catch (NumberFormatException e) {} }
+                    }
+                    index++;
+                    // Optional: Parse RSSI if present
+                    if (index < values.length) {
+                        String rssiStr = values[index];
+                        if (!rssiStr.isEmpty()) { try { rssi = Integer.parseInt(rssiStr); } catch (NumberFormatException e) {} }
+                    }
+                    index++; // Increment even if RSSI is missing/last field
+
+                    // Only set network if essential Cell Tower info was parsed successfully
+                    if (mcc != null && mnc != null && lac != null && cid != null) {
+                        CellTower cellTower = CellTower.from(mcc, mnc, lac, cid);
+                        if (rssi != null) {
+                            cellTower.setSignalStrength(rssi);
+                        }
+                        position.setNetwork(new Network(cellTower));
+                    }
                     break;
+
                 case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    if (index < values.length) { // Odometer
+                        String odometerStr = values[index];
+                        if (!odometerStr.isEmpty()) {
+                            try {
+                                position.set(Position.KEY_ODOMETER, Long.parseLong(odometerStr));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
                         }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
                     }
+                    index++;
+
+                    if (index < values.length) { // Engine Hours
+                        String hoursValue = values[index];
+                        if (!hoursValue.isEmpty()) {
+                            try {
+                                String[] hours = hoursValue.split("-");
+                                // Use long for calculations to avoid potential overflow with large hour values
+                                long h = 0, m = 0, s = 0;
+                                if (hours.length > 0 && !hours[0].isEmpty()) {
+                                    h = Long.parseLong(hours[0]);
+                                }
+                                if (hours.length > 1 && !hours[1].isEmpty()) {
+                                    m = Long.parseLong(hours[1]);
+                                }
+                                if (hours.length > 2 && !hours[2].isEmpty()) {
+                                    s = Long.parseLong(hours[2]);
+                                }
+                                // Store total milliseconds
+                                position.set(Position.KEY_HOURS, (h * 3600L + m * 60L + s) * 1000L);
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
                     break;
+
                 case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    if (index < values.length) { // Power (External Voltage)
+                        String powerStr = values[index];
+                        if (!powerStr.isEmpty()) {
+                            try {
+                                position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
                         }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    index++;
+
+                    if (index < values.length) { // Battery (Internal Battery Voltage)
+                        String batteryStr = values[index];
+                        if (!batteryStr.isEmpty()) {
+                            try {
+                                position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
                         }
+                    }
+                    index++;
+
+                    if (index < values.length) { // ADC1
+                        String adc1Str = values[index];
+                        if (!adc1Str.isEmpty()) {
+                            try {
+                                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1Str));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // ADC2
+                        String adc2Str = values[index];
+                        if (!adc2Str.isEmpty()) {
+                             try {
+                                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2Str));
+                             } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
                     break;
+
                 case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    if (index < values.length) { // Status (Hex)
+                        String statusStr = values[index];
+                        if (!statusStr.isEmpty()) {
+                            try {
+                                position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
+                        }
+                    }
+                    index++;
+
+                    if (index < values.length) { // IO (Hex)
+                        String ioStr = values[index];
+                        if (!ioStr.isEmpty()) {
+                            try {
+                                int io = Integer.parseInt(ioStr, 16);
+                                // Decode individual bits for digital inputs/outputs/ignition
                                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                            } catch (NumberFormatException e) { /* ignore parse error */ }
                         }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                    }
+                    index++;
+
+                    // Geofence ID (Concatenation of two fields)
+                    String geofence = "";
+                    if (index < values.length) {
+                        geofence += values[index];
+                    }
+                    index++;
                     if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                       geofence += values[index];
+                    }
+                    index++;
+                    // Only set if the combined geofence string is not empty
+                    if (!geofence.isEmpty()) {
+                        position.set(Position.KEY_GEOFENCE, geofence);
+                    }
+
+                    if (index < values.length) { // Event Status
+                        position.set("eventStatus", values[index]);
+                    }
+                    index++;
+
+                    if (index < values.length) { // Packet Type
+                        position.set("packetType", values[index]);
                     }
+                    index++;
                     break;
-            case "ETD":
-                position.set("eventData", values[index++]);
+
+                case "ETD": // Extended Data
+                    if (index < values.length) {
+                        position.set("eventData", values[index]);
+                    }
+                    index++;
                     break;
-            case "OBD":
-                position.set("obd", values[index++]);
+                case "OBD": // OBD Data
+                     if (index < values.length) {
+                        position.set("obd", values[index]);
+                    }
+                    index++;
                    break;
-            case "TAG":
-                position.set("tagData", values[index++]);
+                case "TAG": // Tag Data (e.g., RFID)
+                     if (index < values.length) {
+                        position.set("tagData", values[index]);
+                    }
+                    index++;
                     break;
-            case "IWD":
+                case "IWD": // Wireless Sensor Data (iWire/1-Wire)
                     while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        // Sensor Index
+                        String sensorIndexStr = values[index];
+                        int sensorIndex;
+                        if (!sensorIndexStr.isEmpty()) {
+                            try {
+                                sensorIndex = Integer.parseInt(sensorIndexStr);
+                            } catch (NumberFormatException e) { break; } // Stop processing IWD if index is invalid
+                        } else {
+                            index++; continue; // Skip entry if sensor index is empty
+                        }
+                        index++;
+
+                        // Data Type
+                        if (index >= values.length) { break; } // Check bounds before accessing next value
+                        String dataTypeStr = values[index];
+                        int dataType;
+                        if (!dataTypeStr.isEmpty()) {
+                            try {
+                                dataType = Integer.parseInt(dataTypeStr);
+                            } catch (NumberFormatException e) { break; } // Stop processing IWD if type is invalid
+                        } else {
+                             index++; continue; // Skip entry if data type is empty
+                        }
+                        index++;
+
+                        // Process based on Data Type
+                        if (dataType == 0) { // Driver ID (iButton)
+                            if (index < values.length) {
+                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                                index++;
+                            } else { break; } // Missing value for driver ID
+                        } else if (dataType == 1) { // Temperature Sensor
+                            // Skip the sensor's serial number field
+                            if (index < values.length) {
+                               index++;
+                            } else { break; } // Missing serial number field
+
+                            // Parse the temperature value
+                            if (index < values.length) {
+                               String tempStr = values[index];
+                                if (!tempStr.isEmpty()) {
+                                    try {
+                                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));
+                                    } catch (NumberFormatException e) { /* ignore parse error for temp value */ }
+                                }
+                                index++;
+                            } else { break; } // Missing temperature value field
+                        } else {
+                             // Unknown data type, we don't know how many fields it uses.
+                             // Stop processing IWD block to avoid misinterpreting data.
+                             break;
                         }
                     }
                     break;
                 default:
+                    // Unknown fragment type, ignore it
                     break;
             }
+        } catch (Exception e) {
+            // Log unexpected exceptions during fragment decoding for debugging
+            // Log.warning("Error decoding fragment '" + type + "': " + fragment, e);
+        }
     }
\ No newline at end of file
