diff --git a/tmp/906f54f3-b40f-48ac-ad3b-c11afaac39c8_buggy.java b/tmp/60db2e35-d075-4ba3-b629-2adaac1acd23_fixed.java
index ad77f15..7416d8a 100644
--- a/tmp/906f54f3-b40f-48ac-ad3b-c11afaac39c8_buggy.java
+++ b/tmp/60db2e35-d075-4ba3-b629-2adaac1acd23_fixed.java
@@ -1,112 +1,233 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0 || dataIndex == fragment.length() - 1) {
+             // Handle cases like "COT:" or fragments without ':' or only ':'
+            return; // Or log error, depending on desired behavior
+        }
+
         int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
+        String[] values = fragment.substring(dataIndex + 1).split(";", -1); // Use -1 limit to keep trailing empty strings
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                if (index < values.length) {
+                    position.setValid(values[index].equals("A"));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                }
+                index++;
+                if (index < values.length && values[index].length() > 1) {
                     position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                    if (values[index].charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
+                }
+                index++;
+                if (index < values.length && values[index].length() > 1) {
                     position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    if (values[index].charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
+                String speedValue = index < values.length ? values[index] : null;
+                index++;
+                if (speedValue != null && !speedValue.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(speedValue)));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.setCourse(Double.parseDouble(values[index]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                     // Allow double for altitude as some devices might report fractional altitude
+                    position.setAltitude(Double.parseDouble(values[index]));
                 }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                }
+                index++;
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { lac = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) {}
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { cid = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) {}
+                }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) {}
+                }
+                index++;
+                if (mcc != null && mnc != null) { // Require at least MCC and MNC
+                    position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                }
                 break;
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                    try { position.set(Position.KEY_ODOMETER, Long.parseLong(values[index])); } catch (NumberFormatException e) {}
                 }
-                if (index < values.length) {
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    if (hours.length > 0 && !hours[0].isEmpty()) { // Check if first part exists and is not empty
+                        try {
+                            position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600L // Use long literal
+                                    + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)
+                                    + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid hours format
                         }
+                    }
+                }
+                index++;
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { position.set(Position.KEY_POWER, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { position.set(Position.KEY_BATTERY, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}
                 }
+                index++;
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index])); } catch (NumberFormatException e) {}
+                }
+                index++;
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                if (index < values.length && !values[index].isEmpty()) {
+                     try { position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) {}
+                }
+                index++;
+                String ioValue = index < values.length ? values[index] : null;
+                index++;
+                if (ioValue != null && !ioValue.isEmpty()) {
+                    try {
+                        int io = Integer.parseInt(ioValue, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                    } catch (NumberFormatException e) {}
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                String geofence1 = index < values.length ? values[index] : "";
+                index++;
+                String geofence2 = index < values.length ? values[index] : "";
+                index++;
+                position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+
                 if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    position.set("eventStatus", values[index]);
                 }
+                index++;
+                if (index < values.length) {
+                    position.set("packetType", values[index]);
+                }
+                index++;
                 break;
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length) {
+                    position.set("eventData", values[index]);
+                }
+                index++;
                 break;
             case "OBD":
-                position.set("obd", values[index++]);
+                 if (index < values.length) {
+                    position.set("obd", values[index]);
+                }
+                index++;
                 break;
             case "TAG":
-                position.set("tagData", values[index++]);
+                 if (index < values.length) {
+                    position.set("tagData", values[index]);
+                }
+                index++;
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    Integer sensorIndex = null;
+                    Integer dataType = null;
+
+                    if (!values[index].isEmpty()) {
+                        try { sensorIndex = Integer.parseInt(values[index]); } catch (NumberFormatException e) { break; }
+                    }
+                    index++;
+
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { dataType = Integer.parseInt(values[index]); } catch (NumberFormatException e) { break; }
+                    } else if (index >= values.length) {
+                         break; // Not enough fields left for data type
+                    }
+                    index++;
+
+                    if (sensorIndex == null || dataType == null) {
+                       // If index or type is missing/invalid, skip potential value field and try next entry? Or break?
+                       // Let's break, as the structure seems compromised.
+                       break;
+                    }
+
+                    if (dataType == 0) { // Driver ID
+                        if (index < values.length) { // Value field exists
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                            index++; // Consume value field
+                        } else {
+                            break; // Not enough fields left
+                        }
+                    } else if (dataType == 1) { // Temperature
+                        index += 1; // Skip temperature sensor serial number field
+                        if (index < values.length && !values[index].isEmpty()) { // Temperature value field exists and is not empty
+                            try {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) { /* ignore invalid temperature */ }
+                            index++; // Consume temperature value field
+                        } else if (index < values.length) {
+                             index++; // Consume empty temperature value field
+                        } else {
+                            break; // Not enough fields left
+                        }
+                    } else {
+                        // Unknown data type, assume it consumes one value field
+                        if (index < values.length) {
+                            index++;
+                        } else {
+                            break; // Not enough fields left
+                        }
                     }
                 }
                 break;
             default:
+                // Unknown fragment type, ignore
                 break;
         }
     }
\ No newline at end of file
