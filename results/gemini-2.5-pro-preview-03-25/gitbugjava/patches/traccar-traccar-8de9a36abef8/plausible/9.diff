diff --git a/tmp/3aa2c2f8-2335-45ed-aefd-b8fa34c049b4_buggy.java b/tmp/bc1c3ce7-1944-43ac-8be5-1a1f1df8eb75_fixed.java
index ad77f15..03c44ca 100644
--- a/tmp/3aa2c2f8-2335-45ed-aefd-b8fa34c049b4_buggy.java
+++ b/tmp/bc1c3ce7-1944-43ac-8be5-1a1f1df8eb75_fixed.java
@@ -1,112 +1,239 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex == -1) {
+            return; // Invalid fragment format
+        }
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Split by semicolon, preserving trailing empty strings if any
+            values = fragment.substring(dataIndex + 1).split(";", -1);
         }
 
-        switch (fragment.substring(0, dataIndex)) {
+        String type = fragment.substring(0, dataIndex);
+
+        try {
+            switch (type) {
                 case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                    if (index < values.length) { // Validity
+                        position.setValid(values[index].equals("A"));
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Satellites
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Latitude
                         position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                        if (values[index].charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Longitude
                         position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                        if (values[index].charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Speed
+                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index]))); // Use Double for kph
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Course
+                        position.setCourse(Double.parseDouble(values[index])); // Course can be decimal
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Altitude
+                        position.setAltitude(Double.parseDouble(values[index])); // Altitude can be decimal
                     }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // HDOP
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // VDOP
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    }
+                    // index++; // No need to increment after the last field
                     break;
                 case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    index += 1; // skip registration status
+                    index += 1; // skip signal strength
+                    Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        mcc = Integer.parseInt(values[index]);
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        mnc = Integer.parseInt(values[index]);
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        lac = Integer.parseInt(values[index], 16);
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        cid = Integer.parseInt(values[index], 16);
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        rssi = Integer.parseInt(values[index]);
+                    }
+                    // index++; // No need to increment after the last field
+                    if (mcc != null && mnc != null && lac != null && cid != null) {
+                        CellTower cellTower = CellTower.from(mcc, mnc, lac, cid, rssi); // rssi can be null
+                        position.setNetwork(new Network(cellTower));
+                    }
                     break;
                 case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    if (index < values.length && !values[index].isEmpty()) { // Odometer
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
                     }
-                if (index < values.length) {
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Hours
                         String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        if (hours.length > 0 && !hours[0].isEmpty()) {
+                            long totalSeconds = Long.parseLong(hours[0]) * 3600;
+                            if (hours.length > 1 && !hours[1].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[1]) * 60;
                             }
+                            if (hours.length > 2 && !hours[2].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[2]);
+                            }
+                            position.set(Position.KEY_HOURS, totalSeconds * 1000L);
+                        }
+                    }
+                    // index++; // No need to increment after the last field
                     break;
                 case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    if (index < values.length && !values[index].isEmpty()) { // Power
+                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // Battery
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // ADC1
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
                     }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // ADC2
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                    }
+                    // index++; // No need to increment after the last field
                     break;
                 case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    if (index < values.length && !values[index].isEmpty()) { // Status
+                        position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) { // IO
+                        int io = Integer.parseInt(values[index], 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    index++;
+                    String geofence = "";
+                    if (index < values.length) { // Geofence part 1
+                        geofence += values[index];
                     }
+                    index++;
+                    if (index < values.length) { // Geofence part 2
+                        geofence += values[index];
+                    }
+                    index++;
+                    if (!geofence.isEmpty()) {
+                        position.set(Position.KEY_GEOFENCE, geofence);
+                    }
+
+                    if (index < values.length) { // eventStatus
+                        position.set("eventStatus", values[index]);
+                    }
+                    index++;
+
+                    if (index < values.length) { // packetType
+                        position.set("packetType", values[index]);
+                    }
+                    // index++; // No need to increment after the last field
                     break;
                 case "ETD":
-                position.set("eventData", values[index++]);
+                    if (index < values.length) {
+                        position.set("eventData", values[index]);
+                    }
+                    // index++; // Only one field expected
                     break;
                 case "OBD":
-                position.set("obd", values[index++]);
+                    if (index < values.length) {
+                        position.set("obd", values[index]);
+                    }
+                    // index++; // Only one field expected
                     break;
                 case "TAG":
-                position.set("tagData", values[index++]);
+                    if (index < values.length) {
+                        position.set("tagData", values[index]);
+                    }
+                    // index++; // Only one field expected
                     break;
                 case "IWD":
                     while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
+                        int sensorIndex = -1;
+                        if (!values[index].isEmpty()) {
+                            sensorIndex = Integer.parseInt(values[index]);
+                        }
+                        index++;
+
+                        if (index >= values.length) {
+                            break; // Need data type
+                        }
+                        int dataType = -1;
+                        if (!values[index].isEmpty()) {
+                            dataType = Integer.parseInt(values[index]);
+                        }
+                        index++;
+
+                        if (dataType == 0) { // Driver ID
+                            if (index < values.length) {
                                 position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                            } else {
+                                break; // Not enough data for Driver ID value
+                            }
+                        } else if (dataType == 1) { // Temperature
+                            index += 1; // Skip temperature sensor serial number (present or not)
+                            if (index < values.length && !values[index].isEmpty()) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                            }
+                            index++;
+                        } else {
+                            // Unknown data type, assume it takes one value field like others
+                            if (index < values.length) {
+                                index++; // Skip the unknown value field
+                            } else {
+                                break; // No value field to skip
+                            }
                         }
                     }
                     break;
                 default:
+                    // Unknown fragment type, ignore
                     break;
             }
+        } catch (NumberFormatException e) {
+            // Log error or handle corrupted data if necessary
+            // System.err.println("Failed to parse number in fragment: " + fragment + " - " + e.getMessage());
+        } catch (IndexOutOfBoundsException e) {
+            // Log error or handle corrupted data if necessary
+            // System.err.println("Index out of bounds in fragment: " + fragment + " - " + e.getMessage());
+        }
     }
\ No newline at end of file
