diff --git a/tmp/ab715f87-e23b-48e4-9c9c-fc115763285f_buggy.java b/tmp/3c1f2134-1afe-446e-8aa1-c84c94ed231e_fixed.java
index ad77f15..7601702 100644
--- a/tmp/ab715f87-e23b-48e4-9c9c-fc115763285f_buggy.java
+++ b/tmp/3c1f2134-1afe-446e-8aa1-c84c94ed231e_fixed.java
@@ -1,112 +1,276 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0 || dataIndex == fragment.length() - 1) {
+            // Handle cases like "TAG:" or missing ":" or empty data part
+            return; // Or log error, depending on desired behavior
+        }
         int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
+        String[] values = fragment.substring(dataIndex + 1).split(";", -1); // Use -1 limit to preserve trailing empty strings
 
-        switch (fragment.substring(0, dataIndex)) {
+        String type = fragment.substring(0, dataIndex);
+
+        switch (type) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                // Validity
+                if (index < values.length) {
+                    position.setValid(values[index].equals("A"));
+                }
+                index++;
+
+                // Satellites
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                index++;
+
+                // Latitude
+                if (index < values.length && values[index].length() > 1) { // Need at least direction and value
+                    try {
                         position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                        if (values[index].charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
+                    } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* ignore or log */ }
+                }
+                index++;
+
+                // Longitude
+                if (index < values.length && values[index].length() > 1) { // Need at least direction and value
+                    try {
                         position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                        if (values[index].charAt(0) == 'W') {
                             position.setLongitude(-position.getLongitude());
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* ignore or log */ }
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
+
+                // Speed
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                index++;
+
+                // Course
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setCourse(Integer.parseInt(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                index++;
+
+                // Altitude
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.setAltitude(Integer.parseInt(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
+                index++;
+
+                // HDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                index++;
+
+                // VDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                // No need to increment index here as it's the last field checked explicitly
                 break;
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                index += 1; // registration status (skip)
+                index += 1; // signal strength (skip)
+                if (index + 4 < values.length) { // Ensure enough fields exist
+                    try {
+                        int mcc = Integer.parseInt(values[index++]);
+                        int mnc = Integer.parseInt(values[index++]);
+                        int lac = Integer.parseInt(values[index++], 16);
+                        int cid = Integer.parseInt(values[index++], 16);
+                        int rssi = Integer.parseInt(values[index++]);
+                        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
                 break;
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                // Odometer
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                if (index < values.length) {
+                index++;
+
+                // Hours
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    try {
+                         long totalSeconds = 0;
+                         if (hours.length > 0 && !hours[0].isEmpty()) {
+                             totalSeconds += Integer.parseInt(hours[0]) * 3600L;
                          }
+                         if (hours.length > 1 && !hours[1].isEmpty()) {
+                             totalSeconds += Integer.parseInt(hours[1]) * 60L;
+                         }
+                         if (hours.length > 2 && !hours[2].isEmpty()) {
+                             totalSeconds += Integer.parseInt(hours[2]);
+                         }
+                         position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                // No need to increment index here as it's the last field checked explicitly
                 break;
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                // Power
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                index++;
+
+                // Battery
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                index++;
+
+                // ADC 1
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
+                index++;
+
+                // ADC 2
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                // No need to increment index here as it's the last field checked explicitly
                 break;
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Status
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
+                }
+                index++;
+
+                // IO
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        int io = Integer.parseInt(values[index], 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                    } catch (NumberFormatException e) { /* ignore or log */ }
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                index++;
+
+                // Geofence
+                String geofence = "";
                 if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    geofence += values[index];
                 }
+                index++;
+                if (index < values.length) {
+                    geofence += values[index];
+                }
+                index++;
+                if (!geofence.isEmpty()) {
+                    position.set(Position.KEY_GEOFENCE, geofence);
+                }
+
+                // Event Status
+                if (index < values.length) {
+                    position.set("eventStatus", values[index]);
+                }
+                index++;
+
+                // Packet Type
+                if (index < values.length) {
+                    position.set("packetType", values[index]);
+                }
+                // No need to increment index here as it's the last field checked explicitly
                 break;
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length) {
+                    position.set("eventData", values[index]);
+                }
                 break;
             case "OBD":
-                position.set("obd", values[index++]);
+                if (index < values.length) {
+                    position.set("obd", values[index]);
+                }
                 break;
             case "TAG":
-                position.set("tagData", values[index++]);
+                if (index < values.length) {
+                    position.set("tagData", values[index]);
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    int sensorIndex = -1;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            sensorIndex = Integer.parseInt(values[index]);
+                        } catch (NumberFormatException e) { /* ignore or log */ }
+                    }
+                    index++; // Increment for sensorIndex field
+
+                    int dataType = -1;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            dataType = Integer.parseInt(values[index]);
+                        } catch (NumberFormatException e) { /* ignore or log */ }
+                    }
+                    index++; // Increment for dataType field
+
+                    if (dataType == 0) { // Driver ID
+                        if (index < values.length) {
+                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        }
+                        index++; // Increment for driver ID value
+                    } else if (dataType == 1) { // Temperature
+                        index += 1; // Skip temperature sensor serial number
+                        if (sensorIndex != -1 && index < values.length && !values[index].isEmpty()) {
+                            try {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) { /* ignore or log */ }
+                        }
+                        index++; // Increment for temperature value
+                    } else {
+                        // Unknown data type or structure mismatch
+                        // Attempt to skip remaining fields for this entry if possible,
+                        // or break if the structure is unreliable
+                        // Based on original logic, let's assume we can't reliably continue.
+                        break;
                     }
                 }
                 break;
             default:
+                // Unknown fragment type, ignore or log
                 break;
         }
     }
\ No newline at end of file
