diff --git a/tmp/722828ae-1b04-41dc-bfc5-9449f232c669_buggy.java b/tmp/1ef69a82-3ec1-49d7-82ac-42f56981f9d0_fixed.java
index ad77f15..4469a51 100644
--- a/tmp/722828ae-1b04-41dc-bfc5-9449f232c669_buggy.java
+++ b/tmp/1ef69a82-3ec1-49d7-82ac-42f56981f9d0_fixed.java
@@ -1,112 +1,366 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+// Assume other necessary imports and class structure exist
+
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0) {
+            // Invalid fragment format (no colon)
+            return;
+        }
+
+        String type = fragment.substring(0, dataIndex);
+        String data = fragment.substring(dataIndex + 1);
+
         int index = 0;
         String[] values;
-        if (fragment.length() == dataIndex + 1) {
+        if (data.isEmpty()) { // Check if data part is empty (e.g., "COT:")
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Use split(";") as in original code. Handles consecutive delimiters like ";;" -> ""
+            // Note: This split variant might discard trailing empty strings if the string ends with ';'.
+            // If trailing empty fields are significant, consider using data.split(";", -1);
+            values = data.split(";");
         }
 
-        switch (fragment.substring(0, dataIndex)) {
+        try { // Add a general try-catch for robustness against unexpected format errors
+            switch (type) {
                 case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                    // Validity (A/V) - Assume present if GPS block exists
+                    if (index < values.length && !values[index].isEmpty()) {
+                        position.setValid(values[index].equals("A"));
                     }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                    index++;
+
+                    // Satellites - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                        } catch (NumberFormatException e) { /* Ignore */ }
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    index++;
+
+                    // Latitude - Assume present
+                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                        String latitudeStr = values[index];
+                        try { // Protect against NumberFormatException for this field
+                            double latitude = Double.parseDouble(latitudeStr.substring(1));
+                            if (latitudeStr.charAt(0) == 'S') {
+                                latitude = -latitude;
                             }
-                position.setCourse(Integer.parseInt(values[index++]));
+                            position.setLatitude(latitude);
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // Longitude - Assume present
+                    if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                        String longitudeStr = values[index];
+                        try { // Protect against NumberFormatException for this field
+                            double longitude = Double.parseDouble(longitudeStr.substring(1));
+                            if (longitudeStr.charAt(0) == 'W') {
+                                longitude = -longitude;
+                            }
+                            position.setLongitude(longitude);
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // Speed (KPH as Integer in original code) - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // Course (Integer in original code) - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                            position.setCourse(Integer.parseInt(values[index]));
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // Altitude (Optional based on index check)
                     if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                        if (!values[index].isEmpty()) {
+                            try { // Protect against NumberFormatException for this field
+                                position.setAltitude(Integer.parseInt(values[index]));
+                            } catch (NumberFormatException e) { /* Ignore */ }
+                        }
+                        index++; // Increment only if field exists in values array
                     }
+
+                    // HDOP (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                        if (!values[index].isEmpty()) {
+                            try { // Protect against NumberFormatException for this field
+                                position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) { /* Ignore */ }
                         }
+                        index++; // Increment only if field exists in values array
+                    }
+
+                    // VDOP (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                        if (!values[index].isEmpty()) {
+                            try { // Protect against NumberFormatException for this field
+                                position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) { /* Ignore */ }
+                        }
+                        index++; // Increment only if field exists in values array
                     }
-                break;
+                    break; // End of GPS
+
                 case "GSM":
                     index += 1; // registration status
                     index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
-                break;
+
+                    Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+
+                    // Assume fields are present if GSM block exists, but check index bounds and emptiness
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { lac = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { cid = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    if (mcc != null && mnc != null && lac != null && cid != null) {
+                        CellTower cellTower = CellTower.from(mcc, mnc, lac, cid);
+                        if (rssi != null) {
+                            cellTower.setSignalStrength(rssi);
+                        }
+                        position.setNetwork(new Network(cellTower));
+                    }
+                    break; // End of GSM
+
                 case "COT":
+                    // Odometer (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                        if (!values[index].isEmpty()) {
+                            try { // Protect against NumberFormatException for this field
+                                position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                            } catch (NumberFormatException e) { /* Ignore */ }
                         }
+                        index++; // Increment only if field exists in values array
+                    }
+
+                    // Hours (Optional based on index check)
                     if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        if (!values[index].isEmpty()) {
+                            String hoursValue = values[index];
+                            String[] hours = hoursValue.split("-");
+                            int h = 0, m = 0, s = 0;
+                            try { // Add inner try-catch for robustness of hour part parsing
+                                if (hours.length > 0 && !hours[0].isEmpty()) {
+                                    h = Integer.parseInt(hours[0]);
+                                }
+                                if (hours.length > 1 && !hours[1].isEmpty()) {
+                                    m = Integer.parseInt(hours[1]);
+                                }
+                                if (hours.length > 2 && !hours[2].isEmpty()) {
+                                    s = Integer.parseInt(hours[2]);
+                                }
+                                position.set(Position.KEY_HOURS, (h * 3600L + m * 60L + s) * 1000L);
+                            } catch (NumberFormatException e) {
+                                // Ignore malformed hours string part
+                            }
+                        }
+                        index++; // Increment only if field exists in values array
                     }
-                break;
+                    break; // End of COT
+
                 case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                    // Power - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                             position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // Battery (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                         if (!values[index].isEmpty()) {
+                             try { // Protect against NumberFormatException for this field
+                                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                             } catch (NumberFormatException e) { /* Ignore */ }
+                         }
+                         index++;
                     }
+                    // ADC1 (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                         if (!values[index].isEmpty()) {
+                             try { // Protect against NumberFormatException for this field
+                                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                             } catch (NumberFormatException e) { /* Ignore */ }
                          }
+                         index++;
+                    }
+                    // ADC2 (Optional based on index check)
                     if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                         if (!values[index].isEmpty()) {
+                             try { // Protect against NumberFormatException for this field
+                                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                             } catch (NumberFormatException e) { /* Ignore */ }
+                         }
+                         index++;
                     }
-                break;
+                    break; // End of ADC
+
                 case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    // Status - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                             position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                        } catch (NumberFormatException e) { /* Ignore */ }
+                    }
+                    index++;
+
+                    // IO - Assume present
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { // Protect against NumberFormatException for this field
+                            int io = Integer.parseInt(values[index], 16);
                             position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                             position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                             position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                             position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                             position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                             position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                             position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                             position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                        } catch (NumberFormatException e) { /* Ignore */ }
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                    index++;
+
+                    // Geofence Part 1 - Assume present
+                    String geofence1 = "";
                     if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                        geofence1 = values[index];
                     }
-                break;
+                    index++;
+                    // Geofence Part 2 - Assume present
+                    String geofence2 = "";
+                    if (index < values.length) {
+                        geofence2 = values[index];
+                    }
+                    index++;
+                    position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+
+                    // eventStatus - Assume present
+                    if (index < values.length) {
+                        position.set("eventStatus", values[index]);
+                    }
+                    index++;
+
+                    // packetType - Optional based on index check
+                    if (index < values.length) {
+                        position.set("packetType", values[index]);
+                        index++; // Increment only if field exists in values array
+                    }
+                    break; // End of DTT
+
                 case "ETD":
-                position.set("eventData", values[index++]);
+                    if (index < values.length) {
+                        position.set("eventData", values[index]);
+                        index++;
+                    }
                     break;
                 case "OBD":
-                position.set("obd", values[index++]);
+                    if (index < values.length) {
+                        position.set("obd", values[index]);
+                        index++;
+                    }
                     break;
                 case "TAG":
-                position.set("tagData", values[index++]);
+                    if (index < values.length) {
+                        position.set("tagData", values[index]);
+                        index++;
+                    }
                     break;
                 case "IWD":
+                     // Loop structure implies fields should exist in sets
                     while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        // Sensor Index
+                        Integer sensorIndex = null;
+                        String sensorIndexStr = values[index];
+                        if (!sensorIndexStr.isEmpty()) {
+                             try { sensorIndex = Integer.parseInt(sensorIndexStr); } catch (NumberFormatException e) { /* ignore */ }
                         }
+                        index++;
+                        // Cannot proceed without valid sensor index, break loop
+                        if (sensorIndex == null) { break; }
+
+                        // Data Type
+                        Integer dataType = null;
+                        if (index < values.length) { // Check index bound before accessing next value
+                            String dataTypeStr = values[index];
+                            if (!dataTypeStr.isEmpty()) {
+                                 try { dataType = Integer.parseInt(dataTypeStr); } catch (NumberFormatException e) { /* ignore */ }
                             }
+                            index++;
+                        } else { break; } // Data missing for type
+                        // Cannot proceed without valid data type, break loop
+                        if (dataType == null) { break; }
+
+                        if (dataType == 0) { // Driver ID
+                            if (index < values.length) {
+                                position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                                index++;
+                            } else { break; } // Data missing
+                        } else if (dataType == 1) { // Temperature
+                            // Skip temperature sensor serial number field
+                            if (index < values.length) {
+                                index++;
+                            } else { break; } // Data missing for serial number
+
+                            // Read temperature value
+                            if (index < values.length) {
+                                if (!values[index].isEmpty()) {
+                                     try { // Protect against NumberFormatException for this field
+                                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                                     } catch (NumberFormatException e) { /* ignore */ }
+                                }
+                                index++;
+                            } else { break; } // Data missing for temperature value
+                        } else {
+                            // Unknown data type, cannot determine structure, stop parsing IWD
                             break;
+                        }
+                    }
+                    break; // End of IWD
                 default:
+                    // Unknown fragment type, ignore
                     break;
             }
+        // Removed general try-catch around the switch to let specific catches handle NFE.
+        // Other exceptions like AIOOBE might still occur if protocol assumptions are violated.
+        } catch (ArrayIndexOutOfBoundsException e) {
+             // Log or ignore errors accessing data beyond expected bounds
+             // Log.warning("Error accessing data in fragment: " + fragment, e);
+        } catch (Exception e) {
+             // Catch other potential runtime errors
+             // Log.warning("Error decoding fragment: " + fragment, e);
+        }
     }
\ No newline at end of file
