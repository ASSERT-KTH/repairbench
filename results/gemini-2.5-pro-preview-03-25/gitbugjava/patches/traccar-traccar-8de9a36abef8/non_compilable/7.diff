diff --git a/tmp/d21fadb1-15f0-465d-8c93-d6156764c772_buggy.java b/tmp/aef85986-57d3-40d3-920f-74febe89f7e0_fixed.java
index ad77f15..ee7c327 100644
--- a/tmp/d21fadb1-15f0-465d-8c93-d6156764c772_buggy.java
+++ b/tmp/aef85986-57d3-40d3-920f-74febe89f7e0_fixed.java
@@ -1,112 +1,317 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+// Add other necessary imports here if needed, e.g.:
+// import org.slf4j.Logger;
+// import org.slf4j.LoggerFactory;
+
+// Assume the class containing this method exists
+
+    // private static final Logger Log = LoggerFactory.getLogger(GoSafeProtocolDecoder.class); // Optional: for logging errors
+
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0) { // No colon found, invalid fragment format
+            // Log.warn("Invalid fragment format (no colon): " + fragment); // Optional logging
+            return;
+        }
+
+        String type = fragment.substring(0, dataIndex);
+        // Check if data part exists, even if empty
+        String data = (dataIndex == fragment.length() - 1) ? "" : fragment.substring(dataIndex + 1);
+        // Use -1 limit to preserve trailing empty strings, crucial for optional fields at the end
+        String[] values = data.split(";", -1);
+
         int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
 
-        switch (fragment.substring(0, dataIndex)) {
+        try { // Add a general try-catch for robustness within fragment types
+            switch (type) {
                 case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                    // Field 1: Validity (e.g., "A" or "V")
+                    if (index < values.length) {
+                        position.setValid(values[index].equals("A"));
+                    }
+                    index++;
+                    // Field 2: Satellites in use
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse satellites: " + values[index], e); */ }
+                    }
+                    index++;
+                    // Field 3: Latitude (e.g., N31.551856)
+                    if (index < values.length && values[index].length() > 1) { // Need at least direction char + value
+                        try {
                             position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                            if (values[index].charAt(0) == 'S') {
                                 position.setLatitude(-position.getLatitude());
                             }
+                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* Log.warn("Failed to parse latitude: " + values[index], e); */ }
+                    }
+                    index++;
+                    // Field 4: Longitude (e.g., E74.366920)
+                    if (index < values.length && values[index].length() > 1) { // Need at least direction char + value
+                        try {
                             position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                            if (values[index].charAt(0) == 'W') {
                                 position.setLongitude(-position.getLongitude());
                             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                        } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* Log.warn("Failed to parse longitude: " + values[index], e); */ }
                     }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    index++;
+                    // Field 5: Speed (KPH)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index])));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse speed: " + values[index], e); */ }
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    index++;
+                    // Field 6: Course
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.setCourse(Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse course: " + values[index], e); */ }
                     }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    index++;
+                    // Field 7: Altitude
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.setAltitude(Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse altitude: " + values[index], e); */ }
                     }
+                    index++;
+                    // Field 8: HDOP
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse HDOP: " + values[index], e); */ }
+                    }
+                    index++;
+                    // Field 9: VDOP
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse VDOP: " + values[index], e); */ }
+                    }
+                    index++;
                     break;
                 case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    index++; // Skip registration status (field 1)
+                    index++; // Skip signal strength (field 2) - often redundant with cell tower RSSI
+                    Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+                    // Field 3: MCC
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { mcc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Field 4: MNC
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { mnc = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Field 5: LAC (Hex)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { lac = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Field 6: CID (Hex)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { cid = Integer.parseInt(values[index], 16); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Field 7: RSSI
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { rssi = Integer.parseInt(values[index]); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Construct CellTower if essential fields are valid
+                    if (mcc != null && mnc != null && lac != null && cid != null) {
+                        position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+                    }
                     break;
                 case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    // Field 1: Odometer
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.KEY_ODOMETER, Long.parseLong(values[index])); } catch (NumberFormatException e) { /* ignore */ }
                     }
-                if (index < values.length) {
+                    index++;
+                    // Field 2: Hours (format H-M-S)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
                             String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                            long totalSeconds = 0;
+                            if (hours.length > 0 && !hours[0].isEmpty()) {
+                                totalSeconds += Long.parseLong(hours[0]) * 3600;
                             }
+                            if (hours.length > 1 && !hours[1].isEmpty()) {
+                                totalSeconds += Integer.parseInt(hours[1]) * 60;
+                            }
+                            if (hours.length > 2 && !hours[2].isEmpty()) {
+                                totalSeconds += Integer.parseInt(hours[2]);
+                            }
+                            position.set(Position.KEY_HOURS, totalSeconds * 1000L); // Store as milliseconds
+                        } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
                     break;
                 case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    // Field 1: Power (External Voltage)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.KEY_POWER, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    index++;
+                    // Field 2: Battery (Internal Battery Voltage)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.KEY_BATTERY, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
                     }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    index++;
+                    // Field 3: ADC1
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
                     }
+                    index++;
+                    // Field 4: ADC2
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index])); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
                     break;
                 case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    // Field 1: Status (Hex)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try { position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16)); } catch (NumberFormatException e) { /* ignore */ }
+                    }
+                    index++;
+                    // Field 2: IO (Hex)
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            int io = Integer.parseInt(values[index], 16);
                             position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                             position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                             position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                             position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                             position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                             position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                             position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                             position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                        } catch (NumberFormatException e) { /* ignore */ }
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                    index++;
+                    // Field 3 & 4: Geofence ID (concatenated)
+                    String geofence = "";
                     if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                        geofence += values[index]; // Assume content is string ID part 1
                     }
+                    index++;
+                    if (index < values.length) {
+                        geofence += values[index]; // Assume content is string ID part 2
+                    }
+                    index++;
+                    if (!geofence.isEmpty()) {
+                        position.set(Position.KEY_GEOFENCE, geofence);
+                    }
+                    // Field 5: Event Status
+                    if (index < values.length) {
+                        position.set("eventStatus", values[index]); // Assumed string value
+                    }
+                    index++;
+                    // Field 6: Packet Type
+                    if (index < values.length) {
+                        position.set("packetType", values[index]); // Assumed string value
+                    }
+                    index++;
                     break;
                 case "ETD":
-                position.set("eventData", values[index++]);
+                    // Field 1: Event Data
+                    if (index < values.length) {
+                        position.set("eventData", values[index]); // Assumed string value
+                    }
+                    index++;
                     break;
                 case "OBD":
-                position.set("obd", values[index++]);
+                    // Field 1: OBD Data
+                    if (index < values.length) {
+                        position.set("obd", values[index]); // Assumed string value
+                    }
+                    index++;
                     break;
                 case "TAG":
-                position.set("tagData", values[index++]);
+                    // Field 1: Tag Data
+                    if (index < values.length) {
+                        position.set("tagData", values[index]); // Assumed string value
+                    }
+                    index++;
                     break;
                 case "IWD":
+                     // Use nested try-catch for IWD loop robustness
+                     try {
                         while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                            // Need at least sensor index (field i) and data type (field i+1)
+                            if (index + 1 >= values.length) {
+                                break; // Not enough fields left for a complete entry
                             }
+                            String sensorIndexStr = values[index];
+                            String dataTypeStr = values[index + 1];
+
+                            // Sensor index and data type are required; if empty, data is likely corrupt
+                            if (sensorIndexStr.isEmpty() || dataTypeStr.isEmpty()) {
+                                // Log.warn("Empty sensor index or data type in IWD: " + fragment + " at index " + index); // Optional log
+                                index = values.length; // Assume rest of IWD data is corrupt, break loop
+                                break;
+                            }
+
+                            int sensorIndex = Integer.parseInt(sensorIndexStr); // Can throw NFE
+                            int dataType = Integer.parseInt(dataTypeStr);     // Can throw NFE
+
+                            if (dataType == 0) { // Driver ID (needs 1 value field: index+2)
+                                if (index + 2 < values.length) {
+                                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index + 2]);
+                                    index += 3; // Consumed index, type, value
+                                } else {
+                                    // Log.warn("Missing value for IWD Driver ID: " + fragment); // Optional log
+                                    index = values.length; // Not enough fields, break loop
+                                }
+                            } else if (dataType == 1) { // Temperature (needs 2 fields: serial (index+2) + value (index+3))
+                                if (index + 3 < values.length) {
+                                    String tempValueStr = values[index + 3];
+                                    if (!tempValueStr.isEmpty()) {
+                                        try {
+                                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValueStr));
+                                        } catch (NumberFormatException e) { /* Log.warn("Failed to parse IWD temperature value: " + tempValueStr, e); */ }
+                                    }
+                                    index += 4; // Consumed index, type, serial, value
+                                } else {
+                                    // Log.warn("Missing serial/value for IWD Temperature: " + fragment); // Optional log
+                                    index = values.length; // Not enough fields, break loop
+                                }
+                            } else { // Unknown type - assume 1 value field (index+2) to skip
+                                // Log.warn("Unknown IWD data type: " + dataType + " in fragment: " + fragment); // Optional log
+                                if (index + 2 < values.length) {
+                                    index += 3; // Skip index, type, unknown value
+                                } else {
+                                    index = values.length; // Not enough fields to skip, break loop
+                                }
+                            }
+                        }
+                     } catch (NumberFormatException e) {
+                         // Error parsing required sensorIndex or dataType, stop processing IWD for this fragment
+                         // Log.warn("Error parsing IWD sensor/type in fragment: " + fragment, e); // Optional log
+                     } catch (ArrayIndexOutOfBoundsException e) {
+                         // Should be prevented by checks, but safety catch
+                         // Log.error("ArrayIndexOutOfBounds in IWD parsing for fragment: " + fragment, e); // Optional log
                      }
                     break;
                 default:
+                    // Unknown fragment type, ignore
+                    // Log.warn("Unknown fragment type: " + type); // Optional log
                     break;
             }
+        } catch (Exception e) {
+            // Catch any other unexpected errors during fragment processing
+            // Log.error("Error decoding fragment '" + fragment + "'", e); // Optional log
+        }
     }
\ No newline at end of file
