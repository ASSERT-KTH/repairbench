diff --git a/tmp/52e5fced-585b-4238-8d4c-6f2cab5b9626_buggy.java b/tmp/8e94e58e-3f58-4a70-8289-2684cc052fdf_fixed.java
index ad77f15..953f620 100644
--- a/tmp/52e5fced-585b-4238-8d4c-6f2cab5b9626_buggy.java
+++ b/tmp/8e94e58e-3f58-4a70-8289-2684cc052fdf_fixed.java
@@ -1,112 +1,370 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+public class GoSafeProtocolDecoder { // Added class wrapper for context
+
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex == -1 || dataIndex + 1 > fragment.length()) {
+             // Handle invalid fragment format if necessary, or just return
+             return;
+        }
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
+            // If the part after ':' is empty, values should be empty array
             values = new String[0];
         } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+            // Use -1 limit for split to keep trailing empty strings
+            values = fragment.substring(dataIndex + 1).split(";", -1);
         }
 
+        // Helper function to safely parse Double
+        Double parseDouble(String s) {
+            try {
+                return Double.parseDouble(s);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+
+        // Helper function to safely parse Integer
+        Integer parseInt(String s, int radix) {
+             try {
+                 return Integer.parseInt(s, radix);
+             } catch (NumberFormatException e) {
+                 return null;
+             }
+        }
+         Integer parseInt(String s) {
+             return parseInt(s, 10);
+         }
+
+        // Helper function to safely parse Long
+        Long parseLong(String s) {
+             try {
+                 return Long.parseLong(s);
+             } catch (NumberFormatException e) {
+                 return null;
+             }
+        }
+
+
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                // index = 0: Validity
+                if (index < values.length) {
+                    position.setValid(values[index].equals("A"));
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                index++;
+
+                // index = 1: Satellites
+                if (index < values.length && !values[index].isEmpty()) {
+                    Integer satellites = parseInt(values[index]);
+                    if (satellites != null) {
+                        position.set(Position.KEY_SATELLITES, satellites);
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
+
+                // index = 2: Latitude
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                     Double latitude = parseDouble(values[index].substring(1));
+                     if (latitude != null) {
+                         if (values[index].charAt(0) == 'S') {
+                             latitude = -latitude;
                          }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                         position.setLatitude(latitude);
+                     }
+                }
+                index++;
+
+                // index = 3: Longitude
+                if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) {
+                    Double longitude = parseDouble(values[index].substring(1));
+                    if (longitude != null) {
+                        if (values[index].charAt(0) == 'W') {
+                            longitude = -longitude;
+                        }
+                        position.setLongitude(longitude);
+                    }
+                }
+                index++;
+
+                // index = 4: Speed (KPH based on original code's converter)
+                if (index < values.length && !values[index].isEmpty()) {
+                    Double speedKph = parseDouble(values[index]);
+                    if (speedKph != null) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(speedKph));
+                    }
+                }
+                index++;
+
+                // index = 5: Course
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double course = parseDouble(values[index]);
+                     if (course != null) {
+                         position.setCourse(course);
+                     }
+                }
+                index++;
+
+                // index = 6: Altitude
+                if (index < values.length && !values[index].isEmpty()) {
+                    Double altitude = parseDouble(values[index]);
+                     if (altitude != null) {
+                         position.setAltitude(altitude);
+                     }
+                }
+                index++;
+
+                // index = 7: HDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double hdop = parseDouble(values[index]);
+                     if (hdop != null) {
+                         position.set(Position.KEY_HDOP, hdop);
+                     }
+                }
+                index++;
+
+                // index = 8: VDOP
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double vdop = parseDouble(values[index]);
+                     if (vdop != null) {
+                         position.set(Position.KEY_VDOP, vdop);
                      }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
                 }
+                index++;
                 break;
+
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                index += 1; // index = 1: registration status (not parsed)
+                index += 1; // index = 2: signal strength (not parsed)
+
+                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+
+                // index = 2: MCC
+                if (index < values.length && !values[index].isEmpty()) {
+                    mcc = parseInt(values[index]);
+                }
+                index++;
+                // index = 3: MNC
+                if (index < values.length && !values[index].isEmpty()) {
+                    mnc = parseInt(values[index]);
+                }
+                index++;
+                // index = 4: LAC (hex)
+                if (index < values.length && !values[index].isEmpty()) {
+                    lac = parseInt(values[index], 16);
+                }
+                index++;
+                // index = 5: CID (hex)
+                if (index < values.length && !values[index].isEmpty()) {
+                    cid = parseInt(values[index], 16);
+                }
+                index++;
+                // index = 6: RSSI
+                if (index < values.length && !values[index].isEmpty()) {
+                    rssi = parseInt(values[index]);
+                }
+                index++;
+
+                // Only create CellTower if essential info is present
+                if (mcc != null && mnc != null && lac != null && cid != null) {
+                    CellTower cellTower = CellTower.from(mcc, mnc, lac, cid, rssi); // rssi can be null
+                    position.setNetwork(new Network(cellTower));
+                }
                 break;
+
             case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                // index = 0: Odometer
+                if (index < values.length && !values[index].isEmpty()) {
+                    Long odometer = parseLong(values[index]);
+                    if (odometer != null) {
+                        position.set(Position.KEY_ODOMETER, odometer);
                     }
-                if (index < values.length) {
+                }
+                index++;
+
+                // index = 1: Hours (H-M-S)
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    long totalSeconds = 0;
+                    boolean parsedSomething = false;
+                    if (hours.length > 0 && !hours[0].isEmpty()) {
+                        Integer h = parseInt(hours[0]);
+                        if (h != null) {
+                            totalSeconds += h * 3600L;
+                            parsedSomething = true;
                         }
+                    }
+                    if (hours.length > 1 && !hours[1].isEmpty()) {
+                        Integer m = parseInt(hours[1]);
+                         if (m != null) {
+                             totalSeconds += m * 60L;
+                             parsedSomething = true;
+                         }
+                    }
+                    if (hours.length > 2 && !hours[2].isEmpty()) {
+                         Integer s = parseInt(hours[2]);
+                          if (s != null) {
+                              totalSeconds += s;
+                              parsedSomething = true;
+                          }
+                    }
+                    if (parsedSomething) {
+                       position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                    }
+                }
+                index++;
                 break;
+
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                // index = 0: Power
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double power = parseDouble(values[index]);
+                     if (power != null) {
+                         position.set(Position.KEY_POWER, power);
                      }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                index++;
+                // index = 1: Battery
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double battery = parseDouble(values[index]);
+                     if (battery != null) {
+                         position.set(Position.KEY_BATTERY, battery);
                      }
+                }
+                index++;
+                // index = 2: ADC 1
+                if (index < values.length && !values[index].isEmpty()) {
+                     Double adc1 = parseDouble(values[index]);
+                     if (adc1 != null) {
+                         position.set(Position.PREFIX_ADC + 1, adc1);
+                     }
+                }
+                index++;
+                // index = 3: ADC 2
+                if (index < values.length && !values[index].isEmpty()) {
+                    Double adc2 = parseDouble(values[index]);
+                    if (adc2 != null) {
+                        position.set(Position.PREFIX_ADC + 2, adc2);
+                    }
+                }
+                index++;
                 break;
+
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // index = 0: Status (hex)
+                if (index < values.length && !values[index].isEmpty()) {
+                    Integer status = parseInt(values[index], 16);
+                    if (status != null) {
+                        position.set(Position.KEY_STATUS, status);
+                    }
+                }
+                index++;
+
+                // index = 1: IO (hex)
+                if (index < values.length && !values[index].isEmpty()) {
+                    Integer io = parseInt(values[index], 16);
+                    if (io != null) {
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+                }
+                index++;
+
+                // index = 2, 3: Geofence
+                if (index < values.length && index + 1 < values.length) {
+                    position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);
+                }
+                index += 2;
+
+                // index = 4: Event Status
+                if (index < values.length) {
+                    position.set("eventStatus", values[index]);
+                }
+                index++;
+
+                // index = 5: Packet Type
                 if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                    position.set("packetType", values[index]);
                 }
+                index++;
                 break;
-            case "ETD":
+
+            case "ETD": // String data
+                if (index < values.length) {
                     position.set("eventData", values[index++]);
+                }
                 break;
-            case "OBD":
+            case "OBD": // String data
+                if (index < values.length) {
                     position.set("obd", values[index++]);
+                }
                 break;
-            case "TAG":
+            case "TAG": // String data
+                 if (index < values.length) {
                     position.set("tagData", values[index++]);
+                 }
                 break;
+
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // index: Sensor Index
+                    Integer sensorIndex = null;
+                    if (!values[index].isEmpty()) {
+                        sensorIndex = parseInt(values[index]);
                     }
+                    index++;
+
+                    // index+1: Data Type
+                    Integer dataType = null;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        dataType = parseInt(values[index]);
                     }
+                    index++;
+
+                    if (sensorIndex == null || dataType == null) {
+                        // If index or type is missing/invalid, cannot reliably parse rest of IWD block
                         break;
+                    }
+
+                    if (dataType == 0) { // Driver ID
+                        if (index < values.length) { // Value is a string
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        }
+                        index++;
+                    } else if (dataType == 1) { // Temperature
+                        index += 1; // Skip temperature sensor serial number
+                        if (index < values.length && !values[index].isEmpty()) {
+                            Double temperature = parseDouble(values[index]);
+                            if (temperature != null) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, temperature);
+                            }
+                        }
+                        index++;
+                    } else {
+                        // Unknown data type: Cannot know how many fields to skip. Stop parsing IWD.
+                        break;
+                    }
+                }
+                break;
+
             default:
+                // Unknown fragment type, ignore
                 break;
         }
     }
+
+} // Added class wrapper for context
\ No newline at end of file
