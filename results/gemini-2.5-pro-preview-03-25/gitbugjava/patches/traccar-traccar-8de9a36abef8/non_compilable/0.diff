diff --git a/tmp/65012400-b7bb-4141-8ea8-3554fe3ac1ed_buggy.java b/tmp/8b581bcb-acbf-45ab-a699-530bd53198d4_fixed.java
index ad77f15..2add963 100644
--- a/tmp/65012400-b7bb-4141-8ea8-3554fe3ac1ed_buggy.java
+++ b/tmp/8b581bcb-acbf-45ab-a699-530bd53198d4_fixed.java
@@ -1,112 +1,332 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
+        if (dataIndex < 0 || dataIndex == fragment.length() - 1) {
+            // Invalid fragment format or empty data, nothing to decode
+            return;
+        }
+
         int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
+        // Split defensively, ensuring trailing empty strings are captured if needed
+        String[] values = fragment.substring(dataIndex + 1).split(";", -1);
+
+        // Helper function to safely parse Integer
+        Integer parseIntSafe(String s) {
+            if (s == null || s.isEmpty()) {
+                return null;
             }
+            try {
+                return Integer.parseInt(s);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+
+        // Helper function to safely parse Integer (Hex)
+        Integer parseIntHexSafe(String s) {
+            if (s == null || s.isEmpty()) {
+                return null;
+            }
+            try {
+                return Integer.parseInt(s, 16);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+
+        // Helper function to safely parse Long
+        Long parseLongSafe(String s) {
+            if (s == null || s.isEmpty()) {
+                return null;
+            }
+            try {
+                return Long.parseLong(s);
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+
+        // Helper function to safely parse Double
+        Double parseDoubleSafe(String s) {
+             if (s == null || s.isEmpty()) {
+                 return null;
+             }
+             try {
+                 return Double.parseDouble(s);
+             } catch (NumberFormatException e) {
+                 return null;
+             }
+        }
+
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                // Validity
+                if (index < values.length) {
+                    position.setValid(values[index].equals("A"));
+                }
+                index++;
+
+                // Satellites
+                if (index < values.length) {
+                    Integer satellites = parseIntSafe(values[index]);
+                    if (satellites != null) {
+                        position.set(Position.KEY_SATELLITES, satellites);
+                    }
+                }
+                index++;
+
+                // Latitude
+                if (index < values.length && values[index].length() > 1) {
+                    try {
+                        double latitude = Double.parseDouble(values[index].substring(1));
+                        if (values[index].charAt(0) == 'S') {
+                            latitude = -latitude;
                         }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                        position.setLatitude(latitude);
+                    } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                        // Ignore invalid latitude format
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
+                index++;
+
+                // Longitude
+                if (index < values.length && values[index].length() > 1) {
+                     try {
+                        double longitude = Double.parseDouble(values[index].substring(1));
+                        if (values[index].charAt(0) == 'W') {
+                            longitude = -longitude;
+                        }
+                        position.setLongitude(longitude);
+                     } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                         // Ignore invalid longitude format
+                     }
+                }
+                index++;
+
+                // Speed (KPH, convert to Knots)
                 if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                    Double speedKph = parseDoubleSafe(values[index]);
+                    if (speedKph != null) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(speedKph));
+                    }
                 }
+                index++;
+
+                // Course
                 if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    Double course = parseDoubleSafe(values[index]); // Course might be decimal
+                    if (course != null) {
+                        position.setCourse(course);
                     }
+                }
+                index++;
+
+                // Altitude
+                if (index < values.length) {
+                     Double altitude = parseDoubleSafe(values[index]); // Altitude might be decimal
+                     if (altitude != null) {
+                         position.setAltitude(altitude);
+                     }
+                }
+                index++;
+
+                // HDOP
                 if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    Double hdop = parseDoubleSafe(values[index]);
+                    if (hdop != null) {
+                        position.set(Position.KEY_HDOP, hdop);
+                    }
+                }
+                index++;
+
+                // VDOP
+                if (index < values.length) {
+                     Double vdop = parseDoubleSafe(values[index]);
+                     if (vdop != null) {
+                         position.set(Position.KEY_VDOP, vdop);
+                     }
                 }
+                index++;
                 break;
+
             case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                index += 1; // registration status (skip)
+                index += 1; // signal strength (skip)
+
+                Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+
+                if (index < values.length) { mcc = parseIntSafe(values[index]); } index++;
+                if (index < values.length) { mnc = parseIntSafe(values[index]); } index++;
+                if (index < values.length) { lac = parseIntHexSafe(values[index]); } index++;
+                if (index < values.length) { cid = parseIntHexSafe(values[index]); } index++;
+                if (index < values.length) { rssi = parseIntSafe(values[index]); } index++;
+
+                if (mcc != null && mnc != null && lac != null && cid != null) {
+                    CellTower cellTower = CellTower.from(mcc, mnc, lac, cid);
+                    if (rssi != null) {
+                        cellTower.setSignalStrength(rssi);
+                    }
+                    position.setNetwork(new Network(cellTower));
+                }
                 break;
+
             case "COT":
+                // Odometer
                 if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    Long odometer = parseLongSafe(values[index]);
+                    if (odometer != null) {
+                        position.set(Position.KEY_ODOMETER, odometer);
                     }
-                if (index < values.length) {
+                }
+                index++;
+
+                // Hours
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
                         String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        long h = hours.length > 0 ? parseLongSafe(hours[0]) != null ? parseLongSafe(hours[0]) : 0 : 0;
+                        long m = hours.length > 1 ? parseLongSafe(hours[1]) != null ? parseLongSafe(hours[1]) : 0 : 0;
+                        long s = hours.length > 2 ? parseLongSafe(hours[2]) != null ? parseLongSafe(hours[2]) : 0 : 0;
+                        position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000L);
+                    } catch (Exception e) { // Catch potential split or parse issues broadly
+                         // Ignore invalid hours format
                     }
+                }
+                index++; // Increment index for the hours field
                 break;
+
             case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                // Power
                 if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    Double power = parseDoubleSafe(values[index]);
+                    if (power != null) {
+                        position.set(Position.KEY_POWER, power);
                     }
+                }
+                index++;
+
+                // Battery
+                if (index < values.length) {
+                    Double battery = parseDoubleSafe(values[index]);
+                    if (battery != null) {
+                        position.set(Position.KEY_BATTERY, battery);
+                    }
+                }
+                index++;
+
+                // ADC 1
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    Double adc1 = parseDoubleSafe(values[index]);
+                    if (adc1 != null) {
+                        position.set(Position.PREFIX_ADC + 1, adc1);
+                    }
                 }
+                index++;
+
+                // ADC 2
                 if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    Double adc2 = parseDoubleSafe(values[index]);
+                    if (adc2 != null) {
+                        position.set(Position.PREFIX_ADC + 2, adc2);
+                    }
                 }
+                index++;
                 break;
+
             case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                // Status
+                if (index < values.length) {
+                    Integer status = parseIntHexSafe(values[index]);
+                    if (status != null) {
+                        position.set(Position.KEY_STATUS, status);
+                    }
+                }
+                index++;
+
+                // IO
+                if (index < values.length && !values[index].isEmpty()) { // Check if IO value exists and is not empty
+                    Integer io = parseIntHexSafe(values[index]);
+                    if (io != null) {
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
                 }
+                index++; // Always increment index for the IO field position
+
+                // Geofence
+                String geofence1 = index < values.length ? values[index] : ""; index++;
+                String geofence2 = index < values.length ? values[index] : ""; index++;
+                position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+
+                // Event Status
+                if (index < values.length) { position.set("eventStatus", values[index]); } index++;
+
+                // Packet Type
+                if (index < values.length) { position.set("packetType", values[index]); } index++;
                 break;
+
             case "ETD":
-                position.set("eventData", values[index++]);
+                if (index < values.length) { position.set("eventData", values[index]); } index++;
                 break;
+
             case "OBD":
-                position.set("obd", values[index++]);
+                if (index < values.length) { position.set("obd", values[index]); } index++;
                 break;
+
             case "TAG":
-                position.set("tagData", values[index++]);
+                if (index < values.length) { position.set("tagData", values[index]); } index++;
                 break;
+
             case "IWD":
                 while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    // Sensor Index
+                    Integer sensorIndex = parseIntSafe(values[index]);
+                    index++;
+                    if (sensorIndex == null) { continue; } // Skip entry if index is invalid/missing
+
+                    // Data Type
+                    if (index >= values.length) { break; } // Need data type
+                    Integer dataType = parseIntSafe(values[index]);
+                    index++;
+                    if (dataType == null) { continue; } // Skip entry if data type is invalid/missing
+
+                    if (dataType == 0) { // Driver ID
+                        if (index < values.length) {
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        } else {
+                           break; // Missing value for type 0
+                        }
+                        index++;
+                    } else if (dataType == 1) { // Temperature
+                        // Skip Serial Number field
+                        if (index >= values.length) { break; } // Missing serial number field
+                        index++;
+
+                        // Temperature Value
+                        if (index < values.length) {
+                            Double temperature = parseDoubleSafe(values[index]);
+                            if (temperature != null) {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, temperature);
+                            }
+                        } else {
+                             break; // Missing temperature value field
+                        }
+                        index++;
+                    } else {
+                        // Unknown data type - Stop processing IWD
+                        break;
                     }
                 }
                 break;
             default:
+                // Unknown fragment type, ignore
                 break;
         }
     }
\ No newline at end of file
