diff --git a/tmp/5ab7a0dc-6cfc-4f91-98a4-53e534509c7d_buggy.java b/tmp/8fcfd0d8-29c5-414a-9401-c7a9ec5c0b3e_fixed.java
index ad77f15..8eb181c 100644
--- a/tmp/5ab7a0dc-6cfc-4f91-98a4-53e534509c7d_buggy.java
+++ b/tmp/8fcfd0d8-29c5-414a-9401-c7a9ec5c0b3e_fixed.java
@@ -1,112 +1,290 @@
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+// Add necessary imports if they are not already present
+
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    if (dataIndex < 0 || dataIndex == fragment.length() - 1) {
+        // Invalid fragment format or empty data
+        return;
+    }
+
     int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
+    String[] values = fragment.substring(dataIndex + 1).split(";", -1); // Use -1 limit to keep trailing empty strings
 
-        switch (fragment.substring(0, dataIndex)) {
+    String type = fragment.substring(0, dataIndex);
+
+    switch (type) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            // Field order: Validity;Satellites;Latitude;Longitude;Speed;Course;Altitude;HDOP;VDOP
+            if (index < values.length) { // Validity
+                position.setValid(values[index].equals("A"));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Satellites
+                try {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Latitude
+                try {
                     position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                    if (values[index].charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
+                } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty() && values[index].length() > 1) { // Longitude
+                try {
                     position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    if (values[index].charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                } catch (NumberFormatException | StringIndexOutOfBoundsException e) { /* ignore */ }
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Speed (assuming knots)
+                try {
+                    position.setSpeed(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Course
+                try {
+                    position.setCourse(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Altitude
+                try {
+                    position.setAltitude(Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // HDOP
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // VDOP
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            // index++; // No need to increment after the last field
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            // Field order: Reg Status;Signal Strength;MCC;MNC;LAC;CID;RSSI
+            index += 1; // skip registration status
+            index += 1; // skip signal strength (parsed later as RSSI)
+
+            Integer mcc = null, mnc = null, lac = null, cid = null, rssi = null;
+
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    lac = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    cid = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    rssi = Integer.parseInt(values[index]);
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            // index++; // No need to increment after the last field
+
+            if (mcc != null && mnc != null && lac != null && cid != null) {
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            // Field order: Odometer;Hours
+            if (index < values.length && !values[index].isEmpty()) { // Odometer
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                if (index < values.length) {
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Hours (format H-M-S)
+                long totalSeconds = 0;
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                try {
+                    if (hours.length > 0 && !hours[0].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[0]) * 3600;
                     }
+                    if (hours.length > 1 && !hours[1].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[1]) * 60;
+                    }
+                    if (hours.length > 2 && !hours[2].isEmpty()) {
+                        totalSeconds += Long.parseLong(hours[2]);
+                    }
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000); // Stored as milliseconds
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            // index++; // No need to increment after the last field
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            // Field order: Power;Battery;ADC1;ADC2
+            if (index < values.length && !values[index].isEmpty()) { // Power
+                try {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // Battery
+                try {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // ADC1
+                try {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // ADC2
+                try {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            // index++; // No need to increment after the last field
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            // Field order: Status;IO;Geofence1;Geofence2;EventStatus;PacketType
+            if (index < values.length && !values[index].isEmpty()) { // Status (hex)
+                try {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException e) { /* ignore */ }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) { // IO (hex)
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException e) { /* ignore */ }
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+            index++;
+            String geofence1 = "";
             if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                geofence1 = values[index];
             }
+            index++;
+            String geofence2 = "";
+            if (index < values.length) {
+                geofence2 = values[index];
+            }
+            index++;
+            position.set(Position.KEY_GEOFENCE, geofence1 + geofence2); // Geofence (concatenation of two fields)
+
+            if (index < values.length) { // Event status
+                position.set("eventStatus", values[index]);
+            }
+            index++;
+            if (index < values.length) { // Packet type (optional)
+                position.set("packetType", values[index]);
+            }
+            // index++; // No need to increment after the last field
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) {
+                position.set("eventData", values[index]);
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) {
+                position.set("obd", values[index]);
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) {
+                position.set("tagData", values[index]);
+            }
             break;
         case "IWD":
+            // Field order repeats: SensorIndex;DataType;Value(s)...
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
-                    } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                Integer sensorIndex = null;
+                if (index < values.length && !values[index].isEmpty()) {
+                     try {
+                        sensorIndex = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException e) { /* ignore parsing error, index still increments */ }
+                }
+                index++;
+
+                Integer dataType = null;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        dataType = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException e) { /* ignore parsing error, index still increments */ }
+                }
+                index++;
+
+                if (dataType == null) {
+                     // If dataType is missing or invalid, we cannot reliably parse the rest.
+                     // It's safer to break than risk misinterpreting subsequent data.
+                     break;
+                }
+
+                if (dataType == 0) { // Driver ID
+                    if (index < values.length) { // Check value exists
+                        if (sensorIndex != null) { // Only set if sensorIndex was valid
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                        }
+                    }
+                    index++;
+                } else if (dataType == 1) { // Temperature
+                    index += 1; // skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) { // Check value exists and is not empty
+                        if (sensorIndex != null) { // Only set if sensorIndex was valid
+                            try {
+                                position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                            } catch (NumberFormatException e) { /* ignore */ }
+                        }
+                    }
+                    index++;
+                } else {
+                    // Unknown data type - The number of fields is unknown. Break the loop
+                    // to avoid potential ArrayIndexOutOfBoundsException or incorrect parsing.
+                    break;
                 }
             }
             break;
         default:
+            // Unknown fragment type, ignore
             break;
     }
 }
\ No newline at end of file
