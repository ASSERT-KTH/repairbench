diff --git a/tmp/6b7b8041-dabd-47d4-b05c-02bf6e935191_buggy.java b/tmp/1f6e2329-ac17-462e-8d00-528dabfe9989_fixed.java
index 3f62e3d..26fb5ad 100644
--- a/tmp/6b7b8041-dabd-47d4-b05c-02bf6e935191_buggy.java
+++ b/tmp/1f6e2329-ac17-462e-8d00-528dabfe9989_fixed.java
@@ -1,189 +1,299 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.Position;
+
+// Add dummy classes and interfaces required for compilation if they are not present
+// This is just for making the code snippet compilable in isolation
+interface Channel {
+}
+interface SocketAddress {
+}
+interface ByteBuf {
+    int readerIndex();
+    int writerIndex();
+    int indexOf(int readerIndex, int writerIndex, byte value);
+    ByteBuf readerIndex(int index);
+    ByteBuf readSlice(int length);
+    String toString(java.nio.charset.Charset charset);
+    ByteBuf skipBytes(int length);
+    long readUnsignedIntLE();
+    int readUnsignedShortLE();
+    short readShortLE();
+    int readIntLE();
+    int readUnsignedByte();
+    int getUnsignedByte(int index);
+    int readUnsignedShort();
+}
+class BaseProtocolDecoder {
+     public BaseProtocolDecoder(Protocol protocol) {}
+     protected String getProtocolName() { return "meitrack"; }
+     protected DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) { return new DeviceSession(0); }
+}
+class Protocol {}
+class Position {
+    public static final String KEY_EVENT = "event";
+    public static final String KEY_SATELLITES = "sat";
+    public static final String KEY_RSSI = "rssi";
+    public static final String KEY_OUTPUT = "output";
+    public static final String KEY_INPUT = "input";
+    public static final String KEY_LOCK = "lock";
+    public static final String KEY_THROTTLE = "throttle";
+    public static final String KEY_FUEL_LEVEL = "fuelLevel";
+    public static final String KEY_BATTERY_LEVEL = "batteryLevel";
+    public static final String KEY_HDOP = "hdop";
+    public static final String KEY_BATTERY = "battery";
+    public static final String KEY_POWER = "power";
+    public static final String KEY_OBD_SPEED = "obdSpeed";
+    public static final String KEY_FUEL_USED = "fuelUsed";
+    public static final String KEY_RPM = "rpm";
+    public static final String KEY_COOLANT_TEMP = "coolantTemp";
+    public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption";
+    public static final String KEY_ODOMETER = "odometer";
+    public static final String KEY_DRIVER_UNIQUE_ID = "driverUniqueId";
+    public static final String PREFIX_ADC = "adc";
+    public static final String PREFIX_TEMP = "temp";
+
+    public Position(String protocol) {}
+    public void setDeviceId(long id) {}
+    public void set(String key, Object value) {}
+    public void setValid(boolean valid) {}
+    public void setSpeed(double speed) {}
+    public void setCourse(double course) {}
+    public void setAltitude(double altitude) {}
+    public void setLatitude(double lat) {}
+    public void setLongitude(double lon) {}
+    public void setTime(Date time) {}
+}
+class DeviceSession {
+    public DeviceSession(long deviceId) { this.deviceId = deviceId; }
+    private long deviceId;
+    public long getDeviceId() { return deviceId; }
+}
+class UnitsConverter {
+    public static double knotsFromKph(double kph) { return kph / 1.852; }
+}
+
+
+public class MeitrackProtocolDecoderFixed extends BaseProtocolDecoder {
+
+    public MeitrackProtocolDecoderFixed(Protocol protocol) {
+        super(protocol);
+    }
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
                         buf.readUnsignedByte();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
                         position.set("runtime", buf.readUnsignedIntLE());
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
                         buf.readUnsignedIntLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
+                        if (length >= 3) { // label (1) + value (2)
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                            buf.skipBytes(length - 3); // Skip remaining bytes if any
+                        } else {
+                            buf.skipBytes(length); // Skip if length is incorrect
+                        }
                         break;
                     case 0xFE31:
+                        if (length >= 2) { // alarm protocol (1) + alarm type (1)
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                            buf.skipBytes(length - 2); // Skip remaining bytes if any
+                        } else {
+                            buf.skipBytes(length); // Skip if length is incorrect
+                        }
+                        break;
+                    case 0xFEA8: // Handle potential battery level parameter found in test data
+                        if (length >= 2) {
+                            buf.readUnsignedByte(); // Skip first byte (e.g., type 0x02)
+                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Read second byte (0x4d = 77)
+                            buf.skipBytes(length - 2); // Skip remaining bytes if any
+                        } else {
+                           buf.skipBytes(length); // Skip if length < 2
+                        }
                         break;
                     default:
                         buf.skipBytes(length);
                         break;
                 }
             }
 
             positions.add(position);
         }
 
         return positions;
     }
+}
\ No newline at end of file
