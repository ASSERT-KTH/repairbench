diff --git a/tmp/6c1f2e97-5981-447d-ba82-c80580b58fdc_buggy.java b/tmp/3d9fdd28-9494-49fc-9afb-bf846cdaf8aa_fixed.java
index f591bc6..ececd29 100644
--- a/tmp/6c1f2e97-5981-447d-ba82-c80580b58fdc_buggy.java
+++ b/tmp/3d9fdd28-9494-49fc-9afb-bf846cdaf8aa_fixed.java
@@ -1,74 +1,116 @@
     protected Object decodeAvrmc(
             String sentence, Channel channel, SocketAddress remoteAddress) {
 
+        // Find checksum for later use, but let Parser handle the full sentence
+        int checksumIndex = sentence.lastIndexOf('*');
+        String checksum = null;
+        if (checksumIndex != -1) {
+            checksum = sentence.substring(checksumIndex + 1);
+        }
+
         Parser parser = new Parser(PATTERN_AVRMC, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+                getDeviceSession(channel, remoteAddress, parser.next()); // Device ID
         if (deviceSession == null) {
             return null;
         }
 
         String deviceModel = null;
         Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
         if (device != null) {
             deviceModel = device.getModel();
         }
 
         Position position = new Position(getProtocolName());
-
         position.setDeviceId(deviceSession.getDeviceId());
+
         DateBuilder dateBuilder = new DateBuilder()
                 .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
         String status = parser.next();
         String upperCaseStatus = status.toUpperCase();
+        // Define validity based on 'A', 'R', 'P' status letters (case-insensitive)
         position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
         position.set(Position.KEY_STATUS, status);
 
         position.setLatitude(parser.nextCoordinate());
         position.setLongitude(parser.nextCoordinate());
         position.setSpeed(parser.nextDouble(0));
         position.setCourse(parser.nextDouble(0));
 
         dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
         position.setTime(dateBuilder.getDate());
 
         String event = parser.next();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+
+        // Use try-catch for battery parsing robustness against empty or malformed fields
+        try {
+            String batteryStr = parser.next();
+            // Handle potential format with or without decimal point, assuming value is mV
+            if (batteryStr != null && !batteryStr.isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(batteryStr.replaceAll("\\.", "")) * 0.001);
+            }
+        } catch (NumberFormatException e) {
+            // Log error or ignore if battery format is invalid
+        }
+
+        position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000); // Assume km -> m
+        position.set(Position.KEY_GPS, parser.nextInt(0)); // Number of satellites
+        position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001); // Assume mV -> V
 
         if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+            if (parser.hasNext()) { // Check if optional field exists
+                position.set(Position.PREFIX_ADC + 2, parser.nextDouble(0) * 0.001); // Assume mV -> V
+            }
+        }
+
+        // Network Info - Parse fields individually checking hasNext for robustness
+        Integer lac = null;
+        Integer cid = null;
+        Integer mcc = null;
+        Integer mnc = null;
+        // Use hasNext() before each attempt to parse optional network fields
+        if (parser.hasNext()) {
+            lac = parser.nextHexInt(); // Returns null if parse fails/empty
+        }
+        if (parser.hasNext()) {
+            cid = parser.nextHexInt(); // Returns null if parse fails/empty
+        }
+        if (parser.hasNext()) {
+            mcc = parser.nextInt();    // Returns null if parse fails/empty
+        }
+        if (parser.hasNext()) {
+            mnc = parser.nextInt();    // Returns null if parse fails/empty
         }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
+        // Set network only if all parts were parsed successfully
         if (lac != null && cid != null && mcc != null && mnc != null) {
+            // Consider if 0 values should be treated as invalid/unknown
+            if (mcc != 0 || mnc != 0 || lac != 0 || cid != 0) { // Set if at least one value is non-zero
                  position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
             }
+        }
 
-        parser.next(); // unused
-
-        String checksum = parser.next();
+        // Do not parse remaining fields (unused, checksum) using parser.next()
+        // as their number can vary. The parser should ideally consume up to the end
+        // based on the pattern, or the checksum extracted earlier can be used.
 
         if (channel != null) {
-
+            // Use the checksum extracted at the beginning for acknowledgements
+            if (checksum != null) {
                  sendAcknowledge(status, event, checksum, channel, remoteAddress);
+            }
 
             String devicePassword = AttributeUtil.getDevicePassword(
                     getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
             sendEventResponse(event, devicePassword, channel, remoteAddress);
         }
 
         return position;
     }
\ No newline at end of file
