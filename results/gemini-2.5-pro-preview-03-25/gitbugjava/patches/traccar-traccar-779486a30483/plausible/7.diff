diff --git a/tmp/867d407e-3692-4f41-a452-f4c786c1ec9c_buggy.java b/tmp/a3dd7152-8dfa-4ef9-82e2-7d89374463c2_fixed.java
index f591bc6..b430531 100644
--- a/tmp/867d407e-3692-4f41-a452-f4c786c1ec9c_buggy.java
+++ b/tmp/a3dd7152-8dfa-4ef9-82e2-7d89374463c2_fixed.java
@@ -1,74 +1,111 @@
     protected Object decodeAvrmc(
             String sentence, Channel channel, SocketAddress remoteAddress) {
 
         Parser parser = new Parser(PATTERN_AVRMC, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession =
             getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         String deviceModel = null;
         Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
         if (device != null) {
             deviceModel = device.getModel();
         }
 
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         DateBuilder dateBuilder = new DateBuilder()
                 .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
         String status = parser.next();
         String upperCaseStatus = status.toUpperCase();
         position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
         position.set(Position.KEY_STATUS, status);
 
         position.setLatitude(parser.nextCoordinate());
         position.setLongitude(parser.nextCoordinate());
         position.setSpeed(parser.nextDouble(0));
         position.setCourse(parser.nextDouble(0));
 
         dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
         position.setTime(dateBuilder.getDate());
 
         String event = parser.next();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
-        position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+        // Use nextDouble for battery to handle potential floats like "3.727" correctly without replaceAll hack
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0) * 0.001);
+        position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
+        position.set(Position.KEY_GPS, parser.nextInt(0));
+        position.set(Position.PREFIX_ADC + 1, parser.nextDouble(0) * 0.001);
 
+        Integer lac = null, cid = null, mcc = null, mnc = null;
+
+        // Check for ADC2 field (always present before network info if network info exists)
+        if (parser.hasNext()) {
+            try {
+                double adc2 = parser.nextDouble(0) * 0.001; // Consume potential ADC2 field, use default 0
                 if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+                    position.set(Position.PREFIX_ADC + 2, adc2); // Store if model matches
+                }
+            } catch (NumberFormatException e) {
+                // ADC2 field was not a number, maybe it's network info directly? Or checksum?
+                // This indicates an unexpected format, ignore ADC2 for this message.
+                // The parser index might be wrong now, but proceed cautiously.
+            }
+
+            // Now check for network info fields, assuming they come after ADC2
+            if (parser.hasNext(2)) { // Need two fields for network info
+                String netInfo1 = parser.next();
+                String netInfo2 = parser.next();
+                try {
+                    // Network info 1: LAC and CID (8 hex digits) or "0"
+                    if (netInfo1.matches("^[0-9a-fA-F]{8}$")) {
+                        lac = Integer.parseInt(netInfo1.substring(0, 4), 16);
+                        cid = Integer.parseInt(netInfo1.substring(4, 8), 16);
+                    } else if ("0".equals(netInfo1)) {
+                        lac = 0;
+                        cid = 0;
+                    }
+
+                    // Network info 2: MCC and MNC (5 or 6 decimal digits) or "0"
+                    if (netInfo2.matches("^[0-9]{5,6}$")) {
+                        mcc = Integer.parseInt(netInfo2.substring(0, 3));
+                        mnc = Integer.parseInt(netInfo2.substring(3));
+                    } else if ("0".equals(netInfo2)) {
+                        mcc = 0;
+                        mnc = 0;
+                    }
+                } catch (NumberFormatException | IndexOutOfBoundsException e) {
+                    // Failed to parse network info, ignore these fields
+                    lac = null; cid = null; mcc = null; mnc = null;
+                }
+            }
         }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
+        // Set Network Info if valid values were parsed
         if (lac != null && cid != null && mcc != null && mnc != null) {
             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
         }
 
-        parser.next(); // unused
+        // Removed the incorrect parser.next(); call here
 
-        String checksum = parser.next();
+        String checksum = parser.next(); // Assume checksum is the next field
 
         if (channel != null) {
-
             sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
             String devicePassword = AttributeUtil.getDevicePassword(
                     getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
             sendEventResponse(event, devicePassword, channel, remoteAddress);
         }
 
         return position;
     }
\ No newline at end of file
