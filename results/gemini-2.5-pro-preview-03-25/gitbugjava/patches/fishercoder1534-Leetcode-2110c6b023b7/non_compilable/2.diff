diff --git a/tmp/220c7a47-3bb5-42a5-9153-cfa725931b2a_buggy.java b/tmp/1e988881-cff4-419a-8a4b-daec82b1b2b4_fixed.java
index dd3b100..a843b27 100644
--- a/tmp/220c7a47-3bb5-42a5-9153-cfa725931b2a_buggy.java
+++ b/tmp/1e988881-cff4-419a-8a4b-daec82b1b2b4_fixed.java
@@ -1,12 +1,27 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
+            // Base case: If root is null, or if we found p or q, return root.
+            // If p or q is the root, it's the LCA if the other node is in its subtree.
+            // The subsequent logic correctly handles this, but this check can short-circuit.
             if (root == null || p == root || q == root) {
                  return root;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both nodes are smaller than the current root's value,
+            // the LCA must be in the left subtree.
+            // We use direct comparison to avoid potential integer overflow
+            // issues that occurred in the original multiplication-based check.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both nodes are larger than the current root's value,
+            // the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // If one node is smaller and the other is larger, or if one node's
+            // value equals the root's value (covered by the initial check),
+            // then the current root is the lowest common ancestor (the split point).
+            else {
                 return root;
             }
+        }
\ No newline at end of file
