diff --git a/tmp/fe6fdff1-29a9-4aef-ad27-7455c5f4e1c7_buggy.java b/tmp/bbd72e81-7eb2-4967-a4a9-4ddfd1c2d0da_fixed.java
index dd3b100..cb34839 100644
--- a/tmp/fe6fdff1-29a9-4aef-ad27-7455c5f4e1c7_buggy.java
+++ b/tmp/bbd72e81-7eb2-4967-a4a9-4ddfd1c2d0da_fixed.java
@@ -1,12 +1,30 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // If root is null, we can't find LCA here.
+            // This also handles cases where we recurse into a null child.
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // Get the values of root, p, and q.
+            int rootVal = root.val;
+            int pVal = p.val;
+            int qVal = q.val;
+
+            // If both p's value and q's value are less than root's value,
+            // then the LCA must be in the left subtree.
+            if (pVal < rootVal && qVal < rootVal) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p's value and q's value are greater than root's value,
+            // then the LCA must be in the right subtree.
+            else if (pVal > rootVal && qVal > rootVal) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, we've found the split point. This occurs when:
+            // 1. p and q are on opposite sides of root (e.g., pVal < rootVal < qVal).
+            // 2. One of the nodes (p or q) is the root itself (e.g., pVal == rootVal).
+            // In either case, the current root node is the lowest common ancestor.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
