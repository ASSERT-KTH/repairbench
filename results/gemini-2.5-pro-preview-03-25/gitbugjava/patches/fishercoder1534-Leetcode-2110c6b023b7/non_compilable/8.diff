diff --git a/tmp/d475726f-b368-41c8-aef7-a744cae9b08b_buggy.java b/tmp/3fd319b6-04e5-4693-928b-de893aff5099_fixed.java
index dd3b100..3b82967 100644
--- a/tmp/d475726f-b368-41c8-aef7-a744cae9b08b_buggy.java
+++ b/tmp/3fd319b6-04e5-4693-928b-de893aff5099_fixed.java
@@ -1,12 +1,52 @@
+        /**
+         * Finds the lowest common ancestor (LCA) of two given nodes in a Binary Search Tree (BST).
+         * The LCA is defined between two nodes p and q as the lowest node in T that has both p and q as descendants
+         * (where we allow a node to be a descendant of itself).
+         *
+         * Assumptions:
+         * - The tree is a valid BST.
+         * - Nodes p and q exist in the tree.
+         * - All node values are unique.
+         *
+         * The original code used multiplication `(root.val - p.val) * (root.val - q.val)` to check if p and q
+         * are on the same side of the root. This approach is prone to integer overflow when node values are large,
+         * potentially leading to incorrect sign determination for the product.
+         *
+         * The fix involves using direct comparisons of node values, which is the standard and safer approach for BSTs,
+         * avoiding any potential integer overflow issues.
+         *
+         * @param root The root of the BST.
+         * @param p    The first node.
+         * @param q    The second node.
+         * @return The lowest common ancestor node of p and q.
+         */
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // Base case: If root is null, return null (though problem constraints usually prevent this).
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // Get the values of the nodes for comparison.
+            int rootVal = root.val;
+            int pVal = p.val;
+            int qVal = q.val;
+
+            // If both p and q have values smaller than the root's value,
+            // the LCA must be in the left subtree.
+            if (pVal < rootVal && qVal < rootVal) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q have values larger than the root's value,
+            // the LCA must be in the right subtree.
+            else if (pVal > rootVal && qVal > rootVal) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, the current root node is the LCA.
+            // This happens when the paths to p and q diverge at the current root.
+            // This covers the cases where:
+            // 1. p is in the left subtree and q is in the right subtree (or vice-versa).
+            // 2. One of the nodes (p or q) is the current root node.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
