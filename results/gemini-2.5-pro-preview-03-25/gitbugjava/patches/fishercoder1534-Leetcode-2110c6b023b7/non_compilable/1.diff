diff --git a/tmp/16a19942-b8af-4949-b881-c9b64b2a0196_buggy.java b/tmp/be498f41-d671-4288-a8d1-a44d6d7c2987_fixed.java
index dd3b100..f5fb66a 100644
--- a/tmp/16a19942-b8af-4949-b881-c9b64b2a0196_buggy.java
+++ b/tmp/be498f41-d671-4288-a8d1-a44d6d7c2987_fixed.java
@@ -1,12 +1,25 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // If the root is null, return null.
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q's values are less than the root's value,
+            // the LCA must be in the left subtree.
+            // We use direct comparison to avoid potential integer overflow
+            // from calculating (root.val - p.val) * (root.val - q.val).
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q's values are greater than the root's value,
+            // the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, the current root is the lowest common ancestor.
+            // This occurs when p and q are on different sides of the root,
+            // or when one of p or q is the root itself.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
