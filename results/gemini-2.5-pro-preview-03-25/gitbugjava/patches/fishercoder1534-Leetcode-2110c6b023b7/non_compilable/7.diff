diff --git a/tmp/b2ba1d90-f434-4e7a-b3ff-d001ad6c0e76_buggy.java b/tmp/7c43ff5c-7bcf-4fe3-a589-b5c37214ecb6_fixed.java
index dd3b100..fb29aae 100644
--- a/tmp/b2ba1d90-f434-4e7a-b3ff-d001ad6c0e76_buggy.java
+++ b/tmp/7c43ff5c-7bcf-4fe3-a589-b5c37214ecb6_fixed.java
@@ -1,12 +1,40 @@
+        /**
+         * Finds the lowest common ancestor (LCA) of two given nodes in a Binary Search Tree (BST).
+         *
+         * According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q
+         * as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
+         *
+         * Constraints:
+         * All Node.val are unique.
+         * p and q will exist in the BST.
+         *
+         * @param root The root of the BST.
+         * @param p The first node.
+         * @param q The second node.
+         * @return The lowest common ancestor node of nodes p and q.
+         */
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // Base case: If root is null, return null. (Should not happen based on constraints but good practice)
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q have values less than root's value, the LCA must be in the left subtree.
+            // The comparison avoids the integer overflow issue present in the original code's multiplication.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q have values greater than root's value, the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, we've found the split point or one of the nodes equals the root.
+            // This occurs if:
+            //  1. p.val <= root.val <= q.val
+            //  2. q.val <= root.val <= p.val
+            // In either of these scenarios, the current root node is the LCA because the paths to p and q diverge at this node,
+            // or one of p or q is the root itself.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
