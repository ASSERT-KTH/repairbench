diff --git a/tmp/19aee069-2a00-49de-a3f6-a5f19fa19c75_buggy.java b/tmp/c4150c38-fedc-4de6-bf8d-4851206c222e_fixed.java
index dd3b100..0ab9441 100644
--- a/tmp/19aee069-2a00-49de-a3f6-a5f19fa19c75_buggy.java
+++ b/tmp/c4150c38-fedc-4de6-bf8d-4851206c222e_fixed.java
@@ -1,12 +1,27 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // Base case: If root is null, return null.
+            // Although typically constraints guarantee p and q are in the tree,
+            // and the root is not null initially.
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q have values smaller than the current root's value,
+            // the LCA must be in the left subtree.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q have values larger than the current root's value,
+            // the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, the current root is the LCA. This happens when:
+            // 1. p is the root (p.val == root.val).
+            // 2. q is the root (q.val == root.val).
+            // 3. p and q are on different sides of the root (one is smaller, one is larger).
+            // In all these cases, the current root node is the lowest common ancestor.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
