diff --git a/tmp/bd980544-c7fb-4f84-b9f2-0bd9c2d08955_buggy.java b/tmp/77d300f1-49f7-41e1-8e90-6b6bafcc2f3b_fixed.java
index dd3b100..c3163b4 100644
--- a/tmp/bd980544-c7fb-4f84-b9f2-0bd9c2d08955_buggy.java
+++ b/tmp/77d300f1-49f7-41e1-8e90-6b6bafcc2f3b_fixed.java
@@ -1,12 +1,24 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // Base case: If root is null, return null.
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q's values are less than root's value,
+            // then the LCA must be in the left subtree.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q's values are greater than root's value,
+            // then the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, we have found the split point, i.e., root is the LCA.
+            // This happens when:
+            // 1. p is in the left subtree and q is in the right subtree (or vice versa).
+            // 2. root is equal to p or q.
+            else {
                 return root;
             }
+        }
\ No newline at end of file
