diff --git a/tmp/3064b6b5-eea1-4c89-ab94-06739aa11ad4_buggy.java b/tmp/f6906d19-a4eb-44b8-996d-f86334b8c92b_fixed.java
index dd3b100..44f3356 100644
--- a/tmp/3064b6b5-eea1-4c89-ab94-06739aa11ad4_buggy.java
+++ b/tmp/f6906d19-a4eb-44b8-996d-f86334b8c92b_fixed.java
@@ -1,12 +1,28 @@
         public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+            // Base case: If root is null, return null.
+            // (Problem constraints usually guarantee p and q exist in the non-empty tree)
+            if (root == null) {
+                return null;
             }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+            // If both p and q's values are smaller than root's value,
+            // then the LCA must be in the left subtree.
+            if (p.val < root.val && q.val < root.val) {
                 return lowestCommonAncestor(root.left, p, q);
             }
+            // If both p and q's values are larger than root's value,
+            // then the LCA must be in the right subtree.
+            else if (p.val > root.val && q.val > root.val) {
                 return lowestCommonAncestor(root.right, p, q);
             }
+            // Otherwise, we've found the node where p and q diverge,
+            // or one of p or q is the root itself. This root is the LCA.
+            // This case covers:
+            // 1. p.val < root.val < q.val
+            // 2. q.val < root.val < p.val
+            // 3. root.val == p.val (LCA is p)
+            // 4. root.val == q.val (LCA is q)
+            else {
                 return root;
             }
+        }
\ No newline at end of file
