diff --git a/tmp/c312f58e-2a1a-450e-9b9c-4f67c3ad0e39_buggy.java b/tmp/501b81e9-d508-4e89-ba4c-d114c6135766_fixed.java
index dd3b100..4f332c7 100644
--- a/tmp/c312f58e-2a1a-450e-9b9c-4f67c3ad0e39_buggy.java
+++ b/tmp/501b81e9-d508-4e89-ba4c-d114c6135766_fixed.java
@@ -1,12 +1,48 @@
+/**
+ * Definition for a binary tree node.
+ * public class TreeNode {
+ *     int val;
+ *     TreeNode left;
+ *     TreeNode right;
+ *     TreeNode(int x) { val = x; }
+ * }
+ */
+class Solution {
+    /**
+     * Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
+     *
+     * According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q
+     * as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
+     *
+     * Constraints:
+     * The number of nodes in the tree is in the range [2, 10^5].
+     * -10^9 <= Node.val <= 10^9
+     * All Node.val are unique.
+     * p != q
+     * p and q will exist in the BST.
+     */
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
-                return root;
+        // Base case: If root is null, return null. (Should not happen based on constraints)
+        if (root == null) {
+            return null;
         }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+
+        // If both p and q have values smaller than the current root's value,
+        // the LCA must be in the left subtree.
+        if (p.val < root.val && q.val < root.val) {
             return lowestCommonAncestor(root.left, p, q);
         }
+        // If both p and q have values larger than the current root's value,
+        // the LCA must be in the right subtree.
+        else if (p.val > root.val && q.val > root.val) {
             return lowestCommonAncestor(root.right, p, q);
         }
+        // Otherwise, the current root is the LCA. This happens when:
+        // 1. p is root, or q is root.
+        // 2. p is in one subtree and q is in the other subtree.
+        //    (i.e., p.val < root.val < q.val or q.val < root.val < p.val)
+        else {
             return root;
         }
+    }
+}
\ No newline at end of file
