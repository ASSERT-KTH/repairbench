diff --git a/tmp/c42fb7e0-109a-4513-a5e9-cac51eba1a82_buggy.java b/tmp/24d3d991-d1b4-4532-b8a5-5091cdc5b0d4_fixed.java
index 6d50be3..66da8da 100644
--- a/tmp/c42fb7e0-109a-4513-a5e9-cac51eba1a82_buggy.java
+++ b/tmp/24d3d991-d1b4-4532-b8a5-5091cdc5b0d4_fixed.java
@@ -1,194 +1,252 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.DeviceSession;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+// Add necessary imports if they are missing in the original file context
+// import io.netty.buffer.ByteBuf;
+// import io.netty.channel.Channel;
+// import org.traccar.DeviceSession;
+// import org.traccar.helper.UnitsConverter;
+// import org.traccar.model.Position;
+// import java.net.SocketAddress;
+// import java.nio.charset.StandardCharsets;
+// import java.util.Date;
+// import java.util.LinkedList;
+// import java.util.List;
+
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+        // Find the first comma and skip it
+        int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (commaIndex == -1) {
+            return null; // Invalid format
+        }
+        // Ensure we can read up to the comma and the 15-byte IMEI after it
+        if (buf.readableBytes() < (commaIndex - buf.readerIndex() + 1 + 15)) {
+            return null; // Not enough data
+        }
+        buf.readerIndex(commaIndex + 1);
+
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+
+        // Skip ",CCE," equivalent? Original: buf.skipBytes(1 + 3 + 1); Assuming 5 bytes skip
+        if (buf.readableBytes() < 5) {
+            return null; // Not enough data
+        }
+        buf.skipBytes(5);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
+        // Check readable bytes before reading cache and count
+        if (buf.readableBytes() < (4 + 2)) {
+            return null; // Not enough data
+        }
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+            // Check readable bytes before reading record length and index
+            if (buf.readableBytes() < (2 + 2)) {
+                break; // Stop processing records if buffer ends prematurely
+            }
+            buf.readUnsignedShortLE(); // record length
+            buf.readUnsignedShortLE(); // record index
 
+            // Process parameter blocks, breaking loops if buffer ends prematurely
+
+            // Block 1: Byte parameters
+            if (buf.readableBytes() < 1) { break; }
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { break; } // Need at least 1 byte for ID/flag
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { break; } // Need 2 bytes for extended ID
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 1) { break; } // Need 1 byte for value
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
-                    case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
-                    case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
-                    case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
+                    case 0x01: position.set(Position.KEY_EVENT, buf.readUnsignedByte()); break;
+                    case 0x05: position.setValid(buf.readUnsignedByte() > 0); break;
+                    case 0x06: position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); break;
+                    case 0x07: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break;
+                    case 0x14: position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); break;
+                    case 0x15: position.set(Position.KEY_INPUT, buf.readUnsignedByte()); break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
-                    case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        break;
-                    default:
-                        buf.readUnsignedByte();
-                        break;
+                    case 0x97: position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); break;
+                    case 0x9D: position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); break;
+                    case 0xFE69: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); break; // Extended ID
+                    default: buf.skipBytes(1); break; // Skip 1 byte value
                 }
             }
+            if (!buf.isReadable()) { break; } // Stop if buffer is fully read
 
+            // Block 2: Short LE parameters
+            if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { break; } // Need ID byte(s)
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 2) { break; } // Need 2 bytes for value
                 switch (id) {
-                    case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
-                    case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
-                    case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
-                        break;
-                    default:
-                        buf.readUnsignedShortLE();
-                        break;
+                    case 0x08: position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); break;
+                    case 0x09: position.setCourse(buf.readUnsignedShortLE()); break;
+                    case 0x0A: position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); break; // Apply scaling
+                    case 0x0B: position.setAltitude(buf.readShortLE()); break;
+                    case 0x16: position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x19: position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x1A: position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x40: position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); break;
+                    case 0x91: case 0x92: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE()); break;
+                    case 0x98: position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE()); break;
+                    case 0x99: position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); break;
+                    case 0x9C: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE()); break; // Keep original scaling
+                    case 0x9F: position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE()); break; // Keep original scaling/type
+                    case 0xC9: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE()); break;
+                    default: buf.skipBytes(2); break; // Skip 2 bytes value
                 }
             }
+            if (!buf.isReadable()) { break; }
 
+            // Block 3: Int LE parameters
+            if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { break; } // Need ID byte(s)
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 4) { break; } // Need 4 bytes for value
                 switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
+                    case 0x02: position.setLatitude(buf.readIntLE() * 0.000001); break;
+                    case 0x03: position.setLongitude(buf.readIntLE() * 0.000001); break;
+                    case 0x04: position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); break; // 2000-01-01
+                    case 0x0C: case 0x9B: position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); break;
+                    case 0x0D: position.set("runtime", buf.readUnsignedIntLE()); break;
+                    case 0x25: position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); break;
+                    case 0xA0: position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); break;
+                    case 0xA2: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); break;
+                    default: buf.skipBytes(4); break; // Skip 4 bytes value
                 }
             }
+            if (!buf.isReadable()) { break; }
 
+            // Block 4: Variable length parameters
+            if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { break; } // Need ID byte(s)
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { break; }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
+                if (buf.readableBytes() < 1) { break; } // Need 1 byte for length
                 int length = buf.readUnsignedByte();
+
+                // *** FIX: Check if buffer has enough bytes for the declared length ***
+                if (buf.readableBytes() < length) {
+                    // Not enough data for declared length. Packet corrupted/truncated. Stop processing.
+                    buf.skipBytes(buf.readableBytes()); // Consume rest of buffer
+                    break; // Break inner loop (variable params)
+                }
+
+                // Process based on ID, consuming 'length' bytes
+                int readerIndexBefore = buf.readerIndex();
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: case 0x30: case 0x31:
+                        if (length >= 3) {
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                            buf.skipBytes(length - 3); // Skip remaining declared bytes
+                        } else {
+                            buf.skipBytes(length); // Length invalid for this type, skip reported length
+                        }
                         break;
-                    case 0xFE31:
+                    case 0xFE31: // Extended ID
+                        if (length >= 2) {
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                            buf.skipBytes(length - 2); // Skip remaining declared bytes
+                        } else {
+                            buf.skipBytes(length); // Length invalid, skip reported length
+                        }
                         break;
-                    case 0xFEA8:
+                    case 0xFEA8: // Extended ID
+                        if (length >= 3) {
                             buf.readUnsignedByte(); // battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             buf.readUnsignedByte(); // battery alert
+                            buf.skipBytes(length - 3); // Skip remaining declared bytes
+                        } else {
+                            buf.skipBytes(length); // Length invalid, skip reported length
+                        }
                         break;
                     default:
+                        buf.skipBytes(length); // Skip 'length' bytes for unknown ID
+                        break;
+                }
+                 // Safeguard: Ensure reader index didn't go backward or drastically forward unexpectedly
+                 if (buf.readerIndex() < readerIndexBefore || buf.readerIndex() > readerIndexBefore + length) {
+                      // Reset reader index and skip the originally declared length
+                      buf.readerIndex(readerIndexBefore);
                       buf.skipBytes(length);
-                        break;
                  }
             }
+            // Check buffer readability before potentially adding the position or starting next record
+            if (!buf.isReadable() && i < count - 1) { break; }
 
+            // Only add position if valid time and coordinates were decoded
+            if (position.getFixTime() != null && position.getLatitude() != 0 && position.getLongitude() != 0) {
                 positions.add(position);
             }
 
+            // Check if the buffer is readable before next iteration
+            if (!buf.isReadable()) { break; }
+        }
+
         return positions;
     }
\ No newline at end of file
