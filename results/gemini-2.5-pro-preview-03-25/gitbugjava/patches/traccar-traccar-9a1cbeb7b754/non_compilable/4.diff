diff --git a/tmp/d769fe89-c1cd-47d8-a93e-c1fdb0b94272_buggy.java b/tmp/3602fa1c-ebfa-49e3-98a9-fb1ff7a8df3d_fixed.java
index 6d50be3..7a9116d 100644
--- a/tmp/d769fe89-c1cd-47d8-a93e-c1fdb0b94272_buggy.java
+++ b/tmp/3602fa1c-ebfa-49e3-98a9-fb1ff7a8df3d_fixed.java
@@ -1,194 +1,210 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+// Assume other necessary imports exist (BaseProtocolDecoder, DeviceSession, Position, UnitsConverter etc.)
+// For example:
+// import org.traccar.BaseProtocolDecoder;
+// import org.traccar.DeviceSession;
+// import org.traccar.Protocol;
+// import org.traccar.helper.UnitsConverter;
+// import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+        // Initial check for minimum data before comma search
+        if (buf.readableBytes() < 1) {
+            return null;
+        }
+        int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (commaIndex < 0) {
+            return null; // Comma not found, invalid format
+        }
+
+        // Check minimum length for header fields up to 'count' byte
+        // Need bytes up to comma + 1 (comma) + 15 (imei) + 5 (separators) + 4 (cache) + 2 (count)
+        int minHeaderLength = (commaIndex - buf.readerIndex()) + 1 + 15 + 5 + 4 + 2;
+        if (buf.readableBytes() < minHeaderLength) {
+             return null; // Not enough data for essential header fields
+        }
+
+        buf.readerIndex(commaIndex + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // Skip ",CCE,"
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
+            // Check minimum readable bytes for fixed position header fields (length, index, 4 param counts)
+            if (buf.readableBytes() < 2 + 2 + 1 + 1 + 1 + 1) {
+                break; // Not enough data for the next position record header
+            }
+
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+            buf.readUnsignedShortLE(); // overall length (unused in this decoder logic)
+            buf.readUnsignedShortLE(); // index (unused)
 
+            // Parameter Block 1 (Byte values)
+            if (buf.readableBytes() < 1) { break; } // Ensure count byte is readable
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { buf.readerIndex(buf.writerIndex()); break; } // Ensure ID byte(s) readable
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idByteCount = extension ? 2 : 1;
+                if (buf.readableBytes() < idByteCount + 1) { buf.readerIndex(buf.writerIndex()); break; } // Ensure ID + 1 byte value readable
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
-                    case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
-                    case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
-                    case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
+                    case 0x01: position.set(Position.KEY_EVENT, buf.readUnsignedByte()); break;
+                    case 0x05: position.setValid(buf.readUnsignedByte() > 0); break;
+                    case 0x06: position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); break;
+                    case 0x07: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break;
+                    case 0x14: position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); break;
+                    case 0x15: position.set(Position.KEY_INPUT, buf.readUnsignedByte()); break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
-                        if (lockState > 0) {
-                            position.set(Position.KEY_LOCK, lockState == 2);
-                        }
-                        break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
-                    case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        break;
-                    default:
-                        buf.readUnsignedByte();
+                        if (lockState > 0) { position.set(Position.KEY_LOCK, lockState == 2); }
                         break;
+                    case 0x97: position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); break;
+                    case 0x9D: position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); break;
+                    case 0xFE69: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); break;
+                    default: buf.readUnsignedByte(); break; // Skip unknown value
                 }
             }
+            if (buf.readableBytes() == 0 && i < count - 1) { break; } // Stop if buffer ends prematurely
 
+            // Parameter Block 2 (Short LE values)
+            if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                 if (buf.readableBytes() < 1) { buf.readerIndex(buf.writerIndex()); break; }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idByteCount = extension ? 2 : 1;
+                 if (buf.readableBytes() < idByteCount + 2) { buf.readerIndex(buf.writerIndex()); break; } // Ensure ID + 2 bytes value readable
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
-                    case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
-                    case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
-                    case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
-                        break;
-                    default:
-                        buf.readUnsignedShortLE();
-                        break;
+                    case 0x08: position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); break;
+                    case 0x09: position.setCourse(buf.readUnsignedShortLE()); break;
+                    case 0x0A: position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); break; // Applied HDOP scaling
+                    case 0x0B: position.setAltitude(buf.readShortLE()); break;
+                    case 0x16: position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x19: position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x1A: position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x40: position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); break;
+                    case 0x91: case 0x92: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE()); break;
+                    case 0x98: position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); break; // Applied fuel used scaling
+                    case 0x99: position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); break;
+                    case 0x9C: position.set(Position.KEY_COOLANT_TEMP, (double) buf.readUnsignedShortLE() - 40.0); break; // Applied coolant temp offset
+                    case 0x9F: position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); break; // Applied temp scaling
+                    case 0xC9: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.01); break; // Applied fuel consumption scaling
+                    default: buf.readUnsignedShortLE(); break; // Skip unknown value
                 }
             }
+             if (buf.readableBytes() == 0 && i < count - 1) { break; }
 
+            // Parameter Block 3 (Int LE values)
+             if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { buf.readerIndex(buf.writerIndex()); break; }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idByteCount = extension ? 2 : 1;
+                if (buf.readableBytes() < idByteCount + 4) { buf.readerIndex(buf.writerIndex()); break; } // Ensure ID + 4 bytes value readable
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
+                    case 0x02: position.setLatitude(buf.readIntLE() * 0.000001); break;
+                    case 0x03: position.setLongitude(buf.readIntLE() * 0.000001); break;
+                    case 0x04: position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000)); break; // Use Long constant
+                    case 0x0C: case 0x9B: position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); break; // Odometer (meters?)
+                    case 0x0D: position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); break; // Runtime (seconds) stored as ms
+                    case 0x25: position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); break;
+                    case 0xA0: position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); break; // Scaled fuel used
+                    case 0xA2: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); break; // Scaled fuel consumption
+                    default: buf.readUnsignedIntLE(); break; // Skip unknown value
                 }
             }
+            if (buf.readableBytes() == 0 && i < count - 1) { break; }
 
+            // Parameter Block 4 (Variable Length values)
+             if (buf.readableBytes() < 1) { break; }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { buf.readerIndex(buf.writerIndex()); break; }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idByteCount = extension ? 2 : 1;
+                if (buf.readableBytes() < idByteCount + 1) { buf.readerIndex(buf.writerIndex()); break; } // Ensure ID + length byte readable
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
+
+                if (buf.readableBytes() < length) {
+                    // Not enough data for payload length declared. Assume corrupt data.
+                    buf.readerIndex(buf.writerIndex()); // Consume the rest of the buffer
+                    break; // Exit this inner loop (j)
+                }
+
+                // Now safe to process 'length' bytes
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D:
+                    case 0x2E: case 0x2F: case 0x30: case 0x31:
+                        if (length >= 3) { // Expect 1 byte label + 2 bytes value
+                            buf.readUnsignedByte(); // skip label
+                            position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01); // Scaled temp
+                            if (length > 3) { buf.skipBytes(length - 3); } // Skip any extra bytes
+                        } else { buf.skipBytes(length); } // Skip if length is incorrect
                         break;
-                    case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    case 0xFE31: // Alarm data
+                        if (length >= 2) { // Expect 1 byte protocol + 1 byte type
+                            buf.readUnsignedByte(); // skip alarm protocol
+                            buf.readUnsignedByte(); // skip alarm type
+                            if (length > 2) { buf.skipBytes(length - 2); } // Skip remainder
+                        } else { buf.skipBytes(length); }
                         break;
-                    case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
+                    case 0xFEA8: // Battery info
+                        if (length >= 3) { // Expect 1 byte status + 1 byte level + 1 byte alert
+                            buf.readUnsignedByte(); // skip battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                            buf.readUnsignedByte(); // skip battery alert
+                            if (length > 3) { buf.skipBytes(length - 3); } // Skip any extra bytes
+                        } else { buf.skipBytes(length); }
                         break;
                     default:
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip data for unknown IDs
                         break;
                 }
+            } // End inner loop (j)
+
+            // Only add the position if the buffer wasn't fully consumed prematurely during its processing.
+            // This prevents adding partially processed positions if an error occurred mid-way.
+            // If readerIndex reached writerIndex, it means a break happened due to insufficient data.
+            if (buf.readerIndex() == buf.writerIndex() && i < count - 1) {
+                // Buffer ended unexpectedly during this position's processing, and it's not the last expected position.
+                break; // Stop processing further positions
+            } else {
+                 positions.add(position); // Add position if processed normally or if it's the last one
             }
 
-            positions.add(position);
+             if (buf.readableBytes() == 0 && i < count - 1) { // Break outer loop if buffer ended early before next position iteration
+                 break;
              }
 
+        } // End outer loop (i)
+
         return positions;
     }
\ No newline at end of file
