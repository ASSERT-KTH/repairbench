diff --git a/tmp/0797f1bf-a67e-4ead-9415-81b53168536f_buggy.java b/tmp/cad3c2ae-c30e-4420-9840-32602e426ed7_fixed.java
index 6d50be3..297203e 100644
--- a/tmp/0797f1bf-a67e-4ead-9415-81b53168536f_buggy.java
+++ b/tmp/cad3c2ae-c30e-4420-9840-32602e426ed7_fixed.java
@@ -1,194 +1,301 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // ,CCE,
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameters Block 1 (1 byte data)
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (!buf.isReadable()) {
+                    // Log.warning("Buffer ended prematurely in params block 1");
+                    return positions; // Avoid IndexOutOfBoundsException
+                }
+                int firstByte = buf.readUnsignedByte();
+                boolean extension = (firstByte == 0xFE);
+                int id;
+                if (extension) {
+                    if (!buf.isReadable(2)) {
+                         // Log.warning("Buffer ended prematurely reading extended ID in params block 1");
+                         return positions;
+                    }
+                    id = buf.readUnsignedShort(); // Read next 2 bytes for ID
+                } else {
+                    id = firstByte; // Use the first byte as ID
+                }
+
+                if (!buf.isReadable()) { // Check before reading value
+                     // Log.warning("Buffer ended prematurely before reading value for ID " + id + " in params block 1");
+                     return positions;
+                }
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // Skip 1 byte value
                         break;
                 }
             }
 
+            // Parameters Block 2 (2 bytes LE data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (!buf.isReadable()) {
+                     // Log.warning("Buffer ended prematurely in params block 2");
+                     return positions;
+                 }
+                int firstByte = buf.readUnsignedByte();
+                boolean extension = (firstByte == 0xFE);
+                int id;
+                if (extension) {
+                     if (!buf.isReadable(2)) {
+                         // Log.warning("Buffer ended prematurely reading extended ID in params block 2");
+                         return positions;
+                     }
+                    id = buf.readUnsignedShort(); // Read next 2 bytes for ID
+                } else {
+                    id = firstByte; // Use the first byte as ID
+                }
+
+                if (!buf.isReadable(2)) { // Check before reading value (2 bytes)
+                     // Log.warning("Buffer ended prematurely before reading value for ID " + id + " in params block 2");
+                     return positions;
+                }
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
+            // Parameters Block 3 (4 bytes LE data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (!buf.isReadable()) {
+                     // Log.warning("Buffer ended prematurely in params block 3");
+                     return positions;
+                 }
+                 int firstByte = buf.readUnsignedByte();
+                 boolean extension = (firstByte == 0xFE);
+                 int id;
+                 if (extension) {
+                      if (!buf.isReadable(2)) {
+                          // Log.warning("Buffer ended prematurely reading extended ID in params block 3");
+                          return positions;
+                      }
+                     id = buf.readUnsignedShort(); // Read next 2 bytes for ID
+                 } else {
+                     id = firstByte; // Use the first byte as ID
+                 }
+
+                if (!buf.isReadable(4)) { // Check before reading value (4 bytes)
+                     // Log.warning("Buffer ended prematurely before reading value for ID " + id + " in params block 3");
+                     return positions;
+                }
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                        // Store runtime in seconds, let attributes handle conversion if needed
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L);
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
                         buf.readUnsignedIntLE();
                         break;
                 }
             }
 
+            // Parameters Block 4 (variable length data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (!buf.isReadable()) {
+                     // Log.warning("Buffer ended prematurely in params block 4");
+                     return positions;
+                 }
+                 int firstByte = buf.readUnsignedByte();
+                 boolean extension = (firstByte == 0xFE);
+                 int id;
+                 if (extension) {
+                      if (!buf.isReadable(2)) {
+                          // Log.warning("Buffer ended prematurely reading extended ID in params block 4");
+                          return positions;
+                      }
+                     id = buf.readUnsignedShort(); // Read next 2 bytes for ID
+                 } else {
+                     id = firstByte; // Use the first byte as ID
+                 }
+
+                if (!buf.isReadable()) { // Check before reading length
+                     // Log.warning("Buffer ended prematurely before reading length for ID " + id + " in params block 4");
+                     return positions;
+                }
                 int length = buf.readUnsignedByte();
+
+                // Check remaining bytes *before* attempting to read/skip based on length
+                if (buf.readableBytes() < length) {
+                    // Data is truncated or length is wrong. Can't proceed reliably.
+                    // Log.warning("Invalid length " + length + " for param ID " + id + ", only " + buf.readableBytes() + " bytes available. Skipping rest of record.");
+                    buf.skipBytes(buf.readableBytes()); // Skip what's left
+                    break; // Exit the inner loop for this position record
+                }
+
+                // Keep track of reader index to ensure correct skipping
+                int startIndex = buf.readerIndex();
+
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
+                    case 0x2A: // External Temperature Sensor 1
+                    case 0x2B: // External Temperature Sensor 2
+                    case 0x2C: // External Temperature Sensor 3
+                    case 0x2D: // External Temperature Sensor 4
+                    case 0x2E: // External Temperature Sensor 5
+                    case 0x2F: // External Temperature Sensor 6
+                    case 0x30: // External Temperature Sensor 7
+                    case 0x31: // External Temperature Sensor 8
+                        if (length >= 3) { // 1 byte label + 2 bytes value
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        }
+                        // Skip remaining bytes specified by length by setting reader index
+                        buf.readerIndex(startIndex + length);
                         break;
-                    case 0xFE31:
+                    case 0xFE31: // Alarm Data
+                        if (length >= 2) { // 1 byte protocol + 1 byte type
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        }
+                         // Skip remaining bytes specified by length by setting reader index
+                        buf.readerIndex(startIndex + length);
                         break;
-                    case 0xFEA8:
+                    case 0xFEA8: // Battery Information
+                        if (length >= 3) { // 1 byte status + 1 byte level + 1 byte alert
                             buf.readUnsignedByte(); // battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             buf.readUnsignedByte(); // battery alert
+                        }
+                         // Skip remaining bytes specified by length by setting reader index
+                        buf.readerIndex(startIndex + length);
                         break;
                     default:
+                        // Skip the full length specified
                         buf.skipBytes(length);
                         break;
                 }
-            }
+            } // end inner loop (j)
 
+            if (position.getFixTime() != null) {
                 positions.add(position);
             }
+        } // end outer loop (i)
 
         return positions;
     }
\ No newline at end of file
