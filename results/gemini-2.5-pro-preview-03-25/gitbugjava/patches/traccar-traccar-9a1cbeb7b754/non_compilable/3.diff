diff --git a/tmp/4b7b4607-38b5-4518-b1f5-cf08a2c78c19_buggy.java b/tmp/be619db1-1c4d-417f-840b-88dd46ff303a_fixed.java
index 6d50be3..67b03d1 100644
--- a/tmp/4b7b4607-38b5-4518-b1f5-cf08a2c78c19_buggy.java
+++ b/tmp/be619db1-1c4d-417f-840b-88dd46ff303a_fixed.java
@@ -1,194 +1,316 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+// The surrounding class structure is assumed for context, only the function is provided as requested.
+// Helper methods like getDeviceSession, getProtocolName are assumed to exist.
+abstract class MeitrackProtocolDecoder extends BaseProtocolDecoder {
+
+    public MeitrackProtocolDecoder(Protocol protocol) {
+        super(protocol);
+    }
+
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
-        for (int i = 0; i < count; i++) {
+        for (int i = 0; i < count && buf.readableBytes() > 0; i++) { // Added check for readable bytes in outer loop
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            if (buf.readableBytes() < 4) break; // Check before reading length/index
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameter Block 1 (Byte values)
+            if (buf.readableBytes() < 1) break; // Check before reading paramCount
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 1) break; // Check before reading ID/value
+                int idStartIndex = buf.readerIndex();
+                boolean extension = buf.getUnsignedByte(idStartIndex) == 0xFE;
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 3) break; // Need 2 for ID + 1 for value
+                    id = buf.readUnsignedShort();
+                } else {
+                    if (buf.readableBytes() < 2) break; // Need 1 for ID + 1 for value
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // skip 1 byte
                         break;
                 }
             }
 
+            // Parameter Block 2 (Short values)
+            if (buf.readableBytes() < 1) break; // Check before reading paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 1) break; // Check before reading ID/value
+                int idStartIndex = buf.readerIndex();
+                boolean extension = buf.getUnsignedByte(idStartIndex) == 0xFE;
+                int id;
+                if (extension) {
+                     if (buf.readableBytes() < 4) break; // Need 2 for ID + 2 for value
+                    id = buf.readUnsignedShort();
+                } else {
+                     if (buf.readableBytes() < 3) break; // Need 1 for ID + 2 for value
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        buf.readUnsignedShortLE(); // skip 2 bytes
                         break;
                 }
             }
 
+            // Parameter Block 3 (Int values)
+            if (buf.readableBytes() < 1) break; // Check before reading paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 1) break; // Check before reading ID/value
+                int idStartIndex = buf.readerIndex();
+                boolean extension = buf.getUnsignedByte(idStartIndex) == 0xFE;
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 6) break; // Need 2 for ID + 4 for value
+                    id = buf.readUnsignedShort();
+                } else {
+                     if (buf.readableBytes() < 5) break; // Need 1 for ID + 4 for value
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
                         position.set("runtime", buf.readUnsignedIntLE());
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        buf.readUnsignedIntLE(); // skip 4 bytes
                         break;
                 }
             }
 
+            // Parameter Block 4 (Variable length values)
+            if (buf.readableBytes() < 1) break; // Check before reading paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 // Check minimum readable bytes for ID and length byte
+                if (buf.readableBytes() < 2) { // Need at least 1 for ID (or 2 if ext) + 1 for length
+                    break;
+                }
+                int idStartIndex = buf.readerIndex();
+                boolean extension = buf.getUnsignedByte(idStartIndex) == 0xFE;
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 3) { // Need 2 for ID + 1 for length
+                       break;
+                    }
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
                 int length = buf.readUnsignedByte();
+
+                // THE FIX: Check if buffer has enough bytes for the specified length
+                if (buf.readableBytes() < length) {
+                    // Log.warning("Invalid length field or truncated message"); // Optional: Log warning
+                    break; // Stop processing parameters for this position
+                }
+
+                // Keep track of start index to ensure we skip exactly 'length' bytes if needed
+                int valueStartIndex = buf.readerIndex();
+
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
+                        if (length >= 3) { // Need 1 byte label + 2 bytes value
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                            // Skip any extra bytes specified by length
+                             if (buf.readerIndex() < valueStartIndex + length) {
+                                buf.skipBytes(valueStartIndex + length - buf.readerIndex());
+                             }
+                        } else {
+                            // Length is too small, skip all 'length' bytes
+                            buf.skipBytes(length);
+                        }
                         break;
                     case 0xFE31:
+                        if (length >= 2) { // Need 1 byte protocol + 1 byte type
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                            // Skip the rest according to length
+                            if (buf.readerIndex() < valueStartIndex + length) {
+                                buf.skipBytes(valueStartIndex + length - buf.readerIndex());
+                            }
+                        } else {
+                            buf.skipBytes(length); // Skip whatever length indicates if it's < 2
+                        }
                         break;
                     case 0xFEA8:
+                        if (length >= 3) { // Need 1 byte status + 1 byte level + 1 byte alert
                             buf.readUnsignedByte(); // battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             buf.readUnsignedByte(); // battery alert
+                            // Skip any extra bytes specified by length
+                             if (buf.readerIndex() < valueStartIndex + length) {
+                                buf.skipBytes(valueStartIndex + length - buf.readerIndex());
+                             }
+                        } else {
+                            // Length is too small, skip all 'length' bytes
+                            buf.skipBytes(length);
+                        }
                         break;
                     default:
+                        // Default case: skip the entire length specified
                         buf.skipBytes(length);
                         break;
                 }
+                // Optional safety net: Ensure reader index advanced by exactly 'length' bytes
+                // if (buf.readerIndex() != valueStartIndex + length) {
+                //     Log.warning("Parameter parsing logic error: Incorrect bytes consumed for ID " + id);
+                //     buf.readerIndex(valueStartIndex + length);
+                // }
             }
 
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
                 positions.add(position);
             }
+        }
 
         return positions;
     }
+
+    // Assume getDeviceSession, getProtocolName, and other necessary context methods exist here.
+
+}
\ No newline at end of file
