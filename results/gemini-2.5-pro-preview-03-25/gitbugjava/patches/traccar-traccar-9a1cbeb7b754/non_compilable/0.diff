diff --git a/tmp/ee99d2e1-3671-4077-a36c-10d0a9916049_buggy.java b/tmp/34d66e50-640f-4e60-94db-cda9a85e5de4_fixed.java
index 6d50be3..39a8210 100644
--- a/tmp/ee99d2e1-3671-4077-a36c-10d0a9916049_buggy.java
+++ b/tmp/34d66e50-640f-4e60-94db-cda9a85e5de4_fixed.java
@@ -1,194 +1,221 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+
+// Assume Position, DeviceSession, UnitsConverter, BaseProtocolDecoder and other necessary classes are defined elsewhere.
+// Stub for Position constants if needed
+/*
+class Position {
+    public static final String KEY_EVENT = "event"; public static final String KEY_SATELLITES = "sat"; public static final String KEY_RSSI = "rssi"; public static final String KEY_OUTPUT = "output"; public static final String KEY_INPUT = "input"; public static final String KEY_LOCK = "lock"; public static final String KEY_THROTTLE = "throttle"; public static final String KEY_FUEL_LEVEL = "fuel"; public static final String KEY_BATTERY_LEVEL = "batteryLevel"; public static final String KEY_HDOP = "hdop"; public static final String PREFIX_ADC = "adc"; public static final String KEY_BATTERY = "battery"; public static final String KEY_POWER = "power"; public static final String KEY_OBD_SPEED = "obdSpeed"; public static final String KEY_FUEL_USED = "fuelUsed"; public static final String KEY_RPM = "rpm"; public static final String KEY_COOLANT_TEMP = "coolantTemp"; public static final String PREFIX_TEMP = "temp"; public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption"; public static final String KEY_ODOMETER = "odometer"; public static final String KEY_DRIVER_UNIQUE_ID = "driverUniqueId";
+    public Position(String protocol) {} public void setDeviceId(long id) {} public void set(String key, Object value) {} public void setValid(boolean valid) {} public void setSpeed(double speed) {} public void setCourse(double course) {} public void setAltitude(double altitude) {} public void setLatitude(double lat) {} public void setLongitude(double lon) {} public void setTime(Date time) {}
+}
+class DeviceSession { public long getDeviceId() { return 0; } }
+class UnitsConverter { public static double knotsFromKph(double kph) { return kph / 1.852; } }
+abstract class BaseProtocolDecoder { abstract DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds); abstract String getProtocolName(); }
+class MeitrackProtocolDecoder extends BaseProtocolDecoder { @Override public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) { return new DeviceSession(); } @Override public String getProtocolName() { return "meitrack"; }
+*/
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+        int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (commaIndex == -1) {
+             return null; // Comma not found
+        }
+        // Check if enough bytes for IMEI (15) and suffix (,CCE,) (5) after comma
+        // Also check if the comma index is valid relative to reader index
+        if (commaIndex < buf.readerIndex() || buf.writerIndex() < commaIndex + 1 + 15 + 5) {
+             return null; // Not enough data for header part or invalid comma index
+        }
+        buf.readerIndex(commaIndex + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // Skip ,CCE,
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
+        // Check for cache size (4) and count (2)
+        if (buf.readableBytes() < 4 + 2) {
+            return null;
+        }
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
+            // Check readable bytes for the fixed part of the position block header:
+            // record length (2), index (2), byte param count (1)
+            if (buf.readableBytes() < 2 + 2 + 1) {
+                break; // Not enough data for the next position record header
+            }
+
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+            buf.readUnsignedShortLE(); // record length field (value not used here)
+            buf.readUnsignedShortLE(); // record index field (value not used here)
 
+            // --- Byte Parameters ---
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // Need byte for ID type check (FE or regular ID)
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idBytes = extension ? 2 : 1;
+                if (buf.readableBytes() < idBytes + 1) break; // Need ID bytes + 1 data byte
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                // Read data based on ID
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        break;
-                    case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
-                        break;
-                    case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                        break;
-                    case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-                        break;
-                    case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
-                        break;
+                    case 0x01: position.set(Position.KEY_EVENT, buf.readUnsignedByte()); break;
+                    case 0x05: position.setValid(buf.readUnsignedByte() > 0); break;
+                    case 0x06: position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); break;
+                    case 0x07: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break;
+                    case 0x14: position.set(Position.KEY_OUTPUT, buf.readUnsignedByte()); break;
+                    case 0x15: position.set(Position.KEY_INPUT, buf.readUnsignedByte()); break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
-                        if (lockState > 0) {
-                            position.set(Position.KEY_LOCK, lockState == 2);
-                        }
-                        break;
-                    case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                        break;
-                    case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
-                        break;
-                    case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        break;
-                    default:
-                        buf.readUnsignedByte();
+                        if (lockState > 0) position.set(Position.KEY_LOCK, lockState == 2);
                         break;
+                    case 0x97: position.set(Position.KEY_THROTTLE, buf.readUnsignedByte()); break;
+                    case 0x9D: position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte()); break;
+                    case 0xFE69: position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); break;
+                    default: buf.skipBytes(1); break; // Skip 1 data byte
                 }
             }
 
+            // --- Short Parameters ---
+            if (buf.readableBytes() < 1) break; // Need byte param count
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // Need byte for ID type check
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idBytes = extension ? 2 : 1;
+                if (buf.readableBytes() < idBytes + 2) break; // Need ID bytes + 2 data bytes
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                // Read data based on ID
                 switch (id) {
-                    case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        break;
-                    case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
-                        break;
-                    case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x0B:
-                        position.setAltitude(buf.readShortLE());
-                        break;
-                    case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
-                        break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
-                        break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
-                        break;
-                    case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
-                        break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
-                        break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
-                        break;
-                    default:
-                        buf.readUnsignedShortLE();
-                        break;
+                    case 0x08: position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); break;
+                    case 0x09: position.setCourse(buf.readUnsignedShortLE()); break;
+                    case 0x0A: position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); break; // Apply scaling (assuming 0.1)
+                    case 0x0B: position.setAltitude(buf.readShortLE()); break;
+                    case 0x16: position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x19: position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x1A: position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); break;
+                    case 0x40: position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); break;
+                    case 0x91: case 0x92: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE()); break;
+                    case 0x98: position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); break; // Apply scaling (assuming 0.1 L)
+                    case 0x99: position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); break;
+                    case 0x9C: position.set(Position.KEY_COOLANT_TEMP, (double) buf.readShortLE() - 40.0); break; // Apply offset (assuming deg C)
+                    case 0x9F: position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); break; // Apply scaling (assuming 0.1 deg C)
+                    case 0xC9: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); break; // Apply scaling (assuming 0.1 L/100km)
+                    default: buf.skipBytes(2); break; // Skip 2 data bytes
                 }
             }
 
+            // --- Int Parameters ---
+            if (buf.readableBytes() < 1) break; // Need byte param count
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // Need byte for ID type check
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idBytes = extension ? 2 : 1;
+                if (buf.readableBytes() < idBytes + 4) break; // Need ID bytes + 4 data bytes
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                // Read data based on ID
                 switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
-                        break;
-                    default:
-                        buf.readUnsignedIntLE();
-                        break;
+                    case 0x02: position.setLatitude(buf.readIntLE() * 0.000001); break;
+                    case 0x03: position.setLongitude(buf.readIntLE() * 0.000001); break;
+                    case 0x04: position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000)); break; // Use long literal
+                    case 0x0C: case 0x9B: position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE()); break;
+                    case 0x0D: position.set("runtime", buf.readUnsignedIntLE()); break;
+                    case 0x25: position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE())); break;
+                    case 0xA0: position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); break; // Check scaling
+                    case 0xA2: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); break; // Check scaling
+                    default: buf.skipBytes(4); break; // Skip 4 data bytes
                 }
             }
 
+            // --- Variable Length Parameters ---
+            if (buf.readableBytes() < 1) break; // Need byte param count
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // Need byte for ID type check
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int idBytes = extension ? 2 : 1;
+                if (buf.readableBytes() < idBytes + 1) break; // Need ID bytes + 1 length byte
+
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
+
+                if (buf.readableBytes() < length) {
+                    // Not enough data for declared length, indicates corrupt message
+                    buf.readerIndex(buf.writerIndex()); // Consume rest of buffer to prevent partial reads/loops
+                    break; // Exit this inner loop, position might be incomplete
+                }
+
+                int bytesConsumedInData = 0; // Track bytes consumed within the specific case
+
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D:
+                    case 0x2E: case 0x2F: case 0x30: case 0x31:
+                        // Expecting 1 byte label + 2 bytes value = 3 bytes
+                        if (length >= 3) {
+                            buf.readUnsignedByte(); // label (ignore)
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                            bytesConsumedInData = 3;
+                        }
+                        // Skip any remaining bytes defined by length, beyond those consumed
+                        if (length > bytesConsumedInData) {
+                             buf.skipBytes(length - bytesConsumedInData);
+                        }
                         break;
                     case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        // Expecting 1 byte protocol + 1 byte type = 2 bytes
+                        if (length >= 2) {
+                             buf.readUnsignedByte(); // alarm protocol (ignore)
+                             buf.readUnsignedByte(); // alarm type (ignore)
+                             bytesConsumedInData = 2;
+                        }
+                         // Skip any remaining bytes specified by length
+                        if (length > bytesConsumedInData) {
+                           buf.skipBytes(length - bytesConsumedInData);
+                        }
                         break;
                     case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
+                         // Expecting 1 byte status + 1 byte level + 1 byte alert = 3 bytes
+                        if (length >= 3) {
+                            buf.readUnsignedByte(); // battery status (ignore)
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                            buf.readUnsignedByte(); // battery alert (ignore)
+                            bytesConsumedInData = 3;
+                        }
+                         // Skip any remaining bytes specified by length
+                         if (length > bytesConsumedInData) {
+                            buf.skipBytes(length - bytesConsumedInData);
+                         }
                         break;
                     default:
+                         // Skip the declared length for unknown IDs or if length was too small
                         buf.skipBytes(length);
                         break;
                 }
             }
 
             positions.add(position);
+
+            // Check if buffer is exhausted prematurely before next record iteration
+             if (buf.readableBytes() == 0 && i < count - 1) {
+                // Log warning? ("Buffer exhausted after reading %d records, expected %d", i + 1, count)
+                break;
+            }
         }
 
         return positions;
     }
+/* } // End of class definition stub */
\ No newline at end of file
