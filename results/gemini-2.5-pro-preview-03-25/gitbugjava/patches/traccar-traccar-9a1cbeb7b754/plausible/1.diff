diff --git a/tmp/51454c16-30e0-44b7-a560-58c78336779a_buggy.java b/tmp/c19323d2-db83-4297-8fc5-8361dbc33362_fixed.java
index 6d50be3..1775ae2 100644
--- a/tmp/51454c16-30e0-44b7-a560-58c78336779a_buggy.java
+++ b/tmp/c19323d2-db83-4297-8fc5-8361dbc33362_fixed.java
@@ -1,194 +1,299 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+        // Find the first comma to locate the start of IMEI
+        int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (commaIndex == -1) {
+            return null; // Invalid format, comma not found
+        }
+        buf.readerIndex(commaIndex + 1); // Move reader index past the comma
+
+        // Ensure there are enough bytes for IMEI (15) and the subsequent fields (,CCC,)
+        if (buf.readableBytes() < 15 + 1 + 3 + 1) {
+            return null; // Not enough data
+        }
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // Skip ,CCC,
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
+        // Ensure there are enough bytes for the main header (remaining cache + count)
+        if (buf.readableBytes() < 4 + 2) {
+             return positions; // Not enough data for header
+        }
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
+            // Check buffer readable length before reading position header (record length + record index)
+            if (buf.readableBytes() < 2 + 2) {
+                break; // Not enough data for next position record header
+            }
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameter Block 1: 1-byte data
+            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) + value (1)
+                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int idLength = extension ? 2 : 1;
+                if (buf.readableBytes() < idLength + 1) break; // Need bytes for ID and 1 byte value
+
+                int id;
+                if (extension) {
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // Skip 1 byte
                         break;
                 }
             }
 
+            // Parameter Block 2: 2-byte data (LE)
+            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) + value (2)
+                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int idLength = extension ? 2 : 1;
+                if (buf.readableBytes() < idLength + 2) break; // Need bytes for ID and 2 byte value
+
+                int id;
+                if (extension) {
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1);
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1);
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                        // Temperature: value * 0.1 - 40 (degrees C)
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() * 0.1 - 40.0);
                         break;
                     case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                        // External Temperature Sensor 1: value * 0.1 (degrees C)? uses signed short
+                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1);
                         break;
                     case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                        // Fuel Rate: value * 0.01 (L/h)?
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        buf.readUnsignedShortLE(); // Skip 2 bytes LE
                         break;
                 }
             }
 
+            // Parameter Block 3: 4-byte data (LE)
+            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) + value (4)
+                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int idLength = extension ? 2 : 1;
+                 if (buf.readableBytes() < idLength + 4) break; // Need bytes for ID and 4 byte value
+
+                int id;
+                if (extension) {
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                        // Time is seconds since 2000-01-01 00:00:00 UTC (946684800)
+                        position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000L));
                         break;
-                    case 0x0C:
-                    case 0x9B:
+                    case 0x0C: // Odometer (meters)
+                    case 0x9B: // OBD Odometer (meters)
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                    case 0x0D: // Runtime (seconds)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store as ms
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
+                    case 0xA0: // Total Fuel Used (ml)
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Convert ml to L
                         break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                    case 0xA2: // Engine Fuel Rate (0.01 ml/h)
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01 * 0.001); // Convert 0.01ml/h to L/h
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        buf.readUnsignedIntLE(); // Skip 4 bytes LE
                         break;
                 }
             }
 
+            // Parameter Block 4: Variable length data
+            if (buf.readableBytes() < 1) break; // Need 1 byte for paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) + length (1)
+                if (buf.readableBytes() < 1) break; // Need at least 1 byte for non-extended ID
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int idLength = extension ? 2 : 1;
+                 if (buf.readableBytes() < idLength + 1) break; // Need bytes for ID and 1 byte length
+
+                int id;
+                if (extension) {
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+
                 int length = buf.readUnsignedByte();
+
+                // **** Critical Check: Ensure buffer has enough readable bytes for the specified length ****
+                if (buf.readableBytes() < length) {
+                    // Data seems corrupt or buffer truncated. Skip remaining bytes in buffer and stop processing this record.
+                    buf.skipBytes(buf.readableBytes());
+                    break; // Exit this inner loop
+                }
+
+                // Now safe to read/skip 'length' bytes
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    case 0x2A: case 0x2B: case 0x2C: case 0x2D: // Temp sensors 1-4
+                    case 0x2E: case 0x2F: case 0x30: case 0x31: // Temp sensors 5-8
+                        // Expecting length >= 3: 1 byte label + 2 bytes value (short LE * 0.01)
+                        if (length >= 3) {
+                            buf.readUnsignedByte(); // label (ignore)
+                            position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.01);
+                            if (length > 3) {
+                                buf.skipBytes(length - 3); // Skip unexpected extra bytes
+                            }
+                        } else {
+                            buf.skipBytes(length); // Skip if length is incorrect (< 3)
+                        }
                         break;
-                    case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    case 0xFE31: // Alarm Data
+                        // Expecting length >= 2: 1 byte protocol + 1 byte type + optional data
+                        if (length >= 2) {
+                            buf.readUnsignedByte(); // alarm protocol (ignore)
+                            buf.readUnsignedByte(); // alarm type (ignore)
+                            if (length > 2) {
+                                buf.skipBytes(length - 2); // Skip remaining alarm data
+                            }
+                        } else {
+                             buf.skipBytes(length); // Skip if length is incorrect (< 2)
+                        }
                         break;
-                    case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
+                    case 0xFEA8: // Battery Info
+                         // Expecting length >= 3: 1 byte status + 1 byte level + 1 byte alert
+                         if (length >= 3) {
+                             buf.readUnsignedByte(); // battery status (ignore)
                              position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                             buf.readUnsignedByte(); // battery alert (ignore)
+                             if (length > 3) {
+                                 buf.skipBytes(length - 3); // Skip unexpected extra bytes
+                             }
+                         } else {
+                             buf.skipBytes(length); // Skip if length is incorrect (< 3)
+                         }
                         break;
                     default:
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip data for unknown/unhandled IDs
                         break;
                 }
             }
 
+            // Only add position if essential GPS data is present
+            if (position.getFixTime() != null && position.getLatitude() != 0 && position.getLongitude() != 0) {
                  positions.add(position);
+            } else {
+                 // Optionally log or handle cases where essential data is missing after processing parameters
+            }
         }
 
         return positions;
     }
\ No newline at end of file
