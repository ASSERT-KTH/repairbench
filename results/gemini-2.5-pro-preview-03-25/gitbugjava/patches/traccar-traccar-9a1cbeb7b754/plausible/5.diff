diff --git a/tmp/ee77c413-4e17-4576-8e05-a03bb1803aa8_buggy.java b/tmp/4bb6a3e3-25d2-4463-9b58-d9f10d3eb764_fixed.java
index 6d50be3..49fc265 100644
--- a/tmp/ee77c413-4e17-4576-8e05-a03bb1803aa8_buggy.java
+++ b/tmp/4bb6a3e3-25d2-4463-9b58-d9f10d3eb764_fixed.java
@@ -1,194 +1,260 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            // Check if buffer has enough data for fixed parts of the record header
+            if (buf.readableBytes() < 4 + 1) { // length (ushort) + index (ushort) + paramCount1 (byte)
+                 break; // Not enough data for this record
+            }
+
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameter Block 1 (Byte values)
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) and value (1)
+                if (buf.readableBytes() < 2) { // Need at least 1 for ID, 1 for value
+                    break; // Not enough data for parameter
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 1) { // Check again after reading ID, need 1 for value
+                    break;
+                }
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // Skip unknown byte parameter
                         break;
                 }
             }
 
+            // Parameter Block 2 (Short LE values)
+            if (buf.readableBytes() < 1) { // Need paramCount2
+                 break;
+            }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) and value (2)
+                if (buf.readableBytes() < 3) { // Need at least 1 for ID, 2 for value
+                    break; // Not enough data for parameter
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (buf.readableBytes() < 2) { // Check again after reading ID, need 2 for value
+                    break;
+                }
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        buf.readUnsignedShortLE(); // Skip unknown short LE parameter
                         break;
                 }
             }
 
+            // Parameter Block 3 (Int LE values)
+            if (buf.readableBytes() < 1) { // Need paramCount3
+                 break;
+            }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) and value (4)
+                if (buf.readableBytes() < 5) { // Need at least 1 for ID, 4 for value
+                    break; // Not enough data for parameter
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 4) { // Check again after reading ID, need 4 for value
+                    break;
+                }
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
                         position.set("runtime", buf.readUnsignedIntLE());
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        buf.readUnsignedIntLE(); // Skip unknown int LE parameter
                         break;
                 }
             }
 
+            // Parameter Block 4 (Variable length values)
+            if (buf.readableBytes() < 1) { // Need paramCount4
+                 break;
+            }
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                // Check readable bytes for ID (1 or 2) and length (1)
+                if (buf.readableBytes() < 2) { // Need at least 1 for ID, 1 for length
+                    break; // Not enough data for parameter header
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
+
+                // Check if buffer has enough bytes for the specified length
+                if (buf.readableBytes() < length) {
+                    // Log.warn("Meitrack: Not enough data for variable length parameter ID: " + id + ", length: " + length + ", available: " + buf.readableBytes());
+                    break; // Not enough data for the specified length, stop processing this block
+                }
+
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
+                        if (length >= 3) { // Expecting label (1) + temp (2)
                             buf.readUnsignedByte(); // label
                             position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                            buf.skipBytes(length - 3); // Skip any extra bytes if length > 3
+                        } else {
+                            buf.skipBytes(length); // Skip unexpected length data
+                        }
                         break;
                     case 0xFE31:
+                         if (length >= 2) { // Expecting protocol (1) + type (1) + optional data
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                            buf.skipBytes(length - 2); // Skip remaining bytes
+                        } else {
+                            buf.skipBytes(length); // Skip unexpected length data
+                        }
                         break;
                     case 0xFEA8:
+                        if (length >= 3) { // Expecting status (1) + level (1) + alert (1)
                             buf.readUnsignedByte(); // battery status
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             buf.readUnsignedByte(); // battery alert
+                            buf.skipBytes(length - 3); // Skip any extra bytes if length > 3
+                        } else {
+                            buf.skipBytes(length); // Skip unexpected length data
+                        }
                         break;
                     default:
-                        buf.skipBytes(length);
+                         buf.skipBytes(length); // Skip unknown variable length parameter
                         break;
                 }
             }
 
+            if (position.getFixTime() != null) {
                 positions.add(position);
             }
+        }
 
         return positions;
     }
\ No newline at end of file
