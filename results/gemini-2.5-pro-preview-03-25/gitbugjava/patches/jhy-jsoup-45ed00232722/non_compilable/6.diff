diff --git a/tmp/d4919b2f-3674-430e-a891-09663d8f9f43_buggy.java b/tmp/18469fc4-2c24-4823-98db-e34c26debf2e_fixed.java
index 855afa5..a18c112 100644
--- a/tmp/d4919b2f-3674-430e-a891-09663d8f9f43_buggy.java
+++ b/tmp/18469fc4-2c24-4823-98db-e34c26debf2e_fixed.java
@@ -1,13 +1,40 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+// Assume the helper function punyUrl(URL u) exists and works correctly elsewhere in the class.
+// It is responsible for handling Internationalized Domain Names (IDN) by converting them to Punycode.
+
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+        URL urlToEncode = u; // Start with the original URL
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // First, apply punycode transformation to the host if needed.
+            // We assume punyUrl handles this transformation and returns a URL object.
+            // If punyUrl itself throws an exception, it's not caught here, matching implicit original behavior.
+            urlToEncode = punyUrl(u);
+
+            // Deconstruct the (potentially puny-encoded) URL and reconstruct it using the URI multi-argument constructor.
+            // This constructor correctly encodes illegal characters within each component (path, query, etc.).
+            URI uri = new URI(
+                    urlToEncode.getProtocol(),
+                    urlToEncode.getUserInfo(),
+                    urlToEncode.getHost(),
+                    urlToEncode.getPort(),
+                    urlToEncode.getPath(),
+                    urlToEncode.getQuery(),
+                    urlToEncode.getRef() // fragment
+            );
+            
+            // Convert the properly encoded URI back to a URL.
+            // uri.toURL() is generally preferred over new URL(uri.toASCIIString()).
+            return uri.toURL();
+
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // If URI construction or conversion to URL fails (e.g., due to fundamentally invalid components),
+            // fall back to returning the *original* input URL 'u', preserving the original code's behavior on error.
             return u;
         }
+        // Removed the manual space replacement and the single-string URI constructor approach,
+        // as they didn't handle encoding comprehensively.
     }
