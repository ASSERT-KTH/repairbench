diff --git a/tmp/571a68f9-5bac-4ed5-829f-ea4052a33721_buggy.java b/tmp/6ff3d669-4eb4-42bb-a978-e61e2bb94755_fixed.java
index 855afa5..63f9e7c 100644
--- a/tmp/571a68f9-5bac-4ed5-829f-ea4052a33721_buggy.java
+++ b/tmp/6ff3d669-4eb4-42bb-a978-e61e2bb94755_fixed.java
@@ -1,13 +1,58 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+// Assuming HttpConnection.punyUrl(URL) exists and functions correctly.
+
+    /**
+     * Encodes the URL to ensure that any characters necessary are percent-encoded. Handles IDN domains by converting them
+     * to punycode. Correctly encodes path, query, and fragment components.
+     * @param u the URL to encode
+     * @return the encoded URL
+     */
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+        URL potentiallyPunyEncodedUrl;
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // First, ensure the host is Punycode if necessary (IDN).
+            // Assuming punyUrl handles this transformation.
+            potentiallyPunyEncodedUrl = punyUrl(u);
+        } catch (Exception e) {
+            // If punyUrl fails, return the original URL as a fallback.
+            // This might happen for severely malformed hosts.
              return u;
         }
+
+        try {
+            // Use the URI multi-argument constructor to properly encode path, query, and fragment.
+            // This constructor handles percent-encoding for characters that are illegal in respective URI components.
+            final URI uri = new URI(
+                potentiallyPunyEncodedUrl.getProtocol(),
+                potentiallyPunyEncodedUrl.getUserInfo(),
+                potentiallyPunyEncodedUrl.getHost(),
+                potentiallyPunyEncodedUrl.getPort(),
+                potentiallyPunyEncodedUrl.getPath(),
+                potentiallyPunyEncodedUrl.getQuery(),
+                potentiallyPunyEncodedUrl.getRef() // Fragment
+            );
+            // Convert the correctly encoded URI back to a URL.
+            // The toURL() method handles the conversion, potentially throwing MalformedURLException
+            // if the URI cannot be represented as a URL (less likely here since we started with a URL).
+            return uri.toURL();
+        } catch (URISyntaxException | MalformedURLException | IllegalArgumentException e) {
+            // IllegalArgumentException can be thrown by the URI constructor for invalid components (e.g., port out of range).
+            // If encoding via URI fails, return the URL state after the punyUrl step.
+            // This preserves the IDN handling if it was successful.
+            return potentiallyPunyEncodedUrl;
+        }
+    }
+
+    // Note: The implementation of punyUrl(URL u) is assumed to exist elsewhere in the HttpConnection helper class.
+    // A dummy implementation for context:
+    private static URL punyUrl(URL u) {
+        // Real implementation would convert Internationalized Domain Names (IDN) in the host
+        // part of the URL to Punycode according to RFC 3492.
+        // Example: If host is "例子.測試", it should become "xn--fsqu00a.xn--0zwm56d"
+        // java.net.IDN.toASCII(u.getHost()) can be used for this.
+        // This dummy version just returns the input.
+        return u;
     }
\ No newline at end of file
