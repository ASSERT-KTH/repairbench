diff --git a/tmp/ca710e7a-c1a9-40aa-92b6-f35881a6a714_buggy.java b/tmp/76f05f56-f03e-439e-8d36-2ed00dbfad52_fixed.java
index 855afa5..4733b1e 100644
--- a/tmp/ca710e7a-c1a9-40aa-92b6-f35881a6a714_buggy.java
+++ b/tmp/76f05f56-f03e-439e-8d36-2ed00dbfad52_fixed.java
@@ -1,13 +1,59 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+// Assume HttpConnection class structure and existence of punyUrl method
+class HttpConnection {
+    // Assume punyUrl is defined elsewhere in this class
+    // static URL punyUrl(URL u) { ... IDN handling ... }
+    // Placeholder for compilation if needed:
+    static URL punyUrl(URL u) { return u; }
+
+
+    /**
+     * Encodes the URL components (path, query, fragment) as necessary, following RFC-3986 norms.
+     * Handles International Domain Names (IDN) via {@link #punyUrl(URL)}.
+     * @param u The URL to encode.
+     * @return An encoded URL, or the original URL if encoding failed.
+     */
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+        // Apply punycode for IDN hosts first.
+        // Store the result in a new variable to avoid confusion and keep the original parameter `u` unchanged.
+        URL punyU = punyUrl(u);
+
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Use the multi-argument URI constructor which properly encodes the components.
+            // URL component getters (getPath, getQuery, getRef) return *decoded* strings.
+            // These decoded strings are then correctly encoded by the URI constructor.
+            String path = punyU.getPath();
+            String query = punyU.getQuery();
+            String fragment = punyU.getRef();
+
+            // Special handling for the path: If the original URL had an empty path
+            // (e.g., "http://example.com"), URL.getPath() returns "". Passing "" to the
+            // URI constructor can result in "/" being added. Passing null preserves the absence of the path.
+            String pathToUse = (path != null && path.isEmpty()) ? null : path;
+
+            URI uri = new URI(
+                punyU.getProtocol(),
+                punyU.getUserInfo(),
+                punyU.getHost(),
+                punyU.getPort(),
+                pathToUse, // Use potentially null path
+                query,     // Pass decoded query, URI constructor encodes it
+                fragment   // Pass decoded fragment, URI constructor encodes it
+            );
+
+            // Convert the correctly constructed and encoded URI back to a URL.
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
-            return u;
+            // Fallback behavior from the original code:
+            // If URI/URL construction fails (e.g., due to fundamentally invalid components
+            // that even the multi-arg constructor can't handle), return the URL
+            // obtained after the initial punycode attempt.
+            // Consider logging this exception in a real application.
+            return punyU;
+        }
     }
 }
\ No newline at end of file
