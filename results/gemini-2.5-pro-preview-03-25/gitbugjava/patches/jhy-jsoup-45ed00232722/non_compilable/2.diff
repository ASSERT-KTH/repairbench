diff --git a/tmp/a7a1cf99-eb2b-46f5-baa2-fde178f22596_buggy.java b/tmp/fdbdaebd-c290-4bcd-a9ba-3ed268cd4b4d_fixed.java
index 855afa5..9f15e84 100644
--- a/tmp/a7a1cf99-eb2b-46f5-baa2-fde178f22596_buggy.java
+++ b/tmp/fdbdaebd-c290-4bcd-a9ba-3ed268cd4b4d_fixed.java
@@ -1,13 +1,87 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.nio.charset.StandardCharsets; // Assuming StandardCharsets is available/imported if needed by punyUrl
+import java.net.IDN; // Assuming IDN is needed by punyUrl
+
+// Assuming punyUrl exists and works correctly, e.g., like this:
+/*
+static URL punyUrl(URL u) {
+    if (u == null || u.getHost() == null || u.getHost().isEmpty() || isAscii(u.getHost())) {
+        return u;
+    }
+    try {
+        String punyHost = IDN.toASCII(u.getHost());
+        // Reconstruct the URL with the Punycode host
+        URI uri = new URI(u.getProtocol(), u.getUserInfo(), punyHost, u.getPort(), u.getPath(), u.getQuery(), u.getRef());
+        return uri.toURL();
+    } catch (URISyntaxException | MalformedURLException | IllegalArgumentException e) {
+        // Return original URL if Punycode conversion fails
+        return u;
+    }
+}
+
+private static boolean isAscii(String s) {
+    return StandardCharsets.US_ASCII.newEncoder().canEncode(s);
+}
+*/
+
+
+/**
+ * Encodes the URL {@code u} characters like spaces or non-ASCII chars in the path, query, and fragment,
+ * which are not permitted in URLs. Also handles Punycode encoding for the host.
+ * @param u The URL to encode.
+ * @return The encoded URL.
+ */
 static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+    // First, apply Punycode to the host if necessary.
+    // We assume punyUrl returns 'u' or a new URL with the host Punycode-encoded.
+    // If punyUrl fails, it might return the original 'u'.
+    URL punyDecodedU = u; // Keep original for fallback
+    u = punyUrl(u); // Note: 'u' variable is reassigned here.
+
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+        // Use the URI multi-argument constructor to properly encode path, query, fragment
+        // The getters (getPath, etc.) return decoded components, which the URI constructor then correctly encodes.
+        // We use the 'u' that might have had its host Punycode-encoded.
+        URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());
+        // Convert the URI, which is now properly encoded, back to a URL.
+        return uri.toURL();
     } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+        // If encoding fails (e.g., due to unexpected characters even after decoding,
+        // or issues converting URI back to URL), return the URL as it was after the punyUrl step.
+        // This matches the original code's intent of returning 'u' on failure, where 'u'
+        // at this point is the result of punyUrl(initialUrl).
         return u;
+    } catch (Exception e) {
+        // Catch any other unexpected exception during URI/URL handling and fall back.
+        // Using the URL after punyUrl attempt as fallback. If punyUrl itself failed,
+        // it would have likely returned the original URL anyway.
+        return u;
+    }
+}
+
+// Dummy punyUrl and isAscii for the provided snippet to be self-contained for compilation testing.
+// Replace with actual implementation if needed.
+static URL punyUrl(URL u) {
+    // Placeholder implementation - in reality, this would handle IDN to ASCII conversion.
+    // For this fix, we assume it either returns 'u' or a correctly Punycode-encoded URL.
+    // Let's simulate a simple pass-through for testing the main logic.
+     if (u == null || u.getHost() == null || u.getHost().isEmpty() || isAscii(u.getHost())) {
+         return u;
+     }
+     try {
+         // Attempt Punycode conversion (this is a simplified example)
+         String punyHost = IDN.toASCII(u.getHost());
+         // Reconstruct URI -> URL
+         URI uri = new URI(u.getProtocol(), u.getUserInfo(), punyHost, u.getPort(), u.getPath(), u.getQuery(), u.getRef());
+         return uri.toURL();
+     } catch (Exception e) { // Catch broad exceptions for simplicity here
+         return u; // Fallback to original URL
+     }
 }
+
+private static boolean isAscii(String s) {
+     return StandardCharsets.US_ASCII.newEncoder().canEncode(s);
 }
