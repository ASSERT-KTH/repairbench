diff --git a/tmp/6ef3fe92-9cb8-485c-be9b-2a0f5af36104_buggy.java b/tmp/6b080f9c-21a2-4e22-88e5-c555e4b92f57_fixed.java
index 855afa5..37902f0 100644
--- a/tmp/6ef3fe92-9cb8-485c-be9b-2a0f5af36104_buggy.java
+++ b/tmp/6b080f9c-21a2-4e22-88e5-c555e4b92f57_fixed.java
@@ -1,13 +1,29 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+// Assuming punyUrl is available in the same scope or class
+// import static your.package.HttpConnection.punyUrl;
+
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
 	    try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Apply Punycode to the hostname if necessary. Assume punyUrl handles this.
+            // It's better to do this before component extraction if punyUrl modifies the host.
+            // However, the original code did it first, let's keep it, assuming punyUrl returns a URL
+            // where getHost() gives the potentially punycode-encoded host.
+            u = punyUrl(u);
+
+            // Use the URI multi-argument constructor to properly encode path, query, etc.
+            // This constructor handles encoding of illegal characters within each component.
+            // Note: It does not encode the fragment identifier according to RFC 3986.
+            final URI uri = new URI(u.getProtocol(), u.getAuthority(), u.getPath(), u.getQuery(), u.getRef());
+
+            // Convert the URI back to a URL. uri.toURL() is generally preferred.
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // Log the exception for debugging?
+            // Log.debug("Failed to encode URL [{}]", u.toExternalForm(), e);
+            // give up and return the original input as per the original behavior
             return u;
         }
     }
