diff --git a/tmp/44e80db8-e566-4a99-8db7-7a2fdaa37b48_buggy.java b/tmp/eabe7217-7486-4456-b8b6-ee6cb272cb34_fixed.java
index 855afa5..903dcc9 100644
--- a/tmp/44e80db8-e566-4a99-8db7-7a2fdaa37b48_buggy.java
+++ b/tmp/eabe7217-7486-4456-b8b6-ee6cb272cb34_fixed.java
@@ -1,13 +1,52 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+// Assume punyUrl is defined elsewhere and handles IDN correctly.
+// Example: static URL punyUrl(URL u) { return u; } // Placeholder
+
+class HttpConnection { // Added class wrapper for context
+    // Assume punyUrl method exists and works as intended (e.g., converts IDN host to Punycode)
+    // We keep the call as it was part of the original buggy function.
+    static URL punyUrl(URL u) {
+        // Placeholder implementation: assumes it handles IDN correctly.
+        // The test case provided does not involve IDN hosts.
+        return u;
+    }
+
+    /**
+     * Encodes the URL {@code u} ensuring components like path, query, and fragment are correctly percent-encoded.
+     * Handles International Domain Names (IDN) via {@link #punyUrl(URL)}.
+     *
+     * @param u the URL to encode
+     * @return an encoded URL, or the original URL if an error occurred during encoding.
+     */
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // Apply Punycode to the host part first (if applicable, handled by punyUrl)
+            u = punyUrl(u);
+
+            // Use the multi-argument URI constructor to properly encode the components (path, query, fragment)
+            // This constructor handles percent-encoding for characters that are illegal in URI components.
+            final URI uri = new URI(
+                u.getProtocol(),
+                u.getUserInfo(), // Pass user info component
+                u.getHost(),     // Pass host component
+                u.getPort(),     // Pass port component
+                u.getPath(),     // Pass path component (will be encoded)
+                u.getQuery(),    // Pass query component (will be encoded)
+                u.getRef()       // Pass fragment component (will be encoded)
+            );
+
+            // Convert the resulting URI, which has components properly encoded, back to a URL.
+            return uri.toURL(); // Note: toURL() can throw MalformedURLException
+
+        } catch (URISyntaxException | MalformedURLException | IllegalArgumentException e) {
+            // URISyntaxException: Invalid URI syntax constructed from components.
+            // MalformedURLException: Could be thrown by uri.toURL() or potentially by punyUrl (though handled there).
+            // IllegalArgumentException: Can be thrown by URI constructor for invalid components (e.g., path).
+            // If any error occurs, return the original URL object as a fallback.
             return u;
         }
     }
+} // Added class wrapper for context
\ No newline at end of file
