diff --git a/tmp/e8a5bea8-b26f-4cc9-bbd3-b9bb687463c9_buggy.java b/tmp/e455f226-dfe5-46c5-a7f3-895237b79660_fixed.java
index 855afa5..bb55e98 100644
--- a/tmp/e8a5bea8-b26f-4cc9-bbd3-b9bb687463c9_buggy.java
+++ b/tmp/e455f226-dfe5-46c5-a7f3-895237b79660_fixed.java
@@ -1,13 +1,50 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.net.IDN; // Required for punyUrl implementation detail (assumed)
+
+/**
+ * Helper static methods for URL interactions. Visible for testing.
+ */
+class UrlHelper { // Dummy class to make the static method compile standalone
+    // Assume punyUrl exists and works correctly, handling IDN conversion.
+    // Example minimal implementation for context:
+    static URL punyUrl(URL u) {
+        if (u == null || u.getHost() == null || u.getHost().matches("[\u0000-\u007F]+")) // Already ASCII
+            return u;
+        try {
+            String asciiHost = IDN.toASCII(u.getHost());
+            // Reconstruct URL with ASCII host
+            return new URL(u.getProtocol(), asciiHost, u.getPort(), u.getFile());
+        } catch (MalformedURLException | IllegalArgumentException e) {
+            // Log? Or just return original on error
+            return u;
+        }
+    }
+
+
+    /**
+     * Creates a new URL by encoding the input URL. Handles Punycode domains, spaces, and other characters that need
+     * encoding. Falls back to the original URL if encoding fails.
+     * @param u the input URL to encode.
+     * @return the encoded URL, or the original URL if encoding failed.
+     */
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+	    u = punyUrl(u); // Ensure host is ASCII (Punycode if needed) before component extraction
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Use the URI multi-argument constructor which properly encodes the components (path, query, fragment)
+            // This handles spaces, brackets, and other illegal characters correctly.
+            URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // Log the error? System.err.println("Failed to encode URL '" + u + "': " + e);
+            // Fallback: return the original URL if encoding fails.
+            return u;
+        } catch (IllegalArgumentException e) {
+            // The URI constructor can also throw IllegalArgumentException for severe syntax issues
+            // Log the error? System.err.println("Failed to encode URL '" + u + "' (Illegal Argument): " + e);
              return u;
         }
     }
+} // End dummy class
\ No newline at end of file
