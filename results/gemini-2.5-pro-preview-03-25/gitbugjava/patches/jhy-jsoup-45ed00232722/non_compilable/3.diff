diff --git a/tmp/4714db50-a465-4d17-b21c-91f9a2896fe0_buggy.java b/tmp/ba951fce-92ef-47a1-b35d-c25f9f35255e_fixed.java
index 855afa5..0f1ffe7 100644
--- a/tmp/4714db50-a465-4d17-b21c-91f9a2896fe0_buggy.java
+++ b/tmp/ba951fce-92ef-47a1-b35d-c25f9f35255e_fixed.java
@@ -1,13 +1,40 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+class Scratch {
+    // Assume punyUrl is defined elsewhere and handles Punycode encoding for the host if necessary.
+    // static URL punyUrl(URL u) { return u; } // Placeholder for compilation
+
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+        URL puny = punyUrl(u); // Handle Punycode for hostname first
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Use the URI multi-argument constructor to properly encode path, query, etc.
+            // This handles characters like spaces, brackets, etc., within components correctly.
+            URI uri = new URI(
+                puny.getProtocol(),
+                puny.getUserInfo(),
+                puny.getHost(),
+                puny.getPort(),
+                puny.getPath(),
+                puny.getQuery(),
+                puny.getRef() // fragment
+            );
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+            // The URI constructor or toURL() failed, return the URL after punycode attempt as fallback
+            // This case indicates a more fundamental issue with the URL structure
+            // that couldn't be resolved by standard encoding.
+            return puny;
+        }
+    }
+
+    // Dummy punyUrl for the sake of providing a compilable block.
+    // The actual implementation should exist elsewhere in the project.
+    static URL punyUrl(URL u) {
+        // In a real scenario, this would handle IDN Punycode conversion for the host.
+        // For this fix, we assume it returns the URL potentially modified for Punycode.
         return u;
     }
 }
\ No newline at end of file
