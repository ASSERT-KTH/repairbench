diff --git a/tmp/938eb24c-65e5-4dc9-9249-6f6841a5ef67_buggy.java b/tmp/aeab1fb1-1914-4aa8-a557-caef60113f71_fixed.java
index 855afa5..b1afdbf 100644
--- a/tmp/938eb24c-65e5-4dc9-9249-6f6841a5ef67_buggy.java
+++ b/tmp/aeab1fb1-1914-4aa8-a557-caef60113f71_fixed.java
@@ -1,13 +1,33 @@
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+
+// Assume the surrounding class and the punyUrl function exist elsewhere
+// static URL punyUrl(URL u) { ... }
+
     static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
+        // Apply Punycode for International Domain Names first
+	    URL punyEncodedUrl = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Deconstruct the URL and use the URI multi-argument constructor.
+            // This constructor handles the necessary percent-encoding for each
+            // component (path, query, etc.) according to RFC 3986.
+            URI uri = new URI(
+                punyEncodedUrl.getProtocol(),
+                punyEncodedUrl.getUserInfo(),
+                punyEncodedUrl.getHost(),
+                punyEncodedUrl.getPort(),
+                punyEncodedUrl.getPath(),
+                punyEncodedUrl.getQuery(),
+                punyEncodedUrl.getRef() // fragment
+            );
+            // Convert the properly encoded URI back to a URL.
+            return uri.toURL();
         } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
-            return u;
+            // If encoding fails (e.g., due to an invalid component that URI constructor rejects),
+            // return the URL after Punycode encoding was applied. This matches the effective
+            // fallback behavior of the original code if punyUrl had modified the URL.
+            return punyEncodedUrl;
         }
     }
\ No newline at end of file
