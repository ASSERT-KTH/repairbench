diff --git a/tmp/4d702e36-8db8-4907-91b6-945bdbd14ca1_buggy.java b/tmp/2491a1a4-b50d-4950-8013-2d7dcc71d40b_fixed.java
index 0a8838d..a9c9807 100644
--- a/tmp/4d702e36-8db8-4907-91b6-945bdbd14ca1_buggy.java
+++ b/tmp/2491a1a4-b50d-4950-8013-2d7dcc71d40b_fixed.java
@@ -1,61 +1,93 @@
     private List<Position> parseData(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
         List<Position> positions = new LinkedList<>();
 
         if (!connectionless) {
             buf.readUnsignedInt(); // data length
         }
 
         int codec = buf.readUnsignedByte();
         int count = buf.readUnsignedByte();
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
+            // If no session, we can't associate data but might still need to process for ACK
+            if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
+                sendResponse(channel, remoteAddress, connectionless, locationPacketId, (byte) count);
+            }
             return null;
         }
         String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
 
             position.setDeviceId(deviceSession.getDeviceId());
-            position.setValid(true);
 
             if (codec == CODEC_13) {
                 buf.readUnsignedByte(); // type
-                int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+                int length = buf.readInt() - 4; // length includes timestamp
+                Date time = new Date(buf.readUnsignedInt() * 1000); // read timestamp
+                getLastLocation(position, time); // Get previous location data first
+                position.setTime(time); // Set the time from the packet
+
+                if (length > 0) {
                     if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                        String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                        // Special handling for GTSL driver message format
+                        if (data.startsWith("GTSL|")) {
+                            String[] parts = data.split("\\|");
+                            if (parts.length >= 5) {
+                                position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[4]);
+                                // Keep other potentially useful info in result if needed
+                                // position.set(Position.KEY_RESULT, data);
+                            } else {
+                                position.set(Position.KEY_RESULT, data); // Fallback if format is unexpected
+                            }
+                        } else {
+                            position.set(Position.KEY_RESULT, data); // Store other printable data
+                        }
                     } else {
                         position.set(Position.KEY_RESULT,
                                 ByteBufUtil.hexDump(buf.readSlice(length)));
                     }
+                } else {
+                    // If length is 0, still create a position with timestamp and last location
+                    position.setValid(true); // Assume valid if we have a timestamp
+                }
             } else if (codec == CODEC_12) {
                 decodeSerial(channel, remoteAddress, deviceSession, position, buf);
             } else {
                 decodeLocation(position, buf, codec, model);
             }
 
-            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
+            // Add position if it's valid or has any attributes (like driver ID from CODEC_13)
+            if (position.getValid() || !position.getAttributes().isEmpty()) {
+                 // Ensure outdated status is correctly determined after all potential data setting
+                 if (position.getFixTime() == null) {
+                     getLastLocation(position, position.getDeviceTime()); // Try again if fix time wasn't set
+                 }
                  positions.add(position);
             }
         }
 
         if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
+            sendResponse(channel, remoteAddress, connectionless, locationPacketId, (byte) count);
+        }
+
+        return positions.isEmpty() ? null : positions;
+    }
+
+    private void sendResponse(Channel channel, SocketAddress remoteAddress, boolean connectionless, int locationPacketId, byte count) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
-                response.writeShort(5);
-                response.writeShort(0);
-                response.writeByte(0x01);
-                response.writeByte(locationPacketId);
-                response.writeByte(count);
+            response.writeShort(5); // length
+            response.writeShort(0); // packet id
+            response.writeByte(0x01); // type
+            response.writeByte(locationPacketId); // location packet id
+            response.writeByte(count); // number of accepted records
         } else {
-                response.writeInt(count);
+            response.writeInt(count); // number of accepted records
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
\ No newline at end of file
-
-        return positions.isEmpty() ? null : positions;
-    }
