diff --git a/tmp/5ceed4ec-3e2b-441f-8009-5973e298d6b5_buggy.java b/tmp/866ba186-0605-4698-8bf8-d6ed08c60fd8_fixed.java
index 1098336..ba7f65a 100644
--- a/tmp/5ceed4ec-3e2b-441f-8009-5973e298d6b5_buggy.java
+++ b/tmp/866ba186-0605-4698-8bf8-d6ed08c60fd8_fixed.java
@@ -1,16 +1,27 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
+        // According to CSSOMParser Javadoc, null error handler defaults to standard error handler which throws exceptions
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
+
+        // Use a writer settings object based on the default formatter configuration,
+        // but override the line ending with the one requested for this specific operation.
+        final var writerSettings = new CSSWriterSettings(this.formatter);
+        writerSettings.setNewLineString(ending.getChars());
+
+        // Generate the formatted code using the adjusted settings
+        var formattedCode = sheet.getCssText(writerSettings);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        // Note: This replacement relies on the specific behavior of the parser changing '\9' to '\t'.
+        // If the parser behavior changes in future versions, this might need adjustment.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
+        // Check if formatting actually changed the code
         if (code.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
\ No newline at end of file
