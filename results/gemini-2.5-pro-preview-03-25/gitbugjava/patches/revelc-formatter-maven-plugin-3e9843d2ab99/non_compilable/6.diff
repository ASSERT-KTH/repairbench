diff --git a/tmp/2e53589e-33d8-47ca-b17f-af563188e982_buggy.java b/tmp/e1d50780-710b-4dff-bf4c-69a7739bf908_fixed.java
index 1098336..dcec7e0 100644
--- a/tmp/2e53589e-33d8-47ca-b17f-af563188e982_buggy.java
+++ b/tmp/e1d50780-710b-4dff-bf4c-69a7739bf908_fixed.java
@@ -1,16 +1,72 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
+        // Create settings for this specific call based on the base settings
+        // Ensure base formatter settings are initialized (e.g., in init method)
+        if (this.formatter == null) {
+            throw new IllegalStateException("CssFormatter is not initialized.");
+        }
+        final var settings = new CSSWriterSettings(this.formatter); // Use copy constructor
 
-        final var source = new InputSource(new StringReader(code));
-        final var parser = new CSSOMParser(new SACParserCSS3());
-        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
+        // Set the line ending requested by the caller
+        settings.setNewLineString(ending.getChars());
+        // Ensure optimized output is off if readability/consistency is desired over size
+        // settings.setOptimizedOutput(false); // Keep the default from this.formatter unless specified otherwise
 
-        // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        CascadingStyleSheet sheet = null;
+        try {
+            // Use CSSReader to parse the code.
+            // Using a logging error handler, but could use ThrowingCSSParseErrorHandler for stricter parsing.
+            // Assuming UTF-8 encoding is appropriate here.
+            sheet = CSSReader.readFromString(code, StandardCharsets.UTF_8, ECSSVersion.CSS30,
+                    new LoggingCSSParseErrorHandler());
+        } catch (final Exception e) {
+            // Wrap parsing exceptions in IOException as per method signature
+             // Log the error for diagnostics
+             // Using System.err here as logger might not be configured; replace with actual logger if available
+             System.err.println("CSS parsing failed: " + e.getMessage());
+             // Rethrow as IOException or a more specific formatting exception if available
+             throw new IOException("Failed to parse CSS", e);
+        }
+
+        // Check if parsing was successful (CSSReader returns null on empty/null input or severe errors depending on handler)
+        if (sheet == null) {
+            // Log warning or debug message
+            // System.err.println("CSS parsing resulted in a null sheet. Input might be empty or invalid.");
+            // Return null if the sheet couldn't be parsed, implying no change or failure state
+            // Check if input code was empty or just whitespace
+             if (code == null || code.trim().isEmpty()) {
+                 return code; // Return original empty/whitespace code
+             } else {
+                 // Parsing failed for non-empty code, treat as unformattable / error
+                 // Depending on desired behavior, could return original 'code' or throw exception
+                 // Returning null implies "no formatting applied", which might be misleading here.
+                 // Let's return the original code to indicate no successful formatting occurred.
+                 // Or align with original behavior which seems to return null on failure implicitly.
+                 // Let's stick to returning null for now to match original structure's potential failure path.
+                 return null;
+             }
+        }
+
+        // Get the formatted CSS text using CSSWriter and the configured settings
+        final var writer = new CSSWriter(settings);
+        var formattedCode = writer.getCSSAsString(sheet);
+
+        // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser might switch it to 'tab'.
+        // This needs verification if still required with com.helger.css library. Keeping for compatibility.
+        if (formattedCode != null) {
             formattedCode = formattedCode.replace("\t;", "\\9;");
+        }
 
+        // Handle case where formatting results in null or empty string unexpectedly
+        if (formattedCode == null) {
+             // Log this case?
+             return null; // Nothing to return
+        }
+
+        // Check if the formatted code is identical to the original code
         if (code.equals(formattedCode)) {
-            return null;
+            return null; // Return null signifies no changes were made
         }
+
         return formattedCode;
     }
\ No newline at end of file
