diff --git a/tmp/afc35762-1969-4766-ae58-df3d1e353422_buggy.java b/tmp/eb0cc02c-b219-4352-999c-da6b4b699b23_fixed.java
index 1098336..b1582b1 100644
--- a/tmp/afc35762-1969-4766-ae58-df3d1e353422_buggy.java
+++ b/tmp/eb0cc02c-b219-4352-999c-da6b4b699b23_fixed.java
@@ -1,16 +1,41 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
-        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
+        final CSSStyleSheetImpl sheet;
+        try {
+            // It's important to handle potential parsing errors from cssparser
+            sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+            if (sheet == null) {
+                // Handle case where parsing might return null, e.g., for empty input
+                // Although typically it might throw exceptions for invalid CSS.
+                // Returning original code might be safe, or throw an exception.
+                // Let's assume for non-empty valid CSS, sheet is non-null.
+                // If code was empty, formatted code would likely also be empty or minimal "{}",
+                // so the equality check later might handle it returning null.
+            }
+        } catch (final Exception e) {
+            // Catching generic Exception is broad, but cssparser might throw unchecked exceptions.
+            // Re-throwing as IOException to match method signature and indicate failure.
+            throw new IOException("Failed to parse CSS: " + e.getMessage(), e);
+        }
 
-        // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
-        formattedCode = formattedCode.replace("\t;", "\\9;");
+        // Get formatted text using the configured formatter.
+        // We assume this.formatter is configured correctly (including potentially line endings)
+        // during the Formatter initialization phase based on the 'ending' parameter passed there.
+        // The cssparser library's CssWriter uses the provided CssFormat.
+        final var formattedCode = sheet.getCssText(this.formatter);
 
+        // The problematic patch for IE hacks (`\9`) is removed.
+        // This patch (`formattedCode = formattedCode.replace("\t;", "\\9;");`) was likely
+        // too aggressive, potentially corrupting CSS that genuinely uses a tab followed
+        // by a semicolon, or it might be outdated if cssparser's handling of `\9` changed.
+        // Removing it makes the formatting rely solely on the cssparser library's output.
+
+        // Check if formatting resulted in any change. If not, return null.
         if (code.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
