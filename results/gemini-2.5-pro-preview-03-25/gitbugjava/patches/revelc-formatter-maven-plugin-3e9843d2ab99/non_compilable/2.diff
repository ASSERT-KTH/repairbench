diff --git a/tmp/65f20f28-fdad-4b11-a965-4ee941f3771c_buggy.java b/tmp/2445262e-15a4-4d90-abcb-d60284dbefa3_fixed.java
index 1098336..c5a45a9 100644
--- a/tmp/65f20f28-fdad-4b11-a965-4ee941f3771c_buggy.java
+++ b/tmp/2445262e-15a4-4d90-abcb-d60284dbefa3_fixed.java
@@ -1,16 +1,51 @@
+import com.helger.css.om.CSSStyleSheetImpl;
+import com.helger.css.parser.CSSOMParser;
+import com.helger.css.parser.ParseException;
+import com.helger.css.parser.SACParserCSS3;
+import java.io.IOException;
+import java.io.StringReader;
+import net.revelc.code.formatter.LineEnding;
+import org.xml.sax.InputSource;
+
+// Assuming 'formatter' is a field of type com.helger.css.writer.CSSWriterSettings available in the containing class.
+
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
+        // Configure the CSS writer to use the line ending specified by the caller for this format operation.
+        // This is crucial because the original code didn't seem to use the 'ending' parameter.
+        this.formatter.setNewLineString(ending.getChars());
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
-        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+        CSSStyleSheetImpl sheet;
+        try {
+            // Parse the CSS input string into an object model.
+            sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+            // Check if parsing was successful; some parsers might return null on error.
+            if (sheet == null) {
+                throw new IOException("Failed to parse CSS: CSSOMParser returned null StyleSheet");
+            }
+        } catch (final ParseException e) {
+            // Catch and wrap specific parsing exceptions.
+            throw new IOException("Failed to parse CSS", e);
+        } catch (final Exception e) {
+            // Catch other potential runtime exceptions during parsing.
+            throw new IOException("An unexpected error occurred during CSS parsing", e);
+        }
+
+        // Generate the formatted CSS string from the object model using the configured settings.
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        // Retain this patch as it was likely added to handle a specific behavior of the cssparser library version used.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
+        // Return null if the formatting process resulted in code identical to the original input.
+        // This prevents unnecessary file writes if the code is already formatted.
         if (code.equals(formattedCode)) {
             return null;
         }
+
+        // Return the formatted code string.
         return formattedCode;
     }
\ No newline at end of file
