diff --git a/tmp/b40e2270-e8a3-4cc2-8502-145fa166fc8b_buggy.java b/tmp/0b327d0e-02c3-4138-9498-c06dda30c93b_fixed.java
index 1098336..af45bdd 100644
--- a/tmp/b40e2270-e8a3-4cc2-8502-145fa166fc8b_buggy.java
+++ b/tmp/0b327d0e-02c3-4138-9498-c06dda30c93b_fixed.java
@@ -1,16 +1,38 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
         final var source = new InputSource(new StringReader(code));
         final var parser = new CSSOMParser(new SACParserCSS3());
+        // Configure the formatter with the correct line ending *before* parsing,
+        // although CSSOMParser might not use it directly during parsing,
+        // setting it ensures the writer uses the correct ending.
+        // More importantly, the CSSWriterSettings needs the correct line ending for output generation.
+        this.formatter.setNewLineString(ending.getChars());
+
         final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+        // Check if parsing was successful and a sheet was created
+        if (sheet == null) {
+            // Handle parsing error, e.g., return original code or throw exception
+            // Depending on desired behavior. Returning null signifies no change/formatting needed,
+            // but maybe an error state is more appropriate if parsing fails.
+            // For now, let's assume returning null implies no formatting could be applied or was needed.
+             return null;
+         }
         var formattedCode = sheet.getCssText(this.formatter);
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        // This patch should ideally happen only if the original code contained '\9'.
+        // However, without tracking this, we apply it globally. This might be fragile.
+        // A more robust solution might involve a custom CSSNodeVisitor or post-processing based on original content analysis.
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
+        // Normalize line endings in the original code for fair comparison
+        // Or rely on the fact that if formatting changes anything (including line endings), it's different.
+        // The current check `code.equals(formattedCode)` might fail if only line endings differ,
+        // which might be intended (report change) or unintended (don't report if only endings change).
+        // Given the test expects specific line endings, reporting changes seems correct.
         if (code.equals(formattedCode)) {
             return null;
         }
         return formattedCode;
     }
