diff --git a/tmp/b22d723c-9679-4578-a9be-3640d248e927_buggy.java b/tmp/fd1bd846-a5e8-4ab6-99d7-a32fe98eae13_fixed.java
index 1098336..0ecef79 100644
--- a/tmp/b22d723c-9679-4578-a9be-3640d248e927_buggy.java
+++ b/tmp/fd1bd846-a5e8-4ab6-99d7-a32fe98eae13_fixed.java
@@ -1,16 +1,77 @@
     @Override
     protected String doFormat(final String code, final LineEnding ending) throws IOException {
+        // Import necessary classes (assuming they are imported at the top level)
+        // import com.helger.css.parser.CSSOMParser;
+        // import com.helger.css.parser.CSSParseException;
+        // import com.helger.css.parser.SACParserCSS3;
+        // import com.helger.css.writer.CSSWriter;
+        // import com.helger.css.writer.CSSWriterSettings;
+        // import com.helger.css.writer.ECSSNewLineMode;
+        // import com.helger.css.decl.CSSStyleSheetImpl;
+        // import org.w3c.css.sac.InputSource;
+        // import java.io.StringReader;
+        // import java.io.IOException;
 
         final var source = new InputSource(new StringReader(code));
+        // SACParserCSS3 supports CSS 3.0 including media queries etc.
         final var parser = new CSSOMParser(new SACParserCSS3());
-        final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
-        var formattedCode = sheet.getCssText(this.formatter);
+        // Optional: Add an error handler to potentially capture/log parsing errors differently
+        // parser.setParseExceptionCallback(new ThrowingCSSParseExceptionCallback ());
+
+        final CSSStyleSheetImpl sheet;
+        try {
+            // The parseStyleSheet method in CSSOMParser can return null or throw CSSParseException
+            sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
+            // If parsing returns null (e.g., for empty input or completely unparseable CSS), treat as no change.
+            if (sheet == null) {
+                 // Log warning? System.err.println("CSS parsing returned null stylesheet.");
+                 return null;
+             }
+        } catch (final Exception e) { // Catch broad Exception as CSSOMParser throws it
+            // Wrap parser exception into IOException as per method signature
+            throw new IOException("Failed to parse CSS: " + e.getMessage(), e);
+        }
+
+        // Create writer settings based on the formatter configuration (indent, etc.)
+        // This constructor copies settings like indent, quote URLs etc. from this.formatter
+        final var writerSettings = new CSSWriterSettings(this.formatter);
+
+        // *** Override the line ending mode based on the 'ending' parameter ***
+        // The original code implicitly used system default line endings via sheet.getCssText()
+        switch (ending) {
+            case LF:
+                writerSettings.setNewLineMode(ECSSNewLineMode.LF);
+                break;
+            case CRLF:
+                writerSettings.setNewLineMode(ECSSNewLineMode.CRLF);
+                break;
+            case CR:
+                writerSettings.setNewLineMode(ECSSNewLineMode.CR);
+                break;
+            // Assuming AUTO, KEEP, SYSTEM are resolved by the framework before calling doFormat
+            default:
+                // Fallback to system default, consistent with CSSWriterSettings default if not overridden.
+                writerSettings.setNewLineMode(ECSSNewLineMode.SYSTEM_DEFAULT);
+                break;
+        }
+
+        // Create the writer and get the formatted text
+        final var writer = new CSSWriter(writerSettings);
+        String formattedCode = writer.getCSSAsString(sheet);
+
+        // Defensive check against null return from getCSSAsString, though unlikely
+        if (formattedCode == null) {
+           formattedCode = "";
+        }
 
         // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
+        // Apply this *after* formatting, as the formatter might produce the '\t;'
         formattedCode = formattedCode.replace("\t;", "\\9;");
 
+        // Final comparison: return null if no change from original code
         if (code.equals(formattedCode)) {
             return null;
         }
+
         return formattedCode;
     }
\ No newline at end of file
