diff --git a/tmp/e931fc4b-9d1a-4652-be0c-9cb45ec557bf_buggy.java b/tmp/d44eb310-2f36-469a-ab32-052b650c8e7a_fixed.java
index fb15c85..b09b594 100644
--- a/tmp/e931fc4b-9d1a-4652-be0c-9cb45ec557bf_buggy.java
+++ b/tmp/d44eb310-2f36-469a-ab32-052b650c8e7a_fixed.java
@@ -1,311 +1,601 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Check remaining buffer size to prevent IndexOutOfBoundsException
+            // This might help diagnose issues if the format string expects more data than available
+            if (!buf.isReadable()) {
+                // Log warning or break if buffer is unexpectedly empty
+                // Log.warning("Buffer empty while processing custom data key: " + key);
+                break; 
+            }
             switch (key) {
                 case "SA":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case "MV":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "BV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "GQ":
+                    if (buf.readableBytes() >= 1) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
+                    }
                     break;
                 case "CE":
+                    if (buf.readableBytes() >= 4) {
                         cellTower.setCellId(buf.readUnsignedInt());
+                    }
                     break;
                 case "LC":
+                    if (buf.readableBytes() >= 2) {
                         cellTower.setLocationAreaCode(buf.readUnsignedShort());
+                    }
                     break;
                 case "CN":
-                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
-                    cellTower.setMobileCountryCode(combinedMobileCodes / 100);
-                    cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    if (buf.readableBytes() >= 4) {
+                        long combinedMobileCodes = buf.readUnsignedInt(); // Use long to handle full unsigned range
+                        // Apply modulo 100000 based on comment "cccnn" implying 5 digits
+                        // Some devices might send raw MCC/MNC without this encoding, protocol docs are key
+                        int networkData = (int) (combinedMobileCodes % 100000); 
+                        cellTower.setMobileCountryCode(networkData / 100);
+                        cellTower.setMobileNetworkCode(networkData % 100);
+                    }
                     break;
                 case "RL":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
+                    }
                     break;
                 case "AT":
-                    position.setAltitude(buf.readUnsignedInt());
+                    if (buf.readableBytes() >= 4) {
+                        // Assuming altitude is in meters, check if value needs scaling or offset
+                        position.setAltitude(buf.readInt()); // Use readInt() if altitude can be negative
+                    }
                     break;
                 case "RP":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                    }
                     break;
                 case "GS":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case "DT":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
+                    }
                     break;
                 case "VN":
+                    // Assuming readString handles buffer checks internally or length is known
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // mass air flow rate
+                    }
                     break;
                 case "EL":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    }
                     break;
                 case "ET":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "FL":
+                     if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case "ML":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    // Assuming readString handles buffer checks internally
+                    readString(buf); // format string for cell info? seems redundant if form is already known
                     break;
                 case "AV1":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "NC":
+                     // Assuming readString handles buffer checks internally
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // max speed between reports
+                    }
                     break;
                 case "GL":
+                    // Assuming readString handles buffer checks internally
                     readString(buf); // google link
                     break;
                 case "MA":
+                    // Assuming readString handles buffer checks internally
                     readString(buf); // mac address
                     break;
                 case "PD":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
+                    // Assuming readString handles buffer checks internally
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imsi
+                    }
                     break;
                 case "GN":
+                    if (buf.readableBytes() >= 60) {
                         buf.skipBytes(60); // g sensor data
+                    } else {
+                        // Skip only readable bytes if less than 60 are available
+                        buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 case "GV":
+                     if (buf.readableBytes() >= 6) {
                         buf.skipBytes(6); // maximum g force
+                    } else {
+                        buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 case "ME":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imei
+                    }
                     break;
                 case "IA":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // intake air temperature
+                    }
                     break;
                 case "MP":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // manifold absolute pressure
+                    }
                     break;
                 case "EO":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));
+                    }
                     break;
                 case "EH":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);
+                    if (buf.readableBytes() >= 4) {
+                        // Multiplication factor might overflow integer, ensure calculation uses long
+                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000L);
+                    }
                     break;
                 case "ZO1":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // brake stroke status
+                    }
                     break;
                 case "ZO2":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // warning indicator status
+                    }
                     break;
                 case "ZO3":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // abs control status
+                    }
                     break;
                 case "ZO4":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);
+                    }
                     break;
                 case "ZO5":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // parking brake status
+                    }
                     break;
                 case "ZO6":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);
+                    }
                     break;
                 case "ZO7":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // cruise control status
+                    }
                     break;
                 case "ZO8":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // accelector pedal position
+                    }
                     break;
                 case "ZO9":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);
+                    }
                     break;
                 case "ZO10":
+                     if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);
+                    }
                     break;
                 case "ZO11":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // engine oil pressure
+                    }
                     break;
                 case "ZO12":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // boost pressure
+                    }
                     break;
                 case "ZO13":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // intake temperature
+                    }
                     break;
                 case "ZO14":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());
+                     if (buf.readableBytes() >= 1) {
+                         // Temperature might be signed or require offset
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readByte()); // Assuming signed byte C
+                    }
                     break;
                 case "ZO15":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // brake application pressure
+                    }
                     break;
                 case "ZO16":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // brake primary pressure
+                    }
                     break;
                 case "ZO17":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // brake secondary pressure
+                    }
                     break;
                 case "ZH1":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // cargo weight
+                    }
                     break;
                 case "ZH2":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);
+                    }
                     break;
                 case "ZH3":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);
+                    }
                     break;
                 case "ZL1":
+                     if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // fuel used (natural gas)
+                    }
                     break;
                 case "ZL2":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);
+                    if (buf.readableBytes() >= 4) {
+                        // Factor 161 seems specific, check units (e.g., 0.1 miles to meters?)
+                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161L);
+                    }
                     break;
                 case "ZL3":
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // vehicle hours
+                    }
                     break;
                 case "ZL4":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() >= 4) {
+                         // Factor seems large, ensure correct units (e.g., 0.05 hr to ms?)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L);
+                    }
                     break;
                 case "ZS1":
+                     // Assuming readString handles buffer checks internally
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JO1":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // pedals
+                    }
                     break;
                 case "JO2":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // power takeoff device
+                    }
                     break;
                 case "JO3":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // accelector pedal position
+                    }
                     break;
                 case "JO4":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());
+                    }
                     break;
                 case "JO5":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                    }
                     break;
                 case "JO6":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // fms vehicle interface
+                    }
                     break;
                 case "JO7":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // driver 2
+                    }
                     break;
                 case "JO8":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // driver 1
+                    }
                     break;
                 case "JO9":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // drivers
+                    }
                     break;
                 case "JO10":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // system information
+                    }
                     break;
                 case "JO11":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
+                    if (buf.readableBytes() >= 1) {
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readByte() - 40); // Offset by -40C
+                    }
                     break;
                 case "JO12":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // pto engaged
+                    }
                     break;
                 case "JH1":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
+                    }
                     break;
                 case "JH2":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
+                    }
                     break;
                 case "JH3":
                 case "JH4":
                 case "JH5":
                 case "JH6":
                 case "JH7":
-                    int index = Integer.parseInt(key.substring(2)) - 2;
+                    if (buf.readableBytes() >= 2) {
+                        int index = Integer.parseInt(key.substring(2)) - 2; // index = 1..5
                         position.set("axleWeight" + index, buf.readUnsignedShort() * 0.5);
+                    }
                     break;
                 case "JH8":
-                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5L);
+                    }
                     break;
                 case "JH9":
+                     if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // tachograph speed
+                    }
                     break;
                 case "JH10":
+                     if (buf.readableBytes() >= 2) {
+                         // Ambient temp likely signed short C with scaling?
                         buf.readUnsignedShort(); // ambient air temperature
+                    }
                     break;
                 case "JH11":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);
+                    }
                     break;
                 case "JH12":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // fuel economy
+                    }
                     break;
                 case "JL1":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);
+                    }
                     break;
                 case "JL2":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L);
+                    }
                     break;
                 case "JL3":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
+                    }
                     break;
                 case "JL4":
+                     if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
+                    }
                     break;
                 case "JS1":
+                     // Assuming readString handles buffer checks internally
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JS2":
+                     // Assuming readString handles buffer checks internally
                     readString(buf); // fms version supported
                     break;
                 case "JS3":
+                     // Assuming readString handles buffer checks internally
                     position.set("driver1", readString(buf));
                     break;
                 case "JS4":
+                    // Assuming readString handles buffer checks internally
                     position.set("driver2", readString(buf));
                     break;
                 case "JN1":
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // cruise control distance
+                    }
                     break;
                 case "JN2":
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // excessive idling time
+                    }
                     break;
                 case "JN3":
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // excessive idling fuel
+                    }
                     break;
                 case "JN4":
+                    if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // pto time
+                    }
                     break;
                 case "JN5":
+                     if (buf.readableBytes() >= 4) {
                         buf.readUnsignedInt(); // pto fuel
+                    }
                     break;
                 default:
+                     // Optional: Log unknown key if necessary
+                     // Log.warning("Unknown custom data key: " + key);
                     break;
             }
         }
 
+        // Check if critical cell info fields were successfully populated before creating Network object
         if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
-            && cellTower.getCellId() != null && cellTower.getCellId() != 0
+            && cellTower.getCellId() != null && cellTower.getCellId() != 0 && !cellTower.getCellId().equals(Long.MAX_VALUE) // Check for potentially invalid large Cell IDs
             && cellTower.getLocationAreaCode() != null) {
             position.setNetwork(new Network(cellTower));
         } else if (cellTower.getSignalStrength() != null) {
+            // Fallback to setting RSSI if full network info isn't available but signal strength is
             position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
         }
     }
+
+    // Define or ensure the existence of readString helper method
+    // Example placeholder (actual implementation might differ):
+    private String readString(ByteBuf buf) {
+        int length = buf.bytesBefore((byte) 0);
+        if (length < 0 && buf.readableBytes() > 0) {
+            // Handle case where null terminator is missing or at the very end
+            length = buf.readableBytes(); 
+            String s = buf.readCharSequence(length, java.nio.charset.StandardCharsets.US_ASCII).toString();
+            // No null terminator to skip
+             return s;
+        } else if (length >= 0 && buf.readableBytes() >= length + 1) {
+            String s = buf.readCharSequence(length, java.nio.charset.StandardCharsets.US_ASCII).toString();
+            buf.skipBytes(1); // Skip the null terminator
+            return s;
+        } else {
+             // Not enough bytes for string or terminator, or empty buffer
+             if (length == 0 && buf.readableBytes() > 0 && buf.getByte(buf.readerIndex()) == 0) {
+                 buf.skipBytes(1); // Consume the null byte for an empty string
+             }
+             return ""; // Return empty string if unterminated/unreadable
+        }
+    }
+
+    // Define or ensure the existence of UnitsConverter helper class/method
+    // Example placeholder:
+    private static class UnitsConverter {
+        public static double metersFromMiles(long miles) {
+            return miles * 1609.34;
+        }
+    }
+
+    // Define or ensure the existence of Position class constants/methods
+    // Example placeholders:
+    private static class Position {
+        public static final String KEY_SATELLITES = "sat";
+        public static final String KEY_POWER = "power";
+        public static final String KEY_BATTERY = "batteryLevel"; // Example, adjust if needed
+        public static final String KEY_RPM = "rpm";
+        public static final String KEY_RSSI = "rssi";
+        public static final String KEY_ARCHIVE = "archive";
+        public static final String KEY_VIN = "vin";
+        public static final String KEY_THROTTLE = "throttle";
+        public static final String KEY_FUEL_LEVEL = "fuelLevel";
+        public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption";
+        public static final String KEY_ICCID = "iccid";
+        public static final String KEY_ODOMETER = "odometer";
+        public static final String KEY_HOURS = "hours";
+        public static final String KEY_OBD_SPEED = "obdSpeed";
+        public static final String KEY_ENGINE_LOAD = "engineLoad";
+        public static final String KEY_COOLANT_TEMP = "coolantTemp";
+        public static final String KEY_ODOMETER_SERVICE = "serviceOdometer";
+        public static final String KEY_FUEL_USED = "fuelUsed";
+        public static final String PREFIX_COUNT = "count";
+        public static final String PREFIX_TEMP = "temp";
+        public static final String PREFIX_ADC = "adc";
+
+        public void set(String key, Object value) {/*...*/}
+        public void setAltitude(double altitude) {/*...*/}
+        public void setNetwork(Network network) {/*...*/}
+    }
+
+    // Define or ensure the existence of CellTower and Network classes
+    // Example placeholders:
+    private static class CellTower {
+        private Integer signalStrength;
+        private Long cellId;
+        private Integer locationAreaCode;
+        private Integer mobileCountryCode;
+        private Integer mobileNetworkCode;
+
+        public void setSignalStrength(Integer signalStrength) { this.signalStrength = signalStrength; }
+        public Integer getSignalStrength() { return signalStrength; }
+        public void setCellId(Long cellId) { this.cellId = cellId; }
+        public Long getCellId() { return cellId; }
+        public void setLocationAreaCode(Integer locationAreaCode) { this.locationAreaCode = locationAreaCode; }
+        public Integer getLocationAreaCode() { return locationAreaCode; }
+        public void setMobileCountryCode(Integer mobileCountryCode) { this.mobileCountryCode = mobileCountryCode; }
+        public Integer getMobileCountryCode() { return mobileCountryCode; }
+        public void setMobileNetworkCode(Integer mobileNetworkCode) { this.mobileNetworkCode = mobileNetworkCode; }
+        public Integer getMobileNetworkCode() { return mobileNetworkCode; }
+    }
+
+    private static class Network {
+        public Network(CellTower cellTower) {/*...*/}
+    }
