diff --git a/tmp/14b431fb-bddf-4995-a141-1729fe879a3e_buggy.java b/tmp/a57c67d1-64f7-4cce-ba8f-26dd2c6dad00_fixed.java
index fb15c85..aa5fd31 100644
--- a/tmp/14b431fb-bddf-4995-a141-1729fe879a3e_buggy.java
+++ b/tmp/a57c67d1-64f7-4cce-ba8f-26dd2c6dad00_fixed.java
@@ -1,311 +1,424 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
+        // Basic check for form validity
+        if (form == null || form.length() < 2 || !form.startsWith("%")) {
+            // Log error about invalid form string or handle appropriately
+            return; // Cannot process without a valid form string
+        }
         String[] keys = form.substring(1).split("%");
+
         for (String key : keys) {
             switch (key) {
                 case "SA":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case "MV":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case "BV":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     break;
                 case "GQ":
+                    if (buf.readableBytes() < 1) { return; }
                     cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     break;
                 case "CE":
+                    if (buf.readableBytes() < 4) { return; }
                     cellTower.setCellId(buf.readUnsignedInt());
                     break;
                 case "LC":
+                    if (buf.readableBytes() < 2) { return; }
                     cellTower.setLocationAreaCode(buf.readUnsignedShort());
                     break;
                 case "CN":
+                    if (buf.readableBytes() < 4) { return; }
                     int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                     cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                     cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
                     break;
                 case "RL":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // rxlev
                     break;
                 case "PC":
+                    if (buf.readableBytes() < 4) { return; }
                     position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
                     break;
                 case "AT":
+                    if (buf.readableBytes() < 4) { return; }
                     position.setAltitude(buf.readUnsignedInt());
                     break;
                 case "RP":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     break;
                 case "GS":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case "DT":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
                     break;
                 case "VN":
+                    try {
                         position.set(Position.KEY_VIN, readString(buf));
+                    } catch (Exception e) { return; } // Handle potential errors from readString
                     break;
                 case "MF":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // mass air flow rate
                     break;
                 case "EL":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // engine load
                     break;
                 case "TR":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case "ET":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
                     break;
                 case "FL":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case "ML":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // mil status
                     break;
                 case "FC":
+                    if (buf.readableBytes() < 4) { return; }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case "CI":
+                    try {
                         readString(buf); // format string
+                    } catch (Exception e) { return; }
                     break;
                 case "AV1":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     break;
                 case "NC":
+                    try {
                         readString(buf); // gsm neighbor cell info
+                    } catch (Exception e) { return; }
                     break;
                 case "SM":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // max speed between reports
                     break;
                 case "GL":
+                     try {
                         readString(buf); // google link
+                    } catch (Exception e) { return; }
                     break;
                 case "MA":
+                     try {
                         readString(buf); // mac address
+                    } catch (Exception e) { return; }
                     break;
                 case "PD":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // pending code status
                     break;
                 case "CD":
+                     try {
                         position.set(Position.KEY_ICCID, readString(buf));
+                    } catch (Exception e) { return; }
                     break;
                 case "CM":
+                    if (buf.readableBytes() < 8) { return; }
                     buf.readLong(); // imsi
                     break;
                 case "GN":
+                    if (buf.readableBytes() < 60) { return; }
                     buf.skipBytes(60); // g sensor data
                     break;
                 case "GV":
+                    if (buf.readableBytes() < 6) { return; }
                     buf.skipBytes(6); // maximum g force
                     break;
                 case "ME":
+                    if (buf.readableBytes() < 8) { return; }
                     buf.readLong(); // imei
                     break;
                 case "IA":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // intake air temperature
                     break;
                 case "MP":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // manifold absolute pressure
                     break;
                 case "EO":
+                    if (buf.readableBytes() < 4) { return; }
                     position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));
                     break;
                 case "EH":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);
+                    if (buf.readableBytes() < 4) { return; }
+                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000L); // Use L suffix
                     break;
                 case "ZO1":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // brake stroke status
                     break;
                 case "ZO2":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // warning indicator status
                     break;
                 case "ZO3":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // abs control status
                     break;
                 case "ZO4":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);
                     break;
                 case "ZO5":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // parking brake status
                     break;
                 case "ZO6":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);
                     break;
                 case "ZO7":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // cruise control status
                     break;
                 case "ZO8":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // accelector pedal position
                     break;
                 case "ZO9":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);
                     break;
                 case "ZO10":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);
                     break;
                 case "ZO11":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // engine oil pressure
                     break;
                 case "ZO12":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // boost pressure
                     break;
                 case "ZO13":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // intake temperature
                     break;
                 case "ZO14":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());
                     break;
                 case "ZO15":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // brake application pressure
                     break;
                 case "ZO16":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // brake primary pressure
                     break;
                 case "ZO17":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // brake secondary pressure
                     break;
                 case "ZH1":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // cargo weight
                     break;
                 case "ZH2":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);
                     break;
                 case "ZH3":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);
                     break;
                 case "ZL1":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // fuel used (natural gas)
                     break;
                 case "ZL2":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);
+                    if (buf.readableBytes() < 4) { return; }
+                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161L); // Use L suffix
                     break;
                 case "ZL3":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // vehicle hours
                     break;
                 case "ZL4":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() < 4) { return; }
+                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L); // Use L suffix
                     break;
                 case "ZS1":
+                    try {
                         position.set(Position.KEY_VIN, readString(buf));
+                    } catch (Exception e) { return; }
                     break;
                 case "JO1":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // pedals
                     break;
                 case "JO2":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // power takeoff device
                     break;
                 case "JO3":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // accelector pedal position
                     break;
                 case "JO4":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());
                     break;
                 case "JO5":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     break;
                 case "JO6":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // fms vehicle interface
                     break;
                 case "JO7":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // driver 2
                     break;
                 case "JO8":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // driver 1
                     break;
                 case "JO9":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // drivers
                     break;
                 case "JO10":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // system information
                     break;
                 case "JO11":
+                    if (buf.readableBytes() < 1) { return; }
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                     break;
                 case "JO12":
+                    if (buf.readableBytes() < 1) { return; }
                     buf.readUnsignedByte(); // pto engaged
                     break;
                 case "JH1":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
                     break;
                 case "JH2":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
                     break;
                 case "JH3":
                 case "JH4":
                 case "JH5":
                 case "JH6":
                 case "JH7":
+                    if (buf.readableBytes() < 2) { return; }
                     int index = Integer.parseInt(key.substring(2)) - 2;
                     position.set("axleWeight" + index, buf.readUnsignedShort() * 0.5);
                     break;
                 case "JH8":
-                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);
+                    if (buf.readableBytes() < 2) { return; }
+                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5L); // Use L suffix
                     break;
                 case "JH9":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // tachograph speed
                     break;
                 case "JH10":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // ambient air temperature
                     break;
                 case "JH11":
+                    if (buf.readableBytes() < 2) { return; }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);
                     break;
                 case "JH12":
+                    if (buf.readableBytes() < 2) { return; }
                     buf.readUnsignedShort(); // fuel economy
                     break;
                 case "JL1":
+                    if (buf.readableBytes() < 4) { return; }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);
                     break;
                 case "JL2":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() < 4) { return; }
+                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5L * 36000L); // Use L suffix
                     break;
                 case "JL3":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
+                    if (buf.readableBytes() < 4) { return; }
+                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L); // Use L suffix
                     break;
                 case "JL4":
+                    if (buf.readableBytes() < 4) { return; }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
                     break;
                 case "JS1":
+                    try {
                         position.set(Position.KEY_VIN, readString(buf));
+                    } catch (Exception e) { return; }
                     break;
                 case "JS2":
+                     try {
                         readString(buf); // fms version supported
+                    } catch (Exception e) { return; }
                     break;
                 case "JS3":
+                    try {
                         position.set("driver1", readString(buf));
+                    } catch (Exception e) { return; }
                     break;
                 case "JS4":
+                    try {
                         position.set("driver2", readString(buf));
+                    } catch (Exception e) { return; }
                     break;
                 case "JN1":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // cruise control distance
                     break;
                 case "JN2":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // excessive idling time
                     break;
                 case "JN3":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // excessive idling fuel
                     break;
                 case "JN4":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // pto time
                     break;
                 case "JN5":
+                    if (buf.readableBytes() < 4) { return; }
                     buf.readUnsignedInt(); // pto fuel
                     break;
                 default:
+                    // Unknown key: Log? Ignore? Current behavior is ignore.
                     break;
             }
         }
 
         if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
             && cellTower.getCellId() != null && cellTower.getCellId() != 0
             && cellTower.getLocationAreaCode() != null) {
             position.setNetwork(new Network(cellTower));
         } else if (cellTower.getSignalStrength() != null) {
             position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
         }
     }
\ No newline at end of file
