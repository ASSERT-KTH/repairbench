diff --git a/tmp/800cc058-3348-4429-8d0b-b55458900f79_buggy.java b/tmp/ed2bc4cc-3487-4719-858e-b8587e974576_fixed.java
index fb15c85..ea7e11b 100644
--- a/tmp/800cc058-3348-4429-8d0b-b55458900f79_buggy.java
+++ b/tmp/ed2bc4cc-3487-4719-858e-b8587e974576_fixed.java
@@ -1,311 +1,422 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Check buffer readable bytes before reading. Optional but good practice.
+            // Example: if (!buf.isReadable()) break;
             switch (key) {
                 case "SA":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case "MV":
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.1); // Assuming Little Endian based on typical GPS devices
+                    }
                     break;
                 case "BV":
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.1); // Assuming Little Endian
+                    }
                     break;
                 case "GQ":
+                    if (buf.isReadable()) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
+                    }
                     break;
                 case "CE":
-                    cellTower.setCellId(buf.readUnsignedInt());
+                    if (buf.readableBytes() >= 4) {
+                        cellTower.setCellId(buf.readUnsignedIntLE()); // Assuming Little Endian
+                    }
                     break;
                 case "LC":
-                    cellTower.setLocationAreaCode(buf.readUnsignedShort());
+                    if (buf.readableBytes() >= 2) {
+                        cellTower.setLocationAreaCode(buf.readUnsignedShortLE()); // Assuming Little Endian
+                    }
                     break;
                 case "CN":
-                    int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
+                    if (buf.readableBytes() >= 4) {
+                        int combinedMobileCodes = (int) (buf.readUnsignedIntLE() % 100000); // cccnn, Assuming Little Endian
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
-                    position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedIntLE()); // Assuming Little Endian
+                    }
                     break;
                 case "AT":
-                    position.setAltitude(buf.readUnsignedInt());
+                    if (buf.readableBytes() >= 4) {
+                        position.setAltitude(buf.readUnsignedIntLE()); // Assuming Little Endian
+                    }
                     break;
                 case "RP":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE()); // Assuming Little Endian
+                    }
                     break;
                 case "GS":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case "DT":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
+                    }
                     break;
                 case "VN":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
-                    buf.readUnsignedShort(); // mass air flow rate
+                    if (buf.readableBytes() >= 2) {
+                        buf.readUnsignedShortLE(); // mass air flow rate // Assuming Little Endian
+                    }
                     break;
                 case "EL":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    }
                     break;
                 case "ET":
-                    position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE()); // Assuming Little Endian
+                    }
                     break;
                 case "FL":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case "ML":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE()); // Assuming Little Endian
+                    }
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    // This key likely indicates the presence/format of custom data
+                    // but doesn't correspond to data to be read from the buffer itself.
+                    // Reading a string here caused buffer desynchronization.
+                    // readString(buf); // format string - Removed Fix
                     break;
                 case "AV1":
-                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE()); // Assuming Little Endian
+                    }
                     break;
                 case "NC":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
-                    buf.readUnsignedShort(); // max speed between reports
+                    if (buf.readableBytes() >= 2) {
+                        buf.readUnsignedShortLE(); // max speed between reports // Assuming Little Endian
+                    }
                     break;
                 case "GL":
-                    readString(buf); // google link
-                    break;
                 case "MA":
-                    readString(buf); // mac address
+                    // Assuming readString handles buffer checks internally or need try-catch
+                    readString(buf); // google link or mac address
                     break;
                 case "PD":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
-                    buf.readLong(); // imsi
+                    if (buf.readableBytes() >= 8) {
+                        buf.readLongLE(); // imsi // Assuming Little Endian
+                    }
                     break;
                 case "GN":
-                    buf.skipBytes(60); // g sensor data
+                    buf.skipBytes(Math.min(60, buf.readableBytes())); // g sensor data
                     break;
                 case "GV":
-                    buf.skipBytes(6); // maximum g force
+                    buf.skipBytes(Math.min(6, buf.readableBytes())); // maximum g force
                     break;
                 case "ME":
-                    buf.readLong(); // imei
+                    if (buf.readableBytes() >= 8) {
+                        buf.readLongLE(); // imei // Assuming Little Endian
+                    }
                     break;
                 case "IA":
-                    buf.readUnsignedByte(); // intake air temperature
-                    break;
                 case "MP":
-                    buf.readUnsignedByte(); // manifold absolute pressure
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // intake air temperature or manifold absolute pressure
+                    }
                     break;
                 case "EO":
-                    position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedInt()));
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_ODOMETER, UnitsConverter.metersFromMiles(buf.readUnsignedIntLE())); // Assuming Little Endian
+                    }
                     break;
                 case "EH":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 360000);
+                    if (buf.readableBytes() >= 4) {
+                        // Original code multiplied by 360000 (0.1 hours to ms)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 360_000L); // Assuming Little Endian
+                    }
                     break;
                 case "ZO1":
-                    buf.readUnsignedByte(); // brake stroke status
-                    break;
                 case "ZO2":
-                    buf.readUnsignedByte(); // warning indicator status
-                    break;
                 case "ZO3":
-                    buf.readUnsignedByte(); // abs control status
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // brake stroke, warning indicator, abs control status
+                    }
                     break;
                 case "ZO4":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 0.4);
+                    }
                     break;
                 case "ZO5":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // parking brake status
+                    }
                     break;
                 case "ZO6":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte() * 0.805);
+                    }
                     break;
                 case "ZO7":
-                    buf.readUnsignedByte(); // cruise control status
-                    break;
                 case "ZO8":
-                    buf.readUnsignedByte(); // accelector pedal position
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // cruise control status or accelerator pedal position
+                    }
                     break;
                 case "ZO9":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 0.5);
+                    }
                     break;
                 case "ZO10":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.5);
+                    }
                     break;
                 case "ZO11":
-                    buf.readUnsignedByte(); // engine oil pressure
-                    break;
                 case "ZO12":
-                    buf.readUnsignedByte(); // boost pressure
-                    break;
                 case "ZO13":
-                    buf.readUnsignedByte(); // intake temperature
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // engine oil pressure, boost pressure, intake temperature
+                    }
                     break;
                 case "ZO14":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte());
+                    if (buf.isReadable()) {
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte()); // Note: J1939 PGN 65262 uses -40 offset
+                    }
                     break;
                 case "ZO15":
-                    buf.readUnsignedByte(); // brake application pressure
-                    break;
                 case "ZO16":
-                    buf.readUnsignedByte(); // brake primary pressure
-                    break;
                 case "ZO17":
-                    buf.readUnsignedByte(); // brake secondary pressure
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // brake application/primary/secondary pressure
+                    }
                     break;
                 case "ZH1":
-                    buf.readUnsignedShort(); // cargo weight
+                    if (buf.readableBytes() >= 2) {
+                        buf.readUnsignedShortLE(); // cargo weight // Assuming Little Endian
+                    }
                     break;
                 case "ZH2":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 16.428 / 3600);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 16.428 / 3600); // Assuming Little Endian
+                    }
                     break;
                 case "ZH3":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.25);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.25); // Assuming Little Endian
+                    }
                     break;
                 case "ZL1":
-                    buf.readUnsignedInt(); // fuel used (natural gas)
+                    if (buf.readableBytes() >= 4) {
+                        buf.readUnsignedIntLE(); // fuel used (natural gas) // Assuming Little Endian
+                    }
                     break;
                 case "ZL2":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 161);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 161L); // Assuming Little Endian
+                    }
                     break;
                 case "ZL3":
-                    buf.readUnsignedInt(); // vehicle hours
+                    if (buf.readableBytes() >= 4) {
+                        buf.readUnsignedIntLE(); // vehicle hours // Assuming Little Endian
+                    }
                     break;
                 case "ZL4":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() >= 4) {
+                        // Original code: 5 * 36000 = 180000 (0.05 hours to ms?)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 180_000L); // Assuming Little Endian
+                    }
                     break;
                 case "ZS1":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JO1":
-                    buf.readUnsignedByte(); // pedals
-                    break;
                 case "JO2":
-                    buf.readUnsignedByte(); // power takeoff device
-                    break;
                 case "JO3":
-                    buf.readUnsignedByte(); // accelector pedal position
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // pedals, power takeoff device, accelerator pedal position
+                    }
                     break;
                 case "JO4":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte());
+                    }
                     break;
                 case "JO5":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                    }
                     break;
                 case "JO6":
-                    buf.readUnsignedByte(); // fms vehicle interface
-                    break;
                 case "JO7":
-                    buf.readUnsignedByte(); // driver 2
-                    break;
                 case "JO8":
-                    buf.readUnsignedByte(); // driver 1
-                    break;
                 case "JO9":
-                    buf.readUnsignedByte(); // drivers
-                    break;
                 case "JO10":
-                    buf.readUnsignedByte(); // system information
+                    if (buf.isReadable()) {
+                        buf.readUnsignedByte(); // fms vehicle interface, drivers, system info
+                    }
                     break;
                 case "JO11":
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
+                    if (buf.isReadable()) {
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40); // J1939 PGN 65262 offset
+                    }
                     break;
                 case "JO12":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // pto engaged
+                    }
                     break;
                 case "JH1":
-                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE() / 256.0); // Assuming Little Endian
+                    }
                     break;
                 case "JH2":
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.125); // Assuming Little Endian
+                    }
                     break;
                 case "JH3":
                 case "JH4":
                 case "JH5":
                 case "JH6":
                 case "JH7":
-                    int index = Integer.parseInt(key.substring(2)) - 2;
-                    position.set("axleWeight" + index, buf.readUnsignedShort() * 0.5);
+                    if (buf.readableBytes() >= 2) {
+                        int index = Integer.parseInt(key.substring(2)) - 2; // Check key length first?
+                        position.set("axleWeight" + index, buf.readUnsignedShortLE() * 0.5); // Assuming Little Endian
+                    }
                     break;
                 case "JH8":
-                    position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShort() * 5);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_ODOMETER_SERVICE, buf.readUnsignedShortLE() * 5L); // Assuming Little Endian
+                    }
                     break;
                 case "JH9":
-                    buf.readUnsignedShort(); // tachograph speed
-                    break;
                 case "JH10":
-                    buf.readUnsignedShort(); // ambient air temperature
+                    if (buf.readableBytes() >= 2) {
+                        buf.readUnsignedShortLE(); // tachograph speed or ambient air temperature // Assuming Little Endian
+                    }
                     break;
                 case "JH11":
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.05);
+                    if (buf.readableBytes() >= 2) {
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.05); // Assuming Little Endian
+                    }
                     break;
                 case "JH12":
-                    buf.readUnsignedShort(); // fuel economy
+                    if (buf.readableBytes() >= 2) {
+                        buf.readUnsignedShortLE(); // fuel economy // Assuming Little Endian
+                    }
                     break;
                 case "JL1":
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.5);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.5); // Assuming Little Endian
+                    }
                     break;
                 case "JL2":
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 5 * 36000);
+                    if (buf.readableBytes() >= 4) {
+                        // Same as ZL4: 5 * 36000 = 180000 (0.05 hours to ms?)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 180_000L); // Assuming Little Endian
+                    }
                     break;
                 case "JL3":
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 1000L); // Assuming Little Endian
+                    }
                     break;
                 case "JL4":
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
+                    if (buf.readableBytes() >= 4) {
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Assuming Little Endian
+                    }
                     break;
                 case "JS1":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "JS2":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     readString(buf); // fms version supported
                     break;
                 case "JS3":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set("driver1", readString(buf));
                     break;
                 case "JS4":
+                    // Assuming readString handles buffer checks internally or need try-catch
                     position.set("driver2", readString(buf));
                     break;
                 case "JN1":
-                    buf.readUnsignedInt(); // cruise control distance
-                    break;
                 case "JN2":
-                    buf.readUnsignedInt(); // excessive idling time
-                    break;
                 case "JN3":
-                    buf.readUnsignedInt(); // excessive idling fuel
-                    break;
                 case "JN4":
-                    buf.readUnsignedInt(); // pto time
-                    break;
                 case "JN5":
-                    buf.readUnsignedInt(); // pto fuel
+                    if (buf.readableBytes() >= 4) {
+                        buf.readUnsignedIntLE(); // cruise control distance, idling time/fuel, pto time/fuel // Assuming Little Endian
+                    }
                     break;
                 default:
+                    // Log unknown key? Or ignore?
+                    // Log.warning("Unknown custom data key: " + key);
                     break;
             }
+            // Optional: break loop if buffer becomes unreadable
+            // if (!buf.isReadable()) { break; }
         }
 
+        // Check CellTower data validity before creating Network object
         if (cellTower.getMobileCountryCode() != null
                 && cellTower.getMobileNetworkCode() != null
-            && cellTower.getCellId() != null && cellTower.getCellId() != 0
-            && cellTower.getLocationAreaCode() != null) {
+                && cellTower.getCellId() != null && cellTower.getCellId() != 0 && cellTower.getCellId() != -1 // Consider other invalid IDs?
+                && cellTower.getLocationAreaCode() != null && cellTower.getLocationAreaCode() != 0 && cellTower.getLocationAreaCode() != -1) { // Consider other invalid LACs?
             position.setNetwork(new Network(cellTower));
-        } else if (cellTower.getSignalStrength() != null) {
+        } else if (cellTower.getSignalStrength() != null && cellTower.getSignalStrength() != 0) { // Don't overwrite valid GS with invalid GQ
+            // Only set RSSI from cell tower if Network wasn't set and signal strength is valid
+            if (position.getNetwork() == null) {
                 position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
             }
         }
+    }
\ No newline at end of file
