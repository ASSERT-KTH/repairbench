diff --git a/tmp/94196860-73e3-4ab5-9bbd-398701d0d4ff_buggy.java b/tmp/a6e287fe-7ddc-4922-9564-7f90c81a7270_fixed.java
index 712f277..2ffdd7a 100644
--- a/tmp/94196860-73e3-4ab5-9bbd-398701d0d4ff_buggy.java
+++ b/tmp/a6e287fe-7ddc-4922-9564-7f90c81a7270_fixed.java
@@ -1,48 +1,122 @@
+import java.io.IOException;
+import java.util.Arrays; // Added for potentially needed helper calls, though not strictly part of the fix itself.
+import java.util.List; // Added for potentially needed helper calls.
+
+// NOTE: The following constants and the helper render method are assumed to exist
+// in the context where the original buggy function resides. They are included here
+// for completeness and to make the fixed function compilable stand-alone for testing.
+// In the actual repair, only the `render(String, Appendable)` method body needs replacement.
+class AnsiRenderer { // Assuming the class context
+
+    private static final String BEGIN_TOKEN = "@|";
+    private static final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();
+    private static final String END_TOKEN = "|@";
+    private static final int END_TOKEN_LEN = END_TOKEN.length();
+    private static final String CODE_TEXT_SEPARATOR = " ";
+    private static final String CODE_LIST_SEPARATOR = ",";
+
+    // Assumed helper method (likely exists elsewhere in the original class)
+    // This implementation is a placeholder.
+    public static String render(final String text, final String... codes) {
+        // Real implementation would generate ANSI escape codes based on 'codes' applied to 'text'.
+        // Example: return "\u001b[" + String.join(";", codes) + "m" + text + "\u001b[0m";
+        return "RENDERED[" + String.join(",", Arrays.asList(codes)) + "]" + text + "[/RENDERED]";
+    }
+
+
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input string has an invalid format (e.g., END_TOKEN before content)
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
-        int i = 0;
-        int j, k;
+        int i = 0; // Current position in the input string
+        int j, k; // Indices for BEGIN_TOKEN and END_TOKEN
 
         while (true) {
+            // Find the next BEGIN_TOKEN starting from position i
             j = input.indexOf(BEGIN_TOKEN, i);
+
+            // If no more BEGIN_TOKEN found...
             if (j == -1) {
                 if (i == 0) {
+                    // If no BEGIN_TOKEN was found at all in the input
                     target.append(input);
-                    return target;
-                }
+                } else {
+                    // Append the remaining part of the string after the last processed token
                     target.append(input.substring(i));
-                return target;
                 }
+                return target; // Processing finished
+            }
+
+            // Append the text segment before the found BEGIN_TOKEN
             target.append(input.substring(i, j));
+
+            // Find the END_TOKEN starting from the position of BEGIN_TOKEN.
+            // Searching from j handles cases where END_TOKEN might appear early.
             k = input.indexOf(END_TOKEN, j);
 
+            // If no matching END_TOKEN found after the BEGIN_TOKEN...
             if (k == -1) {
+                // Original behavior: Append the entire input and return. This seems questionable
+                // but is preserved unless other tests require changing it.
                 target.append(input);
                 return target;
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Calculate the expected start position of the content within the tokens
+            int contentStart = j + BEGIN_TOKEN_LEN;
+
+            // Check if the END_TOKEN appears *before* the content should start.
+            // This handles invalid sequences like "@|@" where END_TOKEN is at index 1,
+            // but content should start at index 2.
+            if (k < contentStart) {
+                throw new IllegalArgumentException(
+                    "Invalid input: END_TOKEN found at index " + k +
+                    " before calculated content start index " + contentStart);
+            }
+
+            // Extract the specification string between BEGIN_TOKEN and END_TOKEN
+            String spec = input.substring(contentStart, k);
+
+            // Split the specification into codes and text using CODE_TEXT_SEPARATOR (e.g., " ")
+            // Limited to 2 parts to separate codes from the text that follows.
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
+
+            // If the split doesn't result in two parts (codes and text)...
             if (items.length == 1) {
+                // Original behavior: Append the entire input and return. This seems questionable
+                // for a malformed spec like "@|bold|@" (missing text part) but is preserved.
                 target.append(input);
                 return target;
             }
-            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Extract codes (comma-separated) and the text to be styled
+            String codes = items[0];
+            String text = items[1];
+
+            // Split the codes string by CODE_LIST_SEPARATOR (e.g., ",")
+            String[] codeList = codes.split(CODE_LIST_SEPARATOR);
+
+            // Call the helper render method to get the ANSI-styled text
+            // This assumes a helper like `public static String render(String text, String... codes)` exists.
+            String replacement = render(text, codeList);
+
+            // Append the rendered (styled) text to the target
             target.append(replacement);
 
+            // Update the current position `i` to be after the processed END_TOKEN
             i = k + END_TOKEN_LEN;
         }
+        // The loop only terminates via return statements inside the loop.
+    }
 }
\ No newline at end of file
