diff --git a/tmp/3b8fb55e-9029-4697-a7dc-55f550a3725f_buggy.java b/tmp/eb5b0765-f015-4b45-8bad-a3bafe42cf7b_fixed.java
index 712f277..508c062 100644
--- a/tmp/3b8fb55e-9029-4697-a7dc-55f550a3725f_buggy.java
+++ b/tmp/eb5b0765-f015-4b45-8bad-a3bafe42cf7b_fixed.java
@@ -1,48 +1,101 @@
+import java.io.IOException;
+
+// NOTE: This code assumes the existence of the following constants and methods,
+//       which are expected to be defined elsewhere in the surrounding class:
+//       - String BEGIN_TOKEN;     (e.g., "@|")
+//       - String END_TOKEN;       (e.g., "|@")
+//       - int BEGIN_TOKEN_LEN;    (e.g., BEGIN_TOKEN.length())
+//       - int END_TOKEN_LEN;      (e.g., END_TOKEN.length())
+//       - String CODE_TEXT_SEPARATOR; (e.g., " ")
+//       - String CODE_LIST_SEPARATOR; (e.g., ",")
+//       - String render(String text, String... codes); // The helper render method
+
+public class AnsiRenderer { // Added dummy class for context
+
+    // Dummy constants and method for compilation and illustration
+    private static final String BEGIN_TOKEN = "@|";
+    private static final String END_TOKEN = "|@";
+    private static final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();
+    private static final int END_TOKEN_LEN = END_TOKEN.length();
+    private static final String CODE_TEXT_SEPARATOR = " ";
+    private static final String CODE_LIST_SEPARATOR = ",";
+
+    private static String render(String text, String... codes) {
+        // Dummy implementation
+        return "[" + String.join(",", codes) + "]" + text + "[reset]";
+    }
+
+
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             if the input string has an invalid syntax.
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more tokens found, append the rest of the string
                 if (i == 0) {
+                    // If no tokens were found in the entire string
                     target.append(input);
-                    return target;
-                }
+                } else {
+                    // Append the remaining part after the last token
                     target.append(input.substring(i));
+                }
                 return target;
             }
+
+            // Append text before the token
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+            // Calculate the start position for the spec, right after the begin token
+            int specStart = j + BEGIN_TOKEN_LEN;
+
+            // Find the end token, searching *after* the begin token.
+            // This prevents finding an END_TOKEN that overlaps or precedes the spec start.
+            k = input.indexOf(END_TOKEN, specStart);
+
+            // Check if the end token was found
             if (k == -1) {
-                target.append(input);
-                return target;
+                // Unclosed token error
+                throw new IllegalArgumentException("Unclosed ANSI Renderer tag starting at index " + j);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Extract the spec between the tokens
+            String spec = input.substring(specStart, k);
+
+            // Split the spec into codes and text based on the first separator
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length < 2) {
+                 // Malformed token error: The spec must contain at least one separator
+                 // to distinguish codes from the text to be rendered.
+                 // Examples of malformed specs: "", "bold", " " (if separator is space)
+                throw new IllegalArgumentException("Malformed ANSI Renderer tag '"
+                        + spec + "' at index " + j + ": Missing separator '" + CODE_TEXT_SEPARATOR + "' separating codes from text.");
             }
+
+            // Render the replacement text with ANSI codes
+            // items[0] contains the codes (possibly empty), items[1] contains the text.
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered replacement
             target.append(replacement);
 
+            // Update the starting position for the next search, ensuring it's after the end token
             i = k + END_TOKEN_LEN;
         }
     }
+}
\ No newline at end of file
