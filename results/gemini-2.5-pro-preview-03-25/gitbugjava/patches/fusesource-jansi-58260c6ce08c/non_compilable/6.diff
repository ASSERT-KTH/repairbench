diff --git a/tmp/e15c013e-edb2-4b30-bf53-65d212b16ead_buggy.java b/tmp/5f1cc3fd-a524-4492-a931-e2bd68efd378_fixed.java
index 712f277..45a6046 100644
--- a/tmp/e15c013e-edb2-4b30-bf53-65d212b16ead_buggy.java
+++ b/tmp/5f1cc3fd-a524-4492-a931-e2bd68efd378_fixed.java
@@ -1,48 +1,95 @@
+import java.io.IOException;
+import static org.fusesource.jansi.AnsiRenderer.*; // Assuming constants are defined here
+
 /**
  * Renders the given input to the target Appendable.
  *
  * @param input
  *            source to render
  * @param target
  *            render onto this target Appendable.
  * @return the given Appendable
  * @throws IOException
  *             If an I/O error occurs
+ * @throws IllegalArgumentException
+ *             If the input string has invalid markup
  */
 public static Appendable render(final String input, Appendable target) throws IOException {
 
     int i = 0;
     int j, k;
 
     while (true) {
+        // Find the beginning of the next token
         j = input.indexOf(BEGIN_TOKEN, i);
+        // If no more tokens are found
         if (j == -1) {
+            // If we haven't processed anything yet (i == 0), the input has no tokens
             if (i == 0) {
                 target.append(input);
                 return target;
             }
+            // Append the remaining text after the last token
             target.append(input.substring(i));
             return target;
         }
+
+        // Append the text before the token
         target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
 
+        // Calculate the starting position for searching the end token, which is after the begin token
+        int specStart = j + BEGIN_TOKEN_LEN;
+
+        // Find the end of the token, starting the search *after* the begin token
+        k = input.indexOf(END_TOKEN, specStart);
+
+        // If the end token is not found after the start token, it's an error
         if (k == -1) {
-                target.append(input);
-                return target;
+            // The original code appended the entire input here, which was incorrect.
+            // Throw an exception for unterminated tokens.
+            throw new IllegalArgumentException("Unterminated ANSI markup token starting at index " + j + " in input: " + input);
         }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+        // Extract the specification between the tokens
+        String spec = input.substring(specStart, k);
+
+        // Parse the specification into codes and text
         String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+        // If the separator is missing, the spec is invalid
+        if (items.length < 2) {
+            // The original code appended the entire input here, which was incorrect.
+            // Throw an exception for invalid specification format.
+            throw new IllegalArgumentException("Invalid ANSI markup specification: '" + spec + "' (missing separator '" + CODE_TEXT_SEPARATOR + "') starting at index " + j + " in input: " + input);
         }
+
+        // Render the text with the specified codes (assuming a helper render method exists)
         String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+        // Append the rendered replacement text
         target.append(replacement);
 
+        // Advance the index past the end token for the next iteration
         i = k + END_TOKEN_LEN;
     }
 }
+
+// Dummy helper method signature assuming it exists elsewhere in the class or is imported.
+// This method is not part of the fix but needed for the provided code to compile conceptually.
+private static String render(final String text, final String... codes) {
+    // Implementation would apply ANSI codes to the text
+    // For the purpose of this fix, the implementation details are not required.
+    // Example placeholder:
+    StringBuilder sb = new StringBuilder();
+    // Append ANSI codes based on 'codes' array
+    sb.append(text);
+    // Append ANSI reset code
+    return sb.toString();
+}
+
+// Assume necessary constants are defined in the class or imported, e.g.:
+// private static final String BEGIN_TOKEN = "@|";
+// private static final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();
+// private static final String END_TOKEN = "|@";
+// private static final int END_TOKEN_LEN = END_TOKEN.length();
+// private static final String CODE_TEXT_SEPARATOR = " ";
+// private static final String CODE_LIST_SEPARATOR = ";";
