diff --git a/tmp/a014f4e5-bbb4-46aa-8fb5-e130a2ee8661_buggy.java b/tmp/f8858309-4c65-42e3-80c9-1c2436a9f0af_fixed.java
index 712f277..cda248b 100644
--- a/tmp/a014f4e5-bbb4-46aa-8fb5-e130a2ee8661_buggy.java
+++ b/tmp/f8858309-4c65-42e3-80c9-1c2436a9f0af_fixed.java
@@ -1,48 +1,81 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input string has invalid markup syntax
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
-        int i = 0;
-        int j, k;
+        int i = 0; // Current position in input string
+        int j, k; // Position of BEGIN_TOKEN and END_TOKEN
 
         while (true) {
+            // Find the next BEGIN_TOKEN
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
+                // No more BEGIN_TOKEN found, append the rest of the input
                 if (i == 0) {
+                    // If no token was ever found, append the whole input
                     target.append(input);
-                    return target;
-                }
+                } else {
+                    // Append the substring after the last processed token
                     target.append(input.substring(i));
-                return target;
                 }
+                return target; // Processing finished
+            }
+
+            // Append the literal text part before the BEGIN_TOKEN
             target.append(input.substring(i, j));
+
+            // Calculate where the spec content should start
+            int specStart = j + BEGIN_TOKEN_LEN;
+
+            // Find the END_TOKEN starting from the position of BEGIN_TOKEN
+            // This allows for cases like "@|@|", though they might be invalid depending on spec format.
             k = input.indexOf(END_TOKEN, j);
 
+            // Check if END_TOKEN was found
             if (k == -1) {
-                target.append(input);
-                return target;
+                // No matching END_TOKEN found after BEGIN_TOKEN
+                throw new IllegalArgumentException("Missing closing token '" + END_TOKEN + "' after opening token at index " + j);
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Check if the END_TOKEN appears logically after the BEGIN_TOKEN allowing for spec content.
+            // k must be >= specStart for a valid token sequence.
+            // Handles cases like "@|@" where END_TOKEN is found before BEGIN_TOKEN finishes.
+            if (k < specStart) {
+                 throw new IllegalArgumentException(
+                     "Invalid token sequence: closing token '" + END_TOKEN + "' at index " + k +
+                     " found before the end of the opening token '" + BEGIN_TOKEN + "' starting at index " + j);
+            }
+
+            // Extract the specification string between the tokens
+            String spec = input.substring(specStart, k);
+
+            // Process the specification
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            // Check if the spec format is valid (must contain the separator)
+            if (items.length != 2) {
+                throw new IllegalArgumentException(
+                    "Invalid specification format inside tokens: '" + spec + "' at index " + j +
+                    ". Expected format 'code(,code)*" + CODE_TEXT_SEPARATOR + "text'.");
             }
+
+            // Render the replacement text based on the codes and the text part
+            // Assumes a helper render(String text, String... codes) method exists
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered replacement
             target.append(replacement);
 
+            // Advance the current position past the processed token
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
