diff --git a/tmp/27441821-4fe3-4a25-b596-c4b1647e9dbc_buggy.java b/tmp/0e1a82f9-a31a-4fdc-80db-70fd835b53a9_fixed.java
index 712f277..40240b7 100644
--- a/tmp/27441821-4fe3-4a25-b596-c4b1647e9dbc_buggy.java
+++ b/tmp/0e1a82f9-a31a-4fdc-80db-70fd835b53a9_fixed.java
@@ -1,48 +1,75 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input contains invalid ANSI markup syntax
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
+            if (j == -1) { // No more BEGIN_TOKEN found
                 if (i == 0) {
+                    // No BEGIN_TOKEN was found in the entire string
                     target.append(input);
                     return target;
                 }
+                // Append the rest of the string after the last processed token
                 target.append(input.substring(i));
                 return target;
             }
+
+            // Append the text segment before the BEGIN_TOKEN
             target.append(input.substring(i, j));
-            k = input.indexOf(END_TOKEN, j);
+
+            // Calculate the starting position for the content within the token
+            // and the position to start searching for the END_TOKEN.
+            int contentStartIndex = j + BEGIN_TOKEN_LEN;
+
+            // Search for the END_TOKEN, starting *after* the BEGIN_TOKEN.
+            // This prevents finding the END_TOKEN overlapping or immediately after BEGIN_TOKEN (e.g., "@|@").
+            k = input.indexOf(END_TOKEN, contentStartIndex);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // No END_TOKEN found after the position where content should start; indicates an unclosed token.
+                throw new IllegalArgumentException("Unclosed ANSI markup token starting at index " + j);
+                // Original code appended the entire input string here and returned, which was incorrect
+                // and could lead to unexpected results or infinite loops depending on the input.
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Extract the specification string between BEGIN_TOKEN and END_TOKEN
+            String spec = input.substring(contentStartIndex, k);
+
+            // Parse the specification into codes and text parts
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+            if (items.length < 2) {
+                // The specification must have the format "codes<separator>text".
+                // This catches formats like "@|bold|@" (missing text), "@||@" (empty spec),
+                // or specs without the required separator.
+                throw new IllegalArgumentException(
+                        "Invalid ANSI markup specification format: '" + spec + "' starting at index " + j + ". Expected 'codes" + CODE_TEXT_SEPARATOR + "text'.");
+                // Original code checked only for items.length == 1 and appended the entire input string, which was incorrect.
             }
+
+            // Render the text part with the specified codes using the helper method.
+            // Assumes render(text, codes) exists and handles the ANSI code generation.
+            // Note: The static context implies render(String, String[]) might be a static helper in the same class or imported.
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered string (text potentially wrapped in ANSI codes)
             target.append(replacement);
 
+            // Advance the index past the processed END_TOKEN to continue searching
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
