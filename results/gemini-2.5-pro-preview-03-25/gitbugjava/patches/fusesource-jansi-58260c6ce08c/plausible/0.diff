diff --git a/tmp/8a5cc5ea-aa76-4e7d-9b76-3711547d99d7_buggy.java b/tmp/ff8b4d1f-21e9-44d2-8630-0c4a1d3c91d5_fixed.java
index 712f277..f5af6b7 100644
--- a/tmp/8a5cc5ea-aa76-4e7d-9b76-3711547d99d7_buggy.java
+++ b/tmp/ff8b4d1f-21e9-44d2-8630-0c4a1d3c91d5_fixed.java
@@ -1,48 +1,93 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             if the input contains invalid Ansi-Renderer syntax.
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
+        // Assume these constants are defined elsewhere in the class
+        // static final String BEGIN_TOKEN = "@|";
+        // static final String END_TOKEN = "|@";
+        // static final int BEGIN_TOKEN_LEN = BEGIN_TOKEN.length();
+        // static final int END_TOKEN_LEN = END_TOKEN.length();
+        // static final String CODE_TEXT_SEPARATOR = " ";
+        // static final String CODE_LIST_SEPARATOR = ",";
+        // static String render(String text, String... codes) throws IllegalArgumentException; // Helper
+
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
+            if (j == -1) { // No more BEGIN_TOKEN found
+                if (i == 0) { // Input had no tokens at all
                     target.append(input);
-                    return target;
-                }
+                } else { // Append the rest of the string after the last processed token
                     target.append(input.substring(i));
-                return target;
                 }
+                return target; // All done
+            }
+
+            // Append the literal text part before the BEGIN_TOKEN
             target.append(input.substring(i, j));
+
+            // Find the END_TOKEN, starting search from the position of BEGIN_TOKEN
+            // Using 'j' as the starting point for search, as in the original code
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // Unterminated token: Treat the BEGIN_TOKEN and subsequent text literally
+                // Append the remainder of the string starting from the BEGIN_TOKEN's position
+                target.append(input.substring(j));
+                return target; // No more processing possible
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
 
+            // Calculate the expected start index of the spec content (codes and text)
+            int specStart = j + BEGIN_TOKEN_LEN;
+
+            // Check for invalid markup: END_TOKEN occurs before the spec content could start
+            if (k < specStart) {
+                 throw new IllegalArgumentException(
+                         "Invalid Jansi markup syntax: END_TOKEN found at index " + k
+                         + " but expected minimum start index for content is " + specStart);
+            }
+
+            // Extract the specification string between BEGIN_TOKEN and END_TOKEN
+            String spec = input.substring(specStart, k);
+
+            // Split the spec into codes and text based on the separator
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
-            if (items.length == 1) {
-                target.append(input);
-                return target;
+
+            // Check if the spec is malformed (missing the separator or empty codes part)
+            if (items.length != 2 || items[0].isEmpty()) {
+                throw new IllegalArgumentException(
+                        "Invalid Jansi markup syntax: Malformed specification '" + spec
+                        + "' - expected format is 'code[,code...] text'");
+            }
+
+            String replacement;
+            try {
+                // Call the helper render method to process codes and text
+                // This assumes the helper 'render(String, String...)' exists and works correctly
+                replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
+            } catch (IllegalArgumentException e) {
+                // Catch potential errors from code lookup/processing in the helper render
+                // and wrap them in a more context-specific exception
+                throw new IllegalArgumentException("Invalid ANSI code specification '" + items[0] + "' in '" + spec + "': " + e.getMessage(), e);
             }
-            String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
+            // Append the rendered replacement text
             target.append(replacement);
 
+            // Continue searching for the next BEGIN_TOKEN after the current END_TOKEN
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
