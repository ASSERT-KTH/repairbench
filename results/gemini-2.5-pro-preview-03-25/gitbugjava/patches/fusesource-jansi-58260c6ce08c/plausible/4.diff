diff --git a/tmp/7e751231-ce3b-482b-a582-72e48c94972c_buggy.java b/tmp/06cbe336-5e28-4499-9163-30719d18404a_fixed.java
index 712f277..8342fa3 100644
--- a/tmp/7e751231-ce3b-482b-a582-72e48c94972c_buggy.java
+++ b/tmp/06cbe336-5e28-4499-9163-30719d18404a_fixed.java
@@ -1,48 +1,81 @@
     /**
      * Renders the given input to the target Appendable.
      *
      * @param input
      *            source to render
      * @param target
      *            render onto this target Appendable.
      * @return the given Appendable
      * @throws IOException
      *             If an I/O error occurs
+     * @throws IllegalArgumentException
+     *             If the input contains invalid Jansi markup syntax
      */
     public static Appendable render(final String input, Appendable target) throws IOException {
 
         int i = 0;
         int j, k;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
-            if (j == -1) {
-                if (i == 0) {
+            if (j == -1) { // No more BEGIN_TOKEN found
+                if (i == 0) { // Input contains no tokens at all
                     target.append(input);
                     return target;
                 }
+                // Append the remaining part of the string
                 target.append(input.substring(i));
                 return target;
             }
+
+            // Append text before the BEGIN_TOKEN
             target.append(input.substring(i, j));
+
+            // Find the END_TOKEN starting from where BEGIN_TOKEN was found
             k = input.indexOf(END_TOKEN, j);
 
             if (k == -1) {
-                target.append(input);
-                return target;
+                // Original code appended the *entire* input here, which was incorrect.
+                // Throw an exception for unterminated markup, as it's an invalid state.
+                throw new IllegalArgumentException("Input contains an unterminated Jansi markup code starting at index " + j);
+                // Alternative: append the rest literally by uncommenting below
+                // target.append(input.substring(j));
+                // return target;
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
+
+            int specStart = j + BEGIN_TOKEN_LEN;
+
+            // Check for invalid token structure: END_TOKEN must appear after BEGIN_TOKEN's content could start.
+            // This catches cases like "@|@". Here j=0, k=1, BEGIN_TOKEN_LEN=2 -> specStart=2.
+            // The condition specStart > k (2 > 1) is true, indicating an error.
+            if (specStart > k) {
+                 throw new IllegalArgumentException(
+                     "Invalid Jansi markup syntax: END_TOKEN found immediately after BEGIN_TOKEN or Specifies zero-length token name. " +
+                     "Markup starting at index " + j);
+            }
+
+            String spec = input.substring(specStart, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                // Original code appended the *entire* input here, which was incorrect.
+                // Missing CODE_TEXT_SEPARATOR (e.g., "@|red|@") indicates invalid syntax.
+                 throw new IllegalArgumentException(
+                    "Invalid Jansi markup syntax: Missing '" + CODE_TEXT_SEPARATOR +
+                    "' separator in token spec '" + spec + "' starting at index " + j);
+                 // Original buggy code (replaced):
+                 // target.append(input);
+                 // return target;
             }
+
+            // Assumes a helper method render(String text, String[] codes) exists
+            // (likely another overload or private method in the same AnsiRenderer class)
+            // which takes the text and the code names to generate the ANSI sequence.
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
+            // Move index past the processed token
             i = k + END_TOKEN_LEN;
         }
     }
\ No newline at end of file
