diff --git a/tmp/200f4b4e-975f-44c0-a777-99b70103d62b_buggy.java b/tmp/57fc4c89-214e-4625-ba54-26a9d853670d_fixed.java
index 7030ef0..98bd3dc 100644
--- a/tmp/200f4b4e-975f-44c0-a777-99b70103d62b_buggy.java
+++ b/tmp/57fc4c89-214e-4625-ba54-26a9d853670d_fixed.java
@@ -1,15 +1,109 @@
+import org.jsoup.helper.Validate;
+import org.jsoup.internal.Normalizer;
+import org.jsoup.nodes.Attribute;
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Element;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import static org.jsoup.internal.Normalizer.normalize;
+
+// -- classes defined elsewhere --
+class TagName {
+    private String name;
+    TagName(String name) { this.name = name; }
+    static TagName valueOf(String name) { return new TagName(Normalizer.normalize(name)); }
+    @Override public String toString() { return name; }
+    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; TagName tagName = (TagName) o; return name.equals(tagName.name); }
+    @Override public int hashCode() { return name.hashCode(); }
+}
+
+class AttributeKey {
+    private String name;
+    AttributeKey(String name) { this.name = name; }
+    static AttributeKey valueOf(String name) { return new AttributeKey(Normalizer.normalize(name)); }
+     @Override public String toString() { return name; }
+    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AttributeKey that = (AttributeKey) o; return name.equals(that.name); }
+    @Override public int hashCode() { return name.hashCode(); }
+}
+
+class AttributeValue {
+    private String value;
+    AttributeValue(String value) { this.value = value; }
+    static AttributeValue valueOf(String name) { return new AttributeValue(name); } // Don't normalize value (case sensitive)
+    @Override public String toString() { return value; }
+    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AttributeValue that = (AttributeValue) o; return value.equals(that.value); }
+    @Override public int hashCode() { return value.hashCode(); }
+}
+
+class Protocol {
+    private String name;
+    Protocol(String name) { this.name = name; }
+    static Protocol valueOf(String name) { return new Protocol(name); } // Don't normalize value (case sensitive)
+    @Override public String toString() { return name; }
+    @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Protocol protocol = (Protocol) o; return name.equals(protocol.name); }
+    @Override public int hashCode() { return name.hashCode(); }
+}
+
+class Safelist {
+    private Set<TagName> tagNames; // tags allowed
+    private Map<TagName, Set<AttributeKey>> attributes; // tag -> attribute[s] allowed
+    private Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes; // tag -> attribute -> value allowed
+    private Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols; // tag -> attribute -> protocol[s] allowed
+    private boolean preserveRelativeLinks; // option to preserve relative links
+
+    /**
+     Thrown by {@link #addTags(String...)} et al methods if the provided tag is not supported.
+     @since 1.15.1
+     */
+    public static class ValidationException extends IllegalArgumentException {
+        public ValidationException(String message) {
+            super(message);
+        }
+    }
+
+    // -- other methods --
+
+     /**
+      Default constructor. Generally use one of the defaults instead.
+      @see #basic()
+      @see #basicWithImages()
+      @see #none()
+      @see #relaxed()
+      @see #simpleText()
+      */
+     public Safelist() {
+         tagNames = new HashSet<>();
+         attributes = new HashMap<>();
+         enforcedAttributes = new HashMap<>();
+         protocols = new HashMap<>();
+         preserveRelativeLinks = false;
+     }
+
+    public static Safelist none() {
+        return new Safelist();
+    }
+
+
     /**
      Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
 
      @param tags tag names to allow
      @return this (for chaining)
+     @throws ValidationException if a tag is unsupported, e.g. {@code noscript}.
      */
     public Safelist addTags(String... tags) {
         Validate.notNull(tags);
 
         for (String tagName : tags) {
             Validate.notEmpty(tagName);
+            // Added check for noscript tag as per test requirement
+            if (tagName.equalsIgnoreCase("noscript")) {
+                 throw new ValidationException("Cannot add unsupported tag 'noscript' to safelist");
+            }
             tagNames.add(TagName.valueOf(tagName));
         }
         return this;
     }
+}
\ No newline at end of file
