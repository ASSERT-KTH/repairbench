diff --git a/tmp/13edb577-756b-402d-9094-c45c9772a61d_buggy.java b/tmp/bb084962-75c6-401e-aba3-57c5dc0f5618_fixed.java
index 7030ef0..c02e160 100644
--- a/tmp/13edb577-756b-402d-9094-c45c9772a61d_buggy.java
+++ b/tmp/bb084962-75c6-401e-aba3-57c5dc0f5618_fixed.java
@@ -1,15 +1,30 @@
+import org.jsoup.helper.Validate;
+import org.jsoup.parser.TagName;
+// Assuming ValidationException is available, likely org.jsoup.helper.ValidationException or similar
+// If not, it might need to be replaced with IllegalArgumentException, but the test expects ValidationException.
+// Let's assume it's available in the context or defined elsewhere.
+import org.jsoup.helper.ValidationException; // Added potential import
+
+import java.util.Set; // Assuming tagNames is a Set<TagName>
+
     /**
      Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
+     <p>Note that {@code <noscript>} is not supported - an exception will be thrown if attempted to be added.</p>
 
      @param tags tag names to allow
      @return this (for chaining)
+     @throws ValidationException if {@code <noscript>} is attempted to be added
      */
     public Safelist addTags(String... tags) {
         Validate.notNull(tags);
 
         for (String tagName : tags) {
             Validate.notEmpty(tagName);
+            // see SafelistTest#noscriptIsBlocked
+            if (tagName.equalsIgnoreCase("noscript")) {
+                throw new ValidationException(String.format("Tag <%s> is unsupported.", tagName));
+            }
             tagNames.add(TagName.valueOf(tagName));
         }
         return this;
     }
\ No newline at end of file
