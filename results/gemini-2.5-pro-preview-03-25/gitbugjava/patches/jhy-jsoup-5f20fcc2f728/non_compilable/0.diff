diff --git a/tmp/1cba6cec-9cf3-4f15-ae7e-4bb442b4483e_buggy.java b/tmp/a0cfc2e5-7852-45ca-9f49-6aaacabe8050_fixed.java
index 7030ef0..83a63c3 100644
--- a/tmp/1cba6cec-9cf3-4f15-ae7e-4bb442b4483e_buggy.java
+++ b/tmp/a0cfc2e5-7852-45ca-9f49-6aaacabe8050_fixed.java
@@ -1,15 +1,51 @@
+import org.jsoup.helper.Validate;
+import org.jsoup.internal.Normalizer;
+import org.jsoup.parser.TagName;
+
+import java.util.HashSet;
+import java.util.Set;
+// Assuming Safelist.ValidationException is a static inner class or accessible
+// If not, adjust the exception type or import as needed. For this fix,
+// we assume it's accessible as Safelist.ValidationException.
+
+// Also assuming TagName has a method like normalName() or similar
+// to get the normalized (lowercase) tag name.
+// If the actual method is different, it needs adjustment.
+
     /**
      Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
 
      @param tags tag names to allow
      @return this (for chaining)
+     @throws Safelist.ValidationException if a tag is unsupported, like {@code noscript}.
      */
     public Safelist addTags(String... tags) {
         Validate.notNull(tags);
 
         for (String tagName : tags) {
             Validate.notEmpty(tagName);
-            tagNames.add(TagName.valueOf(tagName));
+            // Use Normalizer.lowerCase as TagName.valueOf might not be public or directly usable for normalization check
+            String normalizedTag = Normalizer.lowerCase(tagName);
+
+            // Block tags that are typically used for scripting attacks, like <noscript>
+            // See https://github.com/jsoup/jsoup/issues/1722
+            if (normalizedTag.equals("noscript")) {
+                 throw new Safelist.ValidationException(String.format("Tag <%s> is unsupported and may be abused, forcing static HTML.", tagName));
+             }
+
+            tagNames.add(TagName.valueOf(normalizedTag)); // Add the normalized tag
         }
         return this;
     }
+
+    // Define the nested ValidationException class if it's not already defined elsewhere
+    // This is just for context, the fix only requires the addTags method body
+    /**
+     * A validation exception, occurring when assessing node validity. Tells you why the node was dropped.
+     * Use {@link #getMessage()} to retrieve the reason.
+     */
+    public static class ValidationException extends IllegalArgumentException {
+        ValidationException(String message) {
+            super(message);
+        }
+    }
\ No newline at end of file
