diff --git a/tmp/fbe8f8f4-6a48-47b3-b29e-3a87d8bf81e6_buggy.java b/tmp/87dd8569-cd3f-450a-9614-dc9897edc5df_fixed.java
index e327422..54a6d96 100644
--- a/tmp/fbe8f8f4-6a48-47b3-b29e-3a87d8bf81e6_buggy.java
+++ b/tmp/87dd8569-cd3f-450a-9614-dc9897edc5df_fixed.java
@@ -1,312 +1,371 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
+        // Check for fixed 20-byte structure (before processing TLVs)
+        // Note: Added check buf.readableBytes() >= 20 as some messages might have TLVs after the fixed block.
+        // If exactly 20 bytes remain, assume it's the fixed block ONLY.
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
-            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
+            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L); // Use long literal for multiplication
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
-            return position;
+            return position; // Return early if fixed structure is detected
 
         }
 
-        while (buf.readableBytes() > 2) {
+        // Process TLV (Type-Length-Value) optional fields
+        while (buf.readableBytes() > 1) { // Need at least 1 byte for subtype and 1 byte for length
 
             int subtype = buf.readUnsignedByte();
+            // Check if we can read length byte
+            if (buf.readableBytes() < 1) {
+                 break; // Not enough data for length byte
+            }
             int length = buf.readUnsignedByte();
-            int endIndex = buf.readerIndex() + length;
+            int readerIndex = buf.readerIndex(); // Save start index of value field
+
+            // Check if the buffer contains enough bytes for the declared length
+            if (buf.readableBytes() < length) {
+                // Length is inconsistent with remaining buffer size. Stop processing TLVs for this message.
+                 // Log.warning("Invalid TLV length for subtype " + subtype + ". Length: " + length + ", Remaining: " + buf.readableBytes());
+                 break;
+            }
+
+            int endIndex = readerIndex + length; // Calculate end index for this TLV block
+
             String stringValue;
+            Network network = null; // Used in case 0xEB, declare here to potentially aggregate across TLVs if needed
             switch (subtype) {
                 case 0x01:
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    if (length >= 4) {
+                       position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100L);
+                    }
                     break;
                 case 0x02:
+                     if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                     }
                     break;
                 case 0x2b:
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case 0x30:
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x31:
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x33:
+                    // Ensure length is sufficient for the logic inside
+                    if (length >= 15) { // "*M00..." needs at least 4 + 4 + 7 = 15 bytes? Check format.
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
+                        // Check string format before accessing substrings to avoid exceptions
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) {
+                            String lockStatus = stringValue.substring(8, 15); // Extract 7 chars after "*M00xxxx"
+                            if (lockStatus.length() >= 5) { // Ensure substring for parseInt is valid
+                                try {
+                                    // Parse battery from characters at index 2,3,4 of lockStatus string
                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                                } catch (NumberFormatException | IndexOutOfBoundsException e) {
+                                    // Log or ignore parsing error if the format is unexpected
+                                }
+                            }
+                        }
                     }
                     break;
                 case 0x56:
+                    if (length >= 2) { // Needs 1 byte for level, 1 byte reserved
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);
-                    buf.readUnsignedByte(); // reserved
+                        buf.readUnsignedByte(); // read reserved byte
+                    }
                     break;
                 case 0x60:
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
-                    buf.skipBytes(length - 2);
+                        // If length > 2, remaining bytes are skipped by buf.readerIndex(endIndex) below
+                    }
                     break;
                 case 0x69:
+                     if (length >= 2) {
                          position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                     }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
-                    decodeExtension(position, buf, endIndex);
+                case 0x80: // Extension data block
+                    if (length >= 1) { // Needs at least the 'content' byte
+                        buf.readUnsignedByte(); // read content byte, seems unused
+                        int extensionDataLength = length - 1;
+                        if (extensionDataLength >= 0) {
+                            int extensionEndIndex = buf.readerIndex() + extensionDataLength;
+                            // Ensure extension end index is within the main TLV block and buffer bounds
+                            if (extensionEndIndex <= endIndex && extensionEndIndex <= buf.writerIndex()) {
+                                decodeExtension(position, buf, extensionEndIndex);
+                            }
+                        }
+                    }
+                    // Let buf.readerIndex(endIndex) below handle skipping potentially remaining bytes
                     break;
                 case 0x91:
+                    // Total bytes read by this case: 2+2+1+1+1+1+2+2+2+4+2+2 = 24 bytes
+                    if (length >= 24) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
+                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0); // Use double division
+                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0); // Use double division
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
+                        buf.readUnsignedShort(); // Skip reserved/unused
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
+                        buf.readUnsignedShort(); // Skip reserved/unused
+                        buf.readUnsignedInt();   // Skip reserved/unused
+                        buf.readUnsignedShort(); // Skip reserved/unused
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC
+                    if (length >= 4) { // Needs 2 shorts
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver Name
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
-                case 0xBD:
+                case 0xBD: // Driver Unique ID
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
-                case 0xD0:
+                case 0xD0: // User Status / Alarm
+                     if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                     }
                     break;
-                case 0xD3:
+                case 0xD3: // Power
+                     if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                     }
                     break;
-                case 0xD4:
-                case 0xE1:
+                case 0xD4: // Battery Level
+                case 0xE1: // Also Battery Level? Handle both.
+                    if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xD5:
-                    if (length == 2) {
+                case 0xD5: // Lock status / Battery
+                    if (length == 2) { // Simple battery voltage
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1) { // Complex lock status
                         int count = buf.readUnsignedByte();
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // 1 byte count + N * (ID + Card + Batt + Status)
+                        if (length == expectedLength && count > 0) { // Check length matches expected structure
                            for (int i = 1; i <= count; i++) {
+                               // Check readable bytes before reading each part? Might be overkill if length check passed.
                                position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                int status = buf.readUnsignedShort();
                                position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                            }
+                        } // If length mismatch, data is skipped by buf.readerIndex(endIndex) below
                     }
                     break;
-                case 0xDA:
-                    buf.readUnsignedShort(); // string cut count
+                case 0xDA: // Device Status (string cut, motion, cover)
+                    if (length >= 3) { // Needs 2 bytes count + 1 byte status
+                         buf.readUnsignedShort(); // string cut count - value ignored
                          int deviceStatus = buf.readUnsignedByte();
                          position.set("string", BitUtil.check(deviceStatus, 0));
                          position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                          position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Temperature/Humidity Sensors
+                     // Each sensor block is 1 (index) + 6 (mac) + 8 (temp) + 8 (humidity) = 23 bytes
                      while (buf.readerIndex() < endIndex) {
+                         if (buf.readableBytes(endIndex - buf.readerIndex()) < 23) break; // Check remaining bytes within this TLV block
                          int sensorIndex = buf.readUnsignedByte();
                          buf.skipBytes(6); // mac
                          position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                          position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                      }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
-                        Network network = new Network();
+                case 0xEB: // Network Info or Extended Fuel/Power
+                    if (length >= 2 && buf.getUnsignedShort(readerIndex) > 200) { // Network Info Path
+                        if (length >= 3) { // Need mcc (2) + mnc (1)
                             int mcc = buf.readUnsignedShort();
                             int mnc = buf.readUnsignedByte();
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes(endIndex - buf.readerIndex()) < 5) break; // Need lac(2) + cid(2) + rssi(1)
+                                if (network == null) {
+                                    network = new Network();
+                                }
                                 network.addCellTower(CellTower.from(
                                         mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                         buf.readUnsignedByte()));
                             }
+                            if (network != null && !network.getCellTowers().isEmpty()) {
                                 position.setNetwork(network);
-                    } else {
+                            }
+                        }
+                    } else { // Extended Data Path
                         while (buf.readerIndex() < endIndex) {
-                            int extendedLength = buf.readUnsignedShort();
+                             if (buf.readableBytes(endIndex - buf.readerIndex()) < 4) break; // Need ext_len(2) + ext_type(2)
+                             int extendedLength = buf.readUnsignedShort(); // Is this total length or value length? Assuming total length incl type field.
                              int extendedType = buf.readUnsignedShort();
+                             int extendedValueLength = extendedLength - 2; // Data length (assuming extLength included type field)
+                             int extendedValueIndex = buf.readerIndex();
+
+                             if (extendedValueLength < 0 || buf.readableBytes(endIndex - buf.readerIndex()) < extendedValueLength) break; // Check validity and remaining bytes
+
                              switch (extendedType) {
-                                case 0x0001:
-                                    position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
-                                    break;
-                                case 0x0023:
-                                    position.set("fuel2", Double.parseDouble(
-                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
-                                    break;
-                                case 0x00CE:
-                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                    break;
-                                case 0x00D8:
-                                    Network network = new Network();
-                                    network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
-                                    position.setNetwork(network);
-                                    break;
-                                case 0xE1:
-                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                                    break;
-                                default:
-                                    buf.skipBytes(extendedLength - 2);
-                                    break;
+                                case 0x0001: if (extendedValueLength >= 3) { position.set("fuel1", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;
+                                case 0x0023: if (extendedValueLength >= 6) { try { position.set("fuel2", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (NumberFormatException e) {/*ignore*/} } break;
+                                case 0x00CE: if (extendedValueLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;
+                                case 0x00D8: if (extendedValueLength >= 9) { if(network == null) network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); if(!network.getCellTowers().isEmpty()) position.setNetwork(network); } break;
+                                case 0xE1:   if (extendedValueLength >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break;
+                                default: buf.skipBytes(extendedValueLength); break; // Skip if not handled
                              }
+                             // Ensure reader index is at the end of this extended value block
+                             buf.readerIndex(extendedValueIndex + extendedValueLength);
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Card
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
-                case 0xEE:
+                case 0xEE: // RSSI, Power, Battery, Satellites
+                     if (length >= 6) { // 1(rssi)+2(pwr)+2(batt)+1(sat)
                          position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                          position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                          position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                          position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                     }
                     break;
-                case 0xF3:
+                case 0xF3: // OBD Extended Data (Type: 2 bytes, Length: 1 byte)
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes(endIndex - buf.readerIndex()) < 3) break; // Need ext_type(2) + ext_len(1)
                         int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
+                        int extendedLength = buf.readUnsignedByte(); // Length of value data
+                        int extendedValueIndex = buf.readerIndex();
+                        if (buf.readableBytes(endIndex - buf.readerIndex()) < extendedLength) break; // Check remaining bytes for value
+
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                            case 0x0002: if(extendedLength>=2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0003: if(extendedLength>=2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;
+                            case 0x0004: if(extendedLength>=2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;
+                            case 0x0005: if(extendedLength>=4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100L); break;
+                            case 0x0007: if(extendedLength>=2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0008: if(extendedLength>=2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0009: if(extendedLength>=2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;
+                            case 0x000B: if(extendedLength>=2) position.set("intakePressure", buf.readUnsignedShort()); break;
+                            case 0x000C: if(extendedLength>=2) position.set("intakeTemp", buf.readUnsignedShort() - 40); break;
+                            case 0x000D: if(extendedLength>=2) position.set("intakeFlow", buf.readUnsignedShort()); break;
+                            case 0x000E: if(extendedLength>=2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break;
+                            case 0x0050: if(extendedLength>=17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;
+                            case 0x0100: if(extendedLength>=2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0102: if(extendedLength>=2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); break;
+                            case 0x0112: if(extendedLength>=2) position.set("hardAccelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0113: if(extendedLength>=2) position.set("hardDecelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0114: if(extendedLength>=2) position.set("hardCorneringCount", buf.readUnsignedShort()); break;
+                            default: buf.skipBytes(extendedLength); break; // Skip if not handled
                         }
+                        // Ensure reader index is correct
+                         buf.readerIndex(extendedValueIndex + extendedLength);
                     }
                     break;
-                case 0xFE:
+                case 0xFE: // Battery/Power or Extended Alarms
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     } else if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
-                    } else {
-                        int mark = buf.readUnsignedByte();
-                        if (mark == 0x7C) {
+                    } else if (length > 0) { // Possible extended structure
+                        int mark = buf.readUnsignedByte(); // Read first byte
+                        if (mark == 0x7C && length > 1) { // Check for extended alarm marker
+                            // Process extended alarms TLV structure (Type: 1 byte, Length: 1 byte)
                              while (buf.readerIndex() < endIndex) {
+                                 if (buf.readableBytes(endIndex - buf.readerIndex()) < 2) break; // Need ext_type(1) + ext_len(1)
                                  int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
+                                 int extendedLength = buf.readUnsignedByte(); // Length of value data
+                                 int extendedValueIndex = buf.readerIndex();
+                                 if (buf.readableBytes(endIndex - buf.readerIndex()) < extendedLength) break; // Check remaining bytes for value
+
                                  switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Alarm bits
+                                        if (extendedLength >= 4) {
                                              long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                             // Use position.add to accumulate alarms, rather than overwrite
+                                             if (BitUtil.check(alarms, 0)) position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                             if (BitUtil.check(alarms, 1)) position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);
+                                             if (BitUtil.check(alarms, 2)) position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);
+                                             if (BitUtil.check(alarms, 3)) position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
+                                             if (BitUtil.check(alarms, 4)) position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                         }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
-                                        }
-                                        break;
-                                    default:
-                                        buf.skipBytes(extendedLength);
                                         break;
+                                    default: buf.skipBytes(extendedLength); break; // Skip if not handled
                                  }
+                                 // Ensure reader index is correct
+                                 buf.readerIndex(extendedValueIndex + extendedLength);
                              }
-                        }
+                        } else if (mark != 0x7C) {
+                            // If first byte wasn't the marker, assume it was battery level.
+                            // Rewind by 1 byte as we already consumed 'mark'.
+                            buf.readerIndex(readerIndex);
+                            if (length >= 1) { // Re-check length as we rewound
                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             }
+                        }
+                    }
                     break;
                 default:
+                    // Unknown subtype. Data is skipped by buf.readerIndex(endIndex) below.
                     break;
             }
+            // Ensure reader index is advanced to the end of the TLV block.
+            // This skips any unread bytes within the current TLV block,
+            // ensuring the next iteration starts at the correct position.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
