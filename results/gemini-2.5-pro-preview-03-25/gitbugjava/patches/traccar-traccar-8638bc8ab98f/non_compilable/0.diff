diff --git a/tmp/ebeebc2a-7223-4483-af5d-8a6d272db288_buggy.java b/tmp/41e66128-d226-43ed-b98f-85c622e7f54f_fixed.java
index e327422..1306077 100644
--- a/tmp/ebeebc2a-7223-4483-af5d-8a6d272db288_buggy.java
+++ b/tmp/41e66128-d226-43ed-b98f-85c622e7f54f_fixed.java
@@ -1,312 +1,386 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need at least subtype (1) and length (1)
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Basic bounds check: ensure endIndex is not before readerIndex and within buffer limits
+            // Also check if buffer actually has 'length' bytes readable starting now.
+            if (endIndex < buf.readerIndex() || endIndex > buf.writerIndex() || buf.readableBytes() < length) {
+                break; // Invalid length/endIndex or not enough data, stop processing TLVs
+            }
+
             String stringValue;
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Odometer
+                    if (length == 4) {
                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
-                case 0x02:
+                case 0x02: // Fuel Level
+                    if (length == 2) {
                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0x2b:
+                case 0x2b: // Fuel Consumption
+                     if (length == 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
-                case 0x30:
+                case 0x30: // RSSI
+                    if (length == 1) {
                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x31:
+                case 0x31: // Satellites
+                     if (length == 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x33:
+                case 0x33: // Lock Status String
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
+                        // Check string format before parsing
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) {
+                            String lockStatus = stringValue.substring(8, 15); // Length 7
+                            if (lockStatus.length() >= 5) {
+                                try {
                                    position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                                } catch (NumberFormatException e) {
+                                    // Ignore if battery part is not a number
+                                }
+                            }
+                        }
                     }
                     break;
-                case 0x56:
+                case 0x56: // Battery Level and Reserved
+                    if (length == 2) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 10);
                         buf.readUnsignedByte(); // reserved
+                    }
                     break;
-                case 0x60:
+                case 0x60: // Event
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
-                    buf.skipBytes(length - 2);
+                        // Skip remaining bytes if length > 2, handled by readerIndex(endIndex) below
+                    }
                     break;
-                case 0x69:
+                case 0x69: // Battery Voltage
+                    if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                case 0x80: // Extension data
+                    // Assuming decodeExtension consumes buffer data up to endIndex
                     decodeExtension(position, buf, endIndex);
-                    break;
-                case 0x91:
+                    break; // Added missing break
+                case 0x91: // OBD data block
+                    // Check if length matches expected size for all fields
+                    if (length >= 21) { // Sum of bytes read/skipped
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
+                        buf.readUnsignedShort(); // skip 2
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
+                        buf.readUnsignedShort(); // skip 2
+                        buf.readUnsignedInt();   // skip 4
+                        buf.readUnsignedShort(); // skip 2
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC
+                     if (length == 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer (alternative)
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver Name/ID String
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
-                case 0xBD:
+                case 0xBD: // Driver Unique ID String
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
-                case 0xD0:
+                case 0xD0: // User Status / Vibration Alarm
+                    if (length == 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    }
                     break;
-                case 0xD3:
+                case 0xD3: // Power Voltage
+                     if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0xD4:
-                case 0xE1:
+                case 0xD4: // Battery Level
+                case 0xE1: // Battery Level (alternative) -> Fallthrough
+                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xD5:
-                    if (length == 2) {
+                case 0xD5: // Battery Voltage or Lock Info
+                    if (length == 2) { // Battery Voltage format
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 0) { // Lock Info format (at least 1 byte for count)
                         int count = buf.readUnsignedByte();
+                        int expectedMinLength = 1 + count * 13; // 1 for count, 13 per lock (5+5+1+2)
+                        // Check if declared length matches expected and buffer has enough for locks
+                        if (length >= expectedMinLength && buf.readableBytes() >= expectedMinLength - 1) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
                         }
+                    }
                     break;
-                case 0xDA:
-                    buf.readUnsignedShort(); // string cut count
+                case 0xDA: // Device Status (string cut, motion, cover)
+                    if (length >= 3) { // Need 2 for count + 1 for status
+                        buf.readUnsignedShort(); // string cut count (unused)
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // External Sensor Data (Temp/Humidity)
+                    // Loop respects endIndex which is validated at the start
                     while (buf.readerIndex() < endIndex) {
+                        // Check bytes needed per sensor: index(1)+mac(6)+temp(8)+humidity(8) = 23
+                        if (buf.readableBytes() < 23) {
+                           break;
+                        }
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                case 0xEB: // Network Info or Extended Attributes
+                    // Ensure processing respects endIndex validated at start
+                    if (length >= 2) { // Need at least 2 bytes to check format type
+                       if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Network info format
+                            if (buf.readableBytes() >= 3) { // Need mcc(2), mnc(1)
                                 Network network = new Network();
                                 int mcc = buf.readUnsignedShort();
                                 int mnc = buf.readUnsignedByte();
                                 while (buf.readerIndex() < endIndex) {
+                                    // Check bytes needed per cell: lac(2), cid(2/4?), rssi(1)
+                                    // Assuming 2 bytes for CID based on original code usage
+                                    if (buf.readableBytes() < 5) break;
                                     network.addCellTower(CellTower.from(
                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                             buf.readUnsignedByte()));
                                 }
+                                if (network.getCellTowers() != null && !network.getCellTowers().isEmpty()) {
                                     position.setNetwork(network);
-                    } else {
+                                }
+                            }
+                        } else { // Extended attributes format (Inner TLV: Len(2), Type(2), Value)
                             while (buf.readerIndex() < endIndex) {
-                            int extendedLength = buf.readUnsignedShort();
+                                if (buf.readableBytes() < 4) break; // Need inner length(2) and type(2)
+                                int extendedLength = buf.readUnsignedShort(); // Length includes type field
                                 int extendedType = buf.readUnsignedShort();
+                                int extendedValueIndex = buf.readerIndex();
+                                // Value length = extendedLength - 2 (type), must be >= 0
+                                int valueLength = extendedLength >= 2 ? extendedLength - 2 : 0;
+                                int extendedEndIndex = extendedValueIndex + valueLength;
+
+                                // Validate inner endIndex against outer endIndex and current index
+                                if (extendedEndIndex > endIndex || extendedEndIndex < extendedValueIndex) {
+                                    break; // Invalid inner length/end index
+                                }
+                                if (buf.readableBytes() < valueLength) {
+                                    break; // Not enough data for inner value
+                                }
+
                                 switch (extendedType) {
-                                case 0x0001:
-                                    position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
-                                    break;
-                                case 0x0023:
-                                    position.set("fuel2", Double.parseDouble(
-                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
-                                    break;
-                                case 0x00CE:
-                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                    break;
-                                case 0x00D8:
+                                    case 0x0001: if(valueLength>=3) {position.set("fuel1", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte();} break;
+                                    case 0x0023: if(valueLength>=6) {position.set("fuel2", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));} break;
+                                    case 0x00CE: if(valueLength>=2) {position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);} break;
+                                    case 0x00D8: // Inner Network Cell Tower
+                                        if (valueLength >= 7) { // mcc(2)+mnc(1)+lac(2)+cid(4)=9? Original uses 7 bytes read. Rechecking...
+                                            // CellTower.from(mcc, mnc, lac, cid) used in main part takes 4 args.
+                                            // CellTower.from(mcc, mnc, lac, cid, rs) takes 5.
+                                            // Here it reads mcc(2)+mnc(1)+lac(2)+cid(4)=9 bytes. Let's assume CID is 4 bytes here.
+                                             if (valueLength >= 9) {
                                                 Network network = new Network();
                                                 network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
+                                                        buf.readUnsignedShort(), buf.readUnsignedByte(), // mcc, mnc
+                                                        buf.readUnsignedShort(), buf.readUnsignedInt())); // lac, cid
                                                 position.setNetwork(network);
+                                             }
+                                        }
                                         break;
-                                case 0xE1:
-                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                                    break;
-                                default:
-                                    buf.skipBytes(extendedLength - 2);
-                                    break;
+                                    case 0xE1:   if(valueLength>=1) {position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());} break;
+                                    default: break; // Value skipped by readerIndex adjustment below
+                                }
+                                buf.readerIndex(extendedEndIndex); // Ensure correct position after inner item
                             }
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Card Number String
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
-                case 0xEE:
+                case 0xEE: // Combined Status (RSSI, Power, Battery, Sats)
+                    if (length == 6) { // rssi(1)+power(2)+battery(2)+sat(1)
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xF3:
+                case 0xF3: // OBD Extended Data (Inner TLV: Type(2), Len(1), Value)
+                     // Ensure processing respects outer endIndex validated at start
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 3) break; // Need inner type(2) + length(1)
                         int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
+                        int extendedLength = buf.readUnsignedByte(); // This is value length
+                        int extendedValueIndex = buf.readerIndex();
+                        int extendedEndIndex = extendedValueIndex + extendedLength;
+
+                        // Validate inner endIndex against outer endIndex and current index
+                        if (extendedEndIndex > endIndex || extendedEndIndex < extendedValueIndex) {
+                            break; // Invalid inner length/end index
+                        }
+                        if (buf.readableBytes() < extendedLength) {
+                            break; // Not enough data for inner value
+                        }
+
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                            // Add length checks matching data read
+                            case 0x0002: if(extendedLength>=2) {position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);} break;
+                            case 0x0003: if(extendedLength>=2) {position.set(Position.KEY_RPM, buf.readUnsignedShort());} break;
+                            case 0x0004: if(extendedLength>=2) {position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);} break;
+                            case 0x0005: if(extendedLength>=4) {position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);} break;
+                            case 0x0007: if(extendedLength>=2) {position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);} break;
+                            case 0x0008: if(extendedLength>=2) {position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);} break;
+                            case 0x0009: if(extendedLength>=2) {position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);} break;
+                            case 0x000B: if(extendedLength>=2) {position.set("intakePressure", buf.readUnsignedShort());} break;
+                            case 0x000C: if(extendedLength>=2) {position.set("intakeTemp", buf.readUnsignedShort() - 40);} break;
+                            case 0x000D: if(extendedLength>=2) {position.set("intakeFlow", buf.readUnsignedShort());} break;
+                            // Original used readUnsignedShort for Throttle, but scaling suggests byte? Using original for now. Check protocol doc.
+                            case 0x000E: if(extendedLength>=2) {position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);} break;
+                            case 0x0050: if(extendedLength>=17) {position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));} break;
+                            case 0x0100: if(extendedLength>=2) {position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);} break;
+                            case 0x0102: if(extendedLength>=2) {position.set("tripFuel", buf.readUnsignedShort() * 0.1);} break;
+                            case 0x0112: if(extendedLength>=2) {position.set("hardAccelerationCount", buf.readUnsignedShort());} break;
+                            case 0x0113: if(extendedLength>=2) {position.set("hardDecelerationCount", buf.readUnsignedShort());} break;
+                            case 0x0114: if(extendedLength>=2) {position.set("hardCorneringCount", buf.readUnsignedShort());} break;
+                            default: break; // Value skipped by readerIndex adjustment below
                         }
+                        buf.readerIndex(extendedEndIndex); // Ensure correct position after inner item
                     }
                     break;
-                case 0xFE:
-                    if (length == 1) {
+                case 0xFE: // Battery/Power or Complex Alarm/Status (Inner TLV: Type(1), Len(1), Value)
+                    if (length == 1) { // Battery Level format
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else if (length == 2) {
+                    } else if (length == 2) { // Power Voltage format
                          position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
-                    } else {
-                        int mark = buf.readUnsignedByte();
-                        if (mark == 0x7C) {
+                    } else if (length > 2) { // Complex format, starts with mark byte
+                        int mark = buf.readUnsignedByte(); // Read first byte of value field
+                        if (mark == 0x7C) { // Indicates inner TLV structure follows
+                            // Loop respects outer endIndex
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) break; // Need inner type(1) and length(1)
                                 int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
+                                int extendedLength = buf.readUnsignedByte(); // Value length
+                                int extendedValueIndex = buf.readerIndex();
+                                int extendedEndIndex = extendedValueIndex + extendedLength;
+
+                                // Validate inner endIndex against outer endIndex and current index
+                                if (extendedEndIndex > endIndex || extendedEndIndex < extendedValueIndex) {
+                                    break; // Invalid inner length/end index
+                                }
+                                if (buf.readableBytes() < extendedLength) {
+                                    break; // Not enough data for inner value
+                                }
+
                                 switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Alarm flags
+                                        if (extendedLength >= 4) { // Check length for uint alarm flags
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                            if (BitUtil.check(alarms, 0)) position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                            if (BitUtil.check(alarms, 1)) position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
+                                            if (BitUtil.check(alarms, 2)) position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
+                                            if (BitUtil.check(alarms, 3)) position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
+                                            if (BitUtil.check(alarms, 4)) position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                         }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
-                                        }
-                                        break;
-                                    default:
-                                        buf.skipBytes(extendedLength);
                                         break;
+                                    default: break; // Value skipped by readerIndex adjustment below
                                 }
+                                 buf.readerIndex(extendedEndIndex); // Ensure correct position after inner item
                             }
                         }
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                        // If mark != 0x7C, the remaining length-1 bytes are skipped by the outer logic below
+                        // Original code had a possibly erroneous battery read here, which is removed.
                     }
                     break;
                 default:
+                    // Unknown subtype, data will be skipped by readerIndex adjustment below
                     break;
             }
+
+            // Set reader index to the end of the TLV item's value field.
+            // This skips any unread bytes within the current item's declared length,
+            // handles the default case (unknown subtype), and ensures the loop progresses correctly.
+            // Bounds were checked before the switch, so endIndex should be valid.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
