diff --git a/tmp/0a0a1d6c-34bc-46fa-ae34-2327da56a6da_buggy.java b/tmp/b47fd556-03bb-47b2-a143-6cd4db70b77b_fixed.java
index 27f2719..71703f1 100644
--- a/tmp/0a0a1d6c-34bc-46fa-ae34-2327da56a6da_buggy.java
+++ b/tmp/b47fd556-03bb-47b2-a143-6cd4db70b77b_fixed.java
@@ -1,90 +1,114 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
 
         if (sentence.startsWith("!1,")) {
             int index = sentence.indexOf(',', 3);
             if (index < 0) {
                 index = sentence.length();
             }
             getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
+        // Only handle message types 3, 5, A, B, C, D for position reporting
         if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         String type = sentence.substring(1, 2);
         position.set(Position.KEY_TYPE, type);
 
         if (type.equals("3")) {
 
-            getLastLocation(position, null);
+            getLastLocation(position, null); // Assumes getLastLocation is safe regarding null last position
 
             position.set(Position.KEY_RESULT, sentence.substring(3));
 
             return position;
 
         } else if (type.equals("5")) {
 
             String[] values = sentence.split(",");
 
-            getLastLocation(position, null);
+            getLastLocation(position, null); // Assumes getLastLocation is safe
 
+            // Check array length before accessing elements
+            if (values.length > 1) {
+                try {
                     position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
-            if (values.length >= 4) {
+                } catch (NumberFormatException e) {
+                    // Ignore invalid number format
+                }
+            }
+            if (values.length > 3) { // Original code used >= 4, but index is 3, so length > 3 is correct
+                 try {
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
+                } catch (NumberFormatException e) {
+                    // Ignore invalid number format
+                }
             }
 
             return position;
 
         } else if (type.equals("B") || type.equals("D")) {
 
+            // Assuming PATTERN_BD captures groups for fix, state, satellites, visible satellites, hdop
+            // Based on example !D,date,time,lat,lon,speed,course,flags,alt,battery,sats,visible_sats,hdop
+            // Group indices assumed: date=1, time=2, lat=3, lon=4, speed=5, course=6, flags=7, alt=8, battery=9,
+            //                     sats=10, visible_sats=11, hdop=12
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
+            // Assume decodeFix and decodeState handle their respective groups correctly
             decodeFix(position, parser);
             decodeState(position, parser);
 
-            position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
-            position.set(Position.KEY_HDOP, parser.nextDouble(0));
+            // Use correct group indices and check existence before parsing
+            if (parser.hasNext(10)) {
+                position.set(Position.KEY_SATELLITES, parser.nextInt(10));
+            }
+            if (parser.hasNext(11)) {
+                position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(11));
+            }
+            if (parser.hasNext(12)) {
+                position.set(Position.KEY_HDOP, parser.nextDouble(12));
+            }
 
             return position;
 
         } else if (type.equals("C")) {
 
             Parser parser = new Parser(PATTERN_C, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
             decodeState(position, parser);
 
             return position;
 
         } else if (type.equals("A")) {
 
             Parser parser = new Parser(PATTERN_A, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
 
             return position;
 
         }
 
-        return null;
+        return null; // Should only be reached if type is somehow not 3, 5, A, B, C, or D after regex check
     }
\ No newline at end of file
