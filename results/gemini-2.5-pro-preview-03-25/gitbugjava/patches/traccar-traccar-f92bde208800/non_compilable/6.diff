diff --git a/tmp/392b8f8c-56f8-4cb0-ab3c-1fcbce236091_buggy.java b/tmp/5ebcfbe9-1c3c-4407-95f4-2bdacc56b6b2_fixed.java
index 33e2e76..0e3f758 100644
--- a/tmp/392b8f8c-56f8-4cb0-ab3c-1fcbce236091_buggy.java
+++ b/tmp/5ebcfbe9-1c3c-4407-95f4-2bdacc56b6b2_fixed.java
@@ -1,126 +1,225 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
+        // Check for null or invalid form string to prevent NullPointerException
+        if (form == null || form.isEmpty() || !form.startsWith("%")) {
+            // Log error or return, depending on expected behavior for invalid input
+            // For now, just return to avoid processing potentially invalid data
+            return;
+        }
+
         CellTower cellTower = new CellTower();
+        // substring(1) is safe due to the check above
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Skip empty keys that might result from adjacent separators (e.g., "%%")
+            if (key.isEmpty()) {
+                continue;
+            }
+            // Ensure buffer has data before reading. Avoids IndexOutOfBoundsException.
+            // Specific checks are needed per data type, but a general check adds some safety.
+            // Note: This basic check might not be sufficient for multi-byte reads.
+            if (!buf.isReadable()) {
+                 break; // Stop processing if buffer is exhausted prematurely
+            }
             switch (key) {
                 case "SA":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case "MV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "BV":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "GQ":
+                    if (buf.isReadable()) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
+                    }
                     break;
                 case "CE":
+                    if (buf.readableBytes() >= 4) {
                         cellTower.setCellId(buf.readUnsignedInt());
+                    }
                     break;
                 case "LC":
+                    if (buf.readableBytes() >= 2) {
                         cellTower.setLocationAreaCode(buf.readUnsignedShort());
+                    }
                     break;
                 case "CN":
+                    if (buf.readableBytes() >= 4) {
                         int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
+                    }
                     break;
                 case "AT":
+                    if (buf.readableBytes() >= 4) {
                         position.setAltitude(buf.readUnsignedInt());
+                    }
                     break;
                 case "RP":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                    }
                     break;
                 case "GS":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case "DT":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
+                    }
                     break;
                 case "VN":
+                    // Assuming readString handles buffer checks internally or returns null/empty
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // mass air flow rate
+                    }
                     break;
                 case "EL":
+                     if (buf.isReadable()) {
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
+                     if (buf.isReadable()) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    }
                     break;
                 case "ET":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "FL":
+                    if (buf.isReadable()) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case "ML":
+                     if (buf.isReadable()) {
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    // The original code read a string here using readString(buf).
+                    // This seemed incorrect as the format string 'form' is passed in,
+                    // and 'CI' appearing as a key within it should likely correspond to
+                    // custom data *following* the format string in the buffer, not the format string itself.
+                    // If 'CI' represents actual data (e.g., a string), it should be read,
+                    // possibly using readString(buf) and stored appropriately.
+                    // If 'CI' is just metadata or not expected here, consuming data is wrong.
+                    // Assuming it's not meant to consume data here based on typical ATrack structures.
+                    // If this assumption is wrong, the fix is to correctly read and store CI data.
+                    // readString(buf); // Commented out / Removed
                     break;
                 case "AV1":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "NC":
-                    readString(buf); // gsm neighbor cell info
+                    readString(buf); // gsm neighbor cell info - Assuming readString handles buffer checks
                     break;
                 case "SM":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // max speed between reports
+                    }
                     break;
                 case "GL":
-                    readString(buf); // google link
+                    readString(buf); // google link - Assuming readString handles buffer checks
                     break;
                 case "MA":
-                    readString(buf); // mac address
+                    readString(buf); // mac address - Assuming readString handles buffer checks
                     break;
                 case "PD":
+                     if (buf.isReadable()) {
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
-                    position.set(Position.KEY_ICCID, readString(buf));
+                    position.set(Position.KEY_ICCID, readString(buf)); // Assuming readString handles buffer checks
                     break;
                 case "CM":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imsi
+                    }
                     break;
                 case "GN":
+                    if (buf.readableBytes() >= 60) {
                         buf.skipBytes(60); // g sensor data
+                    }
                     break;
                 case "GV":
+                    if (buf.readableBytes() >= 6) {
                         buf.skipBytes(6); // maximum g force
+                    }
                     break;
                 case "ME":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imei
+                    }
                     break;
                 case "IA":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // intake air temperature
+                    }
                     break;
                 case "MP":
+                    if (buf.isReadable()) {
                         buf.readUnsignedByte(); // manifold absolute pressure
+                    }
                     break;
                 default:
+                    // Optionally log unknown keys
                     break;
             }
         }
 
-        if (cellTower.getMobileCountryCode() != null
-            && cellTower.getMobileNetworkCode() != null
-            && cellTower.getCellId() != null && cellTower.getCellId() != 0
-            && cellTower.getLocationAreaCode() != null) {
+        // Process collected CellTower information
+        Integer mcc = cellTower.getMobileCountryCode();
+        Integer mnc = cellTower.getMobileNetworkCode();
+        Long cellId = cellTower.getCellId();
+        Integer lac = cellTower.getLocationAreaCode();
+
+        // Check for complete cell tower information to set Network data
+        // Use explicit null checks and access primitive value safely to avoid potential NPE on unboxing
+        boolean hasCompleteCellInfo = mcc != null && mnc != null && lac != null && cellId != null && cellId.longValue() != 0;
+
+        if (hasCompleteCellInfo) {
             position.setNetwork(new Network(cellTower));
-        } else if (cellTower.getSignalStrength() != null) {
-            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
+        } else {
+            // If complete cell info is not available, check for signal strength (RSSI)
+            Integer rssi = cellTower.getSignalStrength();
+            if (rssi != null) {
+                // Set RSSI from CellTower data (potentially overwriting value from GS key, matches original behavior)
+                position.set(Position.KEY_RSSI, rssi);
+            }
         }
     }
\ No newline at end of file
