diff --git a/tmp/cf9ad070-c3b4-4324-9faf-9c8a94b92966_buggy.java b/tmp/647a0605-8c0f-49af-9342-48bb1c49de09_fixed.java
index 33e2e76..4143240 100644
--- a/tmp/cf9ad070-c3b4-4324-9faf-9c8a94b92966_buggy.java
+++ b/tmp/647a0605-8c0f-49af-9342-48bb1c49de09_fixed.java
@@ -1,126 +1,209 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Check readable bytes before each read to prevent IndexOutOfBoundsException
+            // which might manifest as NPE later if error handling is not robust.
+            // Add checks for specific read sizes.
             switch (key) {
                 case "SA":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case "MV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "BV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "GQ":
+                    if (buf.readableBytes() >= 1) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
+                    }
                     break;
                 case "CE":
+                    if (buf.readableBytes() >= 4) {
                         cellTower.setCellId(buf.readUnsignedInt());
+                    }
                     break;
                 case "LC":
+                    if (buf.readableBytes() >= 2) {
                         cellTower.setLocationAreaCode(buf.readUnsignedShort());
+                    }
                     break;
                 case "CN":
+                    if (buf.readableBytes() >= 4) {
                         int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
+                     if (buf.readableBytes() >= 4) {
                         position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
+                    }
                     break;
                 case "AT":
+                     if (buf.readableBytes() >= 4) {
                         position.setAltitude(buf.readUnsignedInt());
+                    }
                     break;
                 case "RP":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                    }
                     break;
                 case "GS":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case "DT":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
+                    }
                     break;
                 case "VN":
+                    // Assuming readString handles buffer limits internally or reads null-terminated
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // mass air flow rate
+                    }
                     break;
                 case "EL":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    }
                     break;
                 case "ET":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "FL":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case "ML":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    // The key "CI" typically indicates the start of custom data in ASCII format.
+                    // Handling it by reading a string here in binary format is incorrect and
+                    // likely consumes data meant for subsequent keys.
+                    // Removed the problematic readString(buf) call.
                     break;
                 case "AV1":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "NC":
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // max speed between reports
+                    }
                     break;
                 case "GL":
                     readString(buf); // google link
                     break;
                 case "MA":
                     readString(buf); // mac address
                     break;
                 case "PD":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imsi
+                    }
                     break;
                 case "GN":
+                    if (buf.readableBytes() >= 60) {
                         buf.skipBytes(60); // g sensor data
+                    } else {
+                        buf.skipBytes(buf.readableBytes()); // Skip remaining if less than 60
+                    }
                     break;
                 case "GV":
+                     if (buf.readableBytes() >= 6) {
                         buf.skipBytes(6); // maximum g force
+                    } else {
+                         buf.skipBytes(buf.readableBytes());
+                    }
                     break;
                 case "ME":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imei
+                    }
                     break;
                 case "IA":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // intake air temperature
+                    }
                     break;
                 case "MP":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // manifold absolute pressure
+                    }
                     break;
                 default:
+                    // Unknown key, potentially skip data if length is known/determinable,
+                    // otherwise, this might indicate a parsing error.
+                    // For now, do nothing and rely on subsequent keys/checks.
+                    break;
+            }
+            // Exit loop if buffer becomes unreadable to prevent further errors
+            if (!buf.isReadable()) {
                 break;
             }
         }
 
+        // Check cell tower information validity before setting network
+        // Ensure getCellId() returns Long, not primitive long, to allow null check.
+        // The check 'cellTower.getCellId() != null && cellTower.getCellId() != 0' is
+        // the correct way to handle potential null and check against zero for Long type.
+        // No NPE should occur here if CellTower uses Long for cellId.
         if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
             && cellTower.getCellId() != null && cellTower.getCellId() != 0
             && cellTower.getLocationAreaCode() != null) {
             position.setNetwork(new Network(cellTower));
         } else if (cellTower.getSignalStrength() != null) {
+            // If network information is incomplete or invalid (e.g., cellId 0),
+            // but signal strength is available, use it for the standard RSSI key.
             position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
         }
     }
\ No newline at end of file
