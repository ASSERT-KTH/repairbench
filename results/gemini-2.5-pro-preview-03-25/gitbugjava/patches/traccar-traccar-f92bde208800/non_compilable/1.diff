diff --git a/tmp/7365c422-6f20-44f0-863e-cbc12bb36a9e_buggy.java b/tmp/cd5a5e8b-da3e-41ea-882d-8b4b46f52b21_fixed.java
index 33e2e76..036bdea 100644
--- a/tmp/7365c422-6f20-44f0-863e-cbc12bb36a9e_buggy.java
+++ b/tmp/cd5a5e8b-da3e-41ea-882d-8b4b46f52b21_fixed.java
@@ -1,126 +1,207 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
         CellTower cellTower = new CellTower();
+        // Check if form is null or too short to contain keys
+        if (form == null || form.length() <= 1) {
+            return; // Nothing to process
+        }
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Basic check to prevent IndexOutOfBoundsException if buffer is exhausted prematurely
+            // More specific checks per key type might be needed for full robustness.
+            if (!buf.isReadable()) {
+                break; // Stop processing if buffer is empty
+            }
             switch (key) {
                 case "SA":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case "MV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "BV":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case "GQ":
+                    if (buf.readableBytes() >= 1) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
+                    }
                     break;
                 case "CE":
+                    if (buf.readableBytes() >= 4) {
                         cellTower.setCellId(buf.readUnsignedInt());
+                    }
                     break;
                 case "LC":
+                    if (buf.readableBytes() >= 2) {
                         cellTower.setLocationAreaCode(buf.readUnsignedShort());
+                    }
                     break;
                 case "CN":
+                    if (buf.readableBytes() >= 4) {
                         int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
+                    }
                     break;
                 case "AT":
+                    if (buf.readableBytes() >= 4) {
                         position.setAltitude(buf.readUnsignedInt());
+                    }
                     break;
                 case "RP":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                    }
                     break;
                 case "GS":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case "DT":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
+                    }
                     break;
                 case "VN":
+                    // Assuming readString handles buffer length checks or protocol ensures termination
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
+                    if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // mass air flow rate
+                    }
                     break;
                 case "EL":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    }
                     break;
                 case "ET":
+                    if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "FL":
+                    if (buf.readableBytes() >= 1) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case "ML":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
+                    if (buf.readableBytes() >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case "CI":
-                    readString(buf); // format string
-                    break;
+                    // The 'form' string itself represents the custom data format.
+                    // This key 'CI' likely indicated the presence of this custom block in the original message structure.
+                    // It doesn't require reading anything further from the data buffer *within* this method,
+                    // as the format string is already known and provided via the 'form' parameter.
+                    // readString(buf); // BUG: Incorrectly tried to read another format string from the data payload.
+                    break; // FIX: Correctly do nothing for the CI key itself.
                 case "AV1":
+                     if (buf.readableBytes() >= 2) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
+                    }
                     break;
                 case "NC":
+                    // Assuming readString handles buffer length checks
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
+                     if (buf.readableBytes() >= 2) {
                         buf.readUnsignedShort(); // max speed between reports
+                    }
                     break;
                 case "GL":
+                    // Assuming readString handles buffer length checks
                     readString(buf); // google link
                     break;
                 case "MA":
+                    // Assuming readString handles buffer length checks
                     readString(buf); // mac address
                     break;
                 case "PD":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
+                    // Assuming readString handles buffer length checks
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imsi
+                    }
                     break;
                 case "GN":
-                    buf.skipBytes(60); // g sensor data
+                    int gnBytesToSkip = Math.min(60, buf.readableBytes());
+                    buf.skipBytes(gnBytesToSkip); // g sensor data
                     break;
                 case "GV":
-                    buf.skipBytes(6); // maximum g force
+                    int gvBytesToSkip = Math.min(6, buf.readableBytes());
+                    buf.skipBytes(gvBytesToSkip); // maximum g force
                     break;
                 case "ME":
+                    if (buf.readableBytes() >= 8) {
                         buf.readLong(); // imei
+                    }
                     break;
                 case "IA":
+                    if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // intake air temperature
+                    }
                     break;
                 case "MP":
+                     if (buf.readableBytes() >= 1) {
                         buf.readUnsignedByte(); // manifold absolute pressure
+                    }
                     break;
                 default:
+                    // Ignore unknown keys as per original behavior
                     break;
             }
         }
 
-        if (cellTower.getMobileCountryCode() != null
+        // Assign Network info if available and valid
+        // Check CellId validity (non-null and non-zero, assuming 0 is invalid)
+        boolean hasCellTowerInfo = cellTower.getMobileCountryCode() != null
                 && cellTower.getMobileNetworkCode() != null
                 && cellTower.getCellId() != null && cellTower.getCellId() != 0
-            && cellTower.getLocationAreaCode() != null) {
+                && cellTower.getLocationAreaCode() != null;
+
+        if (hasCellTowerInfo) {
             position.setNetwork(new Network(cellTower));
         } else if (cellTower.getSignalStrength() != null) {
+            // Fallback: Set RSSI from CellTower signal strength if full network info is missing
+            // This might overwrite RSSI set by GS key, which could be intended or unintended. Keeping original logic.
             position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
         }
     }
\ No newline at end of file
