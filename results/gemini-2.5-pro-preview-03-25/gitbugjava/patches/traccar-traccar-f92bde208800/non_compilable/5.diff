diff --git a/tmp/583bfe72-a02f-4180-a432-9d560e3d6e1d_buggy.java b/tmp/d20cbef8-7d0f-43e9-90ce-40b6e88e2a23_fixed.java
index 33e2e76..19b35ee 100644
--- a/tmp/583bfe72-a02f-4180-a432-9d560e3d6e1d_buggy.java
+++ b/tmp/d20cbef8-7d0f-43e9-90ce-40b6e88e2a23_fixed.java
@@ -1,126 +1,144 @@
     private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
+        // Check if the form string is valid and contains keys
+        if (form == null || form.length() <= 1) {
+            return; // No custom data keys to process
+        }
+
         CellTower cellTower = new CellTower();
         String[] keys = form.substring(1).split("%");
         for (String key : keys) {
+            // Prevent NPE if split results in empty strings for some reason
+            if (key.isEmpty()) {
+                continue;
+            }
             switch (key) {
                 case "SA":
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case "MV":
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case "BV":
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     break;
                 case "GQ":
                     cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     break;
                 case "CE":
                     cellTower.setCellId(buf.readUnsignedInt());
                     break;
                 case "LC":
                     cellTower.setLocationAreaCode(buf.readUnsignedShort());
                     break;
                 case "CN":
                     int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                     cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                     cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
                     break;
                 case "RL":
                     buf.readUnsignedByte(); // rxlev
                     break;
                 case "PC":
                     position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
                     break;
                 case "AT":
                     position.setAltitude(buf.readUnsignedInt());
                     break;
                 case "RP":
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     break;
                 case "GS":
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case "DT":
                     position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
                     break;
                 case "VN":
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
                     buf.readUnsignedShort(); // mass air flow rate
                     break;
                 case "EL":
                     buf.readUnsignedByte(); // engine load
                     break;
                 case "TR":
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case "ET":
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
                     break;
                 case "FL":
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case "ML":
                     buf.readUnsignedByte(); // mil status
                     break;
                 case "FC":
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case "CI":
-                    readString(buf); // format string
+                    readString(buf); // format string (already processed to get here)
                     break;
                 case "AV1":
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     break;
                 case "NC":
                     readString(buf); // gsm neighbor cell info
                     break;
                 case "SM":
                     buf.readUnsignedShort(); // max speed between reports
                     break;
                 case "GL":
                     readString(buf); // google link
                     break;
                 case "MA":
                     readString(buf); // mac address
                     break;
                 case "PD":
                     buf.readUnsignedByte(); // pending code status
                     break;
                 case "CD":
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
                     buf.readLong(); // imsi
                     break;
                 case "GN":
                     buf.skipBytes(60); // g sensor data
                     break;
                 case "GV":
                     buf.skipBytes(6); // maximum g force
                     break;
                 case "ME":
                     buf.readLong(); // imei
                     break;
                 case "IA":
                     buf.readUnsignedByte(); // intake air temperature
                     break;
                 case "MP":
                     buf.readUnsignedByte(); // manifold absolute pressure
                     break;
                 default:
+                    // Handle unknown or unsupported keys if necessary, e.g., logging
+                    // For now, just ignore them as in the original code
                     break;
             }
         }
 
-        if (cellTower.getMobileCountryCode() != null
-            && cellTower.getMobileNetworkCode() != null
-            && cellTower.getCellId() != null && cellTower.getCellId() != 0
-            && cellTower.getLocationAreaCode() != null) {
+        // Retrieve cell tower attributes safely checking for null
+        Integer mcc = cellTower.getMobileCountryCode();
+        Integer mnc = cellTower.getMobileNetworkCode();
+        Long cellId = cellTower.getCellId(); // Use Long as cellId is read as unsigned int
+        Integer lac = cellTower.getLocationAreaCode();
+        Integer signalStrength = cellTower.getSignalStrength();
+
+        // Check if all necessary cell tower information is present and valid
+        if (mcc != null && mnc != null && lac != null && cellId != null && cellId != 0) {
             position.setNetwork(new Network(cellTower));
-        } else if (cellTower.getSignalStrength() != null) {
-            position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
+        } else if (signalStrength != null) {
+            // If full network info isn't available, use signal strength for RSSI
+            // This might overwrite RSSI set by "GS" key, prioritizing "GQ" if network is incomplete
+            position.set(Position.KEY_RSSI, signalStrength);
         }
     }
\ No newline at end of file
