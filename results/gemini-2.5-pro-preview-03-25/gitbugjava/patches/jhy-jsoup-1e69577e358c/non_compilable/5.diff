diff --git a/tmp/008f5c69-1599-4a40-a8e6-79fcf7159938_buggy.java b/tmp/efed2ed0-4b31-4975-830e-23cdba8218d6_fixed.java
index c9c77a4..e38e085 100644
--- a/tmp/008f5c69-1599-4a40-a8e6-79fcf7159938_buggy.java
+++ b/tmp/efed2ed0-4b31-4975-830e-23cdba8218d6_fixed.java
@@ -1,35 +1,98 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
-
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
-                }
-                if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
-                }
-                normUrl = StringUtil.releaseBuilder(sb);
+            // Manually assemble the URL string using raw components where possible,
+            // to preserve original encoding (like %2B in path), handle IDN hosts,
+            // and then parse with URI for validation and final ASCII string generation.
+
+            // 1. Prepare components
+            String protocol = u.getProtocol();
+            String host = u.getHost();
+            // Apply Punycode to the decoded host provided by u.getHost()
+            String asciiHost = (host != null) ? IDN.toASCII(host) : null;
+            int port = u.getPort();
+            // Use raw components to preserve original encoding as much as possible
+            String rawPath = u.getRawPath();
+            String rawQuery = u.getRawQuery(); // Keep original query raw unless overridden by 'q'
+            String fragment = u.getRef(); // URL.getRef() returns decoded fragment
+            // Use raw user info (available Java 7+) to preserve encoding
+            String rawUserInfo = u.getRawUserInfo();
+
+            // 2. Assemble the URL string
+            StringBuilder urlSb = StringUtil.borrowBuilder();
+            urlSb.append(protocol);
+            urlSb.append("://");
+            if (rawUserInfo != null) {
+                 urlSb.append(rawUserInfo).append('@'); // Append raw user info
+            }
+            // Append host, handling null case (e.g., mailto:)
+            if (asciiHost != null) {
+                urlSb.append(asciiHost);
+            }
+            if (port != -1) {
+                 urlSb.append(':').append(port);
+            }
+
+            // Append Path - ensure '/' separator if needed for authority based URLs
+            // Check if authority is present and path is null or empty
+            boolean hasAuthority = rawUserInfo != null || asciiHost != null;
+            if (rawPath != null && !rawPath.isEmpty()) {
+                // Check if path needs a leading '/' if authority is present but path doesn't start with '/'
+                // (Should generally be handled by URL class structure, but double-check)
+                if (hasAuthority && !rawPath.startsWith("/")) {
+                    urlSb.append('/');
+                }
+                urlSb.append(rawPath);
+            } else if (hasAuthority && (q != null || rawQuery != null || fragment != null)) {
+                 // Add "/" between authority and query/fragment if path is empty (common for http/s, ftp)
+                 // Check specific protocols? Or assume common ones need it.
+                 if ("http".equals(protocol) || "https".equals(protocol) || "ftp".equals(protocol)) {
+                     urlSb.append('/');
+                 }
+            }
+
+            // Append Query - use new query 'q' if set, otherwise use original raw query
+            boolean queryAppended = false;
+            if (q != null) { // New query data from .data() methods
+                String queryString = StringUtil.releaseBuilder(q); // Assuming q is the StringBuilder for query params
+                q = null; // Mark as consumed
+                if (queryString != null && !queryString.isEmpty()) {
+                    urlSb.append('?');
+                    // Encode the query string built by application code (e.g. from .data methods)
+                    appendToAscii(queryString, true, urlSb); // spaceAsPlus = true
+                    queryAppended = true;
+                }
+            }
+            // If no new query was appended, use the original raw query from the URL
+            if (!queryAppended && rawQuery != null) {
+                 urlSb.append('?').append(rawQuery);
+            }
+
+            // Append Fragment - encode the original fragment (URL.getRef() provides decoded)
+            if (fragment != null) {
+                urlSb.append('#');
+                appendToAscii(fragment, false, urlSb); // spaceAsPlus = false
             }
+
+            String assembledUrl = StringUtil.releaseBuilder(urlSb);
+
+            // 3. Parse the assembled string with URI to validate and get final ASCII string.
+            // This step implicitly handles some normalization and ensures the syntax is correct.
+            // It does NOT normalize path segments like "." or "..". This matches original behavior.
+            URI parsedUri = new URI(assembledUrl);
+
+            // 4. Get the final URL string in ASCII form (correctly handling IDN, percent-encoding)
+            String normUrl = parsedUri.toASCIIString();
+
+            // 5. Create the final URL object
+            // Note: We reassign 'u' field here, as in the original code.
             u = new URL(normUrl);
             return u;
+
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
+            // The UnsupportedEncodingException should not happen if appendToAscii uses UTF-8
             assert Validate.assertFail(e.toString());
-            return u;
+            return u; // Return original URL on failure
         }
     }
\ No newline at end of file
