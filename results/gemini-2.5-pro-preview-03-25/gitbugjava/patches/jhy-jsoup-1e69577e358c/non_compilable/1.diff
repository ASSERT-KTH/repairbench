diff --git a/tmp/4014f0f5-a0ab-49eb-8079-3dd09f288f75_buggy.java b/tmp/9ed17efb-7593-42eb-8060-d0e404b272af_fixed.java
index c9c77a4..d110a4c 100644
--- a/tmp/4014f0f5-a0ab-49eb-8079-3dd09f288f75_buggy.java
+++ b/tmp/9ed17efb-7593-42eb-8060-d0e404b272af_fixed.java
@@ -1,35 +1,46 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
+            // We previously decoded the path component; that was wrong, as it could
+            // lead to encoded entities (%2B) being decoded to their bare char (+)
+            // which is then not re-encoded, changing the meaning of the path component.
+            // The URI class expects the path component to be provided with existing encoding preserved.
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                IDN.toASCII(decodePart(u.getHost())), // puny-code host
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                u.getPath(), // pass path without decoding
+                null, null // query and fragment appended later so as not to encode them
             );
 
-            String normUrl = uri.toASCIIString();
+            String normUrl = uri.toASCIIString(); // encodes path, including non-ascii chars etc.
+
+            // now append query strings / fragments if defined
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
+                    // Query string needs to be assembled manually to avoid unwanted encoding
+                    // of permissible chars like = & ; etc within the query name/value pairs
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
+                    // Fragment needs to be appended manually as well - URI constructor would encode incorrectly
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
+
+            // replace original URL with normalized version
             u = new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
-            assert Validate.assertFail(e.toString());
-            return u;
+            assert Validate.assertFail("Could not normalize URL " + this.url + ": " + e.getMessage());
+            return u; // return original on error
         }
     }
\ No newline at end of file
