diff --git a/tmp/6cc73626-20ae-4918-aefa-5496b7da3276_buggy.java b/tmp/74e1eefe-c5fb-4c3d-afb8-11e5f30c8e54_fixed.java
index c9c77a4..dadc3de 100644
--- a/tmp/6cc73626-20ae-4918-aefa-5496b7da3276_buggy.java
+++ b/tmp/74e1eefe-c5fb-4c3d-afb8-11e5f30c8e54_fixed.java
@@ -1,35 +1,44 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
+            // We use getRawPath() to retain original escaping, getPath() would decode it.
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                IDN.toASCII(decodePart(u.getHost())), // puny-code host
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                u.getRawPath(), // Use raw path to preserve original encoding e.g. %2B
+                null, null // query and fragment appended later so as not to double-encode
             );
 
-            String normUrl = uri.toASCIIString();
+            String normUrl = uri.toASCIIString(); // generates encoded URL string
+
+            // Append query and fragment, which are not encoded by URI class
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
+                    // Query needs specific encoding (application/x-www-form-urlencoded)
+                    // Let's assume appendToAscii handles this correctly.
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
+                    // Fragment encoding rules are slightly different, assume appendToAscii handles it.
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
+
+            // Create the final URL object
             u = new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
+            // Using getRawPath() should minimize syntax exceptions if the original URL was valid.
             assert Validate.assertFail(e.toString());
-            return u;
+            return u; // Return the original, less normalized URL on error
         }
     }
\ No newline at end of file
