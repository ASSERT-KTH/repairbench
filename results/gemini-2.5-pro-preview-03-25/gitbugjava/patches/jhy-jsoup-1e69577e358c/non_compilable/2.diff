diff --git a/tmp/82dc78c9-d793-463b-888b-9b43b834ddfd_buggy.java b/tmp/64f72c2d-c321-4669-906a-def47340ab5a_fixed.java
index c9c77a4..3e8e9f8 100644
--- a/tmp/82dc78c9-d793-463b-888b-9b43b834ddfd_buggy.java
+++ b/tmp/64f72c2d-c321-4669-906a-def47340ab5a_fixed.java
@@ -1,35 +1,44 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // use the URI class to encode non-ascii in path. The URI class will correctly handle existing % encoding.
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+                IDN.toASCII(decodePart(u.getHost())), // puny-code host
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                u.getPath(), // Pass the path directly, don't decode first
+                null, null // query and fragment appended later so as not to encode using URI constructor
             );
 
-            String normUrl = uri.toASCIIString();
+            String normUrl = uri.toASCIIString(); // Get the properly encoded URI string ( పథ part)
+            
+            // Append query and fragment, encoding them manually
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
+                    // appendToAscii needs to handle encoding of the query string parts correctly
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
+                    // appendToAscii needs to handle encoding of the fragment correctly
+                    // u.getRef() returns the decoded fragment, so it needs encoding
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
-            u =  new URL(normUrl);
-            return u;
+            
+            // Create the final URL object from the normalized string
+            // Note: Reassigning 'u' here shadows the input 'u' but matches original logic.
+            URL finalUrl = new URL(normUrl); 
+            return finalUrl; // Return the newly constructed URL
+            
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
-            return u;
+            return u; // Return the original, unmodified URL on error
         }
     }
\ No newline at end of file
