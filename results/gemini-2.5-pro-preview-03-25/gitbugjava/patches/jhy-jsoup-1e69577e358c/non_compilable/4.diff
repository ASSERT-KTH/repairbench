diff --git a/tmp/9103e946-65e2-4ece-83a5-71c855a16963_buggy.java b/tmp/a3e874e0-112e-4888-bcea-7a90fc29ff6c_fixed.java
index c9c77a4..88cb739 100644
--- a/tmp/9103e946-65e2-4ece-83a5-71c855a16963_buggy.java
+++ b/tmp/a3e874e0-112e-4888-bcea-7a90fc29ff6c_fixed.java
@@ -1,35 +1,70 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
-
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+            // 1. Convert URL to URI once to access raw components and handle IDN normalization.
+            // URI handles percent-encoding correctly and preserves original encoding in raw components like path, query, fragment.
+            // It also automatically handles IDN conversion for the host.
+            final URI uri = u.toURI();
+
+            // 2. Start building the final URL string using StringBuilder
+            final StringBuilder sb = StringUtil.borrowBuilder();
+            sb.append(uri.getScheme()).append("://");
+            if (uri.getRawUserInfo() != null)
+                sb.append(uri.getRawUserInfo()).append('@');
+
+            // Host is already appropriately handled (IDN converted to ASCII) by uri.getHost()
+            sb.append(uri.getHost());
+
+            if (uri.getPort() != -1)
+                sb.append(':').append(uri.getPort());
+
+            // Use the raw path to preserve original percent-encoding (e.g., %2B remains %2B, not decoded to +)
+            sb.append(uri.getRawPath());
+
+            // 3. Handle query part: combine original query (if any) and new parameters (if any)
+            final String originalRawQuery = uri.getRawQuery();
+            // 'q' is a StringBuilder field possibly holding pre-encoded key=value pairs for *new* parameters
+            // These are typically added via req.data() or req.query(), which use URLEncoder (+ for space)
+            final String newQuery = (q != null) ? StringUtil.releaseBuilder(q) : null;
+            q = null; // q is now released (or was null), reset field
+
+            if (originalRawQuery != null) {
+                // Append original query part (preserving its encoding)
+                sb.append('?').append(originalRawQuery);
+                if (newQuery != null) {
+                    // Append new query parameters after the original ones, using '&' separator
+                    sb.append('&').append(newQuery);
+                }
+            } else if (newQuery != null) {
+                // Append new query parameters as the only query part, using '?' separator
+                sb.append('?').append(newQuery);
+            }
+
+            // 4. Handle fragment part: use the raw fragment to preserve original encoding
+            final String rawFragment = uri.getRawFragment();
+            if (rawFragment != null) {
+                sb.append('#').append(rawFragment);
+            }
+
+            // 5. Create the final URL object from the constructed string
+            final String normUrl = StringUtil.releaseBuilder(sb);
+            u = new URL(normUrl); // URL constructor parses the potentially complex final string
+            return u;
+
+        } catch (URISyntaxException | MalformedURLException e) {
+            // URISyntaxException: Can happen if the original URL 'u' is malformed wrt URI spec (e.g. invalid characters like '|' not properly escaped).
+            // MalformedURLException: Can happen if the final constructed normUrl string is somehow invalid for the URL constructor.
+
+            // Ensure 'q' StringBuilder is released if it was somehow held due to exception path.
             if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                try { StringUtil.releaseBuilder(q); } catch (IllegalArgumentException ignored) {}
+                q = null; // reset field
             }
-                if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
-                }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
-            u =  new URL(normUrl);
-            return u;
-        } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
-            assert Validate.assertFail(e.toString());
-            return u;
+
+            // Log the failure for debugging / testing via assertion.
+            // In production (assertions disabled), return the original URL as a fallback.
+            assert Validate.assertFail("Could not build normalized URL: " + e);
+            return u; // Return the original URL
         }
+        // Note: Removed UnsupportedEncodingException from catch block as it's not directly thrown by URI/URL methods used,
+        // and appendToAscii (which could throw it) is no longer used here. URLEncoder used elsewhere wraps it.
     }
\ No newline at end of file
