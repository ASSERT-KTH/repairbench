diff --git a/tmp/ef07c478-1ca8-4816-bf48-f7d1b0d3703b_buggy.java b/tmp/112d9d96-6d77-4b63-b036-051387911d27_fixed.java
index c9c2b44..bf056bc 100644
--- a/tmp/ef07c478-1ca8-4816-bf48-f7d1b0d3703b_buggy.java
+++ b/tmp/112d9d96-6d77-4b63-b036-051387911d27_fixed.java
@@ -1,13 +1,50 @@
         @Override
         public boolean matches(Element root, Element element) {
-            // evaluate from last to first
-            for (int i = evaluators.size() -1; i >= 0; --i) {
-                if (element == null)
+            // 'element' is the potentially matching element found by the rightmost evaluator part.
+            // 'root' is the context element where the search started.
+            // This evaluator checks if 'element' has ancestors matching the 'evaluators' chain,
+            // stopping the search upwards when 'root' is reached.
+
+            // currentSearchStart is the element from where the *next* upward search for an ancestor should begin.
+            // Initialize it to the parent of the element that matched the previous part of the selector.
+            Element currentSearchStart = element.parent();
+
+            // Iterate through the ancestor evaluators (e.g., for "A B C", evaluators = [A, B]) from right to left (B, then A)
+            for (int i = evaluators.size() - 1; i >= 0; i--) {
+                Evaluator requiredAncestorEval = evaluators.get(i); // The evaluator we need to match (e.g., B)
+                Element foundElement = null; // The element that matches the current evaluator
+
+                // Start searching upwards for a match for requiredAncestorEval, beginning from currentSearchStart
+                Element currentCheck = currentSearchStart;
+                while (currentCheck != null) {
+                    // Check if the current ancestor matches the required evaluator
+                    if (requiredAncestorEval.matches(root, currentCheck)) {
+                        foundElement = currentCheck; // Found the match
+                        break;
+                    }
+                    // Stop searching upwards if we have reached the root of the query context
+                    if (currentCheck == root) {
+                        break;
+                    }
+                    currentCheck = currentCheck.parent(); // Move up to the next parent
+                }
+
+                // If no match was found for this required ancestor evaluator below the root boundary
+                if (foundElement == null) {
                     return false;
-                Evaluator eval = evaluators.get(i);
-                if (!eval.matches(root, element))
+                }
+
+                // Match found at foundElement. For the next evaluator (i-1),
+                // the search must start from the parent of foundElement.
+                currentSearchStart = foundElement.parent();
+
+                // Optimization: If the element found was root, and there are more evaluators left (i > 0),
+                // then we cannot find further ancestors within the root context, so it's not a match.
+                if (foundElement == root && i > 0) {
                     return false;
-                element = element.parent();
                 }
+            }
+
+            // If all ancestor evaluators were successfully matched by ancestors of 'element' within the root scope.
             return true;
         }
\ No newline at end of file
