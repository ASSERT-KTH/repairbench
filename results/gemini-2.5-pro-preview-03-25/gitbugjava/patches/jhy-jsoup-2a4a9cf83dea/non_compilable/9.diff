diff --git a/tmp/6107da3c-bf08-4fb1-b177-922f2860c3f1_buggy.java b/tmp/340a7173-ff9b-4bdb-8d1d-6e5a769cc41b_fixed.java
index c9c2b44..ba09354 100644
--- a/tmp/6107da3c-bf08-4fb1-b177-922f2860c3f1_buggy.java
+++ b/tmp/340a7173-ff9b-4bdb-8d1d-6e5a769cc41b_fixed.java
@@ -1,13 +1,36 @@
         @Override
         public boolean matches(Element root, Element element) {
-            // evaluate from last to first
-            for (int i = evaluators.size() -1; i >= 0; --i) {
-                if (element == null)
+            // This evaluator implements the parent selector ' ' (e.g., "div p").
+            // It checks if the element has an ancestor matching the evaluator.
+            // Root is the context element for the selector, element is the candidate element.
+
+            // Prevent matching the root element itself as its own ancestor.
+            if (root == element)
                 return false;
-                Evaluator eval = evaluators.get(i);
-                if (!eval.matches(root, element))
-                    return false;
-                element = element.parent();
+
+            // Assuming evaluators contains the single evaluator for the ancestor condition.
+            // E.g., for "ul li", when checking 'li', this evaluator is Parent(Tag("ul")),
+            // and evaluators should contain just Tag("ul").
+            // A robust implementation might check evaluators.size(), but we assume it's correctly populated.
+            if (evaluators.isEmpty()) {
+                 return false; // Or handle as an error case. No ancestor condition means no match.
+            }
+            Evaluator ancestorEval = evaluators.get(0); // Get the evaluator for the required ancestor.
+
+            Element parent = element.parent();
+            while (parent != null) {
+                // Check if the current ancestor matches the evaluator's criteria.
+                if (ancestorEval.matches(root, parent))
+                    return true; // Found a matching ancestor.
+
+                // Stop searching upwards if we hit the root of the selection context.
+                // This prevents matching elements outside the intended scope.
+                if (parent == root)
+                    break;
+
+                parent = parent.parent(); // Move up to the next ancestor.
             }
-            return true;
+
+            // No ancestor matched the criteria up to the root.
+            return false;
         }
\ No newline at end of file
