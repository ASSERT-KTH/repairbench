diff --git a/tmp/2d2592b9-3101-4bf2-8135-d1c731cad0ec_buggy.java b/tmp/444edeec-8ce1-4062-9e50-e5ee59d63c91_fixed.java
index 2444d12..9ebb41f 100644
--- a/tmp/2d2592b9-3101-4bf2-8135-d1c731cad0ec_buggy.java
+++ b/tmp/444edeec-8ce1-4062-9e50-e5ee59d63c91_fixed.java
@@ -1,29 +1,43 @@
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
+        try {
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
                 } else { // else pop top two values and perform the operation
+                    // Check if there are enough operands on the stack before popping
+                    if (s.size() < 2) {
+                        throw new IllegalArgumentException("exp is not a proper postfix expression (too few operands for operator).");
+                    }
                     int num2 = s.pop();
                     int num1 = s.pop();
                     String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                        case "/" -> {
+                            if (num2 == 0) {
+                                throw new ArithmeticException("Division by zero.");
+                            }
+                            s.push(num1 / num2);
+                        }
+                        default -> throw new IllegalArgumentException("exp contains an unknown operation: " + op);
                     }
                     //  "+", "-", "*", "/"
                 }
             }
-        tokens.close();
+        } finally {
+            tokens.close(); // Ensure scanner is closed even if exceptions occur
+        }
+
+        // After processing all tokens, the stack should contain exactly one result
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            throw new IllegalArgumentException("exp is not a proper postfix expression (incorrect number of operands/operators).");
         }
         return s.pop();
     }
\ No newline at end of file
