diff --git a/tmp/ce0d1829-15e9-494b-8366-fb6a8899e212_buggy.java b/tmp/ec8ed724-f768-47d9-870d-4c7396536755_fixed.java
index 2444d12..1310cfa 100644
--- a/tmp/ce0d1829-15e9-494b-8366-fb6a8899e212_buggy.java
+++ b/tmp/ec8ed724-f768-47d9-870d-4c7396536755_fixed.java
@@ -1,29 +1,48 @@
+import java.util.Scanner;
+import java.util.Stack; // Make sure Stack is imported
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            } else { // else it's an operator
+                String op = tokens.next();
+
+                // Check if there are enough operands before popping
+                if (s.size() < 2) {
+                    tokens.close(); // Close the scanner before throwing
+                    throw new IllegalArgumentException("exp is not a proper postfix expression (too few operands for operator '" + op + "').");
+                }
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        if (num2 == 0) {
+                            tokens.close(); // Close the scanner before throwing
+                            throw new ArithmeticException("Division by zero encountered.");
+                        }
+                        s.push(num1 / num2);
+                    }
+                    default -> {
+                        tokens.close(); // Close the scanner before throwing
+                        throw new IllegalArgumentException("exp contains an unknown operation: '" + op + "'");
+                    }
                 }
-                //  "+", "-", "*", "/"
             }
         }
         tokens.close();
+
+        // Check if the final stack size is exactly 1
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            throw new IllegalArgumentException("exp is not a proper postfix expression (final stack size is not 1).");
         }
         return s.pop();
     }
\ No newline at end of file
