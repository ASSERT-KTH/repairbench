diff --git a/tmp/0951f85d-62d2-449a-b2cb-42f177381831_buggy.java b/tmp/94ac867b-3b9e-4b98-ade2-4e6e4f6d2b92_fixed.java
index 2444d12..021b6bf 100644
--- a/tmp/0951f85d-62d2-449a-b2cb-42f177381831_buggy.java
+++ b/tmp/94ac867b-3b9e-4b98-ade2-4e6e4f6d2b92_fixed.java
@@ -1,29 +1,54 @@
+import java.util.EmptyStackException;
+import java.util.Scanner;
+import java.util.Stack;
+
+// The containing class is assumed, only the method is provided.
+public class StackPostfixNotation {
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
+        // Use try-with-resources to ensure the scanner is closed automatically
+        try (Scanner tokens = new Scanner(exp)) {
 
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+                } else { // else it's an operator
+                    String op = tokens.next();
+
+                    // Check if there are enough operands on the stack before popping
+                    if (s.size() < 2) {
+                        // Throw IllegalArgumentException for malformed expressions (operator requires two operands)
+                        // This replaces the original behavior which threw EmptyStackException
+                        throw new IllegalArgumentException("exp is not a proper postfix expression: Not enough operands for operator '" + op + "'.");
+                    }
+
                     int num2 = s.pop();
                     int num1 = s.pop();
-                String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                        case "/" -> {
+                            // Check for division by zero
+                            if (num2 == 0) {
+                                throw new ArithmeticException("Division by zero.");
                             }
-                //  "+", "-", "*", "/"
+                            s.push(num1 / num2);
                         }
+                        default -> throw new IllegalArgumentException("exp contains an unknown operation: '" + op + "'.");
                     }
-        tokens.close();
+                }
+            }
+        } // Scanner is automatically closed here due to try-with-resources
+
+        // After processing all tokens, the stack should contain exactly one result
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            // Handles cases like "1 2" (too many operands left) or "" (empty expression) or "1 +" (insufficient operands processed)
+            throw new IllegalArgumentException("exp is not a proper postfix expression: Final stack size is " + s.size() + ", expected 1.");
         }
         return s.pop();
     }
+}
\ No newline at end of file
