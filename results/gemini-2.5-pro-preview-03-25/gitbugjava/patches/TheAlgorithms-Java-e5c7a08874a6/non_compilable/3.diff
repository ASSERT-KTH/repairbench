diff --git a/tmp/5c736bfa-3015-40d4-b8e1-15c176f366d8_buggy.java b/tmp/f25e2eb6-5c91-4d57-9f5f-2db3495d548e_fixed.java
index 2444d12..157a8a3 100644
--- a/tmp/5c736bfa-3015-40d4-b8e1-15c176f366d8_buggy.java
+++ b/tmp/f25e2eb6-5c91-4d57-9f5f-2db3495d548e_fixed.java
@@ -1,29 +1,54 @@
+import java.util.Scanner;
+import java.util.Stack;
+import java.util.EmptyStackException; // Import necessary for clarification, though handled now
+
 // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
-        Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
+    // Check for null or empty input expression
+    if (exp == null || exp.trim().isEmpty()) {
+        throw new IllegalArgumentException("Expression cannot be null or empty.");
+    }
+
+    Stack<Integer> s = new Stack<>(); // Use diamond operator for cleaner syntax
+    // Use try-with-resources for Scanner to ensure it's closed automatically
+    try (Scanner tokens = new Scanner(exp)) {
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            } else { // else it's an operator
+                String op = tokens.next();
+
+                // Check if there are enough operands on the stack BEFORE popping
+                // This prevents EmptyStackException and throws the expected IllegalArgumentException
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression. Insufficient operands for operator: " + op);
+                }
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        // Although not in the original code, checking for division by zero is good practice.
+                        // However, sticking to the original behavior unless specified otherwise.
+                        // if (num2 == 0) {
+                        //     throw new ArithmeticException("Division by zero.");
+                        // }
+                        s.push(num1 / num2); // Original behavior: throws ArithmeticException if num2 is 0
                     }
-                //  "+", "-", "*", "/"
+                    default -> throw new IllegalArgumentException("exp contains an unknown operation: " + op);
                 }
             }
-        tokens.close();
+        }
+    } // Scanner is automatically closed here due to try-with-resources
+
+    // Final check: After processing all tokens, the stack should contain exactly one element (the result)
     if (s.size() != 1) {
+        // Using the original exception message for consistency
         throw new IllegalArgumentException("exp is not a proper postfix expression.");
     }
     return s.pop();
 }
\ No newline at end of file
