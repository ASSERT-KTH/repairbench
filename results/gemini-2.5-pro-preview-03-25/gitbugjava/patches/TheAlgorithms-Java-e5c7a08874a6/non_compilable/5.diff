diff --git a/tmp/9ce99912-a09d-4b45-9d64-212580c35d45_buggy.java b/tmp/d75b8701-f493-4523-b811-4b7bbae342bd_fixed.java
index 2444d12..09caa50 100644
--- a/tmp/9ce99912-a09d-4b45-9d64-212580c35d45_buggy.java
+++ b/tmp/d75b8701-f493-4523-b811-4b7bbae342bd_fixed.java
@@ -1,29 +1,55 @@
+import java.util.EmptyStackException;
+import java.util.Scanner;
+import java.util.Stack;
+
+/**
+ * Utility class for handling postfix notation expressions.
+ */
+public class StackPostfixNotation { // Added class wrapper for context, will remove in final output
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
-
+        // Use try-with-resources for the Scanner to ensure it's closed
+        try (Scanner tokens = new Scanner(exp)) {
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+                } else { // else it's an operator
+                    String op = tokens.next();
+
+                    // Check if there are enough operands on the stack BEFORE popping
+                    if (s.size() < 2) {
+                        // Throw IllegalArgumentException as specified by tests for malformed expressions
+                        throw new IllegalArgumentException("exp is not a proper postfix expression (too few operands for operator '" + op + "').");
+                    }
+                    // Now it's safe to pop
                     int num2 = s.pop();
                     int num1 = s.pop();
-                String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                        case "/" -> {
+                            // Add check for division by zero
+                            if (num2 == 0) {
+                                throw new ArithmeticException("Division by zero encountered in postfix expression.");
+                            }
+                            s.push(num1 / num2);
+                        }
+                        default -> throw new IllegalArgumentException("exp contains an unknown operation: " + op);
                     }
                     // "+", "-", "*", "/"
                 }
             }
-        tokens.close();
+        } // Scanner is automatically closed here
+
+        // After processing all tokens, the stack should contain exactly one element: the result
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            throw new IllegalArgumentException("exp is not a proper postfix expression (stack size is not 1 at the end).");
         }
+        // Return the final result
         return s.pop();
     }
+} // End of wrapper class
\ No newline at end of file
