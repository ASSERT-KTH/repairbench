diff --git a/tmp/b775af69-6894-4ff9-8d1c-7ad2efbfaedc_buggy.java b/tmp/cdc3546c-9cfa-477d-841e-c837420c633b_fixed.java
index 2444d12..1f361a4 100644
--- a/tmp/b775af69-6894-4ff9-8d1c-7ad2efbfaedc_buggy.java
+++ b/tmp/cdc3546c-9cfa-477d-841e-c837420c633b_fixed.java
@@ -1,29 +1,58 @@
+import java.util.Scanner;
+import java.util.Stack;
+import java.util.EmptyStackException; // Although we aim to avoid it, it's good practice to import if potentially relevant
+
+/**
+ * Utility class for evaluating postfix expressions.
+ */
+public class StackPostfixNotation {
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
+        // Use try-with-resources for the Scanner to ensure it's closed
+        try (Scanner tokens = new Scanner(exp)) {
 
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+                } else { // else it should be an operator
+                    String op = tokens.next();
+
+                    // Check if there are enough operands on the stack BEFORE popping
+                    if (s.size() < 2) {
+                        // Throw IllegalArgumentException if not enough operands for the operator
+                        throw new IllegalArgumentException("exp is not a proper postfix expression (too few operands for operator '" + op + "').");
+                    }
+
+                    // Now it's safe to pop
                     int num2 = s.pop();
                     int num1 = s.pop();
-                String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                        case "/" -> {
+                            if (num2 == 0) {
+                                throw new ArithmeticException("Division by zero encountered.");
                             }
-                //  "+", "-", "*", "/"
+                            s.push(num1 / num2);
                         }
+                        default -> throw new IllegalArgumentException("exp contains an unknown token: " + op);
                     }
-        tokens.close();
+                }
+            }
+        } // Scanner is automatically closed here
+
+        // After processing all tokens, the stack should contain exactly one element: the result.
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            // If not, the expression was malformed (e.g., too many numbers)
+            throw new IllegalArgumentException("exp is not a proper postfix expression (invalid final stack size).");
         }
+
+        // Return the final result
         return s.pop();
     }
+    // Assume other parts of the class exist if necessary, but only provide the fixed function as requested.
+}
\ No newline at end of file
