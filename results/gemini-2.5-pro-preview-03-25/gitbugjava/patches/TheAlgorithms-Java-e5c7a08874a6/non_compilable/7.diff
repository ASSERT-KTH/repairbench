diff --git a/tmp/91180202-3a0e-407c-8ea9-7cecabf7c229_buggy.java b/tmp/ed62de80-5729-4a89-a4d5-3c6105864b9b_fixed.java
index 2444d12..61d7fc4 100644
--- a/tmp/91180202-3a0e-407c-8ea9-7cecabf7c229_buggy.java
+++ b/tmp/ed62de80-5729-4a89-a4d5-3c6105864b9b_fixed.java
@@ -1,29 +1,52 @@
+import java.util.EmptyStackException;
+import java.util.Scanner;
+import java.util.Stack;
+
+// Add the missing imports for the provided code context if needed.
+
+public class StackPostfixNotation { // Assume this class name based on the test name
+
     // Evaluates the given postfix expression string and returns the result.
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
         Scanner tokens = new Scanner(exp);
 
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+            } else { // else it should be an operator
+                String op = tokens.next();
+
+                // Check if there are enough operands on the stack before popping
+                if (s.size() < 2) {
+                    // Throw IllegalArgumentException instead of allowing EmptyStackException
+                    throw new IllegalArgumentException("exp is not a proper postfix expression (too few operands for operator '" + op + "').");
+                }
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
+
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                    case "/" -> {
+                        if (num2 == 0) {
+                            throw new ArithmeticException("Division by zero.");
+                        }
+                        s.push(num1 / num2);
+                    }
+                    default -> throw new IllegalArgumentException("exp contains an unknown operation: '" + op + "'");
                 }
                 //  "+", "-", "*", "/"
             }
         }
         tokens.close();
+        // After processing all tokens, the stack should contain exactly one element: the result.
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            // If not 1, the expression was malformed (e.g., too many numbers, or just operators left)
+            throw new IllegalArgumentException("exp is not a proper postfix expression (invalid final stack size: " + s.size() + ").");
         }
         return s.pop();
     }
+} // Closing brace for the assumed class
\ No newline at end of file
