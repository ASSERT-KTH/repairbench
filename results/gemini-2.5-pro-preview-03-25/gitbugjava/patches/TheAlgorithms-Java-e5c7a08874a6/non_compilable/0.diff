diff --git a/tmp/65d82a5d-bfdc-44af-b846-e4f152e1537d_buggy.java b/tmp/14e84a96-5f08-4f69-a3f7-48d70198f7b3_fixed.java
index 2444d12..0cddb85 100644
--- a/tmp/65d82a5d-bfdc-44af-b846-e4f152e1537d_buggy.java
+++ b/tmp/14e84a96-5f08-4f69-a3f7-48d70198f7b3_fixed.java
@@ -1,29 +1,55 @@
-    // Evaluates the given postfix expression string and returns the result.
+import java.util.EmptyStackException;
+import java.util.Scanner;
+import java.util.Stack;
+
+// The class containing the buggy function (assumed structure)
+class StackPostfixNotation {
+
+    /**
+     * Evaluates the given postfix expression string and returns the result.
+     * Throws IllegalArgumentException for malformed expressions or unknown operations.
+     * Throws ArithmeticException for division by zero.
+     *
+     * @param exp the postfix expression string.
+     * @return the integer result of the evaluation.
+     */
     public static int postfixEvaluate(final String exp) {
         Stack<Integer> s = new Stack<Integer>();
-        Scanner tokens = new Scanner(exp);
-
+        // Use try-with-resources for the Scanner to ensure it's closed
+        try (Scanner tokens = new Scanner(exp)) {
             while (tokens.hasNext()) {
                 if (tokens.hasNextInt()) {
                     s.push(tokens.nextInt()); // If int then push to stack
-            } else { // else pop top two values and perform the operation
+                } else { // else it should be an operator
+                    String op = tokens.next();
+
+                    // Check if there are enough operands BEFORE popping
+                    if (s.size() < 2) {
+                        throw new IllegalArgumentException("exp is not a proper postfix expression (not enough operands for operator '" + op + "').");
+                    }
                     int num2 = s.pop();
                     int num1 = s.pop();
-                String op = tokens.next();
 
                     switch (op) {
                         case "+" -> s.push(num1 + num2);
                         case "-" -> s.push(num1 - num2);
                         case "*" -> s.push(num1 * num2);
-                    case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                        case "/" -> {
+                            if (num2 == 0) {
+                                throw new ArithmeticException("Division by zero.");
                             }
-                //  "+", "-", "*", "/"
+                            s.push(num1 / num2);
                         }
+                        default -> throw new IllegalArgumentException("exp contains an unknown operation: '" + op + "'");
                     }
-        tokens.close();
+                }
+            }
+        } // Scanner is automatically closed here
+
+        // After processing all tokens, the stack should contain exactly one value (the result)
         if (s.size() != 1) {
-            throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            throw new IllegalArgumentException("exp is not a proper postfix expression (invalid final stack size, check operands/operators balance).");
         }
         return s.pop();
     }
+}
\ No newline at end of file
