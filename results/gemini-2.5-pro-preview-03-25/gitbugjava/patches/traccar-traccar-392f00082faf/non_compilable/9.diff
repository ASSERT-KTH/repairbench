diff --git a/tmp/b9cce146-bb5b-4cfb-8f0e-3bdda349c849_buggy.java b/tmp/fc1d07d3-19a6-4127-a742-1fc22ce5be56_fixed.java
index fcb460f..eafc334 100644
--- a/tmp/b9cce146-bb5b-4cfb-8f0e-3bdda349c849_buggy.java
+++ b/tmp/fc1d07d3-19a6-4127-a742-1fc22ce5be56_fixed.java
@@ -1,183 +1,224 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // ,CCE,
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameter Block 1 (1 byte data)
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (extension) {
+                     buf.skipBytes(2); // Skip extension ID (already read logically)
+                } else {
+                     buf.skipBytes(1); // Skip regular ID (already read logically)
+                }
                 switch (id) {
-                    case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
+                    case 0x01: {
+                        int event = buf.readUnsignedByte();
+                        position.set(Position.KEY_EVENT, event);
+                        if (event == 23 || event == 213) { // lock door
+                            position.set(Position.KEY_LOCK, true);
+                        } else if (event == 24 || event == 214) { // unlock door
+                            position.set(Position.KEY_LOCK, false);
+                        }
                         break;
+                    }
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // Skip unknown 1-byte parameter value
                         break;
                 }
             }
 
+            // Parameter Block 2 (2 bytes data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                     buf.skipBytes(2); // Skip extension ID
+                 } else {
+                     buf.skipBytes(1); // Skip regular ID
+                 }
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Assuming scaling based on ASCII format
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
-                    case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
+                    case 0x40: {
+                        int event = buf.readUnsignedShortLE();
+                        position.set(Position.KEY_EVENT, event);
+                        if (event == 23 || event == 213) { // lock door
+                            position.set(Position.KEY_LOCK, true);
+                        } else if (event == 24 || event == 214) { // unlock door
+                            position.set(Position.KEY_LOCK, false);
+                        }
                         break;
+                    }
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE()); // Temperature can be signed
                         break;
                     case 0xC9:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                         buf.readUnsignedShortLE(); // Skip unknown 2-byte parameter value
                         break;
                 }
             }
 
+            // Parameter Block 3 (4 bytes data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                     buf.skipBytes(2); // Skip extension ID
+                 } else {
+                     buf.skipBytes(1); // Skip regular ID
+                 }
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                        position.setTime(new Date((946684800L + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01 base, use long
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                        position.set(Position.KEY_HOURS, UnitsConverter.msFromSeconds(buf.readUnsignedIntLE())); // Use standard key
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        buf.readUnsignedIntLE(); // Skip unknown 4-byte parameter value
                         break;
                 }
             }
 
+            // Parameter Block 4 (variable length data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                     buf.skipBytes(2); // Skip extension ID
+                 } else {
+                     buf.skipBytes(1); // Skip regular ID
+                 }
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
                         buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.01); // +1 for 1-based index
                         break;
                     case 0xFE31:
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                        buf.skipBytes(length - 2); // Skip remaining alarm data
                         break;
                     default:
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip unknown variable length parameter value
                         break;
                 }
             }
 
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
                 positions.add(position);
             }
+        }
 
-        return positions;
+        // Return null if no positions were decoded (e.g., ACK packet)
+        return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
