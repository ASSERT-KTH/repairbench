diff --git a/tmp/11659c9c-5caf-4864-bb2b-5dc6487a8374_buggy.java b/tmp/c3a4437d-0917-43fc-8e22-9573f0f57646_fixed.java
index fcb460f..196fa1c 100644
--- a/tmp/11659c9c-5caf-4864-bb2b-5dc6487a8374_buggy.java
+++ b/tmp/c3a4437d-0917-43fc-8e22-9573f0f57646_fixed.java
@@ -1,183 +1,234 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // ,CCE,
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (extension) {
+                    id |= 0xFE00; // Add prefix back for matching cases like 0xFE69
+                }
                 switch (id) {
                     case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
+                        int event = buf.readUnsignedByte();
+                        position.set(Position.KEY_EVENT, event);
+                        // Meitrack event codes 0x23 (Lock Door) and 0x24 (Unlock Door)
+                        if (event == 0x23) {
+                            position.set(Position.KEY_LOCK, true);
+                        } else if (event == 0x24) {
+                            position.set(Position.KEY_LOCK, false);
+                        }
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
+                        buf.skipBytes(2); // Skip 0xFE 0x69 marker read by extension logic
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        if (extension) {
+                            // Already read 2 bytes for ID
+                        } else {
+                            buf.readUnsignedByte(); // Skip ID byte if not handled
+                        }
+                        buf.readUnsignedByte(); // Skip the value byte for unknown 1-byte params
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
+                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // HDOP needs scaling? Check docs. Assuming 0.1 based on other protocols. Or maybe it's integer? Keep original for now.
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); // Event as short? Overrides byte event?
                         break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
+                    case 0x91: // OBD Speed KPH
+                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
-                    case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                    case 0x92: // CAN Speed KPH
+                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+                        break;
+                    case 0x98: // Fuel Used L
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Unit depends on device config? Assuming 0.1 L
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
-                    case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                    case 0x9C: // Engine Coolant Temp C
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readShortLE()); // Temperature can be signed
                         break;
-                    case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                    case 0x9F: // Temperature Sensor 1 C
+                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE()); // Temperature can be signed
                         break;
-                    case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                    case 0xC9: // Fuel Consumption L/100km
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Assuming 0.1 scale
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        if (extension) {
+                           // Already read 2 bytes for ID
+                        } else {
+                            buf.readUnsignedByte(); // Skip ID byte if not handled
+                        }
+                        buf.readUnsignedShortLE(); // Skip the value short for unknown 2-byte params
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // Seconds since 2000-01-01
                         break;
-                    case 0x0C:
-                    case 0x9B:
+                    case 0x0C: // Odometer Meter
+                    case 0x9B: // Odometer Meter (CAN)
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                    case 0x0D: // Engine Hours / Runtime Second
+                         position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store as milliseconds
+                        break;
+                    case 0x1C: // ACC Status (Ignition)
+                        position.set(Position.KEY_IGNITION, buf.readUnsignedIntLE() > 0);
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
+                    case 0xA0: // Fuel Used ml
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001); // Convert ml to L
                         break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                    case 0xA2: // Fuel consumption ml/100km ? Check unit. Assuming L/100km*100 -> ml/km?
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01); // Keep original scale for now
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        if (extension) {
+                            // Already read 2 bytes for ID
+                        } else {
+                            buf.readUnsignedByte(); // Skip ID byte if not handled
+                        }
+                        buf.readUnsignedIntLE(); // Skip the value int for unknown 4-byte params
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                  boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                  int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                    id |= 0xFE00; // Add prefix back for matching cases like 0xFE31
+                 }
                  int length = buf.readUnsignedByte();
                  switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
                         buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        if (length == 3) { // Expect label (1) + temp (2) = 3
+                           position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Temp usually 0.1 C scale
+                        } else {
+                           buf.skipBytes(length - 1); // Skip remaining unexpected bytes
+                        }
                         break;
-                    case 0xFE31:
+                    case 0xFE31: // Alarm Data
+                        buf.skipBytes(2); // Skip 0xFE 0x31 marker read by extension logic
+                        if (length >= 2) {
                             buf.readUnsignedByte(); // alarm protocol
                             buf.readUnsignedByte(); // alarm type
                             buf.skipBytes(length - 2);
+                        } else {
+                             buf.skipBytes(length); // Skip if length is less than 2
+                        }
                         break;
                     default:
-                        buf.skipBytes(length);
+                         if (extension) {
+                            // Already read 2 bytes for ID
+                         } else {
+                            buf.readUnsignedByte(); // Skip ID byte if not handled
+                         }
+                        buf.skipBytes(length); // Skip data bytes
                         break;
                 }
             }
 
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
                 positions.add(position);
             }
+        }
 
         return positions;
     }
\ No newline at end of file
