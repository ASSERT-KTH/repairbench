diff --git a/tmp/eb95030c-c2ee-43d5-b323-956829f803a8_buggy.java b/tmp/ad45ce9c-27e8-419e-8dcf-25577933f737_fixed.java
index fcb460f..c50811d 100644
--- a/tmp/eb95030c-c2ee-43d5-b323-956829f803a8_buggy.java
+++ b/tmp/ad45ce9c-27e8-419e-8dcf-25577933f737_fixed.java
@@ -1,183 +1,215 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1 + 3 + 1);
+        buf.skipBytes(1 + 3 + 1); // skip ",CCE," or similar command/separator
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            // Parameters with 1 byte value
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
+                    case 0x1B: // Device Status (Ignition, Lock, Charge, SOS)
+                        int status = buf.readUnsignedByte();
+                        position.set(Position.KEY_STATUS, status);
+                        position.set(Position.KEY_IGNITION, BitUtil.check(status, 0));
+                        position.set(Position.KEY_LOCK, BitUtil.check(status, 2)); // Central lock status
+                        position.set(Position.KEY_CHARGE, BitUtil.check(status, 4)); // Charging status
+                        if (BitUtil.check(status, 7)) { // SOS
+                            position.set(Position.KEY_ALARM, Position.ALARM_SOS);
+                        }
+                        break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
-                        buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // Skip 1 byte value for unknown ID
                         break;
                 }
             }
 
+            // Parameters with 2 byte value (LE)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Apply scaling
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
+                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01); // External battery voltage
                         break;
                     case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
+                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01); // Internal battery voltage
                         break;
                     case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE()); // Event can be 2 bytes too
                         break;
-                    case 0x91:
-                    case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
+                    case 0x91: // OBD Speed KPH
+                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+                        break;
+                    case 0x92: // OBD Speed MPH (deprecated?)
+                         // Assuming value is MPH, convert to knots
+                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromMph(buf.readUnsignedShortLE()));
                          break;
                     case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Scaled by 0.1L
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                        // Value is degrees C + 40. Subtract 40.
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() - 40.0);
                         break;
                     case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                        // Temperature, check scaling and type (signed?)
+                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); // Assuming signed, 0.1 scaling
                         break;
                     case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Scaled by 0.1 L/h? Check docs
                         break;
                     default:
-                        buf.readUnsignedShortLE();
+                        buf.readUnsignedShortLE(); // Skip 2 byte value for unknown ID
                         break;
                 }
             }
 
+            // Parameters with 4 byte value (LE)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                        // Seconds since 2000-01-01 00:00:00 UTC
+                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000));
                         break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
+                    case 0x0C: // Odometer (KM)
+                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE() * 1000L); // convert km to meters
                         break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                    case 0x9B: // Odometer (Miles, deprecated?)
+                        // Convert miles to meters
+                        position.set(Position.KEY_ODOMETER, (long) (buf.readUnsignedIntLE() * 1609.344));
+                        break;
+                    case 0x0D: // Runtime (seconds)
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Store runtime in standard KEY_HOURS (milliseconds)
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
-                    case 0xA0:
+                    case 0xA0: // Fuel Used (0.001L)
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
-                    case 0xA2:
+                    case 0xA2: // Fuel Consumption (0.01 L/100km)
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
-                        buf.readUnsignedIntLE();
+                        buf.readUnsignedIntLE(); // Skip 4 byte value for unknown ID
                         break;
                 }
             }
 
+            // Parameters with variable length value (1 byte length + N bytes data)
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
+                if (length == 0) {
+                    continue; // Skip if length is zero
+                }
                 switch (id) {
-                    case 0x2A:
-                    case 0x2B:
-                    case 0x2C:
-                    case 0x2D:
-                    case 0x2E:
-                    case 0x2F:
-                    case 0x30:
-                    case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    case 0x2A: // Temperature sensor 1
+                    case 0x2B: // Temperature sensor 2
+                    case 0x2C: // Temperature sensor 3
+                    case 0x2D: // Temperature sensor 4
+                    case 0x2E: // Temperature sensor 5
+                    case 0x2F: // Temperature sensor 6
+                    case 0x30: // Temperature sensor 7
+                    case 0x31: // Temperature sensor 8
+                        if (length >= 3) { // Expect 1 byte label + 2 byte value
+                            buf.readUnsignedByte(); // label (ignore)
+                            position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Use 0.1 scaling
+                            buf.skipBytes(length - 3); // Skip any remaining bytes if length > 3
+                        } else {
+                            buf.skipBytes(length); // Skip unexpected value length
+                        }
                         break;
-                    case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    case 0xFE31: // Eco driving data
+                        // Example structure: 1 byte alarm proto, 1 byte alarm type, N bytes data
+                        buf.skipBytes(length); // Skip eco driving data for now
                         break;
                     default:
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip value for unknown ID
                         break;
                 }
             }
 
+            if (position.getFixTime() != null) { // Add position if it has at least a timestamp
                  positions.add(position);
             }
+        }
 
         return positions;
     }
\ No newline at end of file
