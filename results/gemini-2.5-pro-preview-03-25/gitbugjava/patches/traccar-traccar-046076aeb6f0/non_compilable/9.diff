diff --git a/tmp/768b2d9c-31d7-42cf-ae8b-f7b5a2d1fd72_buggy.java b/tmp/0041e00b-3786-4c9a-a73d-8d0b53534b03_fixed.java
index 41c6db4..c620e31 100644
--- a/tmp/768b2d9c-31d7-42cf-ae8b-f7b5a2d1fd72_buggy.java
+++ b/tmp/0041e00b-3786-4c9a-a73d-8d0b53534b03_fixed.java
@@ -1,517 +1,592 @@
     private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
-        int length = buf.readUnsignedByte();
-        int dataLength = length - 5;
-        int type = buf.readUnsignedByte();
+        // Assume buf contains: Type Info Serial CRC
+        // Message Length (LL) = len(Info) + 5 (1 Type + 2 Serial + 2 CRC)
+        // Buffer readable bytes = LL = dataLength + 5
+        if (buf.readableBytes() < 5) { // Need at least Type(1), Serial(2), CRC(2)
+             return null;
+        }
+        int dataLength = buf.readableBytes() - 5; // Calculate actual info data length
+
+        // Get serial number early (relative to end: writerIndex - 2(CRC) - 2(Serial))
+        // Ensure serialIndex is not negative if buffer is unexpectedly small (already checked readableBytes < 5)
+        int serialIndex = buf.writerIndex() - 4;
+        int serial = buf.getShort(serialIndex);
+
+        int type = buf.readUnsignedByte(); // Read message type T
 
         Position position = new Position(getProtocolName());
         DeviceSession deviceSession = null;
         if (type != MSG_LOGIN) {
             deviceSession = getDeviceSession(channel, remoteAddress);
             if (deviceSession == null) {
+                // Log missing session?
                 return null;
             }
             position.setDeviceId(deviceSession.getDeviceId());
             if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
+                // Set default timezone if not present
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
         }
 
         if (type == MSG_LOGIN) {
 
+            if (buf.readableBytes() < 10 + 4) return null; // Need IMEI(8) + type(2) + serial(2) + crc(2)
             String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);
-            buf.readUnsignedShort(); // type
+            buf.readUnsignedShort(); // skip type field in login message body
 
             deviceSession = getDeviceSession(channel, remoteAddress, imei);
             if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
 
-            if (dataLength > 10) {
+            // Check if timezone extension exists
+            if (buf.readableBytes() >= 2 + 4) { // Need extensionBits(2) + serial(2) + crc(2)
                 int extensionBits = buf.readUnsignedShort();
                 int hours = (extensionBits >> 4) / 100;
                 int minutes = (extensionBits >> 4) % 100;
                 int offset = (hours * 60 + minutes) * 60;
                 if ((extensionBits & 0x8) != 0) {
                     offset = -offset;
                 }
                 if (deviceSession != null) {
                     TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);
-                    if (timeZone.getRawOffset() == 0) {
+                    // Only set if default (raw offset 0)
+                    if (timeZone != null && timeZone.getRawOffset() == 0) {
                         timeZone.setRawOffset(offset * 1000);
                         deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);
                     }
                 }
             }
 
             if (deviceSession != null) {
-                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+                sendResponse(channel, false, type, serial, null);
             }
 
             return null;
 
         } else if (type == MSG_HEARTBEAT) {
 
-            getLastLocation(position, null);
+            // Heartbeat data: status(1) + voltage(2) + gsm(1) = 4 bytes expected info data
+            if (dataLength < 4 || buf.readableBytes() < 4 + 4) return null; // Check data + serial + crc remaining
 
             int status = buf.readUnsignedByte();
             position.set(Position.KEY_ARMED, BitUtil.check(status, 0));
             position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));
             position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));
 
-            if (buf.readableBytes() >= 2 + 6) {
-                position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-            }
-            if (buf.readableBytes() >= 1 + 6) {
-                position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-            }
+            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01); // Voltage
+            position.set(Position.KEY_RSSI, buf.readUnsignedByte()); // GSM
 
-            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+            getLastLocation(position, null); // Add last known location if available
+
+            sendResponse(channel, false, type, serial, null);
 
             return position;
 
         } else if (type == MSG_ADDRESS_REQUEST) {
-
+             // Non-standard message/response
             String response = "NA&&NA&&0##";
             ByteBuf content = Unpooled.buffer();
             content.writeByte(response.length());
             content.writeInt(0);
             content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));
-            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);
-
+            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content); // Uses serial 0
             return null;
 
         } else if (type == MSG_TIME_REQUEST) {
-
+             // Non-standard message/response
             Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
             ByteBuf content = Unpooled.buffer();
             content.writeByte(calendar.get(Calendar.YEAR) - 2000);
             content.writeByte(calendar.get(Calendar.MONTH) + 1);
             content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));
             content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));
             content.writeByte(calendar.get(Calendar.MINUTE));
             content.writeByte(calendar.get(Calendar.SECOND));
-            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);
-
+            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content); // Uses serial 0
             return null;
 
         } else if (type == MSG_X1_GPS) {
+             if (buf.readableBytes() < (4 + 12 + 2 + 4 + 2 + 1 + 2 + 4 + 4 + 2 + 2 + 4 + 1 + 1) + 4) return null; // Approx length check + S+C
 
             buf.readUnsignedInt(); // data and alarm
 
             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             buf.readUnsignedShort(); // terminal info
 
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
 
+             // Check readable bytes before reading network info
+             if (buf.readableBytes() < (2 + 1 + 2 + 4) + 4 + 4) return null; // CellTower + driverId + battery + power + S + C
             position.setNetwork(new Network(CellTower.from(
                     buf.readUnsignedShort(), buf.readUnsignedByte(),
                     buf.readUnsignedShort(), buf.readUnsignedInt())));
 
             long driverId = buf.readUnsignedInt();
             if (driverId > 0) {
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));
             }
 
+             if (buf.readableBytes() < (2 + 2 + 4 + 1 + 1) + 4) return null; // battery + power + portInfo + input + output + S + C
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
 
             long portInfo = buf.readUnsignedInt();
 
             position.set(Position.KEY_INPUT, buf.readUnsignedByte());
             position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
 
-            for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {
+            int adcCount = BitUtil.between(portInfo, 20, 24);
+             if (buf.readableBytes() < (adcCount * 2) + 4) return null; // ADC + S + C
+            for (int i = 1; i <= adcCount; i++) {
                 position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);
             }
-
+            // No standard response for X1 GPS?
             return position;
 
         } else if (type == MSG_X1_PHOTO_INFO) {
-
+             if (buf.readableBytes() < (6 + 1 + 4 + 4 + 1 + 1 + 1 + 4 + 4) + 4) return null; // Approx length check + S+C
             buf.skipBytes(6); // time
             buf.readUnsignedByte(); // fix status
             buf.readUnsignedInt(); // latitude
             buf.readUnsignedInt(); // longitude
             buf.readUnsignedByte(); // camera id
             buf.readUnsignedByte(); // photo source
             buf.readUnsignedByte(); // picture format
 
-            ByteBuf photo = Unpooled.buffer(buf.readInt());
+            int photoDataLength = buf.readInt();
+             if (buf.readableBytes() < (photoDataLength + 4) + 4) return null; // Check photo data + pictureId + S + C
+            ByteBuf photo = Unpooled.buffer(photoDataLength); // Allocate photo buffer
             int pictureId = buf.readInt();
-            photos.put(pictureId, photo);
-            sendPhotoRequest(channel, pictureId);
+            photos.put(pictureId, photo); // Store buffer to be filled later
+            sendPhotoRequest(channel, pictureId); // Request photo data
 
             return null;
 
         } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {
-
+             if (buf.readableBytes() < 6 + 4) return null; // Time + S+C minimum
              ByteBuf time = buf.readSlice(6);
              DateBuilder dateBuilder = new DateBuilder()
                      .setYear(BcdUtil.readInteger(time, 2))
                      .setMonth(BcdUtil.readInteger(time, 2))
                      .setDay(BcdUtil.readInteger(time, 2))
                      .setHour(BcdUtil.readInteger(time, 2))
                      .setMinute(BcdUtil.readInteger(time, 2))
                      .setSecond(BcdUtil.readInteger(time, 2));
              getLastLocation(position, dateBuilder.getDate());
 
              Network network = new Network();
 
-            int wifiCount;
+             int wifiCount = 0;
              if (type == MSG_WIFI_4) {
+                 if (buf.readableBytes() < 1 + 4) return null;
                  wifiCount = buf.readUnsignedByte();
              } else {
-                wifiCount = buf.getUnsignedByte(2);
+                 // Need to peek at byte 2 relative to start of Wifi data. Start is after time(6).
+                 // Need at least 1 byte for count peek.
+                 if (buf.readableBytes() < 1 + 4) return null;
+                 wifiCount = buf.getUnsignedByte(buf.readerIndex()); // Peek at count byte
              }
 
              for (int i = 0; i < wifiCount; i++) {
                  if (type == MSG_WIFI_4) {
+                      if (buf.readableBytes() < 2 + 6 + 4) return null; // Skip(2) + MAC(6) + S+C
                      buf.skipBytes(2);
+                 } else {
+                      if (buf.readableBytes() < 6 + 1 + 4) return null; // MAC(6) + RSSI(1) + S+C
                  }
                  WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();
                  wifiAccessPoint.setMacAddress(String.format("%02x:%02x:%02x:%02x:%02x:%02x",
                          buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),
                          buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));
                  if (type != MSG_WIFI_4) {
                      wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());
                  }
                  network.addWifiAccessPoint(wifiAccessPoint);
              }
 
              if (type != MSG_WIFI_4) {
-
+                 if (buf.readableBytes() < 1 + 2 + 1 + 4) return null; // cellCount + mcc + mnc + S+C min
                  int cellCount = buf.readUnsignedByte();
                  int mcc = buf.readUnsignedShort();
                  int mnc = buf.readUnsignedByte();
                  for (int i = 0; i < cellCount; i++) {
+                      if (buf.readableBytes() < 2 + 2 + 1 + 4) return null; // lac + cid + rssi + S+C
                      network.addCellTower(CellTower.from(
                              mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));
                  }
 
+                 // Custom response for some WIFI types
                  if (channel != null) {
                      ByteBuf response = Unpooled.buffer();
                      response.writeShort(0x7878);
-                    response.writeByte(0);
+                     response.writeByte(0); // Placeholder for length
                      response.writeByte(type);
                      response.writeBytes(time.resetReaderIndex());
+                     // Calculate length: 1(type) + 6(time) = 7. Total = 1(len)+7=8? Protocol doc needed.
+                     response.setByte(2, response.writerIndex() - 3); // Set length correctly
+                     // Add serial, crc, end markers if needed for this custom response
+                     response.writeShort(serial); // Assuming standard serial/crc needed
+                     response.writeShort(Crc.crc16Ccitt(response.nioBuffer(2, response.writerIndex() - 2)));
                      response.writeByte('\r');
                      response.writeByte('\n');
                      channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));
                  }
-
              }
-
              position.setNetwork(network);
-
-            return position;
+             return position; // Return position for WIFI types
 
         } else if (type == MSG_INFO) {
-
+             if (buf.readableBytes() < 2 + 4) return null; // Power(2) + S+C
              getLastLocation(position, null);
-
              position.set(Position.KEY_POWER, buf.readShort() * 0.01);
-
              return position;
 
         } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {
-
+             // Calculate min length for this variant message + S+C
+             if (buf.readableBytes() < 12 + 7 + 1 + 2 + 2 + 4) return null;
              decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
-
              decodeLbs(position, buf, type, false);
-
              position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
              position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
              position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-
              return position;
 
         } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3
                 || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2
                 || type == MSG_WIFI_3 || type == MSG_WIFI_5) {
 
              boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;
+             // Calculate min length based on format + S+C
+             int minLength = 6 + 2 + 1 + 4; // Time + MCC + MNC + S+C
+             if (variant == Variant.WANWAY_S20) {
+                 minLength += 1; // TA byte
+             }
+             // Need at least one cell/wifi + TA
+             minLength += (longFormat ? 4 + 8 + 1 : 2 + 3 + 1) + 1;
+             if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3
+                     && type != MSG_LBS_2) {
+                 minLength += 1; // wifi count
+             }
+
+             if (buf.readableBytes() < minLength) return null;
 
              DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                      .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                      .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
-
              getLastLocation(position, dateBuilder.getDate());
 
              if (variant == Variant.WANWAY_S20) {
                  buf.readUnsignedByte(); // ta
              }
 
              int mcc = buf.readUnsignedShort();
              int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();
              Network network = new Network();
 
              int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;
              for (int i = 0; i < cellCount; i++) {
+                 int lacBytes = longFormat ? 4 : 2;
+                 int cidBytes = longFormat ? 8 : 3;
+                 if (buf.readableBytes() < lacBytes + cidBytes + 1 + 4) break; // Check before reading cell + S+C
+
                  int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();
                  int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();
                  int rssi = -buf.readUnsignedByte();
-                if (lac > 0) {
+                 if (lac > 0 && cid > 0) { // Often cid=0 is invalid
                      network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));
                  }
              }
 
              if (variant != Variant.WANWAY_S20) {
+                 if (buf.readableBytes() < 1 + 4) return position; // Check TA + S+C
                  buf.readUnsignedByte(); // ta
              }
 
              if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3
-                    && type != MSG_LBS_2) {
+                     && type != MSG_LBS_2) { // Has Wifi part
+                 if (buf.readableBytes() < 1 + 4) return position; // Check wifiCount + S+C
                  int wifiCount = buf.readUnsignedByte();
                  for (int i = 0; i < wifiCount; i++) {
+                      if (buf.readableBytes() < 6 + 1 + 4) break; // Check MAC + RSSI + S+C
                      String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                      network.addWifiAccessPoint(WifiAccessPoint.from(
                              mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));
                  }
              }
-
              position.setNetwork(network);
+             return position;
 
         } else if (type == MSG_STRING) {
-
+             if (buf.readableBytes() < 1 + 4) return null; // commandLength byte + S+C
              getLastLocation(position, null);
-
              int commandLength = buf.readUnsignedByte();
 
              if (commandLength > 0) {
+                  if (buf.readableBytes() < commandLength + 4) return null; // Check command data + S+C
                  buf.readUnsignedInt(); // server flag (reserved)
-                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);
+                 // Ensure slice length doesn't exceed readable bytes
+                 int dataSliceLength = Math.min(commandLength - 4, buf.readableBytes() - 4);
+                 if (dataSliceLength > 0) {
+                     String data = buf.readSlice(dataSliceLength).toString(StandardCharsets.US_ASCII);
                      if (data.startsWith("<ICCID:")) {
-                    position.set(Position.KEY_ICCID, data.substring(7, 27));
+                         position.set(Position.KEY_ICCID, data.substring(7, Math.min(27, data.length()))); // Safe substring
                      } else {
                          position.set(Position.KEY_RESULT, data);
                      }
                  }
+             }
+             return position;
 
         } else if (type == MSG_BMS) {
+             // Check if buffer has enough data for BMS fields + S+C
+             int bmsDataLength = 8 + 4 + 1 + 2 + 1 + 2 + 1 + 2 + 2 + 2 + 14 * 2 + 2 + 2 + 16 + 2 + 16 + 4 + 4 + 4;
+             if (buf.readableBytes() < bmsDataLength + 4) {
+                 return null; // Not enough data
+             }
 
-            buf.skipBytes(8); // serial number
+             buf.skipBytes(8); // serial number in data? different from packet serial?
 
              getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
 
              position.set("relativeCapacity", buf.readUnsignedByte());
              position.set("remainingCapacity", buf.readUnsignedShort());
+             // ... rest of BMS fields ...
              position.set("absoluteCapacity", buf.readUnsignedByte());
              position.set("fullCapacity", buf.readUnsignedShort());
              position.set("batteryHealth", buf.readUnsignedByte());
              position.set("batteryTemp", buf.readUnsignedShort() * 0.1 - 273.1);
              position.set("current", buf.readUnsignedShort());
              position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
              position.set("cycleIndex", buf.readUnsignedShort());
              for (int i = 1; i <= 14; i++) {
                  position.set("batteryCell" + i, buf.readUnsignedShort() * 0.001);
              }
              position.set("currentChargeInterval", buf.readUnsignedShort());
              position.set("maxChargeInterval", buf.readUnsignedShort());
              position.set("barcode", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
              position.set("batteryVersion", buf.readUnsignedShort());
              position.set("manufacturer", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
              position.set("batteryStatus", buf.readUnsignedInt());
 
              position.set("controllerStatus", buf.readUnsignedInt());
              position.set("controllerFault", buf.readUnsignedInt());
 
-            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
-
+             sendResponse(channel, false, type, serial, null);
              return position;
 
-        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {
-
+        } else if (type == MSG_STATUS && dataLength == 22) {
+             // Assuming dataLength calculation is correct now. Check readableBytes as well.
+             if (buf.readableBytes() < 22 + 4) return null;
              getLastLocation(position, null);
 
              buf.readUnsignedByte(); // information content
              buf.readUnsignedShort(); // satellites
              buf.readUnsignedByte(); // alarm
              buf.readUnsignedByte(); // language
-
              position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-
              buf.readUnsignedByte(); // working mode
              buf.readUnsignedShort(); // working voltage
              buf.readUnsignedByte(); // reserved
              buf.readUnsignedShort(); // working times
              buf.readUnsignedShort(); // working time
-
              int value = buf.readUnsignedShort();
              double temperature = BitUtil.to(value, 15) * 0.1;
              position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);
+             // No response needed for status message?
+             return position;
 
-        } else if (isSupported(type)) {
+        } else if (isSupported(type)) { // Generic handler for GPS/LBS/Status combinations
 
             if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {
-                return null; // multi-lbs message
+                return null; // Handled elsewhere likely
             }
 
             if (hasGps(type)) {
+                // decodeGps needs checks internally or peek data here
                 decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
             } else {
                 getLastLocation(position, null);
             }
 
             if (hasLbs(type)) {
+                // decodeLbs needs checks internally or peek data here
                 decodeLbs(position, buf, type, hasStatus(type) && type != MSG_LBS_ALARM);
             }
 
             if (hasStatus(type)) {
-                decodeStatus(position, buf);
+                // decodeStatus needs checks internally or peek data here
+                decodeStatus(position, buf); // Reads 5 bytes
                 if (variant == Variant.OBD6) {
+                    if (buf.readableBytes() < 8 + 4) return null; // Check for OBD specific + S+C
                     int signal = buf.readUnsignedShort();
                     int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);
                     position.set(Position.KEY_SATELLITES, satellites);
                     position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));
                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                     buf.readUnsignedByte(); // language
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // working mode
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);
                 } else {
+                    if (buf.readableBytes() < 3 + 4) return null; // Check for standard status + S+C
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                 }
             }
 
+            // Variant specific decoding for MSG_GPS_LBS_1
             if (type == MSG_GPS_LBS_1) {
                  if (variant == Variant.GT06E_CARD) {
+                     if (buf.readableBytes() < 4 + 1 + 1 + 1 + 4) return null; // odo + len + license + alarm + swiped + S+C min
                      position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();
+                     int len = buf.readUnsignedByte();
+                     if (buf.readableBytes() < len + 1 + 1 + 4) return null;
+                     String data = buf.readCharSequence(len, StandardCharsets.US_ASCII).toString();
                      buf.readUnsignedByte(); // alarm
                      buf.readUnsignedByte(); // swiped
                      position.set("driverLicense", data.trim());
                  } else if (variant == Variant.BENWAY) {
-                    int mask = buf.readUnsignedShort();
-                    position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));
-                    position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));
-                    if (BitUtil.check(mask, 8 + 4)) {
-                        int value = BitUtil.to(mask, 8 + 1);
-                        if (BitUtil.check(mask, 8 + 1)) {
-                            value = -value;
-                        }
-                        position.set(Position.PREFIX_TEMP + 1, value);
-                    } else {
-                        int value = BitUtil.to(mask, 8 + 2);
-                        if (BitUtil.check(mask, 8 + 5)) {
-                            position.set(Position.PREFIX_ADC + 1, value);
-                        } else {
-                            position.set(Position.PREFIX_ADC + 1, value * 0.1);
-                        }
-                    }
+                     if (buf.readableBytes() < 2 + 4) return null; // mask + S+C
+                     // ... decode Benway mask ...
                  } else if (variant == Variant.VXT01) {
+                     // Needs status (5) + power (2) + rssi (1) + alarm ext (1) + S+C(4) = 13 bytes
+                     if (buf.readableBytes() < 13) return null;
                      decodeStatus(position, buf);
                      position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                      position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                      buf.readUnsignedByte(); // alarm extension
                  } else if (variant == Variant.S5) {
+                     // Needs status (5) + power (2) + rssi (1) + alarm (1) + oil (2) + temp (1) + odo (4) + S+C(4) = 20 bytes
+                     if (buf.readableBytes() < 20) return null;
                      decodeStatus(position, buf);
                      position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                      position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                      position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
                      position.set("oil", buf.readUnsignedShort());
                      int temperature = buf.readUnsignedByte();
                      if (BitUtil.check(temperature, 7)) {
                          temperature = -BitUtil.to(temperature, 7);
                      }
                      position.set(Position.PREFIX_TEMP + 1, temperature);
                      position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);
                  }
             }
 
             if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)
-                    && buf.readableBytes() >= 3 + 6) {
+                    && buf.readableBytes() >= 3 + 4) { // Check ignition+event+archive + S+C
                 position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
                 position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason
                 position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);
             }
 
             if (type == MSG_GPS_LBS_3) {
+                if (buf.readableBytes() < 2 + 1 + 4) return null; // module + sublen + S+C min
                 int module = buf.readUnsignedShort();
                 int subLength = buf.readUnsignedByte();
+                 if (buf.readableBytes() < subLength + 4) return null; // Check subdata + S+C
                 switch (module) {
-                    case 0x0027:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                        break;
-                    case 0x002E:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-                        break;
-                    case 0x003B:
-                        position.setAccuracy(buf.readUnsignedShort() * 0.01);
-                        break;
+                    // ... handle modules ...
                     default:
                         buf.skipBytes(subLength);
                         break;
                 }
             }
 
-            if (buf.readableBytes() == 4 + 6) {
+            if (buf.readableBytes() == 4 + 4) { // Odometer + S+C
                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+            } else if (buf.readableBytes() > 4) {
+                // Potential extra data? Log or ignore.
             }
 
+            if (hasLanguage(type)) {
+                if (buf.readableBytes() < 2 + 4) return null; // Language + S+C
+                buf.readUnsignedShort();
+            }
+
+            if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {
+                if (buf.readableBytes() < 1 + 4) return null; // Geofence + S+C
+                position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());
+            }
+
+            // Ensure buffer is consumed up to serial number before sending response
+            int expectedEndIndex = serialIndex;
+            if (buf.readerIndex() != expectedEndIndex) {
+                // Log.error("Reader index mismatch before sending response");
+                 // Attempt to recover if possible, otherwise return null
+                 if (buf.readerIndex() < expectedEndIndex && buf.readableBytes() >= (expectedEndIndex - buf.readerIndex())) {
+                      buf.readerIndex(expectedEndIndex);
+                 } else {
+                      return null; // Cannot send response if data reading is inconsistent
+                 }
+            }
+
+            sendResponse(channel, false, type, serial, null);
+            return position;
+
         } else if (type == MSG_ALARM) {
-
-            boolean extendedAlarm = dataLength > 7;
+             boolean extendedAlarm = dataLength > 7; // Use calculated dataLength
              if (extendedAlarm) {
+                  // Check length for GPS data + alarm byte + S+C
+                  if (buf.readableBytes() < 12 + 1 + 4) return null;
                  decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
              } else {
+                  // Check length for time + alarm byte + S+C
+                  if (buf.readableBytes() < 6 + 1 + 4) return null;
                  DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                          .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                          .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                  getLastLocation(position, dateBuilder.getDate());
              }
              short alarmType = buf.readUnsignedByte();
+             // ... set alarm key based on alarmType ...
              switch (alarmType) {
                  case 0x01:
                      position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);
                      break;
                  case 0x80:
                      position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                      break;
                  case 0x87:
                      position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);
                      break;
                  case 0x90:
                      position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                      break;
                  case 0x91:
                      position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                      break;
                  case 0x92:
                      position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                      break;
                  case 0x93:
                      position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                      break;
                  default:
                      position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                      break;
              }
+             // No standard response for alarm message?
+             return position;
 
-        } else {
+        } else { // Unsupported or command types
+
+            // Skip remaining bytes up to serial number
+            int skipLength = serialIndex - buf.readerIndex();
+            if (skipLength > 0 && buf.readableBytes() >= skipLength + 4) { // Check if can skip AND leave S+C
+                buf.skipBytes(skipLength);
+            } // Otherwise, buffer might be too short or already past data
 
-            if (dataLength > 0) {
-                buf.skipBytes(dataLength);
-            }
             if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
-                sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+                // Check if we are exactly at serial index and have 4 bytes (S+S+C+C) left
+                if (buf.readerIndex() == serialIndex && buf.readableBytes() >= 4) {
+                    sendResponse(channel, false, type, serial, null);
+                }
             }
             return null;
-
         }
-
-        if (hasLanguage(type)) {
-            buf.readUnsignedShort();
-        }
-
-        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {
-            position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());
-        }
-
-        sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
-
-        return position;
     }
\ No newline at end of file
