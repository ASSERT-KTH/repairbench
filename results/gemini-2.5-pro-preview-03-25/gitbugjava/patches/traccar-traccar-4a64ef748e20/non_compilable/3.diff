diff --git a/tmp/754a5335-b910-4e75-9832-4b228d7bbbad_buggy.java b/tmp/fc641e8f-8166-4ddc-8e2d-acb800bc0901_fixed.java
index 62fa0c6..642218a 100644
--- a/tmp/754a5335-b910-4e75-9832-4b228d7bbbad_buggy.java
+++ b/tmp/fc641e8f-8166-4ddc-8e2d-acb800bc0901_fixed.java
@@ -1,306 +1,405 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Ensure endIndex does not exceed buffer bounds or cause integer overflow
+            if (length < 0 || endIndex < buf.readerIndex() || endIndex > buf.writerIndex()) {
+                // Log error or break? For now, break to avoid reading past buffer or invalid lengths.
+                break;
+            }
+
+            // Ensure buffer has enough readable bytes for the declared length
+            if (buf.readableBytes() < length) {
+                 break;
+            }
+
             String stringValue;
             switch (subtype) {
                 case 0x01:
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x02:
+                    if (length == 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x2b:
+                    if (length == 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x30:
+                    if (length == 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x31:
+                    if (length == 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x33:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
+                        if (stringValue.startsWith("*M00") && length >= 15) { // Basic check for expected format
+                            try {
                                 String lockStatus = stringValue.substring(8, 8 + 7);
                                 position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                            } catch (IndexOutOfBoundsException | NumberFormatException e) {
+                                // Ignore if parsing fails
+                            }
+                        }
                     }
                     break;
                 case 0x60:
+                     if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                         buf.skipBytes(length - 2);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x69:
+                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x80:
+                    if (length >= 1) {
                          buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                         // Assuming decodeExtension should process remaining bytes up to endIndex
                          decodeExtension(position, buf, endIndex);
+                    }
+                    // readerIndex will be set to endIndex outside the switch
                     break;
-                case 0x91:
+                case 0x91: // OBD data
+                    if (length == 20) { // Fixed length check based on fields read
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                        buf.readUnsignedShort(); // intake air temperature?
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01); // instant
+                        buf.readUnsignedShort(); // average fuel consumption?
+                        buf.readUnsignedInt(); // mileage?
+                        buf.readUnsignedShort(); // fuel consumed this trip?
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01); // total fuel used?
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC
+                    if (length == 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer
+                     if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver Name
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
-                case 0xBD:
+                case 0xBD: // Driver ID
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
-                case 0xD0:
+                case 0xD0: // User defined status
+                    if (length == 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD3:
+                case 0xD3: // External Power Voltage
+                    if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD4:
-                case 0xE1:
+                case 0xD4: // Battery Level (%)
+                case 0xE1: // Battery Level (%) - fallback/alternative
+                    if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD5:
-                    if (length == 2) {
+                case 0xD5: // Lock info / Battery Voltage
+                    if (length == 2) { // Simple battery voltage
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1) { // Complex lock status
                         int count = buf.readUnsignedByte();
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // count byte + N * (id+card+batt+status)
+                        if (length == expectedLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
+                        } else {
+                             buf.skipBytes(length - 1); // Skip remaining bytes after reading count
+                        }
                     }
                     break;
-                case 0xDA:
+                case 0xDA: // Device Status (e.g., string cut)
+                    if (length == 3) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Temperature/Humidity Sensors
+                    if (length > 0 && length % (1 + 6 + 8 + 8) == 0) { // Check if length matches sensor block size
                         while (buf.readerIndex() < endIndex) {
                             int sensorIndex = buf.readUnsignedByte();
                             buf.skipBytes(6); // mac
                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                             position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                         }
+                    } else if (length > 0) {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                case 0xEB: // Network Info or Extended Data
+                    if (length > 0) {
+                        // Check first 2 bytes without consuming them to decide format
+                        if (buf.readableBytes() >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                             // Network info format
+                             if (buf.readableBytes() >= 3) { // Need MCC (2) + MNC (1) minimum
                                 Network network = new Network();
                                 int mcc = buf.readUnsignedShort();
                                 int mnc = buf.readUnsignedByte();
                                 while (buf.readerIndex() < endIndex) {
+                                    if (buf.readableBytes() < 5) break; // Need LAC(2) + CID(2) + RSSI(1)
                                     network.addCellTower(CellTower.from(
                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                             buf.readUnsignedByte()));
                                 }
+                                if (!network.getCellTowers().isEmpty()) {
                                    position.setNetwork(network);
+                                }
                              } else {
+                                buf.skipBytes(length); // Not enough data for network header
+                             }
+                        } else {
+                            // Extended types format
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 4) break; // Need ext_length(2) + ext_type(2)
                                 int extendedLength = buf.readUnsignedShort();
                                 int extendedType = buf.readUnsignedShort();
+                                int dataLength = extendedLength - 2; // Adjust for type field size
+                                int extendedEndIndex = buf.readerIndex() + dataLength;
+
+                                if (dataLength < 0 || extendedEndIndex < buf.readerIndex() || extendedEndIndex > endIndex) {
+                                    buf.readerIndex(endIndex); // Invalid extended length, skip to main block end
+                                    break;
+                                }
+                                if (buf.readableBytes() < dataLength) {
+                                    buf.readerIndex(endIndex); // Not enough bytes, skip to main block end
+                                    break;
+                                }
+
                                 switch (extendedType) {
-                                case 0x0001:
-                                    position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
-                                    break;
-                                case 0x0023:
-                                    position.set("fuel2", Double.parseDouble(
-                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
-                                    break;
-                                case 0x00CE:
-                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                    break;
-                                case 0x00D8:
-                                    Network network = new Network();
-                                    network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
-                                    position.setNetwork(network);
-                                    break;
-                                case 0xE1:
-                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                                    break;
-                                default:
-                                    buf.skipBytes(extendedLength - 2);
-                                    break;
+                                    case 0x0001: if(dataLength==3) { position.set("fuel1", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } else buf.skipBytes(dataLength); break;
+                                    case 0x0023: if(dataLength==6) { position.set("fuel2", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } else buf.skipBytes(dataLength); break;
+                                    case 0x00CE: if(dataLength==2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } else buf.skipBytes(dataLength); break;
+                                    case 0x00D8: if(dataLength==9) { Network n = new Network(); n.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(n); } else buf.skipBytes(dataLength); break;
+                                    case 0xE1:   if(dataLength==1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } else buf.skipBytes(dataLength); break;
+                                    default: buf.skipBytes(dataLength); break;
+                                }
+                                buf.readerIndex(extendedEndIndex); // Move reader index robustly
                             }
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Card Number
+                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
-                case 0xEE:
+                case 0xEE: // Basic Telemetry
+                     if (length == 7) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xF3:
+                case 0xF3: // Extended OBD
+                     if (length > 0) {
                          while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 3) break; // Need type(2) + length(1)
                             int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
+                            int extendedDataLength = buf.readUnsignedByte();
+                            int extendedEndIndex = buf.readerIndex() + extendedDataLength;
+
+                            if (extendedDataLength < 0 || extendedEndIndex < buf.readerIndex() || extendedEndIndex > endIndex) {
+                                buf.readerIndex(endIndex); break;
+                            }
+                            if (buf.readableBytes() < extendedDataLength) {
+                                buf.readerIndex(endIndex); break;
+                            }
+
                             switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                                case 0x0002: if(extendedDataLength==2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0003: if(extendedDataLength==2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0004: if(extendedDataLength==2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0005: if(extendedDataLength==4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0007: if(extendedDataLength==2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0008: if(extendedDataLength==2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0009: if(extendedDataLength==2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedDataLength); break;
+                                case 0x000B: if(extendedDataLength==2) position.set("intakePressure", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                case 0x000C: if(extendedDataLength==2) position.set("intakeTemp", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedDataLength); break;
+                                case 0x000D: if(extendedDataLength==2) position.set("intakeFlow", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                case 0x000E: if(extendedDataLength==2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0050: if(extendedDataLength==17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0100: if(extendedDataLength==2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0102: if(extendedDataLength==2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0112: if(extendedDataLength==2) position.set("hardAccelerationCount", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0113: if(extendedDataLength==2) position.set("hardDecelerationCount", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                case 0x0114: if(extendedDataLength==2) position.set("hardCorneringCount", buf.readUnsignedShort()); else buf.skipBytes(extendedDataLength); break;
+                                default: buf.skipBytes(extendedDataLength); break;
+                            }
+                             buf.readerIndex(extendedEndIndex);
                          }
                     }
                     break;
-                case 0xFE:
+                case 0xFE: // Battery Level / Extended Alarms
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
+                    } else if (length > 1) {
+                        int mark = buf.readUnsignedByte(); // Read the first byte (status or 0x7C marker)
                         if (mark == 0x7C) {
+                            // Process extended data marked by 0x7C
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) break; // Need type(1) + length(1)
                                 int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
+                                int extendedDataLength = buf.readUnsignedByte();
+                                int currentEndIndex = buf.readerIndex() + extendedDataLength;
+
+                                if (extendedDataLength < 0 || currentEndIndex < buf.readerIndex() || currentEndIndex > endIndex) {
+                                    buf.readerIndex(endIndex); break; // Invalid length
+                                }
+                                if (buf.readableBytes() < extendedDataLength) {
+                                    buf.readerIndex(endIndex); break; // Not enough data
+                                }
+
                                 switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Alarms
+                                        if (extendedDataLength == 4) {
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                                        }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }
+                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }
+                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }
+                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }
+                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }
+                                            // Note: Does not set battery level here
+                                        } else {
+                                            buf.skipBytes(extendedDataLength);
                                         }
                                         break;
                                     default:
-                                        buf.skipBytes(extendedLength);
+                                        buf.skipBytes(extendedDataLength); // Skip unknown extended types
                                         break;
                                 }
+                                buf.readerIndex(currentEndIndex); // Move reader index robustly
                             }
+                        } else {
+                            // Mark is not 0x7C. Assume 'mark' is the battery level.
+                            position.set(Position.KEY_BATTERY_LEVEL, mark);
+                            // Skip remaining bytes within this subtype block (if any)
+                            buf.skipBytes(length - 1); // We already read 'mark' (1 byte)
                         }
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    } else {
+                        // Length is 0 or negative, should have been caught earlier but skip if reached
+                        buf.skipBytes(length);
                     }
-                    break;
+                    break; // End of case 0xFE
                 default:
+                    // Skip unknown subtypes
+                    buf.skipBytes(length);
                     break;
             }
+            // Set reader index forcefully to end index for this subtype block
+            // This handles cases where processing didn't consume full length or skipped
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
