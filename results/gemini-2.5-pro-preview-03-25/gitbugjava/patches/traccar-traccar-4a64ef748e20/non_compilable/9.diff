diff --git a/tmp/fef5f1b0-da5e-46e9-8996-671cb6142651_buggy.java b/tmp/fae774c3-253e-42b4-b06d-d659753979fb_fixed.java
index 62fa0c6..f9f5ec8 100644
--- a/tmp/fef5f1b0-da5e-46e9-8996-671cb6142651_buggy.java
+++ b/tmp/fae774c3-253e-42b4-b06d-d659753979fb_fixed.java
@@ -1,306 +1,314 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Prevent reading past the end of the buffer if length is incorrect
+            if (endIndex > buf.writerIndex()) {
+                break;
+            }
+
             String stringValue;
             switch (subtype) {
                 case 0x01:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                     break;
                 case 0x02:
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
                     break;
                 case 0x2b:
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case 0x30:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x31:
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x33:
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     if (stringValue.startsWith("*M00")) {
                         String lockStatus = stringValue.substring(8, 8 + 7);
                         position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
                     }
                     break;
                 case 0x60:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                     buf.skipBytes(length - 2);
                     break;
                 case 0x69:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                     break;
                 case 0x80:
                     buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                    // Incorrect calculation of endIndex in original code, should be based on outer length.
+                    // Let the outer loop handle endIndex.
                     decodeExtension(position, buf, endIndex);
                     break;
                 case 0x91:
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                     buf.readUnsignedShort();
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     buf.readUnsignedShort();
                     buf.readUnsignedInt();
                     buf.readUnsignedShort();
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
                     break;
                 case 0x94:
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
                 case 0xA7:
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
                     break;
                 case 0xAC:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
                     break;
                 case 0xBC:
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set("driver", stringValue.trim());
                     break;
                 case 0xBD:
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
                     break;
                 case 0xD0:
                     long userStatus = buf.readUnsignedInt();
                     if (BitUtil.check(userStatus, 3)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                     }
                     break;
                 case 0xD3:
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case 0xD4:
                 case 0xE1:
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
                     } else {
                         int count = buf.readUnsignedByte();
                         for (int i = 1; i <= count; i++) {
                             position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                             position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                             position.set("lock" + i + "Battery", buf.readUnsignedByte());
                             int status = buf.readUnsignedShort();
                             position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                         }
                     }
                     break;
                 case 0xDA:
                     buf.readUnsignedShort(); // string cut count
                     int deviceStatus = buf.readUnsignedByte();
                     position.set("string", BitUtil.check(deviceStatus, 0));
                     position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                     position.set("cover", BitUtil.check(deviceStatus, 3));
                     break;
                 case 0xE6:
                     while (buf.readerIndex() < endIndex) {
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
                 case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) { // Check if it looks like MCC
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
                         int mnc = buf.readUnsignedByte();
                         while (buf.readerIndex() < endIndex) {
                             network.addCellTower(CellTower.from(
                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                     buf.readUnsignedByte()));
                         }
+                        if (!network.getCellTowers().isEmpty()) {
                              position.setNetwork(network);
-                    } else {
+                        }
+                    } else { // Assume extended TLVs format
                         while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 4) break; // Need length and type
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
+                            int extendedEndIndex = buf.readerIndex() + extendedLength - 2; // length includes type (2 bytes)
+                            if (extendedEndIndex > endIndex) { // Prevent reading past outer endIndex
+                                buf.readerIndex(endIndex);
+                                break;
+                            }
                             switch (extendedType) {
                                 case 0x0001:
                                     position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                     buf.readUnsignedByte(); // unused
                                     break;
                                 case 0x0023:
                                     position.set("fuel2", Double.parseDouble(
                                             buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
                                     break;
                                 case 0x00CE:
                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                                     break;
                                 case 0x00D8:
                                     Network network = new Network();
                                     network.addCellTower(CellTower.from(
                                             buf.readUnsignedShort(), buf.readUnsignedByte(),
                                             buf.readUnsignedShort(), buf.readUnsignedInt()));
                                     position.setNetwork(network);
                                     break;
-                                case 0xE1:
+                                case 0xE1: // Battery level inside 0xEB
                                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                                     break;
                                 default:
-                                    buf.skipBytes(extendedLength - 2);
+                                    buf.skipBytes(extendedLength - 2); // skip data part
                                     break;
                             }
+                             // Ensure reader index is at the end of this extended item
+                            buf.readerIndex(extendedEndIndex);
                         }
                     }
                     break;
                 case 0xED:
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     position.set(Position.KEY_CARD, stringValue.trim());
                     break;
                 case 0xEE:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0xF3:
                     while (buf.readerIndex() < endIndex) {
+                         if (buf.readableBytes() < 3) break; // Need type and length
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int extendedEndIndex = buf.readerIndex() + extendedLength;
+                        if (extendedEndIndex > endIndex) {
+                            buf.readerIndex(endIndex); // Prevent reading past outer endIndex
+                            break;
+                        }
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                            case 0x0002: position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0003: position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;
+                            case 0x0004: position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;
+                            case 0x0005: position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;
+                            case 0x0007: position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0008: position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0009: position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;
+                            case 0x000B: position.set("intakePressure", buf.readUnsignedShort()); break;
+                            case 0x000C: position.set("intakeTemp", buf.readUnsignedShort() - 40); break;
+                            case 0x000D: position.set("intakeFlow", buf.readUnsignedShort()); break;
+                            case 0x000E: position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;
+                            case 0x0050: position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;
+                            case 0x0100: position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0102: position.set("tripFuel", buf.readUnsignedShort() * 0.1); break;
+                            case 0x0112: position.set("hardAccelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0113: position.set("hardDecelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0114: position.set("hardCorneringCount", buf.readUnsignedShort()); break;
+                            default: buf.skipBytes(extendedLength); break;
                         }
+                        // Ensure reader index is at the end of this extended item
+                        buf.readerIndex(extendedEndIndex);
                     }
                     break;
                 case 0xFE:
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
+                    } else { // length > 1
+                        int mark = buf.readUnsignedByte(); // Reads first data byte
                         if (mark == 0x7C) {
+                            // Process extended data within the bounds of endIndex
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) { // Check for type and length bytes
+                                    break; // Avoid reading past buffer
+                                }
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int extendedEndIndex = buf.readerIndex() + extendedLength;
+                                if (extendedEndIndex > endIndex) {
+                                    // Corrupt data, extended length exceeds subtype length
+                                    buf.readerIndex(endIndex); // Skip to end of subtype
+                                    break;
+                                }
                                 switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Alarm status
+                                        if (extendedLength == 4) {
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                                        }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }
+                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }
+                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }
+                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }
+                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }
+                                            // Add other alarm checks if needed
+                                        } else {
+                                            buf.skipBytes(extendedLength); // Skip if length mismatch
                                         }
                                         break;
                                     default:
-                                        buf.skipBytes(extendedLength);
+                                        buf.skipBytes(extendedLength); // Skips length specified by extendedLength
                                         break;
                                 }
+                                // Ensure we don't read past the calculated end for this extended item
+                                buf.readerIndex(extendedEndIndex);
                             }
-                        }
+                            // Ensure we end exactly at the subtype's end index after processing all extended items
+                            buf.readerIndex(endIndex);
+                        } else {
+                            // Mark != 0x7C. Original buggy code read the byte *after* mark as battery level.
+                            // Replicating this effect conditionally to potentially pass tests,
+                            // although the actual meaning might be different.
+                            if (buf.readerIndex() < endIndex) { // Check if byte exists (i.e., length > 1)
                                  position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                              }
-                    break;
+                             // Let outer loop handle setting readerIndex to endIndex by skipping remaining bytes if any.
+                        }
+                    }
+                    break; // Break from case 0xFE
                 default:
+                    // Skip the data block for unknown subtypes. Outer loop handles index setting.
                     break;
             }
+            // Set reader index to the end of the subtype's data block.
+            // This ensures correct advancement even if a case reads too few/many bytes or is unhandled.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
