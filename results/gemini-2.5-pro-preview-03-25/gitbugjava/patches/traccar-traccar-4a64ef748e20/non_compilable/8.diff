diff --git a/tmp/c986919b-478d-4951-85f7-1d302802eb61_buggy.java b/tmp/eca51d21-b233-461e-a9d6-be710f98996a_fixed.java
index 62fa0c6..edb0a97 100644
--- a/tmp/c986919b-478d-4951-85f7-1d302802eb61_buggy.java
+++ b/tmp/eca51d21-b233-461e-a9d6-be710f98996a_fixed.java
@@ -1,306 +1,439 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
             String stringValue;
+
+            // Ensure we don't read past the buffer end
+            if (endIndex > buf.writerIndex()) {
+                break; // Invalid length, stop processing TLVs
+            }
+
             switch (subtype) {
                 case 0x01:
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x02:
+                     if (length == 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x2b:
+                    if (length == 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x30:
+                    if (length == 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x31:
+                    if (length == 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x33:
                     stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                     if (stringValue.startsWith("*M00")) {
+                        try {
                             String lockStatus = stringValue.substring(8, 8 + 7);
                             position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                        } catch (IndexOutOfBoundsException | NumberFormatException e) {
+                            // Ignore if parsing fails
+                        }
                     }
                     break;
                 case 0x60:
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                         buf.skipBytes(length - 2);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0x69:
+                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0x80:
+                    if (length >= 1) {
                         buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
-                    decodeExtension(position, buf, endIndex);
-                    break;
+                        // This case seems problematic, endIndex calculation was strange
+                        // Let's assume length is the length of the extension data *excluding* subtype and length itself
+                        decodeExtension(position, buf, buf.readerIndex() + length - 1); // Pass end index for extension data
+                    } else {
+                         buf.skipBytes(length); // Should be 0 if length is 0
+                    }
+                    break; // endIndex will be handled by the outer loop's readerIndex call
                 case 0x91:
+                    if (length >= 21) { // Check minimum length required
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         buf.readUnsignedShort();
                         buf.readUnsignedInt();
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
+                    buf.skipBytes(Math.max(0, length - 21)); // Skip any remaining bytes
                     break;
                 case 0x94:
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
                 case 0xA7:
+                    if (length == 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0xAC:
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0xBC:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
                 case 0xBD:
+                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
                 case 0xD0:
+                     if (length == 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0xD3:
+                     if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xD4:
-                case 0xE1:
+                case 0xE1: // Shares logic with D4
+                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 0) { // Check if there's at least the count byte
                         int count = buf.readUnsignedByte();
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // 1 (count) + N * (id + card + batt + status)
+                        if (length == expectedLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
+                        } else {
+                             // Length mismatch, skip remaining bytes of this TLV
+                             buf.skipBytes(length - 1); // Already read count byte
+                        }
+                    } else {
+                        buf.skipBytes(length); // Skip if length is 0 or inconsistent
                     }
                     break;
                 case 0xDA:
+                     if (length == 3) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
                 case 0xE6:
+                    // 1 byte index + 6 bytes MAC + 8 bytes temp + 8 bytes humidity = 23 bytes per sensor
+                    if (length > 0 && length % 23 == 0) {
                          while (buf.readerIndex() < endIndex) {
                             int sensorIndex = buf.readUnsignedByte();
                             buf.skipBytes(6); // mac
                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                             position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                          }
+                    } else {
+                        buf.skipBytes(length); // Skip if length is inconsistent
+                    }
                     break;
                 case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                    if (length >= 3 && buf.getUnsignedShort(buf.readerIndex()) > 200) { // Network tower info
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
                         int mnc = buf.readUnsignedByte();
-                        while (buf.readerIndex() < endIndex) {
+                        // 2(mcc) + 1(mnc) + N * (2(lac) + 2(cid) + 1(rssi))
+                        int bytesConsumed = 3;
+                        while (bytesConsumed + 5 <= length && buf.readerIndex() + 5 <= endIndex) {
                              network.addCellTower(CellTower.from(
                                      mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                      buf.readUnsignedByte()));
+                            bytesConsumed += 5;
                         }
+                        if (position.getNetwork() == null) { // Avoid overwriting network from 0xEB/0xD8
                             position.setNetwork(network);
-                    } else {
+                        }
+                        buf.skipBytes(length - bytesConsumed); // Skip remaining bytes if any
+                    } else if (length >= 4) { // Extended subtypes
                         while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 4) { // Need length and type
+                                break;
+                            }
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
+                            int dataLength = extendedLength - 2; // Length includes type field itself
+                            int nextReaderIndex = buf.readerIndex() + dataLength;
+
+                            if (dataLength < 0 || nextReaderIndex > endIndex) { // Basic validation
+                                break; // Invalid extended length
+                            }
+
                             switch (extendedType) {
-                                case 0x0001:
+                                case 0x0001: // Fuel 1
+                                    if (dataLength == 3) {
                                         position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                         buf.readUnsignedByte(); // unused
+                                    } else {
+                                        buf.skipBytes(dataLength);
+                                    }
                                     break;
-                                case 0x0023:
+                                case 0x0023: // Fuel 2
+                                    if (dataLength == 6) {
+                                        try {
                                             position.set("fuel2", Double.parseDouble(
                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                        } catch (NumberFormatException e) { /* ignore */ }
+                                    } else {
+                                         buf.skipBytes(dataLength);
+                                    }
                                     break;
-                                case 0x00CE:
+                                case 0x00CE: // Power
+                                    if (dataLength == 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                    } else {
+                                         buf.skipBytes(dataLength);
+                                    }
                                     break;
-                                case 0x00D8:
-                                    Network network = new Network();
+                                case 0x00D8: // Cell Tower
+                                    if (dataLength == 9) {
+                                         Network network = position.getNetwork() == null ? new Network() : position.getNetwork();
                                          network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
+                                                 buf.readUnsignedShort(), buf.readUnsignedByte(), // mcc, mnc
+                                                 buf.readUnsignedShort(), buf.readUnsignedInt())); // lac, cid
                                          position.setNetwork(network);
+                                    } else {
+                                         buf.skipBytes(dataLength);
+                                    }
                                     break;
-                                case 0xE1:
+                                case 0xE1: // Battery Level
+                                     if (dataLength == 1) {
                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                    } else {
+                                        buf.skipBytes(dataLength);
+                                    }
                                     break;
                                 default:
-                                    buf.skipBytes(extendedLength - 2);
+                                    buf.skipBytes(dataLength);
                                     break;
                             }
+                            // Ensure reader index is correct in case of partial reads or skips
+                            buf.readerIndex(nextReaderIndex);
                         }
+                    } else {
+                         // Length is too small for either format
+                         buf.skipBytes(length);
                     }
                     break;
                 case 0xED:
+                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
                 case 0xEE:
+                     if (length == 7) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xF3:
+                case 0xF3: // OBD data
+                    if (length >= 3) { // Need at least type and length byte
                         while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 3) { // Need type and length bytes
+                                break;
+                            }
                             int extendedType = buf.readUnsignedShort();
                             int extendedLength = buf.readUnsignedByte();
+                            int nextReaderIndex = buf.readerIndex() + extendedLength;
+                            if (nextReaderIndex > endIndex) { // Bounds check
+                                break;
+                            }
                             switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                                case 0x0002: if (extendedLength == 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;
+                                case 0x0003: if (extendedLength == 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                case 0x0004: if (extendedLength == 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); else buf.skipBytes(extendedLength); break;
+                                case 0x0005: if (extendedLength == 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); else buf.skipBytes(extendedLength); break;
+                                case 0x0007: if (extendedLength == 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;
+                                case 0x0008: if (extendedLength == 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;
+                                case 0x0009: if (extendedLength == 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;
+                                case 0x000B: if (extendedLength == 2) position.set("intakePressure", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                case 0x000C: if (extendedLength == 2) position.set("intakeTemp", buf.readUnsignedShort() - 40); else buf.skipBytes(extendedLength); break;
+                                case 0x000D: if (extendedLength == 2) position.set("intakeFlow", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                case 0x000E: if (extendedLength == 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); else buf.skipBytes(extendedLength); break;
+                                case 0x0050: if (extendedLength == 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); else buf.skipBytes(extendedLength); break;
+                                case 0x0100: if (extendedLength == 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;
+                                case 0x0102: if (extendedLength == 2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); else buf.skipBytes(extendedLength); break;
+                                case 0x0112: if (extendedLength == 2) position.set("hardAccelerationCount", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                case 0x0113: if (extendedLength == 2) position.set("hardDecelerationCount", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                case 0x0114: if (extendedLength == 2) position.set("hardCorneringCount", buf.readUnsignedShort()); else buf.skipBytes(extendedLength); break;
+                                default: buf.skipBytes(extendedLength); break;
                             }
+                            buf.readerIndex(nextReaderIndex); // Ensure correct position
+                        }
+                    } else {
+                        buf.skipBytes(length); // Skip if length is too small
                     }
                     break;
                 case 0xFE:
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
+                    } else if (length > 1) { // length > 1
+                        int mark = buf.readUnsignedByte(); // Read mark (byte 1)
+                        int dataLength = length - 1;
+                        int dataEndIndex = buf.readerIndex() + dataLength;
+
                         if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                            // Process alarms
+                            while (buf.readerIndex() < dataEndIndex) {
+                                if (buf.readableBytes() < 2) { // Need type and length bytes
+                                    break;
+                                }
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int subDataEndIndex = buf.readerIndex() + extendedLength;
+                                if (subDataEndIndex > dataEndIndex) { // Bounds check
+                                    break;
+                                }
                                 switch (extendedType) {
                                     case 0x01:
+                                        if (extendedLength == 4) {
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                                        }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }
+                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }
+                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }
+                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }
+                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }
+                                        } else {
+                                            buf.skipBytes(extendedLength); // Skip if length mismatch
                                         }
                                         break;
                                     default:
                                         buf.skipBytes(extendedLength);
                                         break;
                                 }
+                                buf.readerIndex(subDataEndIndex); // Position after this sub-item
                             }
+                        } else {
+                            // Mark is not 0x7C. Original code assumed byte 2 was battery level.
+                            // Let's retain that assumption specifically for length 2, as it might be correct for some devices.
+                            if (length == 2) {
+                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); // Read byte 2 (0x1E in test case)
+                            } else {
+                                // Mark != 0x7C and length > 2. Meaning unknown. Skip remaining bytes.
+                                buf.skipBytes(dataLength); // Skip bytes 2 to length
                             }
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         }
+                        // Ensure reader is at the end of the data section for this TLV
+                        buf.readerIndex(dataEndIndex);
+                    }
+                    // Outer loop will set readerIndex(endIndex), redundant if dataEndIndex == endIndex, safe otherwise.
                     break;
                 default:
+                     // Skip unknown subtype
+                     buf.skipBytes(length);
                     break;
             }
+            // Ensure reader index is set to the end of the current TLV structure,
+            // even if processing logic above failed or skipped bytes incorrectly.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
