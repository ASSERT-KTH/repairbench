diff --git a/tmp/933e8ce3-dc2a-4098-bbff-57c7e9913f59_buggy.java b/tmp/8ba88216-2418-4c57-b0de-26fcd7f90ccf_fixed.java
index 62fa0c6..6df66cb 100644
--- a/tmp/933e8ce3-dc2a-4098-bbff-57c7e9913f59_buggy.java
+++ b/tmp/8ba88216-2418-4c57-b0de-26fcd7f90ccf_fixed.java
@@ -1,306 +1,406 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need at least subtype and length
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
-            int endIndex = buf.readerIndex() + length;
+            int endIndex = buf.readerIndex() + length; // End index for this TLV item
+
+            // Ensure length doesn't cause readerIndex to go beyond buffer capacity
+            if (endIndex > buf.writerIndex()) {
+                 // Data seems corrupt, stop processing TLVs
+                 break;
+            }
+
             String stringValue;
             switch (subtype) {
                 case 0x01:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
                 case 0x02:
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0x2b:
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case 0x30:
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x31:
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x33:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) {
                             String lockStatus = stringValue.substring(8, 8 + 7);
+                            if (lockStatus.length() >= 5) {
+                                try {
                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                                } catch (NumberFormatException e) {
+                                    // Ignore parsing error
+                                }
+                            }
+                        }
                     }
                     break;
                 case 0x60:
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
-                    buf.skipBytes(length - 2);
+                        buf.skipBytes(length - 2); // Skip remaining bytes if any
+                    }
                     break;
                 case 0x69:
+                     if (length >= 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
                 case 0x80:
+                    if (length >= 1) {
                         buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                        // endIndex is calculated relative to start of readerIndex *before* reading length
+                        // The following line seems wrong as it uses writerIndex. Assuming it intends to decode remaining TLV data.
+                        // decodeExtension(position, buf, endIndex); // Pass the correct end index for this TLV
+                        // Let's assume decodeExtension handles reading until endIndex
                         decodeExtension(position, buf, endIndex);
+                    }
                      break;
                 case 0x91:
+                    if (length >= 18) { // Check minimum length for all fields read
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         buf.readUnsignedShort();
                         buf.readUnsignedInt();
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
                 case 0x94:
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
                 case 0xA7:
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
                 case 0xAC:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
                 case 0xBC:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
                 case 0xBD:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
                 case 0xD0:
+                    if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    }
                     break;
                 case 0xD3:
+                     if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0xD4:
                 case 0xE1:
+                     if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 0) {
                         int count = buf.readUnsignedByte();
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2);
+                        if (length >= expectedLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
                         }
+                    }
                     break;
                 case 0xDA:
+                    if (length >= 3) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
                 case 0xE6:
-                    while (buf.readerIndex() < endIndex) {
+                    // Assuming decodeCustomDouble reads 8 bytes
+                    while (buf.readerIndex() < endIndex && buf.readableBytes() >= 1 + 6 + 8 + 8) {
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
                 case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                    // Needs careful bounds checking
+                    if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
+                        if (length >= 3) {
                             int mnc = buf.readUnsignedByte();
-                        while (buf.readerIndex() < endIndex) {
+                            while (buf.readerIndex() < endIndex && buf.readableBytes() >= 2 + 2 + 1) { // LAC, CID, RSSI
                                 network.addCellTower(CellTower.from(
                                         mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                         buf.readUnsignedByte()));
                             }
+                            if (!network.getCellTowers().isEmpty()) {
                                 position.setNetwork(network);
+                            }
+                        }
                     } else {
-                        while (buf.readerIndex() < endIndex) {
+                        while (buf.readerIndex() < endIndex && buf.readableBytes() >= 4) { // Need length + type
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
+                            int itemEndIndex = buf.readerIndex() + extendedLength - 2; // Data starts after type
+                            if (itemEndIndex > endIndex || extendedLength < 2) { // Check bounds and minimum length
+                                break; // Corrupt data
+                            }
+                            if (buf.readableBytes() < extendedLength - 2) { // Check enough data bytes remain
+                                break; // Corrupt data
+                            }
                             switch (extendedType) {
-                                case 0x0001:
+                                case 0x0001: // 3 bytes data
+                                    if (extendedLength - 2 >= 3) {
                                         position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                         buf.readUnsignedByte(); // unused
+                                    }
                                     break;
-                                case 0x0023:
+                                case 0x0023: // 6 bytes data
+                                    if (extendedLength - 2 >= 6) {
+                                        try {
                                             position.set("fuel2", Double.parseDouble(
                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                        } catch (NumberFormatException e) { /* ignore */ }
+                                    }
                                     break;
-                                case 0x00CE:
+                                case 0x00CE: // 2 bytes data
+                                    if (extendedLength - 2 >= 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                    }
                                     break;
-                                case 0x00D8:
+                                case 0x00D8: // 9 bytes data
+                                    if (extendedLength - 2 >= 9) {
                                         Network network = new Network();
                                         network.addCellTower(CellTower.from(
                                                 buf.readUnsignedShort(), buf.readUnsignedByte(),
                                                 buf.readUnsignedShort(), buf.readUnsignedInt()));
                                         position.setNetwork(network);
+                                    }
                                     break;
-                                case 0xE1:
+                                case 0xE1: // 1 byte data
+                                     if (extendedLength - 2 >= 1) {
                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                    }
                                     break;
                                 default:
-                                    buf.skipBytes(extendedLength - 2);
+                                    // Skip remaining bytes of this item
+                                    buf.readerIndex(itemEndIndex);
                                     break;
                             }
+                             // Ensure reader index is correctly positioned even if data was skipped or partially read
+                            buf.readerIndex(itemEndIndex);
                         }
                     }
                     break;
                 case 0xED:
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
                 case 0xEE:
+                     if (length >= 7) { // Check length for all reads
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0xF3:
-                    while (buf.readerIndex() < endIndex) {
+                    while (buf.readerIndex() < endIndex && buf.readableBytes() >= 3) { // Need type + length
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int itemEndIndex = buf.readerIndex() + extendedLength;
+                        if (itemEndIndex > endIndex) { // Check bounds
+                            break; // Corrupt data
+                        }
+                        if (buf.readableBytes() < extendedLength) { // Check enough data bytes remain
+                             break; // Corrupt data
+                        }
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                            // Add length checks for each case
+                            case 0x0002: if(extendedLength>=2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0003: if(extendedLength>=2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;
+                            case 0x0004: if(extendedLength>=2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;
+                            case 0x0005: if(extendedLength>=4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;
+                            case 0x0007: if(extendedLength>=2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0008: if(extendedLength>=2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0009: if(extendedLength>=2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;
+                            case 0x000B: if(extendedLength>=2) position.set("intakePressure", buf.readUnsignedShort()); break;
+                            case 0x000C: if(extendedLength>=2) position.set("intakeTemp", buf.readUnsignedShort() - 40); break;
+                            case 0x000D: if(extendedLength>=2) position.set("intakeFlow", buf.readUnsignedShort()); break;
+                            case 0x000E: if(extendedLength>=2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;
+                            case 0x0050: if(extendedLength>=17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;
+                            case 0x0100: if(extendedLength>=2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0102: if(extendedLength>=2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); break;
+                            case 0x0112: if(extendedLength>=2) position.set("hardAccelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0113: if(extendedLength>=2) position.set("hardDecelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0114: if(extendedLength>=2) position.set("hardCorneringCount", buf.readUnsignedShort()); break;
+                            default: buf.skipBytes(extendedLength); break;
                         }
+                        // Ensure reader index is correctly positioned
+                        buf.readerIndex(itemEndIndex);
                     }
                     break;
                 case 0xFE:
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
+                    } else if (length > 1) {
                         int mark = buf.readUnsignedByte();
                         if (mark == 0x7C) {
+                            // Process alarm TLVs within the remaining data
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) { // Need type and length bytes
+                                    break;
+                                }
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int itemEndIndex = buf.readerIndex() + extendedLength;
+                                if (itemEndIndex > endIndex) { // Check bounds against the overall FE block end
+                                     buf.readerIndex(endIndex); // Move to the end to avoid overreading
+                                     break; // Corrupt data
+                                }
+                                if (buf.readableBytes() < extendedLength) { // Check enough data bytes remain
+                                     buf.readerIndex(endIndex); // Move to the end
+                                     break; // Corrupt data
+                                }
+
                                 switch (extendedType) {
                                     case 0x01:
+                                        if (extendedLength >= 4) { // Check length for alarm data
                                             long alarms = buf.readUnsignedInt();
                                             if (BitUtil.check(alarms, 0)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                             }
                                             if (BitUtil.check(alarms, 1)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                             }
                                             if (BitUtil.check(alarms, 2)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                             }
                                             if (BitUtil.check(alarms, 3)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                             }
                                             if (BitUtil.check(alarms, 4)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                             }
+                                            // Skip remaining bytes within this item if any
+                                            buf.readerIndex(itemEndIndex);
+                                        } else {
+                                             buf.skipBytes(extendedLength); // Skip corrupt item
+                                        }
                                         break;
                                     default:
                                         buf.skipBytes(extendedLength);
                                         break;
                                 }
+                                // Ensure reader is at the end of the processed item
+                                buf.readerIndex(itemEndIndex);
                             }
-                        }
+                            // No separate battery level byte expected in this 7C structure
+                        } else { // mark != 0x7C
+                           // Assume the byte immediately following the mark is the battery level
+                           if (buf.readerIndex() < endIndex) { // Check if there's a byte left to read
                                position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                            }
+                           // Any further remaining bytes will be skipped by the outer buf.readerIndex(endIndex)
+                        }
+                    }
+                    // Let the outer mechanism handle setting readerIndex to endIndex
                     break;
                 default:
+                    // Skip unknown TLV type
+                    buf.readerIndex(endIndex); // Move reader index to the end of this TLV item
                     break;
             }
+            // Ensure reader index is set to the end of the current TLV item,
+            // even if processing logic didn't consume all bytes (e.g., due to errors or partial reads)
+            // This prevents infinite loops or incorrect reading of subsequent TLVs.
+             if (buf.readerIndex() > endIndex) {
+                 // If processing logic somehow went beyond endIndex, log error or break
+                 // Log.warning("Reader index moved beyond endIndex for subtype " + subtype);
+                 break; // Avoid potential issues
+             }
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
