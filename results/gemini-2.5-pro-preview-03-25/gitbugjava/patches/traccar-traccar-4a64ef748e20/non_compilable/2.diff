diff --git a/tmp/fad8db92-ecda-43ed-95c9-bdb0acaed1db_buggy.java b/tmp/02867476-0330-4868-883b-61425272a507_fixed.java
index 62fa0c6..0e8fbf7 100644
--- a/tmp/fad8db92-ecda-43ed-95c9-bdb0acaed1db_buggy.java
+++ b/tmp/02867476-0330-4868-883b-61425272a507_fixed.java
@@ -1,306 +1,552 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
+        // This block seems specific and potentially problematic (byte count 18 vs 20)
         if (buf.readableBytes() == 20) {
-
-            buf.skipBytes(4); // remaining battery and mileage
+            // Assuming this structure is correct for specific messages
+            buf.skipBytes(4); // remaining battery and mileage?
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
-            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
+            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1); // Voltage
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
-
+            // Note: Consumes 18 bytes, leaves 2 unread if readableBytes == 20 initially
             return position;
-
         }
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need at least type and length
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Ensure buffer has enough bytes for the declared length before processing
+            if (endIndex > buf.writerIndex()) {
+                 // Log error or break if length exceeds buffer bounds
+                 // Log.warn("Invalid TLV length: subtype=" + subtype + ", length=" + length);
+                 break; // Avoid BufferOverflowException
+            }
+
             String stringValue;
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Odometer
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    } else {
+                        buf.skipBytes(length); // Skip if length is wrong
+                    }
                     break;
-                case 0x02:
+                case 0x02: // Fuel Level
+                    if (length == 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x2b:
+                case 0x2b: // Fuel Consumption
+                    if (length == 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x30:
+                case 0x30: // RSSI
+                    if (length == 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x31:
+                case 0x31: // Satellites
+                    if (length == 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x33:
+                case 0x33: // Lock Status String
+                    if (length > 15) { // Check min length for expected format "*M00...{7 chars}..."
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) {
+                            try {
+                                String lockStatus = stringValue.substring(8, 15); // 7 chars
                                 position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                            } catch (IndexOutOfBoundsException | NumberFormatException e) {
+                                // Malformed string, ignore or log
+                                // Ensure buffer index advances correctly
+                                buf.readerIndex(endIndex);
+                            }
+                        } else {
+                            // String doesn't match expected format, ensure index advances
+                            buf.readerIndex(endIndex);
+                        }
+                    } else {
+                         buf.skipBytes(length);
                     }
                     break;
-                case 0x60:
+                case 0x60: // Event
+                     if (length >= 2) {
                          position.set(Position.KEY_EVENT, buf.readUnsignedShort());
+                         // Skip remaining bytes, if any
                          buf.skipBytes(length - 2);
+                     } else {
+                         buf.skipBytes(length);
+                     }
                     break;
-                case 0x69:
+                case 0x69: // Battery Voltage
+                    if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
-                    decodeExtension(position, buf, endIndex);
+                case 0x80: // Extension - Original logic complex/unclear, skip based on length
+                     buf.skipBytes(length);
                     break;
-                case 0x91:
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
-                    position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                    position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
-                    position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                case 0x91: // OBD Data Block 1
+                     // Min expected length is 24 based on fields read
+                     if (length >= 24) {
+                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1); // 2
+                         position.set(Position.KEY_RPM, buf.readUnsignedShort()); // 2
+                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte()); // 1
+                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255); // 1
+                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255); // 1
+                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40); // 1
+                         buf.skipBytes(2); // skip unknown short
+                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01); // 2
+                         buf.skipBytes(2); // skip unknown short
+                         buf.skipBytes(4); // skip unknown int
+                         buf.skipBytes(2); // skip unknown short
+                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01); // 2
+                         // Total read = 24 bytes. Skip any remaining bytes if length > 24
+                         buf.skipBytes(length - 24);
+                     } else {
+                         buf.skipBytes(length); // Skip if length insufficient
+                     }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC
+                    if (length == 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer (alternate)
+                    if (length == 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver Name
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
-                case 0xBD:
+                case 0xBD: // Driver ID
+                     if (length > 0) {
                          stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                          position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                     }
                     break;
-                case 0xD0:
+                case 0xD0: // User Status / Alarm
+                    if (length == 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD3:
+                case 0xD3: // Power (Voltage)
+                    if (length == 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD4:
-                case 0xE1:
+                case 0xD4: // Battery Level %
+                case 0xE1: // Battery Level %
+                    if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xD5:
+                case 0xD5: // Lock Info / Battery Voltage
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1) { // Multiple locks format
+                         try {
                             int count = buf.readUnsignedByte();
+                            // Check if length is sufficient: 1 (count) + count * 13 bytes/lock
+                            if (1 + count * 13 <= length && count > 0) {
                                 for (int i = 1; i <= count; i++) {
+                                    // Check readable bytes before each read group
+                                    if (buf.readableBytes() < 13) {
+                                        throw new IndexOutOfBoundsException("Insufficient data for lock " + i);
+                                    }
                                     position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                     int status = buf.readUnsignedShort();
                                     position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                                 }
+                                // Skip any remaining padding bytes
+                                buf.readerIndex(endIndex);
+                            } else {
+                                buf.skipBytes(length); // Skip if length mismatch or count is 0
+                            }
+                         } catch (IndexOutOfBoundsException e) {
+                             // Log error? Ensure index advances
+                             buf.readerIndex(endIndex);
+                         }
+                    } else { // length == 0 or 1 (invalid for multi-lock)
+                        buf.skipBytes(length);
                     }
                     break;
-                case 0xDA:
-                    buf.readUnsignedShort(); // string cut count
+                case 0xDA: // Device Status
+                    if (length >= 3) {
+                        buf.skipBytes(2); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                        buf.skipBytes(length - 3); // Skip remaining
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Wireless Sensors
+                    // Each sensor block is 1 (index) + 6 (mac) + 8 (temp) + 8 (humidity) = 23 bytes
+                    if (length > 0 && length % 23 == 0) {
                         while (buf.readerIndex() < endIndex) {
+                             if (buf.readableBytes() < 23) break; // Check before reading block
                             int sensorIndex = buf.readUnsignedByte();
                             buf.skipBytes(6); // mac
                             position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                             position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                         }
+                    } else {
+                         buf.skipBytes(length);
+                    }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                case 0xEB: // Network Info or Extended Data
+                    handleEbExtension(position, buf, length, endIndex);
+                    break;
+                case 0xED: // Card Number
+                    if (length > 0) {
+                        stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        position.set(Position.KEY_CARD, stringValue.trim());
+                    }
+                    break;
+                case 0xEE: // Misc Status (Bike Lock?)
+                    if (length == 7) {
+                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
+                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    } else {
+                         buf.skipBytes(length);
+                    }
+                    break;
+                case 0xF3: // Extended OBD Data
+                    handleF3Extension(position, buf, endIndex);
+                    break;
+                case 0xFE: // Battery Level % or Extended Alarms
+                    handleFeExtension(position, buf, length, endIndex); // Use helper for clarity
+                    break;
+                default: // Unknown subtype
+                    buf.skipBytes(length); // Skip the value part
+                    break;
+            }
+
+            // Ensure reader index is correctly positioned at the end of the TLV
+            // This handles cases where the switch case skipped bytes or didn't consume the full length.
+            // Also handles unknown subtypes where we skipped the value.
+            if (buf.readerIndex() > endIndex) {
+                 // Log.warn("Reader index (" + buf.readerIndex() + ") passed endIndex (" + endIndex + ") for subtype " + subtype);
+                 // Resetting might hide parsing bugs, but prevents reading into next TLV incorrectly
+                 buf.readerIndex(endIndex);
+            } else {
+                 // If reader index is before endIndex (e.g. case skipped due to invalid inner length), advance it.
+                 buf.readerIndex(endIndex);
+            }
+
+        }
+
+        return position;
+    }
+
+    // Helper method for case 0xEB (Refactored for clarity and safety)
+    private void handleEbExtension(Position position, ByteBuf buf, int length, int endIndex) {
+        // Check length before reading anything inside
+        if (length < 1) {
+             // buf.skipBytes(length); // length is 0, no skip needed
+             return;
+        }
+        try {
+            // Conditional logic based on first two bytes peeked
+            // Check length > 1 before peeking
+            if (length > 1 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                // Network Info Format 1
+                if (length >= 3) { // Need MCC (2) and MNC (1)
                     Network network = new Network();
                     int mcc = buf.readUnsignedShort();
                     int mnc = buf.readUnsignedByte();
+                    // Check if remaining length matches cell tower structure size: N * 5 bytes
+                    int remainingLength = length - 3;
+                    if (remainingLength > 0 && remainingLength % 5 == 0) {
                         while (buf.readerIndex() < endIndex) {
+                             if (buf.readableBytes() < 5) break; // Check remaining bytes for a full cell tower info
                             network.addCellTower(CellTower.from(
                                     mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                     buf.readUnsignedByte()));
                         }
                         position.setNetwork(network);
+                    }
+                    // Ensure reader index is advanced to endIndex even if format was unexpected
+                    buf.readerIndex(endIndex);
                 } else {
+                    buf.skipBytes(length); // Skip if length too short for MCC/MNC
+                }
+            } else {
+                // Extended Data Format (inner TLVs)
                 while (buf.readerIndex() < endIndex) {
+                    if (buf.readableBytes() < 4) break; // Need inner length(2) and type(2)
                     int extendedLength = buf.readUnsignedShort();
                     int extendedType = buf.readUnsignedShort();
+                    int valueBytes = extendedLength - 2; // Bytes for value part
+                    int valueEndIndex = buf.readerIndex() + valueBytes;
+
+                    if (valueBytes < 0 || valueEndIndex > endIndex) {
+                         buf.readerIndex(endIndex); // Skip to end if inner length invalid
+                         break;
+                    }
+                    if (buf.readableBytes() < valueBytes) {
+                         buf.readerIndex(endIndex); // Skip to end if not enough bytes for value
+                         break;
+                    }
+
                     switch (extendedType) {
-                                case 0x0001:
+                        case 0x0001: // fuel1
+                            if (valueBytes == 3) { // 2(val)+1(unused)
                                 position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                 buf.readUnsignedByte(); // unused
+                            } else { buf.skipBytes(valueBytes); }
                             break;
-                                case 0x0023:
+                        case 0x0023: // fuel2
+                            if (valueBytes == 6) {
+                                try {
                                     position.set("fuel2", Double.parseDouble(
                                         buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                } catch (NumberFormatException e) { buf.skipBytes(valueBytes); /* ignore parse error */ }
+                            } else { buf.skipBytes(valueBytes); }
                             break;
-                                case 0x00CE:
+                        case 0x00CE: // power
+                            if (valueBytes == 2) {
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                            } else { buf.skipBytes(valueBytes); }
                             break;
-                                case 0x00D8:
+                        case 0x00D8: // network format 2
+                            if (valueBytes == 9) { // 2(mcc)+1(mnc)+2(lac)+4(cid)
                                 Network network = new Network();
                                 network.addCellTower(CellTower.from(
                                         buf.readUnsignedShort(), buf.readUnsignedByte(),
                                         buf.readUnsignedShort(), buf.readUnsignedInt()));
                                 position.setNetwork(network);
+                            } else { buf.skipBytes(valueBytes); }
                             break;
-                                case 0xE1:
+                        case 0xE1: // battery level % (inner)
+                            if (valueBytes == 1) {
                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                            } else { buf.skipBytes(valueBytes); }
                             break;
                         default:
-                                    buf.skipBytes(extendedLength - 2);
+                            buf.skipBytes(valueBytes);
                             break;
                     }
+                    // Ensure index is correct after processing inner TLV's value
+                    buf.readerIndex(valueEndIndex);
                 }
             }
-                    break;
-                case 0xED:
-                    stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    position.set(Position.KEY_CARD, stringValue.trim());
-                    break;
-                case 0xEE:
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
-                    position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                    break;
-                case 0xF3:
+        } catch (Exception e) { // Catch potential exceptions during parsing (e.g., reading bytes)
+            // Log error?
+            // Log.warn("Error parsing EB extension: " + e.getMessage());
+            buf.readerIndex(endIndex); // Ensure we move to the end of the outer TLV
+        }
+    }
+
+    // Helper method for case 0xF3 (Refactored for clarity and safety)
+    private void handleF3Extension(Position position, ByteBuf buf, int endIndex) {
+        try {
              while (buf.readerIndex() < endIndex) {
+                 if (buf.readableBytes() < 3) break; // Need type(2) + length(1)
                  int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
-                        switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                 int extendedLength = buf.readUnsignedByte(); // Length of value part
+                 int valueEndIndex = buf.readerIndex() + extendedLength;
+
+                 if (extendedLength < 0 || valueEndIndex > endIndex) { // length is unsignedByte, >=0 check redundant
+                      buf.readerIndex(endIndex); // Skip to end if inner length invalid
                       break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
+                 }
+                 if (buf.readableBytes() < extendedLength) {
+                      buf.readerIndex(endIndex); // Skip to end if not enough bytes for value
                       break;
                  }
+
+                 // Simplified handling using if/else and skipBytes
+                 if (extendedType == 0x0002 && extendedLength == 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                 else if (extendedType == 0x0003 && extendedLength == 2) position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                 else if (extendedType == 0x0004 && extendedLength == 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                 else if (extendedType == 0x0005 && extendedLength == 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
+                 else if (extendedType == 0x0007 && extendedLength == 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
+                 else if (extendedType == 0x0008 && extendedLength == 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
+                 else if (extendedType == 0x0009 && extendedLength == 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
+                 else if (extendedType == 0x000B && extendedLength == 2) position.set("intakePressure", buf.readUnsignedShort());
+                 else if (extendedType == 0x000C && extendedLength == 2) position.set("intakeTemp", buf.readUnsignedShort() - 40);
+                 else if (extendedType == 0x000D && extendedLength == 2) position.set("intakeFlow", buf.readUnsignedShort());
+                 else if (extendedType == 0x000E && extendedLength == 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
+                 else if (extendedType == 0x0050 && extendedLength == 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                 else if (extendedType == 0x0100 && extendedLength == 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
+                 else if (extendedType == 0x0102 && extendedLength == 2) position.set("tripFuel", buf.readUnsignedShort() * 0.1);
+                 else if (extendedType == 0x0112 && extendedLength == 2) position.set("hardAccelerationCount", buf.readUnsignedShort());
+                 else if (extendedType == 0x0113 && extendedLength == 2) position.set("hardDecelerationCount", buf.readUnsignedShort());
+                 else if (extendedType == 0x0114 && extendedLength == 2) position.set("hardCorneringCount", buf.readUnsignedShort());
+                 else buf.skipBytes(extendedLength); // Skip data if type/length doesn't match known patterns
+
+                 buf.readerIndex(valueEndIndex); // Ensure index is moved past value data correctly
              }
-                    break;
-                case 0xFE:
+         } catch (Exception e) { // Catch potential read errors
+             // Log.warn("Error parsing F3 extension: " + e.getMessage());
+             buf.readerIndex(endIndex); // Ensure index advances on error
+         }
+    }
+
+    // Helper method for case 0xFE (Refactored with fix and safety checks)
+    private void handleFeExtension(Position position, ByteBuf buf, int length, int endIndex) {
+         try {
              if (length == 1) {
                  position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
+             } else if (length > 1) {
                  int mark = buf.readUnsignedByte();
+                 // Calculate end index for the *value* part of the FE TLV
+                 int feValueEndIndex = buf.readerIndex() + length - 1;
+
                  if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                     // Process inner TLVs for alarms
+                     while (buf.readerIndex() < feValueEndIndex) {
+                         if (buf.readableBytes() < 2) break; // Need inner type(1) + length(1)
                          int extendedType = buf.readUnsignedByte();
                          int extendedLength = buf.readUnsignedByte();
+                         int innerValueEndIndex = buf.readerIndex() + extendedLength;
+
+                         if (extendedLength < 0 || innerValueEndIndex > feValueEndIndex) {
+                             buf.readerIndex(feValueEndIndex); // Skip to end of FE value section
+                             break; // Inner TLV exceeds outer boundary or invalid length
+                         }
+                         if (buf.readableBytes() < extendedLength) {
+                             buf.readerIndex(feValueEndIndex); // Skip to end of FE value section
+                             break; // Not enough bytes for inner value
+                         }
+
                          switch (extendedType) {
-                                    case 0x01:
+                             case 0x01: // Alarms
+                                 if (extendedLength == 4) {
                                      long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                                        }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                     if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }
+                                     if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }
+                                     if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }
+                                     if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }
+                                     if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }
+                                 } else {
+                                     buf.skipBytes(extendedLength);
                                  }
                                  break;
                              default:
                                  buf.skipBytes(extendedLength);
                                  break;
                          }
+                         // Ensure reader index is advanced past inner value, even if skipped
+                         buf.readerIndex(innerValueEndIndex);
                      }
-                        }
+                     // Ensure reader index is at the end of the FE value section after processing inner TLVs
+                     buf.readerIndex(feValueEndIndex);
+                 } else {
+                     // Mark is not 0x7C. Assume the byte *after* mark is battery level.
+                     // We already read 'mark' (1 byte). Length is > 1.
                      position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                     // The outer loop's readerIndex adjustment (buf.readerIndex(endIndex))
+                     // will handle skipping any remaining bytes if length > 2.
                  }
-                    break;
-                default:
-                    break;
              }
-            buf.readerIndex(endIndex);
+             // If length is 0, do nothing. Outer loop handles index.
+         } catch (Exception e) { // Catch potential read errors
+             // Log.warn("Error parsing FE extension: " + e.getMessage());
+             buf.readerIndex(endIndex); // Ensure index advances on error
+         }
+    }
+
+    // Assume decodeCustomDouble exists elsewhere and is correct
+    private double decodeCustomDouble(ByteBuf buf) {
+        // Placeholder implementation, replace with actual logic if needed
+        if (buf.readableBytes() >= 8) {
+            return buf.readDouble();
+        }
+        return 0.0;
+    }
+
+    // Assume decodeAlarm exists elsewhere and is correct
+    private String decodeAlarm(long code) {
+        // Placeholder implementation, replace with actual logic if needed
+        if (code == 0x00030002) return "someAlarm"; // Example
+        return null;
     }
 
-        return position;
+    // Assume decodeCoordinates exists elsewhere and is correct
+    private void decodeCoordinates(Position position, ByteBuf buf) {
+        // Placeholder implementation, replace with actual logic if needed
+        if (buf.readableBytes() >= 8) {
+            position.setLatitude(buf.readInt() * 0.000001);
+            position.setLongitude(buf.readInt() * 0.000001);
+            position.setValid(true); // Assume valid if coordinates are read
+        }
+    }
+
+    // Assume readDate exists elsewhere and is correct
+    private java.util.Date readDate(ByteBuf buf, java.util.TimeZone tz) {
+        // Placeholder implementation, replace with actual logic if needed
+        if (buf.readableBytes() >= 6) {
+            int year = buf.readUnsignedByte();
+            int month = buf.readUnsignedByte();
+            int day = buf.readUnsignedByte();
+            int hour = buf.readUnsignedByte();
+            int minute = buf.readUnsignedByte();
+            int second = buf.readUnsignedByte();
+            java.util.Calendar calendar = java.util.Calendar.getInstance(tz != null ? tz : java.util.TimeZone.getTimeZone("UTC"));
+            calendar.clear();
+            calendar.set(year + 2000, month - 1, day, hour, minute, second);
+            return calendar.getTime();
+        }
+        return null;
     }
\ No newline at end of file
