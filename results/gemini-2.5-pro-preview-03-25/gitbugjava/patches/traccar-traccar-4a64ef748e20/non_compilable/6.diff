diff --git a/tmp/6a7efcbd-0a70-403c-910d-b513d54761dc_buggy.java b/tmp/1c8b7d6d-1407-4573-b820-bbf9caeb116d_fixed.java
index 62fa0c6..45c55e5 100644
--- a/tmp/6a7efcbd-0a70-403c-910d-b513d54761dc_buggy.java
+++ b/tmp/1c8b7d6d-1407-4573-b820-bbf9caeb116d_fixed.java
@@ -1,306 +1,421 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Process TLV attributes
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Basic validation for length and endIndex
+            if (length < 0 || endIndex > buf.writerIndex()) {
+                break; // Invalid length or endIndex, stop processing TLVs
+            }
+
             String stringValue;
             switch (subtype) {
                 case 0x01:
+                    if (length == 4 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    } else {
+                         // Skip if length wrong or not enough bytes - handled by outer readerIndex advance
+                    }
                     break;
                 case 0x02:
+                    if (length == 2 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0x2b:
+                    if (length == 4 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case 0x30:
+                    if (length == 1 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x31:
+                    if (length == 1 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x33:
+                    if (length > 0 && buf.readableBytes() >= length) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) { // Check length before substring
+                            String lockStatus = stringValue.substring(8, 15); // Use bounds 8 and 15 (exclusive)
+                            if (lockStatus.length() >= 5) { // Double check parsed substring length
+                                try {
                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                                } catch (NumberFormatException | IndexOutOfBoundsException e) {
+                                    // Ignore parsing errors
+                                }
+                            }
+                        }
                     }
                     break;
                 case 0x60:
+                    if (length >= 2 && buf.readableBytes() >= 2) { // Check we can read the short
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
-                    buf.skipBytes(length - 2);
+                        // Remaining bytes skipped by outer loop index setting
+                    }
                     break;
                 case 0x69:
+                    if (length == 2 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
                 case 0x80:
+                    if (length > 0 && buf.readableBytes() >= length) {
                         buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                        // Original suspicious code: endIndex = buf.writerIndex() - 2;
+                        // Use the endIndex calculated from the length field instead
                         decodeExtension(position, buf, endIndex);
+                    }
                     break;
                 case 0x91:
+                    if (length >= 18 && buf.readableBytes() >= 18) { // Check minimum readable bytes
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
+                        buf.skipBytes(2); // Skip 2 bytes (original: readUnsignedShort)
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
+                        buf.skipBytes(2); // Skip 2 bytes
+                        buf.skipBytes(4); // Skip 4 bytes
+                        buf.skipBytes(2); // Skip 2 bytes
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
                 case 0x94:
-                    if (length > 0) {
+                    if (length > 0 && buf.readableBytes() >= length) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
                 case 0xA7:
+                    if (length == 4 && buf.readableBytes() >= length) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
                 case 0xAC:
+                     if (length == 4 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
                 case 0xBC:
+                    if (length > 0 && buf.readableBytes() >= length) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
                 case 0xBD:
+                    if (length > 0 && buf.readableBytes() >= length) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
                 case 0xD0:
+                    if (length == 4 && buf.readableBytes() >= length) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    }
                     break;
                 case 0xD3:
+                    if (length == 2 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0xD4:
-                case 0xE1:
+                case 0xE1: // Handles both D4 and E1
+                    if (length == 1 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case 0xD5:
-                    if (length == 2) {
+                    if (length == 2 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1 && buf.readableBytes() >= 1) { // Need at least count byte
                         int count = buf.readUnsignedByte();
+                        int requiredDataLength = count * (5 + 5 + 1 + 2); // Data length after count byte
+                        if (length == 1 + requiredDataLength && buf.readableBytes() >= requiredDataLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
                         }
+                    }
                     break;
                 case 0xDA:
+                    if (length == 3 && buf.readableBytes() >= length) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
                 case 0xE6:
+                    // Process sensor blocks only if buffer has enough bytes until endIndex
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 23) { // Check space for one full sensor block
+                            break;
+                        }
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
                 case 0xEB:
+                     // Process only if buffer has enough bytes for the declared length
+                    if (buf.readableBytes() >= length && length > 0) {
+                         // Logic to distinguish based on first short value > 200?
                          if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                             // Cell Tower Data Parsing
                              Network network = new Network();
+                             if (length >= 3 && buf.readableBytes() >= 3) { // Need MCC (2) + MNC (1)
                                  int mcc = buf.readUnsignedShort();
                                  int mnc = buf.readUnsignedByte();
                                  while (buf.readerIndex() < endIndex) {
+                                     if (buf.readableBytes() < 5) { // Need LAC (2), CID (2), RSSI (1)
+                                         break;
+                                     }
                                      network.addCellTower(CellTower.from(
                                              mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                              buf.readUnsignedByte()));
                                  }
+                                 if (!network.getCellTowers().isEmpty()) {
                                       position.setNetwork(network);
+                                 }
+                             }
                          } else {
+                             // Nested TLV Structure Parsing
                              while (buf.readerIndex() < endIndex) {
+                                 if (buf.readableBytes() < 4) { // Need extended length (2) + type (2)
+                                     break;
+                                 }
                                  int extendedLength = buf.readUnsignedShort();
                                  int extendedType = buf.readUnsignedShort();
+                                 // Calculate end index for this nested TLV. Data length is extendedLength - type(2)
+                                 int nestedDataLength = extendedLength - 2;
+                                 int extendedEndIndex = buf.readerIndex() + nestedDataLength;
+
+                                 if (nestedDataLength < 0 || extendedEndIndex > endIndex || buf.readableBytes() < nestedDataLength) {
+                                     // Invalid nested length or not enough bytes, stop processing nested TLVs
+                                     buf.readerIndex(endIndex); // Skip to end of parent TLV
+                                     break;
+                                 }
+
                                  switch (extendedType) {
-                                case 0x0001:
+                                     case 0x0001: // Fuel 1 - Seems to expect 3 bytes data (short value + byte unused) -> length 5
+                                          if (nestedDataLength == 3) {
                                              position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
+                                             buf.readUnsignedByte(); // skip unused byte
+                                          } else { buf.skipBytes(nestedDataLength); }
                                          break;
-                                case 0x0023:
+                                     case 0x0023: // Fuel 2 - Expects 6 bytes data -> length 8
+                                          if (nestedDataLength == 6) {
                                              position.set("fuel2", Double.parseDouble(
                                                      buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                          } else { buf.skipBytes(nestedDataLength); }
                                          break;
-                                case 0x00CE:
+                                     case 0x00CE: // Power - Expects 2 bytes data -> length 4
+                                          if (nestedDataLength == 2) {
                                              position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                          } else { buf.skipBytes(nestedDataLength); }
                                          break;
-                                case 0x00D8:
+                                     case 0x00D8: // Cell Tower - Expects 9 bytes data -> length 11
+                                         if (nestedDataLength == 9) {
                                              Network network = new Network();
                                              network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
+                                                     buf.readUnsignedShort(), buf.readUnsignedByte(), // mcc, mnc
+                                                     buf.readUnsignedShort(), buf.readUnsignedInt())); // lac, cid
                                              position.setNetwork(network);
+                                         } else { buf.skipBytes(nestedDataLength); }
                                          break;
-                                case 0xE1:
+                                     case 0xE1: // Battery Level - Expects 1 byte data -> length 3
+                                         if (nestedDataLength == 1) {
                                              position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                         } else { buf.skipBytes(nestedDataLength); }
                                          break;
                                      default:
-                                    buf.skipBytes(extendedLength - 2);
+                                         buf.skipBytes(nestedDataLength); // Skip unknown nested type's data
                                          break;
                                  }
+                                 // Ensure reader index is correctly positioned after processing/skipping nested TLV
+                                 buf.readerIndex(extendedEndIndex);
                              }
                          }
-                    break;
+                    }
+                    break; // End of case 0xEB
                 case 0xED:
+                    if (length > 0 && buf.readableBytes() >= length) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
                 case 0xEE:
+                    if (length == 7 && buf.readableBytes() >= length) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0xF3:
+                    // Nested TLV (type is 2 bytes, length is 1 byte)
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 3) { // Need type (2) + length (1)
+                            break;
+                        }
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int extendedEndIndex = buf.readerIndex() + extendedLength;
+
+                        if (extendedLength < 0 || extendedEndIndex > endIndex || buf.readableBytes() < extendedLength) {
+                            // Invalid length or not enough bytes
+                             buf.readerIndex(endIndex); // Skip to end of parent TLV
+                            break;
+                        }
+
+                        // Process based on type and length
+                        boolean processed = false; // Flag to check if data was read or needs skipping
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
+                            case 0x0002: if (extendedLength == 2) { position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); processed = true; } break;
+                            case 0x0003: if (extendedLength == 2) { position.set(Position.KEY_RPM, buf.readUnsignedShort()); processed = true; } break;
+                            case 0x0004: if (extendedLength == 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); processed = true; } break;
+                            case 0x0005: if (extendedLength == 4) { position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); processed = true; } break;
+                            case 0x0007: if (extendedLength == 2) { position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); processed = true; } break;
+                            case 0x0008: if (extendedLength == 2) { position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); processed = true; } break;
+                            case 0x0009: if (extendedLength == 2) { position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); processed = true; } break;
+                            case 0x000B: if (extendedLength == 2) { position.set("intakePressure", buf.readUnsignedShort()); processed = true; } break;
+                            case 0x000C: if (extendedLength == 2) { position.set("intakeTemp", buf.readUnsignedShort() - 40); processed = true; } break;
+                            case 0x000D: if (extendedLength == 2) { position.set("intakeFlow", buf.readUnsignedShort()); processed = true; } break;
+                            case 0x000E: if (extendedLength == 2) { position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); processed = true; } break;
+                            case 0x0050: if (extendedLength == 17) { position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); processed = true; } break;
+                            case 0x0100: if (extendedLength == 2) { position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); processed = true; } break;
+                            case 0x0102: if (extendedLength == 2) { position.set("tripFuel", buf.readUnsignedShort() * 0.1); processed = true; } break;
+                            case 0x0112: if (extendedLength == 2) { position.set("hardAccelerationCount", buf.readUnsignedShort()); processed = true; } break;
+                            case 0x0113: if (extendedLength == 2) { position.set("hardDecelerationCount", buf.readUnsignedShort()); processed = true; } break;
+                            case 0x0114: if (extendedLength == 2) { position.set("hardCorneringCount", buf.readUnsignedShort()); processed = true; } break;
+                            default: break; // Unknown type, processed = false
+                        }
+                        // If data wasn't processed (due to length mismatch or unknown type), skip the bytes
+                        if (!processed) {
                             buf.skipBytes(extendedLength);
-                                break;
                         }
+                        // Ensure reader index is correct for next nested TLV or end of parent TLV
+                        buf.readerIndex(extendedEndIndex);
                     }
                     break;
-                case 0xFE:
-                    if (length == 1) {
+                 case 0xFE: // <<<< FIX APPLIED HERE
+                    if (length == 1 && buf.readableBytes() >= 1) {
+                        // If length is 1, it's battery level
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
+                    } else if (length > 1 && buf.readableBytes() >= 1) {
+                        // If length > 1, check the first byte for alarm mark (0x7C)
+                        int mark = buf.readUnsignedByte(); // Read the first byte (mark)
                         if (mark == 0x7C) {
+                            // Process alarm TLVs (nested structure: type 1 byte, length 1 byte)
                             while (buf.readerIndex() < endIndex) {
+                                if (buf.readableBytes() < 2) { // Need type (1) + length (1)
+                                    break;
+                                }
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int alarmEndIndex = buf.readerIndex() + extendedLength;
+
+                                // Basic validation for alarmEndIndex and extendedLength
+                                if (extendedLength < 0 || alarmEndIndex > endIndex || buf.readableBytes() < extendedLength) {
+                                    buf.readerIndex(endIndex); // Avoid reading past end or skip if not enough data
+                                    break;
+                                }
+
                                 switch (extendedType) {
                                     case 0x01:
+                                        if (extendedLength == 4) { // Expect exactly 4 bytes for alarm data
                                             long alarms = buf.readUnsignedInt();
                                             if (BitUtil.check(alarms, 0)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                             }
                                             if (BitUtil.check(alarms, 1)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                             }
                                             if (BitUtil.check(alarms, 2)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                             }
                                             if (BitUtil.check(alarms, 3)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                             }
                                             if (BitUtil.check(alarms, 4)) {
                                                 position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                             }
+                                            // Add more alarm bit checks if necessary
+                                        } else {
+                                            buf.skipBytes(extendedLength); // Skip if length is not 4
+                                        }
                                         break;
                                     default:
-                                        buf.skipBytes(extendedLength);
+                                        buf.skipBytes(extendedLength); // Skip unknown alarm type
                                         break;
                                 }
+                                // Ensure index is exactly at alarmEndIndex after processing/skipping this alarm TLV
+                                buf.readerIndex(alarmEndIndex);
                             }
                         }
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                        // If mark was not 0x7C, we have already read the mark byte.
+                        // Do nothing else here. The outer buf.readerIndex(endIndex) call (below the switch)
+                        // will advance the reader index past the remaining data for this TLV.
                     }
-                    break;
+                    // If length == 0 or buffer was too short initially, do nothing.
+                    break; // End of case 0xFE
                 default:
+                    // Data for unknown subtypes will be skipped by buf.readerIndex(endIndex) below
                     break;
             }
+            // Set reader index to the end of the current TLV item.
+            // This ensures that even if a case partially reads, skips, or does nothing,
+            // the index moves correctly for the next iteration.
+            // It also handles skipping unknown subtypes entirely.
+            if (buf.readerIndex() < endIndex) {
                  buf.readerIndex(endIndex);
             }
+        }
 
         return position;
     }
\ No newline at end of file
