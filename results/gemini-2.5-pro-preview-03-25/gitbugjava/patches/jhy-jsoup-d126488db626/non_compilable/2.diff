diff --git a/tmp/77b1e507-0ea6-46c1-949e-7fe0aecc40dc_buggy.java b/tmp/5bf6e0fe-06d0-4925-a927-cf1ae83467dd_fixed.java
index 5bf31b1..fc441cb 100644
--- a/tmp/77b1e507-0ea6-46c1-949e-7fe0aecc40dc_buggy.java
+++ b/tmp/5bf6e0fe-06d0-4925-a927-cf1ae83467dd_fixed.java
@@ -1,17 +1,20 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) {
+                // Ensure balanced parentheses are consumed correctly, e.g., for :has(subquery)
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            } else if (tq.matches("[")) {
+                // Ensure balanced square brackets are consumed correctly, e.g., for [attr=val]
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            } else if (tq.matches(",")) {
+                // The comma is the OR separator and terminates a sub-query.
                 break;
-                else
-                    tq.consume();
-            else
+            } else {
+                // Consume any other character, including combinators like '>', '+', '~', ' ',
+                // as they are part of the current sub-query.
                 sq.append(tq.consume());
             }
+        }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
