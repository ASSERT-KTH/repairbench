diff --git a/tmp/812b2374-4d18-46e6-9bc2-ce65c646104f_buggy.java b/tmp/9937bc2c-4233-421a-a74a-90b439aac374_fixed.java
index 5bf31b1..a09f972 100644
--- a/tmp/812b2374-4d18-46e6-9bc2-ce65c646104f_buggy.java
+++ b/tmp/9937bc2c-4233-421a-a74a-90b439aac374_fixed.java
@@ -1,17 +1,25 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) {
+                // Handle grouped selectors like :is() or :has() which contain commas
+                // But don't accidentally consume the comma for the OR combinator
+                // We need to consume the entire balanced group without interpreting the comma inside it.
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            } else if (tq.matches("[")) {
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            } else if (tq.matches(",")) {
+                // Comma is the OR combinator, terminates the sub-query.
+                // Don't consume the comma, let the main parse loop handle it.
                 break;
-                else
-                    tq.consume();
-            else
+            } else if (tq.matchesAny(Combinators)) {
+                // Any other combinator (+ > ~ space) also terminates the sub-query.
+                // Don't consume the combinator, let the main parse loop handle it.
+                break;
+            } else {
+                // Consume the next character for the selector part (tag, id, class, attribute key, etc.)
                 sq.append(tq.consume());
             }
+        }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
