diff --git a/tmp/83243df5-a68a-4ab6-9df1-719e712121e1_buggy.java b/tmp/bf5bd792-a869-4d18-ba05-b864145e4271_fixed.java
index 5bf31b1..ee03733 100644
--- a/tmp/83243df5-a68a-4ab6-9df1-719e712121e1_buggy.java
+++ b/tmp/bf5bd792-a869-4d18-ba05-b864145e4271_fixed.java
@@ -1,17 +1,25 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) {
+                // Consume balanced parentheses for pseudo-selectors like :has() or :not()
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            } else if (tq.matches("[")) {
+                // Consume balanced square brackets for attribute selectors
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            } else if (tq.matchesAny(Combinators)) {
+                // Found a combinator (like '>', '+', '~', ',', or ' ')
+                // The original code had `if (sq.length() > 0) break; else tq.consume();`
+                // This `else tq.consume()` could consume leading combinators other than space, which seems incorrect.
+                // It should break on any combinator, letting the main parse loop handle it.
+                // An exception might be leading whitespace if it's not handled before calling consumeSubQuery,
+                // but the main loop typically consumes whitespace between tokens.
+                // Therefore, simply breaking seems the most consistent approach.
                 break; 
-                else
-                    tq.consume();
-            else
+            } else {
+                // Consume the selector part (tag, id, class, attribute key, pseudo, etc.)
                 sq.append(tq.consume());
             }
+        }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
