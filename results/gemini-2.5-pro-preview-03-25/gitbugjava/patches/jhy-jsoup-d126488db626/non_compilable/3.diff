diff --git a/tmp/b5ff1663-1fc8-433d-92a5-4a5a01d61654_buggy.java b/tmp/3cfb6e11-ceeb-4e20-8d3b-3f0f10c6a35e_fixed.java
index 5bf31b1..dc339dc 100644
--- a/tmp/b5ff1663-1fc8-433d-92a5-4a5a01d61654_buggy.java
+++ b/tmp/3cfb6e11-ceeb-4e20-8d3b-3f0f10c6a35e_fixed.java
@@ -1,17 +1,20 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) // Handle grouped selectors or pseudo-classes like :has()
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            else if (tq.matches("[")) // Handle attribute selectors
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
-                    break;
-                else
-                    tq.consume();
-            else
+            else if (tq.matchesAny(Combinators)) // Found a combinator
+                break; // Stop consuming, leave combinator in queue for parser to process
+            // Removed the problematic 'else' block that consumed leading combinators:
+            // else if (tq.matchesAny(Combinators))
+            //     if (sq.length() > 0)
+            //         break;
+            //     else
+            //         tq.consume(); // This was consuming leading combinators
+            else // Consume characters that are part of the simple selector (tag, id, class)
                 sq.append(tq.consume());
         }
         return StringUtil.releaseBuilder(sq);
     }
