diff --git a/tmp/9b3c1276-ca03-45e2-9136-1ba5971e90f5_buggy.java b/tmp/5a42ae08-e082-4af9-8e39-1d79d27fb9f5_fixed.java
index 5bf31b1..29919f9 100644
--- a/tmp/9b3c1276-ca03-45e2-9136-1ba5971e90f5_buggy.java
+++ b/tmp/5a42ae08-e082-4af9-8e39-1d79d27fb9f5_fixed.java
@@ -1,17 +1,25 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
+            if (tq.matches("(")) {
+                // Keep original logic for consuming balanced parentheses,
+                // assuming it's needed for specific pseudo-selectors or nested contexts.
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+            } else if (tq.matches("[")) {
+                // Keep original logic for consuming balanced brackets (attribute selectors).
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            } else if (tq.matchesAny(Combinators)) {
+                // If a combinator ('>', '+', '~', ' ', ',') is encountered,
+                // stop consuming the subquery. The caller should handle the combinator.
                 break;
-                else
-                    tq.consume();
-            else
+            } else if (tq.matches(":")) {
+                // If a pseudo-selector ':' is encountered, stop consuming.
+                // The caller (parseStructural) handles pseudo-selectors.
+                break;
+            } else {
+                // Otherwise, consume the character as part of the subquery (tag, class, id).
                 sq.append(tq.consume());
             }
+        }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
