diff --git a/tmp/a517b5ca-af75-4f60-aff2-98db1c669194_buggy.java b/tmp/c3fafc52-dd22-4978-999c-2b1a26f5811d_fixed.java
index fd205cf..c4b10d3 100644
--- a/tmp/a517b5ca-af75-4f60-aff2-98db1c669194_buggy.java
+++ b/tmp/c3fafc52-dd22-4978-999c-2b1a26f5811d_fixed.java
@@ -1,151 +1,181 @@
     private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
         // If there's nothing there, treat it like we have no restrictions.
         if ((content == null) || (content.length == 0)) {
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         }
 
         int bytesLen = content.length;
         int offset = 0;
-        Charset encoding = StandardCharsets.US_ASCII;
+        // Default to UTF-8, as recommended by RFC 9309, Section 2.2.
+        Charset encoding = StandardCharsets.UTF_8;
 
         // Check for a UTF-8 BOM at the beginning (EF BB BF)
         if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
             offset = 3;
             bytesLen -= 3;
-            encoding = StandardCharsets.UTF_8;
+            // encoding = StandardCharsets.UTF_8; // Already the default, but explicit doesn't hurt
         }
         // Check for UTF-16LE BOM at the beginning (FF FE)
         else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
             offset = 2;
             bytesLen -= 2;
             encoding = StandardCharsets.UTF_16LE;
         }
         // Check for UTF-16BE BOM at the beginning (FE FF)
         else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
             offset = 2;
             bytesLen -= 2;
             encoding = StandardCharsets.UTF_16BE;
         }
+        // Note: RFC 9309 specifies UTF-8 as the character encoding.
+        // While BOMs for UTF-16 are checked here for robustness against
+        // non-compliant files, the standard implies UTF-8 should be assumed
+        // if no BOM indicates otherwise. Our default is now UTF-8.
 
         String contentAsStr;
+        // Decode the content using the detected encoding. Handle malformed input.
+        try {
             contentAsStr = new String(content, offset, bytesLen, encoding);
+        } catch (Exception e) {
+            // It's possible that the site is sending us junk, or we decided
+            // on the wrong encoding. Rather than die, let's assume we can't
+            // process this file.
+            LOGGER.warn("Couldn't decode robots.txt file: " + url, e);
+            return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
+        }
+
 
         // Decide if we need to do special HTML processing.
         boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
         // If it looks like it contains HTML, but doesn't have a user agent
         // field, then
         // assume somebody messed up and returned back to us a random HTML page
         // instead
         // of a robots.txt file.
         boolean hasHTML = false;
         if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
             if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
                 LOGGER.trace("Found non-robots.txt HTML file: " + url);
                 return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
             } else {
                 // We'll try to strip out HTML tags below.
                 if (isHtmlType) {
                     LOGGER.debug("HTML content type returned for robots.txt file: " + url);
                 } else {
                     LOGGER.debug("Found HTML in robots.txt file: " + url);
                 }
 
                 hasHTML = true;
             }
         }
 
         // Break on anything that might be used as a line ending. Since
         // tokenizer doesn't return empty tokens, a \r\n sequence still
         // works since it looks like an empty string between the \r and \n.
-        StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
+        // Using Pattern.split preserves empty lines which might be significant
+        // between user-agent blocks, although StringTokenizer was likely OK too.
+        // Using regex for line breaks handles \n, \r, \r\n, \u0085, \u2028, \u2029
+        String[] lines = contentAsStr.split("[\\n\\r\\u0085\\u2028\\u2029]");
         ParseState parseState = new ParseState(url, robotNames);
 
-        while (lineParser.hasMoreTokens()) {
-            String line = lineParser.nextToken();
+        for (String line : lines) {
 
             // Get rid of HTML markup, in case some brain-dead webmaster has
             // created an HTML
             // page for robots.txt. We could do more sophisticated processing
             // here to better
             // handle bad HTML, but that's a very tiny percentage of all
             // robots.txt files.
             if (hasHTML) {
+                // Basic removal, might not handle complex cases like comments within tags.
                 line = line.replaceAll("<[^>]+>", "");
             }
 
             // trim out comments and whitespace
             int hashPos = line.indexOf("#");
             if (hashPos >= 0) {
                 line = line.substring(0, hashPos);
             }
 
             line = line.trim();
             if (line.length() == 0) {
+                // Empty lines might signify the end of a user-agent's record.
+                // Handle this state change if necessary (depends on ParseState logic).
+                // Assuming handleUserAgent resets state for a new agent,
+                // and other handlers correctly associate with the current agent.
+                // The primary effect of empty lines is separating records for different user agents.
+                // The ParseState or handler logic should manage this context.
+                // If parseState needs explicit notification: parseState.handleEmptyLine();
                 continue;
             }
 
             RobotToken token = tokenize(line);
             switch (token.getDirective()) {
                 case USER_AGENT:
                 handleUserAgent(parseState, token);
                     break;
 
                 case DISALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleDisallow(parseState, token);
                     break;
 
                 case ALLOW:
                 parseState.setFinishedAgentFields(true);
                 handleAllow(parseState, token);
                     break;
 
                 case CRAWL_DELAY:
                 parseState.setFinishedAgentFields(true);
                 handleCrawlDelay(parseState, token);
                     break;
 
                 case SITEMAP:
                 parseState.setFinishedAgentFields(true);
                 handleSitemap(parseState, token);
                     break;
 
                 case HTTP:
                 parseState.setFinishedAgentFields(true);
                 handleHttp(parseState, token);
                     break;
 
                 case UNKNOWN:
                 reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                 parseState.setFinishedAgentFields(true);
                     break;
 
                 case MISSING:
+                // This case implies the line didn't match "directive: value" format
                 reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
+                // Whether this invalidates the current agent block might depend on interpretation.
+                // Setting finishedAgentFields might be too strict? Or correct? Assuming current logic is intended.
                 parseState.setFinishedAgentFields(true);
                     break;
 
                 default:
-                    // All others we just ignore
-                    // TODO KKr - which of these should be setting
-                    // finishedAgentFields to true?
-                    // TODO KKr - handle no-index
-                    // TODO KKr - handle request-rate and visit-time
+                    // All others we just ignore (e.g., HOST, NOINDEX, etc., depending on RobotDirective enum)
+                    // Explicitly ignored directives might also need setFinishedAgentFields(true)
+                    // based on whether they are considered part of the agent-specific block or global.
+                    // E.g., Host is deprecated and generally ignored.
+                    // NoIndex is Google-specific, might be handled similarly to Allow/Disallow.
+                    // Request-rate/Visit-time are archaic/rare.
+                    // Sitemaps are global, setting finishedAgentFields is correct.
                     break;
             }
         }
 
         this._numWarningsDuringLastParse.set(parseState._numWarnings);
         SimpleRobotRules result = parseState.getRobotRules();
         if (result.getCrawlDelay() > _maxCrawlDelay) {
             // Some evil sites use a value like 3600 (seconds) for the crawl
             // delay, which would cause lots of problems for us.
             LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
         } else {
             result.sortRules();
             return result;
         }
     }
\ No newline at end of file
