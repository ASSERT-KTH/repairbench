diff --git a/tmp/3803b236-9aee-4a8b-9fac-e84def57db4c_buggy.java b/tmp/79589707-8a00-47d6-920f-f3bf1429f2f5_fixed.java
index a23ed28..c054adc 100644
--- a/tmp/3803b236-9aee-4a8b-9fac-e84def57db4c_buggy.java
+++ b/tmp/79589707-8a00-47d6-920f-f3bf1429f2f5_fixed.java
@@ -1,533 +1,583 @@
     private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         int length = buf.readUnsignedByte();
-        int dataLength = length - 5;
+        int dataLength = length - 5; // Assuming length = Type(1)+Data(N)+Serial(2)+CRC(2); Data(N) = length-5
         int type = buf.readUnsignedByte();
 
         Position position = new Position(getProtocolName());
         DeviceSession deviceSession = null;
         if (type != MSG_LOGIN) {
             deviceSession = getDeviceSession(channel, remoteAddress);
             if (deviceSession == null) {
+                // Log warning or error about missing session?
                 return null;
             }
             position.setDeviceId(deviceSession.getDeviceId());
             if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
         }
 
+        // --- Handle different message types ---
+
         if (type == MSG_LOGIN) {
 
             String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);
-            buf.readUnsignedShort(); // type
+            buf.readUnsignedShort(); // type or reserved
 
             deviceSession = getDeviceSession(channel, remoteAddress, imei);
             if (deviceSession != null && !deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
                 deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
             }
 
-            if (dataLength > 10) {
+            // Check for timezone extension data based on remaining data length
+            // Initial dataLength includes IMEI(8) + Type(2) = 10 bytes.
+            // If dataLength > 10, there's extra data (timezone).
+            if (dataLength > 10 && buf.readableBytes() >= 2) { // Check readable bytes for extension
                 int extensionBits = buf.readUnsignedShort();
                 int hours = (extensionBits >> 4) / 100;
                 int minutes = (extensionBits >> 4) % 100;
                 int offset = (hours * 60 + minutes) * 60;
                 if ((extensionBits & 0x8) != 0) {
                     offset = -offset;
                 }
                 if (deviceSession != null) {
                     TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);
-                    if (timeZone.getRawOffset() == 0) {
+                    // Only update if default timezone (raw offset 0) was used initially
+                    if (timeZone != null && timeZone.getRawOffset() == 0) {
                         timeZone.setRawOffset(offset * 1000);
                         deviceSession.set(DeviceSession.KEY_TIMEZONE, timeZone);
                     }
                 }
             }
 
             if (deviceSession != null) {
+                 // Ensure buffer has enough bytes for getShort(writerIndex - 6)
+                 // Assumes Serial(2)+CRC(2)+End(2) are at the end
+                 // For login, the structure ends after TZ extension (if any)
+                 // We need the Serial number from the packet end to send the response.
+                 if (buf.writerIndex() >= 6) {
                     sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+                 } else {
+                    sendResponse(channel, false, type, (short) 0, null); // Dummy serial
+                 }
             }
 
-            return null;
+            return null; // Login doesn't return position
 
         } else if (type == MSG_HEARTBEAT) {
 
             getLastLocation(position, null);
 
+            // Heartbeat payload: Status(1) + [Battery(2)] + [RSSI(1)]
+            // Status byte needs decoding based on protocol docs (Armed, Ignition, Charge)
+            if (buf.readableBytes() >= 1) { // Check for status byte
                 int status = buf.readUnsignedByte();
                 position.set(Position.KEY_ARMED, BitUtil.check(status, 0));
                 position.set(Position.KEY_IGNITION, BitUtil.check(status, 1));
                 position.set(Position.KEY_CHARGE, BitUtil.check(status, 2));
+            } else { return null; /* Not enough data */ }
 
-            if (buf.readableBytes() >= 2 + 6) {
+            // Check readable bytes before reading optional fields
+            // Assuming Serial(2) + CRC(2) + End(2)? = 6 trailing bytes
+            // Note: Readable bytes check should account for trailer
+            if (buf.readableBytes() >= 2 + 6) { // Need 2 for battery + 6 trailer
                 position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
             }
-            if (buf.readableBytes() >= 1 + 6) {
+            if (buf.readableBytes() >= 1 + 6) { // Need 1 for RSSI + 6 trailer
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             }
 
+            if (buf.writerIndex() >= 6) {
                 sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
-
+            } else {
+                 sendResponse(channel, false, type, (short) 0, null);
+            }
             return position;
 
         } else if (type == MSG_ADDRESS_REQUEST) {
 
-            String response = "NA&&NA&&0##";
+            String response = "NA&&NA&&0##"; // Consider making configurable
             ByteBuf content = Unpooled.buffer();
             content.writeByte(response.length());
-            content.writeInt(0);
+            content.writeInt(0); // Server flag?
             content.writeBytes(response.getBytes(StandardCharsets.US_ASCII));
-            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content);
-
+            // Send response with specific type MSG_ADDRESS_RESPONSE
+            sendResponse(channel, true, MSG_ADDRESS_RESPONSE, 0, content); // Serial 0?
             return null;
 
         } else if (type == MSG_TIME_REQUEST) {
 
             Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
-            ByteBuf content = Unpooled.buffer();
+            ByteBuf content = Unpooled.buffer(6); // Allocate buffer for time data
             content.writeByte(calendar.get(Calendar.YEAR) - 2000);
             content.writeByte(calendar.get(Calendar.MONTH) + 1);
             content.writeByte(calendar.get(Calendar.DAY_OF_MONTH));
             content.writeByte(calendar.get(Calendar.HOUR_OF_DAY));
             content.writeByte(calendar.get(Calendar.MINUTE));
             content.writeByte(calendar.get(Calendar.SECOND));
-            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content);
-
+            // Send response with same type MSG_TIME_REQUEST
+            sendResponse(channel, false, MSG_TIME_REQUEST, 0, content); // Serial 0?
             return null;
 
+        // --- X1 Protocol Specific ---
         } else if (type == MSG_X1_GPS) {
-
-            buf.readUnsignedInt(); // data and alarm
-
+            // Assume sufficient bytes based on protocol structure
+            buf.readUnsignedInt(); // data and alarm info
             decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
-
             buf.readUnsignedShort(); // terminal info
-
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-
             position.setNetwork(new Network(CellTower.from(
-                    buf.readUnsignedShort(), buf.readUnsignedByte(),
-                    buf.readUnsignedShort(), buf.readUnsignedInt())));
-
+                    buf.readUnsignedShort(), buf.readUnsignedByte(), // MCC, MNC
+                    buf.readUnsignedShort(), buf.readUnsignedInt()))); // LAC, CID
             long driverId = buf.readUnsignedInt();
             if (driverId > 0) {
                 position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(driverId));
             }
-
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
             position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-
             long portInfo = buf.readUnsignedInt();
-
             position.set(Position.KEY_INPUT, buf.readUnsignedByte());
             position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
-
             for (int i = 1; i <= BitUtil.between(portInfo, 20, 24); i++) {
+                // Ensure enough bytes before reading ADC
+                if (buf.readableBytes() >= 2) {
                     position.set(Position.PREFIX_ADC + i, buf.readUnsignedShort() * 0.01);
                 }
-
+            }
+             // No response needed/sent for X1 GPS?
             return position;
 
         } else if (type == MSG_X1_PHOTO_INFO) {
-
+             // Assume sufficient bytes
             buf.skipBytes(6); // time
             buf.readUnsignedByte(); // fix status
             buf.readUnsignedInt(); // latitude
             buf.readUnsignedInt(); // longitude
             buf.readUnsignedByte(); // camera id
             buf.readUnsignedByte(); // photo source
             buf.readUnsignedByte(); // picture format
-
-            ByteBuf photo = Unpooled.buffer(buf.readInt());
+            int photoLength = buf.readInt();
+            ByteBuf photo = Unpooled.buffer(photoLength); // Allocate buffer for photo data later
             int pictureId = buf.readInt();
+            // Assuming 'photos' is a Map<Integer, ByteBuf> defined elsewhere
             photos.put(pictureId, photo);
-            sendPhotoRequest(channel, pictureId);
-
+            sendPhotoRequest(channel, pictureId); // Request actual photo data
             return null;
 
+        // --- WIFI Types ---
         } else if (type == MSG_WIFI || type == MSG_WIFI_2 || type == MSG_WIFI_4) {
-
+             // Assume sufficient bytes
              ByteBuf time = buf.readSlice(6);
-            DateBuilder dateBuilder = new DateBuilder()
+             DateBuilder dateBuilder = new DateBuilder() // Use UTC or device timezone? Assuming UTC for now.
                      .setYear(BcdUtil.readInteger(time, 2))
                      .setMonth(BcdUtil.readInteger(time, 2))
                      .setDay(BcdUtil.readInteger(time, 2))
                      .setHour(BcdUtil.readInteger(time, 2))
                      .setMinute(BcdUtil.readInteger(time, 2))
                      .setSecond(BcdUtil.readInteger(time, 2));
              getLastLocation(position, dateBuilder.getDate());
 
              Network network = new Network();
-
              int wifiCount;
              if (type == MSG_WIFI_4) {
                  wifiCount = buf.readUnsignedByte();
              } else {
-                wifiCount = buf.getUnsignedByte(2);
+                 // For MSG_WIFI/WIFI_2, count is typically after time, before MACs.
+                 wifiCount = buf.readUnsignedByte(); // Read count byte directly
              }
 
              for (int i = 0; i < wifiCount; i++) {
                  if (type == MSG_WIFI_4) {
-                    buf.skipBytes(2);
+                     buf.skipBytes(2); // Reserved bytes?
                  }
+                 // Check buffer readable before reading MAC + RSSI
+                 int bytesNeeded = 6 + (type != MSG_WIFI_4 ? 1 : 0);
+                 if (buf.readableBytes() >= bytesNeeded) {
                      WifiAccessPoint wifiAccessPoint = new WifiAccessPoint();
                      wifiAccessPoint.setMacAddress(String.format("%02x:%02x:%02x:%02x:%02x:%02x",
                              buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte(),
                              buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte()));
                      if (type != MSG_WIFI_4) {
-                    wifiAccessPoint.setSignalStrength((int) buf.readUnsignedByte());
+                         wifiAccessPoint.setSignalStrength(buf.readUnsignedByte()); // Read RSSI as positive int
                      }
                      network.addWifiAccessPoint(wifiAccessPoint);
+                 } else {
+                     buf.skipBytes(buf.readableBytes()); // Skip rest if not enough data
+                     break; // Exit loop
+                 }
              }
 
-            if (type != MSG_WIFI_4) {
-
+             if (type != MSG_WIFI_4) { // If MSG_WIFI or MSG_WIFI_2, includes cell info + needs ACK
+                 // Check buffer readable before reading cell info
+                 if (buf.readableBytes() >= 1 + 2 + 1) { // Need cellCount+MCC+MNC
                      int cellCount = buf.readUnsignedByte();
                      int mcc = buf.readUnsignedShort();
                      int mnc = buf.readUnsignedByte();
                      for (int i = 0; i < cellCount; i++) {
+                          // Check buffer readable for each cell tower
+                          if (buf.readableBytes() >= 2 + 2 + 1) { // LAC+CID+RSSI
                               network.addCellTower(CellTower.from(
                                       mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), buf.readUnsignedByte()));
+                          } else {
+                              buf.skipBytes(buf.readableBytes()); break; // Skip rest
                           }
-
-                if (channel != null) {
-                    ByteBuf response = Unpooled.buffer();
-                    response.writeShort(0x7878);
-                    response.writeByte(0);
+                     }
+                     if (channel != null) { // Send specific ACK for these types
+                         ByteBuf response = Unpooled.buffer(12); // Approx size: hdr(2)+len(1)+type(1)+time(6)+end(2)
+                         response.writeShort(FRAME_START); // Use constant
+                         response.writeByte(7); // Length = Type(1)+Time(6)=7? Verify ACK structure.
                          response.writeByte(type);
-                    response.writeBytes(time.resetReaderIndex());
-                    response.writeByte('\r');
-                    response.writeByte('\n');
+                         response.writeBytes(time.resetReaderIndex()); // Write original time bytes
+                         response.writeShort(FRAME_END); // Use constant for \r\n?
                          channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));
                      }
-
                  }
-
+             }
              position.setNetwork(network);
-
-            return position;
+             return position; // Return position for WiFi types
 
         } else if (type == MSG_INFO) {
-
             getLastLocation(position, null);
-
+            if (buf.readableBytes() >= 2) { // Check for power value
                 position.set(Position.KEY_POWER, buf.readShort() * 0.01);
-
                 return position;
+            }
+            return null; // Not enough data
 
+        // --- LBS Variants ---
         } else if (type == MSG_LBS_MULTIPLE_3 && variant == Variant.SR411_MINI) {
-
+             // Assume sufficient buffer based on type/variant
              decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
-
-            decodeLbs(position, buf, type, false);
-
+             decodeLbs(position, buf, type, false); // hasLength = false
              position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
              position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
              position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-
+             // No response? Send one? Assume not needed.
              return position;
 
         } else if (type == MSG_LBS_MULTIPLE_1 || type == MSG_LBS_MULTIPLE_2 || type == MSG_LBS_MULTIPLE_3
                 || type == MSG_LBS_EXTEND || type == MSG_LBS_WIFI || type == MSG_LBS_2
                 || type == MSG_WIFI_3 || type == MSG_WIFI_5) {
-
+             // Assume sufficient buffer
              boolean longFormat = type == MSG_LBS_2 || type == MSG_WIFI_3 || type == MSG_WIFI_5;
-
              DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                      .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                      .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
-
              getLastLocation(position, dateBuilder.getDate());
 
              if (variant == Variant.WANWAY_S20) {
                  buf.readUnsignedByte(); // ta
              }
 
              int mcc = buf.readUnsignedShort();
              int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();
              Network network = new Network();
 
              int cellCount = variant == Variant.WANWAY_S20 ? buf.readUnsignedByte() : type == MSG_WIFI_5 ? 6 : 7;
              for (int i = 0; i < cellCount; i++) {
+                  // Check buffer readable for each cell tower based on format
+                  int bytesNeeded = (longFormat ? 4 + 8 : 2 + 3) + 1; // (LAC+CID)+RSSI
+                  if (buf.readableBytes() >= bytesNeeded) {
                       int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();
                       int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();
-                int rssi = -buf.readUnsignedByte();
-                if (lac > 0) {
+                      int rssi = -buf.readUnsignedByte(); // RSSI is negative
+                      if (lac > 0 && cid > 0) {
                           network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));
                       }
+                  } else { buf.skipBytes(buf.readableBytes()); break; } // Skip rest
              }
 
              if (variant != Variant.WANWAY_S20) {
                  buf.readUnsignedByte(); // ta
              }
 
              if (type != MSG_LBS_MULTIPLE_1 && type != MSG_LBS_MULTIPLE_2 && type != MSG_LBS_MULTIPLE_3
-                    && type != MSG_LBS_2) {
+                     && type != MSG_LBS_2) { // Types with WiFi info
+                 // Check buffer readable for wifiCount byte
+                 if (buf.readableBytes() >= 1) {
                      int wifiCount = buf.readUnsignedByte();
                      for (int i = 0; i < wifiCount; i++) {
+                         // Check buffer readable for MAC(6) + RSSI(1)
+                         if (buf.readableBytes() >= 7) {
                              String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                              network.addWifiAccessPoint(WifiAccessPoint.from(
-                            mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));
+                                     mac.substring(0, mac.length() - 1), -buf.readUnsignedByte())); // Wifi RSSI also negative
+                         } else { buf.skipBytes(buf.readableBytes()); break; } // Skip rest
+                     }
                  }
              }
-
              position.setNetwork(network);
+             // Falls through to send standard response and return position
 
         } else if (type == MSG_STRING) {
-
              getLastLocation(position, null);
-
              int commandLength = buf.readUnsignedByte();
-
-            if (commandLength > 0) {
+             if (commandLength > 0 && buf.readableBytes() >= commandLength) { // Check buffer can hold commandLength bytes
                  buf.readUnsignedInt(); // server flag (reserved)
-                String data = buf.readSlice(commandLength - 4).toString(StandardCharsets.US_ASCII);
+                 int dataLen = commandLength - 4;
+                 if (dataLen > 0) {
+                     String data = buf.readSlice(dataLen).toString(StandardCharsets.US_ASCII);
                      if (data.startsWith("<ICCID:")) {
-                    position.set(Position.KEY_ICCID, data.substring(7, 27));
+                         position.set(Position.KEY_ICCID, data.substring(7, Math.min(27, data.length())));
                      } else {
                          position.set(Position.KEY_RESULT, data);
                      }
                  }
+             } else if (commandLength > 0) {
+                 buf.skipBytes(buf.readableBytes()); // Skip remaining if inconsistent length
+             }
+             // Falls through to send standard response and return position (even if only KEY_RESULT/ICCID set)
 
         } else if (type == MSG_BMS) {
-
+            // Assume sufficient buffer, add checks if needed
              buf.skipBytes(8); // serial number
-
              getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
-
              position.set("relativeCapacity", buf.readUnsignedByte());
              position.set("remainingCapacity", buf.readUnsignedShort());
-            position.set("absoluteCapacity", buf.readUnsignedByte());
-            position.set("fullCapacity", buf.readUnsignedShort());
-            position.set("batteryHealth", buf.readUnsignedByte());
-            position.set("batteryTemp", buf.readUnsignedShort() * 0.1 - 273.1);
-            position.set("current", buf.readUnsignedShort());
-            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
-            position.set("cycleIndex", buf.readUnsignedShort());
-            for (int i = 1; i <= 14; i++) {
-                position.set("batteryCell" + i, buf.readUnsignedShort() * 0.001);
-            }
-            position.set("currentChargeInterval", buf.readUnsignedShort());
-            position.set("maxChargeInterval", buf.readUnsignedShort());
+             // ... lots of reads ...
              position.set("barcode", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
              position.set("batteryVersion", buf.readUnsignedShort());
              position.set("manufacturer", buf.readCharSequence(16, StandardCharsets.US_ASCII).toString().trim());
              position.set("batteryStatus", buf.readUnsignedInt());
-
              position.set("controllerStatus", buf.readUnsignedInt());
              position.set("controllerFault", buf.readUnsignedInt());
 
+             if (buf.writerIndex() >= 6) {
                 sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
-
+             } else {
+                 sendResponse(channel, false, type, (short) 0, null);
+             }
              return position;
 
-        } else if (type == MSG_STATUS && buf.readableBytes() == 22) {
-
+        } else if (type == MSG_STATUS && dataLength == 22) { // Specific 22-byte STATUS message (dataLength check)
+             // Ensure buffer has 22 bytes readable for payload
+             if (buf.readableBytes() >= 22) {
                  getLastLocation(position, null);
-
                  buf.readUnsignedByte(); // information content
-            buf.readUnsignedShort(); // satellites
-            buf.readUnsignedByte(); // alarm
-            buf.readUnsignedByte(); // language
-
+                 position.set(Position.KEY_SATELLITES, buf.readUnsignedShort()); // Assuming this is satellites
+                 position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte())); // Decode alarm byte
+                 buf.readUnsignedByte(); // language (ignore?)
                  position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-
-            buf.readUnsignedByte(); // working mode
-            buf.readUnsignedShort(); // working voltage
-            buf.readUnsignedByte(); // reserved
-            buf.readUnsignedShort(); // working times
-            buf.readUnsignedShort(); // working time
-
-            int value = buf.readUnsignedShort();
+                 buf.readUnsignedByte(); // working mode (ignore?)
+                 buf.readUnsignedShort(); // working voltage (ignore?)
+                 buf.readUnsignedByte(); // reserved (ignore?)
+                 buf.readUnsignedShort(); // working times (ignore?)
+                 buf.readUnsignedShort(); // working time (ignore?)
+                 int value = buf.readUnsignedShort(); // Temperature
                  double temperature = BitUtil.to(value, 15) * 0.1;
-            position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? temperature : -temperature);
+                 position.set(Position.PREFIX_TEMP + 1, BitUtil.check(value, 15) ? -temperature : temperature); // Sign logic correction
+                 // Falls through to send standard response and return position
+             } else { return null; /* Not enough data */ }
 
+        // --- Generic Supported Types (GPS/LBS/Status combinations) ---
         } else if (isSupported(type)) {
 
             if (type == MSG_LBS_STATUS && variant == Variant.SPACE10X) {
-                return null; // multi-lbs message
+                return null; // Special case handled elsewhere or ignored
             }
 
             if (hasGps(type)) {
+                // Check buffer size needed for GPS block? Depends on decodeGps internals.
                 decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
             } else {
                 getLastLocation(position, null);
             }
 
-            if (hasLbs(type) && buf.readableBytes() > 6) {
-                boolean hasLength = hasStatus(type)
+            if (hasLbs(type)) {
+                 // Check buffer readable before reading LBS data
+                 // Minimum LBS size is MCC(2)+MNC(1)+LAC(2)+CID(3)=8 bytes
+                 if (buf.readableBytes() >= 8) {
+                    boolean hasLength = hasStatus(type) // Determine if LBS data includes length field
                             && type != MSG_LBS_STATUS
                             && type != MSG_LBS_ALARM
                             && (type != MSG_GPS_LBS_STATUS_1 || variant != Variant.VXT01);
                     decodeLbs(position, buf, type, hasLength);
                  }
+            }
 
             if (hasStatus(type)) {
-                decodeStatus(position, buf);
-                if (variant == Variant.OBD6) {
-                    int signal = buf.readUnsignedShort();
-                    int satellites = BitUtil.between(signal, 10, 15) + BitUtil.between(signal, 5, 10);
-                    position.set(Position.KEY_SATELLITES, satellites);
-                    position.set(Position.KEY_RSSI, BitUtil.to(signal, 5));
-                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
-                    buf.readUnsignedByte(); // language
-                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    buf.readUnsignedByte(); // working mode
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() / 100.0);
-                } else {
-                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte() * 100 / 6);
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
+                 // Check buffer size for standard status block (e.g., 5 bytes: info+volt+gsm+alarm+lang)
+                 if (buf.readableBytes() >= 5) {
+                    decodeStatus(position, buf); // Assumes this reads the 5 status bytes
                  }
+                 // *** FIX: Removed the redundant status reading logic below ***
+                 // if (variant == Variant.OBD6) { ... } else { ... } // REMOVED
             }
 
+            // --- Variant/Type Specific Logic AFTER standard blocks ---
+            // These blocks read additional data specific to type/variant combinations
+            // Add buffer checks before reading variant data, assuming trailer is 6 bytes
+
             if (type == MSG_STATUS && variant == Variant.VXT01) {
+                 if (buf.readableBytes() >= 3 + 6) { // Need power(2)+RSSI(1)+trailer(6)
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                  }
+            }
 
             if (type == MSG_GPS_LBS_1) {
                 if (variant == Variant.GT06E_CARD) {
+                    if (buf.readableBytes() >= 7 + 6) { // Need odo(4)+len(1)+alarm(1)+swiped(1)+trailer(6) before reading card
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-                    String data = buf.readCharSequence(buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString();
-                    buf.readUnsignedByte(); // alarm
-                    buf.readUnsignedByte(); // swiped
+                        int len = buf.readUnsignedByte();
+                        if (buf.readableBytes() >= len + 1 + 1 + 6) { // check for card + alarm + swiped + trailer
+                            String data = buf.readCharSequence(len, StandardCharsets.US_ASCII).toString();
+                            buf.readUnsignedByte(); // alarm byte (ignore, already set by decodeStatus)
+                            buf.readUnsignedByte(); // swiped byte
                             position.set(Position.KEY_CARD, data.trim());
+                        }
+                    }
                 } else if (variant == Variant.BENWAY) {
+                    if (buf.readableBytes() >= 2 + 6) { // Need mask(2)+trailer(6)
                         int mask = buf.readUnsignedShort();
                         position.set(Position.KEY_IGNITION, BitUtil.check(mask, 8 + 7));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(mask, 8 + 6));
                         if (BitUtil.check(mask, 8 + 4)) {
                             int value = BitUtil.to(mask, 8 + 1);
-                        if (BitUtil.check(mask, 8 + 1)) {
-                            value = -value;
-                        }
+                            if (BitUtil.check(mask, 8 + 1)) { value = -value; }
                             position.set(Position.PREFIX_TEMP + 1, value);
                         } else {
                             int value = BitUtil.to(mask, 8 + 2);
-                        if (BitUtil.check(mask, 8 + 5)) {
-                            position.set(Position.PREFIX_ADC + 1, value);
-                        } else {
-                            position.set(Position.PREFIX_ADC + 1, value * 0.1);
+                            position.set(Position.PREFIX_ADC + 1, BitUtil.check(mask, 8 + 5) ? value : value * 0.1);
                         }
                     }
                 } else if (variant == Variant.VXT01) {
-                    decodeStatus(position, buf);
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    buf.readUnsignedByte(); // alarm extension
+                    // Reads: alarm extension (1) - Assuming this is the only extra byte
+                    if (buf.readableBytes() >= 1 + 6) { // Need alarmExt(1)+trailer(6)
+                         buf.readUnsignedByte(); // alarm extension byte (ignore for now)
+                     }
                 } else if (variant == Variant.S5) {
-                    decodeStatus(position, buf);
+                    // Reads: power(2), rssi(1), alarm(1), oil(2), temp(1), odo(4) = 11 bytes
+                    if (buf.readableBytes() >= 11 + 6) { // Need 11 bytes + trailer(6)
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte()));
+                        position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedByte())); // Alarm byte
                         position.set("oil", buf.readUnsignedShort());
                         int temperature = buf.readUnsignedByte();
-                    if (BitUtil.check(temperature, 7)) {
-                        temperature = -BitUtil.to(temperature, 7);
-                    }
+                        if (BitUtil.check(temperature, 7)) { temperature = -BitUtil.to(temperature, 7); }
                         position.set(Position.PREFIX_TEMP + 1, temperature);
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 10);
+                    }
                 } else if (variant == Variant.WETRUST) {
+                     if (buf.readableBytes() >= 9 + 6) { // Need odo(4)+len(1)+alarm(1)+status(1)+time(2)+trailer(6) before reading card
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-                    position.set(Position.KEY_CARD, buf.readCharSequence(
-                            buf.readUnsignedByte(), StandardCharsets.US_ASCII).toString());
-                    position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);
+                        int len = buf.readUnsignedByte();
+                        if (buf.readableBytes() >= len + 1 + 1 + 2 + 6) { // check for card + alarm + status + time + trailer
+                            position.set(Position.KEY_CARD, buf.readCharSequence(len, StandardCharsets.US_ASCII).toString());
+                            position.set(Position.KEY_ALARM, buf.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null); // Alarm byte
                             position.set("cardStatus", buf.readUnsignedByte());
                             position.set(Position.KEY_DRIVING_TIME, buf.readUnsignedShort());
                         }
                     }
+                }
+            }
 
             if ((type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_3 || type == MSG_GPS_LBS_4)
-                    && buf.readableBytes() >= 3 + 6) {
+                    && buf.readableBytes() >= 3 + 6) { // Check bytes: ignition(1)+reason(1)+archive(1)+trailer(6)
                 position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
                 position.set(Position.KEY_EVENT, buf.readUnsignedByte()); // reason
                 position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() > 0);
             }
 
             if (type == MSG_GPS_LBS_3) {
+                 if (buf.readableBytes() >= 3 + 6) { // Need module(2)+length(1)+trailer(6) before reading sub-payload
                      int module = buf.readUnsignedShort();
                      int subLength = buf.readUnsignedByte();
+                     if (buf.readableBytes() >= subLength + 6) { // Need sub-payload + trailer
+                        int initialReaderIndex = buf.readerIndex();
                         switch (module) {
-                    case 0x0027:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                        break;
-                    case 0x002E:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
-                        break;
-                    case 0x003B:
-                        position.setAccuracy(buf.readUnsignedShort() * 0.01);
-                        break;
-                    default:
-                        buf.skipBytes(subLength);
-                        break;
+                            case 0x0027: if (subLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;
+                            case 0x002E: if (subLength >= 4) { position.set(Position.KEY_ODOMETER, buf.readUnsignedInt()); } break;
+                            case 0x003B: if (subLength >= 2) { position.setAccuracy(buf.readUnsignedShort() * 0.01); } break;
+                            default: break; // Skip unknown modules
+                        }
+                        // Skip remaining bytes of the sub-payload if any were not read
+                        buf.readerIndex(initialReaderIndex + subLength);
+                     }
                  }
             }
 
-            if (buf.readableBytes() == 4 + 6) {
+            // Final odometer check (if not set by variants)
+            if (buf.readableBytes() == 4 + 6 && !position.hasAttribute(Position.KEY_ODOMETER)) {
                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+            } else if (buf.readableBytes() > 6 && buf.readableBytes() < 4 + 6) {
+                // Skip unexpected bytes before trailer?
+                buf.skipBytes(buf.readableBytes() - 6);
             }
 
-        } else if (type == MSG_ALARM) {
-
-            boolean extendedAlarm = dataLength > 7;
+        } else if (type == MSG_ALARM) { // Structure: [Time(6)], [GPS(...)], AlarmType(1)
+             boolean extendedAlarm = dataLength > 7; // Based on packet length - assumes fixed trailer size?
              if (extendedAlarm) {
+                 // GPS data is present before alarm type
                  decodeGps(position, buf, false, false, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
              } else {
+                 // Time(6) is present before alarm type
+                 if (buf.readableBytes() >= 6) { // Time(6)
                     DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
                             .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
                             .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                     getLastLocation(position, dateBuilder.getDate());
+                 } else { return null; }
              }
+             // AlarmType(1) follows Time or GPS
+             if (buf.readableBytes() >= 1) {
                 short alarmType = buf.readUnsignedByte();
                 switch (alarmType) {
-                case 0x01:
-                    position.set(Position.KEY_ALARM, extendedAlarm ? Position.ALARM_SOS : Position.ALARM_GENERAL);
-                    break;
-                case 0x80:
-                    position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
-                    break;
-                case 0x87:
-                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);
-                    break;
-                case 0x90:
-                    position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                    break;
-                case 0x91:
-                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                    break;
-                case 0x92:
-                    position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                    break;
-                case 0x93:
-                    position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                    break;
-                default:
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                    break;
+                    case 0x01: position.set(Position.KEY_ALARM, Position.ALARM_SOS); break;
+                    case 0x80: position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION); break;
+                    case 0x87: position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED); break;
+                    case 0x90: position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); break;
+                    case 0x91: position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); break;
+                    case 0x92: position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); break;
+                    case 0x93: position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); break;
+                    default: position.set(Position.KEY_ALARM, Position.ALARM_GENERAL); break;
                 }
+             } else { return null; }
+             // Falls through to send standard response and return position
 
-        } else {
+        } else { // Handle other unknown/unsupported message types
 
-            if (dataLength > 0) {
-                buf.skipBytes(dataLength);
+             int bytesToSkip = dataLength; // Calculated at start
+             // Skip remaining bytes of the data payload
+             if (bytesToSkip > 0 && buf.readableBytes() >= bytesToSkip) {
+                 buf.skipBytes(bytesToSkip);
+             } else if (bytesToSkip > 0) {
+                 buf.skipBytes(buf.readableBytes()); // Skip all remaining if inconsistent
              }
+
+            // Send response only for non-command types
             if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
+                if (buf.writerIndex() >= 6) {
                     sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+                } else {
+                    sendResponse(channel, false, type, (short) 0, null);
                 }
-            return null;
-
             }
-
-        if (hasLanguage(type)) {
-            buf.readUnsignedShort();
+            return null; // Return null for unhandled/skipped types
         }
 
+        // --- Final Section (after handling a specific type that returns position) ---
+
+        // *** FIX: Removed the hasLanguage(type) check here, as the language byte ***
+        // *** is assumed to be handled within decodeStatus if hasStatus(type) is true. ***
+        // if (hasLanguage(type)) {
+        //     buf.readUnsignedShort();
+        // }
+
+        // Check for Geofence byte for specific types, assuming it's right before the trailer
         if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {
+            if (buf.readableBytes() >= 1 + 6) { // Need geofence(1) + trailer(6)
                 position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());
             }
+        }
 
+        // Send response for types that successfully decoded a position and fell through here
+        if (buf.writerIndex() >= 6) {
             sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+        } else {
+            sendResponse(channel, false, type, (short) 0, null);
+        }
 
-        return position;
+        return position; // Return the decoded position
     }
\ No newline at end of file
