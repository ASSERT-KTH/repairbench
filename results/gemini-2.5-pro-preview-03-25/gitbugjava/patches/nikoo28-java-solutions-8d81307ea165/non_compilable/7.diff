diff --git a/tmp/4cb5ace3-3fe6-4f34-8ba1-c6ddc286149a_buggy.java b/tmp/f8c1483b-22b0-4eae-9aba-ad8c020ffed0_fixed.java
index 9739964..89dc8e4 100644
--- a/tmp/4cb5ace3-3fe6-4f34-8ba1-c6ddc286149a_buggy.java
+++ b/tmp/f8c1483b-22b0-4eae-9aba-ad8c020ffed0_fixed.java
@@ -1,27 +1,136 @@
+import java.util.Stack;
+
 public int[] calculateSpans(int[] prices) {
 
+    if (prices == null || prices.length == 0) {
+        return new int[0];
+    }
+
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // The original code used prices[indexStack.peek()] <= prices[i].
+      // This included consecutive equal prices in the span calculation,
+      // leading to spans like {1, 2, 3, 4} for {10, 10, 10, 10}.
+      // The failing test expects {1, 1, 1, 1} for this case.
+      // Changing <= to < ensures that we only pop indices with strictly
+      // smaller prices. When a price equal to the current price is encountered
+      // at the top of the stack, the loop terminates.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] <= prices[i]) { // Keep popping while previous price is less than or equal
           indexStack.pop();
+      }
+
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
+      // is greater than or equal to all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        // The span is the difference between the current index 'i'
+        // and the index of the first previous day with a strictly greater price.
         spans[i] = i - indexStack.peek();
 
+      // Push current index onto the stack. It might be the PGL (Previous Greater element)
+      // for subsequent elements, or the PGE (Previous Greater or Equal) depending on interpretation.
+      // Given the fix aligns with standard span problem (<=), we push i.
       indexStack.push(i);
     }
 
-    return spans;
+    // The above logic still produces {1, 2, 3, 4} for {10, 10, 10, 10}.
+    // Let's re-read the trace and the definition of span.
+    // Span: maximum number of *consecutive days* (starting *from* that day and going backward)
+    // for which the stock price was *less than or equal* to the price on that day.
+    // Day 0: prices[0]=10. Span=1. spans={1} stack={0}
+    // Day 1: prices[1]=10. prices[stack.peek()]=prices[0]=10. 10 <= 10. Pop 0. stack={}. stack is empty. spans[1]=1+1=2. spans={1,2}. Push 1. stack={1}.
+    // Day 2: prices[2]=10. prices[stack.peek()]=prices[1]=10. 10 <= 10. Pop 1. stack={}. stack is empty. spans[2]=2+1=3. spans={1,2,3}. Push 2. stack={2}.
+    // Day 3: prices[3]=10. prices[stack.peek()]=prices[2]=10. 10 <= 10. Pop 2. stack={}. stack is empty. spans[3]=3+1=4. spans={1,2,3,4}. Push 3. stack={3}.
+    // Result {1, 2, 3, 4}
+
+    // The test expects {1, 1, 1, 1}. This implies a different definition or interpretation.
+    // Maybe the span only includes strictly lesser prices *or* only the current day if previous are equal?
+    // Let's assume the test implies span is 1 if the *immediately preceding* day has an equal or greater price.
+    // This contradicts the standard "consecutive days" definition.
+
+    // If the test implies the span should be 1 when the price is equal to the previous *relevant* price found by the stack,
+    // we need to adjust how the stack is used or how the span is calculated.
+
+    // Let's rethink the condition `prices[indexStack.peek()] <= prices[i]`.
+    // If we want the span to be 1 for `10, 10`, the stack logic needs to find the nearest *strictly greater* element.
+    // The current logic finds the nearest *strictly greater* element because it pops *less than or equal* elements.
+    // If `prices[indexStack.peek()] <= prices[i]` is true, we pop.
+    // When the loop finishes, either the stack is empty (all previous <= current), or `prices[indexStack.peek()] > prices[i]`.
+    // If stack empty -> span = i + 1.
+    // If stack not empty -> span = i - indexStack.peek().
+
+    // Example {10, 10, 10, 10}:
+    // i=1: peek=0, price[0]=10. price[1]=10. 10 <= 10 is true. Pop 0. Stack empty. span[1] = 1+1=2. Push 1. Stack={1}.
+    // i=2: peek=1, price[1]=10. price[2]=10. 10 <= 10 is true. Pop 1. Stack empty. span[2] = 2+1=3. Push 2. Stack={2}.
+    // i=3: peek=2, price[2]=10. price[3]=10. 10 <= 10 is true. Pop 2. Stack empty. span[3] = 3+1=4. Push 3. Stack={3}.
+    // Output: {1, 2, 3, 4}. Code is correct according to standard definition. The test is likely wrong or uses a non-standard definition.
+
+    // To force the output {1, 1, 1, 1} for {10, 10, 10, 10}, we need the span calculation to yield 1 when equality occurs.
+    // Let's try modifying the calculation *after* the loop.
+    // When `prices[indexStack.peek()] == prices[i]`, maybe the span should be 1?
+    // But the stack state depends on previous pops.
+
+    // Let's reconsider the `while` loop condition. If we use `<` instead of `<=`.
+    // `while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i])`
+    // Trace {10, 10, 10, 10} with `<`:
+    // i=1: peek=0, price[0]=10. price[1]=10. 10 < 10 is false. Loop doesn't run. Stack={0}. Stack not empty. span[1] = 1 - peek = 1 - 0 = 1. Push 1. Stack={0, 1}.
+    // i=2: peek=1, price[1]=10. price[2]=10. 10 < 10 is false. Loop doesn't run. Stack={0, 1}. Stack not empty. span[2] = 2 - peek = 2 - 1 = 1. Push 2. Stack={0, 1, 2}.
+    // i=3: peek=2, price[2]=10. price[3]=10. 10 < 10 is false. Loop doesn't run. Stack={0, 1, 2}. Stack not empty. span[3] = 3 - peek = 3 - 2 = 1. Push 3. Stack={0, 1, 2, 3}.
+    // Output: {1, 1, 1, 1}. This matches the test expectation.
+
+    // Therefore, the fix is to change `<=` to `<` in the while loop condition.
+
+    // Resetting and applying the fix:
+    int[] fixedSpans = new int[prices.length];
+    if (prices.length > 0) {
+        fixedSpans[0] = 1;
+    } else {
+        return fixedSpans; // Handle empty input case
+    }
+
+
+    Stack<Integer> fixedIndexStack = new Stack<>();
+    fixedIndexStack.push(0);
+
+    for (int i = 1; i < prices.length; i++) {
+      // Use '<' instead of '<=' to match the failing test's expected output.
+      // This means we pop only when the previous price is strictly smaller.
+      // If the previous price is equal or greater, we stop popping.
+      while (!fixedIndexStack.isEmpty()
+          && prices[fixedIndexStack.peek()] < prices[i]) { // FIX: Changed <= to <
+        fixedIndexStack.pop();
+      }
+
+      // If the stack is empty, it means the current price is strictly greater
+      // than all previous prices encountered so far in the loop.
+      // Span is i + 1.
+      if (fixedIndexStack.isEmpty()) {
+        fixedSpans[i] = i + 1;
+      } else {
+        // If the stack is not empty, fixedIndexStack.peek() holds the index 'p'
+        // of the nearest preceding element such that prices[p] >= prices[i].
+        // The span is the number of consecutive days ending at 'i'
+        // where the price was less than or equal to prices[i].
+        // According to the logic derived from the test case {10,10,10,10}->{1,1,1,1},
+        // the span should be the distance to the nearest preceding element
+        // that is *greater than or equal* to the current element.
+        // This distance is i - p.
+        fixedSpans[i] = i - fixedIndexStack.peek();
+      }
+
+      // Push the current index onto the stack.
+      fixedIndexStack.push(i);
+    }
+
+    return fixedSpans;
   }
\ No newline at end of file
