diff --git a/tmp/0b14899d-a28f-47ca-bec4-2e97b2c97b73_buggy.java b/tmp/d7f60367-340a-485d-b81f-cc31fbcfc863_fixed.java
index 9739964..68b11d2 100644
--- a/tmp/0b14899d-a28f-47ca-bec4-2e97b2c97b73_buggy.java
+++ b/tmp/d7f60367-340a-485d-b81f-cc31fbcfc863_fixed.java
@@ -1,27 +1,67 @@
+import java.util.Stack;
+
+public class OnlineStockSpan {
+  /**
+   * Calculates the stock span for each day.
+   * The span of the stock's price on a given day i is defined as the maximum
+   * number of consecutive days (starting from day i and going backward)
+   * for which the price of the stock was less than or equal to the price on day i.
+   *
+   * Based on the failing test case `testCalculateSpans6`, the behavior for equal
+   * consecutive prices seems to expect a span of 1. This is different from the
+   * standard definition where equal prices extend the span. The fix adjusts the
+   * logic to match the test case's expectation.
+   *
+   * @param prices An array of stock prices for consecutive days.
+   * @return An array where the i-th element is the span for day i.
+   */
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
+    // Span of first element is always 1
+    // Handle empty input array case although not strictly necessary based on constraints
+    if (prices.length == 0) {
+        return spans;
+    }
+    spans[0] = 1;
 
+    // Stack stores indices of previous days.
+    // The stack maintains indices in increasing order,
+    // corresponding to prices in strictly decreasing order from bottom to top.
+    // Or, more accurately, it stores indices `j` such that for any `k` popped before `j`, `prices[k] < prices[i]`.
+    // The element at the top `peek()` is the index of the nearest previous day with a price >= current price.
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // Pop elements from stack while stack is not empty and the price at
+      // the index popped is strictly less than the current price.
+      // The original code used <= which caused the issue with the test case
+      // expecting [1, 1, 1, 1] for [10, 10, 10, 10].
+      // Using < ensures that for equal consecutive prices, the previous index
+      // is not popped, leading to a span calculation of i - (i-1) = 1.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) { // Changed <= to <
         indexStack.pop();
+      }
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
+      // is strictly greater than all previous values
+      if (indexStack.isEmpty()) {
         spans[i] = i + 1;
-      else
+      } else {
+        // Otherwise, the span is the difference between the current index 'i'
+        // and the index at the top of the stack (the nearest previous day
+        // with price >= prices[i]).
         spans[i] = i - indexStack.peek();
+      }
 
+      // Push the current index onto the stack
       indexStack.push(i);
     }
 
     return spans;
   }
+}
\ No newline at end of file
