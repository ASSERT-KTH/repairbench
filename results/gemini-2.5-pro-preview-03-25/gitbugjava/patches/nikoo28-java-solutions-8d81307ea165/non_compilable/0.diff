diff --git a/tmp/9df5cac4-d008-441c-99e4-66c89cbfb9c0_buggy.java b/tmp/6a91656a-7c5a-4fcc-98ea-279434a58569_fixed.java
index 9739964..9651d65 100644
--- a/tmp/9df5cac4-d008-441c-99e4-66c89cbfb9c0_buggy.java
+++ b/tmp/6a91656a-7c5a-4fcc-98ea-279434a58569_fixed.java
@@ -1,27 +1,56 @@
+import java.util.Stack;
+
+class Solution {
+  /**
+   * Calculates the stock span for each day.
+   * The span of the stock's price on a given day is defined as the maximum
+   * number of consecutive days (starting from that day and going backward)
+   * for which the stock price was less than or equal to the price of that day.
+   *
+   * NOTE: The provided failing test implies a different definition where equal
+   * prices do not extend the span. This fix adheres to the failing test's expectation.
+   *
+   * @param prices An array of stock prices for consecutive days.
+   * @return An array where the i-th element is the span for day i.
+   */
   public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
+    // Span of first element is always 1
+    if (prices.length == 0) {
+        return spans;
+    }
+    spans[0] = 1;
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // Pop indices from stack while stack is not empty and the price at the
+      // top of the stack is strictly less than the current price.
+      // The original code used <=, which caused the test testCalculateSpans6
+      // with input {10, 10, 10, 10} to fail, expecting {1, 1, 1, 1} but getting {1, 2, 3, 4}.
+      // Changing to < makes the code produce {1, 1, 1, 1} for that input.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) { // Changed <= to <
         indexStack.pop();
+      }
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
+      // is greater than all previous values (or equal if < was used)
+      if (indexStack.isEmpty()) {
         spans[i] = i + 1;
-      else
+      } else {
+        // Otherwise, the span is the difference between the current index
+        // and the index at the top of the stack (index of the previous greater element).
         spans[i] = i - indexStack.peek();
-
+      }
+      // Push current index onto the stack
       indexStack.push(i);
     }
 
     return spans;
   }
+}
\ No newline at end of file
