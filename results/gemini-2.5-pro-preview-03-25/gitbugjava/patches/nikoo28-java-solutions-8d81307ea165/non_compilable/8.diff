diff --git a/tmp/f371ee45-6519-40e3-9ffa-9a711a59dc31_buggy.java b/tmp/7c9efa24-44c7-4806-901c-ad06a767d147_fixed.java
index 9739964..646f065 100644
--- a/tmp/f371ee45-6519-40e3-9ffa-9a711a59dc31_buggy.java
+++ b/tmp/7c9efa24-44c7-4806-901c-ad06a767d147_fixed.java
@@ -1,27 +1,59 @@
+import java.util.Stack;
+
+/**
+ * Calculates the stock span for each day.
+ * The span of the stock's price on a given day is defined as the maximum
+ * number of consecutive days (starting from that day and going backward)
+ * for which the stock price was less than the price on that day, plus one
+ * (for the day itself). This interpretation matches the failing test case.
+ *
+ * The original code used "less than or equal to", which is the standard definition
+ * but failed the provided test case. The fix changes the condition to "less than".
+ *
+ * @param prices An array of stock prices for consecutive days.
+ * @return An array where the i-th element is the span for the i-th day.
+ */
 public int[] calculateSpans(int[] prices) {
 
+    // Handle empty or null input array
+    if (prices == null || prices.length == 0) {
+        return new int[0];
+    }
+
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
+      // Pop elements from stack while stack is not empty
+      // and the price at the top of the stack is strictly less than the current price.
+      // The original condition was prices[indexStack.peek()] <= prices[i].
+      // Changing to '<' fixes the failing test case, implying a definition where
+      // span counts consecutive preceding days with strictly lower prices + the current day.
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i]) { // Fix: Changed <= to <
           indexStack.pop();
+      }
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
-        spans[i] = i + 1;
-      else
+      // is greater than or equal to all previous values (based on the '<' condition above).
+      // Meaning all previous prices were strictly less than prices[i].
+      if (indexStack.isEmpty()) {
+          spans[i] = i + 1; // Span includes all days up to i.
+      } else {
+          // indexStack.peek() holds the index 'j' of the nearest previous day
+          // such that prices[j] >= prices[i].
+          // The span is the number of days from j+1 to i, inclusive.
           spans[i] = i - indexStack.peek();
+      }
 
+      // Push current index onto the stack. It might be a blocker for future days.
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
