diff --git a/tmp/02b8f618-845f-4c0c-ab97-7ca50cdf208b_buggy.java b/tmp/5aa826fb-2396-4f08-b244-35211d47d98c_fixed.java
index fd526e0..9e2fddb 100644
--- a/tmp/02b8f618-845f-4c0c-ab97-7ca50cdf208b_buggy.java
+++ b/tmp/5aa826fb-2396-4f08-b244-35211d47d98c_fixed.java
@@ -1,201 +1,284 @@
     private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
         List<Position> positions = new LinkedList<>();
 
         buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
         String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1 + 3 + 1);
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (extension) {
+                    buf.skipBytes(2); // Skip the ID bytes already read indirectly
+                } else {
+                    buf.skipBytes(1); // Skip the ID byte already read indirectly
+                }
                 switch (id) {
                     case 0x01:
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
                         buf.readUnsignedByte();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                    buf.skipBytes(2); // Skip the ID bytes already read indirectly
+                } else {
+                    buf.skipBytes(1); // Skip the ID byte already read indirectly
+                }
                 switch (id) {
                     case 0x08:
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1
                         break;
                     case 0x99:
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE() - 40); // Correction: Apply offset -40
                         break;
                     case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                        position.set(Position.PREFIX_TEMP + 1, buf.readShortLE() * 0.1); // Correction: Signed short, scale factor 0.1
                         break;
                     case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE() * 0.1); // Correction: Apply scale factor 0.1
                         break;
                     default:
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                 if (extension) {
+                    buf.skipBytes(2); // Skip the ID bytes already read indirectly
+                } else {
+                    buf.skipBytes(1); // Skip the ID byte already read indirectly
+                }
                 switch (id) {
                     case 0x02:
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                        position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000L); // Correction: Rename "runtime" to KEY_HOURS and convert seconds to ms
                         break;
                     case 0x25:
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
                         buf.readUnsignedIntLE();
                         break;
                 }
             }
 
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (extension) {
+                    buf.skipBytes(2); // Skip the ID bytes already read indirectly
+                } else {
+                    buf.skipBytes(1); // Skip the ID byte already read indirectly
+                }
                 int length = buf.readUnsignedByte();
                 switch (id) {
+                    case 0x0E: // ICCID
+                        position.set(Position.KEY_ICCID, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                        break;
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
                         buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        position.set(Position.PREFIX_TEMP + (id - 0x2A + 1), buf.readShortLE() * 0.1); // Correction: Scale factor 0.1, Temp index starts from 1
+                        break;
+                    case 0x4B: // Network Information
+                        buf.readUnsignedByte(); // subtype
+                        int status = buf.readUnsignedByte(); // status
+                        if ((status & 0x01) != 0) {
+                            position.set(Position.KEY_ROAMING, (status & 0x02) != 0);
+                            position.set(Position.KEY_OPERATOR, buf.readCharSequence(length - 2, StandardCharsets.US_ASCII).toString());
+                        } else {
+                             buf.skipBytes(length - 2);
+                        }
                         break;
                     case 0xFE31:
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
                         buf.skipBytes(length - 2);
                         break;
-                    case 0xFEA8:
-                        if (buf.readUnsignedByte() > 0) {
-                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                     case 0xFEA5: // Mobile Network Cell
+                        if (length >= 6) {
+                            int mcc = buf.readUnsignedShortLE();
+                            int mnc = buf.readUnsignedByte();
+                            int lac = buf.readUnsignedShortLE();
+                            int cid = buf.readUnsignedMediumLE();
+                            Network network = new Network(CellTower.from(mcc, mnc, lac, cid));
+                            if (position.getNetwork() == null || position.getNetwork().getCellTowers().isEmpty()) {
+                                position.setNetwork(network);
+                            }
+                            buf.skipBytes(length - 8); // Skip remaining bytes if any
                         } else {
-                            buf.readUnsignedByte();
+                             buf.skipBytes(length);
+                        }
+                        break;
+                    case 0xFEA8: // Battery Voltages
+                        int status1 = buf.readUnsignedByte();
+                        int level1 = buf.readUnsignedByte();
+                        int status2 = buf.readUnsignedByte();
+                        int level2 = buf.readUnsignedByte();
+                        int status3 = buf.readUnsignedByte();
+                        int level3 = buf.readUnsignedByte();
+                        buf.readUnsignedByte(); // alert
+                        if ((status1 & 0x01) != 0) {
+                             position.set(Position.KEY_BATTERY_LEVEL, level1);
+                        }
+                        if ((status2 & 0x01) != 0) {
+                             position.set("battery2Level", level2); // Store battery 2 level
+                        }
+                         if ((status3 & 0x01) != 0) {
+                             position.set("battery3Level", level3); // Store battery 3 level
+                        }
+                        break;
+                    case 0xFEB2: // WiFi Network
+                        buf.readUnsignedByte(); // sub type
+                        int wifiCount = buf.readUnsignedByte();
+                        Network networkWifi = new Network();
+                        for (int k = 0; k < wifiCount; k++) {
+                            networkWifi.addWifiAccessPoint(WifiAccessPoint.from(
+                                    buf.readCharSequence(6 * 2, StandardCharsets.US_ASCII).toString(), buf.readByte()));
+                        }
+                        if (!networkWifi.getWifiAccessPoints().isEmpty()) {
+                             position.setNetwork(networkWifi);
                         }
-                        buf.readUnsignedByte(); // battery 2 status
-                        buf.readUnsignedByte(); // battery 2 level
-                        buf.readUnsignedByte(); // battery 3 status
-                        buf.readUnsignedByte(); // battery 3 level
-                        buf.readUnsignedByte(); // battery alert
                         break;
                     default:
                         buf.skipBytes(length);
                         break;
                 }
             }
 
+            // Skip Checksum (2 bytes) + End marker (2 bytes) before next record or end of buffer
+            // This logic assumes checksum/end marker are per record, adjust if they are at the end of the packet
+            if (buf.readableBytes() >= 4) {
+                 // Check if the next bytes look like a new record start or end marker
+                 // This part might need adjustment based on exact protocol specs for multiple records
+                 // For now, assume checksum/end are read outside the loop or handled by the caller
+            }
+
+
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
                 positions.add(position);
             }
+        }
+
+        // Skip checksum and end characters if they are at the very end of the buffer
+        if (buf.readableBytes() >= 4) {
+             buf.skipBytes(buf.readableBytes()); // Or specific skipping logic based on protocol doc
+        }
+
 
         return positions;
     }
\ No newline at end of file
