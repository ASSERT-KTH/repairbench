diff --git a/tmp/7607bf45-bfd9-47cd-a6c3-90f57c93e58c_buggy.java b/tmp/54a3d4db-a24d-4bff-9583-cfa8c6e8018d_fixed.java
index 3ecd591..9176ff2 100644
--- a/tmp/7607bf45-bfd9-47cd-a6c3-90f57c93e58c_buggy.java
+++ b/tmp/54a3d4db-a24d-4bff-9583-cfa8c6e8018d_fixed.java
@@ -1,6 +1,35 @@
     private boolean isInlineable(Document.OutputSettings out) {
-        return tag().isInline()
-            && (parent() == null || parent().isBlock())
-            && previousSibling() != null
-            && !out.outline();
+        // inline tags that are the first significant children of a block are not inlineable
+        // block tags that contain only inline children are not inlineable
+
+        if (!tag().isInline() || out.outline()) // Quick exits for non-inline tags or outline mode
+            return false;
+
+        Element parent = parent();
+        if (parent == null || !parent.tag().isBlock()) // Parent must be block
+            return false;
+
+        Node ps = previousSibling();
+        if (ps == null) // Must have a previous sibling
+            return false;
+
+        // Skip backwards over blank text nodes to find the effective previous node
+        while (ps instanceof TextNode && ((TextNode) ps).isBlank()) {
+            Node prior = ps.previousSibling();
+            if (prior == null) { // Reached start past whitespace; this element is the first significant child
+                return false;
+            }
+            ps = prior; // continue back
+        }
+
+        // Now check the type of the effective previous sibling `ps`
+        if (ps instanceof Element && ((Element) ps).tag().isBlock()) {
+            // Previous effective node is a block element, so this inline element must start on a new line
+            return false;
+        }
+        // note that Comments, DataNodes, etc are not block
+
+
+        // Otherwise (prev sibling is inline element, non-blank text, comment etc.), it's inlineable
+        return true;
     }
\ No newline at end of file
