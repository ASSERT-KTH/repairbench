diff --git a/tmp/62cecae4-a129-474a-bc0a-0456e1b8e375_buggy.java b/tmp/3608d2e0-8b5a-4fef-8c70-3ed1e690d1cd_fixed.java
index b8e3fa3..8882a2c 100644
--- a/tmp/62cecae4-a129-474a-bc0a-0456e1b8e375_buggy.java
+++ b/tmp/3608d2e0-8b5a-4fef-8c70-3ed1e690d1cd_fixed.java
@@ -1,65 +1,74 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+			// Fix: Always set maxInterval if maxDelay is provided, regardless of delay value.
+			// The policy itself should handle potential inconsistencies (e.g., initial > max).
+			if (this.maxDelay != null) {
+				policy.setMaxInterval(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// If no multiplier, but min and max delay suggest a range, use UniformRandomBackOffPolicy
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			// In UniformRandomBackOffPolicy, 'delay' corresponds to min period
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
+			// In UniformRandomBackOffPolicy, 'maxDelay' corresponds to max period
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// Default to FixedBackOffPolicy if no multiplier and no valid min/max range defined
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		// Note: delaySupplier isn't directly supported by FixedBackOffPolicy,
+		// but if delay is null and delaySupplier is present, it might be missed.
+		// However, the original code didn't handle this case either for FixedBackOffPolicy.
+		// Assuming delay must be non-null for FixedBackOffPolicy setup here.
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
