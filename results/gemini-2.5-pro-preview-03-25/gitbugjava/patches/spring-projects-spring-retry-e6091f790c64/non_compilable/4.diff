diff --git a/tmp/db9ab0f0-40f4-4662-a4c4-d7603c80427b_buggy.java b/tmp/1d6c799e-d89c-44a5-941f-21c8f5e4fd47_fixed.java
index b8e3fa3..d2bbb80 100644
--- a/tmp/db9ab0f0-40f4-4662-a4c4-d7603c80427b_buggy.java
+++ b/tmp/1d6c799e-d89c-44a5-941f-21c8f5e4fd47_fixed.java
@@ -1,65 +1,93 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
-		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
+		// Determine if Exponential policy is requested
+		boolean isExponential = (this.multiplier != null && this.multiplier > 0) || this.multiplierSupplier != null;
+
+		if (isExponential) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
+			// Set initial interval using value or supplier
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
+			// Set multiplier using value or supplier
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+			// Set max interval using value or supplier
+			// Original logic only set maxInterval if both maxDelay and delay (value) were set,
+			// and used DEFAULT_MAX_INTERVAL if maxDelay <= delay.
+			// Simplified: Set max interval if 'this.maxDelay' value is provided.
+			// The policy itself should handle validation (e.g., maxInterval >= initialInterval).
+			if (this.maxDelay != null) {
+				policy.setMaxInterval(this.maxDelay);
 			}
+			// Set max interval supplier if provided
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
+			// Set sleeper if provided
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// Determine if UniformRandom policy is requested (and not exponential)
+		// Original condition: this.maxDelay != null && this.delay != null && this.maxDelay > this.delay
+		// This condition remains, as it specifically selects UniformRandom *only* if a specific range is given via direct values.
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			// Set min period using value or supplier
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
+			// Set max period using value or supplier
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
+			// Set sleeper if provided
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// Default to FixedBackOffPolicy if neither Exponential nor UniformRandom conditions met
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+		// Set backoff period if value is provided
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		// Note: FixedBackOffPolicy does not support suppliers for backOffPeriod.
+		// If only delaySupplier is set, it won't be used here.
+		if (this.delaySupplier != null && this.delay == null) {
+			// Log or handle the case where only supplier is provided for FixedBackOffPolicy?
+			// For now, stick to original behavior where only direct value is used.
+		}
+		// Set sleeper if provided
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
