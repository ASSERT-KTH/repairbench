diff --git a/tmp/2a9e8d36-0df6-4ced-a690-b21610777db1_buggy.java b/tmp/71dc43ea-8216-4082-b231-b2992da79665_fixed.java
index b8e3fa3..939d0fc 100644
--- a/tmp/2a9e8d36-0df6-4ced-a690-b21610777db1_buggy.java
+++ b/tmp/71dc43ea-8216-4082-b231-b2992da79665_fixed.java
@@ -1,65 +1,81 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
-			}
+			// Apply suppliers first, then concrete values if supplier not present
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
-			if (this.multiplier != null) {
-				policy.setMultiplier(this.multiplier);
+			else if (this.delay != null) {
+				policy.setInitialInterval(this.delay);
 			}
+
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+			else if (this.multiplier != null) {
+				policy.setMultiplier(this.multiplier);
 			}
+
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
+			// Set maxInterval directly if maxDelay is provided and no supplier exists.
+			// Removed the check against delay and the conditional setting to DEFAULT_MAX_INTERVAL.
+			else if (this.maxDelay != null) {
+				policy.setMaxInterval(this.maxDelay);
+			}
+
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+		// Check for UniformRandom only if not Exponential
+		// Ensure both delay and maxDelay are provided and maxDelay > delay
+		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay && this.maxDelaySupplier == null && this.delaySupplier == null) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
+
+			// Set min period from delay
 			policy.setMinBackOffPeriod(this.delay);
-			}
-			if (this.delaySupplier != null) {
-				policy.minBackOffPeriodSupplier(this.delaySupplier);
-			}
-			if (this.maxDelay != null) {
+			// Set max period from maxDelay
 			policy.setMaxBackOffPeriod(this.maxDelay);
+
+			if (this.sleeper != null) {
+				policy.setSleeper(this.sleeper);
 			}
-			if (this.maxDelaySupplier != null) {
+			return policy;
+		}
+		// Check for UniformRandom with suppliers
+		else if (this.maxDelaySupplier != null && this.delaySupplier != null) {
+			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			// Set suppliers
+			policy.minBackOffPeriodSupplier(this.delaySupplier);
 			policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
-			}
+
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
+
 		}
+		// Default to FixedBackOffPolicy if neither Exponential nor UniformRandom conditions are met
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+		// Note: FixedBackOffPolicy likely doesn't support suppliers for backOffPeriod.
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
