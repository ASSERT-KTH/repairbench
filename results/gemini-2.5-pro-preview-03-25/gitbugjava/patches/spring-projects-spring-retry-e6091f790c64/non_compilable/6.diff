diff --git a/tmp/ff9627e9-659f-4c76-a729-bbecaf4a594a_buggy.java b/tmp/52605fe2-5d1d-44f9-b234-0d61b94da9f5_fixed.java
index b8e3fa3..c0cc59a 100644
--- a/tmp/ff9627e9-659f-4c76-a729-bbecaf4a594a_buggy.java
+++ b/tmp/52605fe2-5d1d-44f9-b234-0d61b94da9f5_fixed.java
@@ -1,65 +1,76 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
+			// Set initial interval first, as maxInterval logic might depend on it
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
+			// Set multiplier
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
-			}
+			// Set max interval (Corrected Logic: Prioritize supplier, then direct value, let policy handle validation)
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
+			else if (this.maxDelay != null) {
+				// Set maxInterval using the provided value.
+				// The policy's setMaxInterval method ensures maxInterval >= initialInterval.
+				policy.setMaxInterval(this.maxDelay);
+			}
+			// Set sleeper
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// If no multiplier, check for UniformRandom conditions
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
-			if (this.delay != null) {
+			// Set min period
+			if (this.delay != null) { // Check remains though implied by outer condition
 				policy.setMinBackOffPeriod(this.delay);
 			}
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
-			if (this.maxDelay != null) {
+			// Set max period
+			if (this.maxDelay != null) { // Check remains though implied by outer condition
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
+			// Set sleeper
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+		// Default to Fixed if no multiplier and no valid UniformRandom range
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		// Note: FixedBackOffPolicy does not support suppliers for backOffPeriod
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
