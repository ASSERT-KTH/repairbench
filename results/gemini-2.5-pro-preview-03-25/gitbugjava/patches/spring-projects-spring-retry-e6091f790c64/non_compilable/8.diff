diff --git a/tmp/85634165-d53b-459d-85f2-2556de4f1156_buggy.java b/tmp/ced36ce2-a29b-40ae-8a3d-fa77dd1507fc_fixed.java
index b8e3fa3..4347d85 100644
--- a/tmp/85634165-d53b-459d-85f2-2556de4f1156_buggy.java
+++ b/tmp/ced36ce2-a29b-40ae-8a3d-fa77dd1507fc_fixed.java
@@ -1,65 +1,94 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
+		// Check for Exponential BackOff criteria
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
 			ExponentialBackOffPolicy policy;
+			// Determine if random exponential backoff is needed
 			if (Boolean.TRUE.equals(this.random)) {
 				policy = new ExponentialRandomBackOffPolicy();
 			}
 			else {
 				policy = new ExponentialBackOffPolicy();
 			}
+			// Set initial interval if delay is provided
 			if (this.delay != null) {
 				policy.setInitialInterval(this.delay);
 			}
+			// Set initial interval supplier if provided
 			if (this.delaySupplier != null) {
 				policy.initialIntervalSupplier(this.delaySupplier);
 			}
+			// Set multiplier if provided
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
+			// Set multiplier supplier if provided
 			if (this.multiplierSupplier != null) {
 				policy.multiplierSupplier(this.multiplierSupplier);
 			}
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+			// Set max interval if maxDelay is provided
+			// The original condition incorrectly depended on 'delay' being non-null
+			// and used a potentially confusing comparison 'maxDelay > delay'.
+			// Setting maxInterval should just depend on whether maxDelay was provided.
+			// The policy itself enforces maxInterval >= initialInterval.
+			if (this.maxDelay != null) {
+				policy.setMaxInterval(this.maxDelay);
 			}
+			// Set max interval supplier if provided
 			if (this.maxDelaySupplier != null) {
 				policy.maxIntervalSupplier(this.maxDelaySupplier);
 			}
+			// Set sleeper if provided
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// Check for Uniform Random BackOff criteria (only if not Exponential)
+		// Requires both min (delay) and max (maxDelay) periods, with max > min.
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			// Set min backoff period (from delay)
+			// Note: Redundant null checks for delay/maxDelay within this block,
+			// as they are already checked in the outer 'if', but harmless.
 			if (this.delay != null) {
 				policy.setMinBackOffPeriod(this.delay);
 			}
+			// Set min backoff period supplier
 			if (this.delaySupplier != null) {
 				policy.minBackOffPeriodSupplier(this.delaySupplier);
 			}
+			// Set max backoff period (from maxDelay)
 			if (this.maxDelay != null) {
 				policy.setMaxBackOffPeriod(this.maxDelay);
 			}
+			// Set max backoff period supplier
 			if (this.maxDelaySupplier != null) {
 				policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 			}
+			// Set sleeper if provided
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
 			return policy;
 		}
+
+		// Default to Fixed BackOff if neither Exponential nor Uniform Random criteria are met
 		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+		// Set backoff period if delay is provided
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		// Note: FixedBackOffPolicy doesn't seem to support a supplier for the backoff period.
+		// If delaySupplier is set but delay is not, it won't be used here.
+
+		// Set sleeper if provided
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
 		return policy;
 	}
\ No newline at end of file
