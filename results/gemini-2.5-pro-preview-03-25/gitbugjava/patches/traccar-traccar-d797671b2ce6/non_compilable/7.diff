diff --git a/tmp/0ed6e405-4346-4677-8cbc-21d1bcf9ec79_buggy.java b/tmp/cb8dc52c-aa6c-49de-8fd0-37f801c914a9_fixed.java
index 3b47cfa..4f027e3 100644
--- a/tmp/0ed6e405-4346-4677-8cbc-21d1bcf9ec79_buggy.java
+++ b/tmp/cb8dc52c-aa6c-49de-8fd0-37f801c914a9_fixed.java
@@ -1,141 +1,176 @@
+import io.netty.buffer.ByteBuf;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.TimeZone;
+import org.traccar.session.DeviceSession;
+import org.traccar.model.Position;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.BcdUtil; // Assuming this utility is available and imported
+
+// Add other necessary imports for Position, DeviceSession etc. if not already present
+
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
+            // Fix: Replace potentially buggy readDate call with inline BCD parsing
+            // Ensure year is correctly handled (assume YY represents 20YY).
+            Date time;
+            try {
+                // Check if there are enough bytes for the 6-byte BCD date
+                if (buf.readableBytes() < 6) {
+                    // Not enough data for a complete date, cannot proceed reliably
+                    return null;
+                }
+                int year = BcdUtil.readInteger(buf, 2);  // Reads 1 byte containing YY
+                int month = BcdUtil.readInteger(buf, 2); // Reads 1 byte containing MM
+                int day = BcdUtil.readInteger(buf, 2);   // Reads 1 byte containing DD
+                int hour = BcdUtil.readInteger(buf, 2);  // Reads 1 byte containing HH
+                int minute = BcdUtil.readInteger(buf, 2);// Reads 1 byte containing MM
+                int second = BcdUtil.readInteger(buf, 2);// Reads 1 byte containing SS
 
+                TimeZone tz = deviceSession.get(DeviceSession.KEY_TIMEZONE); // Get timezone from session if available
+                DateBuilder dateBuilder = new DateBuilder(tz)
+                        .setYear(year + 2000) // Explicitly add 2000 to the BCD year
+                        .setMonth(month)
+                        .setDay(day)
+                        .setHour(hour)
+                        .setMinute(minute)
+                        .setSecond(second);
+                time = dateBuilder.getDate();
+
+                // Optional: Add validation for date components if needed
+                // e.g., check if month is between 1 and 12, etc. DateBuilder might do this.
+
+            } catch (Exception e) {
+                // Log the exception if a logger is available
+                // e.g., Log.warning("Failed to decode transparent date", e);
+                // If date decoding fails (e.g., invalid BCD, buffer error), return null
+                // as the timestamp is fundamental information.
+                return null;
+            }
+
+
+            // Continue with the rest of the original logic, adding buffer checks for safety
+
+            if (buf.readableBytes() < 1) { return null; } // Check before reading archive flag
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
+            if (buf.readableBytes() < 1) { return null; } // Check before reading vehicle type
             buf.readUnsignedByte(); // vehicle type
 
+            int subtype;
+            if (buf.readableBytes() < 1) { return null; } // Check before reading subtype
+            subtype = buf.readUnsignedByte();
+
             int count;
-            int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
+                    if (buf.readableBytes() < 1) { return null; } // Check for count byte
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 3) { return null; } // Need ID (2 bytes) + Length (1 byte)
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        if (buf.readableBytes() < length) {
+                            buf.skipBytes(buf.readableBytes()); // Consume remaining bytes
+                            return null; // Not enough data for the declared payload length
+                        }
+                        // Use a slice to read data safely according to length, preventing over-reads
+                        ByteBuf dataSlice = buf.readSlice(length);
                         switch (id) {
-                            case 0x0102:
-                            case 0x0528:
-                            case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0103:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
-                                break;
-                            case 0x052A:
-                                position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
-                                break;
-                            case 0x0105:
-                            case 0x052C:
-                                position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
-                                break;
-                            case 0x014A:
-                            case 0x0537:
-                            case 0x0538:
-                            case 0x0539:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                                break;
-                            case 0x052D:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                                break;
-                            case 0x0530:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0535:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0536:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0547:
-                            case 0x0548:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
-                                break;
-                            default:
-                                switch (length) {
-                                    case 1:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
-                                        break;
-                                    case 2:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
-                                        break;
-                                    case 4:
-                                        position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
-                                        break;
-                                    default:
-                                        buf.skipBytes(length);
-                                        break;
-                                }
+                            // Read data only if length matches expected size for the ID
+                            case 0x0102: case 0x0528: case 0x0546: if (length >= 4) position.set(Position.KEY_ODOMETER, dataSlice.readUnsignedInt() * 100); break;
+                            case 0x0103: if (length >= 4) position.set(Position.KEY_FUEL_LEVEL, dataSlice.readUnsignedInt() * 0.01); break;
+                            case 0x052A: if (length >= 2) position.set(Position.KEY_FUEL_LEVEL, dataSlice.readUnsignedShort() * 0.01); break;
+                            case 0x0105: case 0x052C: if (length >= 4) position.set(Position.KEY_FUEL_USED, dataSlice.readUnsignedInt() * 0.01); break;
+                            case 0x014A: case 0x0537: case 0x0538: case 0x0539: if (length >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, dataSlice.readUnsignedShort() * 0.01); break;
+                            case 0x052D: if (length >= 1) position.set(Position.KEY_COOLANT_TEMP, dataSlice.readUnsignedByte() - 40); break;
+                            case 0x0530: if (length >= 2) position.set(Position.KEY_POWER, dataSlice.readUnsignedShort() * 0.001); break;
+                            case 0x0535: if (length >= 2) position.set(Position.KEY_OBD_SPEED, dataSlice.readUnsignedShort() * 0.1); break;
+                            case 0x0536: if (length >= 2) position.set(Position.KEY_RPM, dataSlice.readUnsignedShort()); break;
+                            case 0x0547: case 0x0548: if (length >= 1) position.set(Position.KEY_THROTTLE, dataSlice.readUnsignedByte()); break;
+                            default: // Handle unknown IDs based on length
+                                if (length == 1) position.set(Position.PREFIX_IO + id, dataSlice.readUnsignedByte());
+                                else if (length == 2) position.set(Position.PREFIX_IO + id, dataSlice.readUnsignedShort());
+                                else if (length == 4) position.set(Position.PREFIX_IO + id, dataSlice.readUnsignedInt());
+                                // The slice ensures 'length' bytes are skipped even if not read here.
                                 break;
                         }
+                        // dataSlice automatically handles consuming exactly 'length' bytes from buf
                     }
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
+                    if (buf.readableBytes() > 0) { decodeCoordinates(position, buf); } // decodeCoordinates might need its own safety checks
                     break;
                 case 0x02:
+                    if (buf.readableBytes() < 1) { return null; } // Check for count byte
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 6) { return null; } // Need system id (4) + code count (2)
                         buf.readUnsignedInt(); // system id
                         int codeCount = buf.readUnsignedShort();
-                        for (int j = 0; j < codeCount; j++) {
-                            buf.skipBytes(16); // code
-                        }
+                        int bytesToSkip = codeCount * 16;
+                        int safeSkip = Math.min(bytesToSkip, buf.readableBytes());
+                        buf.skipBytes(safeSkip);
+                        if (safeSkip < bytesToSkip) { return null; } // Check if we could skip the full amount needed
                     }
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
+                    if (buf.readableBytes() > 0) { decodeCoordinates(position, buf); }
                     break;
                 case 0x03:
+                    if (buf.readableBytes() < 1) { return null; } // Check for count byte
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 2) { return null; } // Need ID (1 byte) + Length (1 byte)
                         int id = buf.readUnsignedByte();
                         int length = buf.readUnsignedByte();
+                         if (buf.readableBytes() < length) {
+                            buf.skipBytes(buf.readableBytes()); // Consume remaining bytes
+                            return null; // Not enough data for the payload
+                        }
                         switch (id) {
-                            case 0x1A:
-                                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
-                                break;
-                            case 0x1B:
-                                position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                break;
-                            case 0x1C:
-                                position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                break;
-                            case 0x1D:
-                            case 0x1E:
-                            case 0x1F:
-                                position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
-                                break;
-                            case 0x23:
-                                position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
-                                break;
-                            default:
-                                break;
+                            case 0x1A: position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); break;
+                            case 0x1B: position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); break;
+                            case 0x1C: position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); break;
+                            case 0x1D: case 0x1E: case 0x1F: position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE); break;
+                            case 0x23: position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING); break;
+                            default: break; // Ignore unknown event IDs, but still skip payload
                         }
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip the payload data
                     }
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
+                    if (buf.readableBytes() > 0) { decodeCoordinates(position, buf); }
                     break;
                 case 0x0B:
-                    if (buf.readUnsignedByte() > 0) {
+                    if (buf.readableBytes() < 1) { return null; } // Check for VIN presence flag
+                    if (buf.readUnsignedByte() > 0) { // Check if VIN is present
+                        if (buf.readableBytes() < 17) {
+                            buf.skipBytes(buf.readableBytes()); // Consume remaining bytes
+                            return null; // Not enough data for the VIN
+                        }
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
+                    // No decodeCoordinates for this subtype in original code
                     break;
                 default:
-                    return null;
+                    return null; // Unknown or unsupported subtype
+            }
+
+            // If getLastLocation didn't set the time (e.g., if it couldn't find a last location),
+            // ensure the time from this message is set.
+            if (position.getFixTime() == null) {
+                position.setTime(time);
             }
 
             return position;
         }
 
-        return null;
+        return null; // Type was not 0xF0
     }
\ No newline at end of file
