diff --git a/tmp/490a0e62-d729-48dc-8210-10619beafeed_buggy.java b/tmp/1077a697-b8ee-4893-9ad4-3641df25226c_fixed.java
index 3b47cfa..9884217 100644
--- a/tmp/490a0e62-d729-48dc-8210-10619beafeed_buggy.java
+++ b/tmp/1077a697-b8ee-4893-9ad4-3641df25226c_fixed.java
@@ -1,141 +1,234 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            // Read time first, as it might be needed by getLastLocation
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
+            if (time == null) {
+                // Invalid time, cannot process message reliably
+                return null;
+            }
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Parameters
                     count = buf.readUnsignedByte();
+                    // Check for sufficient bytes before loop
+                    if (buf.readableBytes() < count * 3) { // Minimum 3 bytes per item (id:2, length:1)
+                         return null; // Avoid buffer underflow
+                    }
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        // Check readable bytes for data payload
+                        if (buf.readableBytes() < length) {
+                           return null; // Avoid buffer underflow
+                        }
                         switch (id) {
-                            case 0x0102:
-                            case 0x0528:
-                            case 0x0546:
+                            case 0x0102: // Odometer
+                            case 0x0528: // Odometer
+                            case 0x0546: // Odometer
+                                if (length >= 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else {
+                                    buf.skipBytes(length); // Skip if length unexpected
+                                }
                                 break;
-                            case 0x0103:
+                            case 0x0103: // Fuel level (int)
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                     buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x052A:
+                            case 0x052A: // Fuel level (short)
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0105:
-                            case 0x052C:
+                            case 0x0105: // Fuel used
+                            case 0x052C: // Fuel used
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x014A:
-                            case 0x0537:
-                            case 0x0538:
-                            case 0x0539:
+                            case 0x014A: // Fuel consumption
+                            case 0x0537: // Fuel consumption
+                            case 0x0538: // Fuel consumption
+                            case 0x0539: // Fuel consumption
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x052D:
+                            case 0x052D: // Coolant temp
+                                if (length >= 1) {
                                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0530:
+                            case 0x0530: // Power (voltage)
+                                if (length >= 2) {
                                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0535:
+                            case 0x0535: // OBD speed
+                                if (length >= 2) {
                                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0536:
+                            case 0x0536: // RPM
+                                if (length >= 2) {
                                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0547:
-                            case 0x0548:
+                            case 0x0547: // Throttle
+                            case 0x0548: // Throttle
+                                if (length >= 1) {
                                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            default:
+                            default: // Unknown ID, treat as IO
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
+                                        // Unknown length or ID, skip the data
                                         buf.skipBytes(length);
                                         break;
                                 }
-                                break;
-                        }
-                    }
+                                break; // break default case (unknown id)
+                        } // end switch(id)
+                    } // end for
+                    // Transparent messages of this type usually don't contain current coordinates
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
-                    break;
-                case 0x02:
+                    break; // break case 0x01
+
+                case 0x02: // DTC codes
                     count = buf.readUnsignedByte();
+                    // Check readable bytes before loop
+                    if (buf.readableBytes() < count * 6) { // Minimum 6 bytes per item (sysId:4, count:2)
+                       return null;
+                    }
                     for (int i = 0; i < count; i++) {
                         buf.readUnsignedInt(); // system id
                         int codeCount = buf.readUnsignedShort();
-                        for (int j = 0; j < codeCount; j++) {
-                            buf.skipBytes(16); // code
+                        int bytesToSkip = codeCount * 16;
+                        // Check readable bytes for codes
+                        if (buf.readableBytes() < bytesToSkip) {
+                           return null; // Avoid buffer underflow
                         }
+                        buf.skipBytes(bytesToSkip); // skip codes
                     }
+                    // Transparent messages of this type usually don't contain current coordinates
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
-                    break;
-                case 0x03:
+                    break; // break case 0x02
+
+                case 0x03: // Alarms
                     count = buf.readUnsignedByte();
+                     // Check readable bytes before loop
+                    if (buf.readableBytes() < count * 2) { // Minimum 2 bytes per item (id:1, length:1)
+                        return null;
+                    }
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedByte();
                         int length = buf.readUnsignedByte();
+                         // Check readable bytes for data payload
+                        if (buf.readableBytes() < length) {
+                            return null; // Avoid buffer underflow
+                        }
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                // Unknown alarm ID
                                 break;
                         }
+                        // Skip the data associated with this alarm item, regardless of whether we processed the ID
                         buf.skipBytes(length);
                     }
+                    // Transparent messages of this type usually don't contain current coordinates
                     getLastLocation(position, time);
-                    decodeCoordinates(position, buf);
-                    break;
-                case 0x0B:
-                    if (buf.readUnsignedByte() > 0) {
+                    break; // break case 0x03
+
+                case 0x0B: // VIN
+                    // Check readable bytes for VIN presence flag
+                    if (!buf.isReadable()) {
+                        return null;
+                    }
+                    if (buf.readUnsignedByte() > 0) { // VIN presence flag
+                         // Check readable bytes for VIN string
+                        if (buf.readableBytes() >= 17) {
                             position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                        } else {
+                             // Not enough data for VIN after flag indicates presence - indicates corrupted message
+                             return null;
                         }
+                    }
+                    // Transparent messages of this type usually don't contain current coordinates
                     getLastLocation(position, time);
-                    break;
+                    break; // break case 0x0B
+
                 default:
+                    // Unknown subtype for transparent message F0
                     return null;
             }
 
-            return position;
+            // If getLastLocation failed to set the time (e.g., no last location available),
+            // set the time to the main time read from the message.
+            if (position.getFixTime() == null) {
+                position.setTime(time);
             }
 
-        return null;
+            return position; // Return position with parameters/alarms/VIN but potentially old coords
+        }
+
+        return null; // Not type F0
     }
\ No newline at end of file
