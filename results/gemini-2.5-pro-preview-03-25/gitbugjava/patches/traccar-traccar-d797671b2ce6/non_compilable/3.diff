diff --git a/tmp/f983bc15-c4c6-4e42-b9ab-d356a29ff44c_buggy.java b/tmp/4a007ef1-a248-4bdc-af8a-debf26547161_fixed.java
index 3b47cfa..60471c2 100644
--- a/tmp/f983bc15-c4c6-4e42-b9ab-d356a29ff44c_buggy.java
+++ b/tmp/4a007ef1-a248-4bdc-af8a-debf26547161_fixed.java
@@ -1,141 +1,257 @@
+import io.netty.buffer.ByteBuf;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.BcdUtil;
+import org.traccar.helper.DateBuilder;
+import org.traccar.model.Position;
+
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.util.TimeZone;
+
+// Add necessary imports (assumed to be present in the original file)
+// import org.traccar.helper.Log;
+
+public class HuabaoProtocolDecoder extends BaseProtocolDecoder {
+
+    // Constructor and other methods are not shown as per requirement
+
+    public HuabaoProtocolDecoder(Protocol protocol) {
+        super(protocol);
+        //TODO Auto-generated constructor stub
+    }
+
+    // Dummy methods assumed to exist based on the original code
+    private void getLastLocation(Position position, Date time) {
+        // Implementation not relevant for the fix
+        if (position.getFixTime() == null && time != null) {
+             position.setTime(time);
+        } else if (position.getFixTime() == null) {
+             position.setTime(new Date()); // Fallback if time is null
+        }
+    }
+
+    private void decodeCoordinates(Position position, ByteBuf buf) {
+        // Implementation not relevant for the fix
+        // Assume this method reads coordinates and potentially sets position.setTime
+    }
+
+
+    @Override
+    protected Object decode(
+            io.netty.channel.Channel channel, java.net.SocketAddress remoteAddress, Object msg) throws Exception {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
+            // Fix: Read date as BCD instead of plain bytes using Traccar helpers
+            TimeZone timeZone = deviceSession.get(DeviceSession.KEY_TIMEZONE);
+            DateBuilder dateBuilder = new DateBuilder(timeZone);
+            dateBuilder.setYear(2000 + BcdUtil.readInteger(buf, 1)); // YY
+            dateBuilder.setMonth(BcdUtil.readInteger(buf, 1));      // MM
+            dateBuilder.setDay(BcdUtil.readInteger(buf, 1));        // DD
+            dateBuilder.setHour(BcdUtil.readInteger(buf, 1));       // HH
+            dateBuilder.setMinute(BcdUtil.readInteger(buf, 1));     // MM
+            dateBuilder.setSecond(BcdUtil.readInteger(buf, 1));     // SS
+            Date time = dateBuilder.getDate(); // Let DateBuilder handle validation, may throw exception
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        // Check buffer readable bytes before reading/skipping data based on length
+                        if (buf.readableBytes() < length) {
+                            // Log.warning("Insufficient data for transparent item 0x01, id=" + id);
+                            buf.skipBytes(buf.readableBytes()); // Consume rest of buffer
+                            break; // Exit loop
+                        }
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                                 break;
                             case 0x0103:
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x052A:
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
                                 break;
                             case 0x0105:
                             case 0x052C:
                                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                                 break;
                             case 0x052D:
                                 position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                                 break;
                             case 0x0530:
                                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                                 break;
                             case 0x0535:
                                 position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
                                 break;
                             case 0x0536:
                                 position.set(Position.KEY_RPM, buf.readUnsignedShort());
                                 break;
                             case 0x0547:
                             case 0x0548:
                                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                                 break;
                             default:
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
                                         buf.skipBytes(length);
                                         break;
                                 }
                                 break;
                         }
                     }
                     getLastLocation(position, time);
+                    if (buf.readableBytes() > 0) { // Check if buffer has data for coordinates
                         decodeCoordinates(position, buf);
+                    }
                     break;
                 case 0x02:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        // Check readable bytes for system id and code count
+                        if (buf.readableBytes() < 4 + 2) {
+                           // Log.warning("Insufficient data for transparent item 0x02 header");
+                           buf.skipBytes(buf.readableBytes());
+                           break;
+                        }
                         buf.readUnsignedInt(); // system id
                         int codeCount = buf.readUnsignedShort();
+                        int codesLength = codeCount * 16;
+                        if (buf.readableBytes() < codesLength) {
+                           // Log.warning("Insufficient data for transparent item 0x02 codes");
+                           buf.skipBytes(buf.readableBytes());
+                           break;
+                        }
                         for (int j = 0; j < codeCount; j++) {
                             buf.skipBytes(16); // code
                         }
                     }
                     getLastLocation(position, time);
+                    if (buf.readableBytes() > 0) {
                         decodeCoordinates(position, buf);
+                    }
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        // Check readable bytes for id and length
+                        if (buf.readableBytes() < 1 + 1) {
+                            // Log.warning("Insufficient data for transparent item 0x03 header");
+                            buf.skipBytes(buf.readableBytes());
+                            break;
+                        }
                         int id = buf.readUnsignedByte();
                         int length = buf.readUnsignedByte();
+                        // Check readable bytes for the data part
+                        if (buf.readableBytes() < length) {
+                           // Log.warning("Insufficient data for transparent item 0x03 data, id=" + id);
+                           buf.skipBytes(buf.readableBytes());
+                           break;
+                        }
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip the data associated with the ID
                     }
                     getLastLocation(position, time);
+                    if (buf.readableBytes() > 0) {
                         decodeCoordinates(position, buf);
+                    }
                     break;
                 case 0x0B:
-                    if (buf.readUnsignedByte() > 0) {
+                    // Check if flag byte exists
+                    if (buf.readableBytes() < 1) {
+                         // Log.warning("Insufficient data for transparent item 0x0B flag");
+                         break; // Exit case
+                    }
+                    int vinFlag = buf.readUnsignedByte();
+                    if (vinFlag > 0) {
+                        // Check if 17 bytes for VIN exist
+                        if (buf.readableBytes() < 17) {
+                             // Log.warning("Insufficient data for transparent item 0x0B VIN");
+                             buf.skipBytes(buf.readableBytes()); // Consume rest
+                        } else {
                             position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                         }
+                    }
                     getLastLocation(position, time);
+                    // No decodeCoordinates for 0x0B as per original logic
                     break;
                 default:
-                    return null;
+                    // Log.warning("Unsupported transparent subtype: 0x" + String.format("%02X", subtype));
+                    return null; // Keep original behavior for unknown subtypes
+            }
+
+            // Set time only if not already set (e.g., by decodeCoordinates which sets fixTime)
+            // If getLastLocation set a time because 'time' was null, allow it.
+            // If 'time' (from BCD) is valid and no fixTime set yet, use it.
+            if (position.getFixTime() == null && time != null) {
+                position.setTime(time);
             }
 
             return position;
         }
 
         return null;
     }
+
+}
\ No newline at end of file
