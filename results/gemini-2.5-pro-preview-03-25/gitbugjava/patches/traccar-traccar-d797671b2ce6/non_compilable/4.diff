diff --git a/tmp/4f0715ef-eb93-4cec-91aa-7f6da4371acb_buggy.java b/tmp/bd90a991-64a7-4e08-8962-de935daebb49_fixed.java
index 3b47cfa..3ac4f28 100644
--- a/tmp/4f0715ef-eb93-4cec-91aa-7f6da4371acb_buggy.java
+++ b/tmp/bd90a991-64a7-4e08-8962-de935daebb49_fixed.java
@@ -1,141 +1,240 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
+        int initialReadableBytes = buf.readableBytes(); // Store initial readable bytes
+        int startIndex = buf.readerIndex(); // Store start index for calculating consumed bytes
+        Position position = null; // Initialize position to null
+
+        try {
             int type = buf.readUnsignedByte();
 
             if (type == 0xF0) {
-            Position position = new Position(getProtocolName());
+                position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
+                // Check buffer has enough bytes for time + archive flag + vehicle type + subtype
+                if (buf.readableBytes() < (6 + 1 + 1 + 1)) {
+                    // Not enough data for mandatory fields, return null early
+                    // The finally block will handle skipping remaining bytes
+                    return null;
+                }
+
                 Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
                 if (buf.readUnsignedByte() > 0) {
                     position.set(Position.KEY_ARCHIVE, true);
                 }
 
                 buf.readUnsignedByte(); // vehicle type
 
                 int count;
                 int subtype = buf.readUnsignedByte();
+                boolean decodedSubtype = true; // Flag to track if we processed a known subtype
+
                 switch (subtype) {
                     case 0x01:
+                        if (buf.readableBytes() < 1) { decodedSubtype = false; break; }
                         count = buf.readUnsignedByte();
                         for (int i = 0; i < count; i++) {
+                            if (buf.readableBytes() < 3) { decodedSubtype = false; break; } // Need ID (2) + Length (1)
                             int id = buf.readUnsignedShort();
                             int length = buf.readUnsignedByte();
+                            if (buf.readableBytes() < length) { decodedSubtype = false; break; } // Need data bytes
+
                             switch (id) {
-                            case 0x0102:
+                                case 0x0102: // Odometer
                                 case 0x0528:
                                 case 0x0546:
+                                    if (length == 4) {
                                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                    } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0103:
+                                case 0x0103: // Fuel Level (int)
+                                    if (length == 4) {
                                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                    } else { buf.skipBytes(length); }
                                     break;
-                            case 0x052A:
+                                case 0x052A: // Fuel Level (short)
+                                    if (length == 2) {
                                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                    } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0105:
+                                case 0x0105: // Fuel Used
                                 case 0x052C:
+                                    if (length == 4) {
                                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                    } else { buf.skipBytes(length); }
                                     break;
-                            case 0x014A:
+                                case 0x014A: // Fuel Consumption
                                 case 0x0537:
                                 case 0x0538:
                                 case 0x0539:
+                                     if (length == 2) {
                                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            case 0x052D:
+                                case 0x052D: // Coolant Temp
+                                     if (length == 1) {
                                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0530:
+                                case 0x0530: // Power
+                                     if (length == 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0535:
+                                case 0x0535: // OBD Speed
+                                     if (length == 2) {
                                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0536:
+                                case 0x0536: // RPM
+                                     if (length == 2) {
                                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            case 0x0547:
+                                case 0x0547: // Throttle
                                 case 0x0548:
+                                     if (length == 1) {
                                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                                     } else { buf.skipBytes(length); }
                                     break;
-                            default:
+                                default: // Generic IO or skip
                                     switch (length) {
                                         case 1:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                             break;
                                         case 2:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                             break;
                                         case 4:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                             break;
                                         default:
-                                        buf.skipBytes(length);
+                                            buf.skipBytes(length); // Skip if length > 0 and valid
                                             break;
                                     }
                                     break;
                             }
                         }
+                         if (!decodedSubtype) break; // Exit switch if error occurred in loop
                         getLastLocation(position, time);
+                        // Assuming decodeCoordinates reads at least Lat/Lon (8 bytes)
+                        if (buf.readableBytes() >= 8) {
                             decodeCoordinates(position, buf);
-                    break;
+                        } else {
+                            // Not enough bytes left for coordinates, maybe partial message?
+                            // Log warning? For now, proceed, finally block will skip.
+                        }
+                        break; // End case 0x01
+
                     case 0x02:
+                        if (buf.readableBytes() < 1) { decodedSubtype = false; break; }
                         count = buf.readUnsignedByte();
                         for (int i = 0; i < count; i++) {
+                             if (buf.readableBytes() < 6) { decodedSubtype = false; break; } // Need sysId(4) + codeCount(2)
                             buf.readUnsignedInt(); // system id
                             int codeCount = buf.readUnsignedShort();
-                        for (int j = 0; j < codeCount; j++) {
-                            buf.skipBytes(16); // code
+                            int skipLength = codeCount * 16;
+                            if (buf.readableBytes() >= skipLength) {
+                                buf.skipBytes(skipLength); // code
+                            } else {
+                                decodedSubtype = false; // Not enough bytes for codes
+                                break;
                             }
                         }
+                         if (!decodedSubtype) break; // Exit switch if error occurred in loop
                         getLastLocation(position, time);
+                        if (buf.readableBytes() >= 8) {
                             decodeCoordinates(position, buf);
-                    break;
+                        }
+                        break; // End case 0x02
+
                     case 0x03:
+                        if (buf.readableBytes() < 1) { decodedSubtype = false; break; }
                         count = buf.readUnsignedByte();
                         for (int i = 0; i < count; i++) {
+                             if (buf.readableBytes() < 2) { decodedSubtype = false; break; } // Need ID (1) + Length (1)
                             int id = buf.readUnsignedByte();
                             int length = buf.readUnsignedByte();
+                             if (buf.readableBytes() < length) { decodedSubtype = false; break; } // Need data bytes
+
                             switch (id) {
                                 case 0x1A:
                                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                     break;
                                 case 0x1B:
                                     position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                     break;
                                 case 0x1C:
                                     position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                     break;
                                 case 0x1D:
                                 case 0x1E:
                                 case 0x1F:
                                     position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                     break;
                                 case 0x23:
                                     position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                     break;
                                 default:
-                                break;
+                                    break; // Ignore unknown alarm IDs but still skip length
                             }
-                        buf.skipBytes(length);
+                            buf.skipBytes(length); // Skip the alarm data bytes
                         }
+                         if (!decodedSubtype) break; // Exit switch if error occurred in loop
                         getLastLocation(position, time);
+                         if (buf.readableBytes() >= 8) {
                             decodeCoordinates(position, buf);
-                    break;
+                         }
+                        break; // End case 0x03
+
                     case 0x0B:
+                        if (buf.readableBytes() < 1) { decodedSubtype = false; break; }
                         if (buf.readUnsignedByte() > 0) {
+                             if (buf.readableBytes() >= 17) { // Check before reading VIN
                                 position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                             } else {
+                                 decodedSubtype = false; // Not enough bytes for VIN
                              }
+                        }
+                         if (!decodedSubtype) break; // Exit switch if error occurred
                         getLastLocation(position, time);
-                    break;
+                        // Subtype 0x0B might not have coordinates following it
+                        break; // End case 0x0B
+
                     default:
-                    return null;
+                        decodedSubtype = false; // Unknown subtype
+                        // Don't return null immediately, let finally block handle skipping
+                        break;
                 }
 
-            return position;
+                // If subtype was unknown or error occurred during processing, invalidate position
+                if (!decodedSubtype) {
+                    position = null;
                 }
 
-        return null;
+            } else {
+                 // Type was not 0xF0, invalidate position
+                 position = null;
+            }
+
+        } catch (Exception e) {
+            // Log exception ? e.g., Log.warning("Error in decodeTransparent", e);
+            position = null; // Ensure null return on any exception during decoding
+        } finally {
+            // Consume any remaining bytes from the initial slice to prevent misalignment
+            int bytesConsumed = buf.readerIndex() - startIndex;
+            int bytesRemaining = initialReadableBytes - bytesConsumed;
+            // Check if buffer is still readable and has enough bytes intended to be skipped
+            if (bytesRemaining > 0 && buf.readableBytes() >= bytesRemaining) {
+                buf.skipBytes(bytesRemaining);
+            } else if (bytesRemaining > 0) {
+                // Log warning? Less bytes readable than expected to remain. Skip what's left.
+                buf.skipBytes(buf.readableBytes());
+            } else if (bytesRemaining < 0) {
+                // Log error? Consumed more bytes than initially available. This indicates a bug above.
+            }
+        }
+
+        return position; // Return the decoded position or null
     }
\ No newline at end of file
