diff --git a/tmp/7185c365-ca8f-4701-8deb-64c23640e0ed_buggy.java b/tmp/3412f787-d65d-45e4-8c14-a86ac0d3cb9a_fixed.java
index d87dd79..e728893 100644
--- a/tmp/7185c365-ca8f-4701-8deb-64c23640e0ed_buggy.java
+++ b/tmp/3412f787-d65d-45e4-8c14-a86ac0d3cb9a_fixed.java
@@ -1,47 +1,106 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+// Assuming the class extends ByteToMessageDecoder or a similar base class
+// import io.netty.handler.codec.ByteToMessageDecoder;
+
+// The class declaration would be outside the fixed function provided
+// public class WatchFrameDecoder extends ByteToMessageDecoder {
+
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+        int readerIndex = buf.readerIndex();
+        int writerIndex = buf.writerIndex();
+
+        // Find start delimiter '['
+        // We search from the current reader index.
+        int startIndex = buf.indexOf(readerIndex, writerIndex, (byte) '[');
+
+        if (startIndex == -1) {
+            // No start delimiter '[' found in the buffer.
+            // Might be garbage or incomplete frame start. Wait for more data.
+            return null;
+        }
+
+        // Discard any data before the first '[' found.
+        if (startIndex > readerIndex) {
+            buf.readerIndex(startIndex);
+            readerIndex = startIndex; // Update local variable for consistency
         }
+
+        // Find end delimiter ']' after the start delimiter '['
+        // Search must start *after* the '['.
+        int endIndex = buf.indexOf(readerIndex + 1, writerIndex, (byte) ']');
+
+        if (endIndex == -1) {
+            // Start delimiter '[' found, but no end delimiter ']' yet.
+            // Frame is incomplete, wait for more data.
+            return null;
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
-                if (b1 == '}') {
-                    byte b2 = buf.readByte();
+        // We have found a complete frame delimited by '[' and ']'.
+        // The frame spans from readerIndex (which is startIndex) to endIndex (inclusive).
+        int frameLengthWithDelimiters = endIndex - readerIndex + 1;
+
+        // Allocate a buffer for the unescaped frame.
+        // Initial capacity estimation, might shrink due to unescaping.
+        ByteBuf frame = Unpooled.buffer(frameLengthWithDelimiters);
+
+        try {
+            // Read the start delimiter '[' from input buffer (advances readerIndex).
+            frame.writeByte(buf.readByte()); // Write '[' to the output frame.
+
+            // Process the content between '[' and ']'.
+            while (buf.readerIndex() <= endIndex) {
+                byte b1 = buf.readByte(); // Read next byte from input buffer.
+
+                if (b1 == ']') {
+                    // End of frame delimiter found.
+                    frame.writeByte(b1); // Write ']' to the output frame.
+                    // The input buffer's readerIndex is now positioned after the consumed frame.
+                    return frame; // Return the complete, unescaped frame.
+
+                } else if (b1 == '}') {
+                    // Escape character '}' found.
+                    // Check if there is another byte available for the escape code *within* the frame boundary.
+                    if (buf.readerIndex() > endIndex) {
+                        // This means '}' was the last byte before the expected ']', which is invalid.
+                        throw new IllegalArgumentException("Incomplete escape sequence '}' found at the end of the frame boundary");
+                    }
+                    byte b2 = buf.readByte(); // Read the byte following '}'
                     switch (b2) {
-                        case 0x01:
-                            frame.writeByte('}');
-                            break;
-                        case 0x02:
-                            frame.writeByte('[');
-                            break;
-                        case 0x03:
-                            frame.writeByte(']');
-                            break;
-                        case 0x04:
-                            frame.writeByte(',');
-                            break;
-                        case 0x05:
-                            frame.writeByte('*');
-                            break;
+                        case 0x01: frame.writeByte('}'); break; // 7d01 -> }
+                        case 0x02: frame.writeByte('['); break; // 7d02 -> [
+                        case 0x03: frame.writeByte(']'); break; // 7d03 -> ]
+                        case 0x04: frame.writeByte(','); break; // 7d04 -> ,
+                        case 0x05: frame.writeByte('*'); break; // 7d05 -> *
                         default:
+                            // Invalid byte following escape character.
                             throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                    "Unexpected byte 0x%02x after escape character '}' at index %d", b2, buf.readerIndex() - 1));
                     }
                 } else {
-                    frame.writeByte(b1);
+                    // Regular byte, not a delimiter or escape character.
+                    frame.writeByte(b1); // Write the byte to the output frame.
                 }
             }
-            return frame;
-        }
 
-        return null;
+            // This point should not be reached if the logic is correct, because the loop
+            // should return when ']' is encountered and processed at buf.readerIndex() == endIndex.
+            // If it's reached, it indicates an unexpected state.
+            throw new IllegalArgumentException("Frame decoding loop finished unexpectedly after frame boundary ']' was identified.");
+
+        } catch (Exception e) {
+            // If any exception occurs during frame processing (e.g., invalid escape),
+            // release the allocated frame buffer to prevent memory leaks.
+            frame.release();
+            // Re-throw the exception. The ByteToMessageDecoder framework might handle it,
+            // potentially resetting the reader index or closing the channel.
+            throw e;
         }
+    }
+
+// } // End of class definition (if applicable)
\ No newline at end of file
