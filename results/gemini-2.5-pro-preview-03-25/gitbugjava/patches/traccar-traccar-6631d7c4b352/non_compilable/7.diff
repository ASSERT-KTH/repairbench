diff --git a/tmp/d2433e5b-d4a9-4012-913c-b20355ab5503_buggy.java b/tmp/9148c5d5-c79c-4664-9c67-72aa2ab7ed67_fixed.java
index d87dd79..cced281 100644
--- a/tmp/d2433e5b-d4a9-4012-913c-b20355ab5503_buggy.java
+++ b/tmp/9148c5d5-c79c-4664-9c67-72aa2ab7ed67_fixed.java
@@ -1,47 +1,65 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+        // Find the index of the first closing bracket ']'
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
+                // Found the closing bracket, endIndex is the position *after* it
                 endIndex = i + 1;
                 break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
+        // If no ']' is found in the readable bytes, return null (wait for more data)
+        if (endIndex == -1) {
+            return null;
+        }
+
+        // Found a complete frame '[...]'. Extract and unescape it.
+        // Allocate buffer with estimated size for efficiency.
+        ByteBuf frame = Unpooled.buffer(endIndex - buf.readerIndex());
         while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
-                if (b1 == '}') {
-                    byte b2 = buf.readByte();
+            byte b1 = buf.readByte(); // Read byte and advance reader index
+            if (b1 == '}') { // Check for escape character
+                // Ensure there is a next byte *within the frame* to check
+                if (buf.readerIndex() < endIndex) {
+                    byte b2 = buf.readByte(); // Read the byte after escape char
                     switch (b2) {
                         case 0x01:
-                            frame.writeByte('}');
+                            frame.writeByte('}'); // 7d 01 -> 7d
                             break;
                         case 0x02:
-                            frame.writeByte('[');
+                            frame.writeByte('['); // 7d 02 -> 5b
                             break;
                         case 0x03:
-                            frame.writeByte(']');
+                            frame.writeByte(']'); // 7d 03 -> 5d
                             break;
                         case 0x04:
-                            frame.writeByte(',');
+                            frame.writeByte(','); // 7d 04 -> 2c
                             break;
                         case 0x05:
-                            frame.writeByte('*');
+                            frame.writeByte('*'); // 7d 05 -> 2a
                             break;
                         default:
+                            // Invalid escape sequence, throw exception
+                            // readerIndex is already advanced past the invalid byte b2
                             throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                    "unexpected byte after escape character at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
+                    // Found '}' right before the end of the frame ('endIndex').
+                    // This means an incomplete escape sequence (e.g., "[...}")
+                    throw new IllegalArgumentException(String.format(
+                            "incomplete escape sequence at end of frame at %d", buf.readerIndex() - 1));
+                }
+            } else {
+                // Regular byte, just write it to the frame
                 frame.writeByte(b1);
             }
         }
+        // Return the decoded frame. The readerIndex of the input buffer 'buf'
+        // has been advanced to endIndex by the readByte() calls.
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
