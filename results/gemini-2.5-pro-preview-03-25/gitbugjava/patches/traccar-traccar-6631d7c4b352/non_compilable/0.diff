diff --git a/tmp/aa73581e-d6e0-4512-a5ae-408ed2430d54_buggy.java b/tmp/80411427-ff98-46fa-8a8e-accbe17141dd_fixed.java
index d87dd79..3f941e7 100644
--- a/tmp/aa73581e-d6e0-4512-a5ae-408ed2430d54_buggy.java
+++ b/tmp/80411427-ff98-46fa-8a8e-accbe17141dd_fixed.java
@@ -1,47 +1,88 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+        // 1. Find the start index '[' at or after the current reader index
+        int startIndex = -1;
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+            if (buf.getByte(i) == '[') {
+                startIndex = i;
+                break;
+            }
+        }
+
+        // 2. If '[' not found, we need more data or the start marker is missing
+        if (startIndex == -1) {
+            return null; // Wait for '['
+        }
+
+        // 3. Discard any bytes before the frame start marker '['
+        buf.readerIndex(startIndex);
+
+        // 4. Find the end index ']' starting *after* the '['
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        // Start searching from the byte *after* '[' (startIndex + 1)
+        for (int i = startIndex + 1; i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+                endIndex = i;
                 break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+        // 5. If ']' not found, the complete frame hasn't arrived yet
+        if (endIndex == -1) {
+            // Reset reader index to the start of the potential frame ('[')
+            // because we haven't consumed it yet. Netty will call decode again later.
+            buf.readerIndex(startIndex);
+            return null; // Wait for ']'
+        }
+
+        // 6. Calculate frame length and extract the frame slice
+        // The frame includes both '[' at startIndex and ']' at endIndex
+        int frameLength = endIndex - startIndex + 1;
+        // Use readSlice which advances the reader index of the input buffer 'buf'
+        ByteBuf rawFrame = buf.readSlice(frameLength);
+
+        // 7. Create the result buffer with an estimated capacity
+        ByteBuf resultFrame = Unpooled.buffer(frameLength);
+
+        // 8. Process the raw frame, unescaping content
+        while (rawFrame.isReadable()) {
+            byte b1 = rawFrame.readByte();
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // Check if there's a byte following the escape character
+                if (!rawFrame.isReadable()) {
+                    // Found '}' at the very end of the frame, which is invalid
+                    throw new IllegalArgumentException("Incomplete escape sequence at end of frame");
+                }
+                byte b2 = rawFrame.readByte();
                 switch (b2) {
                     case 0x01:
-                            frame.writeByte('}');
+                        resultFrame.writeByte('}');
                         break;
                     case 0x02:
-                            frame.writeByte('[');
+                        resultFrame.writeByte('[');
                         break;
                     case 0x03:
-                            frame.writeByte(']');
+                        resultFrame.writeByte(']');
                         break;
                     case 0x04:
-                            frame.writeByte(',');
+                        resultFrame.writeByte(',');
                         break;
                     case 0x05:
-                            frame.writeByte('*');
+                        resultFrame.writeByte('*');
                         break;
                     default:
+                        // Use a format similar to the original error message
                         throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                "unexpected byte after escape char '}' : 0x%02x", b2));
                 }
             } else {
-                    frame.writeByte(b1);
+                // Regular byte (including '[' and ']'), write it directly
+                resultFrame.writeByte(b1);
             }
         }
-            return frame;
-        }
 
-        return null;
+        // 9. Return the processed (unescaped) frame including '[' and ']'
+        return resultFrame;
     }
\ No newline at end of file
