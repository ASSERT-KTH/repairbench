diff --git a/tmp/c62e1c50-945b-4665-b893-5721e3fdb9da_buggy.java b/tmp/1c5babdc-2bf4-45ca-b69f-b416f682bc57_fixed.java
index d87dd79..ea175cd 100644
--- a/tmp/c62e1c50-945b-4665-b893-5721e3fdb9da_buggy.java
+++ b/tmp/1c5babdc-2bf4-45ca-b69f-b416f682bc57_fixed.java
@@ -1,47 +1,78 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
-            if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
-                break;
+        // Find the index of the first closing bracket ']' from the current reader index
+        int endIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ']');
+
+        // If no ']' is found, the frame is incomplete, wait for more data
+        if (endIndex == -1) {
+            return null;
         }
+
+        // Check if the potential frame starts with '[' at the current reader index.
+        // If not, it indicates corruption or misalignment.
+        if (buf.getByte(buf.readerIndex()) != '[') {
+            // Consider how to handle this - throwing an exception is usually safest
+            // to signal a protocol error rather than potentially skipping valid data
+            // or getting stuck on malformed data.
+            throw new IllegalArgumentException(
+                "Invalid frame: does not start with '[' at reader index " + buf.readerIndex());
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
+        // We have a complete frame identified from readerIndex to endIndex (inclusive).
+        // Create a buffer for the decoded frame content.
+        // Initial capacity estimation: frame length, may shrink due to unescaping.
+        ByteBuf frame = Unpooled.buffer(endIndex - buf.readerIndex() + 1);
+
+        try {
+            // Process bytes from readerIndex up to and including endIndex
+            while (buf.readerIndex() <= endIndex) {
                 byte b1 = buf.readByte();
                 if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                    // Found an escape character '}'. Check if the next byte exists within the frame.
+                    if (buf.readerIndex() > endIndex) {
+                        // Malformed: '}' is the last byte before expected ']'
+                        frame.release(); // Release allocated buffer
+                        throw new IllegalArgumentException(String.format(
+                                "Incomplete escape sequence at index %d (frame end)", buf.readerIndex() - 1));
+                    }
+                    byte b2 = buf.readByte(); // Read the byte following '}'
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
+                            // Unknown byte follows escape character '}'
+                            frame.release(); // Release allocated buffer
                             throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                    "Unexpected escape byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
+                    // Regular byte, not part of an escape sequence, write it directly.
                     frame.writeByte(b1);
                 }
             }
+            // The loop finishes when readerIndex passes endIndex (i.e., after reading ']').
+            // Return the fully decoded frame. Netty will pass it down the pipeline.
+            // The input buffer 'buf' readerIndex is now positioned after the consumed frame.
             return frame;
+        } catch (Exception e) {
+            // If any exception occurs during processing (e.g., IllegalArgumentException),
+            // ensure the allocated 'frame' buffer is released before propagating the exception.
+            frame.release();
+            throw e;
         }
-
-        return null;
     }
\ No newline at end of file
