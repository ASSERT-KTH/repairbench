diff --git a/tmp/ff982cf6-88b5-417f-995a-4276615bb37a_buggy.java b/tmp/a667b7b4-d68b-4320-ab01-7108c2c31b50_fixed.java
index d87dd79..2726144 100644
--- a/tmp/ff982cf6-88b5-417f-995a-4276615bb37a_buggy.java
+++ b/tmp/a667b7b4-d68b-4320-ab01-7108c2c31b50_fixed.java
@@ -1,47 +1,76 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+        // Find the end of the first frame ('[...]' structure)
         int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+            // Need to handle potential escape sequence for ']' which is 0x7d 0x03
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+                 // Check if this ']' is preceded by '}' (0x7d)
+                 if (i > buf.readerIndex() && buf.getByte(i - 1) == '}') {
+                     // If preceded by '}', check if the byte before '}' is part of a valid escape for ']'
+                     // However, the escape sequence is "}0x03" -> "]". A standalone ']' marks the end.
+                     // The original code searches for ']' directly. Let's stick to that simple frame boundary.
+                     // If ']' could be escaped, the framing logic would be more complex.
+                     // Assuming ']' always marks the end of a frame.
+                 }
+                 endIndex = i; // Found the index of the ']'
                  break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+        // If no ']' is found, the frame is incomplete
+        if (endIndex == -1) {
+            return null;
+        }
+
+        // We found a frame boundary. Calculate length and slice the buffer.
+        int frameLength = endIndex - buf.readerIndex() + 1;
+        ByteBuf frameData = buf.readSlice(frameLength); // Read frame bytes and advance readerIndex in buf
+
+        // Prepare buffer for the unescaped frame content
+        ByteBuf frame = Unpooled.buffer(frameLength); // Estimate capacity
+
+        // Process the sliced frame data, handling escapes
+        while (frameData.isReadable()) {
+            byte b1 = frameData.readByte();
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // Check if there's a next byte available for the escape code
+                if (!frameData.isReadable()) {
+                    // Malformed frame: '}' at the very end.
+                    // Calculate original position for error message
+                    int originalErrorPos = buf.readerIndex() - frameLength + (frameData.readerIndex() - 1);
+                    throw new IllegalArgumentException(String.format(
+                            "incomplete escape sequence at end of frame: %d", originalErrorPos));
+                }
+                byte b2 = frameData.readByte();
                 switch (b2) {
                     case 0x01:
                         frame.writeByte('}');
                         break;
                     case 0x02:
                         frame.writeByte('[');
                         break;
                     case 0x03:
                         frame.writeByte(']');
                         break;
                     case 0x04:
                         frame.writeByte(',');
                         break;
                     case 0x05:
                         frame.writeByte('*');
                         break;
                     default:
+                        // Calculate original position for error message
+                        int originalErrorPos = buf.readerIndex() - frameLength + (frameData.readerIndex() - 1);
                         throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                "unexpected escape byte at %d: 0x%02x", originalErrorPos, b2));
                 }
             } else {
                 frame.writeByte(b1);
             }
         }
+
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
