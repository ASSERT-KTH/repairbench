diff --git a/tmp/6a7bcc94-71b1-4086-a77a-240b836f2fdb_buggy.java b/tmp/5d11a76d-059f-40c6-926b-173f7421e35a_fixed.java
index d87dd79..6ca4c84 100644
--- a/tmp/6a7bcc94-71b1-4086-a77a-240b836f2fdb_buggy.java
+++ b/tmp/5d11a76d-059f-40c6-926b-173f7421e35a_fixed.java
@@ -1,47 +1,67 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        // Find the first closing bracket ']' starting from the reader index
+        int frameEndIndex = -1; // Index of ']'
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+                frameEndIndex = i;
                 break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
+        // If no closing bracket found, wait for more data
+        if (frameEndIndex == -1) {
+            return null;
+        }
+
+        // We have a potential frame from readerIndex up to frameEndIndex (inclusive).
+        int frameStartIndex = buf.readerIndex();
+        // Estimate size, actual size might be smaller due to escape sequences
+        int initialCapacity = frameEndIndex - frameStartIndex + 1;
+        ByteBuf frame = Unpooled.buffer(initialCapacity);
+
+        // Process bytes up to and including the closing bracket
+        while (buf.readerIndex() <= frameEndIndex) {
             byte b1 = buf.readByte();
             if (b1 == '}') {
-                    byte b2 = buf.readByte();
+                // Check if there's another byte available *within* the frame for the escape sequence
+                if (buf.readerIndex() <= frameEndIndex) {
+                    byte b2 = buf.readByte(); // Read the potential escape code byte
                     switch (b2) {
                         case 0x01:
-                            frame.writeByte('}');
+                            frame.writeByte('}'); // 7d 01 -> 7d
                             break;
                         case 0x02:
-                            frame.writeByte('[');
+                            frame.writeByte('['); // 7d 02 -> 5b
                             break;
                         case 0x03:
-                            frame.writeByte(']');
+                            frame.writeByte(']'); // 7d 03 -> 5d
                             break;
                         case 0x04:
-                            frame.writeByte(',');
+                            frame.writeByte(','); // 7d 04 -> 2c
                             break;
                         case 0x05:
-                            frame.writeByte('*');
+                            frame.writeByte('*'); // 7d 05 -> 2a
                             break;
                         default:
+                            // Invalid escape sequence byte value
                             throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                    "unexpected byte after escape char '}' at %d: 0x%02x", buf.readerIndex() - 1, b2));
                     }
                 } else {
+                    // '}' was the last byte of the frame (the character at frameEndIndex).
+                    // This means it's an incomplete escape sequence.
+                    throw new IllegalArgumentException(String.format(
+                            "incomplete escape sequence at end of frame, index %d", buf.readerIndex() - 1));
+                }
+            } else {
+                // Regular byte, just write it to the frame buffer
                 frame.writeByte(b1);
             }
         }
+
+        // The input buffer's readerIndex is now positioned right after the processed frame.
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
