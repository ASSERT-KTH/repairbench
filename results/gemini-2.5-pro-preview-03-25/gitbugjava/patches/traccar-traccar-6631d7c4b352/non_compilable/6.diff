diff --git a/tmp/ec6677a5-c4f9-46d2-9a18-7cb2f9289ecd_buggy.java b/tmp/cf841fe9-c823-4f47-9862-28a0649318b6_fixed.java
index d87dd79..50e7a11 100644
--- a/tmp/ec6677a5-c4f9-46d2-9a18-7cb2f9289ecd_buggy.java
+++ b/tmp/cf841fe9-c823-4f47-9862-28a0649318b6_fixed.java
@@ -1,47 +1,105 @@
     @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+        // Find the index of the first closing bracket ']' from the current reader index
+        int frameEndIndex = -1;
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+            // Check for the closing bracket, ignore escaped ones (}] == 0x7d 0x03)
             if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+                // Look behind to see if it's an escaped bracket
+                if (i > buf.readerIndex() && buf.getByte(i - 1) == '}') {
+                    // Check if the byte before '}' is the escape code for ']'
+                     if (i > buf.readerIndex() + 1 && buf.getByte(i - 1) == 0x03) {
+                         // This is an escaped ']', continue searching
+                         continue;
+                     }
+                     // Need to be more robust: check the actual escape sequence byte
+                     // Let's stick to the simpler approach first: just find the first ']'
+                     // The escape handling loop will deal with sequences correctly.
+                     // Simpler forward search for ']':
+                     frameEndIndex = i;
+                     break; // Found the first potential closing bracket
+                } else {
+                    // Not preceded by '}', so it's a potential frame end
+                    frameEndIndex = i;
+                    break;
+                }
+            }
+        }
+
+
+        // Find the index of the first closing bracket ']' from the current reader index
+        // Reverting to the simpler search as the escape handling loop does the actual work.
+        frameEndIndex = -1;
+        for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+            if (buf.getByte(i) == ']') {
+                frameEndIndex = i;
                 break;
             }
         }
 
-        if (endIndex > 0) {
-            ByteBuf frame = Unpooled.buffer();
+
+        // If no closing bracket is found, we don't have a complete frame yet
+        if (frameEndIndex == -1) {
+            return null;
+        }
+
+        // Calculate the position *after* the closing bracket
+        int endIndex = frameEndIndex + 1;
+
+        // Optional: Verify if frame starts with '['. Traccar protocols often do.
+        // if (buf.getByte(buf.readerIndex()) != '[') {
+        //     // Handle error: potentially skip bytes until '[' is found or throw exception
+        //     // Assuming valid frame structure based on tests for now.
+        // }
+
+        // Create a buffer for the decoded frame content.
+        // Estimate capacity based on the raw frame length.
+        ByteBuf frame = Unpooled.buffer(endIndex - buf.readerIndex());
+
+        // Process bytes from the readerIndex up to (but not including) endIndex
         while (buf.readerIndex() < endIndex) {
             byte b1 = buf.readByte();
             if (b1 == '}') {
+                // Check if there's another byte available *within this frame* for the escape sequence
+                if (buf.readerIndex() < endIndex) {
                     byte b2 = buf.readByte();
                     switch (b2) {
                         case 0x01:
                             frame.writeByte('}');
                             break;
                         case 0x02:
                             frame.writeByte('[');
                             break;
                         case 0x03:
                             frame.writeByte(']');
                             break;
                         case 0x04:
                             frame.writeByte(',');
                             break;
                         case 0x05:
                             frame.writeByte('*');
                             break;
                         default:
+                            // Invalid byte follows the escape character '}'
                             throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                                    "unexpected byte after escape char '}' at index %d: 0x%02x",
+                                    buf.readerIndex() - 1, b2));
                     }
                 } else {
+                    // The frame ends with '}', which is an incomplete escape sequence.
+                    // This happens if the frame terminates like [...}]
+                    throw new IllegalArgumentException("incomplete escape sequence at end of frame");
+                    // Alternative: Treat '}' literally if that's the protocol specification
+                    // frame.writeByte(b1);
+                }
+            } else {
+                // Not an escape character, write the byte directly
                 frame.writeByte(b1);
             }
         }
+
+        // Return the buffer containing the decoded frame content (including delimiters, with escapes processed)
         return frame;
     }
\ No newline at end of file
-
-        return null;
-    }
