diff --git a/tmp/f5add318-a6c0-4835-bc41-00556176a32f_buggy.java b/tmp/06596fcc-b945-42b2-bdab-bade0affb4c0_fixed.java
index a84de86..3e63b72 100644
--- a/tmp/f5add318-a6c0-4835-bc41-00556176a32f_buggy.java
+++ b/tmp/06596fcc-b945-42b2-bdab-bade0affb4c0_fixed.java
@@ -1,81 +1,94 @@
     private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // checksum
         int index = buf.readUnsignedShortLE();
 
         String id = String.format("%08d%07d", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_INDEX, index);
 
         position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));
 
         while (buf.isReadable()) {
             int type = buf.readUnsignedByte();
             switch (type) {
                 case 0:
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     buf.readUnsignedIntLE(); // event data
 
                     int status = buf.readUnsignedShortLE();
                     position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));
                     position.set(Position.KEY_STATUS, status);
 
                     position.setValid(true);
-                    position.setLatitude(buf.readInt() * 0.00001);
-                    position.setLongitude(buf.readInt() * 0.00001);
+                    position.setLatitude(buf.readIntLE() * 0.00001); // Fix: Use Little Endian read
+                    position.setLongitude(buf.readIntLE() * 0.00001); // Fix: Use Little Endian read
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     position.setCourse(buf.readUnsignedShortLE());
 
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_GPS, buf.readUnsignedByte());
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());
                     position.set("maxAcceleration", buf.readUnsignedShortLE() * 0.001);
                     position.set("maxDeceleration", buf.readUnsignedShortLE() * 0.001);
                     buf.readUnsignedShortLE(); // bearing to landmark
                     buf.readUnsignedIntLE(); // distance to landmark
 
                     position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));
 
                     buf.readUnsignedByte(); // reserved
                     break;
                 case 1:
                     buf.skipBytes(buf.readUnsignedShortLE()); // landmark
                     break;
                 case 4:
                     buf.skipBytes(53); // trip
                     break;
                 case 20:
                     buf.skipBytes(32); // extended
                     break;
                 case 22:
                     buf.readUnsignedByte(); // zone flag
                     buf.skipBytes(buf.readUnsignedShortLE()); // zone name
                     break;
                 case 30:
                     buf.skipBytes(79); // system status
                     break;
                 case 40:
                     buf.skipBytes(40); // analog
                     break;
                 case 50:
                     buf.skipBytes(buf.readUnsignedShortLE()); // console
                     break;
                 case 255:
                     buf.skipBytes(4); // acknowledgement
                     break;
                 default:
+                    // Check if buffer has enough readable bytes before trying to determine the cause.
+                    if (buf.readableBytes() > 0) {
                         throw new IllegalArgumentException(String.format("Unknown type %d", type));
+                    } else {
+                        // If no more readable bytes, it might just be padding or end of message.
+                        // Depending on the protocol specification, this might be acceptable or an error.
+                        // For now, we'll assume it's okay and break the loop.
                     }
+                    break; // Exit the switch
+            }
+        }
+
+        // Return position only if it has valid coordinates, otherwise return null or an incomplete position
+        if (position.getLatitude() == 0 && position.getLongitude() == 0 && !position.getValid()) {
+             return null; // Return null if no valid location data was decoded
         }
 
         return position.getValid() ? position : null;
 
     }
\ No newline at end of file
