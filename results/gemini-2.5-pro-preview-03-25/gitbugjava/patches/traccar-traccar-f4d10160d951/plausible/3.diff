diff --git a/tmp/ee1c13f4-d5d6-4cb8-9f55-cfddf507ebe2_buggy.java b/tmp/91d1b63e-237d-4c07-875a-b806a616b960_fixed.java
index 5501a49..1d05bd1 100644
--- a/tmp/ee1c13f4-d5d6-4cb8-9f55-cfddf507ebe2_buggy.java
+++ b/tmp/91d1b63e-237d-4c07-875a-b806a616b960_fixed.java
@@ -1,177 +1,413 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
-        buf.readUnsignedByte(); // header
-        int flags = buf.readUnsignedByte();
-        buf.readUnsignedShortLE(); // length
+        // Protocol Header (8 bytes minimum)
+        if (buf.readableBytes() < 8) {
+            return null; // Not enough data for header
+        }
+        buf.readUnsignedByte(); // header byte (e.g., 0xab)
+        int flags = buf.readUnsignedByte(); // flags
+        // Length field includes the 'type' byte and all subsequent key-value blocks
+        int length = buf.readUnsignedShortLE();
         buf.readUnsignedShortLE(); // checksum
-        int index = buf.readUnsignedShortLE();
+        int index = buf.readUnsignedShortLE(); // index (sequence/ack number)
+
+        // Check if buffer contains enough data as specified by the length field
+        // The length starts AFTER the 8-byte header
+        if (buf.readableBytes() < length || length <= 0) {
+             return null; // Not enough data or invalid length
+        }
+
+        // Calculate the end index for the message's data section (Type + Key/Value Blocks)
+        // This prevents reading beyond the current message data even if buffer contains more
+        int messageEndIndex = buf.readerIndex() + length;
+
+        // Data Section starts with Type (1 byte)
         int type = buf.readUnsignedByte();
 
+        // Handle response if requested by flags (bit 4)
         if (BitUtil.check(flags, 4)) {
+            // Assuming sendResponse does not interfere with buffer state needed for further decoding
+            // and properly handles the response logic based on index and type.
             sendResponse(channel, remoteAddress, index, type, buf);
         }
 
+        // Process only messages identified as MSG_DATA (assumed value 1)
+        final int MSG_DATA = 1; // Assuming MSG_DATA type identifier is 1
         if (type == MSG_DATA) {
 
             List<Position> positions = new LinkedList<>();
-            Set<Integer> keys = new HashSet<>();
-            boolean hasLocation = false;
-            Position position = new Position(getProtocolName());
+            Set<Integer> keys = new HashSet<>(); // Track keys within the current position message structure
+            boolean hasLocation = false; // Track if the current position being built has location data
+            Position position = new Position(getProtocolName()); // Start with a new position object
 
-            DeviceSession deviceSession = null;
+            DeviceSession deviceSession = null; // Determined by key 0x01 (IMEI)
 
-            while (buf.isReadable()) {
-                int endIndex = buf.readUnsignedByte() + buf.readerIndex();
-                int key = buf.readUnsignedByte();
+            // Loop through Key/Value blocks until the end of the message data section
+            while (buf.readerIndex() < messageEndIndex) {
+                // Each block starts with Length (1 byte) and Key (1 byte)
+                if (buf.readerIndex() + 2 > messageEndIndex) {
+                    // Not enough space left for length and key bytes, indicates truncated message or bad length
+                    break;
+                }
 
+                int lenKeyValue = buf.readUnsignedByte(); // Length of (Key + Value) bytes that follow
+                int blockStartIndex = buf.readerIndex(); // Index before reading key and value
+                int blockEndIndex = blockStartIndex + lenKeyValue; // Expected end index after processing this block
+
+                // Basic validation of block length and indices
+                if (lenKeyValue == 0 || blockEndIndex > messageEndIndex) {
+                     // Invalid block length or block exceeds message boundary, stop processing this message
+                     break;
+                }
+
+                int key = buf.readUnsignedByte(); // Read the key for this block (1 byte)
+                int valueLength = lenKeyValue - 1; // Calculate the length of the value data
+
+                // Handle potential message splitting: If a key repeats, it signifies the start of a new logical position
                 if (keys.contains(key)) {
+                    // Add the previously accumulated position data to the list
+                    if (!keys.isEmpty()) { // Avoid adding empty position if duplicates occur right at the start
                         if (!hasLocation) {
-                        getLastLocation(position, null);
+                            // If the completed position segment lacks GPS, try to fill from history
+                            getLastLocation(position, position.getDeviceTime());
                         }
                         positions.add(position);
+                    }
+                    // Reset for the new position segment
                     keys.clear();
                     hasLocation = false;
                     position = new Position(getProtocolName());
+                    if (deviceSession != null) { // Pre-assign deviceId if already identified from previous segments
+                        position.setDeviceId(deviceSession.getDeviceId());
+                    }
+                }
+                keys.add(key); // Track the key for the current position segment
+
+                // Ensure there's enough data in the buffer for the declared value length before processing the key
+                if (buf.readerIndex() + valueLength > blockEndIndex) {
+                     // Data inconsistency: readable bytes less than declared value length within the block boundary
+                     buf.readerIndex(blockEndIndex); // Skip to end of block to ensure loop continues correctly
+                     continue; // Move to next block
                 }
-                keys.add(key);
 
+                // Process data based on the key
                 switch (key) {
-                    case 0x01:
-                        deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
-
+                    case 0x01: // IMEI / Device Identifier
+                        if (valueLength == 15) {
+                            String imei = buf.readCharSequence(valueLength, StandardCharsets.US_ASCII).toString();
+                            deviceSession = getDeviceSession(channel, remoteAddress, imei);
+                            if (deviceSession != null) {
                                 position.setDeviceId(deviceSession.getDeviceId());
+                            }
+                            // If deviceSession is null here, it means the device is not registered.
+                            // We continue processing the message, but the final check will prevent returning positions.
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x02:
+                    case 0x02: // Alarm / Bark status
+                         // Value can be 4 bytes (alarm code) or 8 bytes (alarm code + timestamp?)
+                         if (valueLength >= 4) {
                              long alarm = buf.readUnsignedIntLE();
                              position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                              if (BitUtil.check(alarm, 31)) {
                                  position.set("bark", true);
                              }
+                             // Skip any remaining bytes in the value field if valueLength > 4
+                             if (valueLength > 4) {
+                                 buf.skipBytes(valueLength - 4);
+                             }
+                         } else {
+                             buf.skipBytes(valueLength); // Skip value for unexpected length
+                         }
                          break;
-                    case 0x14:
+                    case 0x14: // Battery Info
+                        if (valueLength >= 3) { // Need level (1 byte) + voltage (2 bytes)
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
+                             // Skip any remaining bytes if valueLength > 3
+                             if (valueLength > 3) {
+                                 buf.skipBytes(valueLength - 3);
+                             }
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x20:
+                    case 0x20: // GPS Location
+                        final int GPS_MIN_LEN = 16; // lat(4)+lon(4)+speed(2)+course(2)+alt(2)+hdop(2)
+                        final int GPS_FULL_LEN = 21; // GPS_MIN_LEN + odo(4) + sats(1)
+                        if (valueLength >= GPS_MIN_LEN) {
                             hasLocation = true;
                             position.setLatitude(buf.readIntLE() * 0.0000001);
                             position.setLongitude(buf.readIntLE() * 0.0000001);
                             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                             position.setCourse(buf.readUnsignedShortLE());
                             position.setAltitude(buf.readShortLE());
                             int hdop = buf.readUnsignedShortLE();
-                        position.setValid(hdop > 0);
+                            position.setValid(hdop > 0); // Consider validity based on HDOP
                             position.set(Position.KEY_HDOP, hdop * 0.1);
+                            int consumed = GPS_MIN_LEN;
+                            if (valueLength >= GPS_FULL_LEN) { // Check for optional odometer and satellites
                                position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                               consumed = GPS_FULL_LEN;
+                            }
+                            // Skip any remaining unexpected bytes within the GPS block
+                            if (valueLength > consumed) {
+                                buf.skipBytes(valueLength - consumed);
+                            }
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x21:
+                    case 0x21: // Cell Tower Info
+                         if (valueLength >= 3) { // Need mcc(2) + mnc(1) at minimum
                              int mcc = buf.readUnsignedShortLE();
                              int mnc = buf.readUnsignedByte();
                              if (position.getNetwork() == null) {
                                  position.setNetwork(new Network());
                              }
-                        while (buf.readerIndex() < endIndex) {
+                             int consumedCell = 3;
+                             // Loop reading cell tower data as long as there are enough bytes for a full entry
+                             while (consumedCell + 5 <= valueLength && buf.readerIndex() + 5 <= blockEndIndex) { // Cell: rssi(1)+lac(2)+cid(2)=5
                                  int rssi = buf.readByte();
-                            position.getNetwork().addCellTower(CellTower.from(
-                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
+                                 int lac = buf.readUnsignedShortLE();
+                                 int cid = buf.readUnsignedShortLE();
+                                 position.getNetwork().addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+                                 consumedCell += 5;
+                             }
+                             // Skip any remaining unexpected bytes within the cell block
+                             if (buf.readerIndex() < blockEndIndex) {
+                                 buf.skipBytes(blockEndIndex - buf.readerIndex());
+                             }
+                         } else {
+                              buf.skipBytes(valueLength); // Skip value for unexpected length
                          }
                         break;
-                    case 0x22:
+                    case 0x22: // WiFi AP Info
                         if (position.getNetwork() == null) {
                             position.setNetwork(new Network());
                         }
-                        while (buf.readerIndex() < endIndex) {
+                        int consumedWifi = 0;
+                        // Loop reading WiFi AP data as long as there are enough bytes for a full entry
+                        while (consumedWifi + 7 <= valueLength && buf.readerIndex() + 7 <= blockEndIndex) { // AP: rssi(1)+mac(6)=7
                             int rssi = buf.readByte();
-                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
-                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
-                                    mac.substring(0, mac.length() - 1), rssi));
+                            // Read MAC safely using slice
+                            String mac = ByteBufUtil.hexDump(buf.slice(buf.readerIndex(), 6)).replaceAll("(..)", "$1:");
+                            buf.skipBytes(6); // Advance buffer index
+                            mac = mac.substring(0, mac.length() - 1); // Remove trailing ':'
+                            position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(mac, rssi));
+                            consumedWifi += 7;
+                        }
+                         // Skip any remaining unexpected bytes within the WiFi block
+                         if (buf.readerIndex() < blockEndIndex) {
+                             buf.skipBytes(blockEndIndex - buf.readerIndex());
                          }
                         break;
-                    case 0x23:
+                    case 0x23: // Tag Location? (Assuming Tag ID + Lat/Lon)
+                        // Assuming readTagId function reads 6 bytes (verify this assumption)
+                        final int TAG_ID_LEN_23 = 6;
+                        final int TAG_LOC_LEN = TAG_ID_LEN_23 + 4 + 4; // tagId(6) + lat(4) + lon(4) = 14
+                        if (valueLength >= TAG_LOC_LEN) {
+                            // Assuming readTagId is available and reads TAG_ID_LEN_23 bytes
                             position.set("tagId", readTagId(buf));
                             position.setLatitude(buf.readIntLE() * 0.0000001);
                             position.setLongitude(buf.readIntLE() * 0.0000001);
-                        position.setValid(true);
+                            position.setValid(true); // Tag location implies validity?
                             hasLocation = true;
+                            // Skip remaining bytes if valueLength > TAG_LOC_LEN
+                            if (valueLength > TAG_LOC_LEN) {
+                                buf.skipBytes(valueLength - TAG_LOC_LEN);
+                            }
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x24:
-                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
+                    case 0x24: // Time and Status
+                        if (valueLength == 8) { // time(4) + status(4) = 8
+                            // This time is likely the device's internal timestamp for the event
+                            position.setTime(new Date(buf.readUnsignedIntLE() * 1000)); // Sets deviceTime
                             long status = buf.readUnsignedIntLE();
-                        position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
+                            // Extract battery level from status bits 24-31 (0-indexed) assuming 8 bits
+                            position.set(Position.KEY_BATTERY_LEVEL, (int) BitUtil.between(status, 24, 32));
                             position.set(Position.KEY_STATUS, status);
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x28:
+                    case 0x28: // Beacon Info
+                         // Assuming readTagId function reads 6 bytes
+                         final int TAG_ID_LEN_28 = 6;
+                         final int BEACON_MIN_LEN = 1 + TAG_ID_LEN_28 + 1 + 1; // flags(1)+tagId(6)+rssi(1)+1mRssi(1) = 9
+                         if (valueLength >= BEACON_MIN_LEN) {
                              int beaconFlags = buf.readUnsignedByte();
-                        position.set("tagId", readTagId(buf));
+                             position.set("tagId", readTagId(buf)); // Assumes readTagId reads TAG_ID_LEN_28 bytes
                              position.set("tagRssi", (int) buf.readByte());
                              position.set("tag1mRssi", (int) buf.readByte());
-                        if (BitUtil.check(beaconFlags, 7)) {
+                             int consumedBeacon = BEACON_MIN_LEN;
+                             // Check for optional location data embedded in beacon message
+                             if (BitUtil.check(beaconFlags, 7)) { // Location present flag
+                                 final int BEACON_LOC_LEN = 4 + 4; // lat(4) + lon(4) = 8
+                                 if (valueLength >= consumedBeacon + BEACON_LOC_LEN && buf.readerIndex() + BEACON_LOC_LEN <= blockEndIndex) {
                                      position.setLatitude(buf.readIntLE() * 0.0000001);
                                      position.setLongitude(buf.readIntLE() * 0.0000001);
-                            position.setValid(true);
+                                     position.setValid(true); // Beacon location implies validity?
                                      hasLocation = true;
+                                     consumedBeacon += BEACON_LOC_LEN;
+                                 } else {
+                                     // Flag indicates location, but data is missing or short. Skip rest of block.
+                                      buf.readerIndex(blockEndIndex);
+                                      continue;
                                  }
-                        if (BitUtil.check(beaconFlags, 6)) {
+                             }
+                             // Check for optional description
+                             if (BitUtil.check(beaconFlags, 6)) { // Description present flag
+                                 int descriptionLength = valueLength - consumedBeacon;
+                                 if (descriptionLength > 0 && buf.readerIndex() + descriptionLength <= blockEndIndex) {
                                      position.set("description", buf.readCharSequence(
-                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
+                                             descriptionLength, StandardCharsets.US_ASCII).toString());
+                                     consumedBeacon += descriptionLength;
+                                 } else {
+                                      // Flag indicates description, but data is missing or short. Skip rest of block.
+                                     buf.readerIndex(blockEndIndex);
+                                     continue;
+                                 }
+                             }
+                             // Skip any remaining unexpected bytes at the end of the beacon block
+                             if (buf.readerIndex() < blockEndIndex) {
+                                 buf.skipBytes(blockEndIndex - buf.readerIndex());
+                             }
+                         } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
                          }
                         break;
-                    case 0x2A:
-                        buf.readUnsignedByte(); // flags
-                        buf.skipBytes(6); // mac
-                        buf.readUnsignedByte(); // rssi
+                    case 0x2A: // WiFi Location? (Location derived from WiFi scan by device/server?)
+                        final int WIFI_LOC_LEN = 1 + 6 + 1 + 4 + 4; // flags(1)+mac(6)+rssi(1)+lat(4)+lon(4) = 16
+                        if (valueLength >= WIFI_LOC_LEN) {
+                            buf.readUnsignedByte(); // flags (purpose unknown)
+                            buf.skipBytes(6); // mac address of AP used for location? (not stored directly on position)
+                            buf.readUnsignedByte(); // rssi of that AP? (not stored directly on position)
                             position.setLatitude(buf.readIntLE() * 0.0000001);
                             position.setLongitude(buf.readIntLE() * 0.0000001);
-                        position.setValid(true);
+                            position.setValid(true); // WiFi location implies validity?
                             hasLocation = true;
+                            // Skip remaining bytes if valueLength > WIFI_LOC_LEN
+                            if (valueLength > WIFI_LOC_LEN) {
+                                buf.skipBytes(valueLength - WIFI_LOC_LEN);
+                            }
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
-                    case 0x30:
-                        buf.readUnsignedIntLE(); // timestamp
+                    case 0x30: // Steps Counter
+                        if (valueLength == 8) { // timestamp(4) + steps(4) = 8
+                            buf.readUnsignedIntLE(); // Read and ignore timestamp (use main position time)
                             position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
+                        break;
+                    case 0x31: // Activity Data (Multiple entries possible)
+                        int activityIndex = 1;
+                        int consumedActivity = 0;
+                        final int ACTIVITY_ENTRY_LEN = 4 + 4; // time(4) + activity(4) = 8
+                        // Loop reading activity entries as long as there are enough bytes for a full entry
+                        while (consumedActivity + ACTIVITY_ENTRY_LEN <= valueLength && buf.readerIndex() + ACTIVITY_ENTRY_LEN <= blockEndIndex) {
+                            position.set("activity" + activityIndex + "Time", buf.readUnsignedIntLE());
+                            position.set("activity" + activityIndex, buf.readUnsignedIntLE());
+                            activityIndex += 1;
+                            consumedActivity += ACTIVITY_ENTRY_LEN;
+                        }
+                         // Skip any remaining unexpected bytes within the activity block
+                         if (buf.readerIndex() < blockEndIndex) {
+                             buf.skipBytes(blockEndIndex - buf.readerIndex());
+                         }
                         break;
-                    case 0x31:
-                        int i = 1;
-                        while (buf.readerIndex() < endIndex) {
-                            position.set("activity" + i + "Time", buf.readUnsignedIntLE());
-                            position.set("activity" + i, buf.readUnsignedIntLE());
-                            i += 1;
+                    case 0x37: // Bark count (FIXED)
+                        if (valueLength == 8) { // timestamp(4) + count(4) = 8
+                            buf.readUnsignedIntLE(); // Read and ignore timestamp (use main position time)
+                            // Read count as unsigned int, store as Long (implicit conversion ok)
+                            position.set("barkCount", buf.readUnsignedIntLE());
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
                         }
                         break;
-                    case 0x40:
-                        buf.readUnsignedIntLE(); // timestamp
+                    case 0x40: // Heart Rate
+                        if (valueLength == 5) { // timestamp(4) + heartRate(1) = 5
+                            buf.readUnsignedIntLE(); // Read and ignore timestamp (use main position time)
                             int heartRate = buf.readUnsignedByte();
+                            // Original logic used > 1 threshold - keep unless protocol spec says otherwise
                             if (heartRate > 1) {
                                 position.set(Position.KEY_HEART_RATE, heartRate);
                             }
+                        } else {
+                            buf.skipBytes(valueLength); // Skip value for unexpected length
+                        }
                         break;
                     default:
+                        // Unknown key: skip the value bytes safely to continue processing the rest of the message
+                        buf.skipBytes(valueLength);
                         break;
+                } // End switch(key)
+
+                // Robustness check: Ensure reader index is correctly positioned at the end of the block,
+                // even if the switch case logic had issues or didn't consume all declared bytes.
+                if (buf.readerIndex() != blockEndIndex) {
+                   // Log potential inconsistency? e.g., WARN("Data read mismatch for key " + key);
+                   buf.readerIndex(blockEndIndex); // Force skip to the calculated end of the block
                 }
-                buf.readerIndex(endIndex);
-            }
 
+            } // End while loop through blocks
+
+            // Add the last processed position object if it contains any keys/data
+            if (!keys.isEmpty()) {
                 if (!hasLocation) {
-                getLastLocation(position, null);
+                    // Attempt to set location from history if the last segment didn't have one
+                    getLastLocation(position, position.getDeviceTime());
                 }
                 positions.add(position);
+            }
 
-            if (deviceSession != null) {
+            // Final checks and return logic
+            if (positions.isEmpty()) {
+                return null; // No valid position data segments were decoded
+            }
+
+            // If deviceSession is still null after processing all blocks (e.g., no key 0x01 seen, or IMEI unknown),
+            // we cannot associate these positions with a device.
+            if (deviceSession == null) {
+                 // Log potentially missing IMEI or unknown device?
+                 return null;
+            }
+
+            // Ensure all decoded positions have the correct device ID and a valid timestamp
+            long deviceId = deviceSession.getDeviceId();
             for (Position p : positions) {
-                    p.setDeviceId(deviceSession.getDeviceId());
+                // Set device ID if it wasn't set earlier (e.g., data before key 0x01)
+                if (p.getDeviceId() == 0) {
+                    p.setDeviceId(deviceId);
+                }
+
+                // Use device time (from status message 0x24) as fix time if GPS time (from 0x20) is missing.
+                // This assumes deviceTime represents the fix time when GPS data isn't available.
+                if (p.getFixTime() == null) {
+                     p.setFixTime(p.getDeviceTime());
+                     // If both GPS time (setFixTime) and device status time (setDeviceTime) are null,
+                     // fallback to server time as the last resort.
+                     if (p.getFixTime() == null) {
+                         p.setTime(new Date()); // Sets both fixTime and deviceTime
+                     }
                 }
-            } else {
-                return null;
             }
 
-            return positions;
+            return positions; // Return the list of decoded positions
 
-        }
+        } // End if (type == MSG_DATA)
 
+        // Return null if message type is not MSG_DATA or other issues occurred (e.g., bad length, header too short)
         return null;
     }
\ No newline at end of file
