diff --git a/tmp/273f2205-6a4f-4577-bf3a-a35d60b94b71_buggy.java b/tmp/53c51c96-f652-4e8e-b5a7-c3a1a69e9af3_fixed.java
index 5501a49..d63b121 100644
--- a/tmp/273f2205-6a4f-4577-bf3a-a35d60b94b71_buggy.java
+++ b/tmp/53c51c96-f652-4e8e-b5a7-c3a1a69e9af3_fixed.java
@@ -1,177 +1,262 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // header
         int flags = buf.readUnsignedByte();
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // checksum
         int index = buf.readUnsignedShortLE();
         int type = buf.readUnsignedByte();
 
         if (BitUtil.check(flags, 4)) {
             sendResponse(channel, remoteAddress, index, type, buf);
         }
 
         if (type == MSG_DATA) {
 
             List<Position> positions = new LinkedList<>();
             Set<Integer> keys = new HashSet<>();
             boolean hasLocation = false;
             Position position = new Position(getProtocolName());
 
             DeviceSession deviceSession = null;
 
-            while (buf.isReadable()) {
-                int endIndex = buf.readUnsignedByte() + buf.readerIndex();
+            // Need at least length (1) and key (1) bytes to process a block
+            while (buf.isReadable() && buf.readableBytes() > 1) {
+                int dataBlockLength = buf.readUnsignedByte(); // length of block (key + data)
+                if (dataBlockLength == 0 || dataBlockLength > buf.readableBytes()) {
+                    // Invalid length (zero or exceeds remaining buffer), stop processing
+                    break;
+                }
+                // endIndex points *after* the key + data for this block
+                int endIndex = buf.readerIndex() + dataBlockLength;
                 int key = buf.readUnsignedByte();
 
                 if (keys.contains(key)) {
-                    if (!hasLocation) {
-                        getLastLocation(position, null);
+                    // Only add previous position if it has some data (location or time or deviceId)
+                    if (position.getFixTime() != null || hasLocation || position.getDeviceId() > 0) {
+                        if (!hasLocation && position.getDeviceId() > 0) { // Only get last location if needed and possible
+                            getLastLocation(position, position.getFixTime()); // Use current position time if available
                         }
                         positions.add(position);
+                    }
+                    // Start new position
                     keys.clear();
                     hasLocation = false;
                     position = new Position(getProtocolName());
+                    if (deviceSession != null) { // Carry over device id if known
+                        position.setDeviceId(deviceSession.getDeviceId());
+                    }
                 }
                 keys.add(key);
 
+                // Calculate available data length for the current key
+                int dataLength = endIndex - buf.readerIndex();
+
                 switch (key) {
-                    case 0x01:
-                        deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
-
+                    case 0x01: // IMEI
+                        if (dataLength == 15) { // IMEI is 15 bytes
+                            String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
+                            deviceSession = getDeviceSession(channel, remoteAddress, imei);
+                            if (deviceSession != null) {
                                 position.setDeviceId(deviceSession.getDeviceId());
+                            }
+                        }
                         break;
-                    case 0x02:
+                    case 0x02: // Alarm
+                        if (dataLength >= 4) { // Need at least 4 bytes for alarm
                             long alarm = buf.readUnsignedIntLE();
                             position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                             if (BitUtil.check(alarm, 31)) {
                                 position.set("bark", true);
                             }
+                        }
                         break;
-                    case 0x14:
+                    case 0x14: // Battery
+                        if (dataLength >= 3) { // 1 byte level + 2 bytes voltage
                            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                            position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
+                        }
                         break;
-                    case 0x20:
-                        hasLocation = true;
+                    case 0x20: // Location basic
+                        // lat(4)+lon(4)+speed(2)+course(2)+alt(2)+hdop(2)+odom(4)+sats(1) = 23 bytes
+                        if (dataLength >= 23) {
                             position.setLatitude(buf.readIntLE() * 0.0000001);
                             position.setLongitude(buf.readIntLE() * 0.0000001);
                             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                             position.setCourse(buf.readUnsignedShortLE());
                             position.setAltitude(buf.readShortLE());
                             int hdop = buf.readUnsignedShortLE();
                             position.setValid(hdop > 0);
                             position.set(Position.KEY_HDOP, hdop * 0.1);
                             position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                             position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                            hasLocation = true; // Set hasLocation only if data is read successfully
+                        }
                         break;
-                    case 0x21:
+                    case 0x21: // Cell towers
+                        if (dataLength >= 3) { // MCC (2) + MNC (1)
                             int mcc = buf.readUnsignedShortLE();
                             int mnc = buf.readUnsignedByte();
                             if (position.getNetwork() == null) {
                                 position.setNetwork(new Network());
                             }
-                        while (buf.readerIndex() < endIndex) {
+                            // bytes per tower = 1 (RSSI) + 2 (LAC) + 2 (CID) = 5
+                            while (endIndex - buf.readerIndex() >= 5) {
                                 int rssi = buf.readByte();
-                            position.getNetwork().addCellTower(CellTower.from(
-                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
+                                int lac = buf.readUnsignedShortLE();
+                                int cid = buf.readUnsignedShortLE();
+                                position.getNetwork().addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+                            }
                         }
                         break;
-                    case 0x22:
+                    case 0x22: // Wifi APs
+                         // bytes per AP = 1 (RSSI) + 6 (MAC) = 7
+                        if (dataLength >= 7) {
                              if (position.getNetwork() == null) {
                                  position.setNetwork(new Network());
                              }
-                        while (buf.readerIndex() < endIndex) {
+                             while (endIndex - buf.readerIndex() >= 7) {
                                  int rssi = buf.readByte();
                                  String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                                  position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
                                          mac.substring(0, mac.length() - 1), rssi));
                              }
+                        }
                         break;
-                    case 0x23:
+                    case 0x23: // Tag location
+                         if (dataLength >= 14) { // 6 (Tag ID) + 4 (Lat) + 4 (Lon) = 14 bytes
                              position.set("tagId", readTagId(buf));
                              position.setLatitude(buf.readIntLE() * 0.0000001);
                              position.setLongitude(buf.readIntLE() * 0.0000001);
                              position.setValid(true);
                              hasLocation = true;
+                         }
                          break;
-                    case 0x24:
+                    case 0x24: // Time and status
+                         if (dataLength >= 8) { // 4 (Time) + 4 (Status) = 8 bytes
                              position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                              long status = buf.readUnsignedIntLE();
                              position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
                              position.set(Position.KEY_STATUS, status);
+                         }
                          break;
-                    case 0x28:
+                    case 0x28: // Beacon info
+                        if (dataLength >= 9) { // 1 (Flags) + 6 (Tag ID) + 1 (RSSI) + 1 (1m RSSI) = 9 bytes minimum
                             int beaconFlags = buf.readUnsignedByte();
                             position.set("tagId", readTagId(buf));
                             position.set("tagRssi", (int) buf.readByte());
                             position.set("tag1mRssi", (int) buf.readByte());
                             if (BitUtil.check(beaconFlags, 7)) {
+                                // Check if lat/lon data exists (8 bytes)
+                                if (endIndex - buf.readerIndex() >= 8) {
                                     position.setLatitude(buf.readIntLE() * 0.0000001);
                                     position.setLongitude(buf.readIntLE() * 0.0000001);
                                     position.setValid(true);
                                     hasLocation = true;
                                 }
+                            }
                             if (BitUtil.check(beaconFlags, 6)) {
+                                // Read description if it exists
+                                int descriptionLength = endIndex - buf.readerIndex();
+                                if (descriptionLength > 0) {
                                     position.set("description", buf.readCharSequence(
-                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
+                                            descriptionLength, StandardCharsets.US_ASCII).toString());
+                                }
+                            }
                         }
                         break;
-                    case 0x2A:
+                    case 0x2A: // Wifi location
+                         // 1 (Flags) + 6 (MAC) + 1 (RSSI) + 4 (Lat) + 4 (Lon) = 16 bytes
+                         if (dataLength >= 16) {
                              buf.readUnsignedByte(); // flags
                              buf.skipBytes(6); // mac
                              buf.readUnsignedByte(); // rssi
                              position.setLatitude(buf.readIntLE() * 0.0000001);
                              position.setLongitude(buf.readIntLE() * 0.0000001);
                              position.setValid(true);
                              hasLocation = true;
+                         }
                          break;
-                    case 0x30:
+                    case 0x30: // Steps
+                        if (dataLength >= 8) { // 4 (Timestamp) + 4 (Steps) = 8 bytes
                            buf.readUnsignedIntLE(); // timestamp
                            position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
+                        }
                         break;
-                    case 0x31:
+                    case 0x31: // Activity
+                        // bytes per entry = 4 (Time) + 4 (Activity) = 8
+                        if (dataLength >= 8) {
                            int i = 1;
-                        while (buf.readerIndex() < endIndex) {
+                           while (endIndex - buf.readerIndex() >= 8) {
                                position.set("activity" + i + "Time", buf.readUnsignedIntLE());
                                position.set("activity" + i, buf.readUnsignedIntLE());
                                i += 1;
                            }
+                        }
                         break;
-                    case 0x40:
+                    case 0x37: // Bark count
+                        // Assumed format: 4 unknown bytes + 4 bytes bark count LE
+                        // Total data length must be 8 bytes.
+                        if (dataLength >= 8) {
+                            // Move reader index to the start of the 4-byte count (last 4 bytes)
+                            buf.readerIndex(endIndex - 4);
+                            position.set("barkCount", buf.readUnsignedIntLE());
+                        }
+                        break;
+                    case 0x40: // Heart rate
+                         if (dataLength >= 5) { // 4 (Timestamp) + 1 (Heart Rate) = 5 bytes
                             buf.readUnsignedIntLE(); // timestamp
                             int heartRate = buf.readUnsignedByte();
                             if (heartRate > 1) {
                                 position.set(Position.KEY_HEART_RATE, heartRate);
                             }
+                         }
                          break;
                     default:
+                        // Unknown key, data will be skipped by setting reader index below
                         break;
                 }
+                // Ensure reader index is set to the end of the current block,
+                // skipping any unread data within the block.
                 buf.readerIndex(endIndex);
             }
 
-            if (!hasLocation) {
-                getLastLocation(position, null);
+            // Add the last processed position if it has potentially useful data
+            if (position.getFixTime() != null || hasLocation || position.getDeviceId() > 0 || !position.getAttributes().isEmpty()) {
+                 if (!hasLocation && position.getDeviceId() > 0) {
+                     getLastLocation(position, position.getFixTime()); // Use current position time if available
                  }
                  positions.add(position);
+            }
+
+            if (deviceSession == null && !positions.isEmpty()) {
+                 // If IMEI wasn't received (key 0x01) or failed to create session,
+                 // try to get session from channel context (might exist from previous messages)
+                 deviceSession = getDeviceSession(channel, remoteAddress);
+            }
 
             if (deviceSession != null) {
+                 // Ensure all valid positions have the device ID
                  for (Position p : positions) {
+                      if (p.getDeviceId() == 0) {
                            p.setDeviceId(deviceSession.getDeviceId());
                       }
+                 }
+                 // Remove positions that still couldn't be assigned a deviceId
+                 positions.removeIf(p -> p.getDeviceId() == 0);
+
+                 return positions.isEmpty() ? null : positions;
+
             } else {
+                 // If we couldn't associate positions with a device, return null
+                 // This prevents returning positions with deviceId = 0
                  return null;
             }
-
-            return positions;
-
         }
 
         return null;
     }
\ No newline at end of file
