diff --git a/tmp/abbf9fc8-b1c7-4511-be1c-89314f31c778_buggy.java b/tmp/b550e68b-94fd-4bee-83b9-3be60bb0276f_fixed.java
index 47a8941..90751b7 100644
--- a/tmp/abbf9fc8-b1c7-4511-be1c-89314f31c778_buggy.java
+++ b/tmp/b550e68b-94fd-4bee-83b9-3be60bb0276f_fixed.java
@@ -1,53 +1,73 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+
+		// 1. Remove the class from its original parent container's list of inner classes.
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses.remove(clazz.name()) == null) {
+			// This might happen if the internal structure has changed or if the assumptions are wrong.
+			// Log a warning, but proceed as the main goal is adding it to the grandparent.
+			writeSummary("\tWarning: Class " + clazz.fullName() + " not found in parent " + parent.fullName() + "'s classes map during move.");
+		}
+
+		// Allows to track class name collisions in the grandparent:
+		Map<String, JDefinedClass> grandParentClasses; // Renamed for clarity
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// 2. Determine grandparent type and get its classes map.
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			// Update schema component information if needed
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					// Asserting this helps catch unexpected schema structures.
+					if (sc instanceof XSDeclaration) {
+						assert ((XSDeclaration) sc).isLocal() : "Expected schema component for inner class to be local: " + sc;
+						// Mark the schema component as not anonymous anymore since it's moved up.
 						setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+					} else {
+						writeSummary("\tWarning: Schema component for " + clazz.fullName() + " is not an XSDeclaration: " + (sc != null ? sc.getClass().getName() : "null"));
+					}
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// 3. Check for name collisions in the grandparent container and rename if necessary.
+		String originalName = clazz.name();
+		String finalName = originalName;
+		if (grandParentClasses.containsKey(originalName)) {
+			finalName = parent.name() + originalName; // Use parent's name as prefix
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + finalName + " due to collision in " + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));
+			setPrivateField(clazz, "name", finalName);
 		}
 
-		classes.put(clazz.name(), clazz);
+		// 4. Add the class (with its final name) to the grandparent's map.
+		grandParentClasses.put(finalName, clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// 5. Finally modify the class so that it refers back the container (grandparent).
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
