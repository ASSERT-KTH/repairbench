diff --git a/tmp/f5550e28-7354-4237-aade-0c81e3aece01_buggy.java b/tmp/4a9d9abd-1dde-48cf-9239-06df649147b5_fixed.java
index 47a8941..d43e6b9 100644
--- a/tmp/f5550e28-7354-4237-aade-0c81e3aece01_buggy.java
+++ b/tmp/4a9d9abd-1dde-48cf-9239-06df649147b5_fixed.java
@@ -1,53 +1,89 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+		String originalName = clazz.name(); // Store the original name
+
+		writeSummary("\tAttempting to move inner class " + clazz.fullName() + " one level up.");
+
+		// *** Fix: Remove the class from its original parent container first ***
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses != null) {
+			if (parentClasses.remove(originalName) == null) {
+				// Log a warning if the class wasn't found under the expected name, though processing continues.
+				writeSummary("\tWarning: Class " + originalName + " not found in parent " + parent.fullName() + "'s map during removal.");
+			} else {
+				writeSummary("\tRemoved " + originalName + " from parent class " + parent.fullName());
+			}
+		} else {
+			// Log a warning if the parent's classes map couldn't be accessed.
+			writeSummary("\tWarning: Could not retrieve classes map from parent " + parent.fullName());
+		}
+
+		// Allows to track class name collisions in the grandparent:
+		Map<String, JDefinedClass> grandParentClasses;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
 		}
-		else {
+		else { // Grandparent is a package
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			writeSummary("\tResetting static modifier for " + clazz.name());
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					// FIXME: Inner class is always a local declaration. This assumption might be fragile.
+					if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
+						writeSummary("\tUpdating schema component for " + clazz.name() + " (setting anonymous=false)");
 						setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+					} else {
+						writeSummary("\tWarning: Schema component for " + clazz.name() + " is not a local XSDeclaration as expected.");
+						// Keep assertion for development/debugging if needed, but handle gracefully otherwise
+						assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) : "Expected local XSDeclaration for inner class";
+					}
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// Ensure we could get the grandparent's classes map
+		if (grandParentClasses == null) {
+			 throw new IllegalStateException("Could not retrieve classes map from grandparent: " + grandParent.toString());
 		}
 
-		classes.put(clazz.name(), clazz);
+
+		// Check for name collisions in the grandparent container
+		String finalName = originalName;
+		if (grandParentClasses.containsKey(originalName)) {
+			finalName = parent.name() + originalName; // Prepend original parent's name
+			writeSummary("\tRenaming class " + originalName + " to " + finalName + " due to collision in grandparent.");
+			setPrivateField(clazz, "name", finalName);
+		}
+
+		// Add the class (with its final name) to the grandparent's map
+		grandParentClasses.put(clazz.name(), clazz);
+		writeSummary("\tAdded class " + clazz.name() + " to grandparent " + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));
+
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
+		writeSummary("\tUpdated outer reference for class " + clazz.name() + " to point to grandparent.");
 	}
\ No newline at end of file
