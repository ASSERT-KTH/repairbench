diff --git a/tmp/d2536a49-e6b8-44f9-be6d-f8160563232b_buggy.java b/tmp/d93ca03e-0b11-435e-9472-90159e060189_fixed.java
index 47a8941..7807542 100644
--- a/tmp/d2536a49-e6b8-44f9-be6d-f8160563232b_buggy.java
+++ b/tmp/d93ca03e-0b11-435e-9472-90159e060189_fixed.java
@@ -1,53 +1,82 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+		Map<String, JDefinedClass> grandParentClasses;
+        // Get the original parent's classes map to remove the inner class from it
+        Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+        String originalName = clazz.name(); // Store original name before potential rename
+
+		// Remove the class from its original parent first. Use the original name.
+        if (parentClasses != null) {
+            if (parentClasses.remove(originalName) == null) {
+                // This might happen if the class wasn't actually in the parent's map, log a warning.
+                System.err.println("Warning: Class " + originalName + " not found in parent " + parent.fullName() + " classes map during move.");
+            }
+        } else {
+             // Log or handle error: could not get parent classes map
+             System.err.println("Warning: Could not retrieve classes map from parent: " + parent.fullName());
+        }
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
 		}
-		else {
+		else { // grandParent is JPackage
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+            // Only remove static if it was actually present
+            if ((clazz.mods().getValue() & JMod.STATIC) != 0) {
 			    setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+            }
 
+			// Also, update the schema component information if moving to a package
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                    // Check if sc is not null and is an instance of XSDeclaration before casting and accessing methods
+                    // Inner class related schema components are often local declarations.
+					if (sc instanceof XSDeclaration) {
+                        XSDeclaration decl = (XSDeclaration) sc;
+                        // Update the anonymous flag only if it was considered local.
+                        // Moving it to package scope makes it non-local/non-anonymous conceptually.
+                        if (decl.isLocal()) {
 					        setPrivateField(sc, "anonymous", Boolean.FALSE);
-
-					break;
+                        }
+                    }
+					break; // Found the corresponding ClassOutline, no need to continue loop
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// Check for name collision in the new container (grandparent)
+        // Use current name for checking collision, as it might have been implicitly changed?? No, should be originalName check?
+        // Let's stick to checking clazz.name() as the original code did.
+		if (grandParentClasses.containsKey(clazz.name())) {
+            // Use the original parent's name as prefix to avoid collision
+			String newName = parent.name() + clazz.name();
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+			setPrivateField(clazz, "name", newName);
 		}
 
-		classes.put(clazz.name(), clazz);
+        // Add the class to the new container (grandparent) using its potentially updated name
+		grandParentClasses.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
