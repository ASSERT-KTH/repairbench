diff --git a/tmp/c467f15c-a203-4ded-bc8e-ab3337ea712b_buggy.java b/tmp/9af7b859-d1fe-44f1-8e9c-1a52ee491785_fixed.java
index 47a8941..c989420 100644
--- a/tmp/c467f15c-a203-4ded-bc8e-ab3337ea712b_buggy.java
+++ b/tmp/9af7b859-d1fe-44f1-8e9c-1a52ee491785_fixed.java
@@ -1,53 +1,84 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+		Map<String, JDefinedClass> grandParentClasses;
+		// Get parent's classes map to remove the class later
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		String originalName = clazz.name(); // Store original name for removal
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+			// A class moved to package level becomes a top-level class. Remove static modifier.
+			JMods mods = clazz.mods();
+			setPrivateField(mods, "mods", Integer.valueOf(mods.getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
-					break;
+					// FIXME: Inner class is always a local declaration? Re-evaluating assumption.
+					// Check type before accessing potentially specific methods/fields
+					if (sc instanceof XSDeclaration) {
+					    XSDeclaration decl = (XSDeclaration) sc;
+					    // Modification related to schema representation, might need adjustment based on JAXB internals.
+					    // Assuming setting 'anonymous' to FALSE is required when moving to top level.
+                        // Original code asserted decl.isLocal(), which might be too strong.
+                        // Let's tentatively keep the modification but be aware it's fragile.
+					    setPrivateField(decl, "anonymous", Boolean.FALSE);
+					}
+					break; // Found the corresponding outline
+				}
 			}
 		}
+
+		// Handle potential name collision in the new container (grandparent)
+		String finalName = originalName;
+		if (grandParentClasses != null && grandParentClasses.containsKey(originalName)) {
+			finalName = parent.name() + originalName; // Prepend parent name for uniqueness
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + finalName);
+			setPrivateField(clazz, "name", finalName);
+		}
+
+		// Add the class to the new container (grandparent)
+		if (grandParentClasses != null) {
+			grandParentClasses.put(finalName, clazz);
+		} else {
+            // Log or handle error: could not get grandparent's classes map
+            writeSummary("\tError: Could not retrieve grandparent's class map to add " + finalName);
+            // Depending on desired behavior, might throw an exception or return here.
         }
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+
+		// *** FIX START: Remove the class from the original parent container ***
+		if (parentClasses != null) {
+			parentClasses.remove(originalName); // Use original name for removal
+		} else {
+			// Log or handle error: could not get parent's classes map
+			writeSummary("\tWarning: Could not retrieve parent's class map to remove " + originalName);
 		}
+		// *** FIX END ***
 
-		classes.put(clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
