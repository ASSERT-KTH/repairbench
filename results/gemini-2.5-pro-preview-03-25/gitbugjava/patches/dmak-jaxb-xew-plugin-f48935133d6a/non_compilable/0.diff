diff --git a/tmp/535a242d-a274-421c-8ac9-c0c7ed9697dc_buggy.java b/tmp/637b420f-2f9a-4b29-b124-0888407dfffc_fixed.java
index 47a8941..d1d2fd7 100644
--- a/tmp/535a242d-a274-421c-8ac9-c0c7ed9697dc_buggy.java
+++ b/tmp/637b420f-2f9a-4b29-b124-0888407dfffc_fixed.java
@@ -1,53 +1,77 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// Get parent and grandparent
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+
+		// 1. Remove class from its original parent container
+		// Use the original name before any potential renaming
+		String originalName = clazz.name();
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses.remove(originalName) == null) {
+			// This might happen if the class was already moved or structure is unexpected
+			writeSummary("\tWarning: Class " + clazz.fullName() + " not found in its original parent " + parent.fullName() + " during move operation.");
+			// Depending on exact semantics, might want to log more details or even throw
+		}
+
+		// Allows to track class name collisions in the grandparent:
+		Map<String, JDefinedClass> grandParentClasses;
+		String finalName = originalName; // The name to use in the grandparent container
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+			// Grandparent is a class
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
 		}
 		else {
+			// Grandparent is a package
 			JPackage grandParentPackage = (JPackage) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Moving to package makes it a top-level class (or effectively static nested within package scope).
+			// Top-level classes aren't explicitly declared 'static'. JCodeModel might represent this
+			// by removing the JMod.STATIC flag.
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			// Update schema component info if possible
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					// Check if sc is available and is a local declaration before modification
+					if (sc instanceof XSDeclaration) {
+						XSDeclaration decl = (XSDeclaration) sc;
+						// FIXME: Inner class is always a local declaration? Check before assuming.
+						if (decl.isLocal()) {
+							// If it was considered local/anonymous, mark it as not anonymous anymore
+							// as it's being moved to a higher level scope.
 							setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+						}
+					}
+					// Found the corresponding outline, no need to check further
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// 2. Check for name collisions in the grandparent container and rename if necessary
+		if (grandParentClasses.containsKey(originalName)) {
+			finalName = parent.name() + originalName; // Prepend parent's name for uniqueness
+			writeSummary("\tRenaming class " + clazz.fullName() + " to " + finalName + " due to collision in " + (grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name()));
+			setPrivateField(clazz, "name", finalName);
+			// Note: clazz.name() will now return finalName
 		}
 
-		classes.put(clazz.name(), clazz);
+        // 3. Add the class (with its final name) to the grandparent container's map
+        // grandParentClasses is the map retrieved via reflection earlier
+        grandParentClasses.put(finalName, clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// 4. Finally modify the class so that it refers back the container:
+		// Update the 'outer' field to point to the new container (grandParent)
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
