diff --git a/tmp/cf7360d5-9eb6-4140-a8f1-73f68fd0d531_buggy.java b/tmp/1be7892a-06ec-4158-bf1e-4de9d10927aa_fixed.java
index 47a8941..73025af 100644
--- a/tmp/cf7360d5-9eb6-4140-a8f1-73f68fd0d531_buggy.java
+++ b/tmp/1be7892a-06ec-4158-bf1e-4de9d10927aa_fixed.java
@@ -1,53 +1,120 @@
+import java.util.Map;
+import com.sun.codemodel.JClassContainer;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JPackage;
+import com.sun.tools.xjc.outline.ClassOutline;
+import com.sun.tools.xjc.outline.Outline;
+import com.sun.xml.xsom.XSComponent;
+import com.sun.xml.xsom.XSDeclaration;
+
+// Assuming helper methods like getPrivateField, setPrivateField, and writeSummary exist elsewhere.
+// import static some.package.ReflectionUtils.*; 
+// import static some.package.LogUtils.*; 
+
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// 1. Get parent and grandparent
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+		String originalName = clazz.name(); // Store original name before potential rename
+
+        // Determine target container description for logging
+        String targetContainerName;
+        String targetType;
+        if (grandParent.isClass()) {
+            targetContainerName = ((JDefinedClass)grandParent).fullName();
+            targetType = "class";
+        } else {
+            targetContainerName = ((JPackage)grandParent).name();
+            targetType = "package";
+        }
+        writeSummary("\tAttempting to move inner class " + clazz.fullName() + " to " + targetType + " " + targetContainerName);
+
+		// 2. Remove class from parent's container FIRST
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses != null) {
+			JDefinedClass removed = parentClasses.remove(originalName);
+            if (removed == null) {
+                 // Log a warning if the class wasn't found, though theoretically it should be there.
+                 writeSummary("\tWarning: Class " + originalName + " not found in parent " + parent.fullName() + "'s classes map during move.");
+            } else {
+                 writeSummary("\tRemoved class " + originalName + " from original parent " + parent.fullName());
+            }
+		} else {
+			// Log a more severe warning or error, as this indicates a problem accessing the parent's state.
+			writeSummary("\tWarning: Could not retrieve classes map from parent " + parent.fullName() + ". Move might be incomplete.");
+            // Depending on requirements, might consider throwing an exception here.
+		}
+
+		// 3. Prepare class for the new container (specific logic based on target type)
+		Map<String, JDefinedClass> grandParentClasses; // To store classes of the target container
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+			// Moving to nest within another class
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
+            // Potentially, static modifier might need adjustment depending on context,
+            // but the original code only modified it when moving to a package.
 		}
-		else {
+		else { // Moving to a package (becoming top-level or sibling top-level)
 			JPackage grandParentPackage = (JPackage) grandParent;
-
-			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
-
-			classes = getPrivateField(grandParentPackage, "classes");
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+            // A class directly within a package cannot be 'static'.
+            int currentMods = clazz.mods().getValue();
+            if ((currentMods & JMod.STATIC) != 0) {
+                writeSummary("\tResetting STATIC modifier for " + clazz.name() + " as it moves to package " + grandParentPackage.name());
+			    setPrivateField(clazz.mods(), "mods", Integer.valueOf(currentMods & ~JMod.STATIC));
+            }
 
+			// Update schema component properties if moving to package (making it non-local)
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                    // Check if the schema component is a declaration and is currently local
+					if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
+                        writeSummary("\tMarking schema component for " + clazz.name() + " as non-local/non-anonymous.");
+                        // FIXME: Inner class is always a local declaration? Original assertion:
+						assert (((XSDeclaration) sc).isLocal());
+                        // Mark it as not anonymous (assuming this relates to being non-local)
 						setPrivateField(sc, "anonymous", Boolean.FALSE);
-
-					break;
+					}
+					break; // Found the corresponding outline, stop searching
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        // Check if we could retrieve the grandparent's class map
+        if (grandParentClasses == null) {
+             writeSummary("\tError: Could not retrieve classes map from grandparent " + targetContainerName + ". Aborting move operation for " + originalName + ".");
+             // Critical error: cannot add the class to the grandparent.
+             // The class has already been removed from the parent. The model is now inconsistent.
+             // Consider re-adding to parent or throwing a runtime exception.
+             // For now, just return, leaving the class potentially orphaned.
+             // Re-adding might be complex if renaming happened. Throwing might be safer.
+             // throw new IllegalStateException("Could not retrieve classes map from grandparent " + targetContainerName);
+             return;
+        }
+
+		// 4. Handle potential name collision in the grandparent container and determine final name
+        String finalName = originalName;
+		if (grandParentClasses.containsKey(originalName)) {
+            // Collision detected: rename the class using the parent's name as a prefix.
+            finalName = parent.name() + originalName;
+			writeSummary("\tCollision detected in " + targetContainerName + ". Renaming class " + originalName + " to " + finalName);
+			setPrivateField(clazz, "name", finalName); // Update the class's name field
 		}
 
-		classes.put(clazz.name(), clazz);
+        // 5. Add the class (with its final name) to the grandparent's map
+		grandParentClasses.put(finalName, clazz);
+        writeSummary("\tAdded class " + finalName + " to " + targetContainerName);
 
-		// Finally modify the class so that it refers back the container:
+		// 6. Finally modify the class's 'outer' field so that it refers back to the new container (grandparent)
 		setPrivateField(clazz, "outer", grandParent);
+        writeSummary("\tUpdated outer container reference for class " + finalName + " to " + targetContainerName);
 	}
