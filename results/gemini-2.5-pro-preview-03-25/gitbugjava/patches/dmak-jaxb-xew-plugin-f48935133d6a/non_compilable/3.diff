diff --git a/tmp/fce03b93-67f2-468e-9c25-828b075bbd6b_buggy.java b/tmp/2429bc9e-5240-4c7e-a6c3-f8d0f67d540d_fixed.java
index 47a8941..0dd2cee 100644
--- a/tmp/fce03b93-67f2-468e-9c25-828b075bbd6b_buggy.java
+++ b/tmp/2429bc9e-5240-4c7e-a6c3-f8d0f67d540d_fixed.java
@@ -1,53 +1,99 @@
+import java.util.Map;
+import com.sun.codemodel.JClassContainer;
+import com.sun.codemodel.JDefinedClass;
+import com.sun.codemodel.JMod;
+import com.sun.codemodel.JPackage;
+import com.sun.tools.xjc.outline.ClassOutline;
+import com.sun.tools.xjc.outline.Outline;
+import com.sun.xml.xsom.XSComponent;
+import com.sun.xml.xsom.XSDeclaration;
+
+// Assuming the context of a class where getPrivateField, setPrivateField, and writeSummary are defined.
+// import static ...ReflectionUtils.*; // If helpers are static methods
+
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// Get the internal "classes" map from the original parent container for removal later
+		// Need reflection helper 'getPrivateField' which returns Map<String, JDefinedClass>
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		String originalClassName = clazz.name(); // Store original name for removal and collision checks
+
+		// Get the internal "classes" map from the target grandparent container
+		Map<String, JDefinedClass> grandParentClasses;
+
+		// FIXME: Pending https://java.net/jira/browse/JAXB-957 (dead link, implies reflection workaround)
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+			// Grandparent is a class
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+			grandParentClasses = getPrivateField(grandParentClass, "classes");
+		} else {
+			// Grandparent is a package
 			JPackage grandParentPackage = (JPackage) grandParent;
-
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
+			grandParentClasses = getPrivateField(grandParentPackage, "classes");
 
-			classes = getPrivateField(grandParentPackage, "classes");
-
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+			// When moving to package level, the class becomes a top-level class.
+			// JCodeModel might require the static flag removed internally when the outer container changes.
+			// Use public API JMods.setMask() instead of reflection for mods field.
+			clazz.mods().setMask(clazz.mods().getValue() & ~JMod.STATIC);
 
+			// Update the corresponding schema component to reflect it's no longer anonymous/local
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
+					// Original code asserted this, assuming it's correct.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					// Mark the schema component as not anonymous (it now has a top-level name)
+					// Need reflection helper 'setPrivateField' for the 'anonymous' field of XSDeclaration
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// 1. Remove the class from its original parent container's map using the original name
+		if (parentClasses != null) {
+			if (parentClasses.remove(originalClassName) == null) {
+				// Log a warning if the class wasn't found in the parent map, which might indicate an inconsistency.
+				System.err.println("Warning: Class " + originalClassName + " not found in parent container " + parent.fullName() + "'s map during move operation.");
+			}
+		} else {
+			// Log a warning if reflection failed to get the parent's classes map.
+			System.err.println("Warning: Could not retrieve 'classes' map from parent container: " + parent.fullName());
 		}
 
-		classes.put(clazz.name(), clazz);
+		// 2. Check for name collision in the *new* grandparent container and determine final name
+		String finalName = originalClassName;
+		if (grandParentClasses != null) {
+			if (grandParentClasses.containsKey(finalName)) {
+				// Collision exists, create a new name by prepending the original parent's name
+				finalName = parent.name() + originalClassName;
+				String grandParentName = grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name();
+				writeSummary("\tName collision in " + grandParentName + ". Renaming class " + originalClassName + " to " + finalName);
+				// Update the name field of the class object itself using reflection
+				setPrivateField(clazz, "name", finalName);
+			}
+		} else {
+			// Log a warning if reflection failed to get the grandparent's classes map.
+			String grandParentName = grandParent.isClass() ? ((JDefinedClass)grandParent).fullName() : ((JPackage)grandParent).name();
+			System.err.println("Warning: Could not retrieve 'classes' map from grandparent container: " + grandParentName);
+			// Proceeding without the map check might lead to issues.
+		}
+
+		// 3. Add the class (with its final name) to the grandparent's map
+		if (grandParentClasses != null) {
+			grandParentClasses.put(finalName, clazz);
+		}
+		// Error/Warning already logged if grandParentClasses is null
 
-		// Finally modify the class so that it refers back the container:
+		// 4. Finally modify the class's outer field to refer back to the grandparent container
+		// Need reflection helper 'setPrivateField' for the 'outer' field
 		setPrivateField(clazz, "outer", grandParent);
 	}
