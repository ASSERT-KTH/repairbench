diff --git a/tmp/33163463-0116-4ea9-83f7-ff3b1aa55f58_buggy.java b/tmp/924ecfd3-690b-4152-9e61-0227a220aa44_fixed.java
index b7a680c..ec40560 100644
--- a/tmp/33163463-0116-4ea9-83f7-ff3b1aa55f58_buggy.java
+++ b/tmp/924ecfd3-690b-4152-9e61-0227a220aa44_fixed.java
@@ -1,289 +1,371 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
         while (buf.readableBytes() > 2) {
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Basic check to prevent reading beyond buffer if length is invalid
+            if (endIndex > buf.writerIndex()) {
+                 // Log.warning("Invalid TLV length in Huabao message, exceeds buffer");
+                 break;
+            }
+
+            // Ensure we don't try processing TLV if claimed length exceeds available bytes
+            if (length > buf.readableBytes()) {
+                // Log.warning("Invalid TLV length in Huabao message, exceeds readable bytes");
+                break;
+            }
+
             switch (subtype) {
                 case 0x01:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
                 case 0x02:
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0x2b:
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
                 case 0x30:
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x31:
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
                 case 0x33:
+                    // Avoid reading if length is 0, check string bounds before substring
+                    if (length > 0) {
                         String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (sentence.startsWith("*M00")) {
+                        if (sentence.startsWith("*M00") && sentence.length() >= 15) { // Check length for substring
+                            try {
                                 String lockStatus = sentence.substring(8, 8 + 7);
                                 position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                            } catch (NumberFormatException | IndexOutOfBoundsException e) {
+                                // Log potentially invalid format
+                            }
+                        }
                     }
                     break;
                 case 0x80:
+                    if (length >= 1) {
                         buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
-                    decodeExtension(position, buf, endIndex);
+                        // Original code adjusted endIndex based on writerIndex, which is suspicious.
+                        // Assuming decodeExtension should operate within the TLV bounds.
+                        int decodeExtensionEndIndex = buf.readerIndex() + length - 1; // -1 for content byte read
+                        if (decodeExtensionEndIndex > endIndex) { // Clamp to original TLV end index
+                           decodeExtensionEndIndex = endIndex;
+                        }
+                        // Pass the calculated end index, decodeExtension should respect it
+                        decodeExtension(position, buf, decodeExtensionEndIndex);
+                    }
                     break;
                 case 0x91:
+                    // Approximate check, requires 2 + 2 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 4 + 2 + 2 = 24 bytes?
+                    if (length >= 24) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         buf.readUnsignedShort();
                         buf.readUnsignedInt();
                         buf.readUnsignedShort();
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                    }
                     break;
                 case 0x94:
                     if (length > 0) {
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     }
                     break;
                 case 0xA7:
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
                 case 0xAC:
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
+                // ******** ADDED CASE ********
+                case 0xBC:
+                    if (length > 0) {
+                        // Trim needed as example data had trailing null bytes included in length
+                        position.set("driver", buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                    }
+                    break;
+                // **************************
                 case 0xD0:
+                    if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                    }
                     break;
                 case 0xD3:
+                    if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
                 case 0xD4:
+                    if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
                 case 0xD5:
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1) { // Need count byte
                         int count = buf.readUnsignedByte();
+                        // Check if length matches expected size: 1 + count * (5 + 5 + 1 + 2) = 1 + count * 13
+                        int expectedDataLength = count * 13;
+                        if (count > 0 && length == 1 + expectedDataLength && buf.readableBytes() >= expectedDataLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
                                 position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
                             }
+                        } else {
+                            // Log invalid count/length?
+                        }
                     }
                     break;
                 case 0xDA:
+                     if (length >= 3) { // Need count (2) + status (1)
                          buf.readUnsignedShort(); // string cut count
                          int deviceStatus = buf.readUnsignedByte();
                          position.set("string", BitUtil.check(deviceStatus, 0));
                          position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                          position.set("cover", BitUtil.check(deviceStatus, 3));
+                     }
                      break;
                 case 0xE6:
+                    // Loop should check readerIndex < endIndex
                     while (buf.readerIndex() < endIndex) {
+                        // Check for minimum bytes needed for one item (index + mac + temp + humidity)
+                        // Size of decodeCustomDouble is unknown, assume minimum 1 + 6 = 7 bytes needed before reading index/mac
+                         if (endIndex - buf.readerIndex() < 7) {
+                             break; // Not enough bytes for index + mac
+                         }
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
+                        // Assuming decodeCustomDouble reads within available bytes or handles errors
+                        if (buf.readerIndex() < endIndex) { // Check before first call
                              position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
+                        }
+                        if (buf.readerIndex() < endIndex) { // Check before second call
                              position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                         }
+                    }
                     break;
                 case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                    if (length > 0 && buf.readableBytes() >= length) { // Check length and buffer availability
+                        // Check if network cell tower format (first short > 200)
+                        if (length >= 2 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
                             Network network = new Network();
+                            if (length >= 3) { // Need mcc (2) + mnc (1)
                                 int mcc = buf.readUnsignedShort();
                                 int mnc = buf.readUnsignedByte();
-                        while (buf.readerIndex() < endIndex) {
+                                // Cell tower data is 5 bytes each (lac short + cid short + rssi byte)
+                                while (buf.readerIndex() <= endIndex - 5) {
                                     network.addCellTower(CellTower.from(
                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                             buf.readUnsignedByte()));
                                 }
+                                if (network.getCellTowers() != null && !network.getCellTowers().isEmpty()) {
                                     position.setNetwork(network);
-                    } else {
-                        while (buf.readerIndex() < endIndex) {
+                                }
+                            }
+                        } else { // Inner TLV format
+                            while (buf.readerIndex() <= endIndex - 4) { // Need inner type (2) + inner length (2)
                                 int extendedLength = buf.readUnsignedShort();
                                 int extendedType = buf.readUnsignedShort();
+                                // Inner data length = extendedLength - type field size (2)
+                                int extendedDataLength = extendedLength - 2;
+                                int extendedDataEndIndex = buf.readerIndex() + extendedDataLength;
+
+                                // Validate inner TLV boundaries
+                                if (extendedLength < 2 || extendedDataEndIndex > endIndex || extendedDataLength < 0) {
+                                    // Log.warning("Invalid inner TLV length/boundary in 0xEB");
+                                    break;
+                                }
+                                if (buf.readableBytes() < extendedDataLength) {
+                                    // Log.warning("Insufficient buffer for inner TLV data in 0xEB");
+                                    break; // Not enough data in buffer for claimed length
+                                }
+
                                 switch (extendedType) {
-                                case 0x0001:
-                                    position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
-                                    break;
-                                case 0x0023:
-                                    position.set("fuel2", Double.parseDouble(
-                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
-                                    break;
-                                case 0x00CE:
-                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                    break;
-                                case 0x00D8:
-                                    Network network = new Network();
-                                    network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
-                                    position.setNetwork(network);
-                                    break;
-                                case 0xE1:
-                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                                    break;
-                                default:
-                                    buf.skipBytes(extendedLength - 2);
-                                    break;
+                                    case 0x0001: if (extendedDataLength >= 3) { position.set("fuel1", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;
+                                    case 0x0023: if (extendedDataLength >= 6) { try { position.set("fuel2", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (NumberFormatException e) { /* Log */ } } break;
+                                    case 0x00CE: if (extendedDataLength >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;
+                                    case 0x00D8: if (extendedDataLength >= 9) { Network network = new Network(); network.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(network); } break;
+                                    case 0xE1:   if (extendedDataLength >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break; // Assuming type is 0xE1 not 0x00E1
+                                    default: /* Skip unknown inner type */ break;
+                                }
+                                // Position reader at the end of this inner TLV's data payload
+                                buf.readerIndex(extendedDataEndIndex);
                             }
                         }
                     }
                     break;
                 case 0xED:
+                    if (length > 0) {
                         String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
                         position.set("driverLicense", license);
+                    }
                     break;
                 case 0xEE:
+                     // Needs RSSI(1) + Power(2) + Battery(2) + Sats(1) = 6 bytes
+                     if (length >= 6) {
                          position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                          position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                          position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                          position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                     }
                      break;
                 case 0xF3:
-                    while (buf.readerIndex() < endIndex) {
+                     // Inner TLV: type(2) + length(1) + data(variable)
+                     while (buf.readerIndex() <= endIndex - 3) { // Need type+length header
                          int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
+                         int extendedLength = buf.readUnsignedByte(); // This is data length
+                         int extendedDataEndIndex = buf.readerIndex() + extendedLength;
+
+                         // Validate inner TLV boundaries
+                         if (extendedDataEndIndex > endIndex || extendedLength < 0) {
+                             // Log.warning("Invalid inner TLV length/boundary in 0xF3");
+                             break;
+                         }
+                         if (buf.readableBytes() < extendedLength) {
+                             // Log.warning("Insufficient buffer for inner TLV data in 0xF3");
+                             break; // Not enough data in buffer for claimed length
+                         }
+
                          switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                             case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;
+                             case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;
+                             case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;
+                             case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;
+                             case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;
+                             case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;
+                             case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;
+                             case 0x000B: if (extendedLength >= 2) position.set("intakePressure", buf.readUnsignedShort()); break;
+                             case 0x000C: if (extendedLength >= 2) position.set("intakeTemp", buf.readUnsignedShort() - 40); break;
+                             case 0x000D: if (extendedLength >= 2) position.set("intakeFlow", buf.readUnsignedShort()); break;
+                             case 0x000E: if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255); break;
+                             case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;
+                             case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;
+                             case 0x0102: if (extendedLength >= 2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); break;
+                             case 0x0112: if (extendedLength >= 2) position.set("hardAccelerationCount", buf.readUnsignedShort()); break;
+                             case 0x0113: if (extendedLength >= 2) position.set("hardDecelerationCount", buf.readUnsignedShort()); break;
+                             case 0x0114: if (extendedLength >= 2) position.set("hardCorneringCount", buf.readUnsignedShort()); break;
+                             default: /* Skip unknown inner type */ break;
                          }
+                         // Position reader at the end of this inner TLV's data payload
+                         buf.readerIndex(extendedDataEndIndex);
                      }
                      break;
                 case 0xFE:
                     if (length == 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
+                    } else if (length > 1) { // Needs at least mark byte
                         int mark = buf.readUnsignedByte();
                         if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                            // Inner TLV format: type(1) + length(1) + data
+                            while (buf.readerIndex() <= endIndex - 2) { // Need inner type + inner length header
                                 int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
+                                int extendedLength = buf.readUnsignedByte(); // This is data length
+                                int extendedDataEndIndex = buf.readerIndex() + extendedLength;
+
+                                // Validate inner TLV boundaries
+                                if (extendedDataEndIndex > endIndex || extendedLength < 0) {
+                                    // Log.warning("Invalid inner TLV length/boundary in 0xFE");
+                                    break;
+                                }
+                                if (buf.readableBytes() < extendedLength) {
+                                    // Log.warning("Insufficient buffer for inner TLV data in 0xFE");
+                                    break; // Not enough data in buffer for claimed length
+                                }
+
                                 switch (extendedType) {
                                     case 0x01:
+                                        if (extendedLength >= 4) {
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                            if (BitUtil.check(alarms, 0)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION); }
+                                            if (BitUtil.check(alarms, 1)) { position.set(Position.KEY_ALARM, Position.ALARM_BRAKING); }
+                                            if (BitUtil.check(alarms, 2)) { position.set(Position.KEY_ALARM, Position.ALARM_CORNERING); }
+                                            if (BitUtil.check(alarms, 3)) { position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT); }
+                                            if (BitUtil.check(alarms, 4)) { position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING); }
                                         }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
-                                        }
-                                        break;
-                                    default:
-                                        buf.skipBytes(extendedLength);
                                         break;
+                                    default: /* Skip unknown inner type */ break;
                                 }
+                                // Position reader at the end of this inner TLV's data payload
+                                buf.readerIndex(extendedDataEndIndex);
                             }
-                        }
+                            // Check for potential trailing battery byte if structure implies it
+                            if (buf.readerIndex() == endIndex - 1) {
                                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                             }
+                        }
+                        // If mark != 0x7C, original code had ambiguous trailing byte read.
+                        // Assuming structure is unknown/unsupported if mark != 0x7C and length > 1.
+                    }
                     break;
                 default:
+                    // Data for unknown subtype is skipped by readerIndex adjustment below
                     break;
             }
+            // Ensure reader index is set to the end of the TLV block,
+            // even if processing failed or didn't consume all bytes.
+            // This prevents infinite loops on malformed data.
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
