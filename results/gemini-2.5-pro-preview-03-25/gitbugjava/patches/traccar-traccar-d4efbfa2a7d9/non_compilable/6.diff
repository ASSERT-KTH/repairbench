diff --git a/tmp/795f42c7-3ffc-4dde-8b97-7f53a7431438_buggy.java b/tmp/8f8f2d4c-3c4e-49a1-b63f-42a032b06767_fixed.java
index b7a680c..658aaa4 100644
--- a/tmp/795f42c7-3ffc-4dde-8b97-7f53a7431438_buggy.java
+++ b/tmp/8f8f2d4c-3c4e-49a1-b63f-42a032b06767_fixed.java
@@ -1,289 +1,405 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
+        // Check for an older format based on fixed remaining length
+        // This check might be too specific, consider removing if causing issues with newer formats
         if (buf.readableBytes() == 20) {
 
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
 
             return position;
 
         }
 
-        while (buf.readableBytes() > 2) {
+        // Process TLV (Type-Length-Value) data
+        while (buf.readableBytes() > 2) { // Need at least type (1 byte) and length (1 byte)
 
             int subtype = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             int endIndex = buf.readerIndex() + length;
+
+            // Ensure length doesn't exceed buffer bounds
+            if (endIndex > buf.writerIndex()) {
+                // Log error or break loop? Breaking to prevent further read errors.
+                break;
+            }
+
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Odometer
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
-                case 0x02:
+                case 0x02: // Fuel Level
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0x2b:
+                case 0x2b: // Fuel Consumption (Total?)
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
-                case 0x30:
+                case 0x30: // RSSI
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x31:
+                case 0x31: // Satellites
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x33:
+                case 0x33: // Lock Status String
+                    if (length > 0) {
                         String sentence = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         if (sentence.startsWith("*M00")) {
+                            try {
                                 String lockStatus = sentence.substring(8, 8 + 7);
                                 position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                            } catch (IndexOutOfBoundsException | NumberFormatException e) {
+                                // Ignore parsing errors
+                            }
+                        }
                     }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                case 0x80: // Extension Data (Nested TLVs)
+                    if (length >= 1) {
+                        buf.readUnsignedByte(); // content type?
+                        // Pass the original endIndex to the extension decoder
                         decodeExtension(position, buf, endIndex);
+                    }
                     break;
-                case 0x91:
+                case 0x91: // OBD Data Block 1
+                    if (length >= 19) { // Check minimum expected length
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
+                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0);
+                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0);
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
-                    position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                        buf.readUnsignedShort(); // Instant Fuel Consumption (L/100km * 100)
+                        position.set("averageFuelConsumption", buf.readUnsignedShort() * 0.01); // Average Fuel Consumption
+                        buf.readUnsignedShort(); // Driving Time (seconds)
+                        buf.readUnsignedInt();   // Mileage (meters)
+                        buf.readUnsignedShort(); // Total Fuel Consumption (0.01L)
+                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01); // Error Count Fuel Consumption ?
+                    }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
-                        position.set(
-                                Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                        position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC Values
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer (Alternative)
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
-                case 0xD0:
+                case 0xBC: // Driver License Text
+                    if (length > 0) {
+                        String driverLicenseText = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        int nullTerminator = driverLicenseText.indexOf('\0'); // Handle potential null padding
+                        if (nullTerminator != -1) {
+                            driverLicenseText = driverLicenseText.substring(0, nullTerminator);
+                        }
+                        position.set("driver", driverLicenseText.trim()); // Key expected by test
+                    }
+                    break;
+                case 0xBD: // Driver Number/ID
+                    if (length > 0) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                    }
+                    break;
+                case 0xD0: // User Status / Alarm
+                    if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                        // Potentially decode other status bits here
+                    }
                     break;
-                case 0xD3:
+                case 0xD3: // External Power Voltage
+                    if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0xD4:
+                case 0xD4: // Battery Level Percentage
+                    if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xD5:
-                    if (length == 2) {
+                case 0xD5: // Lock Status / Battery
+                    if (length == 2) { // Internal battery voltage
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
+                    } else if (length > 1) { // Lock details
                         int count = buf.readUnsignedByte();
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2);
+                        if (length >= expectedLength) {
                             for (int i = 1; i <= count; i++) {
                                 position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                 position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                 int status = buf.readUnsignedShort();
-                            position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
+                                position.set("lock" + i + "Locked", !BitUtil.check(status, 5)); // Bit 5: 0=Locked, 1=Unlocked
+                            }
                         }
                     }
                     break;
-                case 0xDA:
+                case 0xDA: // Device Status (String lock related?)
+                    if (length >= 3) {
                         buf.readUnsignedShort(); // string cut count
                         int deviceStatus = buf.readUnsignedByte();
-                    position.set("string", BitUtil.check(deviceStatus, 0));
-                    position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
-                    position.set("cover", BitUtil.check(deviceStatus, 3));
+                        position.set("string", BitUtil.check(deviceStatus, 0)); // Bit 0: 0=disconnected, 1=connected
+                        position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2)); // Bit 2: 0=static, 1=moving
+                        position.set("cover", BitUtil.check(deviceStatus, 3)); // Bit 3: 0=closed, 1=opened
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Temperature/Humidity Sensors
                     while (buf.readerIndex() < endIndex) {
+                         if (buf.readableBytes() < 1 + 6 + 4 + 1 + 4 + 1) break; // Rough check for needed bytes
                         int sensorIndex = buf.readUnsignedByte();
-                        buf.skipBytes(6); // mac
+                        buf.skipBytes(6); // mac address
                         position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
                         position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                     }
                     break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                case 0xEB: // Network Info / Extended Data
+                    // Heuristic to differentiate: check if MCC looks valid and length is plausible
+                    if (length >= 5 && buf.getUnsignedShort(buf.readerIndex()) > 200) {
                         Network network = new Network();
                         int mcc = buf.readUnsignedShort();
                         int mnc = buf.readUnsignedByte();
                         while (buf.readerIndex() < endIndex) {
+                             if (buf.readableBytes() < 2 + 2 + 1) break; // Need LAC, CID, RSSI
                             network.addCellTower(CellTower.from(
-                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
-                                    buf.readUnsignedByte()));
+                                    mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(), // LAC, CID
+                                    buf.readUnsignedByte())); // RSSI
                         }
+                        if (!network.getCellTowers().isEmpty()) {
                             position.setNetwork(network);
-                    } else {
+                        }
+                    } else { // Assume Extended Data sub-TLV format
                         while (buf.readerIndex() < endIndex) {
+                            if (buf.readableBytes() < 4) break; // Need length (2) + type (2)
                             int extendedLength = buf.readUnsignedShort();
                             int extendedType = buf.readUnsignedShort();
+                            int dataLength = extendedLength - 2; // Actual data length
+                            int extendedEndIndex = buf.readerIndex() + dataLength;
+
+                            if (dataLength < 0 || extendedEndIndex > endIndex) break; // Invalid length or exceeds outer boundary
+
                             switch (extendedType) {
-                                case 0x0001:
+                                case 0x0001: // Fuel 1
+                                    if (dataLength >= 3) {
                                         position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                         buf.readUnsignedByte(); // unused
+                                    }
                                     break;
-                                case 0x0023:
+                                case 0x0023: // Fuel 2 (ASCII)
+                                    if (dataLength >= 6) {
+                                        try {
                                             position.set("fuel2", Double.parseDouble(
                                                     buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
+                                        } catch (NumberFormatException e) { /* ignore */ }
+                                    }
                                     break;
-                                case 0x00CE:
+                                case 0x00CE: // External Power Voltage
+                                    if (dataLength >= 2) {
                                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                    }
                                     break;
-                                case 0x00D8:
+                                case 0x00D8: // Single Cell Tower Info
+                                    if (dataLength >= 9) {
                                         Network network = new Network();
                                         network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
+                                                buf.readUnsignedShort(), buf.readUnsignedByte(), // MCC, MNC
+                                                buf.readUnsignedShort(), buf.readUnsignedInt())); // LAC, CID
                                         position.setNetwork(network);
+                                    }
                                     break;
-                                case 0xE1:
+                                case 0xE1: case 0x00E1: // Battery Level Percentage (Allow both types)
+                                    if (dataLength >= 1) {
                                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                                    }
                                     break;
                                 default:
-                                    buf.skipBytes(extendedLength - 2);
+                                    // Skip unknown extended data handled below by readerIndex update
                                     break;
                             }
+                            // Ensure readerIndex is advanced correctly even if data wasn't read fully or skipped
+                            buf.readerIndex(Math.min(extendedEndIndex, endIndex));
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Driver License / ID (Potentially overlaps with 0xBC/0xBD)
+                    if (length > 0) {
                         String license = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
-                    position.set("driverLicense", license);
+                        position.set("driverLicense", license); // Use specific key for this type
+                    }
                     break;
-                case 0xEE:
+                case 0xEE: // Combined status: RSSI, Power, Battery, Satellites
+                    if (length >= 6) { // 1 + 2 + 2 + 1
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xF3:
+                case 0xF3: // OBD data block 2 (Sub-TLV structure)
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 3) break; // Need type (2) and length (1)
                         int extendedType = buf.readUnsignedShort();
                         int extendedLength = buf.readUnsignedByte();
+                        int extendedEndIndex = buf.readerIndex() + extendedLength;
+
+                        if (extendedEndIndex > endIndex) break; // Exceeds outer boundary
+
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
+                            case 0x0002: // OBD Speed (km/h * 10)
+                                if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
                                 break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
+                            case 0x0003: // RPM
+                                if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort());
                                 break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                            case 0x0004: // External Power Voltage (mV)
+                                if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                                 break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
+                            case 0x0005: // OBD Odometer (m * 100) -> hm
+                                if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
                                 break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
+                            case 0x0007: // Instant Fuel Consumption (L/h * 10)
+                                if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
                                 break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
+                            case 0x0008: // Engine Load (% * 10)
+                                if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
                                 break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
+                            case 0x0009: // Coolant Temp (C + 40 offset)
+                                if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
                                 break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
+                            case 0x000B: // Intake Pressure (kPa)
+                                if (extendedLength >= 2) position.set("intakePressure", buf.readUnsignedShort());
                                 break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
+                            case 0x000C: // Intake Temp (C + 40 offset)
+                                if (extendedLength >= 2) position.set("intakeTemp", buf.readUnsignedShort() - 40);
                                 break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
+                            case 0x000D: // Intake Flow (g/s)
+                                if (extendedLength >= 2) position.set("intakeFlow", buf.readUnsignedShort());
                                 break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
+                            case 0x000E: // Throttle Position (% * 100/255 - needs check, assuming 2 bytes like others)
+                                if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); // Check scaling
                                 break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
+                            case 0x0050: // VIN
+                                if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
                                 break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
+                            case 0x0100: // Trip Mileage (km * 10)
+                                if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
                                 break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
+                            case 0x0102: // Trip Fuel Consumption (L * 10)
+                                if (extendedLength >= 2) position.set("tripFuel", buf.readUnsignedShort() * 0.1);
                                 break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
+                            case 0x0112: // Hard Acceleration Count
+                                if (extendedLength >= 2) position.set("hardAccelerationCount", buf.readUnsignedShort());
                                 break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
+                            case 0x0113: // Hard Braking Count
+                                if (extendedLength >= 2) position.set("hardDecelerationCount", buf.readUnsignedShort());
                                 break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
+                            case 0x0114: // Hard Cornering Count
+                                if (extendedLength >= 2) position.set("hardCorneringCount", buf.readUnsignedShort());
                                 break;
                             default:
-                                buf.skipBytes(extendedLength);
+                                // Skip unknown handled below
                                 break;
                         }
+                        // Ensure readerIndex is advanced correctly
+                        buf.readerIndex(Math.min(extendedEndIndex, endIndex));
                     }
                     break;
-                case 0xFE:
-                    if (length == 1) {
+                case 0xFE: // Driving behavior / Battery Level
+                    if (length == 1) { // Only battery level
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
-                        if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                    } else if (length > 2) { // Sub-TLV structure potentially followed by battery level
+                        int marker = buf.getUnsignedByte(buf.readerIndex()); // Peek at marker
+                        if (marker == 0x7C) {
+                            buf.readUnsignedByte(); // Consume marker
+                            while (buf.readerIndex() < endIndex - 1) { // Read sub-TLVs, leave last byte for battery
+                                if (buf.readableBytes() < 2) break; // Need type (1) and length (1)
                                 int extendedType = buf.readUnsignedByte();
                                 int extendedLength = buf.readUnsignedByte();
+                                int extendedEndIndex = buf.readerIndex() + extendedLength;
+
+                                if (extendedEndIndex > endIndex - 1) break; // Exceeds boundary before last byte
+
                                 switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Driving behavior alarms
+                                        if (extendedLength >= 4) {
                                             long alarms = buf.readUnsignedInt();
                                             if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                                position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                             }
                                             if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
+                                                position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                             }
                                             if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
+                                                // Use generic cornering alarm; specific direction might be elsewhere
+                                                position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                             }
                                             if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
+                                                position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
                                             }
                                             if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                                // Could be ALARM_TAMPERING or ALARM_TOWING depending on context
+                                                position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);
+                                            }
+                                            // Add more alarms based on bits if documentation available
                                         }
                                         break;
                                     default:
-                                        buf.skipBytes(extendedLength);
+                                        // Skip unknown handled below
                                         break;
                                 }
+                                // Ensure readerIndex is advanced correctly
+                                buf.readerIndex(Math.min(extendedEndIndex, endIndex - 1));
                             }
                         }
+                        // Read the last byte as battery level if available and expected
+                        if (buf.readerIndex() == endIndex - 1) {
                             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         }
+                    }
                     break;
                 default:
+                    // Unknown subtype, skip its content handled below
                     break;
             }
-            buf.readerIndex(endIndex);
+
+            // Ensure reader index is set to the end of the TLV block
+            // This handles cases where data was partially read, skipped, or length was incorrect
+            buf.readerIndex(Math.min(endIndex, buf.writerIndex()));
         }
 
         return position;
     }
\ No newline at end of file
