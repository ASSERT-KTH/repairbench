diff --git a/tmp/a644841c-3a53-460d-b262-ef276a7d6401_buggy.java b/tmp/f75c02f1-022f-4f5c-b116-97f4c083690b_fixed.java
index 7be2eb0..4fa351c 100644
--- a/tmp/a644841c-3a53-460d-b262-ef276a7d6401_buggy.java
+++ b/tmp/f75c02f1-022f-4f5c-b116-97f4c083690b_fixed.java
@@ -1,11 +1,23 @@
   @Override
   public boolean equals(Object object) {
+    if (this == object) {
+      return true;
+    }
     if (!(object instanceof KeyPair)) {
       return false;
     }
 
     KeyPair other = (KeyPair) object;
-    return this.mPrivateKey.equals(other.mPrivateKey) &&
-            this.mPublicKey.equals(other.mPublicKey);
 
+    // mPublicKey should not be null for a valid KeyPair, but check anyway for robustness?
+    // Assuming mPublicKey is guaranteed non-null based on KeyPair structure/creation.
+    // If mPublicKey could be null, Objects.equals should be used here too.
+    if (!this.mPublicKey.equals(other.mPublicKey)) {
+        return false;
+    }
+
+    // Use Objects.equals for null-safe comparison of mPrivateKey
+    // This handles cases where one or both private keys might be null,
+    // which occurs when KeyPair is created from an accountId/publicKey only.
+    return java.util.Objects.equals(this.mPrivateKey, other.mPrivateKey);
   }
\ No newline at end of file
