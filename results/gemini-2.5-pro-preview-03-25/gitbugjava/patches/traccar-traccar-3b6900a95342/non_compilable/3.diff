diff --git a/tmp/00e2d416-3e39-4069-aadf-7da0884fa223_buggy.java b/tmp/be97195c-8c00-4a50-89b6-9fa3f9bee12c_fixed.java
index 39bd733..f649be7 100644
--- a/tmp/00e2d416-3e39-4069-aadf-7da0884fa223_buggy.java
+++ b/tmp/be97195c-8c00-4a50-89b6-9fa3f9bee12c_fixed.java
@@ -1,193 +1,251 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // header
         int flags = buf.readUnsignedByte();
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // checksum
         int index = buf.readUnsignedShortLE();
         int type = buf.readUnsignedByte();
 
         if (BitUtil.check(flags, 4)) {
             sendResponse(channel, remoteAddress, index, type, buf);
         }
 
         if (type == MSG_DATA) {
 
             List<Position> positions = new LinkedList<>();
             Set<Integer> keys = new HashSet<>();
             boolean hasLocation = false;
             Position position = new Position(getProtocolName());
 
             DeviceSession deviceSession = null;
 
             while (buf.isReadable()) {
                 int endIndex = buf.readUnsignedByte() + buf.readerIndex();
+                // Check if there's enough data for the key byte
+                if (!buf.isReadable()) {
+                    break; // Avoid reading past buffer end
+                }
                 int key = buf.readUnsignedByte();
 
+                // Check if there's enough data for the value based on endIndex
+                // This requires knowing the length of each key's data or careful handling within switch cases.
+                // For now, rely on switch cases handling their reads correctly up to endIndex.
+
                 if (keys.contains(key)) {
                     if (!hasLocation) {
                         getLastLocation(position, null);
                     }
-                    positions.add(position);
+                    if (position.getDeviceId() != 0 || position.getFixTime() != null || position.getLatitude() != 0 || position.getLongitude() != 0) {
+                        positions.add(position); // Add previous position only if it has meaningful data
+                    }
                     keys.clear();
                     hasLocation = false;
                     position = new Position(getProtocolName());
+                    // If deviceSession is already known, assign it to the new position object
+                    if (deviceSession != null) {
+                        position.setDeviceId(deviceSession.getDeviceId());
+                    }
                 }
                 keys.add(key);
 
+                // Ensure we don't read past the declared end index for this segment
+                ByteBuf fieldBuf = buf.readSlice(endIndex - buf.readerIndex());
+
                 switch (key) {
                     case 0x01:
-                        deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
-
+                        // Ensure fieldBuf has enough readable bytes
+                        if (fieldBuf.readableBytes() >= 15) {
+                            String uniqueId = fieldBuf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
+                            deviceSession = getDeviceSession(channel, remoteAddress, uniqueId);
+                            if (deviceSession != null) {
                                 position.setDeviceId(deviceSession.getDeviceId());
+                            }
+                        }
                         break;
                     case 0x02:
-                        long alarm = buf.readUnsignedIntLE();
+                        if (fieldBuf.readableBytes() >= 4) {
+                            long alarm = fieldBuf.readUnsignedIntLE();
                             position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                             if (BitUtil.check(alarm, 31)) {
                                 position.set("bark", true);
                             }
+                        }
                         break;
                     case 0x14:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
+                        if (fieldBuf.readableBytes() >= 3) {
+                            position.set(Position.KEY_BATTERY_LEVEL, fieldBuf.readUnsignedByte());
+                            position.set(Position.KEY_BATTERY, fieldBuf.readUnsignedShortLE() * 0.001);
+                        }
                         break;
                     case 0x20:
+                        if (fieldBuf.readableBytes() >= 21) {
                             hasLocation = true;
-                        position.setLatitude(buf.readIntLE() * 0.0000001);
-                        position.setLongitude(buf.readIntLE() * 0.0000001);
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
-                        position.setCourse(buf.readUnsignedShortLE());
-                        position.setAltitude(buf.readShortLE());
-                        int hdop = buf.readUnsignedShortLE();
+                            position.setLatitude(fieldBuf.readIntLE() * 0.0000001);
+                            position.setLongitude(fieldBuf.readIntLE() * 0.0000001);
+                            position.setSpeed(UnitsConverter.knotsFromKph(fieldBuf.readUnsignedShortLE()));
+                            position.setCourse(fieldBuf.readUnsignedShortLE());
+                            position.setAltitude(fieldBuf.readShortLE());
+                            int hdop = fieldBuf.readUnsignedShortLE();
                             position.setValid(hdop > 0);
                             position.set(Position.KEY_HDOP, hdop * 0.1);
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                            position.set(Position.KEY_ODOMETER, fieldBuf.readUnsignedIntLE());
+                            position.set(Position.KEY_SATELLITES, fieldBuf.readUnsignedByte());
+                        }
                         break;
                     case 0x21:
-                        int mcc = buf.readUnsignedShortLE();
-                        int mnc = buf.readUnsignedByte();
+                        if (fieldBuf.readableBytes() >= 3) { // mcc(2) + mnc(1)
+                            int mcc = fieldBuf.readUnsignedShortLE();
+                            int mnc = fieldBuf.readUnsignedByte();
                             if (position.getNetwork() == null) {
                                 position.setNetwork(new Network());
                             }
-                        while (buf.readerIndex() < endIndex) {
-                            int rssi = buf.readByte();
+                            while (fieldBuf.readableBytes() >= 5) { // rssi(1) + lac(2) + cid(2)
+                                int rssi = fieldBuf.readByte();
                                 position.getNetwork().addCellTower(CellTower.from(
-                                    mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
+                                        mcc, mnc, fieldBuf.readUnsignedShortLE(), fieldBuf.readUnsignedShortLE(), rssi));
+                            }
                         }
                         break;
                     case 0x22:
                         if (position.getNetwork() == null) {
                             position.setNetwork(new Network());
                         }
-                        while (buf.readerIndex() < endIndex) {
-                            int rssi = buf.readByte();
-                            String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
+                        while (fieldBuf.readableBytes() >= 7) { // rssi(1) + mac(6)
+                            int rssi = fieldBuf.readByte();
+                            String mac = ByteBufUtil.hexDump(fieldBuf.readSlice(6)).replaceAll("(..)", "$1:");
                             position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
                                     mac.substring(0, mac.length() - 1), rssi));
                         }
                         break;
                     case 0x23:
-                        position.set("tagId", readTagId(buf));
-                        position.setLatitude(buf.readIntLE() * 0.0000001);
-                        position.setLongitude(buf.readIntLE() * 0.0000001);
+                         // Need size of readTagId + lat + lon
+                        if (fieldBuf.readableBytes() >= 14) { // Assuming readTagId reads 6 bytes (common case) + 4 + 4
+                            position.set("tagId", readTagId(fieldBuf)); // Pass fieldBuf here
+                            position.setLatitude(fieldBuf.readIntLE() * 0.0000001);
+                            position.setLongitude(fieldBuf.readIntLE() * 0.0000001);
                             position.setValid(true);
                             hasLocation = true;
+                        }
                         break;
                     case 0x24:
-                        position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
-                        long status = buf.readUnsignedIntLE();
+                        if (fieldBuf.readableBytes() >= 8) {
+                            position.setTime(new Date(fieldBuf.readUnsignedIntLE() * 1000));
+                            long status = fieldBuf.readUnsignedIntLE();
                             if (BitUtil.check(status, 4)) {
                                 position.set(Position.KEY_CHARGE, true);
                             }
                             if (BitUtil.check(status, 7)) {
                                 position.set(Position.KEY_ARCHIVE, true);
                             }
                             position.set(Position.KEY_MOTION, BitUtil.check(status, 9));
                             position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));
                             position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
                             position.set(Position.KEY_STATUS, status);
+                        }
                         break;
                     case 0x28:
-                        int beaconFlags = buf.readUnsignedByte();
-                        position.set("tagId", readTagId(buf));
-                        position.set("tagRssi", (int) buf.readByte());
-                        position.set("tag1mRssi", (int) buf.readByte());
-                        if (BitUtil.check(beaconFlags, 7)) {
-                            position.setLatitude(buf.readIntLE() * 0.0000001);
-                            position.setLongitude(buf.readIntLE() * 0.0000001);
+                         // Need size of flags(1) + readTagId + rssi(1) + 1mRssi(1) + optional fields
+                         if (fieldBuf.readableBytes() >= 9) { // flags(1) + tagId(6) + rssi(1) + 1mRssi(1) minimum
+                             int beaconFlags = fieldBuf.readUnsignedByte();
+                             position.set("tagId", readTagId(fieldBuf)); // Pass fieldBuf
+                             position.set("tagRssi", (int) fieldBuf.readByte());
+                             position.set("tag1mRssi", (int) fieldBuf.readByte());
+                             if (BitUtil.check(beaconFlags, 7) && fieldBuf.readableBytes() >= 8) { // lat(4) + lon(4)
+                                 position.setLatitude(fieldBuf.readIntLE() * 0.0000001);
+                                 position.setLongitude(fieldBuf.readIntLE() * 0.0000001);
                                  position.setValid(true);
                                  hasLocation = true;
                              }
                              if (BitUtil.check(beaconFlags, 6)) {
-                            position.set("description", buf.readCharSequence(
-                                    endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
+                                 position.set("description", fieldBuf.readCharSequence(
+                                         fieldBuf.readableBytes(), StandardCharsets.US_ASCII).toString());
+                             }
                          }
                         break;
                     case 0x2A:
-                        buf.readUnsignedByte(); // flags
-                        buf.skipBytes(6); // mac
-                        buf.readUnsignedByte(); // rssi
-                        position.setLatitude(buf.readIntLE() * 0.0000001);
-                        position.setLongitude(buf.readIntLE() * 0.0000001);
+                        if (fieldBuf.readableBytes() >= 16) { // flags(1) + mac(6) + rssi(1) + lat(4) + lon(4)
+                            fieldBuf.readUnsignedByte(); // flags
+                            fieldBuf.skipBytes(6); // mac
+                            fieldBuf.readUnsignedByte(); // rssi
+                            position.setLatitude(fieldBuf.readIntLE() * 0.0000001);
+                            position.setLongitude(fieldBuf.readIntLE() * 0.0000001);
                             position.setValid(true);
                             hasLocation = true;
+                        }
                         break;
                     case 0x30:
-                        buf.readUnsignedIntLE(); // timestamp
-                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
+                        if (fieldBuf.readableBytes() >= 8) {
+                            fieldBuf.readUnsignedIntLE(); // timestamp
+                            position.set(Position.KEY_STEPS, fieldBuf.readUnsignedIntLE());
+                        }
                         break;
                     case 0x31:
                         int i = 1;
-                        while (buf.readerIndex() < endIndex) {
-                            position.set("activity" + i + "Time", buf.readUnsignedIntLE());
-                            position.set("activity" + i, buf.readUnsignedIntLE());
+                        while (fieldBuf.readableBytes() >= 8) { // time(4) + activity(4)
+                            position.set("activity" + i + "Time", fieldBuf.readUnsignedIntLE());
+                            position.set("activity" + i, fieldBuf.readUnsignedIntLE());
                             i += 1;
                         }
                         break;
                     case 0x37:
-                        buf.readUnsignedIntLE(); // timestamp
-                        long barking = buf.readUnsignedIntLE();
+                        if (fieldBuf.readableBytes() >= 8) {
+                            fieldBuf.readUnsignedIntLE(); // timestamp
+                            long barking = fieldBuf.readUnsignedIntLE();
                             if (BitUtil.check(barking, 31)) {
                                 position.set("barkStop", true);
                             }
                             position.set("barkCount", BitUtil.to(barking, 31));
+                        }
                         break;
                     case 0x40:
-                        buf.readUnsignedIntLE(); // timestamp
-                        int heartRate = buf.readUnsignedByte();
+                        if (fieldBuf.readableBytes() >= 5) { // timestamp(4) + heartRate(1)
+                            fieldBuf.readUnsignedIntLE(); // timestamp
+                            int heartRate = fieldBuf.readUnsignedByte();
                             if (heartRate > 1) {
                                 position.set(Position.KEY_HEART_RATE, heartRate);
                             }
+                        }
                         break;
                     default:
+                        // Data for unknown keys is skipped by reading the slice initially
                         break;
                 }
+                // Ensure the original buffer's reader index is advanced to the end of the segment
                 buf.readerIndex(endIndex);
             }
 
             if (!hasLocation) {
-                getLastLocation(position, null);
+                getLastLocation(position, position.getFixTime()); // Use existing time if available
             }
+            // Add the last position if it has meaningful data
+            if (position.getDeviceId() != 0 || position.getFixTime() != null || position.getLatitude() != 0 || position.getLongitude() != 0) {
                  positions.add(position);
+            }
 
+
+            // Assign deviceId from the identified session to all positions that don't have one yet.
             if (deviceSession != null) {
+                long deviceId = deviceSession.getDeviceId();
                 for (Position p : positions) {
-                    p.setDeviceId(deviceSession.getDeviceId());
+                    if (p.getDeviceId() == 0) { // Set only if not already set by case 0x01
+                       p.setDeviceId(deviceId);
                     }
-            } else {
+                }
+            }
+
+            // Return null only if no positions with actual data were decoded.
+            if (positions.isEmpty()) {
                  return null;
             }
 
-            return positions;
+            return positions; // Return the list of positions
 
         }
 
-        return null;
+        return null; // Return null if type is not MSG_DATA
     }
\ No newline at end of file
