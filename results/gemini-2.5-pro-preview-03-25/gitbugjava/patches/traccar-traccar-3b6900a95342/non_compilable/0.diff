diff --git a/tmp/98f523e9-2e69-4729-ab1b-cb4fe94e1e28_buggy.java b/tmp/a585a86b-f4fe-493c-8c2e-c842981e84c7_fixed.java
index 39bd733..f65ec03 100644
--- a/tmp/98f523e9-2e69-4729-ab1b-cb4fe94e1e28_buggy.java
+++ b/tmp/a585a86b-f4fe-493c-8c2e-c842981e84c7_fixed.java
@@ -1,193 +1,207 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedByte(); // header
         int flags = buf.readUnsignedByte();
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // checksum
         int index = buf.readUnsignedShortLE();
         int type = buf.readUnsignedByte();
 
         if (BitUtil.check(flags, 4)) {
             sendResponse(channel, remoteAddress, index, type, buf);
         }
 
         if (type == MSG_DATA) {
 
             List<Position> positions = new LinkedList<>();
             Set<Integer> keys = new HashSet<>();
             boolean hasLocation = false;
             Position position = new Position(getProtocolName());
 
             DeviceSession deviceSession = null;
 
             while (buf.isReadable()) {
                 int endIndex = buf.readUnsignedByte() + buf.readerIndex();
                 int key = buf.readUnsignedByte();
 
                 if (keys.contains(key)) {
                     if (!hasLocation) {
                         getLastLocation(position, null);
                     }
+                    // Only add previous position if it contains some data beyond protocol name
+                    if (position.getDeviceId() != 0 || position.getFixTime() != null || position.getLatitude() != 0 || !position.getAttributes().isEmpty()) {
                        positions.add(position);
+                    }
                     keys.clear();
                     hasLocation = false;
                     position = new Position(getProtocolName());
+                     // Preserve deviceId if already known from previous segment group in same message
+                    if (deviceSession != null) {
+                        position.setDeviceId(deviceSession.getDeviceId());
+                    }
                 }
                 keys.add(key);
 
                 switch (key) {
                     case 0x01:
-                        deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
-
+                        String imei = buf.readCharSequence(15, StandardCharsets.US_ASCII).toString();
+                        deviceSession = getDeviceSession(channel, remoteAddress, imei);
+                        if (deviceSession != null) { // Check if session was retrieved/created
                              position.setDeviceId(deviceSession.getDeviceId());
+                        } // else: deviceSession remains null, ID not set on position yet.
                         break;
                     case 0x02:
                         long alarm = buf.readUnsignedIntLE();
                         position.set(Position.KEY_ALARM, decodeAlarm(alarm));
                         if (BitUtil.check(alarm, 31)) {
                             position.set("bark", true);
                         }
                         break;
                     case 0x14:
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.001);
                         break;
                     case 0x20:
                         hasLocation = true;
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         position.setCourse(buf.readUnsignedShortLE());
                         position.setAltitude(buf.readShortLE());
                         int hdop = buf.readUnsignedShortLE();
-                        position.setValid(hdop > 0);
+                        position.setValid(hdop > 0); // Assuming HDOP > 0 means valid fix
                         position.set(Position.KEY_HDOP, hdop * 0.1);
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x21:
                         int mcc = buf.readUnsignedShortLE();
                         int mnc = buf.readUnsignedByte();
                         if (position.getNetwork() == null) {
                             position.setNetwork(new Network());
                         }
                         while (buf.readerIndex() < endIndex) {
                             int rssi = buf.readByte();
                             position.getNetwork().addCellTower(CellTower.from(
                                     mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE(), rssi));
                         }
                         break;
                     case 0x22:
                         if (position.getNetwork() == null) {
                             position.setNetwork(new Network());
                         }
                         while (buf.readerIndex() < endIndex) {
                             int rssi = buf.readByte();
                             String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                             position.getNetwork().addWifiAccessPoint(WifiAccessPoint.from(
                                     mac.substring(0, mac.length() - 1), rssi));
                         }
                         break;
                     case 0x23:
                         position.set("tagId", readTagId(buf));
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setValid(true);
                         hasLocation = true;
                         break;
                     case 0x24:
                         position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                         long status = buf.readUnsignedIntLE();
                         if (BitUtil.check(status, 4)) {
                             position.set(Position.KEY_CHARGE, true);
                         }
                         if (BitUtil.check(status, 7)) {
                             position.set(Position.KEY_ARCHIVE, true);
                         }
                         position.set(Position.KEY_MOTION, BitUtil.check(status, 9));
                         position.set(Position.KEY_RSSI, BitUtil.between(status, 19, 24));
                         position.set(Position.KEY_BATTERY_LEVEL, BitUtil.from(status, 24));
                         position.set(Position.KEY_STATUS, status);
                         break;
                     case 0x28:
                         int beaconFlags = buf.readUnsignedByte();
                         position.set("tagId", readTagId(buf));
                         position.set("tagRssi", (int) buf.readByte());
                         position.set("tag1mRssi", (int) buf.readByte());
                         if (BitUtil.check(beaconFlags, 7)) {
                             position.setLatitude(buf.readIntLE() * 0.0000001);
                             position.setLongitude(buf.readIntLE() * 0.0000001);
                             position.setValid(true);
                             hasLocation = true;
                         }
                         if (BitUtil.check(beaconFlags, 6)) {
                             position.set("description", buf.readCharSequence(
                                     endIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString());
                         }
                         break;
                     case 0x2A:
                         buf.readUnsignedByte(); // flags
                         buf.skipBytes(6); // mac
                         buf.readUnsignedByte(); // rssi
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);
                         position.setValid(true);
                         hasLocation = true;
                         break;
                     case 0x30:
                         buf.readUnsignedIntLE(); // timestamp
                         position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
                         break;
                     case 0x31:
                         int i = 1;
                         while (buf.readerIndex() < endIndex) {
                             position.set("activity" + i + "Time", buf.readUnsignedIntLE());
                             position.set("activity" + i, buf.readUnsignedIntLE());
                             i += 1;
                         }
                         break;
                     case 0x37:
                         buf.readUnsignedIntLE(); // timestamp
                         long barking = buf.readUnsignedIntLE();
                         if (BitUtil.check(barking, 31)) {
                             position.set("barkStop", true);
                         }
                         position.set("barkCount", BitUtil.to(barking, 31));
                         break;
                     case 0x40:
                         buf.readUnsignedIntLE(); // timestamp
                         int heartRate = buf.readUnsignedByte();
                         if (heartRate > 1) {
                             position.set(Position.KEY_HEART_RATE, heartRate);
                         }
                         break;
                     default:
+                        // Skip unknown keys
                         break;
                 }
+                // Ensure reader index is at the end of the segment, even if not fully read
                 buf.readerIndex(endIndex);
             }
 
             if (!hasLocation) {
-                getLastLocation(position, null);
+                getLastLocation(position, position.getFixTime()); // Use current time if available
             }
+            // Add the last position if it contains some data
+             if (position.getDeviceId() != 0 || position.getFixTime() != null || position.getLatitude() != 0 || !position.getAttributes().isEmpty()) {
                 positions.add(position);
+            }
 
+            // If we identified the device, ensure all positions have the ID
             if (deviceSession != null) {
+                long deviceId = deviceSession.getDeviceId();
                 for (Position p : positions) {
-                    p.setDeviceId(deviceSession.getDeviceId());
+                    p.setDeviceId(deviceId);
                 }
-            } else {
-                return null;
             }
 
-            return positions;
+            // Return the list if it's not empty, otherwise null
+            return !positions.isEmpty() ? positions : null;
 
         }
 
-        return null;
+        return null; // Return null if message type is not MSG_DATA
     }
\ No newline at end of file
