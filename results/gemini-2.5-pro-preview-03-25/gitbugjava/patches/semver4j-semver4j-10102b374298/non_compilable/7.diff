diff --git a/tmp/1e545841-d54e-4bec-8690-7d8bab719dc0_buggy.java b/tmp/b8badd2c-0820-4ab6-bd91-38703e8067b3_fixed.java
index 593602f..00954a8 100644
--- a/tmp/1e545841-d54e-4bec-8690-7d8bab719dc0_buggy.java
+++ b/tmp/b8badd2c-0820-4ab6-bd91-38703e8067b3_fixed.java
@@ -1,6 +1,23 @@
     @Override
     public String toString() {
-        return rangesList.stream()
-            .map(RangesList::formatRanges)
-            .collect(joining(OR_JOINER));
+        // Format each individual range set (AND group)
+        java.util.List<String> formattedGroups = rangesList.stream()
+            .map(RangesList::formatRanges) // Assume this formats one AND group, potentially adding parentheses
+            .collect(java.util.stream.Collectors.toList());
+
+        // If there's only one group, return its formatted string, removing outer parentheses if present.
+        if (formattedGroups.size() == 1) {
+            String singleGroup = formattedGroups.get(0);
+            // Remove outer parentheses only if they were added by formatRanges
+            if (singleGroup.length() >= 2 && singleGroup.startsWith("(") && singleGroup.endsWith(")")) {
+                return singleGroup.substring(1, singleGroup.length() - 1);
+            } else {
+                return singleGroup; // Return as is if no surrounding parentheses
+            }
+        } else {
+            // If there are multiple groups, join them with the OR_JOINER.
+            // Assumes formatRanges provides the correct representation for each group in this context.
+            return formattedGroups.stream()
+                .collect(java.util.stream.Collectors.joining(OR_JOINER));
+        }
     }
\ No newline at end of file
