diff --git a/tmp/4be599d6-264a-4cff-a9a5-5228cff53941_buggy.java b/tmp/d7918135-8ded-4587-92b8-4374f6d6f1f7_fixed.java
index 593602f..e9a443f 100644
--- a/tmp/4be599d6-264a-4cff-a9a5-5228cff53941_buggy.java
+++ b/tmp/d7918135-8ded-4587-92b8-4374f6d6f1f7_fixed.java
@@ -1,6 +1,32 @@
     @Override
     public String toString() {
+        // If rangesList is empty, return empty string or other appropriate representation.
+        if (rangesList.isEmpty()) {
+            // Behavior for empty list might need refinement based on library specs.
+            return "";
+        }
+
+        // If there's only one set of AND conditions, format it without outer parentheses.
+        if (rangesList.size() == 1) {
+            // Assuming rangesList holds List<Range> or similar elements supporting toString().
+            List<?> singleSet = rangesList.get(0);
+            if (singleSet.isEmpty()) {
+                 return ""; // Handle empty inner set if necessary.
+            }
+            // Join the string representations of individual conditions with " and ".
+            // Assumes elements override toString() correctly (e.g., Range::toString).
+            // Assumes " and " is the correct joiner based on the test failure.
+            return singleSet.stream()
+                    .map(Object::toString)
+                    .collect(joining(" and "));
+        } else {
+            // If there are multiple sets (OR conditions), format each set using the helper
+            // method (which should handle adding parentheses if needed for clarity)
+            // and join the results with the OR_JOINER.
+            // Assumes RangesList::formatRanges exists and behaves appropriately.
+            // Assumes OR_JOINER constant holds the correct separator (e.g., " || ").
             return rangesList.stream()
                     .map(RangesList::formatRanges)
                     .collect(joining(OR_JOINER));
         }
+    }
\ No newline at end of file
