diff --git a/tmp/751e368a-546d-4c3f-a2a0-5dfe0ae87b60_buggy.java b/tmp/943df62b-dfbb-4634-aa85-066cc6fff15c_fixed.java
index 593602f..37c217c 100644
--- a/tmp/751e368a-546d-4c3f-a2a0-5dfe0ae87b60_buggy.java
+++ b/tmp/943df62b-dfbb-4634-aa85-066cc6fff15c_fixed.java
@@ -1,6 +1,29 @@
     @Override
     public String toString() {
+        // If the list contains only one set of ranges (a single group of potentially AND-connected conditions)
+        if (rangesList.size() == 1) {
+            // Format that single set. formatRanges might add parentheses if the set
+            // contains multiple conditions (e.g., ">=1.0.0 and <2.0.0").
+            String formatted = formatRanges(rangesList.get(0));
+
+            // According to the test `shouldOmitOuterParentheses`, these outer parentheses
+            // should be omitted when there's only one range set in the list.
+            if (formatted.startsWith("(") && formatted.endsWith(")")) {
+                // Remove the surrounding parentheses.
+                 return formatted.substring(1, formatted.length() - 1);
+            }
+            // If no parentheses were added by formatRanges (e.g., for a single condition like ">=1.0.0"),
+            // or if the formatting is unexpected, return it as is.
+            return formatted;
+        } else if (rangesList.isEmpty()) {
+            // Handle the case of an empty list.
+            return ""; // Or perhaps some other representation like "*" or "<empty>" depending on requirements.
+        } else {
+            // If there are multiple sets of ranges (representing OR conditions),
+            // format each set (formatRanges might add parentheses for clarity within each set)
+            // and join them using the OR separator.
             return rangesList.stream()
-            .map(RangesList::formatRanges)
+                .map(RangesList::formatRanges) // Assuming formatRanges is static or accessible.
                 .collect(joining(OR_JOINER));
         }
+    }
\ No newline at end of file
