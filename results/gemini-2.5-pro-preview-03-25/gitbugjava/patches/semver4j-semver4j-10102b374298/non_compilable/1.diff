diff --git a/tmp/5ed0c044-a3c3-4f2f-8ca1-d3501c8851cf_buggy.java b/tmp/f0b5f61f-5a49-408c-9578-1ed11423223b_fixed.java
index 593602f..b29b311 100644
--- a/tmp/5ed0c044-a3c3-4f2f-8ca1-d3501c8851cf_buggy.java
+++ b/tmp/f0b5f61f-5a49-408c-9578-1ed11423223b_fixed.java
@@ -1,6 +1,53 @@
+import java.util.List; // Assuming rangesList is a List
+import java.util.stream.Collectors; // For joining
+import static java.util.stream.Collectors.joining;
+
+// Assume OR_JOINER is a static final String defined elsewhere in the class or imported.
+// Assume rangesList is a field of type List<T> where T represents a single AND-group (e.g., a list or set of Range objects).
+// Assume RangesList::formatRanges is a static method `static String formatRanges(T element)`
+// which formats a single AND-group into a string like ">=1.0.0 and <2.0.0" or just ">=3.0.0".
+
     @Override
     public String toString() {
+        // Handle null or empty list case gracefully, maybe return empty string or throw exception
+        // depending on requirements. Assuming here it won't be null/empty based on typical usage.
+        if (rangesList == null || rangesList.isEmpty()) {
+            return ""; // Or handle as appropriate
+        }
+
+        // Check if there is only one AND-group in the list.
+        if (rangesList.size() == 1) {
+            // Format the single group using the referenced static method.
+            String singleRangeString = RangesList.formatRanges(rangesList.get(0));
+
+            // The test name "shouldOmitOuterParentheses" suggests that when there's only one group,
+            // any parentheses added by formatRanges specifically for grouping within an OR expression
+            // should be omitted. We heuristically remove surrounding parentheses.
+            // This assumes formatRanges might wrap outputs like "(>=1.0.0 and <2.0.0)"
+            // but should output ">=1.0.0 and <2.0.0" in this single-group context.
+            if (singleRangeString.startsWith("(") && singleRangeString.endsWith(")") && singleRangeString.length() > 2) {
+                // Simple heuristic: remove the outermost parentheses.
+                // A more complex check could involve parenthesis balancing if needed,
+                // but this covers the likely case implied by the test.
+                return singleRangeString.substring(1, singleRangeString.length() - 1);
+            }
+            // Return the formatted string directly if no outer parentheses were detected or removed.
+            return singleRangeString;
+        } else {
+            // If there are multiple AND-groups, format each one and join them with the OR_JOINER.
+            // In this case, parentheses added by formatRanges (if any, e.g., around AND groups)
+            // are likely necessary for correct logical precedence.
             return rangesList.stream()
-            .map(RangesList::formatRanges)
-            .collect(joining(OR_JOINER));
+                .map(RangesList::formatRanges) // Call the static formatting method for each group
+                .collect(joining(OR_JOINER)); // Join the results with the OR separator
         }
+    }
+
+    // NOTE: The following is a necessary assumption for the fix to compile and work.
+    // The class `RangesList` needs access to the elements of `rangesList` (assumed type T)
+    // and must have a static method like this:
+    // private static String formatRanges(T rangeSet) { /* implementation */ }
+    // The exact signature depends on the type T of elements in rangesList.
+    // If formatRanges is not static, the method reference `RangesList::formatRanges` is invalid in this context.
+    // If formatRanges is an instance method of the element type T, the map call should be `map(T::formatRanges)`.
+    // The provided fix assumes `RangesList::formatRanges` points to a static method within the same class.
