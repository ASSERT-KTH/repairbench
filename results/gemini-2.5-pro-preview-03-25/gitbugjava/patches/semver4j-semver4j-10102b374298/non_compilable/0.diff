diff --git a/tmp/45a8f481-6fa9-4fcf-8b44-6b7d35730860_buggy.java b/tmp/5feea2e6-09f6-4242-9f20-118b57b41044_fixed.java
index 593602f..4a56f25 100644
--- a/tmp/45a8f481-6fa9-4fcf-8b44-6b7d35730860_buggy.java
+++ b/tmp/5feea2e6-09f6-4242-9f20-118b57b41044_fixed.java
@@ -1,6 +1,27 @@
     @Override
     public String toString() {
-        return rangesList.stream()
-            .map(RangesList::formatRanges)
+        // Format each Ranges object (representing an AND group) using formatRanges.
+        // Join the formatted strings of multiple Ranges objects with the OR_JOINER.
+        String result = rangesList.stream()
+            .map(RangesList::formatRanges) // Assuming formatRanges formats a single Ranges object, potentially adding parentheses.
             .collect(joining(OR_JOINER));
+
+        // If there is only one Ranges object in the list, the OR_JOINER is not used.
+        // The test `shouldOmitOuterParentheses` implies that for a single Ranges object,
+        // any parentheses potentially added by `formatRanges` should be removed.
+        if (rangesList.size() == 1) {
+            // Check if the formatted result (of the single Ranges object)
+            // starts with '(' and ends with ')'.
+            if (result.startsWith("(") && result.endsWith(")")) {
+                // If so, remove the outer parentheses.
+                return result.substring(1, result.length() - 1);
+            }
+        }
+
+        // Return the final string representation.
+        // This will be either:
+        // - The formatted single Ranges object without outer parentheses (if they were present).
+        // - The formatted single Ranges object as is (if no outer parentheses were added).
+        // - Multiple formatted Ranges objects joined by OR_JOINER (parentheses likely kept for clarity).
+        return result;
     }
\ No newline at end of file
