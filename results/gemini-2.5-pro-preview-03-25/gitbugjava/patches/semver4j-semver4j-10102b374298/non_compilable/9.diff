diff --git a/tmp/9e1274f1-385d-40b4-b26a-c7a64ae7ee44_buggy.java b/tmp/543afd67-e064-4f16-ae00-5b0aaabcfca0_fixed.java
index 593602f..3304cd4 100644
--- a/tmp/9e1274f1-385d-40b4-b26a-c7a64ae7ee44_buggy.java
+++ b/tmp/543afd67-e064-4f16-ae00-5b0aaabcfca0_fixed.java
@@ -1,6 +1,28 @@
+import static java.util.stream.Collectors.joining;
+import java.util.List;
+import java.util.stream.Collectors;
+
     @Override
     public String toString() {
-        return rangesList.stream()
+        // Step 1: Format each individual group of ranges (presumably AND-connected)
+        // Assume formatRanges returns the string for a single group, like ">=3.0.0 and <=3.0.1"
+        List<String> formattedGroups = rangesList.stream()
             .map(RangesList::formatRanges)
+            .collect(Collectors.toList());
+
+        // Step 2: Combine the formatted groups
+        if (formattedGroups.isEmpty()) {
+            // If there are no groups, return an empty string.
+            return "";
+        } else if (formattedGroups.size() == 1) {
+            // If there is exactly one group, return its string representation directly.
+            // This omits the outer parentheses as required by the test.
+            return formattedGroups.get(0);
+        } else {
+            // If there are multiple groups, surround each group's string representation
+            // with parentheses and join them using the OR_JOINER.
+            return formattedGroups.stream()
+                .map(groupStr -> "(" + groupStr + ")")
                 .collect(joining(OR_JOINER));
         }
+    }
\ No newline at end of file
