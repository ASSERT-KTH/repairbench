diff --git a/tmp/ea2b129f-9660-4b71-82a8-92f320b0815c_buggy.java b/tmp/e24cf098-2a50-477b-908f-ba019bb00ee9_fixed.java
index 593602f..6330a94 100644
--- a/tmp/ea2b129f-9660-4b71-82a8-92f320b0815c_buggy.java
+++ b/tmp/e24cf098-2a50-477b-908f-ba019bb00ee9_fixed.java
@@ -1,6 +1,30 @@
     @Override
     public String toString() {
-        return rangesList.stream()
+        // Format each individual range set (AND-group)
+        // Assuming RangesList::formatRanges formats a single List<Range> potentially adding parentheses
+        List<String> formattedRanges = rangesList.stream()
                                           .map(RangesList::formatRanges)
-            .collect(joining(OR_JOINER));
+                                          .collect(Collectors.toList());
+
+        // If there's only one range set, return its representation.
+        // We need to omit the outer parentheses potentially added by formatRanges,
+        // as they are redundant when there's only one set.
+        if (formattedRanges.size() == 1) {
+            String singleRangeString = formattedRanges.get(0);
+            // Simple check to remove potentially added outer parentheses
+            if (singleRangeString.startsWith("(") && singleRangeString.endsWith(")")) {
+                // Remove parentheses only if they form a matching pair around the content
+                return singleRangeString.substring(1, singleRangeString.length() - 1);
+            } else {
+                // Return as is if no parentheses or they don't seem to be outer ones
+                return singleRangeString;
+            }
+        } else if (formattedRanges.isEmpty()) {
+             // Define behavior for an empty RangesList, returning "" seems reasonable.
+             return "";
+        } else {
+            // If there are multiple range sets (OR-groups), join them with the OR_JOINER.
+            // In this case, parentheses added by formatRanges (if any) are useful for grouping.
+            return String.join(OR_JOINER, formattedRanges);
+        }
     }
