diff --git a/tmp/fa129ce1-0540-4aa0-a982-4ff4e5a313cb_buggy.java b/tmp/b39e6d7b-9d75-4f44-b463-884034f46c66_fixed.java
index acd5eb5..786fddc 100644
--- a/tmp/fa129ce1-0540-4aa0-a982-4ff4e5a313cb_buggy.java
+++ b/tmp/b39e6d7b-9d75-4f44-b463-884034f46c66_fixed.java
@@ -1,32 +1,41 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // Note: normaliseWhite stays false for Script, Style data nodes, regardless of pretty-print setting
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode) && !(parentNode instanceof Document);
+        // Cervator: not normalising text in Document as this will currently cause \n to be added to top-level TextNodes
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            // Want to skip leading whitespace trim on first node in block, or first node in body (first node overall)
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document; // first node requires no leading space
+            trimTrailing = trimLikeBlock && nextSibling() == null; // last node requires no trailing space
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the previous node is a block, or the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+
+            // Check if this whitespace node can be skipped
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next element will add a newline + indent
+                || (next instanceof TextNode && ((TextNode) next).isBlank()) // next is blank text (and so might be skipped)
+                || (prev instanceof Element && ((Element) prev).isBlock()) // previous element is block, might have finished with a newline
+                || (isNode(prev, "br")); // previous element was a br tag, which implies a newline
             ;
-            if (couldSkip && isBlank) return;
+            if (couldSkip && isBlank) return; // don't output this blank text node, it's not needed
 
+            // Otherwise, if the previous node was a <br>, we want to indent. (Not skip, because the content may be non-blank)
+            // Or if this node is the first in a block (and not blank), or the first non-blank in outline mode.
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in block, but not blank
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // first non-blank node in outline mode
+                (prev != null && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                // ^ non-blank text after a <br> needs indent, otherwise spaces will be eaten. Blank text is skipped above.
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
