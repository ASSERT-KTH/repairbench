diff --git a/tmp/699c9869-1860-4ad4-af38-56b6161ec460_buggy.java b/tmp/61823ffb-43aa-434c-9dae-7a8dccfabe95_fixed.java
index acd5eb5..3554fd4 100644
--- a/tmp/699c9869-1860-4ad4-af38-56b6161ec460_buggy.java
+++ b/tmp/61823ffb-43aa-434c-9dae-7a8dccfabe95_fixed.java
@@ -1,32 +1,35 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // Parent is not null for TextNodes within Elements, but is null for Document's TextNodes. TextNodes in Documents are never pretty printed.
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            trimLeading = (trimLikeBlock && siblingIndex == 0); // Omit Calculation for Document -> trimLeading is always false for Documents. Document can't be trimLikeBlock.
+            trimTrailing = trimLikeBlock && nextSibling() == null; // Likewise, Document TextNodes can't be trimTrailing.
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, possibly from re-parenting
+                || (prev instanceof Element && ((Element) prev).isBlock()) // previous is block, must be blank node to skip
                 ;
             if (couldSkip && isBlank) return;
 
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            // otherwise, normalize the text content and determine if we need to indent now
+            boolean indent =
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first non-blank child of block = indent
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode = indent non-blank children
+                (siblingIndex > 0 && isNode(prev, "br") && !isBlank); // non-blank text after <br> = indent
+
+            if (indent) // Note: indent is checked before trimming for trailing space nodes. If the node is blank, indent will be false.
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
