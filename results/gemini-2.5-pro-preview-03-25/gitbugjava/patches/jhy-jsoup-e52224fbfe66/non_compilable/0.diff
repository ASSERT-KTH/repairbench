diff --git a/tmp/b2dee0c6-3e32-4f73-8a68-c0d536f1fba9_buggy.java b/tmp/658eb015-c0d1-43b7-9efd-177fe6882d84_fixed.java
index acd5eb5..c500043 100644
--- a/tmp/b2dee0c6-3e32-4f73-8a68-c0d536f1fba9_buggy.java
+++ b/tmp/658eb015-c0d1-43b7-9efd-177fe6882d84_fixed.java
@@ -1,32 +1,61 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // Note: `parentNode` alone is not sufficient determination for whitespace normalization handling,
+        // as the node may have been adopted. Use Element.preserveWhitespace(parentNode) instead.
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the next node would start on a new line, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
-                ;
-            if (couldSkip && isBlank) return;
+            boolean isBlank = isBlank(); // Trigger cache
+            boolean couldSkip = false;
+            if (next instanceof Element) {
+                couldSkip = ((Element) next).shouldIndent(out); // next will indent
+            } else if (next instanceof TextNode) {
+                couldSkip = ((TextNode) next).isBlank(); // next is blank text, sibling combiner considerations
+            } else if (next == null && parentNode instanceof Document) {
+                couldSkip = true; // Trimming outer document trailing space
+            }
 
+            // Previously tested `|| (prev instanceof Element && ((Element) prev).isBlock())` - but isBlock includes <br>
+            // which is not desired in this case. See https://github.com/jhy/jsoup/issues/1916
+
+            // Add specific check for blank node after <br>
+            // https://github.com/jhy/jsoup/issues/1447
+            if (!couldSkip && isNode(prev, "br") && !TextNode.lastCharIsWhitespace(accum)) {
+                // If the previous node was a <br>, and the accumulating buffer doesn't end in whitespace,
+                // we are pretty printing and this node is blank - so skip it. Avoids double indent.
+                couldSkip = true;
+            }
+
+            if (couldSkip && isBlank) return; // skip this text node
+
+            // Originally had `|| (siblingIndex > 0 && isNode(prev, "br"))` in indent check - moved that logic into the couldSkip check above
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in format-as-block, and not blank
+                (out.outline() && (siblingNodes().size() > 0 || parentIsBlock(parent)) && !isBlank) // outline mode, and not blank
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
+
+    // Helper method to check parent type and nullity
+    private boolean parentIsBlock(Element parent) {
+        return parent != null && parent.tag().isBlock();
+    }
+
+    // Helper copied from Node for context
+    private static boolean isNode(Node node, String name) {
+        return node != null && node.nodeName().equals(name);
+    }
\ No newline at end of file
