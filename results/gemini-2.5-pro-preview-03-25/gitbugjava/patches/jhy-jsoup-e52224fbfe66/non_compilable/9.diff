diff --git a/tmp/2ec10d52-3009-43df-b73b-5d57d73b8584_buggy.java b/tmp/642ef3ed-9ecd-451b-932a-e23d0fd87118_fixed.java
index acd5eb5..ed63be5 100644
--- a/tmp/2ec10d52-3009-43df-b73b-5d57d73b8584_buggy.java
+++ b/tmp/642ef3ed-9ecd-451b-932a-e23d0fd87118_fixed.java
@@ -1,32 +1,52 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+            // Skip blank text nodes between block elements or at the start/end of blocks
+            boolean couldSkip = false;
+            if (isBlank) {
+                 couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
+                     || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, ignore this one
+                     || (prev instanceof Element && (((Element) prev).isBlock())) // previous block element
                      ;
-            if (couldSkip && isBlank) return;
+                // Removed: || isNode(prev, "br") from couldSkip logic as it caused issues with <p><br /> </p> preserving space
+            }
 
+            if (couldSkip && isBlank) return; // if potentially skip, and this node is blank, skip.
+
+            // Pretty print newlines + indent:
+            // (Assume isNode is a helper method checking `node instanceof Element && ((Element) node).tagName().equals(name)`)
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // First node in block, and not blank. Or first node in Doc.
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first in block, not blank
+                (parentNode instanceof Document && siblingIndex == 0 && !isBlank) || // first in doc, not blank
+                // Outline mode, and not blank
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                // After a <br>, and not blank:
+                (prev != null && isNode(prev, "br") && !isBlank) || // Fix: Added !isBlank check. Prevents indenting blank lines after <br> that are removed by trimTrailing
+                // After a block element, and this node is not blank (whatever it is)
+                (prev != null && prev instanceof Element && ((Element) prev).tag().isBlock() && !isBlank)
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
+
+    // Helper method assumed to exist in the class, based on its usage in the original code.
+    private static boolean isNode(Node node, String name) {
+        return node instanceof Element && ((Element) node).tagName().equals(name);
+    }
\ No newline at end of file
