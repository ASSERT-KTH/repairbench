diff --git a/tmp/28b63d34-aedf-4ffd-9663-102ef009acdb_buggy.java b/tmp/4e7ad79b-5d31-4c42-aa66-aed6edb751d1_fixed.java
index acd5eb5..69585a2 100644
--- a/tmp/28b63d34-aedf-4ffd-9663-102ef009acdb_buggy.java
+++ b/tmp/4e7ad79b-5d31-4c42-aa66-aed6edb751d1_fixed.java
@@ -1,32 +1,39 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the next node should be skipped, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
+            // Skip leading whitespace if the previous element was a block, or a <br>, or if the previous element wasn't a block but the next is, AND this node is blank
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+                || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, potentially skips
+                || (prev instanceof Element && ((Element) prev).isBlock()) // prev is block
+                || (isNode(prev, "br")) // prev is <br>
                 ;
-            if (couldSkip && isBlank) return;
+            if (couldSkip && isBlank) return; // skip prefix whitespace if we determine it's not required
 
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in format-as-block container, and is not blank text
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode, and not blank text
+                (siblingIndex > 0 && isNode(prev, "br") && !isBlank) // preceding sibling was a <br> and this is not blank text
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
+
+    // Helper method assumed to exist from context (or should be added/available)
+    private static boolean isNode(Node node, String name) {
+        return node != null && node.nodeName().equals(name);
+    }
\ No newline at end of file
