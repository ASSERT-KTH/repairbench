diff --git a/tmp/0c93229d-6c80-41cb-b956-b4eaa1e6b4e4_buggy.java b/tmp/e5a1d227-6620-4f28-b61d-c45100a0f3e9_fixed.java
index acd5eb5..d8ef77b 100644
--- a/tmp/0c93229d-6c80-41cb-b956-b4eaa1e6b4e4_buggy.java
+++ b/tmp/e5a1d227-6620-4f28-b61d-c45100a0f3e9_fixed.java
@@ -1,32 +1,44 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+        boolean trimLeading = false, trimTrailing = false; // final values determined below
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+            // We need prev and isBlank ahead of the skip check
+            Node prev = previousSibling();
+            boolean isBlank = isBlank();
+            // We need trimTrailing calculated now
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
+            // Case: a TextNode is blank, follows a <br>, and is the last node in a block level element. Skip outputting this text node.
+            // Previously, this TextNode would be printed as " " (a single space), after the indent, creating undesirable "<br> \n"
+            if (isBlank && NodeUtil.isNode(prev, "br") && trimTrailing)
+                return;
+
+            // calculate trimLeading after the <br> check above
+            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
+
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            Node prev = previousSibling();
-            boolean isBlank = isBlank();
+            // Node prev = previousSibling(); // moved up
+            // boolean isBlank = isBlank(); // moved up
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+                || (NodeUtil.isNode(prev, Element.class) && ((Element) prev).isBlock()) // replaced direct check with NodeUtil for consistency, assuming Element implements Node
                 ;
             if (couldSkip && isBlank) return;
 
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && NodeUtil.isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
+        // Make sure we use the calculated trim settings
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
