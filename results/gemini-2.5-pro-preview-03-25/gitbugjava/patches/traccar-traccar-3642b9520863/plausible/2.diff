diff --git a/tmp/60b00a36-c948-4a29-8c8b-d6e38251cf74_buggy.java b/tmp/05fee800-e858-44be-afdd-1a904171da6a_fixed.java
index 568865c..c3fa19e 100644
--- a/tmp/60b00a36-c948-4a29-8c8b-d6e38251cf74_buggy.java
+++ b/tmp/05fee800-e858-44be-afdd-1a904171da6a_fixed.java
@@ -1,121 +1,167 @@
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() > 4) { // Need at least subtype (2) + length (2)
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int length = buf.readUnsignedShort() - 4; // Length includes subtype and length fields itself
             int endIndex = buf.readerIndex() + length;
+
+            // Basic validation for length and endIndex to prevent buffer overflows/errors
+            if (length < 0 || length > buf.readableBytes() || endIndex > buf.writerIndex()) {
+                // Invalid length or not enough readable bytes, stop processing subtypes
+                break;
+            }
+
             switch (subtype) {
                 case 0x0001:
+                    if (length >= 14) { // Ensure enough bytes for the fields read
                         int coolantTemperature = buf.readUnsignedByte() - 40;
                         if (coolantTemperature <= 215) {
                             position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                         }
                         int rpm = buf.readUnsignedShort();
                         if (rpm <= 65535) {
                             position.set(Position.KEY_RPM, rpm);
                         }
                         position.set("averageSpeed", buf.readUnsignedByte());
                         buf.readUnsignedShort(); // interval fuel consumption
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                         buf.readUnsignedInt(); // trip id
                         if (buf.readerIndex() < endIndex) {
                             position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                         }
+                    }
                     break;
                 case 0x0005:
+                     if (length >= 6) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                         buf.readUnsignedInt(); // run time
+                     }
                     break;
                 case 0x0009:
+                    if (length > 0) {
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    }
                     break;
                 case 0x0011:
+                    if (length >= 4) {
                         position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                    }
                     break;
                 case 0x0014:
+                     if (length >= 5) { // Adjusted minimum length check
                         position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                         position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                         position.set("airTemp", buf.readUnsignedByte() - 40);
                         position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                        if (buf.readerIndex() < endIndex) {
                             position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
+                        }
+                     }
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    if (length > 0) {
+                        String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        if (data != null && !data.isEmpty()) {
+                            String[] cells = data.split("\\+");
                             for (String cell : cells) {
                                 String[] values = cell.split("@");
+                                // Ensure we have exactly 4 parts before parsing
+                                if (values.length == 4) {
+                                    try {
                                         network.addCellTower(CellTower.from(
-                                Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                                Integer.parseInt(values[0]), // MCC (Decimal)
+                                                Integer.parseInt(values[1]), // MNC (Decimal)
+                                                Integer.parseInt(values[2]), // LAC (Decimal - Fix)
+                                                Integer.parseInt(values[3]))); // CID (Decimal - Fix)
+                                    } catch (NumberFormatException e) {
+                                        // Ignore invalid cell data segment
+                                    }
+                                }
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    if (length > 0) {
+                        String data = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                        if (data != null && !data.isEmpty()) {
+                            String[] points = data.split("\\+");
                             for (String point : points) {
                                 String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                                // Ensure we have exactly 2 parts before parsing
+                                if (values.length == 2) {
+                                    try {
+                                        network.addWifiAccessPoint(WifiAccessPoint.from(
+                                                values[0], Integer.parseInt(values[1]))); // MAC, RSSI (Decimal)
+                                    } catch (NumberFormatException e) {
+                                        // Ignore invalid wifi data segment
+                                    }
+                                }
+                            }
+                        }
                     }
                     break;
                 default:
+                    // Safely skip bytes for unknown or unhandled subtypes
                     buf.skipBytes(length);
                     break;
             }
+            // Ensure reader index is advanced correctly to the end of the current subtype block
             buf.readerIndex(endIndex);
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
