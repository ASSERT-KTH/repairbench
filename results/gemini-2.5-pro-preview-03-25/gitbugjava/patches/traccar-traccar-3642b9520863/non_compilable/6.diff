diff --git a/tmp/6091e322-724a-4eb1-98a1-4b02f9cd900f_buggy.java b/tmp/18f7f71b-8771-418e-bdfc-07e69052ee32_fixed.java
index 568865c..8a8c099 100644
--- a/tmp/6091e322-724a-4eb1-98a1-4b02f9cd900f_buggy.java
+++ b/tmp/18f7f71b-8771-418e-bdfc-07e69052ee32_fixed.java
@@ -1,121 +1,189 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.session.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.model.WifiAccessPoint;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+
+public abstract class HuaShengProtocolDecoder extends BaseProtocolDecoder { // Assume BaseProtocolDecoder exists and provides necessary methods like getDeviceSession, getProtocolName, sendResponse, etc.
+
+    // Define MSG_POSITION_RSP if it's a constant used here
+    private static final int MSG_POSITION_RSP = 0x8001; // Example value, replace with actual if different
+
+    // Dummy methods to satisfy compilation, replace with actual implementations or context
+    private String decodeAlarm(int event) {
+        // Implementation depends on the protocol specification
+        return null;
+    }
+
+    private void sendResponse(Channel channel, int type, int index, ByteBuf data) {
+        // Implementation for sending response
+    }
+
+    public HuaShengProtocolDecoder(Protocol protocol) {
+        super(protocol);
+    }
+
+
     private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                 .setYear(Integer.parseInt(time.substring(0, 2)))
                 .setMonth(Integer.parseInt(time.substring(2, 4)))
                 .setDay(Integer.parseInt(time.substring(4, 6)))
                 .setHour(Integer.parseInt(time.substring(6, 8)))
                 .setMinute(Integer.parseInt(time.substring(8, 10)))
                 .setSecond(Integer.parseInt(time.substring(10, 12)));
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
         while (buf.readableBytes() > 4) {
             int subtype = buf.readUnsignedShort();
             int length = buf.readUnsignedShort() - 4;
+            if (length < 0 || length > buf.readableBytes()) {
+                 // Invalid length, break or log error
+                 break;
+            }
             int endIndex = buf.readerIndex() + length;
             switch (subtype) {
                 case 0x0001:
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
                     if (buf.readerIndex() < endIndex) {
                         position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                     }
                     break;
                 case 0x0005:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
                     break;
                 case 0x0009:
                     position.set(
                             Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                     break;
                 case 0x0011:
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                     break;
                 case 0x0014:
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                     break;
                 case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    String cellsString = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    String[] cells = cellsString.split("\\+");
                     for (String cell : cells) {
+                        if (cell.isEmpty()) {
+                            continue;
+                        }
                         String[] values = cell.split("@");
+                        if (values.length >= 4) {
+                            try {
                                 network.addCellTower(CellTower.from(
                                         Integer.parseInt(values[0]), Integer.parseInt(values[1]),
-                                Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
+                                        Integer.parseInt(values[2], 16), (int) Long.parseLong(values[3], 16)));
+                            } catch (NumberFormatException e) {
+                                // Log error or ignore invalid cell data
+                            }
+                        }
                     }
                     break;
                 case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                    String pointsString = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                    String[] points = pointsString.split("\\+");
                     for (String point : points) {
+                         if (point.isEmpty()) {
+                            continue;
+                        }
                         String[] values = point.split("@");
-                        network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
+                        if (values.length >= 2) {
+                            try {
+                                network.addWifiAccessPoint(WifiAccessPoint.from(
+                                        values[0], Integer.parseInt(values[1])));
+                            } catch (NumberFormatException e) {
+                                // Log error or ignore invalid wifi data
+                            }
+                        }
                     }
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
+            // Ensure readerIndex does not go beyond endIndex, especially if parsing logic inside switch was flawed
+            if (buf.readerIndex() > endIndex) {
+                 // Log error: Over-read buffer in subtype handling
+                 buf.readerIndex(endIndex); // Attempt to correct index
+            } else {
+                // Skip any remaining bytes if the case didn't read exactly 'length' bytes
                  buf.readerIndex(endIndex);
             }
+        }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+        if (network.hasCell() || network.hasWifi()) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
+}
\ No newline at end of file
