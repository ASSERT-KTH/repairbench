diff --git a/tmp/8dd0a24a-6512-464c-a3cb-b36162d196cb_buggy.java b/tmp/e16b0de6-eaa0-4091-802a-31ddd8b9231e_fixed.java
index 921b73e..5e6990c 100644
--- a/tmp/8dd0a24a-6512-464c-a3cb-b36162d196cb_buggy.java
+++ b/tmp/e16b0de6-eaa0-4091-802a-31ddd8b9231e_fixed.java
@@ -1,303 +1,396 @@
     private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.set(Position.KEY_ALARM, decodeAlarm(buf.readUnsignedInt()));
 
         decodeCoordinates(position, buf);
 
         position.setAltitude(buf.readShort());
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort() * 0.1));
         position.setCourse(buf.readUnsignedShort());
         position.setTime(readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE)));
 
+        // Check for the fixed 20-byte format AFTER reading the common fields
+        // Common fields read: alarm(4) + coords(13) + alt(2) + speed(2) + course(2) + time(6) = 29 bytes.
+        // If exactly 20 bytes remain after these, use the fixed format.
         if (buf.readableBytes() == 20) {
-
             buf.skipBytes(4); // remaining battery and mileage
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
+            // The battery calculation here uses 0.1 multiplier.
             position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
             buf.readUnsignedInt(); // area id
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             buf.skipBytes(3); // reserved
-
             return position;
-
         }
 
-        while (buf.readableBytes() > 2) {
+        // Handle variable TLV extensions
+        while (buf.readableBytes() > 1) { // Need at least subtype and length bytes
 
+            buf.markReaderIndex(); // Mark position before reading TLV header
             int subtype = buf.readUnsignedByte();
+            if (!buf.isReadable()) {
+                 // Should not happen if readableBytes > 1, but safety check
+                 buf.resetReaderIndex();
+                 break;
+            }
             int length = buf.readUnsignedByte();
-            int endIndex = buf.readerIndex() + length;
+            int currentReaderIndex = buf.readerIndex();
+            int endIndex = currentReaderIndex + length;
+
+            // Boundary check: ensure declared length doesn't lead beyond buffer limits
+            if (endIndex > buf.writerIndex()) {
+                // Log error: "TLV length exceeds buffer bounds"
+                buf.resetReaderIndex(); // Restore index to before this invalid TLV header
+                break; // Stop processing TLVs for this message
+            }
+
+            // Boundary check: ensure buffer has enough remaining bytes for the declared value length
+            if (length > buf.readableBytes()) {
+                 // Log error: "Not enough data in buffer for declared TLV length"
+                 buf.resetReaderIndex(); // Restore index
+                 break; // Stop processing TLVs
+            }
+
             String stringValue;
             switch (subtype) {
-                case 0x01:
+                case 0x01: // Odometer
+                    if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                    }
                     break;
-                case 0x02:
+                case 0x02: // Fuel Level
+                    if (length >= 2) {
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0x2b:
+                case 0x2b: // Fuel Consumption
+                    if (length >= 4) {
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
+                    }
                     break;
-                case 0x30:
+                case 0x30: // RSSI
+                    if (length >= 1) {
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x31:
+                case 0x31: // Satellites
+                    if (length >= 1) {
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0x33:
+                case 0x33: // String based lock status / battery
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
-                    if (stringValue.startsWith("*M00")) {
-                        String lockStatus = stringValue.substring(8, 8 + 7);
+                        if (stringValue.startsWith("*M00") && stringValue.length() >= 15) { // Check length before substring
+                            String lockStatus = stringValue.substring(8, 15); // 7 chars expected
+                            if (lockStatus.length() >= 5) { // Check length for substring [2, 5)
+                                try {
                                     position.set(Position.KEY_BATTERY, Integer.parseInt(lockStatus.substring(2, 5)) * 0.01);
+                                } catch (NumberFormatException e) {
+                                    // Ignore parsing error
+                                }
+                            }
+                        }
                     }
                     break;
-                case 0x60:
+                case 0x60: // Event Code
+                    if (length >= 2) {
                         position.set(Position.KEY_EVENT, buf.readUnsignedShort());
-                    buf.skipBytes(length - 2);
+                    }
                     break;
-                case 0x80:
-                    buf.readUnsignedByte(); // content
-                    endIndex = buf.writerIndex() - 2;
+                case 0x69: // ADDED CASE FOR BATTERY based on test data inspection (0x018B -> 3.95)
+                    if (length == 2) {
+                       position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    }
+                    break;
+                case 0x80: // Extension data block
+                    // Original code incorrectly modified endIndex.
+                    // Assuming decodeExtension parses the content of this TLV item up to the correct endIndex.
+                    if (length > 0) {
+                         // Pass the correct end boundary for this TLV item
                          decodeExtension(position, buf, endIndex);
+                    }
                     break;
-                case 0x91:
+                case 0x91: // OBD data block
+                     // Calculate required length: 2+2+1+1+1+1+2+2+2+4+2+2 = 24 bytes
+                     if (length >= 24) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                         position.set(Position.KEY_RPM, buf.readUnsignedShort());
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
-                    position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100 / 255);
-                    position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100 / 255);
+                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() * 100.0 / 255.0); // Use float division
+                        position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() * 100.0 / 255.0); // Use float division
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedByte() - 40);
-                    buf.readUnsignedShort();
+                        buf.skipBytes(2); // Skip unknown/reserved
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
-                    buf.readUnsignedShort();
-                    buf.readUnsignedInt();
-                    buf.readUnsignedShort();
+                        buf.skipBytes(2); // Skip unknown/reserved
+                        buf.skipBytes(4); // Skip unknown/reserved
+                        buf.skipBytes(2); // Skip unknown/reserved
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShort() * 0.01);
+                     }
                     break;
-                case 0x94:
+                case 0x94: // VIN
                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_VIN, stringValue);
                     }
                     break;
-                case 0xA7:
+                case 0xA7: // ADC values
+                    if (length >= 4) {
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                         position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    }
                     break;
-                case 0xAC:
+                case 0xAC: // Odometer (alternative)
+                     if (length >= 4) {
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+                    }
                     break;
-                case 0xBC:
+                case 0xBC: // Driver Name string
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set("driver", stringValue.trim());
+                    }
                     break;
-                case 0xBD:
+                case 0xBD: // Driver ID string
+                     if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, stringValue);
+                    }
                     break;
-                case 0xD0:
+                case 0xD0: // User Status / Vibration Alarm
+                     if (length >= 4) {
                         long userStatus = buf.readUnsignedInt();
                         if (BitUtil.check(userStatus, 3)) {
                             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                         }
+                     }
                     break;
-                case 0xD3:
+                case 0xD3: // Power (Voltage)
+                     if (length >= 2) {
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
+                    }
                     break;
-                case 0xD4:
-                case 0xE1:
+                case 0xD4: // Battery Level percentage
+                case 0xE1: // Battery Level percentage (duplicate type code?)
+                     if (length >= 1) {
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xD5:
+                case 0xD5: // Battery Voltage or Lock Status
                     if (length == 2) {
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                    } else {
-                        int count = buf.readUnsignedByte();
+                    } else if (length > 0) {
+                        // Check if structure matches lock info format
+                        int count = buf.getUnsignedByte(buf.readerIndex()); // Peek count byte
+                        int expectedLength = 1 + count * (5 + 5 + 1 + 2); // Calculate expected length based on count
+                        if (count > 0 && length == expectedLength) {
+                            buf.readUnsignedByte(); // Consume count byte
                             for (int i = 1; i <= count; i++) {
+                                // Ensure enough bytes for one lock structure before reading
+                                if (buf.readableBytes() >= 13) {
                                     position.set("lock" + i + "Id", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Card", ByteBufUtil.hexDump(buf.readSlice(5)));
                                     position.set("lock" + i + "Battery", buf.readUnsignedByte());
                                     int status = buf.readUnsignedShort();
                                     position.set("lock" + i + "Locked", !BitUtil.check(status, 5));
+                                } else {
+                                     break; // Not enough data remaining for the full lock structure
                                 }
                             }
+                        }
+                        // If length doesn't match expected structure, data will be skipped below
+                    }
                     break;
-                case 0xDA:
-                    buf.readUnsignedShort(); // string cut count
+                case 0xDA: // Device Status (String Cut, Motion, Cover)
+                    if (length >= 3) {
+                        buf.readUnsignedShort(); // string cut count (unused)
                         int deviceStatus = buf.readUnsignedByte();
                         position.set("string", BitUtil.check(deviceStatus, 0));
                         position.set(Position.KEY_MOTION, BitUtil.check(deviceStatus, 2));
                         position.set("cover", BitUtil.check(deviceStatus, 3));
+                    }
                     break;
-                case 0xE6:
+                case 0xE6: // Wireless Temperature/Humidity Sensors
+                    // Unknown structure of decodeCustomDouble, loop safely until endIndex
                     while (buf.readerIndex() < endIndex) {
+                        if (buf.readableBytes() < 7) break; // Need at least index(1) + mac(6)
                         int sensorIndex = buf.readUnsignedByte();
                         buf.skipBytes(6); // mac
+                        // Assume decodeCustomDouble handles reading its data and stops before endIndex
+                        if (buf.readerIndex() < endIndex) {
                              position.set(Position.PREFIX_TEMP + sensorIndex, decodeCustomDouble(buf));
+                        }
+                        if (buf.readerIndex() < endIndex) {
                              position.set("humidity" + sensorIndex, decodeCustomDouble(buf));
                         }
+                        // Break if decodeCustomDouble didn't advance readerIndex to prevent infinite loop
+                        if (buf.readerIndex() == currentReaderIndex + 7) { // Check if index only advanced by 7 (index+mac)
                             break;
-                case 0xEB:
-                    if (buf.getUnsignedShort(buf.readerIndex()) > 200) {
+                        }
+                    }
+                    break;
+                case 0xEB: // Network Info or Nested Extended TLVs
+                    if (length > 0) {
+                        int firstTwoBytes = buf.getUnsignedShort(buf.readerIndex()); // Peek first 2 bytes
+                        // Use heuristic: MCC > 200 likely means GSM Cell Info structure
+                        if (firstTwoBytes > 200 && length >= 3) { // GSM Cell Info
+                             if (buf.readableBytes() >= 3) { // Check readable bytes before reading
                                 Network network = new Network();
                                 int mcc = buf.readUnsignedShort();
                                 int mnc = buf.readUnsignedByte();
-                        while (buf.readerIndex() < endIndex) {
+                                // Size of each cell tower: lac(2) + cid(2) + rssi(1) = 5 bytes
+                                while (buf.readableBytes() >= 5 && buf.readerIndex() < endIndex) {
                                     network.addCellTower(CellTower.from(
                                             mcc, mnc, buf.readUnsignedShort(), buf.readUnsignedShort(),
                                             buf.readUnsignedByte()));
                                 }
+                                if (!network.getCellTowers().isEmpty()) {
                                     position.setNetwork(network);
-                    } else {
-                        while (buf.readerIndex() < endIndex) {
-                            int extendedLength = buf.readUnsignedShort();
+                                }
+                             }
+                        } else { // Nested Extended TLVs (Type(2)+Length(2)+Value)
+                            while (buf.readableBytes() >= 4 && buf.readerIndex() < endIndex) { // Need inner header
+                                int extendedLength = buf.readUnsignedShort(); // Total length including type field
                                 int extendedType = buf.readUnsignedShort();
+                                int extendedValueIndex = buf.readerIndex();
+                                int bytesInValue = extendedLength - 2; // Length of value part
+                                int extendedEndIndex = extendedValueIndex + bytesInValue;
+
+                                // Validate inner TLV structure and boundaries
+                                if (extendedLength < 2 || bytesInValue < 0 || extendedEndIndex > endIndex) {
+                                    break; // Invalid inner TLV structure or boundary violation
+                                }
+                                 if (buf.readableBytes() < bytesInValue) {
+                                     break; // Not enough data for inner value
+                                 }
+
+                                // Process known inner types
                                 switch (extendedType) {
-                                case 0x0001:
-                                    position.set("fuel1", buf.readUnsignedShort() * 0.1);
-                                    buf.readUnsignedByte(); // unused
-                                    break;
-                                case 0x0023:
-                                    position.set("fuel2", Double.parseDouble(
-                                            buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
-                                    break;
-                                case 0x00CE:
-                                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                    break;
-                                case 0x00D8:
-                                    Network network = new Network();
-                                    network.addCellTower(CellTower.from(
-                                            buf.readUnsignedShort(), buf.readUnsignedByte(),
-                                            buf.readUnsignedShort(), buf.readUnsignedInt()));
-                                    position.setNetwork(network);
-                                    break;
-                                case 0xE1:
-                                    position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                                    break;
-                                default:
-                                    buf.skipBytes(extendedLength - 2);
-                                    break;
+                                    case 0x0001: if (bytesInValue >= 3) { position.set("fuel1", buf.readUnsignedShort() * 0.1); buf.readUnsignedByte(); } break;
+                                    case 0x0023: if (bytesInValue >= 6) { try { position.set("fuel2", Double.parseDouble(buf.readCharSequence(6, StandardCharsets.US_ASCII).toString())); } catch (Exception e) {/* ignore */} } break;
+                                    case 0x00CE: if (bytesInValue >= 2) { position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01); } break;
+                                    case 0x00D8: if (bytesInValue >= 9) { Network n = new Network(); n.addCellTower(CellTower.from(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedShort(), buf.readUnsignedInt())); position.setNetwork(n); } break;
+                                    case 0xE1:   if (bytesInValue >= 1) { position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte()); } break;
+                                    default: break; // Skip unknown inner type
+                                }
+                                buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block
                             }
                         }
                     }
                     break;
-                case 0xED:
+                case 0xED: // Card string
+                    if (length > 0) {
                         stringValue = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
                         position.set(Position.KEY_CARD, stringValue.trim());
+                    }
                     break;
-                case 0xEE:
+                case 0xEE: // RSSI, Power, Battery, Satellites block
+                     if (length >= 6) { // 1+2+2+1 = 6 bytes
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    }
                     break;
-                case 0xF3:
-                    while (buf.readerIndex() < endIndex) {
+                case 0xF3: // OBD Data (Nested TLV: type(2)+len(1)+value)
+                     while (buf.readableBytes() >= 3 && buf.readerIndex() < endIndex) { // Need inner header
                         int extendedType = buf.readUnsignedShort();
-                        int extendedLength = buf.readUnsignedByte();
+                        if (buf.readableBytes() < 1) break; // Need inner length byte
+                        int extendedLength = buf.readUnsignedByte(); // Length of value part
+                        int extendedValueIndex = buf.readerIndex();
+                        int extendedEndIndex = extendedValueIndex + extendedLength;
+
+                        // Validate inner TLV structure and boundaries
+                        if (extendedLength < 0 || extendedEndIndex > endIndex) {
+                           break; // Invalid inner TLV structure or boundary violation
+                        }
+                         if (buf.readableBytes() < extendedLength) {
+                             break; // Not enough data for inner value
+                         }
+
+                        // Process known inner types
                         switch (extendedType) {
-                            case 0x0002:
-                                position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0003:
-                                position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                                break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
-                                break;
-                            case 0x0005:
-                                position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100);
-                                break;
-                            case 0x0007:
-                                position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0008:
-                                position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0009:
-                                position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000B:
-                                position.set("intakePressure", buf.readUnsignedShort());
-                                break;
-                            case 0x000C:
-                                position.set("intakeTemp", buf.readUnsignedShort() - 40);
-                                break;
-                            case 0x000D:
-                                position.set("intakeFlow", buf.readUnsignedShort());
-                                break;
-                            case 0x000E:
-                                position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100 / 255);
-                                break;
-                            case 0x0050:
-                                position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII));
-                                break;
-                            case 0x0100:
-                                position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0102:
-                                position.set("tripFuel", buf.readUnsignedShort() * 0.1);
-                                break;
-                            case 0x0112:
-                                position.set("hardAccelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0113:
-                                position.set("hardDecelerationCount", buf.readUnsignedShort());
-                                break;
-                            case 0x0114:
-                                position.set("hardCorneringCount", buf.readUnsignedShort());
-                                break;
-                            default:
-                                buf.skipBytes(extendedLength);
-                                break;
+                            case 0x0002: if (extendedLength >= 2) position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0003: if (extendedLength >= 2) position.set(Position.KEY_RPM, buf.readUnsignedShort()); break;
+                            case 0x0004: if (extendedLength >= 2) position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001); break;
+                            case 0x0005: if (extendedLength >= 4) position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 100); break;
+                            case 0x0007: if (extendedLength >= 2) position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0008: if (extendedLength >= 2) position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0009: if (extendedLength >= 2) position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShort() - 40); break;
+                            case 0x000B: if (extendedLength >= 2) position.set("intakePressure", buf.readUnsignedShort()); break;
+                            case 0x000C: if (extendedLength >= 2) position.set("intakeTemp", buf.readUnsignedShort() - 40); break;
+                            case 0x000D: if (extendedLength >= 2) position.set("intakeFlow", buf.readUnsignedShort()); break;
+                            case 0x000E: if (extendedLength >= 2) position.set(Position.KEY_THROTTLE, buf.readUnsignedShort() * 100.0 / 255.0); break;
+                            case 0x0050: if (extendedLength >= 17) position.set(Position.KEY_VIN, buf.readSlice(17).toString(StandardCharsets.US_ASCII)); break;
+                            case 0x0100: if (extendedLength >= 2) position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort() * 0.1); break;
+                            case 0x0102: if (extendedLength >= 2) position.set("tripFuel", buf.readUnsignedShort() * 0.1); break;
+                            case 0x0112: if (extendedLength >= 2) position.set("hardAccelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0113: if (extendedLength >= 2) position.set("hardDecelerationCount", buf.readUnsignedShort()); break;
+                            case 0x0114: if (extendedLength >= 2) position.set("hardCorneringCount", buf.readUnsignedShort()); break;
+                            default: break; // Skip unknown inner type
                         }
+                        buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block
                     }
                     break;
-                case 0xFE:
-                    if (length == 1) {
+                case 0xFE: // Battery Level or Driving Behavior Alarms (Nested TLV: marker(0x7C)+type(1)+len(1)+value)
+                    if (length == 1) { // Simple case: single byte battery level
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                    } else {
-                        int mark = buf.readUnsignedByte();
-                        if (mark == 0x7C) {
-                            while (buf.readerIndex() < endIndex) {
+                    } else if (length > 0) {
+                        // Check for 0x7C marker indicating nested TLV structure
+                        if (buf.getUnsignedByte(buf.readerIndex()) == 0x7C) {
+                            buf.readUnsignedByte(); // Consume 0x7C marker
+                             // Process inner TLVs (type(1)+len(1)+value)
+                             while (buf.readableBytes() >= 2 && buf.readerIndex() < endIndex) { // Need inner header
                                 int extendedType = buf.readUnsignedByte();
-                                int extendedLength = buf.readUnsignedByte();
+                                if (buf.readableBytes() < 1) break; // Need inner length byte
+                                int extendedLength = buf.readUnsignedByte(); // Length of value part
+                                int extendedValueIndex = buf.readerIndex();
+                                int extendedEndIndex = extendedValueIndex + extendedLength;
+
+                                // Validate inner TLV structure and boundaries
+                                if (extendedLength < 0 || extendedEndIndex > endIndex) {
+                                   break; // Invalid inner TLV structure or boundary violation
+                                }
+                                 if (buf.readableBytes() < extendedLength) {
+                                     break; // Not enough data for inner value
+                                 }
+
+                                // Process known inner types
                                 switch (extendedType) {
-                                    case 0x01:
+                                    case 0x01: // Driving Behavior Alarms
+                                        if (extendedLength >= 4) {
                                             long alarms = buf.readUnsignedInt();
-                                        if (BitUtil.check(alarms, 0)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                            // Use position.add to accumulate multiple alarms if necessary
+                                            if (BitUtil.check(alarms, 0)) position.add(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+                                            if (BitUtil.check(alarms, 1)) position.add(Position.KEY_ALARM, Position.ALARM_BRAKING);
+                                            if (BitUtil.check(alarms, 2)) position.add(Position.KEY_ALARM, Position.ALARM_CORNERING);
+                                            if (BitUtil.check(alarms, 3)) position.add(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
+                                            if (BitUtil.check(alarms, 4)) position.add(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                                         }
-                                        if (BitUtil.check(alarms, 1)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
-                                        }
-                                        if (BitUtil.check(alarms, 2)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
-                                        }
-                                        if (BitUtil.check(alarms, 3)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);
-                                        }
-                                        if (BitUtil.check(alarms, 4)) {
-                                            position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
-                                        }
-                                        break;
-                                    default:
-                                        buf.skipBytes(extendedLength);
                                         break;
+                                    default: break; // Skip unknown inner type
                                 }
+                                buf.readerIndex(extendedEndIndex); // Ensure index is at end of inner value block
                              }
+                        } else {
+                             // If marker is not 0x7C, assume original intent was single byte battery level if length=1
+                             // (already handled by the length == 1 check above)
+                             // If length > 1 and no 0x7C, the format is unknown, data will be skipped.
                         }
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     }
                     break;
                 default:
+                    // Unknown subtype, data will be skipped by buf.readerIndex(endIndex) below
                     break;
             }
+            // Ensure reader index is advanced to the end of the TLV item's value block.
+            // This handles skipping unknown subtypes and ensures correct positioning even
+            // if a case handler didn't read the full length (due to insufficient data or format mismatch).
             buf.readerIndex(endIndex);
         }
 
         return position;
     }
\ No newline at end of file
