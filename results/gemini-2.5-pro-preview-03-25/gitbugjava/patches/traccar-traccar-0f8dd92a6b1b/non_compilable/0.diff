diff --git a/tmp/197946ab-cd0f-4c75-a60d-fdc7c67df2bc_buggy.java b/tmp/d1e44c97-d645-42b6-84e1-ca6e4f1eeb46_fixed.java
index 144f6a9..a6bb810 100644
--- a/tmp/197946ab-cd0f-4c75-a60d-fdc7c67df2bc_buggy.java
+++ b/tmp/d1e44c97-d645-42b6-84e1-ca6e4f1eeb46_fixed.java
@@ -1,394 +1,430 @@
     private Object decodeExtended(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         if (!deviceSession.contains(DeviceSession.KEY_TIMEZONE)) {
             deviceSession.set(DeviceSession.KEY_TIMEZONE, getTimeZone(deviceSession.getDeviceId()));
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        buf.readUnsignedShort(); // length
-        int type = buf.readUnsignedByte();
+        // Original buffer slice includes length field(s), type, payload, index, checksum.
+        // Determine if the frame format was 7878 (1 byte length) or 7979 (2 bytes length)
+        // by checking the total buffer size against the length field value inside the buffer.
+        int length;
+        int type;
+        int headerLength; // Number of bytes for length field + type field
 
-        if (type == MSG_STRING_INFO) {
+        // Check for 7878 format: slice_size = length_value + 2 (length byte itself, type, payload, index, crc)
+        if (buf.readableBytes() > 0 && buf.readableBytes() == buf.getUnsignedByte(buf.readerIndex()) + 2) {
+            length = buf.readUnsignedByte(); // Read 1-byte length field value
+            type = buf.readUnsignedByte();   // Read type
+            headerLength = 1 + 1; // length byte + type byte
+        // Check for 7979 format: slice_size = length_value + 4 (length short, type, payload, index, crc)
+        } else if (buf.readableBytes() > 1 && buf.readableBytes() == buf.getUnsignedShort(buf.readerIndex()) + 4) {
+            length = buf.readUnsignedShort(); // Read 2-byte length field value
+            type = buf.readUnsignedByte();    // Read type
+            headerLength = 2 + 1; // length short + type byte
+        } else {
+            // Unknown frame format or corrupted buffer
+             return null;
+        }
 
-            buf.readUnsignedInt(); // server flag
+        // Calculate payload length (data between type and index)
+        // Total length field value = type(1) + payload(?) + index(2) + crc(2) = payloadLength + 5
+        // So, payloadLength = length - 5
+        int payloadLength = length - 5;
+        if (payloadLength < 0) {
+             return null; // Invalid length
+        }
+
+        // Create a slice for the payload only to avoid reading past it into index/crc
+        // The reader index is currently after the type byte.
+        ByteBuf payloadBuf = buf.readSlice(payloadLength);
+
+
+        if (type == MSG_STRING_INFO) { // 0x21 or 0x94 (Used by 7979 frames)
+
+            if (payloadBuf.readableBytes() < 5) return null; // Need server flag (4) + encoding (1)
+            payloadBuf.readUnsignedInt(); // server flag
             String data;
-            if (buf.readUnsignedByte() == 1) {
-                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.US_ASCII);
+            int encoding = payloadBuf.readUnsignedByte();
+            // Remaining bytes in payloadBuf are the data string
+            if (encoding == 1) {
+                data = payloadBuf.toString(StandardCharsets.US_ASCII);
             } else {
-                data = buf.readSlice(buf.readableBytes() - 6).toString(StandardCharsets.UTF_16BE);
+                data = payloadBuf.toString(StandardCharsets.UTF_16BE);
             }
 
             Parser parser = new Parser(PATTERN_LOCATION, data);
 
             if (parser.matches()) {
                 position.setValid(true);
                 position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
                 position.setCourse(parser.nextDouble());
                 position.setSpeed(parser.nextDouble());
                 position.setTime(parser.nextDateTime(Parser.DateTimeFormat.YMD_HMS));
             } else {
                 getLastLocation(position, null);
                 position.set(Position.KEY_RESULT, data);
             }
 
             return position;
 
-        } else if (type == MSG_INFO) {
+        } else if (type == MSG_INFO) { // 0x13
 
-            int subType = buf.readUnsignedByte();
+            if (payloadBuf.readableBytes() < 1) return null; // Need at least subType
+            int subType = payloadBuf.readUnsignedByte();
 
             getLastLocation(position, null);
 
             if (subType == 0x00) {
-
-                position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.01);
+                if (payloadBuf.readableBytes() < 2) return position; // Not enough data, return partial
+                position.set(Position.PREFIX_ADC + 1, payloadBuf.readUnsignedShort() * 0.01);
                 return position;
 
             } else if (subType == 0x05) {
-
-                if (buf.readableBytes() >= 6 + 1 + 6) {
+                if (payloadBuf.readableBytes() >= 7) { // Needs 6 (time) + 1 (flags) = 7 bytes
                     DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
-                            .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
-                            .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+                            .setDate(payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte())
+                            .setTime(payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte());
                     position.setDeviceTime(dateBuilder.getDate());
-                }
 
-                int flags = buf.readUnsignedByte();
+                    int flags = payloadBuf.readUnsignedByte();
                     position.set(Position.KEY_DOOR, BitUtil.check(flags, 0));
                     position.set(Position.PREFIX_IO + 1, BitUtil.check(flags, 2));
-                return position;
+                }
+                return position; // Return position even if time/flags couldn't be read
 
             } else if (subType == 0x0a) {
-
-                buf.skipBytes(8); // imei
-                buf.skipBytes(8); // imsi
-                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", ""));
+                if (payloadBuf.readableBytes() < 26) return position; // Needs 8 (imei) + 8 (imsi) + 10 (iccid) = 26 bytes
+                payloadBuf.skipBytes(8); // imei
+                payloadBuf.skipBytes(8); // imsi
+                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(payloadBuf.readSlice(10)).replaceAll("f", ""));
                 return position;
 
             } else if (subType == 0x0d) {
-
-                if (buf.getByte(buf.readerIndex()) != '!') {
-                    buf.skipBytes(6);
+                int fuelDataLength = payloadBuf.readableBytes();
+                if (fuelDataLength > 0 && payloadBuf.getByte(payloadBuf.readerIndex()) != '!') {
+                    if (fuelDataLength < 6) return position; // Not enough data to skip
+                    payloadBuf.skipBytes(6);
+                    fuelDataLength -= 6;
                 }
 
-                Parser parser = new Parser(PATTERN_FUEL, buf.toString(
-                        buf.readerIndex(), buf.readableBytes() - 4 - 2, StandardCharsets.US_ASCII));
-                if (!parser.matches()) {
-                    return null;
-                }
+                if (fuelDataLength <= 0) return position;
 
+                String fuelData = payloadBuf.readCharSequence(fuelDataLength, StandardCharsets.US_ASCII).toString();
+                Parser parser = new Parser(PATTERN_FUEL, fuelData);
+                if (parser.matches()) {
                     position.set(Position.PREFIX_TEMP + 1, parser.nextDouble(0));
                     position.set(Position.KEY_FUEL_LEVEL, parser.nextDouble(0));
-
+                }
                 return position;
 
             } else if (subType == 0x1b) {
+                if (payloadBuf.readableBytes() <= 0) return position;
 
-                if (Character.isLetter(buf.getUnsignedByte(buf.readerIndex()))) {
-                    String data = buf.readCharSequence(buf.readableBytes() - 6, StandardCharsets.US_ASCII).toString();
-                    position.set("serial", data.trim());
+                if (Character.isLetter(payloadBuf.getUnsignedByte(payloadBuf.readerIndex()))) {
+                    String data = payloadBuf.toString(StandardCharsets.US_ASCII).trim();
+                    position.set("serial", data);
                 } else {
-                    buf.readUnsignedByte(); // header
-                    buf.readUnsignedByte(); // type
-                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(buf.readSlice(4)));
-                    buf.readUnsignedByte(); // checksum
-                    buf.readUnsignedByte(); // footer
+                    if (payloadBuf.readableBytes() < 8) return position; // Needs 1 + 1 + 4 + 1 + 1 = 8 bytes
+                    payloadBuf.readUnsignedByte(); // header
+                    payloadBuf.readUnsignedByte(); // type
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, ByteBufUtil.hexDump(payloadBuf.readSlice(4)));
+                    payloadBuf.readUnsignedByte(); // checksum
+                    payloadBuf.readUnsignedByte(); // footer
                 }
                 return position;
 
+            } else {
+                 return position; // Unknown subtype, return partial position
             }
 
-        } else if (type == MSG_X1_PHOTO_DATA) {
-
-            int pictureId = buf.readInt();
+        } else if (type == MSG_X1_PHOTO_DATA) { // 0x96
+            // Needs pictureId (4), offset (4), dataLength (2) = 10 bytes minimum header
+            if (payloadBuf.readableBytes() < 10) return null;
 
+            int pictureId = payloadBuf.readInt();
             ByteBuf photo = photos.get(pictureId);
+            if (photo == null) {
+                return null; // Ignore data if we don't have the photo buffer initialized
+            }
 
-            buf.readUnsignedInt(); // offset
-            buf.readBytes(photo, buf.readUnsignedShort());
+            payloadBuf.readUnsignedInt(); // offset (not used)
+            int dataLength = payloadBuf.readUnsignedShort(); // Declared length of data in this packet
+            int bytesToRead = Math.min(dataLength, payloadBuf.readableBytes()); // Actual data bytes available in payload
+            bytesToRead = Math.min(bytesToRead, photo.writableBytes()); // Don't write past buffer capacity
+
+            if (bytesToRead > 0) {
+                 payloadBuf.readBytes(photo, bytesToRead);
+            }
 
             if (photo.writableBytes() > 0) {
-                sendPhotoRequest(channel, pictureId);
+                sendPhotoRequest(channel, pictureId); // Request next chunk
+                 return null; // No position update until photo is complete
             } else {
+                // Photo complete
+                getLastLocation(position, null); // Populate with last known data
                 position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                 photos.remove(pictureId).release();
+                return position;
             }
 
-        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) {
-
-            if (!decodeGps(position, buf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {
+        } else if (type == MSG_AZ735_GPS || type == MSG_AZ735_ALARM) { // 0xA4, 0xA5
+             // Original logic relies on sequential reads; using payloadBuf ensures boundaries
+             if (!decodeGps(position, payloadBuf, true, deviceSession.get(DeviceSession.KEY_TIMEZONE))) {
                  getLastLocation(position, position.getDeviceTime());
              }
 
-            if (decodeLbs(position, buf, type, true)) {
-                position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+             // Check remaining bytes before reading more
+             if (payloadBuf.readableBytes() > 0 && decodeLbs(position, payloadBuf, type, true)) {
+                  if (payloadBuf.readableBytes() > 0) {
+                    position.set(Position.KEY_RSSI, payloadBuf.readUnsignedByte());
+                  }
              }
 
-            buf.skipBytes(buf.readUnsignedByte()); // additional cell towers
-            buf.skipBytes(buf.readUnsignedByte()); // wifi access point
+             if (payloadBuf.readableBytes() > 0) { // Skip additional cell towers length byte + data
+                 int skip = payloadBuf.readUnsignedByte();
+                 payloadBuf.skipBytes(Math.min(skip, payloadBuf.readableBytes()));
+             }
+             if (payloadBuf.readableBytes() > 0) { // Skip wifi access point length byte + data
+                 int skip = payloadBuf.readUnsignedByte();
+                 payloadBuf.skipBytes(Math.min(skip, payloadBuf.readableBytes()));
+             }
 
-            int status = buf.readUnsignedByte();
+             if (payloadBuf.readableBytes() > 0) {
+                 int status = payloadBuf.readUnsignedByte();
                  position.set(Position.KEY_STATUS, status);
 
                  if (type == MSG_AZ735_ALARM) {
                      switch (status) {
-                    case 0xA0:
-                        position.set(Position.KEY_ARMED, true);
-                        break;
-                    case 0xA1:
-                        position.set(Position.KEY_ARMED, false);
-                        break;
-                    case 0xA2:
-                    case 0xA3:
-                        position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
-                        break;
-                    case 0xA4:
-                        position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                        break;
-                    case 0xA5:
-                        position.set(Position.KEY_ALARM, Position.ALARM_DOOR);
-                        break;
-                    default:
-                        break;
+                         case 0xA0: position.set(Position.KEY_ARMED, true); break;
+                         case 0xA1: position.set(Position.KEY_ARMED, false); break;
+                         case 0xA2: case 0xA3: position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY); break;
+                         case 0xA4: position.set(Position.KEY_ALARM, Position.ALARM_GENERAL); break;
+                         case 0xA5: position.set(Position.KEY_ALARM, Position.ALARM_DOOR); break;
+                         default: break;
+                     }
                  }
              }
 
-            buf.skipBytes(buf.readUnsignedByte()); // reserved extension
+             if (payloadBuf.readableBytes() > 0) { // Skip reserved extension length byte + data
+                 int skip = payloadBuf.readUnsignedByte();
+                 payloadBuf.skipBytes(Math.min(skip, payloadBuf.readableBytes()));
+             }
 
-            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
+             // Send response using index from the original buffer (before payloadBuf was sliced)
+             // Index starts 4 bytes before the end of the original slice.
+             short index = buf.getShort(buf.writerIndex() - 4);
+             sendResponse(channel, true, type, index, null);
 
              return position;
 
-        } else if (type == MSG_OBD) {
+        } else if (type == MSG_OBD) { // 0x24
+            // Needs Date/Time (6) + Ignition (1) = 7 bytes minimum
+            if (payloadBuf.readableBytes() < 7) {
+                return null; // Not enough data for basic info
+            }
 
             DateBuilder dateBuilder = new DateBuilder((TimeZone) deviceSession.get(DeviceSession.KEY_TIMEZONE))
-                    .setDate(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
-                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+                    .setDate(payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte())
+                    .setTime(payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte(), payloadBuf.readUnsignedByte());
 
             getLastLocation(position, dateBuilder.getDate());
 
-            position.set(Position.KEY_IGNITION, buf.readUnsignedByte() > 0);
+            position.set(Position.KEY_IGNITION, payloadBuf.readUnsignedByte() > 0);
+
+            // Remaining payload is the OBD string
+            String data = payloadBuf.toString(StandardCharsets.US_ASCII);
 
-            String data = buf.readCharSequence(buf.readableBytes() - 18, StandardCharsets.US_ASCII).toString();
             for (String pair : data.split(",")) {
                 String[] values = pair.split("=");
-                if (values.length >= 2) {
+                if (values.length >= 2 && values[0].length() >= 2) {
+                    try {
                         switch (Integer.parseInt(values[0].substring(0, 2), 16)) {
-                        case 40:
-                            position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 43:
-                            position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 45:
-                            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 53:
-                            position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 54:
-                            position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 71:
-                            position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 73:
-                            position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01);
-                            break;
-                        case 74:
-                            position.set(Position.KEY_VIN, values[1]);
-                            break;
-                        default:
-                            break;
+                            case 0x40: position.set(Position.KEY_ODOMETER, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x43: position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x45: position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x53: position.set(Position.KEY_OBD_SPEED, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x54: position.set(Position.KEY_RPM, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x71: position.set(Position.KEY_FUEL_USED, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x73: position.set(Position.KEY_HOURS, Integer.parseInt(values[1], 16) * 0.01); break;
+                            case 0x74: position.set(Position.KEY_VIN, values[1]); break;
+                            default: break;
                         }
+                    } catch (NumberFormatException e) {
+                        // Ignore PID if value is not a valid hex number or key format issue
                     }
                 }
+            }
+            return position; // Return the position object
 
-            return position;
-
-        } else if (type == MSG_GPS_MODULAR) {
+        } else if (type == MSG_GPS_MODULAR) { // 0x70
+             while (payloadBuf.readableBytes() >= 4) { // Need 4 bytes for module header
+                 int moduleType = payloadBuf.readUnsignedShort();
+                 int moduleLength = payloadBuf.readUnsignedShort();
 
-            while (buf.readableBytes() > 6) {
-                int moduleType = buf.readUnsignedShort();
-                int moduleLength = buf.readUnsignedShort();
+                 if (payloadBuf.readableBytes() < moduleLength) {
+                      break; // Not enough data for module content, stop processing modules
+                 }
+                 ByteBuf moduleBuf = payloadBuf.readSlice(moduleLength); // Slice module content
 
                  switch (moduleType) {
-                    case 0x03:
-                        position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)));
-                        break;
-                    case 0x09:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        break;
-                    case 0x0a:
-                        position.set(Position.KEY_SATELLITES_VISIBLE, buf.readUnsignedByte());
-                        break;
-                    case 0x11:
+                     case 0x03: if (moduleBuf.readableBytes() >= 10) position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(moduleBuf.readSlice(10))); break;
+                     case 0x09: if (moduleBuf.readableBytes() >= 1) position.set(Position.KEY_SATELLITES, moduleBuf.readUnsignedByte()); break;
+                     case 0x0a: if (moduleBuf.readableBytes() >= 1) position.set(Position.KEY_SATELLITES_VISIBLE, moduleBuf.readUnsignedByte()); break;
+                     case 0x11: // Cell Tower
+                          if (moduleBuf.readableBytes() >= 9) { // 2+2+2+3+1 = 10? No, 2+2+2+3(medium)+1 = 10 bytes needed. Docs say 9? Let's assume 10.
+                              if (moduleBuf.readableBytes() >= 10) {
                                   CellTower cellTower = CellTower.from(
-                                buf.readUnsignedShort(),
-                                buf.readUnsignedShort(),
-                                buf.readUnsignedShort(),
-                                buf.readUnsignedMedium(),
-                                buf.readUnsignedByte());
-                        if (cellTower.getCellId() > 0) {
-                            position.setNetwork(new Network(cellTower));
+                                      moduleBuf.readUnsignedShort(), moduleBuf.readUnsignedShort(), moduleBuf.readUnsignedShort(),
+                                      moduleBuf.readUnsignedMedium(), moduleBuf.readUnsignedByte());
+                                  if (cellTower.getCellId() > 0) position.setNetwork(new Network(cellTower));
                               }
-                        break;
-                    case 0x18:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
-                        break;
-                    case 0x28:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedByte() * 0.1);
-                        break;
-                    case 0x29:
-                        position.set(Position.KEY_INDEX, buf.readUnsignedInt());
-                        break;
-                    case 0x2a:
-                        int input = buf.readUnsignedByte();
+                          } break;
+                     case 0x18: if (moduleBuf.readableBytes() >= 2) position.set(Position.KEY_BATTERY, moduleBuf.readUnsignedShort() * 0.01); break;
+                     case 0x28: if (moduleBuf.readableBytes() >= 1) position.set(Position.KEY_HDOP, moduleBuf.readUnsignedByte() * 0.1); break;
+                     case 0x29: if (moduleBuf.readableBytes() >= 4) position.set(Position.KEY_INDEX, moduleBuf.readUnsignedInt()); break;
+                     case 0x2a: // Input status
+                          if (moduleBuf.readableBytes() >= 1) {
+                              int input = moduleBuf.readUnsignedByte();
                               position.set(Position.KEY_DOOR, BitUtil.to(input, 4) > 0);
                               position.set("tamper", BitUtil.from(input, 4) > 0);
-                        break;
-                    case 0x2b:
-                        int event = buf.readUnsignedByte();
+                          } break;
+                     case 0x2b: // Event
+                          if (moduleBuf.readableBytes() >= 1) {
+                              int event = moduleBuf.readUnsignedByte();
                               switch (event) {
-                            case 0x11:
-                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
-                                break;
-                            case 0x12:
-                                position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
-                                break;
-                            case 0x13:
-                                position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT);
-                                break;
-                            case 0x14:
-                                position.set(Position.KEY_ALARM, Position.ALARM_REMOVING);
-                                break;
-                            default:
-                                break;
+                                  case 0x11: position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY); break;
+                                  case 0x12: position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER); break;
+                                  case 0x13: position.set(Position.KEY_ALARM, Position.ALARM_POWER_CUT); break;
+                                  case 0x14: position.set(Position.KEY_ALARM, Position.ALARM_REMOVING); break;
+                                  default: break;
                               }
                               position.set(Position.KEY_EVENT, event);
-                        break;
-                    case 0x2e:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x33:
-                        position.setTime(new Date(buf.readUnsignedInt() * 1000));
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-                        position.setAltitude(buf.readShort());
-
-                        double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;
-                        double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
-
-                        int flags = buf.readUnsignedShort();
+                          } break;
+                     case 0x2e: if (moduleBuf.readableBytes() >= 4) position.set(Position.KEY_ODOMETER, moduleBuf.readUnsignedIntLE()); break;
+                     case 0x33: // GPS Data
+                         if (moduleBuf.readableBytes() >= 22) { // 4+1+2+4+4+1+2=22 bytes
+                             position.setTime(new Date(moduleBuf.readUnsignedInt() * 1000));
+                             position.set(Position.KEY_SATELLITES, moduleBuf.readUnsignedByte());
+                             position.setAltitude(moduleBuf.readShort());
+                             double latitude = moduleBuf.readUnsignedInt() / 60.0 / 30000.0;
+                             double longitude = moduleBuf.readUnsignedInt() / 60.0 / 30000.0;
+                             position.setSpeed(UnitsConverter.knotsFromKph(moduleBuf.readUnsignedByte()));
+                             int flags = moduleBuf.readUnsignedShort();
                              position.setCourse(BitUtil.to(flags, 10));
                              position.setValid(BitUtil.check(flags, 12));
-
-                        if (!BitUtil.check(flags, 10)) {
-                            latitude = -latitude;
-                        }
-                        if (BitUtil.check(flags, 11)) {
-                            longitude = -longitude;
-                        }
-
+                             if (!BitUtil.check(flags, 10)) latitude = -latitude;
+                             if (BitUtil.check(flags, 11)) longitude = -longitude;
                              position.setLatitude(latitude);
                              position.setLongitude(longitude);
-                        break;
-                    case 0x34:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
-                        buf.readUnsignedIntLE(); // time
-                        buf.skipBytes(buf.readUnsignedByte()); // content
-                        break;
+                         } break;
+                    case 0x34: // Event with content
+                        if (moduleBuf.readableBytes() >= 6) { // 1(event)+4(time)+1(len)
+                            position.set(Position.KEY_EVENT, moduleBuf.readUnsignedByte());
+                            moduleBuf.readUnsignedIntLE(); // time
+                            int contentLength = moduleBuf.readUnsignedByte();
+                            if (moduleBuf.readableBytes() >= contentLength) {
+                                moduleBuf.skipBytes(contentLength); // skip content
+                            }
+                        } break;
                      default:
-                        buf.skipBytes(moduleLength);
+                         // Already sliced, effectively skipped
                          break;
                  }
              }
 
              if (position.getFixTime() == null) {
                  getLastLocation(position, null);
              }
 
-            sendResponse(channel, false, MSG_GPS_MODULAR, buf.readUnsignedShort(), null);
+             short index = buf.getShort(buf.writerIndex() - 4);
+             sendResponse(channel, false, MSG_GPS_MODULAR, index, null);
 
              return position;
 
-        } else if (type == MSG_MULTIMEDIA) {
+        } else if (type == MSG_MULTIMEDIA) { // 0x15
+             // Header: serial(8)+ts(4)+gps(12)+cell(8)+mediaId(4)+mediaLen(4)+type(1)+format(1) = 44
+             // Data: event(1)+packetIdx(2)+data = 3+
+             if (payloadBuf.readableBytes() < 44 + 3) return null;
 
-            buf.skipBytes(8); // serial number
-            long timestamp = buf.readUnsignedInt() * 1000;
-            buf.skipBytes(4 + 4 + 2 + 1 + 1 + 2); // gps
-            buf.skipBytes(2 + 2 + 2 + 2); // cell
+             payloadBuf.skipBytes(8); // serial
+             long timestamp = payloadBuf.readUnsignedInt() * 1000;
+             payloadBuf.skipBytes(12); // gps
+             payloadBuf.skipBytes(8); // cell
 
-            int mediaId = buf.readInt();
-            int mediaLength = buf.readInt();
-            int mediaType = buf.readUnsignedByte();
-            int mediaFormat = buf.readUnsignedByte();
+             int mediaId = payloadBuf.readInt();
+             int mediaLength = payloadBuf.readInt();
+             int mediaType = payloadBuf.readUnsignedByte();
+             int mediaFormat = payloadBuf.readUnsignedByte();
 
-            if (mediaType == 0 && mediaFormat == 0) {
+             Position positionUpdate = null; // Only return position if photo completes
 
-                buf.readUnsignedByte(); // event
+             if (mediaType == 0 && mediaFormat == 0) { // Photo JPEG
+                 payloadBuf.readUnsignedByte(); // event
+                 int packetIndex = payloadBuf.readUnsignedShort();
 
                  ByteBuf photo;
-                if (buf.readUnsignedShort() == 0) {
+                 if (packetIndex == 0) {
                      photo = Unpooled.buffer(mediaLength);
-                    if (photos.containsKey(mediaId)) {
-                        photos.remove(mediaId).release();
-                    }
+                     if (photos.containsKey(mediaId)) { photos.remove(mediaId).release(); }
                      photos.put(mediaId, photo);
                  } else {
                      photo = photos.get(mediaId);
                  }
 
                  if (photo != null) {
-                    buf.readBytes(photo, buf.readableBytes() - 3 * 2);
-                    if (!photo.isWritable()) {
-                        position = new Position(getProtocolName());
-                        position.setDeviceId(deviceSession.getDeviceId());
-                        getLastLocation(position, new Date(timestamp));
+                     int bytesToRead = Math.min(payloadBuf.readableBytes(), photo.writableBytes());
+                     if (bytesToRead > 0) {
+                         payloadBuf.readBytes(photo, bytesToRead);
+                     }
+                     if (!photo.isWritable()) { // Check if complete
+                         getLastLocation(position, new Date(timestamp)); // Use the original position object
                          position.set(Position.KEY_IMAGE, writeMediaFile(deviceSession.getUniqueId(), photo, "jpg"));
                          photos.remove(mediaId).release();
+                         positionUpdate = position; // Mark that position should be returned
                      }
                  }
-
              }
 
-            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
-
-            return position;
+             short index = buf.getShort(buf.writerIndex() - 4);
+             sendResponse(channel, true, type, index, null);
+             return positionUpdate; // Return position only if photo completed
 
-        } else if (type == MSG_SERIAL) {
+        } else if (type == MSG_SERIAL) { // 0x9B
+            if (payloadBuf.readableBytes() < 1) return position; // Need device code
 
-            position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
+            payloadBuf.readUnsignedByte(); // external device type code
 
-            buf.readUnsignedByte(); // external device type code
-            int length = buf.readableBytes() - 9; // line break + checksum + index + checksum + footer
-
-            if (length <= 0) {
-                return null;
-            } else if (length < 8) {
-                position.set(
-                        Position.PREFIX_TEMP + 1,
-                        Double.parseDouble(buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString()));
-            } else {
-                buf.readUnsignedByte(); // card type
+            // Based on test case "797900149b03023539303042343843454238410300139ba40d0a"
+            // Payload: 03 02 353930304234384345423841 03
+            // Expected ID: "5900B48CEB" (ASCII of 35...42)
+            // Format seems: [DevCode] [CardType] [ASCII ID (12 bytes?)] [Unknown byte(s)]
+            if (payloadBuf.readableBytes() >= 1 + 12) { // Need card type + 12 bytes ID minimum
+                 payloadBuf.readUnsignedByte(); // card type
                  position.set(
                          Position.KEY_DRIVER_UNIQUE_ID,
-                        buf.readCharSequence(length - 1, StandardCharsets.US_ASCII).toString());
+                         payloadBuf.readCharSequence(12, StandardCharsets.US_ASCII).toString());
+            } else if (payloadBuf.readableBytes() > 0) { // Fallback for possible temperature reading?
+                // Original code checked if length < 8 for temperature. Let's use that.
+                int dataLength = payloadBuf.readableBytes(); // Data after device code
+                 if (dataLength < 8) {
+                     String tempData = payloadBuf.readCharSequence(dataLength, StandardCharsets.US_ASCII).toString();
+                     try {
+                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(tempData));
+                     } catch (NumberFormatException e) { /* ignore */ }
+                 }
              }
-
             return position;
-
         }
 
-        return null;
+        return null; // Return null if type is not handled
     }
\ No newline at end of file
