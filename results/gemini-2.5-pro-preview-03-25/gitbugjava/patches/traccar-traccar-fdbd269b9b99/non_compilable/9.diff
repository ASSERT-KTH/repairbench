diff --git a/tmp/fad74140-a9ec-4bd3-aef5-a211c271c332_buggy.java b/tmp/2e616f5d-a872-4840-b387-72fefecde29c_fixed.java
index 30eba92..b7134c9 100644
--- a/tmp/fad74140-a9ec-4bd3-aef5-a211c271c332_buggy.java
+++ b/tmp/2e616f5d-a872-4840-b387-72fefecde29c_fixed.java
@@ -1,113 +1,220 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) {
+                continue; // Skip pairs without a key-value structure
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
                 if (position != null) {
+                    if (dateBuilder != null) {
                         position.setTime(dateBuilder.getDate());
+                    }
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
+                dateBuilder = new DateBuilder(new Date()); // Initialize with current time as fallback
             } else if (position != null) {
                 switch (key) {
-                    case 0x11:
+                    case 0x11: // Date YYMMDD
+                        if (value.length() >= 6) {
                             value = ("000000" + value).substring(value.length());
                             dateBuilder.setDateReverse(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4)));
+                        }
                         break;
-                    case 0x10:
-                        value = ("00000000" + value).substring(value.length());
-                        dateBuilder.setTime(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                    case 0x10: // Time HHMMSSMS
+                        if (value.length() >= 6) {
+                             // Ensure minimum length for HHMMSS, handle optional MS
+                            int hh = Integer.parseInt(value.substring(0, 2));
+                            int mm = Integer.parseInt(value.substring(2, 4));
+                            int ss = Integer.parseInt(value.substring(4, 6));
+                            int ms = 0;
+                            if (value.length() >= 7) {
+                                // Freematics uses 1 or more digits for fractional seconds (e.g., 0 for 0ms, 80 for 800ms)
+                                // Treat value like milliseconds if possible, *10 might be incorrect interpretation
+                                try {
+                                     // Assume the rest are milliseconds directly or scaled
+                                     // Check typical value lengths, e.g. 8445000 -> 8:44:50.000? or 8:44:50.00?
+                                     // If value is 8445000, substring(6) is "00", parseInt is 0. Needs clarification.
+                                     // Let's assume substring(6) represents tenths or hundredths or ms.
+                                     // Using *10 suggests tenths interpretation. Let's stick to it for now.
+                                    String msPart = value.substring(6);
+                                     // Handle potential large millisecond values if format is HHMMSSms...
+                                     // Example: 8445000 -> 08:44:50.000 ? The * 10 seems wrong here.
+                                     // Example: 4285580 -> 04:28:55.80? * 10 = 800ms. Seems plausible.
+                                     // If it's just fractional seconds, parse it:
+                                    if (msPart.length() == 1) ms = Integer.parseInt(msPart) * 100; // 0..9 -> 0..900ms
+                                    else if (msPart.length() == 2) ms = Integer.parseInt(msPart) * 10; // 00..99 -> 0..990ms
+                                    else ms = Integer.parseInt(msPart.substring(0,3)); // Assume max 3 digits ms
+
+                                } catch(NumberFormatException | IndexOutOfBoundsException e) {
+                                    ms = 0; // Default to 0 if parsing fails or no ms part
+                                }
+                            }
+                            dateBuilder.setTime(hh, mm, ss, ms);
+                        }
                         break;
-                    case 0xA:
+                    case 0xA: // Latitude
+                        try {
                             position.setValid(true);
                             position.setLatitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid latitude
+                        }
                         break;
-                    case 0xB:
+                    case 0xB: // Longitude
+                        try {
                             position.setValid(true);
                             position.setLongitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                             // Ignore invalid longitude
+                        }
                         break;
-                    case 0xC:
+                    case 0xC: // Altitude
+                         try {
                             position.setAltitude(Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid altitude
+                        }
                         break;
-                    case 0xD:
+                    case 0xD: // Speed (KPH)
+                        try {
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid speed
+                        }
                         break;
-                    case 0xE:
+                    case 0xE: // Course
+                         try {
                             position.setCourse(Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid course
+                        }
                         break;
-                    case 0xF:
+                    case 0xF: // Satellites
+                        try {
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid satellite count
+                        }
                         break;
-                    case 0x12:
+                    case 0x12: // HDOP
+                        try {
+                            // HDOP is typically float, parse as double
+                            position.set(Position.KEY_HDOP, Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                             try { // Fallback: try integer if double fails? Unlikely but safe.
                                 position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                             } catch (NumberFormatException e2) {
+                                // Ignore invalid HDOP
+                             }
+                        }
                         break;
-                    case 0x20:
+                    case 0x20: // Acceleration (string format like "0;0;0")
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
-                    case 0x24:
+                    case 0x24: // Battery Voltage (e.g., 1252 for 12.52V or %?)
+                        try {
                             position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        } catch (NumberFormatException e) {
+                             // Ignore invalid battery value
+                        }
                         break;
-                    case 0x81:
+                    case 0x81: // RSSI
+                        try {
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid RSSI
+                        }
                         break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    case 0x82: // Device Temperature
+                        try {
+                            // Value can be float like "53.000000"
+                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value));
+                            // Removed '* 0.1' as the value seems to be the final temperature
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid temperature
+                        }
                         break;
-                    case 0x104:
+                    case 0x104: // Engine Load (%)
+                         try {
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                             // Ignore invalid value
+                        }
                         break;
-                    case 0x105:
+                    case 0x105: // Coolant Temp (C)
+                        try {
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                             // Ignore invalid value
+                        }
                         break;
-                    case 0x10c:
+                    case 0x10c: // RPM
+                        try {
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid value
+                        }
                         break;
-                    case 0x10d:
+                    case 0x10d: // OBD Speed (KPH)
+                         try {
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid value
+                        }
                         break;
-                    case 0x111:
+                    case 0x111: // Throttle (%)
+                        try {
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                        } catch (NumberFormatException e) {
+                            // Ignore invalid value
+                        }
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
+             // Check validity only after processing all fields for the position
+            if (!position.getValid() && position.getLatitude() != 0 && position.getLongitude() != 0) {
+                 position.setValid(true); // Mark valid if lat/lon were set
+            }
             if (!position.getValid()) {
-                getLastLocation(position, null);
+                getLastLocation(position, null); // Try to use last known location if current is invalid
             }
+            // Set time only if dateBuilder was initialized (i.e., key 0x0 was present)
+            if (dateBuilder != null) {
                  position.setTime(dateBuilder.getDate());
+            } else if (position.getFixTime() == null) {
+                position.setTime(new Date()); // Fallback to current time if no time info received
+            }
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
