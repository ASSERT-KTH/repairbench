diff --git a/tmp/e2f5d7e8-9d36-4bec-82f5-2954510d88fc_buggy.java b/tmp/057f4d2d-2c69-44c7-bf9d-a203c80a1190_fixed.java
index 30eba92..6d3c7d5 100644
--- a/tmp/e2f5d7e8-9d36-4bec-82f5-2954510d88fc_buggy.java
+++ b/tmp/057f4d2d-2c69-44c7-bf9d-a203c80a1190_fixed.java
@@ -1,113 +1,129 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) {
+                continue; // Skip malformed pairs
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
-                if (position != null) {
+                if (position != null && dateBuilder != null) { // Check dateBuilder is initialized
                     position.setTime(dateBuilder.getDate());
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
+                // Initialize DateBuilder with current time, will be potentially overwritten by 0x11 and 0x10
                 dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+            } else if (position != null && dateBuilder != null) { // Check both position and dateBuilder
+                try { // Add try-catch block for parsing errors within the switch
                     switch (key) {
-                    case 0x11:
+                        case 0x11: // Date DDMMYY
                             value = ("000000" + value).substring(value.length());
                             dateBuilder.setDateReverse(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4)));
                             break;
-                    case 0x10:
+                        case 0x10: // Time HHMMSSms
                             value = ("00000000" + value).substring(value.length());
                             dateBuilder.setTime(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4, 6)),
                                     Integer.parseInt(value.substring(6)) * 10);
                             break;
-                    case 0xA:
+                        case 0xA: // Latitude
                             position.setValid(true);
                             position.setLatitude(Double.parseDouble(value));
                             break;
-                    case 0xB:
+                        case 0xB: // Longitude
                             position.setValid(true);
                             position.setLongitude(Double.parseDouble(value));
                             break;
-                    case 0xC:
+                        case 0xC: // Altitude
                             position.setAltitude(Double.parseDouble(value));
                             break;
-                    case 0xD:
+                        case 0xD: // Speed KPH
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                             break;
-                    case 0xE:
+                        case 0xE: // Course
                             position.setCourse(Integer.parseInt(value));
                             break;
-                    case 0xF:
+                        case 0xF: // Satellites
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                             break;
-                    case 0x12:
+                        case 0x12: // HDOP
                             position.set(Position.KEY_HDOP, Integer.parseInt(value));
                             break;
-                    case 0x20:
+                        case 0x20: // Acceleration
                             position.set(Position.KEY_ACCELERATION, value);
                             break;
-                    case 0x24:
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        case 0x24: // Battery Voltage (mV)
+                            // Assuming value is millivolts, converting to volts
+                            position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.001);
                             break;
-                    case 0x81:
+                        case 0x81: // RSSI
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
                             break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        case 0x82: // Device Temperature (scaled)
+                            // FIX: Parse value as Double, not Integer
+                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value) * 0.1);
                             break;
-                    case 0x104:
+                        case 0x104: // Engine Load
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                             break;
-                    case 0x105:
+                        case 0x105: // Coolant Temp
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                             break;
-                    case 0x10c:
+                        case 0x10c: // RPM
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
                             break;
-                    case 0x10d:
+                        case 0x10d: // OBD Speed KPH
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                             break;
-                    case 0x111:
+                        case 0x111: // Throttle
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                             break;
                         default:
                             position.set(Position.PREFIX_IO + key, value);
                             break;
                     }
+                } catch (NumberFormatException | IndexOutOfBoundsException e) {
+                    // Log parsing error or handle appropriately
+                    // For now, just continue to the next pair
+                    // Log.warning("Failed to parse Freematics data pair: " + pair, e);
+                }
             }
         }
 
         if (position != null) {
+            if (dateBuilder == null) { // Should not happen if 0x0 was present, but check for safety
+                position.setTime(new Date()); // Fallback to current time
+            } else {
+                position.setTime(dateBuilder.getDate());
+            }
             if (!position.getValid()) {
-                getLastLocation(position, null);
+                 getLastLocation(position, position.getDeviceTime()); // Use device time if available
             }
-            position.setTime(dateBuilder.getDate());
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
