diff --git a/tmp/c7e3f847-579b-47e4-85b8-b35fbd0d5bf8_buggy.java b/tmp/0bb49f47-ada1-4e3a-bcdc-c08be5f44958_fixed.java
index 30eba92..eda5988 100644
--- a/tmp/c7e3f847-579b-47e4-85b8-b35fbd0d5bf8_buggy.java
+++ b/tmp/0bb49f47-ada1-4e3a-bcdc-c08be5f44958_fixed.java
@@ -1,113 +1,135 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) {
+                continue; // Skip pairs without a value
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
                 if (position != null) {
+                    // Check if dateBuilder is initialized before using it
+                    if (dateBuilder != null) {
                         position.setTime(dateBuilder.getDate());
+                    } else {
+                        // Handle cases where time/date might not be set before a new position starts
+                        // Maybe set a default time or log a warning
+                        position.setTime(new Date()); // Or consider if this position is valid without time
+                    }
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+                dateBuilder = new DateBuilder(new Date()); // Initialize DateBuilder for the new position
+            } else if (position != null && dateBuilder != null) { // Ensure position and dateBuilder are initialized
                 switch (key) {
-                    case 0x11:
+                    case 0x11: // Date YYMMDD
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
-                    case 0x10:
+                    case 0x10: // Time HHMMSSms
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                                Integer.parseInt(value.substring(6)) * 10); // Assuming last digits are 10ms units
                         break;
-                    case 0xA:
+                    case 0xA: // Latitude
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
                         break;
-                    case 0xB:
+                    case 0xB: // Longitude
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
                         break;
-                    case 0xC:
+                    case 0xC: // Altitude
                         position.setAltitude(Double.parseDouble(value));
                         break;
-                    case 0xD:
+                    case 0xD: // Speed KPH
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                         break;
-                    case 0xE:
+                    case 0xE: // Course
                         position.setCourse(Integer.parseInt(value));
                         break;
-                    case 0xF:
+                    case 0xF: // Satellites
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
-                    case 0x12:
+                    case 0x12: // HDOP
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
                         break;
-                    case 0x20:
+                    case 0x20: // Acceleration
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
-                    case 0x24:
+                    case 0x24: // Battery Voltage
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                         break;
-                    case 0x81:
+                    case 0x81: // RSSI
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
                         break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    case 0x82: // Device Temperature
+                        // Fix: Parse as double, as value can be floating point (e.g., "53.000000")
+                        try {
+                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value));
+                        } catch (NumberFormatException e) {
+                            // Handle cases where the value might not be a valid double
+                            // Log warning or ignore? Assuming ignore for now.
+                        }
                         break;
-                    case 0x104:
+                    case 0x104: // Engine Load
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                         break;
-                    case 0x105:
+                    case 0x105: // Coolant Temperature
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                         break;
-                    case 0x10c:
+                    case 0x10c: // RPM
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
-                    case 0x10d:
+                    case 0x10d: // OBD Speed KPH
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
-                    case 0x111:
+                    case 0x111: // Throttle Position
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
             if (!position.getValid()) {
                 getLastLocation(position, null);
             }
+            // Ensure dateBuilder is not null before calling getDate()
+            if (dateBuilder != null) {
                 position.setTime(dateBuilder.getDate());
+            } else if (!position.hasTime()) {
+                // Fallback if time wasn't set via 0x10/0x11 and dateBuilder wasn't initialized
+                 position.setTime(new Date());
+            }
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
