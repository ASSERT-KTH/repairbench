diff --git a/tmp/0e78ccea-4d58-416f-8b09-26f74cf299e7_buggy.java b/tmp/af88aac8-b0ef-4391-897f-0bf65f7277ef_fixed.java
index 30eba92..2d0621f 100644
--- a/tmp/0e78ccea-4d58-416f-8b09-26f74cf299e7_buggy.java
+++ b/tmp/af88aac8-b0ef-4391-897f-0bf65f7277ef_fixed.java
@@ -1,113 +1,144 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            // Check if split resulted in at least two parts (key and value)
+            if (data.length < 2) {
+                 continue; // Skip malformed pairs
+            }
             int key;
             try {
+                // Keys are hexadecimal
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
+                // Skip pairs with invalid non-hexadecimal key
                 continue;
             }
             String value = data[1];
-            if (key == 0x0) {
+            if (key == 0x0) { // Start of a new position record
                 if (position != null) {
+                    // If there was a previous position object being built, finalize its time and add it
+                    // We assume dateBuilder is not null here because it's set together with position when key is 0x0
                     position.setTime(dateBuilder.getDate());
                     positions.add(position);
                 }
+                // Create a new position object for the current record
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
+                // Initialize a date builder, using current time as the base
                 dateBuilder = new DateBuilder(new Date());
             } else if (position != null) {
+                // Process other keys only if a position object has been started (key 0x0 was encountered)
                 switch (key) {
-                    case 0x11:
-                        value = ("000000" + value).substring(value.length());
+                    case 0x11: // Date in DDMMYY format
+                        value = ("000000" + value).substring(value.length()); // Pad if needed
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
-                    case 0x10:
-                        value = ("00000000" + value).substring(value.length());
+                    case 0x10: // Time in HHMMSSms format (milliseconds might be single digit)
+                        value = ("00000000" + value).substring(value.length()); // Pad if needed
                         dateBuilder.setTime(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                                Integer.parseInt(value.substring(0, 2)), // HH
+                                Integer.parseInt(value.substring(2, 4)), // MM
+                                Integer.parseInt(value.substring(4, 6)), // SS
+                                Integer.parseInt(value.substring(6)) * 10); // Milliseconds (adjust if needed)
                         break;
-                    case 0xA:
+                    case 0xA: // Latitude
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
                         break;
-                    case 0xB:
+                    case 0xB: // Longitude
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
                         break;
-                    case 0xC:
+                    case 0xC: // Altitude
                         position.setAltitude(Double.parseDouble(value));
                         break;
-                    case 0xD:
+                    case 0xD: // Speed (KPH)
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                         break;
-                    case 0xE:
+                    case 0xE: // Course/Heading
                         position.setCourse(Integer.parseInt(value));
                         break;
-                    case 0xF:
+                    case 0xF: // Satellites
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
-                    case 0x12:
+                    case 0x12: // HDOP
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
                         break;
-                    case 0x20:
+                    case 0x20: // Acceleration
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
-                    case 0x24:
+                    case 0x24: // Battery (Voltage in centivolts?)
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                         break;
-                    case 0x81:
+                    case 0x81: // RSSI
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
                         break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    case 0x82: // Device Temperature
+                        // Original buggy line:
+                        // position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        // This failed for input like "53.000000" with NumberFormatException.
+                        // Fixed line: Use Double.parseDouble to handle both integer ("47") and float ("53.000000") inputs.
+                        // Note: This assumes "47" means 47.0 degrees, not 4.7 degrees. If 4.7 was intended, the protocol/device sends inconsistent formats.
+                        position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value));
                         break;
-                    case 0x104:
+                    case 0x104: // Engine Load
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                         break;
-                    case 0x105:
+                    case 0x105: // Coolant Temperature
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                         break;
-                    case 0x10c:
+                    case 0x10c: // RPM
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
-                    case 0x10d:
+                    case 0x10d: // OBD Speed (KPH)
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
-                    case 0x111:
+                    case 0x111: // Throttle Position
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                         break;
-                    default:
+                    default: // Other keys are treated as generic IO values
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
+        // After processing all pairs, finalize the last position object if it exists
         if (position != null) {
             if (!position.getValid()) {
-                getLastLocation(position, null);
+                // If the position data didn't include valid coordinates (e.g., no GPS fix),
+                // try to use the last known location details.
+                // Pass the timestamp associated with this record, if available.
+                Date observed = (dateBuilder != null) ? dateBuilder.getDate() : null;
+                getLastLocation(position, observed);
             }
+            // Set the final calculated time for this position record.
+            // This requires dateBuilder to have been initialized (key 0x0 must have been present).
+            if (dateBuilder != null) {
                 position.setTime(dateBuilder.getDate());
+            } else {
+                // Fallback: If somehow we have a position but no dateBuilder (e.g., malformed data with no key 0x0),
+                // set time to now if it's not already set (e.g., by getLastLocation).
+                 if (position.getTime() == null) {
+                    position.setTime(new Date());
+                }
+            }
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
