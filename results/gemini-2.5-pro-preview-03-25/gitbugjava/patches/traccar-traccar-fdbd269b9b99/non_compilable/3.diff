diff --git a/tmp/0dbb792c-6aa5-476e-a33a-ebbacc7d47ab_buggy.java b/tmp/bee3f2ab-1e25-4c62-9dd4-121ca87aa718_fixed.java
index 30eba92..e79a4a5 100644
--- a/tmp/0dbb792c-6aa5-476e-a33a-ebbacc7d47ab_buggy.java
+++ b/tmp/bee3f2ab-1e25-4c62-9dd4-121ca87aa718_fixed.java
@@ -1,113 +1,133 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) {
+                continue; // Skip pairs that don't have key and value
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
+                // Might be checksum or other non-key data
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
-                if (position != null) {
+                if (position != null && dateBuilder != null) { // Ensure dateBuilder is initialized
                     position.setTime(dateBuilder.getDate());
+                    // Check validity only after all fields potentially setting it are processed
+                    if (!position.getValid() && position.getLatitude() != 0 && position.getLongitude() != 0) {
+                         position.setValid(true); // Assume valid if coordinates are set but no explicit validity flag
+                    }
+                    if (!position.getValid()) {
+                         getLastLocation(position, null); // Use last known location if still not valid
+                    }
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+                dateBuilder = new DateBuilder(new Date()); // Initialize dateBuilder for the new position
+            } else if (position != null && dateBuilder != null) { // Ensure position and dateBuilder are initialized
+                try {
                     switch (key) {
-                    case 0x11:
+                        case 0x11: // Date YYMMDD
                             value = ("000000" + value).substring(value.length());
                             dateBuilder.setDateReverse(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4)));
                             break;
-                    case 0x10:
+                        case 0x10: // Time HHMMSSms
                             value = ("00000000" + value).substring(value.length());
                             dateBuilder.setTime(
                                     Integer.parseInt(value.substring(0, 2)),
                                     Integer.parseInt(value.substring(2, 4)),
                                     Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                                    Integer.parseInt(value.substring(6)) * 10); // Assuming last digits are 10ms units
                             break;
-                    case 0xA:
+                        case 0xA: // Latitude
                             position.setValid(true);
                             position.setLatitude(Double.parseDouble(value));
                             break;
-                    case 0xB:
+                        case 0xB: // Longitude
                             position.setValid(true);
                             position.setLongitude(Double.parseDouble(value));
                             break;
-                    case 0xC:
+                        case 0xC: // Altitude
                             position.setAltitude(Double.parseDouble(value));
                             break;
-                    case 0xD:
+                        case 0xD: // Speed KPH
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                             break;
-                    case 0xE:
+                        case 0xE: // Course
                             position.setCourse(Integer.parseInt(value));
                             break;
-                    case 0xF:
+                        case 0xF: // Satellites
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                             break;
-                    case 0x12:
-                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                        case 0x12: // HDOP
+                            position.set(Position.KEY_HDOP, Double.parseDouble(value)); // HDOP can be decimal
                             break;
-                    case 0x20:
+                        case 0x20: // Acceleration
                             position.set(Position.KEY_ACCELERATION, value);
                             break;
-                    case 0x24:
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                        case 0x24: // Battery Voltage
+                            position.set(Position.KEY_BATTERY, Double.parseDouble(value) * 0.01); // Value is in 10mV
                             break;
-                    case 0x81:
+                        case 0x81: // RSSI
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
                             break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        case 0x82: // Device Temperature
+                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value) * 0.1); // Fix: Parse as Double
                             break;
-                    case 0x104:
+                        case 0x104: // Engine Load
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                             break;
-                    case 0x105:
+                        case 0x105: // Coolant Temp
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                             break;
-                    case 0x10c:
+                        case 0x10c: // RPM
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
                             break;
-                    case 0x10d:
+                        case 0x10d: // OBD Speed KPH
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                             break;
-                    case 0x111:
+                        case 0x111: // Throttle
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                             break;
                         default:
                             position.set(Position.PREFIX_IO + key, value);
                             break;
                     }
+                } catch (NumberFormatException e) {
+                    // Log or ignore invalid data format for a specific key
+                     System.err.println("Failed to parse value '" + value + "' for key 0x" + Integer.toHexString(key));
+                }
             }
         }
 
-        if (position != null) {
-            if (!position.getValid()) {
-                getLastLocation(position, null);
-            }
+        if (position != null && dateBuilder != null) { // Handle the last position
              position.setTime(dateBuilder.getDate());
+             // Check validity only after all fields potentially setting it are processed
+             if (!position.getValid() && position.getLatitude() != 0 && position.getLongitude() != 0) {
+                 position.setValid(true); // Assume valid if coordinates are set but no explicit validity flag
+             }
+             if (!position.getValid()) {
+                 getLastLocation(position, position.getTime()); // Use last known location if still not valid
+             }
              positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
