diff --git a/tmp/200da629-96cd-405a-94f2-5592510b95da_buggy.java b/tmp/8bf9b3f6-f6da-4cf9-8190-9d10a24673ac_fixed.java
index 30eba92..6970ab2 100644
--- a/tmp/200da629-96cd-405a-94f2-5592510b95da_buggy.java
+++ b/tmp/8bf9b3f6-f6da-4cf9-8190-9d10a24673ac_fixed.java
@@ -1,113 +1,140 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            if (data.length < 2) {
+                continue; // Skip pairs without a value
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
                 if (position != null) {
+                    if (dateBuilder != null) {
                         position.setTime(dateBuilder.getDate());
+                    } else {
+                        position.setTime(new Date()); // Fallback if date/time keys are missing
+                    }
                     positions.add(position);
                 }
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
+                // Initialize DateBuilder here, potentially with a default date/time
+                // Use current time as default, actual time/date might be overwritten by keys 0x10/0x11
                 dateBuilder = new DateBuilder(new Date());
             } else if (position != null) {
                 switch (key) {
-                    case 0x11:
+                    case 0x11: // Date DDMMYY
                         value = ("000000" + value).substring(value.length());
                         dateBuilder.setDateReverse(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4)));
                         break;
-                    case 0x10:
+                    case 0x10: // Time HHMMSSMS
                         value = ("00000000" + value).substring(value.length());
                         dateBuilder.setTime(
                                 Integer.parseInt(value.substring(0, 2)),
                                 Integer.parseInt(value.substring(2, 4)),
                                 Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                                Integer.parseInt(value.substring(6)) * 10); // Assuming last digits are 10ms increments
                         break;
-                    case 0xA:
+                    case 0xA: // Latitude
                         position.setValid(true);
                         position.setLatitude(Double.parseDouble(value));
                         break;
-                    case 0xB:
+                    case 0xB: // Longitude
                         position.setValid(true);
                         position.setLongitude(Double.parseDouble(value));
                         break;
-                    case 0xC:
+                    case 0xC: // Altitude
                         position.setAltitude(Double.parseDouble(value));
                         break;
-                    case 0xD:
+                    case 0xD: // Speed kph
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                         break;
-                    case 0xE:
+                    case 0xE: // Course
                         position.setCourse(Integer.parseInt(value));
                         break;
-                    case 0xF:
+                    case 0xF: // Satellites
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
-                    case 0x12:
-                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    case 0x12: // HDOP
+                        position.set(Position.KEY_HDOP, Integer.parseInt(value)); // Assuming integer HDOP
                         break;
-                    case 0x20:
+                    case 0x20: // Acceleration
                         position.set(Position.KEY_ACCELERATION, value);
                         break;
-                    case 0x24:
+                    case 0x24: // Battery Voltage
+                        // Assuming value is in mV or scaled integer, multiply to get Volts
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                         break;
-                    case 0x81:
+                    case 0x81: // RSSI
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
                         break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    case 0x82: // Device Temperature
+                        // Fix: Parse as double, as value can contain decimal point
+                        position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value) * 0.1);
                         break;
-                    case 0x104:
+                    case 0x104: // Engine Load
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                         break;
-                    case 0x105:
+                    case 0x105: // Coolant Temperature
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                         break;
-                    case 0x10c:
+                    case 0x10c: // RPM
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
-                    case 0x10d:
+                    case 0x10d: // OBD Speed
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
-                    case 0x111:
+                    case 0x111: // Throttle
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                         break;
                     default:
                         position.set(Position.PREFIX_IO + key, value);
                         break;
                 }
             }
         }
 
         if (position != null) {
-            if (!position.getValid()) {
-                getLastLocation(position, null);
+            if (!position.getValid() && position.getLatitude() == 0 && position.getLongitude() == 0) {
+                // Use last known location only if current location is explicitly invalid (0,0)
+                // Or if validity flag was never set (remains default false)
+                 getLastLocation(position, position.getDeviceTime()); // Use device time if available
             }
+            // Ensure time is set even if 0x10/0x11 keys were missing
+            if (position.getFixTime() == null) {
+                 if (dateBuilder != null) {
                     position.setTime(dateBuilder.getDate());
+                 } else {
+                     // Fallback if DateBuilder was never initialized (e.g., no 0x0 key)
+                     // This case should ideally not happen if the loop structure is correct
+                     // but adding a safeguard.
+                     position.setTime(new Date());
+                 }
+            } else {
+                // If time was already set by 0x10/0x11 keys via dateBuilder
+                 position.setTime(dateBuilder.getDate());
+            }
+
             positions.add(position);
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
