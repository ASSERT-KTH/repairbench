diff --git a/tmp/9b507aa5-067a-44b3-91b8-b1347953b23f_buggy.java b/tmp/e9cc68b8-94e7-417b-870c-ec7168ff1018_fixed.java
index 30eba92..38b14e4 100644
--- a/tmp/9b507aa5-067a-44b3-91b8-b1347953b23f_buggy.java
+++ b/tmp/e9cc68b8-94e7-417b-870c-ec7168ff1018_fixed.java
@@ -1,113 +1,140 @@
     private Object decodePosition(
             Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
         List<Position> positions = new LinkedList<>();
         Position position = null;
         DateBuilder dateBuilder = null;
 
         for (String pair : sentence.split(",")) {
             String[] data = pair.split("[=:]");
+            // Ensure the pair is a valid key-value structure before processing
+            if (data.length != 2) {
+                continue;
+            }
             int key;
             try {
                 key = Integer.parseInt(data[0], 16);
             } catch (NumberFormatException e) {
+                // Ignore pair if the key is not a valid hex number
                 continue;
             }
             String value = data[1];
             if (key == 0x0) {
-                if (position != null) {
+                // If a position object already exists, finalize and add it to the list
+                if (position != null && dateBuilder != null) {
+                    try {
                         position.setTime(dateBuilder.getDate());
                         positions.add(position);
+                    } catch (IllegalArgumentException e) {
+                        // Ignore position if date/time components result in an invalid date
                     }
+                }
+                // Start a new position object
                 position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                dateBuilder = new DateBuilder(new Date());
-            } else if (position != null) {
+                dateBuilder = new DateBuilder(new Date()); // Initialize DateBuilder with current time
+            } else if (position != null && dateBuilder != null) {
+                // Process position data fields, adding try-catch for parsing robustness
+                try {
                     switch (key) {
-                    case 0x11:
+                        case 0x11: // Date DDMMYY
                             value = ("000000" + value).substring(value.length());
+                            if (value.length() >= 6) {
                                 dateBuilder.setDateReverse(
                                         Integer.parseInt(value.substring(0, 2)),
                                         Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4)));
+                                        Integer.parseInt(value.substring(4, 6)));
+                            }
                             break;
-                    case 0x10:
+                        case 0x10: // Time HHMMSSMS (ms * 10)
                             value = ("00000000" + value).substring(value.length());
+                             if (value.length() >= 8) {
                                 dateBuilder.setTime(
                                         Integer.parseInt(value.substring(0, 2)),
                                         Integer.parseInt(value.substring(2, 4)),
                                         Integer.parseInt(value.substring(4, 6)),
                                         Integer.parseInt(value.substring(6)) * 10);
+                             }
                             break;
-                    case 0xA:
+                        case 0xA: // Latitude
                             position.setValid(true);
                             position.setLatitude(Double.parseDouble(value));
                             break;
-                    case 0xB:
+                        case 0xB: // Longitude
                             position.setValid(true);
                             position.setLongitude(Double.parseDouble(value));
                             break;
-                    case 0xC:
+                        case 0xC: // Altitude
                             position.setAltitude(Double.parseDouble(value));
                             break;
-                    case 0xD:
+                        case 0xD: // Speed (km/h)
                             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
                             break;
-                    case 0xE:
+                        case 0xE: // Course
                             position.setCourse(Integer.parseInt(value));
                             break;
-                    case 0xF:
+                        case 0xF: // Satellites
                             position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                             break;
-                    case 0x12:
+                        case 0x12: // HDOP
                             position.set(Position.KEY_HDOP, Integer.parseInt(value));
                             break;
-                    case 0x20:
+                        case 0x20: // Acceleration
                             position.set(Position.KEY_ACCELERATION, value);
                             break;
-                    case 0x24:
+                        case 0x24: // Battery Voltage (Scaled by 100)
                             position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
                             break;
-                    case 0x81:
+                        case 0x81: // RSSI
                             position.set(Position.KEY_RSSI, Integer.parseInt(value));
                             break;
-                    case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                        case 0x82: // Device Temperature
+                            // Fix: Parse as Double, as value can be floating point (e.g., "53.000000")
+                            position.set(Position.KEY_DEVICE_TEMP, Double.parseDouble(value));
                             break;
-                    case 0x104:
+                        case 0x104: // Engine Load
                             position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
                             break;
-                    case 0x105:
+                        case 0x105: // Coolant Temperature
                             position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
                             break;
-                    case 0x10c:
+                        case 0x10c: // RPM
                             position.set(Position.KEY_RPM, Integer.parseInt(value));
                             break;
-                    case 0x10d:
+                        case 0x10d: // OBD Speed (km/h)
                             position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                             break;
-                    case 0x111:
+                        case 0x111: // Throttle Position
                             position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
                             break;
-                    default:
+                        default: // Other IO data
                             position.set(Position.PREFIX_IO + key, value);
                             break;
                     }
+                } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
+                    // Ignore field if value format is invalid
+                    // Log.warning("Failed to parse Freematics key " + key + " value " + value + " - " + e.getMessage());
+                }
             }
         }
 
-        if (position != null) {
+        // Add the last position object if it exists
+        if (position != null && dateBuilder != null) {
             if (!position.getValid()) {
                 getLastLocation(position, null);
             }
+            try {
                 position.setTime(dateBuilder.getDate());
                 positions.add(position);
+            } catch (IllegalArgumentException e) {
+                 // Ignore position if date/time components result in an invalid date
+            }
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
