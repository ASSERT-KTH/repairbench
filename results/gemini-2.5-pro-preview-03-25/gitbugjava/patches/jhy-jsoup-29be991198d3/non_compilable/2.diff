diff --git a/tmp/47640bc3-f89f-4e67-85d4-e63e65d4be2a_buggy.java b/tmp/11b4a4dc-512a-457e-8bce-67f0cc332715_fixed.java
index 862c60c..71f87ce 100644
--- a/tmp/47640bc3-f89f-4e67-85d4-e63e65d4be2a_buggy.java
+++ b/tmp/11b4a4dc-512a-457e-8bce-67f0cc332715_fixed.java
@@ -1,25 +1,42 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+        boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent); // inline parent check below
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // if is block element or document, normalize suppression rules
+            if (parent != null && parent.tag().isBlock() || parentNode instanceof Document) {
+                trimLeading = siblingIndex == 0;
+                trimTrailing = nextSibling() == null;
+            } // todo - else if inline parent, we may still want to normalize. This is the fix for #1858
+            // however, this node may be the only node in an inline parent, so we need to check nextSib
+            else if (parent != null && parent.tag().isInline()) {
+                // only trim if we are adjacent to an element, or are the only node
+                Node prev = previousSibling();
+                Node next = nextSibling();
+                trimLeading = prev instanceof Element; // only trim leading if adjacent to element, not other text
+                trimTrailing = next instanceof Element || parent.childNodes().size() == 1; // only trim trailing if adjacent to element, or if only node
+            }
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // indent determines if this node starts on a new line. For leading text, pad to space
+            boolean indent = prettyPrint && !isBlank() && // makes sense to indent if !blank
+                ( // and:
+                    (parent != null && parent.tag().formatAsBlock()) // parent is block level
+                    || (out.outline() && (siblingNodes().size() > 0)) // outline mode and siblings
+                );
+
+            if (indent)
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
