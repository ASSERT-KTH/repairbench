diff --git a/tmp/07bd22b8-b674-4a67-95e6-27cb616ce0e6_buggy.java b/tmp/eedd676c-1e55-497c-9a6e-11f4c16ff4c8_fixed.java
index 862c60c..b75aa97 100644
--- a/tmp/07bd22b8-b674-4a67-95e6-27cb616ce0e6_buggy.java
+++ b/tmp/eedd676c-1e55-497c-9a6e-11f4c16ff4c8_fixed.java
@@ -1,25 +1,81 @@
+    @Override // Assuming this overrides a method in Node or a base class
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // parent node is needed for whitespace preservation checks
+        // Element.preserveWhitespace handles null parentNode check
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // calculates if this node should be trimmed based on context (block parent, document root)
+            final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+            // trim leading if first in block or document root.
+            trimLeading = (siblingIndex == 0 && ( (parent != null && parent.tag().isBlock()) || (parentNode instanceof Document)) );
+            // trim trailing if last in block or document root.
+            trimTrailing = (nextSibling() == null && ( (parent != null && parent.tag().isBlock()) || (parentNode instanceof Document)) );
+        }
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+        if (normaliseWhite) {
+            // if this text is just whitespace, and the next node will output a newline (or is blank), skip this text node
+            Node next = nextSibling();
+            boolean nextWillIndentOrIsBlank = false;
+            if (next instanceof Element) {
+                // Check if the next element should indent. Element.shouldIndent calculates based on prettyPrint, block/outline settings.
+                nextWillIndentOrIsBlank = ((Element) next).shouldIndent(out);
+            } else if (next instanceof TextNode) {
+                // Check if the next text node is blank. Can happen typically during DOM manipulation.
+                nextWillIndentOrIsBlank = ((TextNode) next).isBlank();
+            }
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
-                indent(accum, depth, out);
+            if (nextWillIndentOrIsBlank && isBlank()) {
+                // sibling will likely output a newline+indent, and this node is blank, so skip outputting this node.
+                return;
             }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+            // Determine if indentation is needed before this text node
+            boolean indentThis = false;
+            if (!isBlank()) { // Only consider indenting non-blank nodes
+                Node prev = previousSibling();
+                if (out.outline()) { // Outline mode always indents (unless parent preserves whitespace, handled by normaliseWhite check)
+                    indentThis = true;
+                } else {
+                    // Standard indenting rules for text nodes:
+                    // 1. First node in a block parent or document root
+                    if (siblingIndex == 0 && (parentNode instanceof Document || (parentNode instanceof Element && ((Element)parentNode).tag().formatAsBlock()))) {
+                         indentThis = true;
+                    }
+                    // 2. After a block element or a <br> element
+                    else if (prev instanceof Element) {
+                        Element prevEl = (Element) prev;
+                        // Indent after blocks or <br> tags when pretty printing.
+                        // Using normalName() for case-insensitivity ("br", "BR", etc.)
+                        if (prevEl.tag().isBlock() || prevEl.normalName().equals("br")) {
+                             indentThis = true;
+                        }
+                    }
+                    // Note: preserveWhitespace checks are implicitly handled by the top-level `if (normaliseWhite)` guard.
+                }
+            }
+
+            // Apply indentation if required
+            if (indentThis) {
+                indent(accum, depth, out); // indent() handles adding newline and spaces
+            }
+
+            // Adjust trimLeading flag for Entities.escape:
+            // If we added an indent, then we must strip leading spaces from the text node's *content*,
+            // otherwise preserve the original trimLeading calculation (which is based on block context).
+            boolean passTrimLeading = trimLeading || indentThis;
+
+            // Output the text content, applying normalization, trimming, and escaping
+            // Core value is the raw text content of this TextNode.
+            // The normaliseWhite flag enables space collapsing.
+            // passTrimLeading/trimTrailing control trimming based on context and preceding indent.
+            Entities.escape(accum, coreValue(), out, false, normaliseWhite, passTrimLeading, trimTrailing);
+
+        } else {
+            // Not normalizing (prettyPrint=false or preserveWhitespace=true): output raw core value escaped, no normalization/trimming.
+            Entities.escape(accum, coreValue(), out, false, false, false, false);
+        }
     }
\ No newline at end of file
