diff --git a/tmp/2fbebcc9-7dd2-44f0-8707-2a625193543f_buggy.java b/tmp/c1da5759-eec0-4103-a190-92b529955432_fixed.java
index 862c60c..40681e6 100644
--- a/tmp/2fbebcc9-7dd2-44f0-8707-2a625193543f_buggy.java
+++ b/tmp/c1da5759-eec0-4103-a190-92b529955432_fixed.java
@@ -1,25 +1,41 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // If the parent element preserves whitespace, normalization and pretty-printing shouldn't adjust spacing
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Determine if this node's leading/trailing whitespace should be trimmed. Trim if first/last node in block parent.
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+                parentNode instanceof Document; // Trim leading if first node in document
+            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock(); // Trim trailing if last node in block parent
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next element will indent
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, possibly from re-parenting
+            if (couldSkip && isBlank()) return; // Don't print blank text node if the next sibling will indent or is also blank
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Determine if this node should be indented:
+            boolean indent = false;
+            // Indent in outline mode if non-blank.
+            if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {
+                 indent = true;
+            }
+
+            // Indent if the previous sibling was a <br> element.
+            Node previousSibling = previousSibling();
+            if (previousSibling instanceof Element && ((Element) previousSibling).tag().getName().equals("br") && !isBlank()) {
+                 indent = true;
+            }
+            // (Removed original first child indent logic: `siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()`)
+
+            if (indent)
                 indent(accum, depth, out);
         }
 
+        // Now print the text, deferred from the indent check phase above
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
