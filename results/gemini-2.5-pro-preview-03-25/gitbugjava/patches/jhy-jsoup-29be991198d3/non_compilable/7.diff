diff --git a/tmp/2a30c9a1-9178-4815-90e7-2b50c02485e4_buggy.java b/tmp/03d52348-5ca2-42f8-b762-0fcba32ad714_fixed.java
index 862c60c..c7bbd8e 100644
--- a/tmp/2a30c9a1-9178-4815-90e7-2b50c02485e4_buggy.java
+++ b/tmp/03d52348-5ca2-42f8-b762-0fcba32ad714_fixed.java
@@ -1,25 +1,66 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // preserveWhitespace check is recursive up the stack; use the parent node to start the check.
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
-        boolean trimLeading = false;
-        boolean trimTrailing = false;
+        boolean trimLeading = false; // Default value if normaliseWhite is false
+        boolean trimTrailing = false; // Default value if normaliseWhite is false
+
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+            // Calculation of indent and trimming needed only if normalising whitespace
+            Node prev = previousSibling();
+            // Check if the previous sibling was a <br> element.
+            boolean precededByBr = (prev instanceof Element && ((Element) prev).tag().getName().equals("br"));
+            boolean isFirstChild = siblingIndex == 0;
+
+            boolean needsIndent = false;
+            // Indent calculation: determine if this node needs indentation.
+            // Conditions: non-blank node, within a block parent, based on position/outline setting/preceding <br>.
+            if (!isBlank()) { // Indentation logic only applies to non-blank nodes
+                 boolean indentBasedOnPos = false;
+                 if (parent != null && parent.tag().formatAsBlock()) { // Parent must be a block/formatAsBlock for these rules
+                     if (out.outline()) {
+                         // Outline mode: indent if first child OR preceded by <br>
+                         indentBasedOnPos = (isFirstChild || precededByBr);
+                     } else {
+                         // Default mode: indent ONLY if preceded by <br> (implicit: not first child indent unless outline)
+                         indentBasedOnPos = precededByBr;
+                     }
+                 }
+                 // Original outline check might cover other rare cases (e.g. list of textnodes in non-block parent?)
+                 boolean indentForGeneralOutline = (out.outline() && siblingNodes() != null && siblingNodes().size() > 0);
+
+                 needsIndent = indentBasedOnPos || indentForGeneralOutline;
+            }
+
+            // Calculate trim flags based on position and indent need
+            boolean isFirstInBlockOrDoc = (isFirstChild && parent != null && parent.tag().isBlock()) || // isBlock check for trimming context
+                                          (parentNode instanceof Document);
+            // Trim leading space if it's the first node in a block/doc OR if we are indenting it (starts a new logical line)
+            trimLeading = isFirstInBlockOrDoc || needsIndent;
+
+            // Trim trailing space only if it's the last node in a block parent
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Skip check: if this node is blank, and the next node will require indent, or is another blank node,
+            // skip emission of this node (effectively collapsing blank lines).
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            // Need to check next sibling exists. Refs https://github.com/jhy/jsoup/issues/1062
+            boolean nextWillIndent = next != null && (next instanceof Element && ((Element) next).shouldIndent(out));
+            boolean nextIsBlankText = next != null && (next instanceof TextNode && (((TextNode) next).isBlank()));
+            if ((nextWillIndent || nextIsBlankText) && isBlank()) {
+                return; // Don't output this node
+            }
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Perform indent if required (needsIndent already implies !isBlank())
+            if (needsIndent) {
                 indent(accum, depth, out);
             }
+        } // end if(normaliseWhite)
 
+        // Call escape helper, passing the normalise / trim flags.
+        // These flags control whitespace handling within the Entities.escape method.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
