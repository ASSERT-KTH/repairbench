diff --git a/tmp/304b5ff3-02bf-49f0-96c3-65ffc60e25ae_buggy.java b/tmp/89c4ffd2-dd01-44fe-9dec-e8b98de3189d_fixed.java
index 862c60c..cb9090a 100644
--- a/tmp/304b5ff3-02bf-49f0-96c3-65ffc60e25ae_buggy.java
+++ b/tmp/89c4ffd2-dd01-44fe-9dec-e8b98de3189d_fixed.java
@@ -1,25 +1,71 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final Element parent = parent(); // Use parent() method for convenience & null safety
+        // Should whitespace be normalized and indentation applied?
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent);
 
-        boolean trimLeading = false;
-        boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        if (!normaliseWhite) {
+            // If not normalizing, just escape the raw value
+            Entities.escape(accum, coreValue(), out, false, false, false, false);
+            return;
+        }
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Whitespace normalization is active:
+
+        // 1. Skip entirely if this node is blank and the next node will indent or is blank.
+        // (Preserves original skip logic)
+        if (isBlank()) {
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            // Originally: Element.shouldIndent() required parent.formatAsBlock and !parentIsBlock. TextNodes don't have that directly.
+            // Let's simplify the nextWillIndent check: Is the next sibling an Element that is block formatted?
+            boolean nextWillIndent = (next instanceof Element && ((Element) next).tag().formatAsBlock()); // Simplified check if next could cause newline/indent
+            boolean nextIsBlank = (next instanceof TextNode && ((TextNode) next).isBlank());
+            if (nextWillIndent || nextIsBlank) {
+                 return; // Skip this blank node
+            }
+            // If a blank node is not skipped, it should proceed to output (likely just spaces, handled by escape)
+            // but should not trigger indentation itself.
+        }
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        // 2. Determine if indentation (\n + spaces) is required before this text node.
+        boolean indentBefore = false;
+        if (!isBlank()) { // Indentation only applies to non-blank nodes
+            Node prev = previousSibling();
+            // ** Indent if previous sibling was <br> **
+            if (prev instanceof Element && ((Element) prev).tag().getName().equals("br")) {
+                indentBefore = true;
+            } else {
+                // ** OR Indent if this is the first node in a block parent **
+                // ** OR Indent if outline mode is active and node has siblings ** (Original logic)
+                // Note: Element.formatAsBlock is the deciding factor if the parent needs indenting children
+                if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
+                    (out.outline() && siblingNodes().size() > 0)) {
+                     indentBefore = true;
+                }
+            }
+        }
+
+        // 3. Perform indentation if needed.
+        if (indentBefore) {
             indent(accum, depth, out);
         }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // 4. Determine if leading/trailing whitespace *within the node's value* should be trimmed by Entities.escape
+        // This is based on position within a block parent or Document.
+        boolean trimLeading = false;
+        boolean trimTrailing = false;
+        // Check parent() result directly
+        if (parent != null && parent.tag().isBlock()) {
+             trimLeading = (siblingIndex == 0); // Trim leading space if first child in block
+             trimTrailing = (nextSibling() == null); // Trim trailing space if last child in block
+         } else if (parentNode instanceof Document) { // Handle direct child of Document (root)
+             trimLeading = (siblingIndex == 0);
+             trimTrailing = (nextSibling() == null);
+         }
+         // Note: Original code had a specific check for parentNode instanceof Document separate from the parent block check.
+
+        // 5. Escape and append the node's value.
+        // Pass normaliseWhite=true, and the calculated trim flags.
+        Entities.escape(accum, coreValue(), out, false, true /* normaliseWhite */, trimLeading, trimTrailing);
     }
\ No newline at end of file
