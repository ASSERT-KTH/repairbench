diff --git a/tmp/c2e68150-754f-438f-b198-3c9708d9faa1_buggy.java b/tmp/51028e1e-ca8e-4ce5-918a-82e8ab9a1a3e_fixed.java
index 862c60c..347ef54 100644
--- a/tmp/c2e68150-754f-438f-b198-3c9708d9faa1_buggy.java
+++ b/tmp/51028e1e-ca8e-4ce5-918a-82e8ab9a1a3e_fixed.java
@@ -1,25 +1,44 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        //final Document owner = ownerDocument(); // Unused in this logic path
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // Needs to check parent chain (as preserveWhitespace does)
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Calculate trimming flags based on position within block parents
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+                parentNode instanceof Document; // First node in block container, or root node
+            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock(); // Last node in block container
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // If this node is blank, and is followed by a node that will receive an indent, skip this node
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && ((TextNode) next).isBlank()); // Don't output blank text followed by blank text or indenting element
+            if (couldSkip && isBlank()) return; // Skip printing if we are blank and the next node will handle spacing
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            // Indentation logic for non-blank text nodes:
+            if (!isBlank()) {
+                Node prev = previousSibling();
+                // Indent if:
+                // 1. We are preceded by a <br> tag.
+                // 2. We are the first child of a parent element that requires indentation itself (e.g., a div, but not a p).
+                // 3. Outline mode is on and we have siblings (original check was siblingNodes().size() > 0).
+                boolean followsBr = prev != null && prev.nodeName().equals("br");
+                boolean parentIndent = parent != null && parent.shouldIndent(out); // Check if the parent element itself is indented
+                boolean isFirstChild = siblingIndex == 0;
+                boolean outline = out.outline();
+                // Check used in original outline mode logic was siblingNodes().size() > 0. Assuming this is correct for outline indent.
+                boolean inOutlineWithSiblings = outline && siblingNodes().size() > 0;
+
+                if (followsBr || (isFirstChild && parentIndent) || inOutlineWithSiblings) {
                     indent(accum, depth, out);
                 }
+            }
+            // Note: The original indentation logic was different and has been replaced by the block above.
+        }
 
+        // Delegate printing of the text content to Entities for escaping and normalization, applying trimming flags
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
