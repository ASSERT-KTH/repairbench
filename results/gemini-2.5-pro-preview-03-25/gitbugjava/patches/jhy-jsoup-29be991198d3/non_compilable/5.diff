diff --git a/tmp/417260a3-9de4-4915-b1fd-d5cf8908daab_buggy.java b/tmp/68c974c3-11c6-4bc9-804a-11e038ac49b6_fixed.java
index 862c60c..cb114d8 100644
--- a/tmp/417260a3-9de4-4915-b1fd-d5cf8908daab_buggy.java
+++ b/tmp/68c974c3-11c6-4bc9-804a-11e038ac49b6_fixed.java
@@ -1,25 +1,59 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+        // Whether to normalize adjacent whitespace nodes. If disabled, will collapse consecutive whitespace sequences.
+        // And whether nodes need indenting.
+        final boolean normaliseWhite = prettyPrint && parent != null && !Element.preserveWhitespace(parent);
 
-        boolean trimLeading = false;
+        boolean trimLeading = false; // Tracks if this node should be trimmed. Used by escape.
         boolean trimTrailing = false;
+
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // calculate trim flags, used for Entities.escape:
+            // trimLeading if first node in block parent, or parent is document.
+            trimLeading = (siblingIndex == 0 && ( (parent != null && parent.tag().isBlock()) || parentNode instanceof Document ));
+            // trimTrailing if last node in block parent.
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the next node will cause an indent, skip this text node:
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            boolean couldSkip = false;
+            if (next instanceof Element)
+                couldSkip = ((Element) next).shouldIndent(out); // next element will indent
+            else if (next instanceof TextNode)
+                couldSkip = ((TextNode) next).isBlank(); // next is blank text node
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            if (couldSkip && isBlank()) return; // don't output this node
+
+
+            // Indentation logic: Only indent if this node is not blank.
+            if (!isBlank()) {
+                // Conditions for indent:
+                // 1) Output is outlined
+                // 2) First child of a block element or document
+                // 3) Follows a block element or a <br> element
+                boolean indentRequired = false;
+                if (out.outline()) {
+                    indentRequired = true;
+                } else {
+                    Node prev = previousSibling();
+                    // Indent if: First child of block/doc OR follows block/br (and not in pre). normaliseWhite check implies not in pre.
+                    if (siblingIndex == 0 && ((parent != null && parent.tag().isBlock()) || parentNode instanceof Document)) {
+                        indentRequired = true; // First child of block or doc
+                    } else if (prev instanceof Element) {
+                        Element prevElem = (Element) prev;
+                        if (prevElem.tag().isBlock() || "br".equals(prevElem.normalName())) {
+                            indentRequired = true; // Follows block or br
+                        }
+                    }
+                }
+
+                if (indentRequired) {
                     indent(accum, depth, out);
                 }
+            } // end if (!isBlank())
+        } // end if(normaliseWhite)
 
+        // Finally, escape and append the text:
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
