diff --git a/tmp/7ff88822-776a-409b-af75-fb16126a2346_buggy.java b/tmp/bbd3d1e6-db40-4b31-9926-ebc1655d6d08_fixed.java
index 862c60c..de09e9a 100644
--- a/tmp/7ff88822-776a-409b-af75-fb16126a2346_buggy.java
+++ b/tmp/bbd3d1e6-db40-4b31-9926-ebc1655d6d08_fixed.java
@@ -1,25 +1,62 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // parentNode must exist for TextNode, no need to check for null
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
-        boolean trimLeading = false;
-        boolean trimTrailing = false;
+        boolean trimLeading = false; // Tracks if space should be trimmed from the start of the string
+        boolean trimTrailing = false; // Tracks if space should be trimmed from the end of the string
+
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Determine if this node should be skipped completely
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            // Conditions to skip this TextNode:
+            // 1) It's blank.
+            // 2) The next node exists, and is either an Element that will indent, or another blank TextNode.
+            boolean couldSkip = isBlank() && next != null &&
+                ( (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                  (next instanceof TextNode && ((TextNode) next).isBlank()) );
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+            if (couldSkip) return; // Don't output this node if blank and next node indents or is blank
+
+            // Determine if this node needs an indent sequence prepended
+            boolean indentThis = false;
+            if (!isBlank()) { // Don't indent blank nodes unless outline mode forces it? (Existing check is !isBlank)
+                // Outline mode indents all non-blank nodes with siblings
+                if (out.outline() && siblingNodes().size() > 0) {
+                    indentThis = true;
+                } else if (parentNode instanceof Element) {
+                    Element parent = (Element) parentNode;
+                    // Indent required if:
+                    // - Parent is a block tag that doesn't preserve whitespace.
+                    // - AND This node is the first child.
+                    // - OR This node follows a <br> tag.
+                    if (parent.tag().formatAsBlock()) { // Check if parent is block
+                        Node prev = previousSibling();
+                        final boolean isFirstChild = (siblingIndex == 0);
+                        // Check if previous sibling was a <br> element
+                        final boolean previousIsBr = (!isFirstChild && prev instanceof Element && ((Element)prev).tag().getName().equals("br"));
+
+                        if (isFirstChild || previousIsBr) {
+                            indentThis = true;
+                        }
+                    }
+                }
+            }
+
+            if (indentThis) {
                 indent(accum, depth, out);
             }
 
+            // Determine if the node's text should have leading/trailing whitespace trimmed.
+            // Trim leading if this is the first node in a block parent or the document root.
+            // Trim trailing if this is the last node in a block parent.
+            Element parent = parentNode instanceof Element ? ((Element) parentNode) : null; // Need parent Element again
+            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+                           parentNode instanceof Document;
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock());
+        }
+
+        // Finally, call the escape helper to append the text content, applying normalization and trimming as needed.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
