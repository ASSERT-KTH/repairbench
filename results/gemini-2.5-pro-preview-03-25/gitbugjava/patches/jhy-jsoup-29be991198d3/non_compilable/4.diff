diff --git a/tmp/2991ef47-21a8-4d2e-beba-a574c0e1d604_buggy.java b/tmp/2038ac0b-51d2-456f-b9d0-d56898025d00_fixed.java
index 862c60c..ee600af 100644
--- a/tmp/2991ef47-21a8-4d2e-beba-a574c0e1d604_buggy.java
+++ b/tmp/2038ac0b-51d2-456f-b9d0-d56898025d00_fixed.java
@@ -1,25 +1,52 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent); // Use 'parent' which is checked for null later
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Conditions for trimming leading space of this text node
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+                parentNode instanceof Document; // Direct child of Document
+
+            // Conditions for trimming trailing space of this text node
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Skip this node if it's blank and the next node requires indent or is also blank
             Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            boolean nextCond = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                               (next instanceof TextNode && ((TextNode) next).isBlank());
+            if (nextCond && isBlank()) return; // Skip blank text node
 
+            // Indent before the text if it's the first non-blank node in a block/outline context
+            // simplified the logic slightly from original, but same intent:
+            if ((out.outline() || (parent != null && parent.tag().formatAsBlock())) && !isBlank() ) {
+                // only indent if the first node in a block and not preserving whitespace. Or in outline mode.
+                if (siblingIndex == 0 && parent != null && !parent.tag().preserveWhitespace()) {
+                     indent(accum, depth, out);
+                } else if (out.outline() && siblingNodes().size() > 0) {
+                    // Re-enable careful indent for outline mode Disabled in original: && siblingNodes().size() > 0
+                    indent(accum, depth, out);
+                }
+                // todo: check if this sufficient for all cases? It differs slightly from original. Let's revert to original indent logic.
+            }
+            // Revert indent logic to original exactly:
             if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+                (out.outline() && siblingNodes().size() > 0 && !isBlank())) {
                 indent(accum, depth, out);
             }
+        }
+
+        // Issue #1858: Add a leading space if this text node follows a <br> tag during pretty-printing normalization.
+        Node prev = previousSibling();
+        if (prettyPrint && normaliseWhite && !isBlank() && prev instanceof Element && ((Element)prev).tag().getName().equals("br")) {
+            // The indent logic elsewhere should have added the newline; we add the space.
+            accum.append(' ');
+        }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Escape and append the text content.
+        // Use coreValue() for TextNode, or potentially getWholeText() if it needs to span? No, outerHtmlHead is per node.
+        boolean isCData = this instanceof CDataNode; // Check if instanceof CDataNode for escape settings
+        Entities.escape(accum, coreValue(), out, isCData, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
