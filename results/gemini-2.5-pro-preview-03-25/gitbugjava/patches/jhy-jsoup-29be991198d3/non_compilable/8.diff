diff --git a/tmp/27f6c57a-f1b8-4d5a-adce-64c9f7e6aead_buggy.java b/tmp/da449ac7-8ba5-45f4-a475-e9f4b7e8146b_fixed.java
index 862c60c..7872576 100644
--- a/tmp/27f6c57a-f1b8-4d5a-adce-64c9f7e6aead_buggy.java
+++ b/tmp/da449ac7-8ba5-45f4-a475-e9f4b7e8146b_fixed.java
@@ -1,25 +1,49 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // normaliseWhite needs Element.preserveWhitespace, which needs parent. Ensure parent not null.
+        final boolean normaliseWhite = prettyPrint && parent != null && !Element.preserveWhitespace(parent);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // calculate trims based on relationship to block elements or document root
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+                (parentNode instanceof Document); // trim leading if first node in block parent, or first node in doc
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().isBlock()); // trim trailing if last node in block parent
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = this.nextSibling();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+            if (couldSkip && isBlank()) return; // Don't print empty text nodes stacked before elements that require indent
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+
+            // Indentation logic:
+            boolean indentOutput = false;
+            // 1. Outline mode: indent non-blank nodes being outlined.
+            if (out.outline() && siblingNodes().size() > 0 && !isBlank()) {
+                 indentOutput = true;
+            }
+            // 2. After <br>: indent after a <br> element.
+            // Uses 'else' to avoid double indent if outline mode is already indenting.
+            else {
+                Node prev = previousSibling();
+                // Check if the previous sibling is an Element and its tag name is "br".
+                if (prev instanceof Element && ((Element) prev).tag().getName().equals("br")) {
+                    // We need to indent after a <br> in pretty print mode.
+                    // No need to check !isBlank() here, as indent (newline + space) should
+                    // precede the text regardless of its content, matching the expectation.
+                    indentOutput = true;
+                }
+            }
+
+            // Perform indentation if required.
+            if (indentOutput) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Escape and write text, applying normalization and trimming as calculated.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
