diff --git a/tmp/792c60d9-9820-46a3-8819-b935dadbd046_buggy.java b/tmp/5d7082bf-53e2-46ed-a424-f7187fe3d1e1_fixed.java
index 1c732f4..8ea7774 100644
--- a/tmp/792c60d9-9820-46a3-8819-b935dadbd046_buggy.java
+++ b/tmp/5d7082bf-53e2-46ed-a424-f7187fe3d1e1_fixed.java
@@ -1,88 +1,120 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Find boundaries, handle cases where delimiters might be missing
+        int firstPipe = sentence.indexOf('|');
+        int lastPipe = sentence.lastIndexOf('|');
+        if (firstPipe == -1 || lastPipe == -1 || firstPipe == lastPipe) {
+            return null; // Invalid format
+        }
+        sentence = sentence.substring(firstPipe + 1, lastPipe);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
+        // Assume GPS is valid by default. If the 'gps_valid' field is present and is '0',
+        // it will be set to false below. This handles cases where the field might be missing
+        // but the coordinates are present and considered valid by the protocol/device.
+        position.setValid(true);
+
+        DeviceSession deviceSession = null; // Store device session if found
 
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
+            // Ensure key-value pair is valid before processing
+            if (delimiter <= 0 || delimiter == entry.length() - 1) {
+                continue; // Skip malformed entries
+            }
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
+
+            // Use try-catch blocks for robustness against parsing errors
+            try {
                 switch (key) {
                     case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                        deviceSession = getDeviceSession(channel, remoteAddress, value);
                         if (deviceSession != null) {
                             position.setDeviceId(deviceSession.getDeviceId());
                         }
                         break;
                     case "gps_valid":
                         position.setValid(Integer.parseInt(value) != 0);
                         break;
                     case "datetime_actual":
+                        // Consider making SimpleDateFormat static or using thread-safe alternatives if performance is critical
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                         break;
                     case "latitude":
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case "longitude":
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case "altitude":
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case "velocity":
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case "heading":
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case "eventid":
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
                         break;
                     case "mileage":
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                         break;
                     case "satellites":
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case "ignition":
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                         break;
                     case "door":
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                         break;
                     case "arm":
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                         break;
                     case "fuel":
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                         break;
                     case "rpm":
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case "main_voltage":
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
                         break;
                     case "backup_voltage":
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                         break;
                     case "analog1":
                     case "analog2":
                     case "analog3":
+                        // Ensure the key has a digit at the end before parsing
+                        if (key.length() > "analog".length()) {
                             position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                        }
                         break;
                     case "extra1":
                     case "extra2":
                     case "extra3":
                     default:
                         position.set(key, value);
                         break;
                 }
+            } catch (NumberFormatException | java.text.ParseException e) {
+                // Log or handle parsing exceptions if necessary, e.g., Log.warning(...)
+                // Continue processing other fields even if one fails
+            }
+        }
+
+        // It's common practice in Traccar to return null if the device ID couldn't be resolved.
+        if (position.getDeviceId() == 0) {
+             return null;
         }
 
         return position;
     }
\ No newline at end of file
