diff --git a/tmp/9c3fb730-5dca-4eb2-8b95-479d137c1051_buggy.java b/tmp/3b8ad37c-48d5-408b-8ffe-c83005f70d33_fixed.java
index 1c732f4..0377bbe 100644
--- a/tmp/9c3fb730-5dca-4eb2-8b95-479d137c1051_buggy.java
+++ b/tmp/3b8ad37c-48d5-408b-8ffe-c83005f70d33_fixed.java
@@ -1,88 +1,140 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Find the first and last pipe characters
+        int firstPipe = sentence.indexOf('|');
+        int lastPipe = sentence.lastIndexOf('|');
+
+        // Ensure both pipes are found and in the correct order
+        if (firstPipe == -1 || lastPipe == -1 || firstPipe >= lastPipe) {
+             return null; // Invalid format
+        }
+
+        // Extract the content between the pipes
+        sentence = sentence.substring(firstPipe + 1, lastPipe);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
+        DeviceSession deviceSession = null; // Keep track of device session identified by "unit"
+
         for (String entry : sentence.split(",")) {
+            entry = entry.trim(); // Trim entry for robustness
+            if (entry.isEmpty()) {
+                continue; // Skip empty parts
+            }
+
             int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+            // Ensure '=' exists and is not at the start or end
+            if (delimiter <= 0 || delimiter == entry.length() - 1) {
+                 continue; // Skip malformed entries
+            }
+
+            String key = entry.substring(0, delimiter).trim(); // Trim key
+            String value = entry.substring(delimiter + 1).trim(); // Trim value
+
+            // Skip if key or value is empty after trimming
+            if (key.isEmpty() || value.isEmpty()) {
+                continue;
+            }
+
             switch (key) {
                 case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                    // Get session first, set deviceId later after loop if not null
+                    deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession != null) {
                         position.setDeviceId(deviceSession.getDeviceId());
                     }
                     break;
                 case "gps_valid":
                     position.setValid(Integer.parseInt(value) != 0);
                     break;
                 case "datetime_actual":
+                    try {
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    } catch (java.text.ParseException e) {
+                        // Log or ignore invalid date format
+                        // Log.warning("Failed to parse datetime_actual: " + value, e);
+                    }
                     break;
                 case "latitude":
                     position.setLatitude(Double.parseDouble(value));
                     break;
                 case "longitude":
                     position.setLongitude(Double.parseDouble(value));
                     break;
                 case "altitude":
                     position.setAltitude(Double.parseDouble(value));
                     break;
                 case "velocity":
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                     break;
                 case "heading":
                     position.setCourse(Integer.parseInt(value));
                     break;
                 case "eventid":
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
                     break;
                 case "mileage":
+                    // Assuming mileage is in km, convert to meters for KEY_ODOMETER
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                     break;
                 case "satellites":
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case "ignition":
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                     break;
                 case "door":
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                     break;
                 case "arm":
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                     break;
+                case "immobilizer": // Added case for immobilizer based on test data
+                    position.set(Position.KEY_IMMOBILIZER, Integer.parseInt(value) != 0);
+                    break;
                 case "fuel":
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                     break;
                 case "rpm":
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
                     break;
                 case "main_voltage":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
                     break;
                 case "backup_voltage":
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                     break;
                 case "extra1":
                 case "extra2":
                 case "extra3":
                 default:
+                    // Store unknown or unhandled keys as string attributes
                     position.set(key, value);
                     break;
             }
         }
 
+        // Set deviceId based on session found via "unit" key
+        // Or try to get session if "unit" wasn't present but connection has associated device
+        if (position.getDeviceId() == 0) {
+            deviceSession = getDeviceSession(channel, remoteAddress);
+            if (deviceSession != null) {
+                position.setDeviceId(deviceSession.getDeviceId());
+            } else {
+                // If no device ID could be determined, the message cannot be processed further.
+                 return null;
+            }
+        }
+
+
         return position;
     }
\ No newline at end of file
