diff --git a/tmp/e297164c-adc9-459c-80ff-9dabe77626f2_buggy.java b/tmp/07323c00-b2d0-4a22-ac02-8265ac098cfc_fixed.java
index 1c732f4..ca0a370 100644
--- a/tmp/e297164c-adc9-459c-80ff-9dabe77626f2_buggy.java
+++ b/tmp/07323c00-b2d0-4a22-ac02-8265ac098cfc_fixed.java
@@ -1,88 +1,146 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Ensure substring indices are valid before calling substring
+        int startIndex = sentence.indexOf('|');
+        int endIndex = sentence.lastIndexOf('|');
+        if (startIndex == -1 || endIndex == -1 || startIndex >= endIndex) {
+            return null; // Invalid format, missing delimiters or wrong order
+        }
+        sentence = sentence.substring(startIndex + 1, endIndex);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
+        DeviceSession deviceSession = null;
+        String unitValue = null;
+
+        // Pre-scan for unit to get DeviceSession early
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
+            if (delimiter > 0 && entry.substring(0, delimiter).equals("unit")) {
+                unitValue = entry.substring(delimiter + 1);
+                break;
+            }
+        }
+
+        // Get device session using the unit value
+        if (unitValue != null && !unitValue.isEmpty()) {
+            deviceSession = getDeviceSession(channel, remoteAddress, unitValue);
+            if (deviceSession == null) {
+                // Log missing device session?
+                return null; // Cannot identify device, reject message
+            }
+            position.setDeviceId(deviceSession.getDeviceId());
+        } else {
+            // Log missing unit field?
+            return null; // 'unit' field is mandatory
+        }
+
+        // Process all key-value pairs
+        for (String entry : sentence.split(",")) {
+            int delimiter = entry.indexOf('=');
+            // Ensure delimiter exists and key is not empty
+            if (delimiter <= 0 || delimiter + 1 > entry.length()) {
+                continue; // Skip malformed entries
+            }
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
+
+            // Skip unit field as it's already processed
+            if (key.equals("unit")) {
+                continue;
+            }
+
+            // Use try-catch blocks for parsing to avoid crashing on unexpected values
+            try {
                 switch (key) {
-                case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
-                    if (deviceSession != null) {
-                        position.setDeviceId(deviceSession.getDeviceId());
-                    }
-                    break;
                     case "gps_valid":
                         position.setValid(Integer.parseInt(value) != 0);
                         break;
                     case "datetime_actual":
+                        // Consider TimeZone UTC if needed:
+                        // SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
+                        // sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
+                        // position.setTime(sdf.parse(value));
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                         break;
                     case "latitude":
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case "longitude":
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case "altitude":
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case "velocity":
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case "heading":
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case "eventid":
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
                         break;
                     case "mileage":
+                        // Use mileage for odometer if odometer field is not present or preferred
+                        // Assuming mileage is in km, convert to meters
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                         break;
                     case "satellites":
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case "ignition":
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                         break;
                     case "door":
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                         break;
                     case "arm":
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                         break;
                     case "fuel":
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                         break;
                     case "rpm":
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case "main_voltage":
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
                         break;
                     case "backup_voltage":
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                         break;
                     case "analog1":
                     case "analog2":
                     case "analog3":
                         position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                         break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
                     default:
+                        // Store other fields as attributes if value is not empty
+                        if (!value.isEmpty()) {
                             position.set(key, value);
+                        }
                         break;
                 }
+            } catch (NumberFormatException | ParseException e) {
+                // Log parsing exception? For now, ignore and continue processing other fields.
+                // Potentially log: Log.getLogger(StarcomProtocolDecoder.class).warn("Failed to parse field: " + key, e);
             }
+        }
+
+        // Check if essential fields like time and coordinates are set.
+        // If not, the position might still be invalid despite gps_valid=1.
+        // The Position class itself might handle this logic in isValid().
+        if (position.getTime() == null || position.getLatitude() == 0 && position.getLongitude() == 0) {
+             // If position lacks time or coordinates, it might not be valid.
+             // However, rely on the gps_valid flag primarily as per original logic.
+             // No change needed here unless protocol specifies otherwise.
+        }
+
 
         return position;
     }
\ No newline at end of file
