diff --git a/tmp/88a3d664-d567-471b-b281-6466a394f171_buggy.java b/tmp/46b99c0a-5ce2-434b-ae6f-6b8757d34a5c_fixed.java
index 1c732f4..00c3a30 100644
--- a/tmp/88a3d664-d567-471b-b281-6466a394f171_buggy.java
+++ b/tmp/46b99c0a-5ce2-434b-ae6f-6b8757d34a5c_fixed.java
@@ -1,88 +1,129 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Check if the message contains the expected delimiters before substring operations
+        int firstPipe = sentence.indexOf('|');
+        int lastPipe = sentence.lastIndexOf('|');
+        if (firstPipe == -1 || lastPipe == -1 || firstPipe == lastPipe) {
+            // Return null for malformed message that doesn't fit the expected |...| structure
+             return null;
+        }
+        sentence = sentence.substring(firstPipe + 1, lastPipe);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
+        boolean gpsValidFound = false; // Track if gps_valid key is present in the message
+
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
+            // Ensure key=value format and ignore entries without '=' or with empty key/value parts
+            if (delimiter <= 0 || delimiter == entry.length() - 1) {
+                continue; // Skip malformed or empty entries
+            }
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
+
+            // Use try-catch blocks for parsing to handle potential errors gracefully
+            try {
                 switch (key) {
                     case "unit":
                         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                         if (deviceSession != null) {
                             position.setDeviceId(deviceSession.getDeviceId());
                         }
                         break;
                     case "gps_valid":
                         position.setValid(Integer.parseInt(value) != 0);
+                        gpsValidFound = true; // Mark gps_valid as processed
                         break;
                     case "datetime_actual":
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                         break;
                     case "latitude":
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case "longitude":
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case "altitude":
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case "velocity":
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case "heading":
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case "eventid":
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
                         break;
                     case "mileage":
+                        // Assuming mileage is in km, convert to meters for KEY_ODOMETER
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                         break;
                     case "satellites":
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case "ignition":
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                         break;
                     case "door":
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                         break;
                     case "arm":
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                         break;
                     case "fuel":
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                         break;
                     case "rpm":
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case "main_voltage":
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
                         break;
                     case "backup_voltage":
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                         break;
                     case "analog1":
                     case "analog2":
                     case "analog3":
+                        // Calculate ADC index (1, 2, or 3) from the last character
                         position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                         break;
                     case "extra1":
                     case "extra2":
                     case "extra3":
+                        // Store extra fields as string attributes
+                        position.set(key, value);
+                        break;
                     default:
+                        // Store any other unknown key-value pairs as string attributes
                         position.set(key, value);
                         break;
                 }
+            } catch (NumberFormatException | ParseException | IndexOutOfBoundsException e) {
+                // Log or ignore parsing errors for individual fields?
+                // For robustness, ignore the field causing the error and continue parsing others.
+                // Logger.getLogger(StarcomProtocolDecoder.class.getName()).log(Level.WARNING, "Failed to parse field: " + entry, e);
+            }
+        }
+
+        // After processing all pairs, infer validity if gps_valid was missing
+        // and we have non-zero latitude and longitude coordinates.
+        // The Position object's valid flag defaults to false.
+        if (!gpsValidFound && position.getLatitude() != 0 && position.getLongitude() != 0) {
+            position.setValid(true);
+        }
+
+        // Return the position object, potentially incomplete if essential fields were missing or failed parsing.
+        // Downstream logic in Traccar usually handles filtering of incomplete positions if necessary.
+        if (position.getDeviceId() == 0) {
+             return null; // Return null if device ID could not be determined.
         }
 
         return position;
     }
\ No newline at end of file
