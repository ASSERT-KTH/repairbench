diff --git a/tmp/0d3dc0aa-b58b-424e-a80b-93ca81161005_buggy.java b/tmp/da31fa61-85b8-472a-8273-fb8deb10ef37_fixed.java
index 1c732f4..24bc06a 100644
--- a/tmp/0d3dc0aa-b58b-424e-a80b-93ca81161005_buggy.java
+++ b/tmp/da31fa61-85b8-472a-8273-fb8deb10ef37_fixed.java
@@ -1,88 +1,147 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        int firstPipe = sentence.indexOf('|');
+        int lastPipe = sentence.lastIndexOf('|');
+        if (firstPipe == -1 || lastPipe == -1 || lastPipe <= firstPipe) {
+            return null; // Not a valid message format
+        }
+        sentence = sentence.substring(firstPipe + 1, lastPipe);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
+        DeviceSession deviceSession = null;
 
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+            if (delimiter <= 0 || delimiter >= entry.length() - 1) { // Ensure key and value exist
+                continue; // Skip malformed entries
+            }
+            String key = entry.substring(0, delimiter).trim(); // Trim whitespace
+            String value = entry.substring(delimiter + 1).trim(); // Trim whitespace
+
+            // Skip empty keys or values, unless a specific key allows empty value
+            if (key.isEmpty() || value.isEmpty()) {
+                continue;
+            }
+
+            try { // Wrap parsing logic in try-catch to handle potential format errors
                 switch (key) {
                     case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                        deviceSession = getDeviceSession(channel, remoteAddress, value);
                         if (deviceSession != null) {
                             position.setDeviceId(deviceSession.getDeviceId());
+                        } else {
+                            // Log missing device session?
                         }
                         break;
                     case "gps_valid":
                         position.setValid(Integer.parseInt(value) != 0);
                         break;
                     case "datetime_actual":
+                        // Use existing time if already set (e.g., from datetime_utc if it came first)
+                        if (position.getFixTime() == null) {
+                           position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                        }
+                        break;
+                    case "datetime_utc":
+                         // Allow UTC time to override device time if present, assuming it's more accurate
                          position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                          break;
                     case "latitude":
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case "longitude":
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case "altitude":
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case "velocity":
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case "heading":
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case "eventid":
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
                         break;
                     case "mileage":
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                         break;
+                    // Handle 'odometer' field if present, potentially overriding 'mileage'
+                    case "odometer":
+                        position.set(Position.KEY_ODOMETER, Long.parseLong(value)); // Assuming meters
+                        break;
                     case "satellites":
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case "ignition":
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                         break;
                     case "door":
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                         break;
                     case "arm":
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                         break;
                     case "fuel":
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                         break;
                     case "rpm":
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case "main_voltage":
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
                         break;
                     case "backup_voltage":
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                         break;
                     case "analog1":
                     case "analog2":
                     case "analog3":
                         position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                         break;
+                    // FIX: Handle immobilizer explicitly as boolean
+                    case "immobilizer":
+                        position.set(Position.KEY_IMMOBILIZER, Integer.parseInt(value) != 0);
+                        break;
+                    case "emergency": // Often maps to SOS
+                        boolean sos = Integer.parseInt(value) != 0;
+                        position.set(Position.KEY_SOS, sos);
+                        if (sos) {
+                            position.set(Position.KEY_ALARM, org.traccar.model.Alarm.ALARM_SOS);
+                        }
+                        break;
+                    case "lock": // Map to KEY_LOCK if it represents door lock status
+                        position.set(Position.KEY_LOCK, Integer.parseInt(value) != 0);
+                        break;
                     case "extra1":
                     case "extra2":
                     case "extra3":
+                        // Fall-through intended
                     default:
-                    position.set(key, value);
+                        position.set(key, value); // Store other fields as string attributes
                         break;
                 }
+            } catch (NumberFormatException | java.text.ParseException e) {
+                // Log parsing exception for the specific key/value?
+                // Log.warning("Failed to parse Starcom field: " + key + "=" + value + " - " + e.getMessage());
+            }
+        }
+
+        // Ensure deviceId is set if position is otherwise valid
+        if (position.getDeviceId() == 0 && deviceSession != null) {
+             position.setDeviceId(deviceSession.getDeviceId());
         }
 
+        // Return position only if essential fields are present
+        if (position.getDeviceId() != 0 && position.getFixTime() != null) {
             return position;
+        } else {
+            // Log discarded message due to missing essential info?
+            return null; // Or return partial position depending on requirements
+        }
     }
\ No newline at end of file
