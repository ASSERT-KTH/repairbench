diff --git a/tmp/b74b8f96-5a99-4dff-ad0e-4da8e6a22648_buggy.java b/tmp/06c1f45c-b8d7-442d-8e20-b911a951eca7_fixed.java
index 1c732f4..3d093f8 100644
--- a/tmp/b74b8f96-5a99-4dff-ad0e-4da8e6a22648_buggy.java
+++ b/tmp/06c1f45c-b8d7-442d-8e20-b911a951eca7_fixed.java
@@ -1,88 +1,123 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Extract content between the first and last '|'
+        int firstPipe = sentence.indexOf('|');
+        int lastPipe = sentence.lastIndexOf('|');
+        // Basic check for pipes and ensure they are not the same character
+        if (firstPipe == -1 || lastPipe == -1 || firstPipe >= lastPipe) {
+            return null; // Malformed sentence or no content between pipes
+        }
+        sentence = sentence.substring(firstPipe + 1, lastPipe);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+            // Ensure '=' exists and is not at the beginning or end of the entry
+            if (delimiter <= 0 || delimiter == entry.length() - 1) {
+                continue; // Skip malformed entries like "=value", "key=", "=" or entries without '='
+            }
+            // Trim key and value to handle potential leading/trailing whitespace
+            String key = entry.substring(0, delimiter).trim();
+            String value = entry.substring(delimiter + 1).trim();
+
+            // Skip if key or value became empty after trimming
+            if (key.isEmpty() || value.isEmpty()) {
+                continue;
+            }
+
+            try { // Add a try-catch block for robustness against parsing errors
                 switch (key) {
                     case "unit":
                         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                         if (deviceSession != null) {
                             position.setDeviceId(deviceSession.getDeviceId());
                         }
                         break;
                     case "gps_valid":
                         position.setValid(Integer.parseInt(value) != 0);
                         break;
                     case "datetime_actual":
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
                         break;
                     case "latitude":
                         position.setLatitude(Double.parseDouble(value));
                         break;
                     case "longitude":
                         position.setLongitude(Double.parseDouble(value));
                         break;
                     case "altitude":
                         position.setAltitude(Double.parseDouble(value));
                         break;
                     case "velocity":
                         position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                         break;
                     case "heading":
                         position.setCourse(Integer.parseInt(value));
                         break;
                     case "eventid":
                         position.set(Position.KEY_EVENT, Integer.parseInt(value));
                         break;
                     case "mileage":
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                         break;
                     case "satellites":
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                         break;
                     case "ignition":
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                         break;
                     case "door":
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                         break;
                     case "arm":
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                         break;
                     case "fuel":
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                         break;
                     case "rpm":
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
                         break;
                     case "main_voltage":
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
                         break;
                     case "backup_voltage":
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                         break;
                     case "analog1":
                     case "analog2":
                     case "analog3":
+                        // Check key length before accessing last character
+                        if (key.length() > "analog".length()) {
                             position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                        }
                         break;
                     case "extra1":
                     case "extra2":
                     case "extra3":
+                        // Let extra keys fall through to default to be stored as generic attributes
                     default:
-                    position.set(key, value);
+                        position.set(key, value); // Store unknown keys as string attributes
                         break;
                 }
+            } catch (NumberFormatException | java.text.ParseException e) {
+                // Log parsing errors or handle them as needed, e.g., by ignoring the specific field
+                // For now, we'll just ignore the field that failed to parse
+                System.err.println("Failed to parse entry: " + entry + " for key: " + key + " - " + e.getMessage());
             }
+        }
+
+        // Basic validation: return null if essential info like deviceId or time is missing
+        if (position.getDeviceId() == 0) {
+             // If device identification is mandatory
+             return null;
+        }
+        // Depending on requirements, might also check position.getFixTime() != null
 
         return position;
     }
\ No newline at end of file
