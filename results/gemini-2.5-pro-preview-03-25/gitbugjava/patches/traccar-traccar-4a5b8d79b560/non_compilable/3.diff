diff --git a/tmp/c8c827a8-71a8-41fa-abf2-f23ceb89c90f_buggy.java b/tmp/0bee6514-4e0f-40f8-a867-b78bfc0daa4d_fixed.java
index 1c732f4..b59b93f 100644
--- a/tmp/c8c827a8-71a8-41fa-abf2-f23ceb89c90f_buggy.java
+++ b/tmp/0bee6514-4e0f-40f8-a867-b78bfc0daa4d_fixed.java
@@ -1,88 +1,240 @@
+import java.net.SocketAddress;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Set;
+
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.session.DeviceSession;
+import org.traccar.model.Position;
+import org.traccar.helper.UnitsConverter;
+// Assume necessary imports are present for Position, Channel, SocketAddress, BaseProtocolDecoder, DeviceSession, UnitsConverter etc.
+
+// The following class definition is assumed based on the context provided.
+// public class StarcomProtocolDecoder extends BaseProtocolDecoder {
+//    public StarcomProtocolDecoder(org.traccar.Protocol protocol) { /* constructor */ }
+//    protected String getProtocolName() { return "starcom"; }
+//    protected DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) { /* implementation */ return null; }
+//    protected DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress) { /* implementation */ return null; }
+
+
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+        // Basic format check: ensure the message contains the expected delimiters
+        int start = sentence.indexOf('|');
+        int end = sentence.lastIndexOf('|');
+        if (start == -1 || end == -1 || start >= end) {
+            return null; // Invalid message format, cannot proceed
+        }
+        // Extract content between the first and last '|'
+        sentence = sentence.substring(start + 1, end);
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
 
+        DeviceSession deviceSession = null; // Store session once retrieved to avoid multiple lookups if 'unit' appears more than once
+
+        // Keep track of keys handled by specific cases to prevent overwriting standard attributes
+        // in the default case (e.g., prevent "odometer=0" overwriting KEY_ODOMETER set by "mileage=...")
+        Set<String> handledKeys = new HashSet<>();
+
         for (String entry : sentence.split(",")) {
             int delimiter = entry.indexOf('=');
+            // Ensure the entry is a valid key=value pair with non-empty key and value
+            if (delimiter <= 0 || delimiter == entry.length() - 1) {
+                 continue; // Skip invalid entries
+            }
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
+
+            // Attempt to parse known keys
             switch (key) {
                 case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                    handledKeys.add(key);
+                    // Retrieve device session only once using the unit identifier
+                    if (deviceSession == null) {
+                        deviceSession = getDeviceSession(channel, remoteAddress, value);
                         if (deviceSession != null) {
                             position.setDeviceId(deviceSession.getDeviceId());
                         }
+                        // Continue processing even if session not found yet, handle later
+                    }
                     break;
                 case "gps_valid":
+                    handledKeys.add(key);
+                    try {
                         position.setValid(Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) {
+                        // Treat unparseable value as invalid GPS fix
+                        position.setValid(false);
+                    }
                     break;
                 case "datetime_actual":
+                    handledKeys.add(key);
+                    // Ignore the specific sentinel date "1899/12/30 00:00:00" which indicates invalid time
+                    if (!value.isEmpty() && !value.equals("1899/12/30 00:00:00")) {
+                       try {
+                           // It's recommended to use a static or thread-local SimpleDateFormat instance
+                           // for better performance and thread safety in a real application.
                            position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                       } catch (ParseException e) {
+                           // Log error? If date is invalid, position time remains unset/null.
+                       }
+                    }
                     break;
                 case "latitude":
+                    handledKeys.add(key);
+                    try {
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "longitude":
+                    handledKeys.add(key);
+                    try {
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "altitude":
+                    handledKeys.add(key);
+                     try {
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "velocity":
+                    handledKeys.add(key);
+                    try {
                          position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "heading":
+                    handledKeys.add(key);
+                     try {
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "eventid":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_EVENT); // Mark standard key as handled
+                    try {
                          position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "mileage":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_ODOMETER); // Mark standard key as handled
+                    try {
+                        // Convert mileage (presumably in km) to meters for odometer
                         position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "satellites":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_SATELLITES); // Mark standard key as handled
+                    try {
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "ignition":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_IGNITION); // Mark standard key as handled
+                    try {
                         position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "door":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_DOOR); // Mark standard key as handled
+                     try {
                         position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "arm":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_ARMED); // Mark standard key as handled
+                     try {
                         position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "fuel":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_FUEL_LEVEL); // Mark standard key as handled
+                    try {
+                        // Assuming fuel level is an integer percentage or similar unit
                         position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "rpm":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_RPM); // Mark standard key as handled
+                    try {
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "main_voltage":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_POWER); // Mark standard key as handled
+                    try {
                         position.set(Position.KEY_POWER, Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "backup_voltage":
+                    handledKeys.add(key);
+                    handledKeys.add(Position.KEY_BATTERY); // Mark standard key as handled
+                    try {
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                    handledKeys.add(key);
+                    // Construct the standard ADC key (e.g., "adc1")
+                    String adcKey = Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0');
+                    handledKeys.add(adcKey); // Mark standard key as handled
+                    try {
+                        position.set(adcKey, Double.parseDouble(value));
+                    } catch (NumberFormatException e) { /* ignore invalid value */ }
                     break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
                 default:
+                    // If the key wasn't handled by a specific case above,
+                    // and it doesn't clash with a standard Position key that might have been set
+                    // (e.g., don't let "odometer=0" overwrite KEY_ODOMETER set by "mileage"),
+                    // store it as a generic string attribute.
+                    if (!handledKeys.contains(key)) {
                         position.set(key, value);
+                    }
                     break;
             }
         }
 
+        // After processing all fields, ensure deviceId is set.
+        // If 'unit' was missing or session lookup failed, try getting session based on channel.
+        if (position.getDeviceId() == 0) {
+             if (deviceSession == null) { // If 'unit' key wasn't present or failed lookup initially
+                 deviceSession = getDeviceSession(channel, remoteAddress);
+             }
+             if (deviceSession != null) {
+                 position.setDeviceId(deviceSession.getDeviceId());
+             } else {
+                 // Cannot identify the device for this message, discard it.
+                 return null;
+             }
+        }
+
+        // If the position has no valid timestamp (e.g., 'datetime_actual' was missing, empty, or sentinel value)
+        // and potentially no valid GPS fix, it might be incomplete.
+        // However, the original code didn't enforce returning null here, so we return the position as is.
+        if (position.getFixTime() == null) {
+            // Optionally set fix time to current time if needed downstream: position.setTime(new Date());
+            // Or handle based on specific requirements for time validity.
+        }
+
         return position;
     }
+
+// } // End of assumed class definition
\ No newline at end of file
