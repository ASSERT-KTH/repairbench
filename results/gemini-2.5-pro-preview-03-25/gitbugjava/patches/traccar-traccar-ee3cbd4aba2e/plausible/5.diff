diff --git a/tmp/c0caa22d-7863-4c34-ab5f-a717f04e5867_buggy.java b/tmp/86daa6b7-8793-4b31-b90d-fdc252cc833b_fixed.java
index a4ebaaa..2038aca 100644
--- a/tmp/c0caa22d-7863-4c34-ab5f-a717f04e5867_buggy.java
+++ b/tmp/86daa6b7-8793-4b31-b90d-fdc252cc833b_fixed.java
@@ -1,63 +1,89 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Assuming Jt600ProtocolDecoder.decodeBinaryLocation correctly parses the initial part
+        // based on the protocol variant for MSG_LOCATION_REPORT_2.
+        // Note: Subsequent reads might overwrite some values (e.g., satellites).
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); // May overwrite value from decodeBinaryLocation
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
+        // Check readable bytes before reading network info, as it might be optional
+        if (buf.readableBytes() >= 6) {
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+        }
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
+        // Alarm decoding based on product type
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
-        position.set(Position.KEY_STATUS, status);
+        position.set(Position.KEY_STATUS, status); // Set the raw status value
 
-        while (buf.readableBytes() > 2) {
+        // TLV processing for additional data
+        while (buf.readableBytes() > 2) { // Ensure at least ID, length, and checksum/end tag remain
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+
+            if (buf.readableBytes() < length) {
+                 // Avoid buffer overflow if length is incorrect
+                 break;
+            }
+
             switch (id) {
-                case 0x02:
+                case 0x02: // Altitude (redundant if set by decodeBinaryLocation)
+                    if (length == 2) {
                         position.setAltitude(buf.readShort());
+                    } else {
+                        buf.skipBytes(length);
+                    }
                     break;
-                case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                case 0x0C: // Tilt Sensor Data (previously misinterpreted as gyro)
+                    if (length == 6) {
+                        short tiltX = buf.readShort();
+                        short tiltY = buf.readShort();
+                        short tiltZ = buf.readShort();
+                        // Format matches the test expectation: "[-104,-88,126]"
+                        position.set("tilt", "[" + tiltX + "," + tiltY + "," + tiltZ + "]");
+                    } else {
+                        buf.skipBytes(length); // Skip if length is not 6
+                    }
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
 
         return position;
     }
\ No newline at end of file
