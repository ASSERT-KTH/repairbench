diff --git a/tmp/a3731e02-cd4f-4c42-9ceb-3070cd12658e_buggy.java b/tmp/854dcd7b-9a07-4f99-ba64-ac439f3b10d6_fixed.java
index a4ebaaa..1db0f2d 100644
--- a/tmp/a3731e02-cd4f-4c42-9ceb-3070cd12658e_buggy.java
+++ b/tmp/854dcd7b-9a07-4f99-ba64-ac439f3b10d6_fixed.java
@@ -1,63 +1,84 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
         position.set(Position.KEY_STATUS, status);
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need ID (1) + Length (1) + minimum data (>=0)
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+
+            if (buf.readableBytes() >= length) { // Check if enough bytes remain for the declared length
                 switch (id) {
-                case 0x02:
+                    case 0x02: // Altitude
+                        if (length == 2) {
                             position.setAltitude(buf.readShort());
+                        } else {
+                            buf.skipBytes(length);
+                        }
                         break;
-                case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                    case 0x0C: // Tilt (formerly Gyro)
+                        if (length == 6) {
+                            short x = buf.readShort();
+                            short y = buf.readShort();
+                            short z = buf.readShort();
+                            position.set("tilt", "[" + x + "," + y + "," + z + "]");
+                        } else {
+                            // Original code read 6 bytes regardless of length, which was wrong.
+                            // Skip bytes if length is not 6.
+                            buf.skipBytes(length);
+                        }
                         break;
                     default:
                         buf.skipBytes(length);
                         break;
                 }
+            } else {
+                // Not enough readable bytes for the specified length.
+                // This indicates a potentially corrupt message or incorrect parsing earlier.
+                // Break the loop to avoid reading past the end of the buffer.
+                break;
+            }
         }
 
         return position;
     }
\ No newline at end of file
