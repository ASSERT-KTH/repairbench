diff --git a/tmp/7c26f6af-1e4d-4bec-9fea-66f4f4251450_buggy.java b/tmp/7b2ce8ba-c2c6-4815-b238-b22e7780fe0d_fixed.java
index a4ebaaa..419014a 100644
--- a/tmp/7c26f6af-1e4d-4bec-9fea-66f4f4251450_buggy.java
+++ b/tmp/7b2ce8ba-c2c6-4815-b238-b22e7780fe0d_fixed.java
@@ -1,63 +1,90 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+        // Check readable bytes before reading fixed part
+        if (buf.readableBytes() >= 1 + 1 + 4 + 1 + 4 + 2 + 1 + 2 + 2) {
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
             int battery = buf.readUnsignedByte();
             if (battery <= 100) {
                 position.set(Position.KEY_BATTERY_LEVEL, battery);
             } else if (battery == 0xAA) {
                 position.set(Position.KEY_CHARGE, true);
             }
 
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
             int product = buf.readUnsignedByte();
             int status = buf.readUnsignedShort();
             int alarm = buf.readUnsignedShort();
 
             if (product == 1 || product == 2) {
                 if (BitUtil.check(alarm, 0)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
             } else if (product == 3) {
                 position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                 if (BitUtil.check(alarm, 1)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
                 if (BitUtil.check(alarm, 2)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 if (BitUtil.check(alarm, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                 }
             }
 
             position.set(Position.KEY_STATUS, status);
+        } else {
+             // Not enough bytes for the fixed part after binary location, maybe handle error or return early?
+             // For now, proceed to the TLV part, it might still contain relevant data
+        }
 
-        while (buf.readableBytes() > 2) {
+
+        // Process TLV style additional data
+        while (buf.readableBytes() > 1) { // Need at least ID (1 byte) + Length (1 byte)
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+
+            if (buf.readableBytes() < length) {
+                // Not enough data for the specified length, skip remaining bytes and break
+                buf.skipBytes(buf.readableBytes());
+                break;
+            }
+
             switch (id) {
                 case 0x02:
+                    if (length == 2) {
                         position.setAltitude(buf.readShort());
+                    } else {
+                        buf.skipBytes(length); // Skip if length is not expected 2
+                    }
                     break;
                 case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                    if (length == 6) { // Expecting 3 signed shorts for tilt/gyro data
+                        short tiltX = buf.readShort();
+                        short tiltY = buf.readShort();
+                        short tiltZ = buf.readShort();
+                        // Store as "tilt" attribute with JSON-like array format as per test expectation
+                        position.set("tilt", String.format("[%d,%d,%d]", tiltX, tiltY, tiltZ));
+                    } else {
+                        buf.skipBytes(length); // Skip if length is not expected 6
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(length); // Skip unknown or unhandled TLV tags
                     break;
             }
         }
 
         return position;
     }
\ No newline at end of file
