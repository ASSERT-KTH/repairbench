diff --git a/tmp/e8d20a55-2108-4e8e-8574-a63b752c6167_buggy.java b/tmp/ce09e8f7-8729-4fa2-abac-3dd34cdc2080_fixed.java
index a4ebaaa..8c7f43d 100644
--- a/tmp/e8d20a55-2108-4e8e-8574-a63b752c6167_buggy.java
+++ b/tmp/ce09e8f7-8729-4fa2-abac-3dd34cdc2080_fixed.java
@@ -1,63 +1,81 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
         position.set(Position.KEY_STATUS, status);
 
-        while (buf.readableBytes() > 2) {
+        while (buf.readableBytes() > 2) { // Need at least id (1) + length (1)
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+            if (length > buf.readableBytes()) {
+                // Avoid reading past buffer if length is incorrect
+                break; // or log error and skip? break seems safer.
+            }
             switch (id) {
-                case 0x02:
+                case 0x02: // Altitude
+                    if (length == 2) {
                         position.setAltitude(buf.readShort());
+                    } else {
+                        buf.skipBytes(length); // Skip data if length is unexpected
+                    }
                     break;
-                case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                case 0x0C: // Gyro / Tilt data
+                    if (length == 6) {
+                        // Read three signed shorts for X, Y, Z axes
+                        int x = buf.readShort();
+                        int y = buf.readShort();
+                        int z = buf.readShort();
+                        // Set the "tilt" attribute as a string representation of a JSON array
+                        // This matches the format expected by the failing test.
+                        position.set("tilt", "[" + x + "," + y + "," + z + "]");
+                    } else {
+                        buf.skipBytes(length); // Skip data if length is unexpected
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(length); // Skip unhandled tags
                     break;
             }
         }
 
         return position;
     }
\ No newline at end of file
