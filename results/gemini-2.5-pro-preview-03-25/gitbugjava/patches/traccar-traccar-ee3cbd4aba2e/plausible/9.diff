diff --git a/tmp/8a97babc-9864-4bdb-ab76-0c1002cdce47_buggy.java b/tmp/2ec090a2-d44f-4cc3-92b1-757d83c5ef9f_fixed.java
index a4ebaaa..9f0929d 100644
--- a/tmp/8a97babc-9864-4bdb-ab76-0c1002cdce47_buggy.java
+++ b/tmp/2ec090a2-d44f-4cc3-92b1-757d83c5ef9f_fixed.java
@@ -1,63 +1,93 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
+        // Check readable bytes before reading network info (CID 4 bytes + LAC 2 bytes = 6 bytes)
+        if (buf.readableBytes() >= 6) {
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+        }
 
+        // Check readable bytes before reading product/status/alarm (1 + 2 + 2 = 5 bytes)
+        if (buf.readableBytes() >= 5) {
             int product = buf.readUnsignedByte();
             int status = buf.readUnsignedShort();
             int alarm = buf.readUnsignedShort();
 
             if (product == 1 || product == 2) {
                 if (BitUtil.check(alarm, 0)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
             } else if (product == 3) {
                 position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                 if (BitUtil.check(alarm, 1)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
                 if (BitUtil.check(alarm, 2)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 if (BitUtil.check(alarm, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                 }
             }
 
             position.set(Position.KEY_STATUS, status);
+        }
 
-        while (buf.readableBytes() > 2) {
+        // Loop for additional data blocks (Type-Length-Value format)
+        while (buf.readableBytes() >= 2) { // Need at least 2 bytes for ID (Type) and Length
             int id = buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
+
+            // Ensure buffer has enough bytes for the declared length
+            if (buf.readableBytes() >= length) {
                 switch (id) {
-                case 0x02:
+                    case 0x02: // Altitude
+                        if (length == 2) {
                             position.setAltitude(buf.readShort());
+                        } else {
+                            buf.skipBytes(length); // Skip if length is unexpected
+                        }
                         break;
-                case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                    case 0x0C: // Tilt/Gyro data
+                        if (length == 6) {
+                            // Read the three short values representing tilt/gyro axes
+                            short x = buf.readShort();
+                            short y = buf.readShort();
+                            short z = buf.readShort();
+                            // Set the attribute key to "tilt" and format as string "[x,y,z]"
+                            position.set("tilt", "[" + x + "," + y + "," + z + "]");
+                        } else {
+                            buf.skipBytes(length); // Skip if length is unexpected
+                        }
                         break;
                     default:
+                        // Skip data for unknown or unhandled IDs
                         buf.skipBytes(length);
                         break;
                 }
+            } else {
+                // Not enough data in buffer for the declared length, stop processing TLVs
+                // Avoid potential IndexOutOfBoundsException and log if necessary
+                // Log.warning("Buffer underflow for Huabao TLV ID " + id + ": declared length=" + length + ", available=" + buf.readableBytes());
+                break;
+            }
         }
 
         return position;
     }
\ No newline at end of file
