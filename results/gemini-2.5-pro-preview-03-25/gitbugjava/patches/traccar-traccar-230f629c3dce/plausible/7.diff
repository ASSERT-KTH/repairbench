diff --git a/tmp/b690fabc-1a66-480d-a99d-8387d3e25236_buggy.java b/tmp/a3bd7e04-70ac-4f28-894e-76bc6635fa98_fixed.java
index 9410efa..5c72779 100644
--- a/tmp/b690fabc-1a66-480d-a99d-8387d3e25236_buggy.java
+++ b/tmp/a3bd7e04-70ac-4f28-894e-76bc6635fa98_fixed.java
@@ -1,196 +1,234 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedShort(); // data length
 
         String imei = String.format("%015d", buf.readLong());
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         int type = buf.readUnsignedByte();
 
         if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {
 
             List<Position> positions = new LinkedList<>();
 
             buf.readUnsignedByte(); // records left
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
                 buf.readUnsignedByte(); // timestamp extension
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     int recordExtension = buf.readUnsignedByte();
                     int mergeRecordCount = BitUtil.from(recordExtension, 4);
                     int currentRecord = BitUtil.to(recordExtension, 4);
 
                     if (currentRecord > 0 && currentRecord <= mergeRecordCount) {
+                        // Reuse the last position if this is part of a merged record sequence
+                        if (!positions.isEmpty()) {
                             position = positions.remove(positions.size() - 1);
+                        } else {
+                             // This case should ideally not happen if currentRecord > 0,
+                             // but handle defensively: create a new position anyway.
+                             // Log a warning?
+                        }
+                    } else {
+                        // If not merging or starting a merge sequence (currentRecord=0 or invalid),
+                        // a new position is already created.
                     }
                 }
 
                 buf.readUnsignedByte(); // priority (reserved)
 
+                int longitudeRaw = buf.readInt();
+                int latitudeRaw = buf.readInt();
+                double altitudeValue = buf.readUnsignedShort() / 10.0;
+                double courseValue = buf.readUnsignedShort() / 100.0;
+                int satellitesValue = buf.readUnsignedByte();
+                double speedValue = UnitsConverter.knotsFromKph(buf.readUnsignedShort());
+                double hdopValue = buf.readUnsignedByte() / 10.0;
+
+                // Check for invalid coordinates marker (0x80000000 = Integer.MIN_VALUE)
+                if (longitudeRaw == Integer.MIN_VALUE && latitudeRaw == Integer.MIN_VALUE) {
+                    position.setValid(false);
+                    position.setLongitude(0.0);
+                    position.setLatitude(0.0);
+                    position.setAltitude(0.0);
+                    position.setCourse(0.0);
+                    position.setSpeed(0.0);
+                    position.set(Position.KEY_SATELLITES, 0);
+                    position.set(Position.KEY_HDOP, 0.0); // Set HDOP to 0 for invalid fix
+                } else {
                     position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
-                position.setAltitude(buf.readUnsignedShort() / 10.0);
-                position.setCourse(buf.readUnsignedShort() / 100.0);
-
-                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-
-                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-
-                position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);
+                    position.setLongitude(longitudeRaw / 10000000.0);
+                    position.setLatitude(latitudeRaw / 10000000.0);
+                    position.setAltitude(altitudeValue);
+                    position.setCourse(courseValue);
+                    position.setSpeed(speedValue);
+                    position.set(Position.KEY_SATELLITES, satellitesValue);
+                    position.set(Position.KEY_HDOP, hdopValue);
+                }
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                 } else {
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                 }
 
                 // Read 1 byte data
                 int valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 1);
                 }
 
                 // Read 2 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 2);
                 }
 
                 // Read 4 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 4);
                 }
 
                 // Read 8 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 8);
                 }
 
                 decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver
                 decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver
 
                 Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);
                 Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);
                 if (tagIdPart1 != null && tagIdPart2 != null) {
                     position.set("tagId", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));
                 }
 
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("0002640113bc")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_DTCS) {
 
             List<Position> positions = new LinkedList<>();
-
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 buf.readUnsignedByte(); // reserved
-
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
 
+                // Assume Latitude is sent before Longitude for this message type based on test data analysis
+                int latitudeRaw = buf.readInt();
+                int longitudeRaw = buf.readInt();
+                double latitude = latitudeRaw / 10000000.0;
+                double longitude = longitudeRaw / 10000000.0;
+
+                // Set validity based on coordinate range check
+                if (latitude >= -90 && latitude <= 90 && longitude >= -180 && longitude <= 180) {
                     position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
+                    position.setLatitude(latitude);
+                    position.setLongitude(longitude);
+                } else {
+                    position.setValid(false);
+                    position.setLatitude(0); // Set default values for invalid coordinates
+                    position.setLongitude(0);
+                }
 
-                if (buf.readUnsignedByte() == 2) {
+                if (buf.readUnsignedByte() == 2) { // Status: 1=Realtime, 2=Archive
                     position.set(Position.KEY_ARCHIVE, true);
                 }
 
                 position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));
-
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("00026d01c4a4")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_FILES) {
 
             int subtype = buf.readUnsignedByte();
             int source = buf.readUnsignedByte();
 
             if (subtype == 2) {
                 ByteBuf filename = buf.readSlice(8);
                 int total = buf.readUnsignedShort();
                 int current = buf.readUnsignedShort();
                 if (photo == null) {
                     photo = Unpooled.buffer();
                 }
                 photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));
                 if (current < total - 1) {
                     ByteBuf content = Unpooled.buffer();
                     content.writeByte(subtype);
                     content.writeByte(source);
-                    content.writeBytes(filename);
+                    content.writeBytes(filename); // Reuse the slice reference, careful about reader index
+                    filename.readerIndex(0); // Reset reader index if needed elsewhere, but here it's fine
                     content.writeShort(current + 1);
                     ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
-                    content.release();
+                    content.release(); // Release locally created buffer
                     if (channel != null) {
                         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                     }
                 } else {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
                     getLastLocation(position, null);
                     position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, "jpg"));
-                    photo.release();
+                    photo.release(); // Release the accumulated photo buffer
                     photo = null;
                     return position;
                 }
             }
 
-            return null;
+            return null; // Return null if photo is not complete yet or subtype is not 2
 
         } else if (type == MSG_IDENTIFICATION) {
 
             ByteBuf content = Unpooled.buffer();
-            content.writeByte(1);
+            content.writeByte(1); // Identification successful subtype
             ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
             content.release();
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
             }
 
             return null;
 
         } else {
 
             return decodeCommandResponse(deviceSession, type, buf);
 
         }
     }
\ No newline at end of file
