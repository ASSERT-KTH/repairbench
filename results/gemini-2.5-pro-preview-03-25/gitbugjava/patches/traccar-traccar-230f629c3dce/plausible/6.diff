diff --git a/tmp/f35f3d56-9890-4e5c-a1d5-c14985502388_buggy.java b/tmp/f8da0820-ea13-40ac-9d5e-effeb57467c1_fixed.java
index 9410efa..7349d00 100644
--- a/tmp/f35f3d56-9890-4e5c-a1d5-c14985502388_buggy.java
+++ b/tmp/f8da0820-ea13-40ac-9d5e-effeb57467c1_fixed.java
@@ -1,196 +1,269 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedShort(); // data length
 
         String imei = String.format("%015d", buf.readLong());
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         int type = buf.readUnsignedByte();
 
         if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {
 
             List<Position> positions = new LinkedList<>();
 
             buf.readUnsignedByte(); // records left
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
                 buf.readUnsignedByte(); // timestamp extension
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     int recordExtension = buf.readUnsignedByte();
                     int mergeRecordCount = BitUtil.from(recordExtension, 4);
                     int currentRecord = BitUtil.to(recordExtension, 4);
 
                     if (currentRecord > 0 && currentRecord <= mergeRecordCount) {
+                        if (positions.isEmpty()) {
+                            // Can't merge if the list is empty, skip this record section. Log maybe?
+                            // This assumes the base record part will be read afterwards.
+                            // If not, the buffer might desync. Needs protocol clarification.
+                            // For now, just read the fields corresponding to the base record to advance buffer.
+                            buf.readUnsignedByte(); // priority
+                            buf.readInt(); // lon
+                            buf.readInt(); // lat
+                            buf.readUnsignedShort(); // alt
+                            buf.readUnsignedShort(); // course
+                            buf.readUnsignedByte(); // satellites
+                            buf.readUnsignedShort(); // speed
+                            buf.readUnsignedByte(); // hdop
+                            buf.readUnsignedShort(); // event (extended)
+                            // Skip IO reading for this incomplete merge attempt
+                            continue; // Skip to next record in outer loop
+                        }
                         position = positions.remove(positions.size() - 1);
                     }
                 }
 
                 buf.readUnsignedByte(); // priority (reserved)
 
+                // Read coordinates and other GPS data
+                int lon = buf.readInt();
+                int lat = buf.readInt();
+                double altitude = buf.readUnsignedShort() / 10.0;
+                double course = buf.readUnsignedShort() / 100.0;
+                int satellites = buf.readUnsignedByte();
+                double speed = UnitsConverter.knotsFromKph(buf.readUnsignedShort());
+                double hdop = buf.readUnsignedByte() / 10.0;
+
+                // Check validity based on coordinates
+                // Integer.MIN_VALUE (0x80000000) is used to indicate invalid data in some cases
+                // Also check against logical boundaries (degrees * 10^7)
+                if (lon != Integer.MIN_VALUE && lat != Integer.MIN_VALUE &&
+                    lat <= 900000000 && lat >= -900000000 &&
+                    lon <= 1800000000 && lon >= -1800000000) {
+
                     position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
-                position.setAltitude(buf.readUnsignedShort() / 10.0);
-                position.setCourse(buf.readUnsignedShort() / 100.0);
+                    position.setLongitude(lon / 10000000.0);
+                    position.setLatitude(lat / 10000000.0);
+                    position.setAltitude(altitude);
+                    position.setCourse(course);
+                    position.setSpeed(speed);
+                    position.set(Position.KEY_SATELLITES, satellites);
+                    position.set(Position.KEY_HDOP, hdop);
 
-                position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-
-                position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-
-                position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);
+                } else {
+                    position.setValid(false);
+                    // Set lat/lon to 0 or keep default, Position object handles this.
+                    // Still set other GPS fields as they might be valid or contain markers
+                    position.setAltitude(altitude);
+                    position.setCourse(course);
+                    position.setSpeed(speed);
+                    position.set(Position.KEY_SATELLITES, satellites);
+                    position.set(Position.KEY_HDOP, hdop);
+                }
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                 } else {
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                 }
 
                 // Read 1 byte data
                 int valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 1);
                 }
 
                 // Read 2 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 2);
                 }
 
                 // Read 4 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 4);
                 }
 
                 // Read 8 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 8);
                 }
 
                 decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver
                 decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver
 
                 Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);
                 Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);
                 if (tagIdPart1 != null && tagIdPart2 != null) {
                     position.set("tagId", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));
                 }
 
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("0002640113bc")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_DTCS) {
 
             List<Position> positions = new LinkedList<>();
 
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 buf.readUnsignedByte(); // reserved
 
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
 
+                // Read coordinates
+                int lon = buf.readInt();
+                int lat = buf.readInt();
+
+                // Check validity based on coordinates
+                if (lon != Integer.MIN_VALUE && lat != Integer.MIN_VALUE &&
+                    lat <= 900000000 && lat >= -900000000 &&
+                    lon <= 1800000000 && lon >= -1800000000) {
+
                     position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
+                    position.setLongitude(lon / 10000000.0);
+                    position.setLatitude(lat / 10000000.0);
+                } else {
+                    position.setValid(false);
+                    // Lat/Lon remain default 0.0
+                }
 
                 if (buf.readUnsignedByte() == 2) {
                     position.set(Position.KEY_ARCHIVE, true);
                 }
 
                 position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));
 
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("00026d01c4a4")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_FILES) {
 
             int subtype = buf.readUnsignedByte();
             int source = buf.readUnsignedByte();
 
             if (subtype == 2) {
                 ByteBuf filename = buf.readSlice(8);
                 int total = buf.readUnsignedShort();
                 int current = buf.readUnsignedShort();
                 if (photo == null) {
                     photo = Unpooled.buffer();
                 }
-                photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));
+                // Check buffer bounds before reading slice
+                int bytesToRead = buf.readableBytes() - 2; // Need 2 bytes for checksum
+                if (bytesToRead > 0) {
+                     photo.writeBytes(buf.readSlice(bytesToRead));
+                } // else: nothing to read, might indicate truncated message
+                buf.skipBytes(2); // Skip checksum even if read failed
+
                 if (current < total - 1) {
                     ByteBuf content = Unpooled.buffer();
                     content.writeByte(subtype);
                     content.writeByte(source);
-                    content.writeBytes(filename);
+                    content.writeBytes(filename.resetReaderIndex()); // Reset reader index before writing
                     content.writeShort(current + 1);
                     ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
                     content.release();
                     if (channel != null) {
                         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                     }
                 } else {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
                     getLastLocation(position, null);
+                    if (photo != null && photo.readableBytes() > 0) {
                         position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, "jpg"));
+                    }
+                    if (photo != null) {
                         photo.release();
                         photo = null;
+                    }
                     return position;
                 }
+            } else {
+                 // Handle other subtypes or unknown data
+                 buf.skipBytes(buf.readableBytes() - 2); // Skip unknown payload minus checksum
+                 buf.skipBytes(2); // Skip checksum
             }
 
             return null;
 
         } else if (type == MSG_IDENTIFICATION) {
 
             ByteBuf content = Unpooled.buffer();
             content.writeByte(1);
             ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
             content.release();
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
             }
+            // Consume the rest of the identification message payload if any + checksum
+            if (buf.readableBytes() > 2) {
+                 buf.skipBytes(buf.readableBytes() - 2);
+            }
+            buf.skipBytes(Math.min(2, buf.readableBytes())); // Skip checksum
 
             return null;
 
         } else {
 
             return decodeCommandResponse(deviceSession, type, buf);
 
         }
     }
\ No newline at end of file
