diff --git a/tmp/7c5e3c11-63dd-4efe-8a70-8e47366bae5b_buggy.java b/tmp/56e9b91d-23a9-4642-ad76-12a36093ec26_fixed.java
index 0583946..4ac4731 100644
--- a/tmp/7c5e3c11-63dd-4efe-8a70-8e47366bae5b_buggy.java
+++ b/tmp/56e9b91d-23a9-4642-ad76-12a36093ec26_fixed.java
@@ -1,30 +1,50 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // Check if whitespace normalization should occur. It does if pretty printing is enabled,
+        // and the parent node (if it's an element) doesn't preserve whitespace.
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parent); // Use the parent Element, if available.
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Determine if leading/trailing whitespace within this text node should be trimmed.
+            // Trim leading if it's the first node in a block parent or the document root.
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
+            // Trim trailing if it's the last node in a block parent.
             trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Check if this text node should be skipped entirely.
+            // This happens if it's blank (only whitespace) and the node that follows it
+            // will cause an indentation, effectively replacing this whitespace.
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean couldSkip =
+                // Condition 1: Next sibling is an Element that will be indented.
+                (next instanceof Element && ((Element) next).shouldIndent(out))
+                // Condition 2: Next sibling is another blank TextNode (can happen during re-parenting).
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
+            // If blank and could be skipped, render nothing for this node.
+            if (couldSkip && isBlank) return; // Don't outputLEADING white space as the next element will indent
 
+            // If not skipping, check if this text node itself needs to be indented.
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // Condition A: First node in parent, parent requires indent, and node is not blank.
+                // ** FIX: Changed parent.tag().formatAsBlock() to parent.shouldIndent(out) **
+                // Rationale: Indenting the first text node depends on whether the parent itself was indented,
+                // aligning with the behavior for element siblings. See https://github.com/jhy/jsoup/issues/1852
+                (siblingIndex == 0 && parent != null && parent.shouldIndent(out) && !isBlank) ||
+                // Condition B: Outline mode is enabled, node has siblings, and node is not blank.
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
-                indent(accum, depth, out);
+                // Condition C: Follows a <br> tag (special case for inline wrapping).
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+            ) {
+                indent(accum, depth, out); // Add newline and indentation spaces.
+            }
         }
 
+        // Finally, escape and write the text content, applying normalization and trimming as determined.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
