diff --git a/tmp/dd49b684-e075-4587-a264-dd204782d467_buggy.java b/tmp/3bcb0566-491b-4cfe-8a50-b004f8026b76_fixed.java
index 0583946..da3e794 100644
--- a/tmp/dd49b684-e075-4587-a264-dd204782d467_buggy.java
+++ b/tmp/3bcb0566-491b-4cfe-8a50-b004f8026b76_fixed.java
@@ -1,30 +1,48 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final Element parent = parentElement(); // Use helper method for parent element access
+        // Check formatAsBlock for parent, used in trim logic, as formatting behavior depends on formatAsBlock, not isBlock
+        // Check parent != null because parentElement() can return null
+        final boolean parentFormatsAsBlock = parent != null && parent.tag().formatAsBlock();
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // Check preserveWhitespace based on parentNode
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+            // Use parentFormatsAsBlock for trimming decisions instead of parent.tag().isBlock()
+            // The check parentNode instanceof Document handles the case where the text node is directly under the Document node.
+            trimLeading = (siblingIndex == 0 && parentFormatsAsBlock) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Use parentFormatsAsBlock for trailing trim decision
+            trimTrailing = (nextSibling() == null && parentFormatsAsBlock);
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Original skip logic: if this text is just whitespace, and the next node will cause an indent, skip this text.
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            // Combine checks for clarity: skip if blank AND (next causes indent OR next is blank)
+            if (isBlank && next != null) { // Ensure next is not null before checking its type/properties
+                boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+                boolean nextIsBlank = (next instanceof TextNode && ((TextNode) next).isBlank());
+                if (nextWillIndent || nextIsBlank) {
+                    return; // Skip this blank node
+                }
+            }
 
+            // Original indentation logic:
             Node prev = previousSibling();
+            // Indent if:
+            // 1. First non-blank child of a block-formatting parent
+            // 2. Outline mode active and node is not blank
+            // 3. Follows an inline <br> element (original logic)
+            // Note: parentFormatsAsBlock implicitly checks parent != null
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                (siblingIndex == 0 && parentFormatsAsBlock && !isBlank) || // Already uses formatAsBlock
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                // Check prev is an Element before calling methods on it. The original code already did this.
+                (prev instanceof Element && ((Element) prev).normalName().equals("br")) // Keep original <br> check for minimal diff
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
