diff --git a/tmp/621c68be-4877-4ee5-b7d5-2fe097c34865_buggy.java b/tmp/ebfd0acb-09bc-407d-91f9-feb658714b11_fixed.java
index 0583946..2f50fe7 100644
--- a/tmp/621c68be-4877-4ee5-b7d5-2fe097c34865_buggy.java
+++ b/tmp/ebfd0acb-09bc-407d-91f9-feb658714b11_fixed.java
@@ -1,30 +1,60 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+        // Check using static method Element.preserveWhitespace
+        final boolean parentPreservesWhitespace = parent != null && Element.preserveWhitespace(parent);
+        final boolean normaliseWhite = prettyPrint && !parentPreservesWhitespace;
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Determine parent characteristics accurately
+            final boolean parentIsBlock = parent != null && parent.tag().isBlock();
+            // Check if parent requires block formatting (consistency with shouldIndent logic)
+            // boolean parentRequiresBlockChildren = parentIsBlock && parent.tag().formatAsBlock(); // Example - logic can be complex
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Calculate trimming flags based on context
+            trimLeading = (siblingIndex == 0 && parentIsBlock) || parentNode instanceof Document;
+            trimTrailing = nextSibling() == null && parentIsBlock;
+
+            // Logic for skipping blank nodes before an indenting element
             Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean nextWillIndent = false;
+            if (next instanceof Element) {
+                // This relies on Element.shouldIndent(), which might be the source of external issues.
+                nextWillIndent = ((Element) next).shouldIndent(out);
+            }
+            boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());
 
+            // If this node is blank and should be skipped, return early.
+            boolean shouldSkip = isBlank && (nextWillIndent || nextIsBlankText);
+            if (shouldSkip) return;
+
+            // Determine if this text node itself should be indented
             Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            boolean indentThis = false;
+            // Case 1: First non-blank child of a block parent
+            if (siblingIndex == 0 && parentIsBlock && !isBlank) {
+                indentThis = true;
+            }
+            // Case 2: After a <br> element
+            else if (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) {
+                // No need to re-check parentPreservesWhitespace as it's covered by normaliseWhite scope
+                indentThis = true;
+            }
+            // Case 3: Outline mode (less common, keep original logic)
+            if (out.outline() && siblingNodes().size() > 0 && !isBlank) {
+                 // Note: This condition can overlap with Case 1. Using || is safe.
+                 indentThis = true;
+            }
+
+            // Apply indentation if needed
+            if (indentThis) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Escape and write the text content, applying normalization and trimming as determined.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
