diff --git a/tmp/098b0b47-2d65-4aff-a5c2-ee81036a1a53_buggy.java b/tmp/0c7f9378-8a0a-4877-9387-529410fdeb31_fixed.java
index 0583946..bc15e0d 100644
--- a/tmp/098b0b47-2d65-4aff-a5c2-ee81036a1a53_buggy.java
+++ b/tmp/0c7f9378-8a0a-4877-9387-529410fdeb31_fixed.java
@@ -1,30 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // Determines if normalization applies
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
+            // Calculate trimming based on standard block rules BEFORE potential override
+            final Node next = nextSibling();
+            final boolean isBlank = isBlank();
+
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            trimTrailing = (next == null && parent != null && parent.tag().isBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+            // Skip completely if blank and followed by indenting element or another blank node
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                || (next instanceof TextNode && (((TextNode) next).isBlank()));
             if (couldSkip && isBlank) return;
 
+            // Indent before this text node if required by context (e.g., after <br>)
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
             )
                 indent(accum, depth, out);
+
+            // Special case: If this node is blank, and it's the last child of a non-block parent during pretty printing,
+            // prevent normalization to ensure a newline is outputted, mimicking the newline that a block parent would add
+            // before its closing tag in Element.outerHtmlTail.
+            if (isBlank && next == null && parent != null && !parent.tag().isBlock()) {
+                normaliseWhite = false; // Override: Do not normalize whitespace for this specific case
+            }
         }
 
+        // Escape and append the text content, using the determined normalization and trimming settings
+        // Note: if normaliseWhite was overridden to false, the trim flags are ignored in escape()
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
