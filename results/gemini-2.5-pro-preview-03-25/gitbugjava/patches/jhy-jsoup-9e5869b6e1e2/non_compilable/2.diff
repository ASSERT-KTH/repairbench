diff --git a/tmp/83a9820a-4283-4c47-b8a4-c82e95e7750d_buggy.java b/tmp/3f263920-36e0-4547-bc4e-2808ac56907c_fixed.java
index 0583946..5fcffdc 100644
--- a/tmp/83a9820a-4283-4c47-b8a4-c82e95e7750d_buggy.java
+++ b/tmp/3f263920-36e0-4547-bc4e-2808ac56907c_fixed.java
@@ -1,30 +1,39 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Determine trimming based on siblings and parent block status
+            // * Use formatAsBlock rather than isBlock to act consistently with indenting *
+            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
+                (parentNode instanceof Document); // first node in document is trimmed
+            trimTrailing = (nextSibling() == null && parent != null && parent.tag().formatAsBlock()); // last node in parent formats as block
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, maybe from re-parenting
+            if (couldSkip && isBlank) return; // don't output this blank text node, the next indent will make it look ugly
 
+            // indent if:
+            // * we are the first node in a formatting block container, and not blank (since blank is trimmed). (otherwise leaves leading space)
+            // * we are in outline mode
+            // * the previous node was a <br> element. (so this text gets indented; unless blank)
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                (prev instanceof Element && ((Element) prev).tag().normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
+            {
                 indent(accum, depth, out);
             }
+        }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
