diff --git a/tmp/a633721d-a4d1-400b-a471-0bd22cb3cfb3_buggy.java b/tmp/13b2cd3b-6bcb-44bd-be72-16397e683c76_fixed.java
index 0583946..ac8a984 100644
--- a/tmp/a633721d-a4d1-400b-a471-0bd22cb3cfb3_buggy.java
+++ b/tmp/13b2cd3b-6bcb-44bd-be72-16397e683c76_fixed.java
@@ -1,30 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // Determine if the parent element is intrinsically block or is formatting as block.
+        // Use tag.formatAsBlock() which considers block status & content if applicable.
+        final boolean parentFormatAsBlock = parent != null && parent.tag().formatAsBlock();
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
+            // Use parentFormatAsBlock for both leading and trailing trim checks for consistency.
+            // Trim leading if first node in a block-like parent or the document root.
+            trimLeading = (siblingIndex == 0 && parentFormatAsBlock) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+            // Trim trailing if the last node in a block-like parent.
+            trimTrailing = (nextSibling() == null) && parentFormatAsBlock;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // If this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean isBlank = isBlank(); // cache isBlank result
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next element will indent
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text
+            if (couldSkip && isBlank) return; // Don't output blank space that is just filling previous indent space.
 
+            // Indentation check - Handle indent for non-blank text nodes in specific contexts:
             Node prev = previousSibling();
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // If the first child of block-like parent, and not blank, indent. And not suppressed by parent.
+                (siblingIndex == 0 && parentFormatAsBlock && !isBlank && parent.shouldIndent(out)) ||
+                // If in outline mode, and siblings exist, and not blank, indent
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                // If follows a <br> tag, and not blank, indent
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br") && !isBlank)
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Escape and print, using determined trim flags and normalise flag. The escape method handles the StringUtil.normaliseWhitespace call internally.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
