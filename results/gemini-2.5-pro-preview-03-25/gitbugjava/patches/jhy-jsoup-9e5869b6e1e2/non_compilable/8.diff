diff --git a/tmp/ad9538e9-28c2-44c1-9998-4f9f84500025_buggy.java b/tmp/cf4bf46c-b139-490e-8d7c-a143864dab9b_fixed.java
index 0583946..d0b1747 100644
--- a/tmp/ad9538e9-28c2-44c1-9998-4f9f84500025_buggy.java
+++ b/tmp/cf4bf46c-b139-490e-8d7c-a143864dab9b_fixed.java
@@ -1,30 +1,42 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        final String core = coreValue();
+        final boolean isBlank = isBlank(); // Calculate once
+
+        // Determine if normalization should *actually* be applied by Entities.escape
+        // Don't normalize if node is blank and we are pretty printing (normaliseWhite=true),
+        // as that would collapse structural newlines to spaces.
+        final boolean shouldNormalise = normaliseWhite && !isBlank;
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
-        if (normaliseWhite) {
+
+        if (normaliseWhite) { // Check if pretty print context applies for skip/trim/indent logic
+             // Calculate trim flags based on block context (still needed for Entities.escape)
              trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                  parentNode instanceof Document;
              trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+             // Original skip logic: if this text is just whitespace, and the next node will cause an indent, skip this text:
              Node next = nextSibling();
-            boolean isBlank = isBlank();
+             // TODO: reconsider skip logic. See https://github.com/jhy/jsoup/issues/1109
              boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                  || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
              if (couldSkip && isBlank) return;
 
+             // Original indent logic (only triggers if !isBlank or special cases like <br>)
              Node prev = previousSibling();
              if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first in block non-blank
+                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||                       // outline non-blank
+                 (prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br>
+             ) {
                  indent(accum, depth, out);
              }
+        }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Escape the text. Use the calculated `shouldNormalise` flag instead of `normaliseWhite`.
+        Entities.escape(accum, core, out, false, shouldNormalise, trimLeading, trimTrailing);
     }
\ No newline at end of file
