diff --git a/tmp/44db0708-e078-449d-b465-dee742434f1c_buggy.java b/tmp/264418b8-3a38-4651-aac2-3734fdfe0744_fixed.java
index 0583946..531efbe 100644
--- a/tmp/44db0708-e078-449d-b465-dee742434f1c_buggy.java
+++ b/tmp/264418b8-3a38-4651-aac2-3734fdfe0744_fixed.java
@@ -1,30 +1,38 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
         if (normaliseWhite) {
             trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                 parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+
+            // Calculate trimTrailing based on whether normalization is happening and if it's the last node.
+            // The original logic only checked if the parent was a block tag, which is too restrictive
+            // and misses cases like custom tags (formatAsBlock=true, isBlock=false) or root nodes
+            // where trailing whitespace (like a final newline textnode) should be trimmed during normalization.
+            // Fixes https://github.com/jhy/jsoup/issues/1852
+            trimTrailing = normaliseWhite && nextSibling() == null;
+            // Original buggy logic: trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
             Node prev = previousSibling();
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
