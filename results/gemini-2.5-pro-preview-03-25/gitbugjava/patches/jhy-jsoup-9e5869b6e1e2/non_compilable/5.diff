diff --git a/tmp/59d77bd0-53f5-4726-86d0-85a38acbf7fa_buggy.java b/tmp/3d27161e-fb8b-427f-a8f2-03ad13cc5979_fixed.java
index 0583946..4a46d9e 100644
--- a/tmp/59d77bd0-53f5-4726-86d0-85a38acbf7fa_buggy.java
+++ b/tmp/3d27161e-fb8b-427f-a8f2-03ad13cc5979_fixed.java
@@ -1,30 +1,45 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // preserveWhitespace determines if whitespace normalization should occur
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
         boolean trimLeading = false;
         boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        if (normaliseWhite) { // Check normaliseWhite first; parent is implicitly non-null if preserveWhitespace was checked. Or check parent explicitly.
+            // Calculate trimming flags based on parent block status
+            // Use parent.tag().isBlock() as in the original code for consistency, assuming it's the correct check for trimming context.
+            // Ensure parent is not null before accessing tag()
+            boolean parentIsBlock = parent != null && parent.tag().isBlock();
+            trimLeading = (siblingIndex == 0 && parentIsBlock) || parentNode instanceof Document; // parentNode can be Document
+            trimTrailing = nextSibling() == null && parentIsBlock;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
-            boolean isBlank = isBlank();
+            boolean isBlank = isBlank(); // Call isBlank() once for efficiency
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if (couldSkip && isBlank) return; // Don't output this node
 
+            // Indentation logic: indent non-blank text based on context
+            if (!isBlank) { // Only indent non-blank text nodes
                 Node prev = previousSibling();
+                // Use formatAsBlock for decisions on formatting/indentation, consistent with #1853 fix intent
+                boolean parentFormatAsBlock = parent != null && parent.tag().formatAsBlock();
+                boolean prevElementFormatAsBlock = prev instanceof Element && ((Element) prev).tag().formatAsBlock();
+                boolean prevIsBr = prev instanceof Element && ((Element) prev).normalName().equals("br");
+
                  if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                     (siblingIndex == 0 && parentFormatAsBlock) || // First child of a block-formatted parent
+                     (out.outline() && siblingNodes().size() > 0) || // Outline mode
+                     (prevElementFormatAsBlock) || // Follows a block-formatted element
+                     (prevIsBr) // Follows a <br> element (special case)
+                 ) {
                      indent(accum, depth, out);
                  }
+            }
+        }
 
+        // Call escape with the determined flags
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
