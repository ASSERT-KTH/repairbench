diff --git a/tmp/268562ec-571a-4ec6-9107-600fd4c09399_buggy.java b/tmp/ae3cfb84-90f6-4922-b2f7-9083735b898d_fixed.java
index 0583946..4a76b89 100644
--- a/tmp/268562ec-571a-4ec6-9107-600fd4c09399_buggy.java
+++ b/tmp/ae3cfb84-90f6-4922-b2f7-9083735b898d_fixed.java
@@ -1,30 +1,77 @@
+    @Override // Omitting the Javadoc for brevity in the final output
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // Parent could be Document, Element, etc.; cast later if needed. instanceof checks handle null.
+        final Node parentNode = parentNode(); // Cache parentNode lookup
+        // Check if whitespace normalization is active (pretty print enabled, and parent node does not preserve whitespace)
+        final boolean NORMALIZE_WHITE = prettyPrint && !Element.preserveWhitespace(parentNode);
 
-        boolean trimLeading = false;
-        boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
+        if (!NORMALIZE_WHITE) { // If not normalizing, just escape the core value as is and return
+            Entities.escape(accum, coreValue(), out, false, false, false, false);
+            return;
+        }
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        // --- Normalization is active ---
+        final boolean isBlank = isBlank(); // Check if this text node is blank (whitespace only)
+        final Node next = nextSibling(); // Get the next sibling node
 
-            Node prev = previousSibling();
+        // Skip check: if this node is blank, and the next node triggers an indent or is another blank node,
+        // then skip outputting this current blank node entirely. This avoids extraneous whitespace between blocks.
+        boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+        boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());
+        if (isBlank && (nextWillIndent || nextIsBlankText)) {
+            return; // Skip this whitespace node
+        }
+
+        // Handle remaining blank nodes (those not skipped above)
+        if (isBlank) {
+            // If this blank node is the last child within a block-level parent element,
+            // output nothing. Structural newlines/indentation are handled by the parent element's logic.
+            boolean isLastChild = next == null;
+            boolean parentIsBlock = parentNode instanceof Element && ((Element) parentNode).tag().isBlock();
+            if (isLastChild && parentIsBlock) {
+                return; // Output nothing for trailing blank nodes in blocks
+            } else {
+                // Otherwise (blank node not skipped, and not the last child of a block),
+                // output a single space. This preserves necessary spacing, e.g., between inline elements.
+                accum.append(' ');
+                return; // Done handling this blank node
+            }
+        }
+
+        // --- Node is NOT blank ---
+        // Cast parent to Element for tag checks, handling potential null or non-element parent.
+        final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
+
+        // Determine trimming flags for non-blank text based on position within the parent.
+        boolean parentIsBlockForTrim = parent != null && parent.tag().isBlock(); // Re-check block status safely
+        boolean trimLeading = (siblingIndex() == 0 && parentIsBlockForTrim) || parentNode instanceof Document; // Trim leading if first child of block/doc
+        boolean trimTrailing = (next == null && parentIsBlockForTrim); // Trim trailing if last child of block
+
+        // Determine if indentation is needed before outputting this non-blank text node.
+        Node prev = previousSibling(); // Get the previous sibling node
+        boolean indentBefore = false;
+        // Indentation is needed if specific conditions are met, based on original logic:
+        if (parent != null) { // Ensure parent Element exists for these tag-related checks
              if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
-                indent(accum, depth, out);
+                 // 1. If it's the first child of a block-formatting parent element
+                 (siblingIndex() == 0 && parent.tag().formatAsBlock()) ||
+                 // 2. If outline mode is enabled and the node has siblings (indicating structure)
+                 (out.outline() && siblingNodes().size() > 0) ||
+                 // 3. If the previous sibling was a <br> element (special case for line breaks)
+                 (siblingIndex() > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+             ) {
+                 indentBefore = true;
+             }
+        }
+
+        // Apply indentation if determined to be necessary
+        if (indentBefore) {
+             indent(accum, depth, out); // Assumes 'indent' helper method exists (standard in Jsoup Node class)
         }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Escape the non-blank text content.
+        // Pass 'true' for normalizeWhite parameter to collapse internal whitespace.
+        // Pass calculated trimLeading and trimTrailing flags.
+        Entities.escape(accum, coreValue(), out, false, true, trimLeading, trimTrailing);
     }
\ No newline at end of file
