diff --git a/tmp/7ddd317c-6365-46e9-bde4-ee449c84df4b_buggy.java b/tmp/ba5ad430-8903-404d-add0-85ca96e353c1_fixed.java
index 2189af9..900b9d6 100644
--- a/tmp/7ddd317c-6365-46e9-bde4-ee449c84df4b_buggy.java
+++ b/tmp/ba5ad430-8903-404d-add0-85ca96e353c1_fixed.java
@@ -1,113 +1,161 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
-                            case 0x0102:
-                            case 0x0528:
-                            case 0x0546:
+                            case 0x0102: // Odometer
+                            case 0x0528: // Odometer
+                            case 0x0546: // Odometer
+                                if (length == 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0103:
+                            case 0x0103: // Fuel Level (int)
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x052A:
+                            case 0x052A: // Fuel Level (short)
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0105:
-                            case 0x052C:
+                            case 0x0105: // Fuel Used (int)
+                            case 0x052C: // Fuel Used (int)
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x014A:
-                            case 0x0537:
-                            case 0x0538:
-                            case 0x0539:
+                            case 0x014A: // Fuel Consumption (short)
+                            case 0x0537: // Fuel Consumption (short)
+                            case 0x0538: // Fuel Consumption (short)
+                            case 0x0539: // Fuel Consumption (short)
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             default:
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
-                                        buf.skipBytes(length);
+                                        buf.skipBytes(length); // Skip data if length is unexpected or 0
                                         break;
                                 }
                                 break;
                         }
                     }
+                    // Check if there is enough data left for coordinates before decoding
+                    if (buf.readableBytes() >= 4 + 4 + 2 + 1 + 1) { // lat + lon + speed + course + satellites
                        decodeCoordinates(position, buf);
                        position.setTime(time);
+                    } else {
+                       // Not enough data for coordinates, possibly handle as heartbeat or incomplete message
+                       getLastLocation(position, time); // Use last known location if coordinates are missing
+                    }
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Always skip length bytes for alarm data
                     }
+                     // Check if there is enough data left for coordinates before decoding
+                    if (buf.readableBytes() >= 4 + 4 + 2 + 1 + 1) { // lat + lon + speed + course + satellites
                        decodeCoordinates(position, buf);
                        position.setTime(time);
+                    } else {
+                       // Not enough data for coordinates, possibly handle as heartbeat or incomplete message
+                       getLastLocation(position, time); // Use last known location if coordinates are missing
+                    }
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
+                         if (buf.readableBytes() >= 17) { // Check readable bytes before reading VIN
                             position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                         } else {
+                            buf.skipBytes(buf.readableBytes()); // Skip remaining bytes if not enough for VIN
+                         }
                     }
                     getLastLocation(position, time);
                     break;
                 default:
+                    // Unknown subtype, potentially skip remaining readable bytes or return null
+                    // buf.skipBytes(buf.readableBytes()); // Optional: skip remaining if needed
                     return null;
             }
 
+            // Ensure position has a time, even if coordinates failed or were not present
+            if (position.getFixTime() == null) {
+                 position.setTime(time);
+            }
+            // Ensure position has validity if coordinates were decoded
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
+                position.setValid(true); // Assume valid if coordinates decoded successfully
+            }
+
+
             return position;
         }
 
         return null;
     }
\ No newline at end of file
