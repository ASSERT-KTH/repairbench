diff --git a/tmp/c081d54e-6027-4646-8e04-88d27c9c4a4f_buggy.java b/tmp/4aa3a831-e7d3-40fc-83a8-ded08e1a9ce4_fixed.java
index 2189af9..97aa810 100644
--- a/tmp/c081d54e-6027-4646-8e04-88d27c9c4a4f_buggy.java
+++ b/tmp/4aa3a831-e7d3-40fc-83a8-ded08e1a9ce4_fixed.java
@@ -1,113 +1,150 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 3) { // Need 2 bytes for ID, 1 byte for length
+                            return null; // Not enough data
+                        }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
+                                if (buf.readableBytes() < 4) return null;
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                                 break;
                             case 0x0103:
+                                if (buf.readableBytes() < 4) return null;
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x052A:
+                                if (buf.readableBytes() < 2) return null;
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
                                 break;
                             case 0x0105:
                             case 0x052C:
+                                if (buf.readableBytes() < 4) return null;
                                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
+                                if (buf.readableBytes() < 2) return null;
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                                 break;
                             default:
+                                // Check remaining readable bytes before reading/skipping
+                                if (buf.readableBytes() < length) {
+                                    return null; // Not enough data for the specified length
+                                }
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
+                                        // Skip only if length is positive and data is available
+                                        if (length > 0) {
                                             buf.skipBytes(length);
+                                        }
                                         break;
                                 }
                                 break;
                         }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 3) { // Need 2 bytes for ID, 1 byte for length
+                            return null; // Not enough data
+                        }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                // Do nothing for unknown alarms in switch
                                 break;
                         }
+                        // Check remaining readable bytes before skipping
+                        if (buf.readableBytes() < length) {
+                            return null; // Not enough data for the specified length
+                        }
+                        // Skip the data associated with the alarm/event ID
+                        if (length > 0) {
                             buf.skipBytes(length);
                         }
+                    }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
+                    if (buf.readableBytes() < 1) return null; // Check before reading VIN presence byte
                     if (buf.readUnsignedByte() > 0) {
+                         if (buf.readableBytes() < 17) return null; // Check before reading VIN
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
+                    // Unknown subtype, discard message
                     return null;
             }
 
+            // Return null if essential data (like location for relevant subtypes) is missing
+            if ((subtype == 0x01 || subtype == 0x03) && (position.getLatitude() == 0 || position.getLongitude() == 0)) {
+                 // Check if coordinates were actually decoded or if decodeCoordinates left them as 0
+                 // Allow position if other data exists, but this might indicate partial success/failure
+                 // Consider if returning null is safer if coordinates are expected but missing/invalid
+            }
+
+
             return position;
         }
 
         return null;
     }
\ No newline at end of file
