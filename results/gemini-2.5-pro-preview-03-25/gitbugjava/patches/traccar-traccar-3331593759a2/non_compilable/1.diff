diff --git a/tmp/94687664-be30-460c-af6d-9a3e5f477168_buggy.java b/tmp/e54ac0c8-a8dc-45c6-915a-37ff84c8d80a_fixed.java
index 2189af9..8b3695a 100644
--- a/tmp/94687664-be30-460c-af6d-9a3e5f477168_buggy.java
+++ b/tmp/e54ac0c8-a8dc-45c6-915a-37ff84c8d80a_fixed.java
@@ -1,113 +1,174 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            // Read time first as it's needed for getLastLocation
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 3) { // Need 2 bytes for id, 1 byte for length
+                            break; // Not enough data for next item header
+                        }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        if (buf.readableBytes() < length) {
+                            buf.skipBytes(buf.readableBytes()); // Consume rest of buffer if possible
+                            break; // Not enough data for item body
+                        }
                         switch (id) {
-                            case 0x0102:
+                            case 0x0102: // Odometer (Int)
                             case 0x0528:
                             case 0x0546:
+                                if (length == 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else {
+                                    buf.skipBytes(length); // Skip data if length mismatch
+                                }
                                 break;
-                            case 0x0103:
+                            case 0x0103: // Fuel Level (Int)
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x052A:
+                            case 0x052A: // Fuel Level (Short)
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x0105:
+                            case 0x0105: // Fuel Used (Int)
                             case 0x052C:
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            case 0x014A:
+                            case 0x014A: // Fuel Consumption (Short)
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
-                            default:
+                            default: // Generic IO or unknown ID
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
-                                    default:
+                                    default: // Skip data if length is 0 or > 4 or unhandled
                                         buf.skipBytes(length);
                                         break;
                                 }
                                 break;
                         }
                     }
+                    // Check readable bytes before decoding coordinates?
+                    // Original code didn't check, so maybe decodeCoordinates handles it.
+                    // Keep original behavior for now.
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        if (buf.readableBytes() < 3) { // Need 2 bytes for id, 1 byte for length
+                            break; // Not enough data for next item header
+                        }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        if (buf.readableBytes() < length) {
+                            buf.skipBytes(buf.readableBytes()); // Consume rest of buffer if possible
+                            break; // Not enough data for item body
+                        }
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                // No action needed for unknown alarms, data will be skipped below
                                 break;
                         }
+                        // Skip the data associated with the alarm ID
                         buf.skipBytes(length);
                     }
+                    // Check readable bytes before decoding coordinates? Keep original behavior.
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
-                    if (buf.readUnsignedByte() > 0) {
-                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                    // Check if VIN data is present (length byte > 0)
+                    int vinLength = buf.readUnsignedByte();
+                    if (vinLength > 0) {
+                        // Ensure we don't read past the buffer end for VIN
+                        if (buf.readableBytes() >= vinLength) {
+                             // Protocol specifies 17 bytes, but use actual length if different?
+                             // Read exactly vinLength bytes as specified.
+                            position.set(Position.KEY_VIN, buf.readCharSequence(vinLength, StandardCharsets.US_ASCII).toString());
+                        } else {
+                            // Not enough bytes for VIN, skip what's left
+                            buf.skipBytes(buf.readableBytes());
                         }
+                    }
+                    // This message type doesn't contain coordinates, use last known
                     getLastLocation(position, time);
                     break;
                 default:
+                    // Unknown subtype, cannot decode further
                     return null;
             }
 
+            // Return null if position doesn't have time (e.g., from getLastLocation)
+            // Or if it's missing coordinates? Check if decodeCoordinates sets validity.
+            // For now, return position if time is set.
+            if (position.getFixTime() != null) {
                 return position;
-        }
-
+            } else {
+                 // If getLastLocation failed or wasn't called, time might be null
                  return null;
             }
+        }
+
+        return null; // Not type 0xF0
+    }
\ No newline at end of file
