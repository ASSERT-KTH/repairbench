diff --git a/tmp/1976c1c9-cdb1-4bae-8e6e-63c81eff9a8c_buggy.java b/tmp/d186f67a-ec48-498b-821d-f4ebd94866d1_fixed.java
index 2189af9..2d9fcf9 100644
--- a/tmp/1976c1c9-cdb1-4bae-8e6e-63c81eff9a8c_buggy.java
+++ b/tmp/d186f67a-ec48-498b-821d-f4ebd94866d1_fixed.java
@@ -1,113 +1,161 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            // Read time, might be relevant for data timestamping or for getLastLocation
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
+                        // Ensure enough bytes for id and length
+                        if (buf.readableBytes() < 3) {
+                            break;
+                        }
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        // Ensure enough bytes for data
+                        if (buf.readableBytes() < length) {
+                            break;
+                        }
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
+                                if (length == 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x0103:
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x052A:
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x0105:
                             case 0x052C:
+                                if (length == 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
+                                if (length == 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             default:
+                                // Read unknown IO data based on length
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
-                                        buf.skipBytes(length);
+                                        buf.skipBytes(length); // Skip data for other lengths
                                         break;
                                 }
                                 break;
                         }
                     }
-                    decodeCoordinates(position, buf);
-                    position.setTime(time);
+                    // Subtype 0x01 likely reports data without new coordinates
+                    getLastLocation(position, time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
-                        int id = buf.readUnsignedShort();
+                        // Ensure enough bytes for id and length
+                        if (buf.readableBytes() < 2) {
+                            break;
+                        }
+                        int id = buf.readUnsignedByte(); // FIX: ID is 1 byte for alarms
                         int length = buf.readUnsignedByte();
+                        // Ensure enough bytes for data
+                        if (buf.readableBytes() < length) {
+                            break;
+                        }
+                        // Set alarm based on ID, then skip data bytes
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                // Unknown alarm ID
                                 break;
                         }
-                        buf.skipBytes(length);
+                        buf.skipBytes(length); // Skip the data associated with the alarm event
                     }
-                    decodeCoordinates(position, buf);
-                    position.setTime(time);
+                    // Subtype 0x03 likely reports alarms without new coordinates
+                    getLastLocation(position, time);
                     break;
                 case 0x0B:
-                    if (buf.readUnsignedByte() > 0) {
+                    // Check hasVin flag and ensure enough bytes for VIN
+                    if (buf.readUnsignedByte() > 0 && buf.readableBytes() >= 17) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                    } else if (buf.readerIndex() > 0) {
+                       // If hasVin was 0, or not enough bytes, VIN is skipped.
+                       // The hasVin byte was already consumed. If there were < 17 bytes after that,
+                       // they remain in the buffer, which is usually fine.
                     }
                     getLastLocation(position, time);
                     break;
                 default:
+                    // Unknown subtype, don't return a position as data is unhandled
                     return null;
             }
 
+            // Return position with attributes, using last known location/time
             return position;
         }
 
+        // Not type 0xF0, so this handler doesn't apply
         return null;
     }
\ No newline at end of file
