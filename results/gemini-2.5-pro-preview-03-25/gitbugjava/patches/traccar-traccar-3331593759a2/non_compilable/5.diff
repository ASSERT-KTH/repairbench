diff --git a/tmp/88721d05-125b-4b82-8cb1-11848a0b2320_buggy.java b/tmp/02ef8335-5547-480e-96ec-9cee2ff79604_fixed.java
index 2189af9..2fd2bd8 100644
--- a/tmp/88721d05-125b-4b82-8cb1-11848a0b2320_buggy.java
+++ b/tmp/02ef8335-5547-480e-96ec-9cee2ff79604_fixed.java
@@ -1,113 +1,180 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
+                        int startIndex = buf.readerIndex(); // Record start index
+
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
+                                if (length >= 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                }
                                 break;
                             case 0x0103:
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                }
                                 break;
                             case 0x052A:
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                }
                                 break;
                             case 0x0105:
                             case 0x052C:
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                }
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                }
                                 break;
                             default:
+                                // Handle unknown IDs based on length, ensuring not to read past 'length' bytes
+                                if (length > 0 && buf.readableBytes() >= length) {
                                     switch (length) {
                                         case 1:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                             break;
                                         case 2:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                             break;
                                         case 4:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                             break;
                                         default:
-                                        buf.skipBytes(length);
+                                            // If length is not 1, 2, or 4, we will skip the bytes below.
+                                            // Avoid reading here to prevent IndexOutOfBounds if length is large but unhandled.
                                             break;
                                     }
+                                }
                                 break;
                         }
+
+                        // Ensure exactly 'length' bytes are consumed for this item
+                        int bytesRead = buf.readerIndex() - startIndex;
+                        int bytesToSkip = length - bytesRead;
+                        if (bytesToSkip > 0 && buf.readableBytes() >= bytesToSkip) {
+                            buf.skipBytes(bytesToSkip);
+                        } else if (bytesToSkip < 0) {
+                            // Log potentially? Read more bytes than specified length.
+                            // This might happen if the length field was incorrect or case logic read too much.
+                            // Resetting reader index might be too complex; proceed with caution.
+                        } else if (bytesToSkip > 0 && buf.readableBytes() < bytesToSkip) {
+                            // Not enough bytes left - indicates truncated message. Stop processing.
+                            // Returning null earlier might be better, but for now, break loop.
+                            buf.skipBytes(buf.readableBytes()); // Skip what's left
+                            break; // Exit the loop
+                        }
                     }
+                    // Only decode coordinates if the buffer hasn't been fully skipped due to errors
+                    if (buf.readableBytes() > 0) {
                         decodeCoordinates(position, buf);
                         position.setTime(time);
-                    break;
+                    } else if (position.getLatitude() == 0 && position.getLongitude() == 0) {
+                        // If we couldn't read coordinates and position is still empty, get last location
+                        getLastLocation(position, time);
+                    } else {
+                        position.setTime(time); // Set time even if coordinates are missing but some data was parsed
+                    }
+                    break; // Break from case 0x01
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
-                                break;
+                                break; // Ignore unknown alarm IDs for now
                         }
+                        // Always skip 'length' bytes for each alarm entry
+                        if (length > 0 && buf.readableBytes() >= length) {
                             buf.skipBytes(length);
+                        } else if (length > 0) {
+                             // Not enough bytes left - indicates truncated message. Stop processing.
+                            buf.skipBytes(buf.readableBytes()); // Skip what's left
+                            break; // Exit the loop
                         }
+                    }
+                    // Only decode coordinates if the buffer hasn't been fully skipped due to errors
+                    if (buf.readableBytes() > 0) {
                         decodeCoordinates(position, buf);
                         position.setTime(time);
-                    break;
+                    } else if (position.getLatitude() == 0 && position.getLongitude() == 0) {
+                         // If we couldn't read coordinates and position is still empty, get last location
+                        getLastLocation(position, time);
+                    } else {
+                        position.setTime(time); // Set time even if coordinates are missing but some data was parsed
+                    }
+                    break; // Break from case 0x03
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
+                        // Ensure there are enough bytes for VIN before reading
+                        if (buf.readableBytes() >= 17) {
                             position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                        } else {
+                            buf.skipBytes(buf.readableBytes()); // Skip remaining if not enough for VIN
                         }
-                    getLastLocation(position, time);
+                    }
+                    getLastLocation(position, time); // Type 0x0B doesn't contain coordinates
                     break;
                 default:
                     return null;
             }
 
+            // Basic check if position is valid before returning
+            if (position.getLatitude() != 0 && position.getLongitude() != 0) {
                  return position;
+            } else if (position.getAttributes().size() > 1) { // check if other attributes besides protocol were set
+                 return position; // Return even without coordinates if other data exists
+            } else {
+                 return null; // Return null if essentially empty
+            }
         }
 
         return null;
     }
\ No newline at end of file
