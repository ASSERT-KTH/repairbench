diff --git a/tmp/ec17750d-0952-49ef-b6c5-6fb5a6dbfe9f_buggy.java b/tmp/6cb8de4b-54ce-45fa-b7c5-21a9fdf9d439_fixed.java
index ae12a4d..44e3912 100644
--- a/tmp/ec17750d-0952-49ef-b6c5-6fb5a6dbfe9f_buggy.java
+++ b/tmp/6cb8de4b-54ce-45fa-b7c5-21a9fdf9d439_fixed.java
@@ -1,3 +1,26 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+// Note: This requires importing Pattern and Matcher from java.util.regex
+// Ideally, the Pattern should be a static final field in the class for efficiency,
+// but placing it here keeps the change contained within the function as requested.
+
     private boolean isFormatAsBlock(Document.OutputSettings out) {
+        // Check for CSS override 'display: inline'
+        String style = attr("style"); // Get the style attribute value
+        if (!style.isEmpty()) { // Optimization: only check if style attribute exists and is not empty
+            // Pattern to find 'display: inline' style - case insensitive, handles variable whitespace
+            // Compiling pattern here is less efficient than a static field, but keeps the change local.
+            Pattern displayInlinePattern = Pattern.compile("display\\s*:\\s*inline\\s*;?", Pattern.CASE_INSENSITIVE);
+            Matcher matcher = displayInlinePattern.matcher(style);
+            if (matcher.find()) {
+                // If 'display: inline' is found in the style attribute, treat as inline for formatting.
+                return false;
+            }
+        }
+
+        // If no 'display: inline' override, use the original logic:
+        // Formats as block if the tag is inherently block, or the parent is block,
+        // or outline mode is enabled (which implies block-like formatting).
         return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
     }
