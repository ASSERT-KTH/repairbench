diff --git a/tmp/3fab4684-2a6b-4463-aac9-3a25b514ae77_buggy.java b/tmp/5e5662f4-45bf-41ac-9cdc-c77ad96d8b2f_fixed.java
index ae12a4d..9c0b2f9 100644
--- a/tmp/3fab4684-2a6b-4463-aac9-3a25b514ae77_buggy.java
+++ b/tmp/5e5662f4-45bf-41ac-9cdc-c77ad96d8b2f_fixed.java
@@ -1,3 +1,53 @@
-    private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+    /**
+     * Check if this element should be formatted as a block element during output.
+     * The determination is made based on the element's tag type (e.g., P, DIV are block),
+     * and any style attribute overrides (e.g. style="display: inline;").
+     *
+     * @param out the output settings - not used in current logic, but might be needed for future refinements.
+     * @return true if format as block, false otherwise
+     */
+    private boolean isFormatAsBlock(Document.OutputSettings out) { // Note: out param is currently unused but kept for signature compatibility
+        // Check for CSS display override in the style attribute
+        String styleAttr = attr("style");
+        if (!styleAttr.isEmpty()) {
+            String styleVal = styleAttr.toLowerCase().trim();
+
+            // Regex to find "display: inline" rule, handling whitespace and semicolons.
+            // Pattern looks for display:inline either at the start/end of the string or bounded by semicolons.
+            // Using \b word boundary around inline ensures it doesn't match inline-block etc.
+            Pattern inlinePattern = Pattern.compile("(^|;)\\s*display\\s*:\\s*inline\\b");
+            Matcher inlineMatcher = inlinePattern.matcher(styleVal);
+            if (inlineMatcher.find()) {
+                // Check if the match is followed by a semicolon or the end of the string to ensure it's a complete rule value
+                String following = styleVal.substring(inlineMatcher.end()).trim();
+                if (following.isEmpty() || following.startsWith(";")) {
+                    return false; // Style dictates inline formatting.
+                }
+            }
+
+            // Regex to find "display: block" rule.
+            // Using \b word boundary around block.
+            Pattern blockPattern = Pattern.compile("(^|;)\\s*display\\s*:\\s*block\\b");
+            Matcher blockMatcher = blockPattern.matcher(styleVal);
+            if (blockMatcher.find()) {
+                // Check if the match is followed by a semicolon or the end of the string
+                String following = styleVal.substring(blockMatcher.end()).trim();
+                 if (following.isEmpty() || following.startsWith(";")) {
+                    return true; // Style dictates block formatting.
+                 }
+            }
+            
+            // Note: This simple check doesn't handle all CSS complexity (e.g., !important, multiple display properties, comments, complex selectors).
+            // It prioritizes explicit 'display: inline' or 'display: block' overrides found directly in the style attribute.
+            // Other display values like 'inline-block', 'flex', 'grid', etc., will fall through to the default tag behavior.
+        }
+
+        // No definitive 'display: inline' or 'display: block' style found.
+        // Fall back to the default formatting behavior of the tag.
+        // The original logic parts '|| (parent() != null && parent().tag().formatAsBlock())' and '|| out.outline()'
+        // were removed as they incorrectly influenced the block/inline determination based on parent or output settings.
+        return tag.formatAsBlock();
     }
