diff --git a/tmp/0f8b7c2c-7ba4-4eaa-a677-ce8a365efa62_buggy.java b/tmp/fb1560e5-f2d5-40df-b189-fb85331b9dcb_fixed.java
index 7b9216c..aa9bff7 100644
--- a/tmp/0f8b7c2c-7ba4-4eaa-a677-ce8a365efa62_buggy.java
+++ b/tmp/fb1560e5-f2d5-40df-b189-fb85331b9dcb_fixed.java
@@ -1,47 +1,117 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufUtil;
+import org.traccar.DeviceSession;
+import org.traccar.Network;
+import org.traccar.Protocol; // Assuming Protocol class is imported if getProtocolName is used
+import org.traccar.config.Config; // Assuming Config is used via getConfig()
+import org.traccar.helper.BitUtil;
+import org.traccar.model.CellTower;
+import org.traccar.model.Position;
+
+// Assume Jt600ProtocolDecoder and necessary constants like MSG_LOCATION_REPORT_BLIND are accessible
+
+public class FixedHuabaoProtocolDecoder { // Renamed class for clarity, original class name might differ
+
+    // Assume getProtocolName() and getConfig() are methods available in the actual class context
+    private String getProtocolName() {
+        // Placeholder implementation
+        return "huabao";
+    }
+
+    private Config getConfig() {
+        // Placeholder implementation
+        return null; // In reality, this would return the application config
+    }
+
+    // Define the constant if it's not defined elsewhere accessible
+    public static final int MSG_LOCATION_REPORT_BLIND = 0x0901; // Example value, use the actual value from the codebase
+
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
+        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position); // Assumes this static method exists and is accessible
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
 
         position.set(Position.KEY_STATUS, status);
 
+        // Start of fix: Read extended attributes (ID-Length-Value format)
+        while (buf.readableBytes() >= 2) { // Need at least ID (1 byte) + Length (1 byte)
+            int extendedId = buf.readUnsignedByte();
+            int extendedLength = buf.readUnsignedByte();
+
+            if (buf.readableBytes() < extendedLength) {
+                // Not enough data left for the declared length, stop parsing extended attributes
+                // This might indicate corrupted data or reaching padding/checksum bytes handled elsewhere
+                break;
+            }
+
+            switch (extendedId) {
+                case 0x0C: // Found ID for Gyro data in the failing test example
+                    if (extendedLength == 6) { // Check expected length
+                        // Read the data as a hex string, matching the test expectation
+                        position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(extendedLength)));
+                    } else {
+                        // Log unexpected length or handle appropriately
+                        buf.skipBytes(extendedLength); // Skip data if length mismatch
+                    }
+                    break;
+                // Add cases for other known extended attribute IDs here if needed
+                // e.g., case 0x01: position.set("someKey", buf.readShort()); break;
+                default:
+                    // Skip unknown/unhandled extended attributes
+                    buf.skipBytes(extendedLength);
+                    break;
+            }
+        }
+        // End of fix
+
         return position;
     }
+
+    // Dummy class/method to resolve compilation error for the standalone function
+    private static class Jt600ProtocolDecoder {
+        public static void decodeBinaryLocation(ByteBuf buf, Position position) {
+            // This should contain the actual logic from Jt600ProtocolDecoder
+            // For the fix purpose, we just need the method signature
+            // Skipping actual implementation details here. It reads ~17 bytes.
+            buf.skipBytes(6 + 4 + 4 + 1 + 2); // Skip approximate bytes read by this method
+        }
+    }
+}
\ No newline at end of file
