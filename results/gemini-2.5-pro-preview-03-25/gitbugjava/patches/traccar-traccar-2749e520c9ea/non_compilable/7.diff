diff --git a/tmp/571ecf87-54cc-4b31-b64e-5ebf86846893_buggy.java b/tmp/a769f98e-a9a0-4a7d-90f8-01e464e99e16_fixed.java
index 7b9216c..15ccc0d 100644
--- a/tmp/571ecf87-54cc-4b31-b64e-5ebf86846893_buggy.java
+++ b/tmp/a769f98e-a9a0-4a7d-90f8-01e464e99e16_fixed.java
@@ -1,47 +1,57 @@
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+        // Common fields for MSG_LOCATION_REPORT and MSG_LOCATION_REPORT_BLIND
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
         position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
         int battery = buf.readUnsignedByte();
         if (battery <= 100) {
             position.set(Position.KEY_BATTERY_LEVEL, battery);
         } else if (battery == 0xAA) {
             position.set(Position.KEY_CHARGE, true);
         }
 
+        // Fields specific to MSG_LOCATION_REPORT (type 0x0200)
+        // MSG_LOCATION_REPORT_BLIND (type 0x0900) messages are shorter and don't have these fields
+        if (type == MSG_LOCATION_REPORT && buf.readableBytes() >= 11) { // Ensure enough bytes for the following reads
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
             int product = buf.readUnsignedByte();
             int status = buf.readUnsignedShort();
             int alarm = buf.readUnsignedShort();
 
+            // Alarm decoding based on product type
             if (product == 1 || product == 2) {
                 if (BitUtil.check(alarm, 0)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
+                // Potentially other alarms for product 1/2 based on 'alarm' bits
             } else if (product == 3) {
                 position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                 if (BitUtil.check(alarm, 1)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
                 if (BitUtil.check(alarm, 2)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 if (BitUtil.check(alarm, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                 }
+                // Potentially other alarms for product 3 based on 'alarm' bits
             }
+            // Note: Setting ALARM multiple times overwrites previous value. Consider accumulating alarms if needed.
 
             position.set(Position.KEY_STATUS, status);
+        }
+        // Any remaining bytes in 'buf' might be optional information elements handled elsewhere
 
         return position;
     }
\ No newline at end of file
