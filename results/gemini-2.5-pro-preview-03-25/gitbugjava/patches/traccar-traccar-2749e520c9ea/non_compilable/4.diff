diff --git a/tmp/98afdf50-a809-44b9-900b-f761d6d9a5e3_buggy.java b/tmp/d64d7784-fcc7-439c-8502-f59e9add771b_fixed.java
index 7b9216c..34e8b00 100644
--- a/tmp/98afdf50-a809-44b9-900b-f761d6d9a5e3_buggy.java
+++ b/tmp/d64d7784-fcc7-439c-8502-f59e9add771b_fixed.java
@@ -1,47 +1,103 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufUtil;
+import org.traccar.config.Config; // Required for CellTower helper
+import org.traccar.helper.BitUtil;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+import org.traccar.session.DeviceSession;
+
+// Assume necessary static imports or fully qualified names for Position keys/alarms
+// Assume Jt600ProtocolDecoder and MSG_LOCATION_REPORT_BLIND are accessible
+
     private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
+        Jt600ProtocolDecoder.decodeBinaryLocation(buf, position); // Decodes common JT/T 808 location block (time, coordinates etc)
         position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+        // Check remaining bytes before reading potentially optional fields
+        if (buf.readableBytes() >= 1) {
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+        }
+        if (buf.readableBytes() >= 1) {
             position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+        }
+        if (buf.readableBytes() >= 4) {
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
+        }
 
+        if (buf.readableBytes() >= 1) {
             int battery = buf.readUnsignedByte();
             if (battery <= 100) {
                 position.set(Position.KEY_BATTERY_LEVEL, battery);
             } else if (battery == 0xAA) {
                 position.set(Position.KEY_CHARGE, true);
             }
+        }
 
+        if (buf.readableBytes() >= 6) { // Need 4 for CID, 2 for LAC
             position.setNetwork(new Network(CellTower.fromCidLac(
                     getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+        }
 
-        int product = buf.readUnsignedByte();
-        int status = buf.readUnsignedShort();
+        // Product, Status, Alarm might follow standard fields or be part of TLV depending on variant
+        // Read them if enough bytes exist, otherwise they might be handled by TLV below
+        int product = 0; // Default value
+        int status = 0; // Default value
+        if (buf.readableBytes() >= 5) { // 1 for product, 2 for status, 2 for alarm
+            product = buf.readUnsignedByte();
+            status = buf.readUnsignedShort();
             int alarm = buf.readUnsignedShort();
 
             if (product == 1 || product == 2) {
                 if (BitUtil.check(alarm, 0)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
             } else if (product == 3) {
                 position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
                 if (BitUtil.check(alarm, 1)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
                 }
                 if (BitUtil.check(alarm, 2)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
                 }
                 if (BitUtil.check(alarm, 3)) {
                     position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
                 }
             }
-
             position.set(Position.KEY_STATUS, status);
+        }
+
+        // Parse trailing TLV-style data (Common in JT/T 808 extensions)
+        // This handles additional data like gyro found in some messages
+        while (buf.readableBytes() >= 2) { // Need at least 1 byte for type and 1 byte for length
+            int tlvType = buf.readUnsignedByte();
+            int tlvLength = buf.readUnsignedByte(); // Assume 1-byte length common in JT/T 808 appendix
+            if (buf.readableBytes() < tlvLength) {
+                // Not enough data for the value, indicates corrupt/malformed packet or end of relevant data
+                buf.readerIndex(buf.readerIndex() - 2); // Rewind to before reading TLV type and length
+                break; // Stop parsing TLVs
+            }
+            ByteBuf value = buf.readSlice(tlvLength);
+
+            // Handle known TLV types
+            switch (tlvType) {
+                case 0x0C: // Type 0x0C seems to be used for Gyro data based on test case analysis
+                    if (tlvLength == 6) {
+                        position.set("gyro", ByteBufUtil.hexDump(value));
+                    }
+                    break;
+                // Add cases for other known TLV types from Huabao protocol if necessary
+                // e.g., case 0x01: position.set(Position.KEY_ODOMETER, value.readUnsignedInt()); break;
+                // e.g., case 0x02: position.set(Position.KEY_POWER, value.readUnsignedShort() * 0.1); break;
+                default:
+                    // Ignore unknown TLVs or log if needed
+                    break;
+            }
+        }
 
         return position;
     }
\ No newline at end of file
