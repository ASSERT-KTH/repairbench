diff --git a/tmp/fbfd66f4-6ced-43f4-8bc0-e1db6f3e0808_buggy.java b/tmp/edb20a50-77c5-4e3b-8a19-e214ed01b87d_fixed.java
index c84c989..5378f18 100644
--- a/tmp/fbfd66f4-6ced-43f4-8bc0-e1db6f3e0808_buggy.java
+++ b/tmp/edb20a50-77c5-4e3b-8a19-e214ed01b87d_fixed.java
@@ -1,27 +1,52 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import org.traccar.session.DeviceSession;
+import org.traccar.model.Position;
+
+// Add necessary imports if they are missing in the original context
+// Assuming BaseProtocolDecoder, DeviceSession, Position etc. are available
+
+public class OriginalCode { // Wrapper class to provide context
+
+    // Assume necessary fields and methods like getDeviceSession, getProtocolName, decodeMinimalDataSet exist
+    private DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String imei) { return null; } // Placeholder
+    private String getProtocolName() { return "galileo"; } // Placeholder
+    private void decodeMinimalDataSet(Position position, ByteBuf buf) { /* Placeholder for actual decoding logic */ } // Placeholder
+
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        // FIX: Decode and set the time from the dedicated field
+        position.setTime(new Date(buf.readUnsignedIntLE() * 1000L)); // date and time (use long literal for multiplication)
 
-        buf.skipBytes(23); // coordinates block
+        buf.skipBytes(23); // coordinates block (Keep original logic for now, although suspicious)
 
-        buf.skipBytes(3); // data tag header
+        buf.skipBytes(3); // data tag header (Keep original logic)
+
+        // Decode remaining data if any
+        if (buf.isReadable()) {
             decodeMinimalDataSet(position, buf);
+        }
 
         return position;
     }
+
+} // End wrapper class
\ No newline at end of file
