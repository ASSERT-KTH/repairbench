diff --git a/tmp/6c6db181-ac11-4b00-8315-1878809de92c_buggy.java b/tmp/baf6bdc0-6350-4cca-bde1-4a175f75a0aa_fixed.java
index c84c989..6dace12 100644
--- a/tmp/6c6db181-ac11-4b00-8315-1878809de92c_buggy.java
+++ b/tmp/baf6bdc0-6350-4cca-bde1-4a175f75a0aa_fixed.java
@@ -1,27 +1,47 @@
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
-        buf.readUnsignedIntLE(); // index
+        int recordIndex = buf.readIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
+        position.set(Position.KEY_INDEX, recordIndex);
+
+        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte()); // session status (possibly satellites)
 
-        buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
 
-        buf.skipBytes(23); // coordinates block
+        long time = buf.readUnsignedIntLE(); // date and time (seconds since epoch)
+        position.setTime(new Date(time * 1000));
 
+        // Decode the previously skipped 23-byte coordinates block
+        // Assuming standard Galileo structure: lat, lon, alt, speed, course, etc.
+        position.setValid(true); // Assume valid as basic data is present
+        position.setLatitude(buf.readIntLE() / 1000000.0);  // 4 bytes
+        position.setLongitude(buf.readIntLE() / 1000000.0); // 4 bytes
+        position.setAltitude(buf.readShortLE());           // 2 bytes
+        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); // 2 bytes (assuming km/h)
+        position.setCourse(buf.readUnsignedShortLE());     // 2 bytes
+        
+        // Skip the remainder of the 23-byte block (23 - 4 - 4 - 2 - 2 - 2 = 9 bytes)
+        // These might contain status, HDOP, inputs/outputs etc. specific to this variant
+        buf.skipBytes(9); 
+
+        // Handle the minimal data set if present after the coordinate block
+        if (buf.readableBytes() >= 3) { // Check if the 3-byte header exists
             buf.skipBytes(3); // data tag header
-        decodeMinimalDataSet(position, buf);
+            if (buf.readableBytes() > 0) { // Check if there is data after the header
+                 decodeMinimalDataSet(position, buf); // Decode remaining tagged data
+            }
+        }
 
         return position;
     }
\ No newline at end of file
