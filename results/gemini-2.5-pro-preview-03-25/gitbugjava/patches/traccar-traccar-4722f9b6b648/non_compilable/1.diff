diff --git a/tmp/67c84670-c02b-4d3a-be00-1b7a497b91c2_buggy.java b/tmp/2d2f617f-fd85-461a-9e82-53b218d0d957_fixed.java
index c84c989..a19b0e1 100644
--- a/tmp/67c84670-c02b-4d3a-be00-1b7a497b91c2_buggy.java
+++ b/tmp/2d2f617f-fd85-461a-9e82-53b218d0d957_fixed.java
@@ -1,27 +1,74 @@
+import java.util.Date;
+import java.util.TimeZone;
+import java.util.Calendar;
+import java.nio.charset.StandardCharsets;
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import org.traccar.session.DeviceSession;
+import org.traccar.model.Position;
+// Add other necessary imports based on the actual context (e.g., getDeviceSession, getProtocolName, decodeMinimalDataSet)
+
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
-        buf.skipBytes(3); // identification header
+        buf.skipBytes(3); // identification header (e.g., 01 00 1c)
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
-        buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        buf.skipBytes(4); // reserved (MOMSN, MTMSN)
 
-        buf.skipBytes(23); // coordinates block
+        // Read timestamp (Assume Big Endian Unix timestamp in seconds, based on common Galileo format and error analysis)
+        long timestampSeconds = buf.readUnsignedInt(); // date and time - Changed from readUnsignedIntLE() to readUnsignedInt()
+        position.setTime(new Date(timestampSeconds * 1000L)); // Set time using Unix epoch
 
-        buf.skipBytes(3); // data tag header
+        // Original logic skipped 23 + 3 = 26 bytes here.
+        // This block likely contains coordinates and other status info not parsed by the original code.
+        // Let's attempt to parse it based on the structure likely used in decodeRegularPosition
+        // Structure assumption: HDOP(u8), Sats(u8), Valid(u8), Lat(f32LE), Lon(f32LE), Alt(f32LE), Speed(u16LE KPH), Course(u16LE Deg) = 19 bytes
+        // We need to check if there are enough bytes. The original code skipped 23.
+        if (buf.readableBytes() >= 19) { // Check if there are enough bytes for the assumed coordinate block structure
+            position.set(Position.KEY_HDOP, buf.readUnsignedByte());
+            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+            position.setValid(buf.readUnsignedByte() > 0); // Assuming > 0 means valid fix
+            position.setLatitude(buf.readFloatLE());
+            position.setLongitude(buf.readFloatLE());
+            position.setAltitude(buf.readFloatLE());
+            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE())); // Speed in kph, convert to knots
+            position.setCourse(buf.readUnsignedShortLE()); // Course in degrees
+
+            // Skip remaining bytes from the original 23-byte "coordinates block"
+            buf.skipBytes(23 - 19); 
+        } else {
+             // Not enough bytes for the assumed structure, maintain original skip logic for the block
+             buf.skipBytes(23);
+        }
+
+
+        buf.skipBytes(3); // Skip the original 3-byte "data tag header"
+
+        // Decode remaining tags if any data is left
+        if (buf.readableBytes() > 0) {
             decodeMinimalDataSet(position, buf);
+        }
 
         return position;
     }
+
+    // Dummy implementations for context, replace with actual ones from the project
+    private DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String imei) { return null; }
+    private String getProtocolName() { return "galileo"; }
+    private void decodeMinimalDataSet(Position position, ByteBuf buf) { /* decodes TLV data */ }
+    private static class UnitsConverter { // Dummy converter
+        public static double knotsFromKph(double kph) { return kph * 0.539957; }
+    }
