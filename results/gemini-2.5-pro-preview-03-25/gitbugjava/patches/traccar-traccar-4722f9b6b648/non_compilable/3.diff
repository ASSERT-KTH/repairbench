diff --git a/tmp/da6a6e67-864b-4335-8fd8-ef898de421d4_buggy.java b/tmp/9908d728-8356-4b65-bced-5a27222f7eb3_fixed.java
index c84c989..4b5aa5a 100644
--- a/tmp/da6a6e67-864b-4335-8fd8-ef898de421d4_buggy.java
+++ b/tmp/9908d728-8356-4b65-bced-5a27222f7eb3_fixed.java
@@ -1,27 +1,56 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date; // Needed for new Date()
+// Assuming Position, DeviceSession, getDeviceSession, getProtocolName, decodeMinimalDataSet are available
+
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
 
+        // Read the timestamp (Unix epoch seconds, LE) and set it in the position object
+        long time = buf.readUnsignedIntLE(); // date and time
+        if (time > 0) {
+            position.setTime(new Date(time * 1000)); // Set the position time
+        }
+
+        // Skip the block presumed to contain coordinates or other data in a potentially different format
+        // Assuming the essential data (like lat/lon if not decoded later) might be missing
+        // if it's only within this block. The primary fix here is for the time issue.
+        if (buf.readableBytes() >= 23) {
             buf.skipBytes(23); // coordinates block
+        } else {
+             // Not enough bytes for coordinates block, likely truncated message
+             buf.skipBytes(buf.readableBytes()); // Consume remaining bytes
+             return position; // Return potentially incomplete position (has time, but maybe no tags)
+        }
 
-        buf.skipBytes(3); // data tag header
+
+        // Check if there are enough bytes for the tag header + potential data
+        if (buf.readableBytes() >= 3) {
+             buf.skipBytes(3); // data tag header (assuming this structure is correct)
+             if (buf.isReadable()) { // Check if there's data left for tags
+                 // Decode remaining tags if any
                  decodeMinimalDataSet(position, buf);
+             }
+        }
+        // If less than 3 bytes remain after the coordinates block, we can't skip the header or decode tags.
 
         return position;
     }
