diff --git a/tmp/8584d5b7-5abc-40ed-818d-a8afcf9a6ed8_buggy.java b/tmp/ae36b028-fe96-48aa-a213-b938d2971222_fixed.java
index c84c989..f52681e 100644
--- a/tmp/8584d5b7-5abc-40ed-818d-a8afcf9a6ed8_buggy.java
+++ b/tmp/ae36b028-fe96-48aa-a213-b938d2971222_fixed.java
@@ -1,27 +1,101 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+
+// Added imports and dummy class structure for context, replace with actual imports and class.
+
+public abstract class GalileoProtocolDecoderFixed extends BaseProtocolDecoder { // Placeholder class name
+
+    // Constructor needed by BaseProtocolDecoder
+    public GalileoProtocolDecoderFixed(Protocol protocol) {
+        super(protocol);
+    }
+
+    // Assume GALILEO_EPOCH_MILLIS is defined appropriately, e.g., based on protocol spec
+    // Often Jan 1, 2009 00:00:00 UTC for GalileoSky
+    private static final long GALILEO_EPOCH_MILLIS = 1230768000000L;
+
+    // Assume decodeMinimalDataSet exists in the actual class
+    protected abstract void decodeMinimalDataSet(Position position, ByteBuf buf);
+
+    @Override
+    protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+        // This is the main decode method, which likely calls decodeIridiumPosition based on message type
+        // Implementation not provided or needed for the fix.
+        return null;
+    }
+
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        buf.readUnsignedIntLE(); // date and time (Timestamp1 - modem time?)
 
-        buf.skipBytes(23); // coordinates block
+        // Check if enough data for the coordinates block
+        if (buf.readableBytes() < 23) {
+            return null; // Not enough data
+        }
 
-        buf.skipBytes(3); // data tag header
+        // Read the 23-byte coordinates block instead of skipping it
+        ByteBuf data = buf.readSlice(23);
+
+        // Decode fixed structure from the 23-byte block
+        // Assumption: 4 unknown | 4 lat (10E7) | 4 lon (10E7) | 2 alt | 1 sats | 1 speed (kph) | 2 course | 4 time (sec since epoch) | 2 trailer
+        try {
+            data.skipBytes(4); // Skip 4 unknown bytes
+
+            position.setValid(true); // Assume valid as we have the block
+            position.setLatitude(data.readIntLE() / 10000000.0);  // Degrees * 10^7
+            position.setLongitude(data.readIntLE() / 10000000.0); // Degrees * 10^7
+            position.setAltitude(data.readShortLE()); // Meters
+            position.set(Position.KEY_SATELLITES, data.readUnsignedByte()); // Satellites count
+            position.setSpeed(UnitsConverter.knotsFromKph(data.readUnsignedByte())); // Speed in KPH, convert to knots
+            position.setCourse(data.readUnsignedShortLE()); // Course in degrees
+
+            // Read the timestamp (4 bytes, seconds since Galileo epoch)
+            long timestampSeconds = data.readUnsignedIntLE();
+            position.setTime(new Date(GALILEO_EPOCH_MILLIS + timestampSeconds * 1000L));
+
+            // Implicitly skips the last 2 bytes of the 23-byte block as we've read 4+4+4+2+1+1+2+4 = 22 bytes
+
+        } catch (IndexOutOfBoundsException e) {
+            // Error decoding the 23-byte block, indicates unexpected format
+             // Log error or return null
+            return null;
+        }
+
+        // The original code skipped 3 bytes ("data tag header") after the 23-byte block
+        // and then called decodeMinimalDataSet. We retain this logic for potential extra tags.
+        if (buf.readableBytes() >= 3) {
+            buf.skipBytes(3); // Skip the 3-byte "header" before potential tags
+            if (buf.isReadable()) {
+                // Decode any remaining data using the standard tag-based method
                 decodeMinimalDataSet(position, buf);
+            }
+        }
 
         return position;
     }
+}
\ No newline at end of file
