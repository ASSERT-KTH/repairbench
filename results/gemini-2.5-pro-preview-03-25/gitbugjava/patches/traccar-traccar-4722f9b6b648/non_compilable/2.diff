diff --git a/tmp/2a5ece54-0b60-413a-b195-f41c75a46aa1_buggy.java b/tmp/e00d9ff6-3543-434c-a668-164ea7fab796_fixed.java
index c84c989..845386d 100644
--- a/tmp/2a5ece54-0b60-413a-b195-f41c75a46aa1_buggy.java
+++ b/tmp/e00d9ff6-3543-434c-a668-164ea7fab796_fixed.java
@@ -1,27 +1,54 @@
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.Protocol;
+import org.traccar.helper.BitUtil;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+import java.util.Date;
+import java.time.Instant; // Import needed for Instant
+
+// Assume BaseProtocolDecoder and other necessary classes/methods (like getDeviceSession, getProtocolName, decodeMinimalDataSet) exist elsewhere.
+// The provided code snippet is part of a larger class.
+
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
 
+        // Read the timestamp (unsigned 32-bit little-endian integer representing seconds since epoch)
+        long timestampSeconds = buf.readUnsignedIntLE();
+        // Convert to Date and set it on the position object
+        position.setTime(Date.from(Instant.ofEpochSecond(timestampSeconds)));
+
+        // Skip the block that might contain coordinates or other data specific to Iridium format
         buf.skipBytes(23); // coordinates block
 
+        // Skip the data tag header before decoding the minimal data set
         buf.skipBytes(3); // data tag header
+
+        // Decode the standard GPS fields and other attributes
         decodeMinimalDataSet(position, buf);
 
+        // Return the populated position object
         return position;
     }
