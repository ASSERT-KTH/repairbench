diff --git a/tmp/bc0f3bf7-665c-420d-a42a-c235d8943936_buggy.java b/tmp/067e5f6f-3ae3-4728-9708-23389255ba96_fixed.java
index 016a7f6..8150232 100644
--- a/tmp/bc0f3bf7-665c-420d-a42a-c235d8943936_buggy.java
+++ b/tmp/067e5f6f-3ae3-4728-9708-23389255ba96_fixed.java
@@ -1,29 +1,79 @@
+    @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+        final @javax.annotation.Nullable Node prev = previousSibling(); // Calculate earlier
+        final @javax.annotation.Nullable Node next = nextSibling(); // Calculate earlier
+        // Check if whitespace normalization should occur. Does not apply in textarea or pre tags.
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // preserveWhitespace checks parent == null || !parent.tag().preserveWhitespace()
+
+        boolean trimLeading = false; // Determine if leading whitespace should be trimmed
+        boolean trimTrailing = false; // Determine if trailing whitespace should be trimmed
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            // Conditions for trimming leading whitespace:
+            // 1. Parent is a block/formatAsBlock element AND this is the first child (siblingIndex == 0)
+            // 2. Previous sibling exists AND is a block element
+            // 3. Parent is the document root (heuristic for trimming leading space)
+            final boolean isFirstChild = siblingIndex == 0;
+            // parent check required for tag access, and parent instanceof Document check
+            final boolean parentIsBlockLike = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+            final boolean prevIsBlock = prev instanceof Element && ((Element) prev).tag().isBlock();
+            final boolean parentIsDoc = parentNode instanceof Document;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            if ((parentIsBlockLike && isFirstChild) || prevIsBlock || parentIsDoc) {
+                trimLeading = true;
+            }
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            // Conditions for trimming trailing whitespace:
+            // 1. Parent is a block/formatAsBlock element AND this is the last child (next == null)
+            // 2. Next sibling exists AND is a block element
+            final boolean isLastChild = next == null;
+            final boolean nextIsBlock = next instanceof Element && ((Element) next).tag().isBlock();
+
+            if ((parentIsBlockLike && isLastChild) || nextIsBlock) {
+                trimTrailing = true;
+            }
+
+            // If the text node is blank and the next node will cause an indent, or is blank, skip this node.
+            // Allows tidy handling of text nodes that are just newlines.
+            boolean isBlank = isBlank(); // calculate once
+            // original skip logic - check if blank and next sibling would indent, or is blank text
+            if (next != null && isBlank) {
+                boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+                    || (next instanceof TextNode && ((TextNode) next).isBlank());
+                if (couldSkip) {
+                    return; // skip this node entirely
+                }
+            }
+
+            // Indentation logic:
+            // Indent if this node is not blank AND is the first representation on a newline:
+            boolean requiresIndent = false;
+            if (!isBlank) { // only indent non-blank text nodes where normaliseWhite is true
+                // Condition 1: First child in a format-as-block parent (and parent exists)
+                if (isFirstChild && parent != null && parent.tag().formatAsBlock()) {
+                    requiresIndent = true;
+                }
+                // Condition 2: Follows a block or br element
+                else if (prev instanceof Element) {
+                    Element prevEl = (Element) prev;
+                    // Indent after blocks or <br> tags
+                    if (prevEl.tag().isBlock() || prevEl.normalName().equals("br")) {
+                        requiresIndent = true;
+                    }
+                }
+                // Condition 3: Outline mode is enabled (and there are siblings)
+                else if (out.outline() && siblingNodes().size() > 0) {
+                     requiresIndent = true;
+                }
+            }
+            // Apply indentation if required
+            if (requiresIndent) {
                 indent(accum, depth, out);
             }
+        } // end if(normaliseWhite)
 
+        // Call escape with the calculated trim flags. The escape method will handle normalization and trimming based on flags.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
