diff --git a/tmp/4dae98d4-92ba-41e3-be52-2584f9207284_buggy.java b/tmp/6a970d8b-7859-4047-9cd9-45a92a87eb77_fixed.java
index 016a7f6..fa1ade0 100644
--- a/tmp/4dae98d4-92ba-41e3-be52-2584f9207284_buggy.java
+++ b/tmp/6a970d8b-7859-4047-9cd9-45a92a87eb77_fixed.java
@@ -1,29 +1,59 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // preserveWhitespace needs recursive check up the tree; let's assume Element.preserveWhitespace exists and does that.
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+
+        if (!normaliseWhite) {
+            Entities.escape(accum, coreValue(), out, false, false, false, false);
+            return;
+        }
+
+        // outerHtmlHead execution for TextNode when normaliseWhite is true
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
-        if (normaliseWhite) {
+        Node prev = previousSibling(); // Calculate previous sibling once
+        Node next = nextSibling(); // Calculate next sibling once
+        boolean isBlank = isBlank(); // Check blankness once
+
+        // Calculate trim flags. Start with original logic:
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+        trimTrailing = trimLikeBlock && next == null; // Use cached 'next'
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        // FIX: Add specific condition: If this node is blank, and previous sibling was a block, trim the leading space
+        if (!trimLeading && isBlank && prev instanceof Element && ((Element) prev).tag().isBlock()) {
+            trimLeading = true;
+        }
 
-            Node prev = previousSibling();
+        // Check if this node should be skipped entirely
+        boolean couldSkip = false;
+        if (next instanceof Element) {
+            // If next element will indent, potentially skip this blank node
+            couldSkip = ((Element) next).shouldIndent(out);
+        } else if (next instanceof TextNode) {
+            // If next node is also blank text, potentially skip this one (e.g. after reparenting)
+            couldSkip = ((TextNode) next).isBlank();
+        }
+
+        // If this node is blank, and the check above determined it could be skipped, then return early.
+        if (couldSkip && isBlank) {
+            return;
+        }
+
+        // Indentation check for this TextNode itself
         if (
+            // If it's the first node in a block parent, and it's not blank.
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+            // If in outline mode, and there are siblings, and it's not blank.
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            // If the previous sibling was a <br> element.
+            (prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+        // Finally, escape and append the text content, applying normalization and calculated trim flags.
+        // Pass normaliseWhite=true because we are inside the normalization block.
+        Entities.escape(accum, coreValue(), out, false, true, trimLeading, trimTrailing);
     }
\ No newline at end of file
