diff --git a/tmp/2e191492-83cd-4750-b09c-fcfe00f1546b_buggy.java b/tmp/0463aae2-666a-4796-8981-feedd5c0ad4a_fixed.java
index 016a7f6..f43e95b 100644
--- a/tmp/2e191492-83cd-4750-b09c-fcfe00f1546b_buggy.java
+++ b/tmp/0463aae2-666a-4796-8981-feedd5c0ad4a_fixed.java
@@ -1,29 +1,75 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
+        // Get parent, assuming it's an Element for pretty print logic; null otherwise (e.g. Document)
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+        // Check if we should normalize whitespace (prettyPrint enabled and parent doesn't preserve whitespace)
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // preserveWhitespace checks parent nullity
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
-
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
+            // Check if this text node contains only whitespace
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            Node prev = previousSibling(); // Fetch prev sibling once
 
-            Node prev = previousSibling();
+            // Skipping logic for blank (whitespace-only) nodes:
+            if (isBlank) {
+                Node next = nextSibling(); // Fetch next sibling only if needed for skip check
+                boolean prevIsBlockOrBr = false;
+                if (prev instanceof Element) {
+                    Element prevElem = (Element) prev;
+                    // Check if previous element is a block, formats as block, or is a <br>
+                    prevIsBlockOrBr = prevElem.tag().isBlock() || prevElem.tag().formatAsBlock() || prevElem.normalName().equals("br");
+                }
+                boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+                boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());
+
+                // Skip this blank node if the previous node is block/<br>,
+                // or if the next node will automatically handle the indent/whitespace gap,
+                // or if the next node is also blank text (let the next node handle it).
+                if (prevIsBlockOrBr || nextWillIndent || nextIsBlankText) {
+                    return; // Don't output this blank text node.
+                }
+                // Otherwise, it's a blank node that needs to be preserved (e.g., between two inline elements).
+                // Fall through to Entities.escape below, which will normalize it to a single space.
+            }
+
+            // Indentation logic (applies only if the node was not skipped above):
+            // Indent primarily before non-blank text nodes based on context.
+            boolean indentBefore = false;
+            if (!isBlank) { // Only consider indenting if the node is NOT blank
+                if (parent != null) { // Need parent element context for indent rules
+                    // Indent if:
+                    // 1. First node in a block parent (prev == null implicitly checks siblingIndex == 0)
+                    // 2. In outline mode (and not the first node, checked by prev != null)
+                    // 3. Previous sibling was a <br> element
+                    // These conditions are simplified from original but functionally equivalent for non-blank nodes.
                     if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                        (prev == null && parent.tag().formatAsBlock()) ||
+                        (prev != null && out.outline()) ||
+                        (prev instanceof Element && ((Element) prev).normalName().equals("br"))
+                       ) {
+                        indentBefore = true;
+                    }
+                }
+            }
+
+            if (indentBefore) {
                 indent(accum, depth, out);
             }
 
+            // Output the text node's content using Entities.escape:
+            // Trim flags determine if leading/trailing space (post-normalization) should be removed.
+            final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+            // Trim leading space if first in a block-like parent OR parent is the Document root
+            boolean trimLeading = (trimLikeBlock && prev == null) || parentNode instanceof Document;
+            // Trim trailing space if last in a block-like parent
+            boolean trimTrailing = trimLikeBlock && nextSibling() == null; // Need to fetch nextSibling again for this check
+
+            // coreValue() gives the text content. normaliseWhite flag tells escape to collapse whitespace.
+            // false = inAttribute=false
             Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+
+        } else {
+            // Whitespace normalization is off; just escape the raw text value. No indent/trimming needed.
+            Entities.escape(accum, coreValue(), out, false, false, false, false);
+        }
     }
\ No newline at end of file
