diff --git a/tmp/00aa0fbe-5a2b-469f-a5da-8c36cf6f5b14_buggy.java b/tmp/2e534b09-4912-4ab8-ad9e-f6d12b85492b_fixed.java
index 016a7f6..5997691 100644
--- a/tmp/00aa0fbe-5a2b-469f-a5da-8c36cf6f5b14_buggy.java
+++ b/tmp/2e534b09-4912-4ab8-ad9e-f6d12b85492b_fixed.java
@@ -1,29 +1,44 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode); // True if pretty printing and parent doesn't preserve WS (e.g. not <pre>)
+        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock()); // True if parent is like a block element
         boolean trimLeading = false, trimTrailing = false;
 
-        if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+        if (normaliseWhite) { // Only adjust whitespace if pretty printing and not preserving
+            Node prev = previousSibling(); // Calculate prev sibling earlier
+            Node next = nextSibling(); // Calculate next sibling earlier
+
+            // Determine if leading whitespace should be trimmed
+            trimLeading =
+                // Conditions for trimming leading WS:
+                // 1. First node in a block-like parent, or first node in Document
+                ((trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document)
+                // 2. OR This node follows a block element (fixes issue #1379)
+                || (prev instanceof Element && ((Element) prev).tag().isBlock());
+
+            // Determine if trailing whitespace should be trimmed
+            trimTrailing = trimLikeBlock && next == null; // last node in block-like parent
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next Element will indent
+                || (next instanceof TextNode && (((TextNode) next).isBlank())); // OR next Node is blank text
+            if (couldSkip && isBlank) return; // Don't output this node
 
-            Node prev = previousSibling();
+            // Conditions for indenting this node:
             if (
+                // 1. First non-blank node in a formatAsBlock parent
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // 2. OR Outline mode is on, parent has >0 children, and this node is not blank
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                // 3. OR Previous sibling was a <br> element (and this node is not the first child) - special case wrap on inline <br>
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Now output the text, applying normalization and calculated trimming
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
