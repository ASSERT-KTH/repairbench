diff --git a/tmp/949428db-342c-4af8-b4ec-798fa49c10e5_buggy.java b/tmp/1c6601dd-b9d9-4644-b92a-621b08ef92f6_fixed.java
index 016a7f6..6df93c7 100644
--- a/tmp/949428db-342c-4af8-b4ec-798fa49c10e5_buggy.java
+++ b/tmp/1c6601dd-b9d9-4644-b92a-621b08ef92f6_fixed.java
@@ -1,29 +1,65 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // Flag for pretty-printing normalization, respects preserveWhitespace
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+
+        final boolean isBlank = isBlank();
+        final Node prev = previousSibling(); // Calculate once
+        final Node next = nextSibling(); // Calculate once
+
+        // Section 1: Determine if this node should be skipped entirely for pretty printing.
+        boolean skip = false;
+        if (normaliseWhite && isBlank) {
+            // Skip blank node if previous sibling is block
+            if (prev instanceof Element && ((Element) prev).tag().isBlock()) {
+                skip = true;
+            } else if (next instanceof Element) {
+                Element nextEl = (Element) next;
+                // Skip blank node if next sibling element will indent or is block
+                if (nextEl.shouldIndent(out) || nextEl.tag().isBlock()) {
+                    skip = true;
+                }
+            } else if (next instanceof TextNode && ((TextNode) next).isBlank()) {
+                // Skip blank node if next sibling is also blank text
+                skip = true;
+            }
+        }
+
+        if (skip) return; // Skip outputting this node
+
+        // Section 2: Determine if indentation is needed *before* this node.
+        boolean indentBefore = false;
+        if (prettyPrint && !isBlank) { // Indent only before non-blank text
+             // Check context for indentation requirement
+             if (
+                 // First node in a block-formatted parent?
+                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
+                 // Outline mode active and node has siblings?
+                 (out.outline() && siblingNodes().size() > 0) ||
+                 // Immediately after a <br> element?
+                 (prev instanceof Element && ((Element) prev).normalName().equals("br"))
+             ) {
+                 indentBefore = true;
+             }
+        }
+
+        // Section 3: Determine trimming needs for the content itself.
+        // These flags are used by Entities.escape during normalization.
         boolean trimLeading = false, trimTrailing = false;
-
-        if (normaliseWhite) {
+        if (normaliseWhite) { // Trimming is part of normalization
+            // Check if the parent is block-like
+            final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
+            // Trim leading space if first child in a block-like parent or the document root
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            // Trim trailing space if last child in a block-like parent
+            trimTrailing = trimLikeBlock && next == null; // Use hoisted 'next'
+        }
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
-
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        // Section 4: Perform indentation and output.
+        if (indentBefore) {
             indent(accum, depth, out);
         }
-
+        // Output the text content, applying escaping and normalization/trimming as needed.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
