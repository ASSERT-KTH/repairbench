diff --git a/tmp/c39e9a1a-0e1d-406d-9e07-247374eb5907_buggy.java b/tmp/c51ecc22-f6be-4404-8eb8-12aa05d01ab5_fixed.java
index 016a7f6..4bf2d93 100644
--- a/tmp/c39e9a1a-0e1d-406d-9e07-247374eb5907_buggy.java
+++ b/tmp/c51ecc22-f6be-4404-8eb8-12aa05d01ab5_fixed.java
@@ -1,29 +1,48 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // determines if we are normalizing whitespace (removing leading/trailing space, consolidating internal space)
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // used by Entities.escape() to determine if the start/end of the node needs trimming, if the node itself is boundary
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+        boolean trimLeading = false, trimTrailing = false; // flags for Entities.escape - not related to skipping the node
 
         if (normaliseWhite) {
+            // calculate explicit trim flags for Entities.escape - only applied if node is not skipped
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text node is blank, and adjacent to a block, or the next node will indent, then skip this node
             Node next = nextSibling();
+            Node prev = previousSibling(); // Calculate prev node
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+            // Check if the previous node is a block element
+            boolean prevIsBlock = (prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()));
+
+            // Check if the next node should indent, or is blank text
+            boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+            boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());
+
+            // *** FIX: Add prevIsBlock to the skip condition ***
+            // Skip if blank AND (prev is block OR next will indent OR next is blank text)
+            if (isBlank && (prevIsBlock || nextWillIndent || nextIsBlankText)) {
+                return; // skip this text node - formatting will be handled by adjacent element indentation
+            }
+
+            // Indentation logic (if node is not skipped)
             if (
+                // indent if (!blank and first in block parent)
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
+                // indent if (!blank and outlining)
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                // indent if (previous is <br>) - handles blank nodes correctly after <br>
+                (prev instanceof Element && ((Element) prev).normalName().equals("br"))
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
+        // If the node was not skipped, escape and print its content
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
