diff --git a/tmp/4157f7a9-d17f-4bb3-9fb1-b0bce5fd5581_buggy.java b/tmp/29728e9d-bb84-48d7-8464-95c6a7e54efc_fixed.java
index 016a7f6..f1639e7 100644
--- a/tmp/4157f7a9-d17f-4bb3-9fb1-b0bce5fd5581_buggy.java
+++ b/tmp/29728e9d-bb84-48d7-8464-95c6a7e54efc_fixed.java
@@ -1,29 +1,57 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // If the parent element doesn't preserve whitespace, normalization occurs
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+        // Check if the parent element is a block or acts like one for formatting
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
+            // Determine if leading/trailing whitespace should be trimmed based on context
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
+            // If this text node is just whitespace, and normalization is enabled, decide whether to skip it entirely.
+            // This prevents inserting unnecessary spaces between block elements or before elements that will indent.
             boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
-
+            if (isBlank) { // Only consider skipping if the node is blank (whitespace only)
+                Node next = nextSibling();
                 Node prev = previousSibling();
+
+                // Check if the next sibling will handle indentation or is also blank text.
+                boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+                boolean nextIsBlankText = (next instanceof TextNode && ((TextNode) next).isBlank());
+                if (nextWillIndent || nextIsBlankText) {
+                    return; // Skip this blank node; the next element handles spacing or is also skippable.
+                }
+
+                // Check if the previous sibling was a block-level element.
+                // We want to skip blank nodes following block elements during pretty printing,
+                // unless it's after an inline <br> tag (which has special indent handling).
+                // The check for Element.preserveWhitespace on the parent handles cases like <pre>.
+                boolean prevIsBlock = prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()) && !((Element) prev).normalName().equals("br");
+                if (prevIsBlock) {
+                   return; // Skip this blank node as it directly follows a block element.
+                }
+            }
+
+            // Indentation logic: only applies if the node is not blank and meets certain conditions.
+            if (!isBlank) {
+                Node prev = previousSibling(); // Fetch previous sibling again if needed for <br> check
+                 // Conditions for indenting this text node:
+                 // 1. It's the first node within a block parent.
+                 // 2. Outline mode is enabled and there are siblings.
+                 // 3. It follows an inline <br> tag.
                  if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
+                    (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock()) ||
+                    (out.outline() && siblingNodes().size() > 0) ||
+                    (prev instanceof Element && ((Element) prev).normalName().equals("br"))
                  )
                     indent(accum, depth, out);
             }
+        }
 
+        // Finally, escape and append the text content, applying normalization and trimming if needed.
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
