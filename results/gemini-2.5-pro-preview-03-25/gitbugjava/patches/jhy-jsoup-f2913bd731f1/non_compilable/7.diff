diff --git a/tmp/a776731f-9ada-439d-b60d-c8d3a2597396_buggy.java b/tmp/e9c27d98-99f8-4658-b479-089de4c427bb_fixed.java
index 016a7f6..025b9c2 100644
--- a/tmp/a776731f-9ada-439d-b60d-c8d3a2597396_buggy.java
+++ b/tmp/e9c27d98-99f8-4658-b479-089de4c427bb_fixed.java
@@ -1,29 +1,51 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
-        final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
-        boolean trimLeading = false, trimTrailing = false;
+        // parent shouldn't be null, but check just in case + avoids null check warnings
+        final boolean normaliseWhite = prettyPrint && parent != null && !Element.preserveWhitespace(parent);
+
+        boolean trimLeading = false;
+        boolean trimTrailing = false;
+        // Indentation is applied directly if needed, no need for a separate flag tracking
 
         if (normaliseWhite) {
-            trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
-            trimTrailing = trimLikeBlock && nextSibling() == null;
+            final Node prev = previousSibling();
+            final Node next = nextSibling();
+            final boolean isBlank = isBlank();
+            final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
-            Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+            // 1. Check if blank node should be skipped entirely. Skip if the node is blank, and the next node will handle spacing (or is another blank node).
+            boolean nextWillIndent = (next instanceof Element && ((Element) next).shouldIndent(out));
+            boolean nextIsBlank = (next instanceof TextNode && ((TextNode) next).isBlank()); // From re-parenting or similar
+            if (isBlank && (nextWillIndent || nextIsBlank)) {
+                return; // Skip this node entirely, the sibling will handle the whitespace insertion/indentation.
+            }
 
-            Node prev = previousSibling();
+            // 2. Calculate trimming flags based on context for potentially trimming partial whitespace or the whole node if blank.
+            trimLeading = (trimLikeBlock && siblingIndex == 0) // Is first child of a block-like parent
+                          || parentNode instanceof Document // Is first child of document
+                          || (prev instanceof Element && ((Element) prev).tag().isBlock()); // Follows a block element
+
+            trimTrailing = (trimLikeBlock && next == null) // Is last child of a block-like parent
+                           || (next instanceof Element && ((Element) next).tag().isBlock()); // Precedes a block element
+
+            // 3. Check if indentation needed for non-blank nodes (TextNode itself only handles specific indent cases).
+            if (!isBlank) {
+                 // indent if:
+                 // - in outline mode and siblings exist
+                 // - follows an inline <br> (which doesn't make sense as a block tag)
                  if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
-                indent(accum, depth, out);
+                     (out.outline() && siblingNodes().size() > 0) ||
+                     (prev instanceof Element && ((Element) prev).tag().normalName().equals("br"))
+                 ) {
+                     indent(accum, depth, out); // Apply indent directly
                  }
+            }
+        }
+        // else: normaliseWhite is false, flags remain false, no special logic applies.
 
+        // 4. Call escape with the core value and calculated flags.
+        // Entities.escape() handles the actual whitespace normalization (collapsing to single space)
+        // and trimming based on the flags (removes the space if flags indicate trimming is needed).
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
