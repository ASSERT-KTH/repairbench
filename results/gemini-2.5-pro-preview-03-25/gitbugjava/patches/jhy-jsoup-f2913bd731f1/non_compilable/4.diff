diff --git a/tmp/99eed4af-8326-4c8f-a0ee-5eb359f96ef7_buggy.java b/tmp/4c96c34d-f4d6-47f3-9105-e7beaf84e522_fixed.java
index 016a7f6..62387cb 100644
--- a/tmp/99eed4af-8326-4c8f-a0ee-5eb359f96ef7_buggy.java
+++ b/tmp/4c96c34d-f4d6-47f3-9105-e7beaf84e522_fixed.java
@@ -1,29 +1,37 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // Don't normalize if preserveWhitespace is enabled = Don't trim if preserveWhitespace is enabled.
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // if this text is just whitespace, and the previous node is block-like, skip this text:
+            Node prev = previousSibling();
+            boolean isBlank = isBlank(); // calculate isBlank once
+            if (isBlank && prev instanceof Element && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock())) {
+                return; // skip whitespace following a block
+            }
+
+            // if this text is just whitespace, and the next node will cause an indent, skip this text: (original logic)
             Node next = nextSibling();
-            boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
             if (couldSkip && isBlank) return;
 
-            Node prev = previousSibling();
+
+            // original indent logic
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // first node in format-as-block container, if not blank
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // outline mode, if not blank
                 (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
             )
                 indent(accum, depth, out);
         }
 
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
