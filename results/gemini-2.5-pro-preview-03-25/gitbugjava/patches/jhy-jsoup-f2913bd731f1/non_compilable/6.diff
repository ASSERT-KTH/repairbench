diff --git a/tmp/4c554e38-9301-4f33-9aae-f65bc164343f_buggy.java b/tmp/572ad54f-dfff-4754-a7f2-0ababded44e0_fixed.java
index 016a7f6..4364e24 100644
--- a/tmp/4c554e38-9301-4f33-9aae-f65bc164343f_buggy.java
+++ b/tmp/572ad54f-dfff-4754-a7f2-0ababded44e0_fixed.java
@@ -1,29 +1,47 @@
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+        // normaliseWhite: parent null check is implicit as Element.preserveWhitespace handles null parentNode
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
+            // Calculate trim settings used by Entities.escape when normaliseWhite is true
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+            // Skip check:
+            final boolean isBlank = isBlank();
+            if (isBlank) {
+                // If this text is just whitespace, are we intending to skip it?
                 Node next = nextSibling();
-            boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
-
                 Node prev = previousSibling();
+
+                boolean skip =
+                    // 1. Skip if the next node wants to indent (it will handle the leading space)
+                    (next instanceof Element && ((Element) next).shouldIndent(out))
+                    // 2. Skip if the next node is also blank (collapse adjacent blank text nodes)
+                    || (next instanceof TextNode && ((TextNode) next).isBlank())
+                    // 3. Skip if the previous node was a block/formatAsBlock (avoids spurious space after block, like <p> <span> vs <p><span>)
+                    || (prev instanceof Element && (((Element) prev).isBlock() || ((Element) prev).tag().formatAsBlock()));
+
+                if (skip) return; // Don't print this blank node
+            }
+
+            // Indent check (for the TextNode itself):
+            // If we are printing this node (e.g., it's not blank, or it's meaningful blank space like after a <br>),
+            // should we indent before writing the text?
+            Node prev = previousSibling(); // Re-fetch prev sibling for indent check robustness (might be null)
             if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) || // indent the first non-blank text node in a block parent
+                (out.outline() && siblingNodes().size() > 0 && !isBlank) || // indent non-blank nodes in outline mode
+                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // indent after an inline <br>
+            ) {
                 indent(accum, depth, out);
             }
+        }
 
+        // Print the text, applying normalization and calculated trimming
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
