diff --git a/tmp/63b36897-46e9-4ab6-8d90-49cecea83c97_buggy.java b/tmp/c62b73d4-885f-4d80-acc7-cb31ce2262a4_fixed.java
index 730ab7d..6c1acb4 100644
--- a/tmp/63b36897-46e9-4ab6-8d90-49cecea83c97_buggy.java
+++ b/tmp/c62b73d4-885f-4d80-acc7-cb31ce2262a4_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        int expectedLength = (hasUncompressedSize ? ZipEightByteInteger.BYTES : 0)
+            + (hasCompressedSize ? ZipEightByteInteger.BYTES : 0)
+            + (hasRelativeHeaderOffset ? ZipEightByteInteger.BYTES : 0)
+            + (hasDiskStart ? ZipShort.BYTES : 0);
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                                   + " data.  Expected length at least "
+                                   + expectedLength + " but is only "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += ZipEightByteInteger.BYTES;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
-                offset += DWORD;
+            offset += ZipEightByteInteger.BYTES;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += ZipEightByteInteger.BYTES;
         }
         if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            diskStart = new ZipShort(rawCentralDirectoryData, offset);
+            offset += ZipShort.BYTES;
         }
     }
 }
\ No newline at end of file
