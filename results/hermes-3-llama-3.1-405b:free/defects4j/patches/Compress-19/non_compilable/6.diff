diff --git a/tmp/d38045d2-6336-4afc-a9f0-5fb6e2992521_buggy.java b/tmp/b166ee26-5ad2-424f-b31c-fad28cca3377_fixed.java
index 730ab7d..b3fd6c1 100644
--- a/tmp/d38045d2-6336-4afc-a9f0-5fb6e2992521_buggy.java
+++ b/tmp/b166ee26-5ad2-424f-b31c-fad28cca3377_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Parses the raw bytes read from the central directory extra
-     * field with knowledge which fields are expected to be there.
-     *
-     * <p>All four fields inside the zip64 extended information extra
-     * field are optional and must only be present if their corresponding
-     * entry inside the central directory contains the correct magic
-     * value.</p>
-     */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            int expectedLength = (hasUncompressedSize ? ZipEightByteInteger.BYTES : 0)
+                + (hasCompressedSize ? ZipEightByteInteger.BYTES : 0)
+                + (hasRelativeHeaderOffset ? ZipEightByteInteger.BYTES : 0)
+                + (hasDiskStart ? ZipShort.BYTES : 0);
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
                                        + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " data.  Expected length at least "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTES;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTES;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+                offset += ZipEightByteInteger.BYTES;
             }
             if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+                diskStart = new ZipShort(rawCentralDirectoryData, offset);
+                offset += ZipShort.BYTES;
             }
         }
     }
\ No newline at end of file
