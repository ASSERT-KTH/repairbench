diff --git a/tmp/ba16073a-43fd-4a3a-9a84-a6b6a59116da_buggy.java b/tmp/8ca2c936-c58a-438e-9fa8-e5fabed38f26_fixed.java
index 47a8941..b46b3ac 100644
--- a/tmp/ba16073a-43fd-4a3a-9a84-a6b6a59116da_buggy.java
+++ b/tmp/8ca2c936-c58a-438e-9fa8-e5fabed38f26_fixed.java
@@ -1,53 +1,49 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
+
     // Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
+    Map<String, JDefinedClass> classes = grandParent.isClass()
+            ? getPrivateField(grandParent, "classes")
+            : getPrivateField(grandParent, "classes");
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
-
-			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
-
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        clazz.mods().setValue(clazz.mods().getValue() & ~JMod.STATIC);
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                // The class is being moved; it is no longer a local declaration.
+                if (sc instanceof XSDeclaration) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
+                }
 
                 break;
             }
         }
     }
 
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        clazz.setName(parent.name() + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+    // Finally modify the class so that it refers back the correct container:
+    clazz.setOuterClass((JDefinedClass) grandParent);
 }
\ No newline at end of file
