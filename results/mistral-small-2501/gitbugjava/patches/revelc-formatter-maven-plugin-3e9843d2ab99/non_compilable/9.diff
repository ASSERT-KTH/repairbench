diff --git a/tmp/3d8e36e0-6ef3-478d-9345-8d49e2d4d6d6_buggy.java b/tmp/75f1ba40-8273-450b-b65b-0c4f4eb884fa_fixed.java
index 1098336..f60cdb1 100644
--- a/tmp/3d8e36e0-6ef3-478d-9345-8d49e2d4d6d6_buggy.java
+++ b/tmp/75f1ba40-8273-450b-b65b-0c4f4eb884fa_fixed.java
@@ -1,16 +1,31 @@
 @Override
 protected String doFormat(final String code, final LineEnding ending) throws IOException {
 
-        final var source = new InputSource(new StringReader(code));
+    // Ensure that the input code uses the correct line endings
+    String normalizedCode = code;
+    if (ending == LineEnding.CRLF && !code.contains("\r\n")) {
+        normalizedCode = code.replace("\n", "\r\n");
+    } else if (ending == LineEnding.LF && !code.contains("\n") && code.contains("\r\n")) {
+        normalizedCode = code.replace("\r\n", "\n");
+    }
+
+    final var source = new InputSource(new StringReader(normalizedCode));
     final var parser = new CSSOMParser(new SACParserCSS3());
     final var sheet = (CSSStyleSheetImpl) parser.parseStyleSheet(source, null, null);
     var formattedCode = sheet.getCssText(this.formatter);
 
     // Patch converted 'tab' back to '\9' for IE 7,8, and 9 hack. Cssparser switches it to 'tab'.
     formattedCode = formattedCode.replace("\t;", "\\9;");
 
-        if (code.equals(formattedCode)) {
+    // Normalize the formatted code to match the expected line ending format
+    if (ending == LineEnding.CRLF) {
+        formattedCode = formattedCode.replace("\n", "\r\n");
+    } else if (ending == LineEnding.LF) {
+        formattedCode = formattedCode.replace("\r\n", "\n");
+    }
+
+    if (normalizedCode.equals(formattedCode)) {
         return null;
     }
     return formattedCode;
 }
\ No newline at end of file
