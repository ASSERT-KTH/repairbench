diff --git a/tmp/407b3aa3-48c4-4470-82e0-a5c1a7a93316_buggy.java b/tmp/feb13fee-3ff4-49ca-9750-7c82f897be44_fixed.java
index 27f2719..0b0969b 100644
--- a/tmp/407b3aa3-48c4-4470-82e0-a5c1a7a93316_buggy.java
+++ b/tmp/feb13fee-3ff4-49ca-9750-7c82f897be44_fixed.java
@@ -1,90 +1,90 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
-            if (index < 0) {
+        if (index == -1) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
-        if (type.equals("3")) {
-
+    switch (type) {
+        case "3":
             getLastLocation(position, null);
-
             position.set(Position.KEY_RESULT, sentence.substring(3));
-
             return position;
 
-        } else if (type.equals("5")) {
-
+        case "5":
             String[] values = sentence.split(",");
-
+            if (values.length > 1) {
                 getLastLocation(position, null);
-
                 position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
                 if (values.length >= 4) {
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
                 }
-
                 return position;
+            }
+            break;
 
-        } else if (type.equals("B") || type.equals("D")) {
-
+        case "B":
+        case "D":
             Parser parser = new Parser(PATTERN_BD, sentence);
             if (!parser.matches()) {
                 return null;
             }
 
             decodeFix(position, parser);
             decodeState(position, parser);
 
-            position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
-            position.set(Position.KEY_HDOP, parser.nextDouble(0));
+            int satellites = parser.nextInt(0);
+            int satellitesVisible = parser.nextInt(0);
+            double hdop = parser.nextDouble(0);
 
-            return position;
+            position.set(Position.KEY_SATELLITES, satellites);
+            position.set(Position.KEY_SATELLITES_VISIBLE, satellitesVisible);
+            position.set(Position.KEY_HDOP, hdop);
 
-        } else if (type.equals("C")) {
+            return position;
 
-            Parser parser = new Parser(PATTERN_C, sentence);
-            if (!parser.matches()) {
+        case "C":
+            Parser parserC = new Parser(PATTERN_C, sentence);
+            if (!parserC.matches()) {
                 return null;
             }
 
-            decodeFix(position, parser);
-            decodeState(position, parser);
+            decodeFix(position, parserC);
+            decodeState(position, parserC);
 
             return position;
 
-        } else if (type.equals("A")) {
-
-            Parser parser = new Parser(PATTERN_A, sentence);
-            if (!parser.matches()) {
+        case "A":
+            Parser parserA = new Parser(PATTERN_A, sentence);
+            if (!parserA.matches()) {
                 return null;
             }
 
-            decodeFix(position, parser);
-
+            decodeFix(position, parserA);
             return position;
 
+        default:
+            return null;
     }
 
     return null;
 }
\ No newline at end of file
