diff --git a/tmp/bcff8738-fad6-430f-867b-308c9d94a71f_buggy.java b/tmp/c901bb59-982c-4dd8-87c5-73df2dda9476_fixed.java
index acd5eb5..215db97 100644
--- a/tmp/bcff8738-fad6-430f-867b-308c9d94a71f_buggy.java
+++ b/tmp/c901bb59-982c-4dd8-87c5-73df2dda9476_fixed.java
@@ -1,32 +1,41 @@
     @Override
     void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
         final boolean prettyPrint = out.prettyPrint();
         final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
         final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
         final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
         boolean trimLeading = false, trimTrailing = false;
 
         if (normaliseWhite) {
             trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
             trimTrailing = trimLikeBlock && nextSibling() == null;
 
             // if this text is just whitespace, and the next node will cause an indent, skip this text:
             Node next = nextSibling();
             Node prev = previousSibling();
             boolean isBlank = isBlank();
             boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                 || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
-                || (prev instanceof Element && ((Element) prev).isBlock())
+                || (prev instanceof Element && ((Element) prev).isBlock()]
                 ;
             if (couldSkip && isBlank) return;
 
             if (
                 (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
                 (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
                 (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            ) {
                 indent(accum, depth, out);
             }
 
+            if (this instanceof TextNode) {
+                TextNode textNode = (TextNode) this;
+                if (textNode.normalizedWhitespace(out).isEmpty()) {
+                    // Handle the case where the text node is just whitespace, and make sure it is ignored in prettyprint.
+                    return;
+                }
+            }
+        }
+
         Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
     }
\ No newline at end of file
