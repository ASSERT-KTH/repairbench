diff --git a/tmp/ccd2e9d6-9c85-4265-b304-878c06a1cedd_buggy.java b/tmp/9f8b817d-235b-4b2d-9753-ed95e178b48e_fixed.java
index 862c60c..01e4404 100644
--- a/tmp/ccd2e9d6-9c85-4265-b304-878c06a1cedd_buggy.java
+++ b/tmp/9f8b817d-235b-4b2d-9753-ed95e178b48e_fixed.java
@@ -1,25 +1,33 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
+    final Element parent = parentNode instanceof Element ? (Element) parentNode : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
                       parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
                       || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank()) return;
+        if (couldSkip && isBlank()) {
+            return;
+        }
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        if (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) {
             indent(accum, depth, out);
+        } else if (!out.outline() && siblingIndex > 0 && siblingNodes().size() > siblingIndex - 1
+                   && siblingNodes().get(siblingNodes().size() - 1).nodeName().equals("br")) {
+            // Handle the case where the next sibling is a <br> element
+            trimLeading = false;
+            trimTrailing = true;
+            accum.append("\n");
+        }
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
