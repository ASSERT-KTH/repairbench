diff --git a/tmp/9bf71937-58b8-45f7-bd5b-588e35a52713_buggy.java b/tmp/3a941ff9-d318-4595-804e-bc2517753661_fixed.java
index 477325f..451fa90 100644
--- a/tmp/9bf71937-58b8-45f7-bd5b-588e35a52713_buggy.java
+++ b/tmp/3a941ff9-d318-4595-804e-bc2517753661_fixed.java
@@ -1,178 +1,128 @@
 private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
     int globalMask = 0x0f;
 
     if (codec == CODEC_GH3000) {
 
         long time = buf.readUnsignedInt() & 0x3fffffff;
         time += 1167609600; // 2007-01-01 00:00:00
 
         globalMask = buf.readUnsignedByte();
         if (BitUtil.check(globalMask, 0)) {
-
             position.setTime(new Date(time * 1000));
 
             int locationMask = buf.readUnsignedByte();
+            decodeGh3000Location(position, buf, locationMask);
+        } else {
+            getLastLocation(position, new Date(time * 1000));
+        }
 
+    } else {
+        decodeNonGh3000Location(position, buf);
+    }
+
+    processExtendedDataRecords(position, buf, codec, globalMask, model);
+}
+
+private void decodeGh3000Location(Position position, ByteBuf buf, int locationMask) {
     if (BitUtil.check(locationMask, 0)) {
         position.setLatitude(buf.readFloat());
         position.setLongitude(buf.readFloat());
     }
 
     if (BitUtil.check(locationMask, 1)) {
         position.setAltitude(buf.readUnsignedShort());
     }
 
     if (BitUtil.check(locationMask, 2)) {
         position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
     }
 
     if (BitUtil.check(locationMask, 3)) {
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
     }
 
     if (BitUtil.check(locationMask, 4)) {
         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     }
 
     if (BitUtil.check(locationMask, 5)) {
-                    CellTower cellTower = CellTower.fromLacCid(
-                            getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
-
-                    if (BitUtil.check(locationMask, 6)) {
-                        cellTower.setSignalStrength((int) buf.readUnsignedByte());
-                    }
-
-                    if (BitUtil.check(locationMask, 7)) {
-                        cellTower.setOperator(buf.readUnsignedInt());
-                    }
-
-                    position.setNetwork(new Network(cellTower));
-
-                } else {
-                    if (BitUtil.check(locationMask, 6)) {
+        decodeCellTower(position, buf);
+    } else if (BitUtil.check(locationMask, 6)) {
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    }
-                    if (BitUtil.check(locationMask, 7)) {
+    } else if (BitUtil.check(locationMask, 7)) {
         position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
     }
 }
 
-            } else {
-
-                getLastLocation(position, new Date(time * 1000));
-
-            }
-
-        } else {
-
+private void decodeNonGh3000Location(Position position, ByteBuf buf) {
     position.setTime(new Date(buf.readLong()));
 
     position.set("priority", buf.readUnsignedByte());
 
     position.setLongitude(buf.readInt() / 10000000.0);
     position.setLatitude(buf.readInt() / 10000000.0);
+
     position.setAltitude(buf.readShort());
     position.setCourse(buf.readUnsignedShort());
 
     int satellites = buf.readUnsignedByte();
     position.set(Position.KEY_SATELLITES, satellites);
 
     position.setValid(satellites != 0);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
 
+    int codec = buf.readUnsignedByte();
+
     position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
-            if (codec == CODEC_16) {
     buf.readUnsignedByte(); // generation type
+
+    readExtByte(buf, codec, CODEC_8_EXT);
+}
+
+private void decodeCellTower(Position position, ByteBuf buf) {
+    CellTower cellTower = CellTower.fromLacCid(getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
+    if (BitUtil.check(globalMask, 6)) {
+        cellTower.setSignalStrength((int) buf.readUnsignedByte());
     }
 
-            readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
+    if (BitUtil.check(globalMask, 7)) {
+        cellTower.setOperator(buf.readUnsignedInt());
+    }
 
+    position.setNetwork(new Network(cellTower));
 }
 
-        // Read 1 byte data
+private void processExtendedDataRecords(Position position, ByteBuf buf, int codec, int globalMask, String model) {
     if (BitUtil.check(globalMask, 1)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
-            }
+        processExtendedData(1, buf, codec, "1 byte data", model, position);
     }
 
-        // Read 2 byte data
     if (BitUtil.check(globalMask, 2)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
-            }
+        processExtendedData(2, buf, codec, "2 byte data", model, position);
     }
 
-        // Read 4 byte data
     if (BitUtil.check(globalMask, 3)) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
-            }
+        processExtendedData(4, buf, codec, "4 byte data", model, position);
     }
 
-        // Read 8 byte data
     if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
-            int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
-            }
+        processExtendedData(8, buf, codec, "8 byte data", model, position);
     }
 
-        // Read 16 byte data
     if (extended) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
-            for (int j = 0; j < cnt; j++) {
-                int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
-                position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
-            }
+        processExtendedData(cnt, buf, codec, "16 byte data", model, position);
     }
 
-        // Read X byte data
     if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
-            for (int j = 0; j < cnt; j++) {
-                int id = buf.readUnsignedShort();
-                int length = buf.readUnsignedShort();
-                if (id == 256) {
-                    position.set(Position.KEY_VIN,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII));
-                } else if (id == 281) {
-                    position.set(Position.KEY_DTCS,
-                            buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
-                } else if (id == 385) {
-                    ByteBuf data = buf.readSlice(length);
-                    data.readUnsignedByte(); // data part
-                    int index = 1;
-                    while (data.isReadable()) {
-                        int flags = data.readUnsignedByte();
-                        if (BitUtil.from(flags, 4) > 0) {
-                            position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
-                            position.set("beacon" + index + "Major", data.readUnsignedShort());
-                            position.set("beacon" + index + "Minor", data.readUnsignedShort());
-                        } else {
-                            position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
-                            position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
+        processExtendedData(buf.readUnsignedShort(), buf, codec, "X byte data", model, position);
     }
-                        position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
-                            position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
 }
-                        if (BitUtil.check(flags, 2)) {
-                            position.set("beacon" + index + "Temp", data.readUnsignedShort());
-                        }
-                        index += 1;
-                    }
-                } else {
-                    position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
-                }
-            }
-        }
-
-        decodeNetwork(position, model);
 
+private void processExtendedData(int count, ByteBuf buf, int codec, String description, String model, Position position) {
+    for (int i = 0; i < count; i++) {
+        decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
+    }
 }
\ No newline at end of file
