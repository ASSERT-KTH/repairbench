diff --git a/tmp/1dc76065-d780-47e9-9853-2386bd062e4d_buggy.java b/tmp/40a57c06-d17d-4497-a73b-3563780137de_fixed.java
index c6164f1..2e58ee7 100644
--- a/tmp/1dc76065-d780-47e9-9853-2386bd062e4d_buggy.java
+++ b/tmp/40a57c06-d17d-4497-a73b-3563780137de_fixed.java
@@ -1,116 +1,229 @@
-    private Position decodePosition(
-            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
+private Position decodePosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read status
+    }
+
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read event
+    }
+
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
+    if (buf.readableBytes() < 12) {
+        return null; // Not enough data to read timestamp
+    }
+
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
     DateBuilder dateBuilder = new DateBuilder()
             .setYear(Integer.parseInt(time.substring(0, 2)))
             .setMonth(Integer.parseInt(time.substring(2, 4)))
             .setDay(Integer.parseInt(time.substring(4, 6)))
             .setHour(Integer.parseInt(time.substring(6, 8)))
             .setMinute(Integer.parseInt(time.substring(8, 10)))
             .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
+    if (buf.readableBytes() < 4) {
+        return null; // Not enough data to read geographic coordinates
+    }
+
     position.setLongitude(buf.readInt() * 0.00001);
+    if (buf.readableBytes() < 4) {
+        return null; // Not enough data to read geographic coordinates
+    }
+
     position.setLatitude(buf.readInt() * 0.00001);
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read speed
+    }
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read course
+    }
+
     position.setCourse(buf.readUnsignedShort());
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read altitude
+    }
+
     position.setAltitude(buf.readUnsignedShort());
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough data to read odometer
+    }
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
+        if (buf.readableBytes() < 2) {
+            return null; // Not enough data to read subtype
+        }
         int subtype = buf.readUnsignedShort();
+        if (buf.readableBytes() < 2) {
+            return null; // Not enough data to read length
+        }
         int length = buf.readUnsignedShort() - 4;
+
+        if (buf.readableBytes() < length) {
+            return null; // Not enough data to process the current subtype
+        }
+
         switch (subtype) {
             case 0x0001:
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read coolant temperature
+                }
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to read rpm
+                }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read average speed
+                }
                 position.set("averageSpeed", buf.readUnsignedByte());
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to interval fuel consumption
+                }
                 buf.readUnsignedShort(); // interval fuel consumption
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to read fuel consumption
+                }
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to read odometer trip
+                }
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to read power
+                }
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read fuel level
+                }
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
+                if (buf.readableBytes() < 4) {
+                    return null; // Not enough data to trip id
+                }
                 buf.readUnsignedInt(); // trip id
                 break;
             case 0x0005:
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read RSSI
+                }
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read HDOP
+                }
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
+                if (buf.readableBytes() < 4) {
+                    return null; // Not enough data to read run time
+                }
                 buf.readUnsignedInt(); // run time
                 break;
             case 0x0009:
-                    position.set(
-                            Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                if (buf.readableBytes() < length) {
+                    return null; // Not enough data to read VIN
+                }
+                position.set(Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
             case 0x0011:
+                if (buf.readableBytes() < 4) {
+                    return null; // Not enough data to read hours
+                }
                 position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                 break;
             case 0x0014:
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read engine load
+                }
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read timing advance
+                }
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read air temp
+                }
                 position.set("airTemp", buf.readUnsignedByte() - 40);
+                if (buf.readableBytes() < 2) {
+                    return null; // Not enough data to read air flow
+                }
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
+                if (buf.readableBytes() < 1) {
+                    return null; // Not enough data to read throttle
+                }
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
-                    String[] cells = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                if (buf.readableBytes() < length) {
+                    return null; // Not enough data to read cell towers
+                }
+                String[] cells = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
+                    if (values.length < 4) {
+                        continue; // invalid cell tower data
+                    }
                     network.addCellTower(CellTower.from(
                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                 }
                 break;
             case 0x0021:
-                    String[] points = buf.readCharSequence(
-                            length, StandardCharsets.US_ASCII).toString().split("\\+");
+                if (buf.readableBytes() < length) {
+                    return null; // Not enough data to read WiFi access points
+                }
+                String[] points = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
+                    if (values.length < 2) {
+                        continue; // invalid WiFi access point data
+                    }
                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                 }
                 break;
             default:
+                if (buf.readableBytes() < length) {
+                    return null;
+                }
                 buf.skipBytes(length);
                 break;
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
