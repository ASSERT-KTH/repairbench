diff --git a/tmp/8c788d5d-8f62-46a6-ae18-39d1008fe88f_buggy.java b/tmp/a192b5d5-8e27-4d45-896a-0d3cd671fa56_fixed.java
index 30eba92..2673512 100644
--- a/tmp/8c788d5d-8f62-46a6-ae18-39d1008fe88f_buggy.java
+++ b/tmp/a192b5d5-8e27-4d45-896a-0d3cd671fa56_fixed.java
@@ -1,113 +1,130 @@
-    private Object decodePosition(
-            Channel channel, SocketAddress remoteAddress, String sentence, String id) {
+private Object decodePosition(Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
         String[] data = pair.split("[=:]");
+        if (data.length < 2) {
+            continue; // Skip invalid pairs
+        }
         int key;
         try {
             key = Integer.parseInt(data[0], 16);
         } catch (NumberFormatException e) {
             continue;
         }
         String value = data[1];
+
         if (key == 0x0) {
             if (position != null) {
                 position.setTime(dateBuilder.getDate());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position != null) {
             switch (key) {
                 case 0x11:
-                        value = ("000000" + value).substring(value.length());
-                        dateBuilder.setDateReverse(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4)));
+                    String year = value.length() >= 2 ? value.substring(0, 2) : "00";
+                    String month = value.length() >= 4 ? value.substring(2, 4) : "00";
+                    String day = value.length() >= 6 ? value.substring(4) : "00";
+                    dateBuilder.setDateReverse(Integer.parseInt(day), Integer.parseInt(month), Integer.parseInt(year));
                     break;
                 case 0x10:
-                        value = ("00000000" + value).substring(value.length());
-                        dateBuilder.setTime(
-                                Integer.parseInt(value.substring(0, 2)),
-                                Integer.parseInt(value.substring(2, 4)),
-                                Integer.parseInt(value.substring(4, 6)),
-                                Integer.parseInt(value.substring(6)) * 10);
+                    String hours = value.length() >= 2 ? value.substring(0, 2) : "00";
+                    String minutes = value.length() >= 4 ? value.substring(2, 4) : "00";
+                    String seconds = value.length() >= 6 ? value.substring(4, 6) : "00";
+                    String milliseconds = value.length() >= 8 ? value.substring(6) : "00";
+                    dateBuilder.setTime(Integer.parseInt(hours), Integer.parseInt(minutes), Integer.parseInt(seconds), Integer.parseInt(milliseconds) * 10);
                     break;
                 case 0xA:
                     position.setValid(true);
-                        position.setLatitude(Double.parseDouble(value));
+                    position.setLatitude(parseDouble(value));
                     break;
                 case 0xB:
                     position.setValid(true);
-                        position.setLongitude(Double.parseDouble(value));
+                    position.setLongitude(parseDouble(value));
                     break;
                 case 0xC:
-                        position.setAltitude(Double.parseDouble(value));
+                    position.setAltitude(parseDouble(value));
                     break;
                 case 0xD:
-                        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    position.setSpeed(UnitsConverter.knotsFromKph(parseDouble(value)));
                     break;
                 case 0xE:
-                        position.setCourse(Integer.parseInt(value));
+                    position.setCourse(parseInteger(value));
                     break;
                 case 0xF:
-                        position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    position.set(Position.KEY_SATELLITES, parseInteger(value));
                     break;
                 case 0x12:
-                        position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    position.set(Position.KEY_HDOP, parseInteger(value));
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
-                        position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    position.set(Position.KEY_BATTERY, parseInteger(value) * 0.01);
                     break;
                 case 0x81:
-                        position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    position.set(Position.KEY_RSSI, parseInteger(value));
                     break;
                 case 0x82:
-                        position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    position.set(Position.KEY_DEVICE_TEMP, parseInteger(value) * 0.1);
                     break;
                 case 0x104:
-                        position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    position.set(Position.KEY_ENGINE_LOAD, parseInteger(value));
                     break;
                 case 0x105:
-                        position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    position.set(Position.KEY_COOLANT_TEMP, parseInteger(value));
                     break;
                 case 0x10c:
-                        position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    position.set(Position.KEY_RPM, parseInteger(value));
                     break;
                 case 0x10d:
-                        position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(parseInteger(value)));
                     break;
                 case 0x111:
-                        position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    position.set(Position.KEY_THROTTLE, parseInteger(value));
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
         }
     }
 
     if (position != null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
         position.setTime(dateBuilder.getDate());
         positions.add(position);
     }
 
     return positions.isEmpty() ? null : positions;
 }
+
+private double parseDouble(String value) {
+    try {
+        return Double.parseDouble(value);
+    } catch (NumberFormatException e) {
+        return 0.0;
+    }
+}
+
+private int parseInteger(String value) {
+    try {
+        return Integer.parseInt(value);
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+}
\ No newline at end of file
