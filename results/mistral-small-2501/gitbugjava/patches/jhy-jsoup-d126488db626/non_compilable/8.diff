diff --git a/tmp/585d2a8d-c03d-485c-b972-6ab844c84b7b_buggy.java b/tmp/8f951f7c-d491-44ed-b5ed-e3024d573418_fixed.java
index 5bf31b1..ce1d5e7 100644
--- a/tmp/585d2a8d-c03d-485c-b972-6ab844c84b7b_buggy.java
+++ b/tmp/8f951f7c-d491-44ed-b5ed-e3024d573418_fixed.java
@@ -1,17 +1,36 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
-        while (!tq.isEmpty()) {
+        boolean hasConsumed = false;
+
+        while (!tq.isEmpty() && sq.length() < MAX_QUERY_LENGTH) {
             if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
+                sq.append(tq.chompBalanced('(', ')'));
             else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+                sq.append(tq.chompBalanced('[', ']'));
+            else if (tq.matchesAny(Combinators)) {
+                if (sq.length() > 0) {
+                    hasConsumed = true;
                     break;
-                else
+                } else {
                     tq.consume();
-            else
+                }
+                tq.consume();
+            } else {
+                sq.append(tq.consume());
+            }
+        }
+        if (!hasConsumed && sq.length() > 0) {
+            tq.untokenize('\0');
             sq.append(tq.consume());
         }
         return StringUtil.releaseBuilder(sq);
     }
+
+private static final int MAX_QUERY_LENGTH = 10000;  // Assuming a reasonable maximum length for queries
+
+private String untokenize(char c) {
+    // Custom method to handle untokenize behavior against invalid input (Example)
+    // This must match the implementation of your tokenizer logic.
+    // Here, we're assuming it sets tq to a valid, recoverable state, unknown implementation detail.
+    return tq.untotkenize()
+}
\ No newline at end of file
