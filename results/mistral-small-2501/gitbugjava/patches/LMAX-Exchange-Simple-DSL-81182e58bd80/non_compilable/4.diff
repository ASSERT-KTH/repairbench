diff --git a/tmp/9c114b4c-f6f6-4c76-b880-71610636bb95_buggy.java b/tmp/83e08ddb-9028-4ac7-b2de-121d03247cd1_fixed.java
index f506479..e1c3bc9 100644
--- a/tmp/9c114b4c-f6f6-4c76-b880-71610636bb95_buggy.java
+++ b/tmp/83e08ddb-9028-4ac7-b2de-121d03247cd1_fixed.java
@@ -1,64 +1,114 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+
+        final boolean isNewGroup = !argValues.isEmpty();
+        if (isNewGroup && !arg.isAllowMultipleValues())
         {
             break;
         }
 
-                checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+        String[] values = argument.value.split(",");
+        for (String val : values)
+        {
+            checkValidValue(arg, val.trim());
+            argValues.add(val.trim());
+        }
+
         arguments.pollFirst();
+
+        if (isNewGroup)
+        {
+            while (!arguments.isEmpty())
+            {
+                final NameValuePair nextArgument = arguments.peekFirst();
+                if (nextArgument == NameValuePair.NULL)
+                {
+                    arguments.pollFirst();
+                    continue;
+                }
+
+                final String nextName = nextArgument.name;
+                if (nextName != null && argsByName.get(nextName.toLowerCase()) == null)
+                {
+                    break;
+                }
+
+                final DslArg nextArt = argsByName.get(nextName.toLowerCase());
+                if (nextArt != null && nextArt.getName().equalsIgnoreCase(groupArg.getIdentity().getName()))
+                {
+                    final List<String> entries = new ArrayList<>();
+                    entries.addAll(argValues);
+                    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, entries));
+                    final List<String> newArgValues = new ArrayList<>();
+                    while (true)
+                    {
+                        final NameValuePair newArg = arguments.pollFirst();
+                        if (newArg == null || newArg == NameValuePair.NULL)
+                        {
+                            break;
+                        }
+
+                        checkValidValue(nextArt, newArg.value);
+                        entries.add(newArg.value);
+                        break;
+                    }
+
+                    continue;
+                }
+
+                break;
+            }
+        }
     }
 
-            // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
