diff --git a/tmp/7d561837-2d01-483a-8343-608d040d4679_buggy.java b/tmp/40330446-4b45-4175-bcf8-ea643cbd6b7f_fixed.java
index cd6f89c..7bb3df6 100644
--- a/tmp/7d561837-2d01-483a-8343-608d040d4679_buggy.java
+++ b/tmp/40330446-4b45-4175-bcf8-ea643cbd6b7f_fixed.java
@@ -1,102 +1,117 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     long mask = parser.nextHexLong();
 
     LinkedList<Position> positions = new LinkedList<>();
 
     Integer power = parser.nextInt();
 
     Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
     while (itemParser.find()) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         decodeLocation(position, itemParser);
 
         positions.add(position);
     }
 
     Position position = positions.getLast();
 
     skipLocation(parser);
 
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
     if (parser.hasNextAny(12)) {
-
+        try {
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());
             position.set(Position.PREFIX_ADC + 3, parser.next());
+
             if (parser.hasNext(2)) {
                 position.set(Position.KEY_INPUT, parser.nextHexInt());
                 position.set(Position.KEY_OUTPUT, parser.nextHexInt());
             }
+
             if (parser.hasNext(4)) {
                 position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
                 decodeStatus(position, parser);
             }
 
-            int index = 0;
+            // Reset the position before we add additional data
+            position = positions.getLast();
+
             String[] data = parser.next().split(",");
-
-            index += 1; // device type
-
+            if (data.length > 5) { // Ensure we have at least 6 elements in the data array
                 if (BitUtil.check(mask, 0)) {
+                    // Handle digital fuel sensor data
+                    int index = 5; // Start at index 5 for additional data
                     index += 1; // digital fuel sensor data
+                    if (index < data.length && !data[index].isEmpty()) {
+                        position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(data[index]));
+                    }
                 }
 
                 if (BitUtil.check(mask, 1)) {
+                    // Handle fuel tank data
+                    index = 6;
                     int deviceCount = Integer.parseInt(data[index++]);
                     for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
+                        index += 2; // skip id and type
+                        if (index < data.length && !data[index].isEmpty()) {
                             position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
                         }
                     }
                 }
 
                 if (BitUtil.check(mask, 2)) {
-                index += 1; // can data
+                    // Handle can data
+                    index += 1;
                 }
 
                 if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
-                int deviceCount = Integer.parseInt(data[index++]);
-                for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // type
+                    // Handle volume and fuel data
+                    int additionalIndex = data.length - 4; // The last few elements are volume and fuel data
+                    if (BitUtil.check(mask, 3) && positionalIndex < data.length) {
                         if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
-                    }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[additionalIndex++]));
                         }
+                    } else {
+                        additionalIndex++; // Skip this data since volume check wasn't met
                     }
                 }
 
+            } else {
+                return null; // Not enough data to process further
+            }
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {
+            // Handle potential parsing errors here
+            return new RuntimeException("Error occurred while decoding data.", e);
+        }
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
     decodeDeviceTime(position, parser);
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
