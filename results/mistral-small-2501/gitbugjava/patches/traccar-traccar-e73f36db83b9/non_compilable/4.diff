diff --git a/tmp/093631e4-a62c-478a-aaea-9b4377707591_buggy.java b/tmp/a533a7d4-0ff1-44cb-b030-7380cad7731d_fixed.java
index cd6f89c..2f83552 100644
--- a/tmp/093631e4-a62c-478a-aaea-9b4377707591_buggy.java
+++ b/tmp/a533a7d4-0ff1-44cb-b030-7380cad7731d_fixed.java
@@ -1,102 +1,100 @@
 private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
     Parser parser = new Parser(PATTERN_ERI, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     long mask = parser.nextHexLong();
 
     LinkedList<Position> positions = new LinkedList<>();
 
-        Integer power = parser.nextInt();
-
-        Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
-        while (itemParser.find()) {
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
-            decodeLocation(position, itemParser);
+    decodeLocation(position, parser);
 
-            positions.add(position);
+    Optional<Parser> optionalParser = parser.getAny();
+    if (optionalParser.isPresent()) {
+        Parser itemParser = parser.next();
+        while (itemParser != null) {
+            itemParser = itemParser.getAny().orElse(null);
+            if (itemParser != null) {
+                Position pos = new Position(getProtocolName());
+                pos.setDeviceId(deviceSession.getDeviceId());
+                decodeLocation(pos, itemParser);
+                positions.add(pos);
+            }
+        }
     }
 
-        Position position = positions.getLast();
-
-        skipLocation(parser);
-
+    Integer power = parser.nextInt();
     if (power != null) {
         position.set(Position.KEY_POWER, power * 0.001);
     }
 
-        if (parser.hasNextAny(12)) {
+    if (parser.hasNext() && parser.peek().equals("odometer")) {
+        Long odometer = parser.nextAnyLong();
+        position.set(Position.KEY_ODOMETER, odometer != null ? odometer * 1000.0 : 0.0);
+    }
 
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+    if (parser.hasNext(2)) {
         position.set(Position.KEY_HOURS, parseHours(parser.next()));
         position.set(Position.PREFIX_ADC + 1, parser.next());
         position.set(Position.PREFIX_ADC + 2, parser.next());
         position.set(Position.PREFIX_ADC + 3, parser.next());
         if (parser.hasNext(2)) {
             position.set(Position.KEY_INPUT, parser.nextHexInt());
             position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         }
         if (parser.hasNext(4)) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
             decodeStatus(position, parser);
         }
 
-            int index = 0;
+        if (parser.hasNext()) {
             String[] data = parser.next().split(",");
+            int index = 0; // Handle index correctly
 
-            index += 1; // device type
-
-            if (BitUtil.check(mask, 0)) {
+            Optional<String> deviceType = Optional.ofNullable(data[index++]);
+            if (deviceType.isPresent() && Boolean.parseBoolean(deviceType.get())) {
                 index += 1; // digital fuel sensor data
             }
 
-            if (BitUtil.check(mask, 1)) {
-                int deviceCount = Integer.parseInt(data[index++]);
-                for (int i = 1; i <= deviceCount; i++) {
-                    index += 1; // id
-                    index += 1; // type
-                    if (!data[index++].isEmpty()) {
-                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
-                    }
-                }
-            }
-
             if (BitUtil.check(mask, 2)) {
                 index += 1; // can data
             }
 
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
+                    index += 1; // id
                     index += 1; // type
-                    if (BitUtil.check(mask, 3)) {
-                        position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
-                    }
-                    if (BitUtil.check(mask, 4)) {
-                        index += 1; // volume
+                    if (!data[index++].isEmpty()) {
+                        position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
                     }
                 }
             }
 
+            if (index < data.length) { // Remaining data
+                skipRemainingData(parser, index);
+            }
+        }
     }
 
     if (parser.hasNext()) {
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     }
 
     decodeDeviceTime(position, parser);
     if (ignoreFixTime) {
         positions.clear();
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
