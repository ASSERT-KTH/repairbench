diff --git a/tmp/f766ab02-c06a-41b1-b43f-41c032689c24_buggy.java b/tmp/d0fe0146-f06a-492e-b6fb-5d77ac836bfe_fixed.java
index a84de86..854335e 100644
--- a/tmp/f766ab02-c06a-41b1-b43f-41c032689c24_buggy.java
+++ b/tmp/d0fe0146-f06a-492e-b6fb-5d77ac836bfe_fixed.java
@@ -1,81 +1,86 @@
 private Position decode04(Channel channel, SocketAddress remoteAddress, ByteBuf buf) throws ParseException {
 
     buf.readUnsignedShortLE(); // length
     buf.readUnsignedShortLE(); // checksum
     int index = buf.readUnsignedShortLE();
 
     String id = String.format("%08d%07d", buf.readUnsignedIntLE(), buf.readUnsignedIntLE());
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, String.valueOf(id));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_INDEX, index);
 
     position.setDeviceTime(new Date(buf.readUnsignedIntLE() * 1000));
 
     while (buf.isReadable()) {
         int type = buf.readUnsignedByte();
         switch (type) {
             case 0:
                 position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                 buf.readUnsignedIntLE(); // event data
 
                 int status = buf.readUnsignedShortLE();
                 position.set(Position.KEY_IGNITION, BitUtil.check(status, 5));
                 position.set(Position.KEY_STATUS, status);
 
                 position.setValid(true);
-                    position.setLatitude(buf.readInt() * 0.00001);
+                int latitudeValue = buf.readInt();
+                position.setLatitude( latitudeValue * 0.00001);
                 position.setLongitude(buf.readInt() * 0.00001);
+
+                position.setLatitude(Math.min(Math.max(position.getLatitude(), -90.0), 90.0));
+                position.setLongitude(Math.min(Math.max(position.getLongitude(), -180.0), 180.0));
+
                 position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                 position.setCourse(buf.readUnsignedShortLE());
 
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_GPS, buf.readUnsignedByte());
                 position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShortLE());
                 position.set("maxAcceleration", buf.readUnsignedShortLE() * 0.001);
                 position.set("maxDeceleration", buf.readUnsignedShortLE() * 0.001);
                 buf.readUnsignedShortLE(); // bearing to landmark
                 buf.readUnsignedIntLE(); // distance to landmark
 
                 position.setFixTime(new Date(buf.readUnsignedIntLE() * 1000));
 
                 buf.readUnsignedByte(); // reserved
                 break;
             case 1:
                 buf.skipBytes(buf.readUnsignedShortLE()); // landmark
                 break;
             case 4:
                 buf.skipBytes(53); // trip
                 break;
             case 20:
                 buf.skipBytes(32); // extended
                 break;
             case 22:
                 buf.readUnsignedByte(); // zone flag
                 buf.skipBytes(buf.readUnsignedShortLE()); // zone name
                 break;
             case 30:
                 buf.skipBytes(79); // system status
                 break;
             case 40:
                 buf.skipBytes(40); // analog
                 break;
             case 50:
                 buf.skipBytes(buf.readUnsignedShortLE()); // console
                 break;
             case 255:
                 buf.skipBytes(4); // acknowledgement
                 break;
             default:
                 throw new IllegalArgumentException(String.format("Unknown type %d", type));
         }
     }
 
     return position.getValid() ? position : null;
 
 }
\ No newline at end of file
