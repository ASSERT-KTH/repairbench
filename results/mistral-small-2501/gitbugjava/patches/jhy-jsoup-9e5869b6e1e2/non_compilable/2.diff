diff --git a/tmp/8fe3e04b-79d2-4cb9-8cb3-44bcab8aca90_buggy.java b/tmp/e2fb2f48-88f7-482d-9e24-fbaddeb03d1b_fixed.java
index 0583946..710c97b 100644
--- a/tmp/8fe3e04b-79d2-4cb9-8cb3-44bcab8aca90_buggy.java
+++ b/tmp/e2fb2f48-88f7-482d-9e24-fbaddeb03d1b_fixed.java
@@ -1,30 +1,47 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
+    else {
+        return;
+    }
+
+    if (parent != null && parent.parent() != null) {
+        parentNode = parent.parent();
+        Element p = (Element) parentNode;
+        final boolean isBlock = p.normalName().equals("dl") ||
+            p.normalName().equals("dd") ||
+            p.normalName().equals("ol") ||
+            p.normalName().equals("ul") ||
+            p.normalName().equals("li");
+        if (isBlock) {
+            accum.append('\n');
+            indent(accum, p.depth() + 1, out);
+        }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
