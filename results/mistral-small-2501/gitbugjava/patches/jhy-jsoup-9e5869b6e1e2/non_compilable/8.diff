diff --git a/tmp/ca394c4b-1064-4b0b-9ebb-1045f2b1f370_buggy.java b/tmp/0035c2f3-3feb-488c-98fd-914dfbea3beb_fixed.java
index 0583946..4e6369b 100644
--- a/tmp/ca394c4b-1064-4b0b-9ebb-1045f2b1f370_buggy.java
+++ b/tmp/0035c2f3-3feb-488c-98fd-914dfbea3beb_fixed.java
@@ -1,30 +1,30 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
-        final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
-        final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
+    final Element parent = (parentNode instanceof Element) ? ((Element) parentNode) : null;
+    final boolean normalizeWhitespace = prettyPrint && parent != null && !parent.hasWhitespace();
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
-        if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
-            trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+    if (normalizeWhitespace) {
+        trimLeading = siblingIndex == 0 && parent != null && parent.tag().isBlockElement();
+        trimTrailing = parent != null && parent.tag().isBlockElement() && nextSibling() == null;
+
+        // if this text is just whitespace, and the next node will cause an indentation, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+                        (next instanceof TextNode && ((TextNode) next).isBlank());
 
-            Node prev = previousSibling();
-            if (
-                (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+        if (couldSkip && isBlank)
+            return;
+
+        if (siblingIndex == 0 && parent != null && parent.tag().isBlockElement() && !isBlank ||
+            (out.outline() && hasSiblingNodes() && !isBlank) ||
+            (siblingIndex > 0 && previousSibling() instanceof Element && ((Element) previousSibling()).tagName().equals("br"))) {
                 indent(accum, depth, out);
         }
+    }
 
-        Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
+    Entities.escape(accum, coreValue(), out, false, normalizeWhitespace, trimLeading, trimTrailing);
 }
\ No newline at end of file
