diff --git a/tmp/55a9a54b-af57-402f-9fc0-7104c5c8232e_buggy.java b/tmp/0c9b0419-b4b7-4c75-88da-af180a577ece_fixed.java
index c84c989..fba7763 100644
--- a/tmp/55a9a54b-af57-402f-9fc0-7104c5c8232e_buggy.java
+++ b/tmp/0c9b0419-b4b7-4c75-88da-af180a577ece_fixed.java
@@ -1,27 +1,49 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
-        buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
 
-        buf.skipBytes(23); // coordinates block
+    // Read the 24 bytes for the coordinates block and data tag header
+    ByteBuf coordinatesSlice = buf.readSlice(27);
 
-        buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
+    // Decode the coordinates block from the saved slice
+    decodeCoordinateBlock(position, coordinatesSlice);
+
     return position;
 }
+
+private void decodeCoordinateBlock(Position position, ByteBuf buf) {
+    int lat = 0;
+    int lon = 0;
+    int alt = 0;
+
+    for (int i = 0; i < 3; i++) {
+        lat += buf.readUnsignedByte() << (i * 8);
+    }
+    position.setLatitude(lat);
+
+    for (int i = 0; i < 3; i++) {
+        lon += buf.readUnsignedByte() << (i * 8);
+    }
+    position.setLongitude(lon);
+
+    for (int i = 0; i < 3; i++) {
+        alt += buf.readUnsignedByte() << (i * 8);
+    }
+    position.setAltitude(alt);
+}
\ No newline at end of file
