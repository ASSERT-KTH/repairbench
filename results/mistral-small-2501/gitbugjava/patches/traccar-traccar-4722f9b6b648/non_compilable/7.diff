diff --git a/tmp/98dce53f-2f8b-40a7-ab31-466323c42e5b_buggy.java b/tmp/de64a580-eb4d-44fa-b0f3-9157459e2793_fixed.java
index c84c989..21de3a6 100644
--- a/tmp/98dce53f-2f8b-40a7-ab31-466323c42e5b_buggy.java
+++ b/tmp/de64a580-eb4d-44fa-b0f3-9157459e2793_fixed.java
@@ -1,27 +1,56 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+
+    // Ensure the date and time are read and processed correctly
+    int dateAndTime = buf.readUnsignedIntLE();
+    try {
+        Calendar cal = Calendar.getInstance();
+        cal.setTimeZone(TimeZone.getTimeZone("GMT"));  // Set appropriate timezone
+
+        cal.clear(); // Clear current date/time
+
+        // Parse the date and time
+        int year = (dateAndTime >> 26) & 0x3F;
+        int month = (dateAndTime >> 22) & 0x0F;
+        int day = (dateAndTime >> 17) & 0x1F;
+        int hour = (dateAndTime >> 12) & 0x1F;
+        int minute = (dateAndTime >> 6) & 0x3F;
+        int second = dateAndTime & 0x3F;
+
+        // Adjust for typical year
+        if (year < 70) {
+            year += 2000;
+        } else {
+            year += 1900;
+        }
+
+        cal.set(year, month - 1, day, hour, minute, second);
+        position.setTime(cal.getTimeInMillis());
+    } catch (IllegalArgumentException e) {
+        e.printStackTrace();
+        return null;  // return null if unable to parse the date and time
+    }
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
\ No newline at end of file
