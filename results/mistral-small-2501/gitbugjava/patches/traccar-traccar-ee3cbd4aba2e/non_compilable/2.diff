diff --git a/tmp/ee1b1f94-0f6f-482b-bef8-cfe72097481a_buggy.java b/tmp/642a5a1e-c5bd-4f2b-b0ab-7df1ae42c1b3_fixed.java
index a4ebaaa..11614b9 100644
--- a/tmp/ee1b1f94-0f6f-482b-bef8-cfe72097481a_buggy.java
+++ b/tmp/642a5a1e-c5bd-4f2b-b0ab-7df1ae42c1b3_fixed.java
@@ -1,63 +1,78 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
-
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
     while (buf.readableBytes() > 2) {
         int id = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
         switch (id) {
-                case 0x02:
-                    position.setAltitude(buf.readShort());
+            case 0x02: {
+                if (buf.readableBytes() >= 2) {
+                    short altitude = buf.readShort();
+                    position.setAltitude(altitude);
+                } else {
+                    throw new IllegalArgumentException("Buf size too small to decode altitude.");
+                }
                 break;
-                case 0x0C:
+            }
+            case 0x0C: {
+                if (buf.readableBytes() >= 6) {
                     position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                } else {
+                    throw new IllegalArgumentException("Buf size too small to decode gyro.");
+                }
                 break;
-                default:
+            }
+            default: {
+                if (buf.readableBytes() >= length) {
                     buf.skipBytes(length);
+                } else {
+                    throw new IllegalArgumentException("Buf size too small to skip additional bytes.");
+                }
                 break;
             }
         }
+    }
 
     return position;
 }
\ No newline at end of file
