diff --git a/tmp/2b0cd615-a448-4c66-a70d-91b01657f834_buggy.java b/tmp/b887e67c-562a-4065-8872-fe91457b126a_fixed.java
index 0a8838d..89a7b4f 100644
--- a/tmp/2b0cd615-a448-4c66-a70d-91b01657f834_buggy.java
+++ b/tmp/b887e67c-562a-4065-8872-fe91457b126a_fixed.java
@@ -1,61 +1,73 @@
     private List<Position> parseData(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
         List<Position> positions = new LinkedList<>();
 
         if (!connectionless) {
             buf.readUnsignedInt(); // data length
         }
 
         int codec = buf.readUnsignedByte();
         int count = buf.readUnsignedByte();
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
         String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
 
-            position.setDeviceId(deviceSession.getDeviceId());
             position.setValid(true);
+            position.setDeviceId(deviceSession.getDeviceId());
+
+            if (buf.readableBytes() < 4) {
+                // Insufficient bytes to read, discard this packet
+                continue;
+            }
 
-            if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
-                int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            int length = buf.readInt();
+
+            if (length < 0) {
+                // Length should not be negative, discard this packet
+                length = -length;
+            }
+
+            if (buf.readableBytes() < length) {
+                // Insufficient bytes to read the data length, discard the remaining bytes in this loop
+                while (buf.readableBytes() > 0) {
+                    buf.readByte();
+                }
+                break;
+            }
+
             if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
+                position.set(Position.ATTR_CONTENT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
-                    position.set(Position.KEY_RESULT,
+                position.set(Position.ATTR_CONTENT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
-            } else if (codec == CODEC_12) {
-                decodeSerial(channel, remoteAddress, deviceSession, position, buf);
-            } else {
-                decodeLocation(position, buf, codec, model);
-            }
 
             if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
                 positions.add(position);
             }
         }
 
         if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
             ByteBuf response = Unpooled.buffer();
             if (connectionless) {
-                response.writeShort(5);
-                response.writeShort(0);
-                response.writeByte(0x01);
+                response.writeByte(0x00);
+                response.writeByte(0x00);
+                response.writeByte(0x05);
                 response.writeByte(locationPacketId);
                 response.writeByte(count);
             } else {
                 response.writeInt(count);
             }
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
         return positions.isEmpty() ? null : positions;
     }
\ No newline at end of file
