diff --git a/tmp/11cab4b6-3ac7-45bf-9bb8-599c04202a20_buggy.java b/tmp/680a0726-ae53-4ba4-9f64-52e6419c4ee5_fixed.java
index 0a8838d..b7376b5 100644
--- a/tmp/11cab4b6-3ac7-45bf-9bb8-599c04202a20_buggy.java
+++ b/tmp/680a0726-ae53-4ba4-9f64-52e6419c4ee5_fixed.java
@@ -1,61 +1,67 @@
 private List<Position> parseData(
-            Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
+        final Channel channel, final SocketAddress remoteAddress, final ByteBuf buf, final int locationPacketId, final String... imei) {
+
     List<Position> positions = new LinkedList<>();
 
-        if (!connectionless) {
-            buf.readUnsignedInt(); // data length
-        }
+    final int connectionlessOffset = connectionless ? 4 : 0;
 
-        int codec = buf.readUnsignedByte();
-        int count = buf.readUnsignedByte();
-
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
+    int offset = buf.readUnsignedByte(); // operation code
+    int codec = buf.readUnsignedByte();  // codec
+    int count = buf.readUnsignedByte();  // count
+    DeviceSession deviceSession = getDeviceSession(channel, (SocketAddress) null, imei);
     if (deviceSession == null) {
         return null;
     }
+
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
-
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
+        buf.skipBytes(connectionlessOffset);
+        int messageLength = buf.readInt(); // data message length
+
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
-                int length = buf.readInt() - 4;
+            int length = messageLength - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(length)));
             }
-            } else if (codec == CODEC_12) {
+        } else {
+            // Adjust the message length for codecs other than 13 based on the codec type
+            if (messageLength > 0) {
+                buf.readBytes(messageLength);
                 decodeSerial(channel, remoteAddress, deviceSession, position, buf);
-            } else {
-                decodeLocation(position, buf, codec, model);
             }
-
+        }
+        if (offset == 0x06) {
             if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
                 positions.add(position);
             }
+        } else {
+            decodeLocation(position, buf, codec, model);
+        }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
