diff --git a/tmp/58d8e077-3275-4add-a462-f57b58a5837a_buggy.java b/tmp/e4c8b385-47b7-43de-b788-c639bf985daf_fixed.java
index 0a8838d..e38e08c 100644
--- a/tmp/58d8e077-3275-4add-a462-f57b58a5837a_buggy.java
+++ b/tmp/e4c8b385-47b7-43de-b788-c639bf985daf_fixed.java
@@ -1,61 +1,74 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
+    long timestamp = -1;
+
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            timestamp = buf.readUnsignedInt() * 1000L;
+            getLastLocation(position, new Date(timestamp));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
+            if (buf.readableBytes() > 0) {
+                timestamp = buf.readUnsignedInt() * 1000L;
+                getLastLocation(position, new Date(timestamp));
+            } else {
+                position.setValid(false);
+                return positions; // Exit loop if no data for positions
+            }
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
+    if (timestamp != -1) {
+        // Correct the logic that sends the response
         if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
             ByteBuf response = Unpooled.buffer();
             if (connectionless) {
                 response.writeShort(5);
                 response.writeShort(0);
                 response.writeByte(0x01);
                 response.writeByte(locationPacketId);
                 response.writeByte(count);
             } else {
                 response.writeInt(count);
             }
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
+    }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
