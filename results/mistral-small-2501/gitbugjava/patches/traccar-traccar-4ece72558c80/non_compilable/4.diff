diff --git a/tmp/c65d9b5e-4e6d-427e-b259-15905e936b4a_buggy.java b/tmp/f9dd24c8-20ac-4d6c-8739-bb4d3a2e6b75_fixed.java
index 0a8838d..852390d 100644
--- a/tmp/c65d9b5e-4e6d-427e-b259-15905e936b4a_buggy.java
+++ b/tmp/f9dd24c8-20ac-4d6c-8739-bb4d3a2e6b75_fixed.java
@@ -1,61 +1,59 @@
     private List<Position> parseData(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
+
         List<Position> positions = new LinkedList<>();
 
+        if (buf.readableBytes() > 0) {
             if (!connectionless) {
                 buf.readUnsignedInt(); // data length
             }
 
             int codec = buf.readUnsignedByte();
             int count = buf.readUnsignedByte();
 
             DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
             if (deviceSession == null) {
                 return null;
             }
+
             String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
 
                 position.setDeviceId(deviceSession.getDeviceId());
                 position.setValid(true);
 
+                position.setRaw(buf.readBytes(buf.readableBytes()).toString());
+
                 if (codec == CODEC_13) {
-                buf.readUnsignedByte(); // type
-                int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
-                if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
-                } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
-                }
+                    position.set(Position.KEY_CUSTOM, buf.readByte());
+                    int length = buf.readInt();
+                    position.set(Position.KEY_TIME, new Date(buf.readUnsignedInt() * 1000L));
+                    buf.skipBytes(length - 4);
                 } else if (codec == CODEC_12) {
                     decodeSerial(channel, remoteAddress, deviceSession, position, buf);
                 } else {
                     decodeLocation(position, buf, codec, model);
                 }
 
-            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
                 positions.add(position);
             }
         }
 
         if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
             ByteBuf response = Unpooled.buffer();
             if (connectionless) {
                 response.writeShort(5);
                 response.writeShort(0);
                 response.writeByte(0x01);
                 response.writeByte(locationPacketId);
                 response.writeByte(count);
             } else {
                 response.writeInt(count);
             }
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
-        return positions.isEmpty() ? null : positions;
+        return positions;
     }
\ No newline at end of file
