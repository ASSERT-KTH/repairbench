diff --git a/tmp/7f7cdaf3-0716-4cbd-be8d-208fbe57e102_buggy.java b/tmp/6999df18-8af3-4798-8c3a-c41ee8db1e56_fixed.java
index 712f277..3db3c0a 100644
--- a/tmp/7f7cdaf3-0716-4cbd-be8d-208fbe57e102_buggy.java
+++ b/tmp/6999df18-8af3-4798-8c3a-c41ee8db1e56_fixed.java
@@ -1,48 +1,47 @@
-    /**
-     * Renders the given input to the target Appendable.
-     *
-     * @param input
-     *            source to render
-     * @param target
-     *            render onto this target Appendable.
-     * @return the given Appendable
-     * @throws IOException
-     *             If an I/O error occurs
-     */
     public static Appendable render(final String input, Appendable target) throws IOException {
-
         int i = 0;
         int j, k;
+        int beginIndex, endIndex;
 
         while (true) {
             j = input.indexOf(BEGIN_TOKEN, i);
             if (j == -1) {
                 if (i == 0) {
                     target.append(input);
                     return target;
                 }
                 target.append(input.substring(i));
                 return target;
             }
-            target.append(input.substring(i, j));
+
             k = input.indexOf(END_TOKEN, j);
-
             if (k == -1) {
-                target.append(input);
-                return target;
+                target.append(input.substring(i));
+                return target;  // Append remaining string and exit loop
             }
-            j += BEGIN_TOKEN_LEN;
-            String spec = input.substring(j, k);
+
+            // Logic to maintain previous strings
+            if (j + 1 >= k) {   // handle the negative case.
+                throw new IllegalArgumentException("END_TOKEN appears before BEGIN_TOKEN at positions " + j + " and " + k);
+            }
+            target.append(input.substring(i, j));
+
+            beginIndex = j + BEGIN_TOKEN_LEN;   // Adjust index to skip over BEGIN_TOKEN
+            endIndex = k + END_TOKEN_LEN;   // Adjust index to skip over END_TOKEN
+
+            String spec = input.substring(beginIndex, k);
 
             String[] items = spec.split(CODE_TEXT_SEPARATOR, 2);
             if (items.length == 1) {
-                target.append(input);
-                return target;
+                target.append(input.substring(beginIndex, k));   // never happen
+                i = k + END_TOKEN_LEN;
+                continue;
             }
+
             String replacement = render(items[1], items[0].split(CODE_LIST_SEPARATOR));
 
             target.append(replacement);
 
-            i = k + END_TOKEN_LEN;
+            i = k + END_TOKEN_LEN; // move past the current token
         }
     }
\ No newline at end of file
