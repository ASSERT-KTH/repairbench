diff --git a/tmp/e77082c8-20fd-4d3c-8f28-6b7c9d3d6957_buggy.java b/tmp/29c9e0a8-bee9-4d05-baf9-6159d48c1153_fixed.java
index b8e3fa3..a1a18df 100644
--- a/tmp/e77082c8-20fd-4d3c-8f28-6b7c9d3d6957_buggy.java
+++ b/tmp/29c9e0a8-bee9-4d05-baf9-6159d48c1153_fixed.java
@@ -1,65 +1,82 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
-				policy = new ExponentialBackOffPolicy();
-			}
-			if (this.delay != null) {
-				policy.setInitialInterval(this.delay);
-			}
-			if (this.delaySupplier != null) {
-				policy.initialIntervalSupplier(this.delaySupplier);
-			}
+			ExponentialBackOffPolicy policy = Boolean.TRUE.equals(this.random)
+				? new ExponentialRandomBackOffPolicy()
+				: new ExponentialBackOffPolicy();
+
+			setIntervals(policy);
+
 			if (this.multiplier != null) {
 				policy.setMultiplier(this.multiplier);
 			}
 			if (this.multiplierSupplier != null) {
-				policy.multiplierSupplier(this.multiplierSupplier);
+				policy.setMultiplierSupplier(this.multiplierSupplier);
 			}
+
 			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+				policy.setMaxInterval(this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
 			}
+
 			if (this.maxDelaySupplier != null) {
-				policy.maxIntervalSupplier(this.maxDelaySupplier);
+				policy.setMaxIntervalSupplier(this.maxDelaySupplier);
 			}
 			if (this.sleeper != null) {
 				policy.setSleeper(this.sleeper);
 			}
+
 			return policy;
 		}
+
 		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
 			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			setUniformRandomBackOffPolicyIntervals(policy);
+			if (this.sleeper != null) {
+				policy.setSleeper(this.sleeper);
+			}
+			return policy;
+		}
+
+		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+		setFixedBackOffPolicyDelay(policy);
+		return policy;
+	}
+
+	private void setIntervals(ExponentialBackOffPolicy policy) {
+		if (this.delay != null) {
+			policy.setInitialInterval(this.delay);
+		}
+		if (this.delaySupplier != null) {
+			policy.setInitialIntervalSupplier(this.delaySupplier);
+		}
+	}
+
+	private void setUniformRandomBackOffPolicyIntervals(UniformRandomBackOffPolicy policy) {
 		if (this.delay != null) {
 			policy.setMinBackOffPeriod(this.delay);
 		}
 		if (this.delaySupplier != null) {
 			policy.minBackOffPeriodSupplier(this.delaySupplier);
 		}
 		if (this.maxDelay != null) {
 			policy.setMaxBackOffPeriod(this.maxDelay);
 		}
 		if (this.maxDelaySupplier != null) {
 			policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 		}
-			if (this.sleeper != null) {
-				policy.setSleeper(this.sleeper);
 	}
-			return policy;
-		}
-		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+
+	private void setFixedBackOffPolicyDelay(FixedBackOffPolicy policy) {
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
+		if (this.delaySupplier != null) {
+			policy.setBackOffPeriodSupplier(this.delaySupplier);
+		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
-		return policy;
 	}
\ No newline at end of file
