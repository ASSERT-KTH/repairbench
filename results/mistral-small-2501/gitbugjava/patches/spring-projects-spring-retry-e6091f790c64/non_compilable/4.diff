diff --git a/tmp/244e2249-a4a6-465c-b776-40080ea532cf_buggy.java b/tmp/bcf00566-04f8-48fb-ba54-9e5742bc72b0_fixed.java
index b8e3fa3..e1b312a 100644
--- a/tmp/244e2249-a4a6-465c-b776-40080ea532cf_buggy.java
+++ b/tmp/bcf00566-04f8-48fb-ba54-9e5742bc72b0_fixed.java
@@ -1,65 +1,81 @@
 	/**
 	 * Builds the {@link BackOffPolicy} with the given parameters.
 	 * @return the {@link BackOffPolicy} instance
 	 */
 	public BackOffPolicy build() {
+		if (this.delay == null && this.delaySupplier == null) {
+			this.delay = new Long(0);
+		}
+
 		if (this.multiplier != null && this.multiplier > 0 || this.multiplierSupplier != null) {
-			ExponentialBackOffPolicy policy;
-			if (Boolean.TRUE.equals(this.random)) {
-				policy = new ExponentialRandomBackOffPolicy();
+			ExponentialBackOffPolicy policy = getExponentialPolicy();
+			return fillBackOffPolicy(policy);
 		}
-			else {
-				policy = new ExponentialBackOffPolicy();
+		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+			fillRandomBackOffPolicy(policy);
+			return policy;
 		}
+		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+		fillFixedBackOffPolicy(policy);
+		return policy;
+	}
+
+	private ExponentialBackOffPolicy getExponentialPolicy() {
+		ExponentialBackOffPolicy policy = this.random
+				? new ExponentialRandomBackOffPolicy()
+				: new ExponentialBackOffPolicy();
+		return policy;
+	}
+
+	private void fillBackOffPolicy(ExponentialBackOffPolicy policy) {
 		if (this.delay != null) {
 			policy.setInitialInterval(this.delay);
 		}
 		if (this.delaySupplier != null) {
 			policy.initialIntervalSupplier(this.delaySupplier);
 		}
 		if (this.multiplier != null) {
 			policy.setMultiplier(this.multiplier);
 		}
 		if (this.multiplierSupplier != null) {
 			policy.multiplierSupplier(this.multiplierSupplier);
 		}
 		if (this.maxDelay != null && this.delay != null) {
 			policy.setMaxInterval(
 					this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
 		}
 		if (this.maxDelaySupplier != null) {
 			policy.maxIntervalSupplier(this.maxDelaySupplier);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
-			return policy;
 	}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
-			UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
+
+	private void fillRandomBackOffPolicy(UniformRandomBackOffPolicy policy) {
 		if (this.delay != null) {
 			policy.setMinBackOffPeriod(this.delay);
 		}
 		if (this.delaySupplier != null) {
 			policy.minBackOffPeriodSupplier(this.delaySupplier);
 		}
 		if (this.maxDelay != null) {
 			policy.setMaxBackOffPeriod(this.maxDelay);
 		}
 		if (this.maxDelaySupplier != null) {
 			policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
-			return policy;
 	}
-		FixedBackOffPolicy policy = new FixedBackOffPolicy();
+
+	private void fillFixedBackOffPolicy(FixedBackOffPolicy policy) {
 		if (this.delay != null) {
 			policy.setBackOffPeriod(this.delay);
 		}
 		if (this.sleeper != null) {
 			policy.setSleeper(this.sleeper);
 		}
-		return policy;
 	}
\ No newline at end of file
