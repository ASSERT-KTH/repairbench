diff --git a/tmp/008df2e4-b3ba-493b-af9e-13cbeb56e31f_buggy.java b/tmp/50287eb5-60bc-4f66-895d-556d03613de0_fixed.java
index 23f078d..141741b 100644
--- a/tmp/008df2e4-b3ba-493b-af9e-13cbeb56e31f_buggy.java
+++ b/tmp/50287eb5-60bc-4f66-895d-556d03613de0_fixed.java
@@ -1,14 +1,23 @@
+import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
+import java.net.URLEncoder;
+
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
+        if (Character.charCount(c) == 2) {
+            i++; // Skip the next character (as we are processing a surrogate pair)
+        }
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) { // out of ASCII range
+            // Encode the Unicode character as a percent-encoded UTF-8 sequence
+            byte[] bytes = Integer.toString(c).getBytes(StandardCharsets.UTF_8);
+            for (byte b : bytes) {
+                sb.append(String.format("%%%02X", b));
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
