diff --git a/tmp/f2ff228a-a0c7-44f0-bcba-d4d01c6a83c0_buggy.java b/tmp/1d82e659-a37f-4891-b0cc-5793b553fabc_fixed.java
index 23f078d..9a06ed0 100644
--- a/tmp/f2ff228a-a0c7-44f0-bcba-d4d01c6a83c0_buggy.java
+++ b/tmp/1d82e659-a37f-4891-b0cc-5793b553fabc_fixed.java
@@ -1,14 +1,20 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
-                sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            if (spaceAsPlus) {
+                sb.append('+');
+            } else {
+                sb.append("%20");
+            }
+            i++;
+        } else if (c > 127) { // out of ASCII range
+            sb.append(URLEncoder.encode(new String(Character.toChars(c)), "UTF-8"));
+            i += Character.charCount(c); // move past the entire character, in case it's a surrogate pair
         } else {
             sb.append((char) c);
+            i++;
         }
     }
 }
\ No newline at end of file
