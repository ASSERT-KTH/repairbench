diff --git a/tmp/e93f3f10-0e7d-4387-98d1-ad261ec0aeca_buggy.java b/tmp/54d99309-4814-494f-85fc-0994f5fad947_fixed.java
index 7b8ee38..a1da995 100644
--- a/tmp/e93f3f10-0e7d-4387-98d1-ad261ec0aeca_buggy.java
+++ b/tmp/54d99309-4814-494f-85fc-0994f5fad947_fixed.java
@@ -1,179 +1,171 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
-        buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
-        buf.skipBytes(1); // '*' delimiter
+        if (buf.readByte() != '[') { // Ensure the header is '['
+            return null;
+        }
+
+        String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+        if (buf.readByte() != '*') { // Ensure the delimiter is '*' after manufacturer
+            return null;
+        }
+
+        String id = buf.readSlice(buf.readerIndex(), buf.indexOf(buf.readerIndex(), buf.writerIndex(), '*')).toString(StandardCharsets.US_ASCII);
+        if (buf.readByte() != '*') { // Ensure the delimiter is '*' after id
+            return null;
+        }
 
-        int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
             return null;
         }
 
-        buf.skipBytes(1); // '*' delimiter
-
         String index = null;
-        int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
-            hasIndex = true;
-            index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
-            buf.skipBytes(1); // '*' delimiter
+        int indexIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), '*');
+        if (indexIndex + 5 < buf.writerIndex() && buf.getByte(indexIndex + 5) == '*' &&
+                buf.toString(indexIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+            index = buf.readSlice(buf.readerIndex(), indexIndex).toString(StandardCharsets.US_ASCII);
+            buf.readByte(); // Skip the '*'
         }
 
-        buf.skipBytes(4); // length
-        buf.skipBytes(1); // '*' delimiter
+        buf.readByte(); // Skip the header length
+        buf.readByte(); // Skip the '*'
 
-        buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
+        buf.readerIndex(buf.readerIndex() - 1); // ']' ignore ending
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
-        }
-
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
-
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
-        }
+        String type = buf.readSlice(buf.readerIndex(), buf.indexOf(buf.readerIndex(), buf.writerIndex(), ',')).toString(StandardCharsets.US_ASCII);
 
         if (type.equals("INIT")) {
-
             sendResponse(channel, id, index, "INIT,1");
 
         } else if (type.equals("LK")) {
-
             sendResponse(channel, id, index, "LK");
 
             if (buf.isReadable()) {
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
                     getLastLocation(position, null);
 
+                    if (values.length >= 3) {
                         position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
+                    }
+
+                    if (values.length >= 2) {
                         position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
+                    }
 
                     return position;
                 }
             }
 
         } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
-
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 sendResponse(channel, id, index, "AL");
             }
 
             return position;
 
         } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
             sendResponse(channel, id, index, type);
 
         } else if (type.equalsIgnoreCase("PULSE")
                 || type.equalsIgnoreCase("HEART")
                 || type.equalsIgnoreCase("BLOOD")
                 || type.equalsIgnoreCase("BPHRT")
                 || type.equalsIgnoreCase("btemp2")) {
 
             if (buf.isReadable()) {
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, new Date());
 
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 int valueIndex = 0;
 
-                if (type.equalsIgnoreCase("btemp2")) {
+                if (type.equalsIgnoreCase("bTemp2")) {
                     if (Integer.parseInt(values[valueIndex++]) > 0) {
                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                     }
                 } else {
                     if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
                         position.set("pressureHigh", values[valueIndex++]);
                         position.set("pressureLow", values[valueIndex++]);
                     }
                     if (valueIndex <= values.length - 1) {
                         position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                     }
                 }
 
                 return position;
 
             }
 
         } else if (type.equals("img")) {
-
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
-            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-            buf.readerIndex(timeIndex + 12 + 2);
+            int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), ',');
+            buf.readerIndex(timeIndex);
             position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
             return position;
 
         } else if (type.equals("JXTK")) {
-
-            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+            int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), ',', 4) + 1;
             String[] values = buf.readCharSequence(
                     dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
             int current = Integer.parseInt(values[2]);
             int total = Integer.parseInt(values[3]);
 
             if (audio == null) {
                 audio = Unpooled.buffer();
             }
             audio.writeBytes(buf);
 
             sendResponse(channel, id, index, "JXTKR,1");
 
             if (current < total) {
                 return null;
             } else {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
                 getLastLocation(position, null);
                 position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                 audio.release();
                 audio = null;
                 return position;
             }
 
         } else if (type.equals("TK")) {
-
             if (buf.readableBytes() == 1) {
                 return null;
             }
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, null);
 
             position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
             return position;
-
         }
 
         return null;
     }
\ No newline at end of file
