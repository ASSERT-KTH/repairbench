diff --git a/tmp/a80fe14e-691f-4642-8a6c-4a28fc0bc2b4_buggy.java b/tmp/88af1f01-bf6d-4de4-ad63-5c0087af6805_fixed.java
index 1c732f4..9cb684c 100644
--- a/tmp/a80fe14e-691f-4642-8a6c-4a28fc0bc2b4_buggy.java
+++ b/tmp/88af1f01-bf6d-4de4-ad63-5c0087af6805_fixed.java
@@ -1,88 +1,155 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
                 position.setValid(Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
+                try {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                } catch (ParseException e) {
+                    position.setTime(new Date(0)); // Set to epoch if parsing fails
+                }
                 break;
             case "latitude":
+                try {
                     position.setLatitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setLatitude(0); // Set to default if parsing fails
+                }
                 break;
             case "longitude":
+                try {
                     position.setLongitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setLongitude(0); // Set to default if parsing fails
+                }
                 break;
             case "altitude":
+                try {
                     position.setAltitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setAltitude(0); // Set to default if parsing fails
+                }
                 break;
             case "velocity":
+                try {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                } catch (NumberFormatException e) {
+                    position.setSpeed(0); // Set to default if parsing fails
+                }
                 break;
             case "heading":
+                try {
                     position.setCourse(Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.setCourse(0); // Set to default if parsing fails
+                }
                 break;
             case "eventid":
+                try {
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_EVENT, 0); // Set to default if parsing fails
+                }
                 break;
             case "mileage":
+                try {
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_ODOMETER, 0); // Set to default if parsing fails
+                }
                 break;
             case "satellites":
+                try {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_SATELLITES, 0); // Set to default if parsing fails
+                }
                 break;
             case "ignition":
+                try {
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_IGNITION, false); // Set to default if parsing fails
+                }
                 break;
             case "door":
+                try {
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_DOOR, false); // Set to default if parsing fails
+                }
                 break;
             case "arm":
+                try {
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_ARMED, false); // Set to default if parsing fails
+                }
                 break;
             case "fuel":
+                try {
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_FUEL_LEVEL, 0); // Set to default if parsing fails
+                }
                 break;
             case "rpm":
+                try {
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_RPM, 0); // Set to default if parsing fails
+                }
                 break;
             case "main_voltage":
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_POWER, 0); // Set to default if parsing fails
+                }
                 break;
             case "backup_voltage":
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_BATTERY, 0); // Set to default if parsing fails
+                }
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
+                try {
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), 0); // Set to default if parsing fails
+                }
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
                 default:
                 position.set(key, value);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
