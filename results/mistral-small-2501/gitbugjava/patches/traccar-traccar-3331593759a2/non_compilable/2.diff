diff --git a/tmp/7be687ed-75f8-4049-8718-887f68519ccf_buggy.java b/tmp/ac327860-5b64-45f9-8c0c-01c1dbbf6672_fixed.java
index 2189af9..49818b1 100644
--- a/tmp/7be687ed-75f8-4049-8718-887f68519ccf_buggy.java
+++ b/tmp/ac327860-5b64-45f9-8c0c-01c1dbbf6672_fixed.java
@@ -1,113 +1,127 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
                                 position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
                                 break;
                             case 0x0103:
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x052A:
                                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
                                 break;
                             case 0x0105:
                             case 0x052C:
                                 position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
                                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                                 break;
                             default:
+                                if(length > 0) {
                                     switch (length) {
                                         case 1:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                             break;
                                         case 2:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                             break;
                                         case 4:
                                             position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                             break;
+                                        case 10: // check for latitude and longitude
+                                            buf.readUnsignedByte(); // skip time prefix unused in this protocol
+                                            double latitude = buf.readInt() / 1000000.0;
+                                            if(latitude > 90.0 || latitude < -90.0)
+                                                latitude = 90.0 * (latitude / Math.abs(latitude)); // Limit to valid range if out of bounds
+                                            position.setLatitude(latitude);
+
+                                            double longitude = buf.readInt() / 1000000.0;
+                                            if(longitude > 180.0 || longitude < -180.0)
+                                                longitude = 180.0 * (longitude / Math.abs(longitude)); // Limit to valid range if out of bounds
+                                            position.setLongitude(longitude);
+                                            break;
                                         default:
                                             buf.skipBytes(length);
                                             break;
                                     }
+                                }
                                 break;
                         }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
                                 break;
                         }
                         buf.skipBytes(length);
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
                         position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
