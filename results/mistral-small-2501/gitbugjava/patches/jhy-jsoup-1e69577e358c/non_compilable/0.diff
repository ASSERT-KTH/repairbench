diff --git a/tmp/76826fe3-92f8-4a41-905d-12d4d68caedc_buggy.java b/tmp/fc112265-dd74-4861-bb80-35691ebb0dae_fixed.java
index c9c77a4..ed7bb23 100644
--- a/tmp/76826fe3-92f8-4a41-905d-12d4d68caedc_buggy.java
+++ b/tmp/fc112265-dd74-4861-bb80-35691ebb0dae_fixed.java
@@ -1,35 +1,53 @@
 URL build() {
     try {
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            encodeWithPercentEncoding(u.getPath()), // ensure we do not decode special characters
+            null,
+            null // query and fragment are appended later so as not to encode
         );
 
-            String normUrl = uri.toASCIIString();
+        String normUrl = uri.toString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+private String encodeWithPercentEncoding(String input) {
+    if (input == null) {
+        return null;
+    }
+    StringBuilder sb = new StringBuilder();
+    for (char c : input.toCharArray()) {
+        if (c < 128) {
+            // In Java, ASCII is a subset of Unicode,
+            // so < 128 characteres are safe.
+            sb.append(c);
+        } else {
+            sb.append(String.format("%%%02X", (int) c));
+        }
+    }
+    return sb.toString();
+}
\ No newline at end of file
