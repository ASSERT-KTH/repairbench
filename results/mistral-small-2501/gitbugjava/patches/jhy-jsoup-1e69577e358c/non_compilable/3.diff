diff --git a/tmp/1c208232-3413-4bcd-91d1-2b20fab4ed3c_buggy.java b/tmp/23703a01-029c-4c52-9f47-75f4804a35c7_fixed.java
index c9c77a4..6f4cbbc 100644
--- a/tmp/1c208232-3413-4bcd-91d1-2b20fab4ed3c_buggy.java
+++ b/tmp/23703a01-029c-4c52-9f47-75f4804a35c7_fixed.java
@@ -1,35 +1,43 @@
 URL build() {
     try {
+        // Decode the percent-encoded characters in URI components
+        String path = decodePart(u.getPath());
+        String host = decodePart(u.getHost());
+
         // use the URI class to encode non-ascii in path
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
+            IDN.toASCII(host), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            path,
             null, null // query and fragment appended later so as not to encode
         );
 
-            String normUrl = uri.toASCIIString();
+        String normPath = uri.getRawPath();// use the raw path to keep the encoded characters just like we want
+
+        String normUrl = u.getProtocol() + "://" + host;
+        normUrl += (u.getPort() > 0 ? ":" + u.getPort() : "");
+
+        normUrl += normPath;
+
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                sb.append('?').append(URLDecoder.decode(q, StandardCharsets.UTF_8)); // append raw query
             }
             if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                sb.append('#').append(URLDecoder.decode(u.getRef(), StandardCharsets.UTF_8)); // append raw reference
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
