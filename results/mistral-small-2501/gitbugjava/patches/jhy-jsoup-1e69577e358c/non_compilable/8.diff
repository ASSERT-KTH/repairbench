diff --git a/tmp/798c038a-1ee2-41b7-bd2e-e403aa5cdb78_buggy.java b/tmp/7f1e084f-6adf-457d-9672-844ba45c335d_fixed.java
index c9c77a4..2df8b2f 100644
--- a/tmp/798c038a-1ee2-41b7-bd2e-e403aa5cdb78_buggy.java
+++ b/tmp/7f1e084f-6adf-457d-9672-844ba45c335d_fixed.java
@@ -1,35 +1,46 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // use the URI class to encode non-ascii in path, but keep the encoding for percent-encoded characters
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            decodePathPart(u.getPath()),  // preserve percent-encoded characters in the path
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+private String decodePathPart(String path) {
+    if (isPercentEncoded(path)) {
+        return path;
+    }
+    return decodePart(path);
+}
+
+private boolean isPercentEncoded(String input) {
+    return input.matches(".*\\%.*");
+}
\ No newline at end of file
