diff --git a/tmp/7b7eca3e-d4ff-4e3b-b137-873c44687522_buggy.java b/tmp/9b4f08b6-f22e-424b-824a-6ad7b58a7994_fixed.java
index dcc36a4..f0fcd86 100644
--- a/tmp/7b7eca3e-d4ff-4e3b-b137-873c44687522_buggy.java
+++ b/tmp/9b4f08b6-f22e-424b-824a-6ad7b58a7994_fixed.java
@@ -1,12 +1,45 @@
 protected void replaceChild(Node out, Node in) {
     Validate.isTrue(out.parentNode == this);
     Validate.notNull(in);
-        if (in.parentNode != null)
+
+    // Skip removing in from parent if in is the same as out
+    if (in != out && in.parentNode != null) {
         in.parentNode.removeChild(in);
+    }
 
     final int index = out.siblingIndex;
     ensureChildNodes().set(index, in);
     in.parentNode = this;
     in.setSiblingIndex(index);
     out.parentNode = null;
+
+    // Set the next and previous sibling correctly
+    Node prevSibling = out.previousSibling();
+    Node nextSibling = out.nextSibling();
+
+    if (prevSibling != null) {
+        prevSibling.nextSibling = in;
+    }
+    if (nextSibling != null) {
+        nextSibling.previousSibling = in;
+    }
+
+    if (this.firstChild == out) {
+        this.firstChild = in;
+    }
+
+    if (this.lastChild == out) {
+        this.lastChild = in;
+    }
+
+    // If node changed, update the siblings
+    List<Node> childNodes = ensureChildNodes();
+    if (childNodes.size() > index + 1) {
+        for (int i = index + 1; i < childNodes.size(); i++) {
+            Node sibling = childNodes.get(i);
+            sibling.setSiblingIndex(i);
+            sibling.previousSibling = childNodes.get(i - 1);
+            sibling.nextSibling = (i + 1 < childNodes.size()) ? childNodes.get(i + 1) : null;
+        }
+    }
 }
\ No newline at end of file
