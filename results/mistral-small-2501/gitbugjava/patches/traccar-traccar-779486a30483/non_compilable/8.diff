diff --git a/tmp/26b9f40b-0f26-446f-aa18-94c7d4b843cd_buggy.java b/tmp/f56e6c4e-e87b-43ae-beb6-82b73f20e73d_fixed.java
index f591bc6..b7460ec 100644
--- a/tmp/26b9f40b-0f26-446f-aa18-94c7d4b843cd_buggy.java
+++ b/tmp/f56e6c4e-e87b-43ae-beb6-82b73f20e73d_fixed.java
@@ -1,74 +1,79 @@
 protected Object decodeAvrmc(
         String sentence, Channel channel, SocketAddress remoteAddress) {
 
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
-        DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
-        DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
-        String status = parser.next();
-        String upperCaseStatus = status.toUpperCase();
-        position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
-        position.set(Position.KEY_STATUS, status);
+    // Ensure the date components are provided with 00 for missing values
+    int hour = parser.nextInt(0, 23);
+    int minute = parser.nextInt(0, 59);
+    int second = parser.nextInt(0, 59);
+
+    DateBuilder dateBuilder = new DateBuilder().setTime(hour, minute, second);
+
+    String statusStr = parser.next();
+    String upperCaseStatus = statusStr.toUpperCase();
+    position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R")
+                    || upperCaseStatus.equals("P") || upperCaseStatus.equals("V")
+                    || upperCaseStatus.equals("V"));
+    position.set(Position.KEY_STATUS, statusStr);
 
     position.setLatitude(parser.nextCoordinate());
     position.setLongitude(parser.nextCoordinate());
     position.setSpeed(parser.nextDouble(0));
     position.setCourse(parser.nextDouble(0));
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
-        String event = parser.next();
-        position.set(Position.KEY_ALARM, decodeAlarm(event));
-        position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
+    String eventStr = parser.next();
+    position.set(Position.KEY_ALARM, decodeAlarm(eventStr));
+    position.set(Position.KEY_EVENT, decodeEvent(eventStr, position, deviceModel));
     position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
     position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
     position.set(Position.KEY_GPS, parser.nextInt());
     position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
     }
 
     Integer lac = parser.nextHexInt();
     Integer cid = parser.nextHexInt();
     Integer mcc = parser.nextInt();
     Integer mnc = parser.nextInt();
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
     parser.next(); // unused
 
     String checksum = parser.next();
 
     if (channel != null) {
-
-            sendAcknowledge(status, event, checksum, channel, remoteAddress);
+        sendAcknowledge(statusStr, eventStr, checksum, channel, remoteAddress);
 
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
-            sendEventResponse(event, devicePassword, channel, remoteAddress);
+        sendEventResponse(eventStr, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
