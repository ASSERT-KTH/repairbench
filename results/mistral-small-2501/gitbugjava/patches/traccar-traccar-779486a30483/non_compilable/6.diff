diff --git a/tmp/558e1e68-5fc4-4a16-ba85-8368830dade5_buggy.java b/tmp/3f3dd321-3029-471c-a067-f16f09d0dca1_fixed.java
index f591bc6..a876ced 100644
--- a/tmp/558e1e68-5fc4-4a16-ba85-8368830dade5_buggy.java
+++ b/tmp/3f3dd321-3029-471c-a067-f16f09d0dca1_fixed.java
@@ -1,74 +1,124 @@
-    protected Object decodeAvrmc(
-            String sentence, Channel channel, SocketAddress remoteAddress) {
-
+protected Object decodeAvrmc(String sentence, Channel channel, SocketAddress remoteAddress) {
     Parser parser = new Parser(PATTERN_AVRMC, sentence);
     if (!parser.matches()) {
         return null;
     }
 
-        DeviceSession deviceSession =
-            getDeviceSession(channel, remoteAddress, parser.next());
+    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
     if (deviceSession == null) {
         return null;
     }
 
     String deviceModel = null;
     Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
     if (device != null) {
         deviceModel = device.getModel();
     }
 
     Position position = new Position(getProtocolName());
 
     position.setDeviceId(deviceSession.getDeviceId());
     DateBuilder dateBuilder = new DateBuilder()
             .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
     String status = parser.next();
     String upperCaseStatus = status.toUpperCase();
     position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
     position.set(Position.KEY_STATUS, status);
 
+    try {
         position.setLatitude(parser.nextCoordinate());
+    } catch (NumberFormatException e) {
+        position.setLatitude(0);
+    }
+    try {
         position.setLongitude(parser.nextCoordinate());
+    } catch (NumberFormatException e) {
+        position.setLongitude(0);
+    }
+    try {
         position.setSpeed(parser.nextDouble(0));
+    } catch (NumberFormatException e) {
+        position.setSpeed(0);
+    }
+    try {
         position.setCourse(parser.nextDouble(0));
+    } catch (NumberFormatException e) {
+        position.setCourse(0);
+    }
 
     dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
     position.setTime(dateBuilder.getDate());
 
     String event = parser.next();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
+    try {
         position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_BATTERY, 0.0);
+    }
+    try {
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_ODOMETER, 0.0);
+    }
+    try {
         position.set(Position.KEY_GPS, parser.nextInt());
+    } catch (NumberFormatException e) {
+        position.set(Position.KEY_GPS, 0);
+    }
+    try {
         position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+    } catch (NumberFormatException e) {
+        position.set(Position.PREFIX_ADC + 1, 0.0);
+    }
 
     if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
+        try {
             position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+        } catch (NumberFormatException e) {
+            position.set(Position.PREFIX_ADC + 2, 0.0);
+        }
     }
 
-        Integer lac = parser.nextHexInt();
-        Integer cid = parser.nextHexInt();
-        Integer mcc = parser.nextInt();
-        Integer mnc = parser.nextInt();
+    Integer lac = null;
+    Integer cid = null;
+    Integer mcc = null;
+    Integer mnc = null;
+    try {
+        lac = parser.nextHexInt();
+    } catch (NumberFormatException e) {
+        lac = null;
+    }
+    try {
+        cid = parser.nextHexInt();
+    } catch (NumberFormatException e) {
+        cid = null;
+    }
+    try {
+        mcc = parser.nextInt();
+    } catch (NumberFormatException e) {
+        mcc = null;
+    }
+    try {
+        mnc = parser.nextInt();
+    } catch (NumberFormatException e) {
+        mnc = null;
+    }
     if (lac != null && cid != null && mcc != null && mnc != null) {
         position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
     }
 
     parser.next(); // unused
-
     String checksum = parser.next();
 
     if (channel != null) {
-
         sendAcknowledge(status, event, checksum, channel, remoteAddress);
-
         String devicePassword = AttributeUtil.getDevicePassword(
                 getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
         sendEventResponse(event, devicePassword, channel, remoteAddress);
     }
 
     return position;
 }
\ No newline at end of file
