diff --git a/tmp/d926f68f-f9a0-456b-a368-b84e29b769e8_buggy.java b/tmp/fdbe9e92-84ae-493b-8025-7153c739f146_fixed.java
index 2a0dceb..a27aaf0 100644
--- a/tmp/d926f68f-f9a0-456b-a368-b84e29b769e8_buggy.java
+++ b/tmp/fdbe9e92-84ae-493b-8025-7153c739f146_fixed.java
@@ -1,68 +1,91 @@
 private Position decode4(
             Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
         int index = 0;
 
         String type = values[index++].substring(5);
 
         if (!type.equals("STT") && !type.equals("ALT")) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
         position.set(Position.KEY_VERSION_FW, values[index++]);
         index += 1; // model
 
         Network network = new Network();
 
         for (int i = 0; i < 7; i++) {
             int cid = Integer.parseInt(values[index++]);
             int mcc = Integer.parseInt(values[index++]);
             int mnc = Integer.parseInt(values[index++]);
             int lac, rssi;
             if (i == 0) {
                 rssi = Integer.parseInt(values[index++]);
                 lac = Integer.parseInt(values[index++]);
             } else {
                 lac = Integer.parseInt(values[index++]);
                 rssi = Integer.parseInt(values[index++]);
             }
             index += 1; // timing advance
             if (cid > 0) {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
             }
         }
 
         position.setNetwork(network);
 
-        position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-        position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
-        position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
-        position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+        position.set(Position.KEY_BATTERY, values[index] != null ? Double.parseDouble(values[index++]) : 0.0);
+        position.set(Position.KEY_ARCHIVE, values[index] != null && values[index++].equals("0") ? true : null);
+        position.set(Position.KEY_INDEX, values[index] != null ? Integer.parseInt(values[index++]) : 0);
+        position.set(Position.KEY_STATUS, values[index] != null ? Integer.parseInt(values[index++]) : 0);
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+        if (values.length > index && values[index] != null && values[index].length() == 3) {
+            index += 1;
         }
 
+        if (index + 1 < values.length && values[index] != null && values[index].length() > 0) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
+            try {
                 dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                 position.setTime(dateFormat.parse(values[index++] + values[index++]));
+            } catch (ParseException e) {
+                // Handle parsing error
+                return null;
+            }
+        }
 
+        try {
             position.setLatitude(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+        try {
             position.setLongitude(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+        try {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
+        } catch (NumberFormatException e) {
+            return null;
+        }
+        try {
             position.setCourse(Double.parseDouble(values[index++]));
+        } catch (NumberFormatException e) {
+            return null;
+        }
 
-        position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+        position.set(Position.KEY_SATELLITES, values[index] != null ? Integer.parseInt(values[index++]) : 0);
 
-        position.setValid(values[index++].equals("1"));
+        position.setValid(values[index] != null ? values[index++].equals("1") : false);
 
         return position;
     }
\ No newline at end of file
