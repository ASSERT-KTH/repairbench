diff --git a/tmp/5e9756b0-b264-454c-ae37-54cdc27d1fd6_buggy.java b/tmp/cf5fb334-43ea-49f7-9531-4ba06d6b1a4d_fixed.java
index 2444d12..ed6fbfd 100644
--- a/tmp/5e9756b0-b264-454c-ae37-54cdc27d1fd6_buggy.java
+++ b/tmp/cf5fb334-43ea-49f7-9531-4ba06d6b1a4d_fixed.java
@@ -1,29 +1,32 @@
 // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
-        Stack<Integer> s = new Stack<Integer>();
+    Stack<Integer> s = new Stack<>();
     Scanner tokens = new Scanner(exp);
 
     while (tokens.hasNext()) {
         if (tokens.hasNextInt()) {
             s.push(tokens.nextInt()); // If int then push to stack
         } else { // else pop top two values and perform the operation
+            try {
                 int num2 = s.pop();
                 int num1 = s.pop();
                 String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
                     case "/" -> s.push(num1 / num2);
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
-                //  "+", "-", "*", "/"
+            } catch (EmptyStackException e) {
+                throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            }
         }
     }
     tokens.close();
     if (s.size() != 1) {
         throw new IllegalArgumentException("exp is not a proper postfix expression.");
     }
     return s.pop();
 }
\ No newline at end of file
