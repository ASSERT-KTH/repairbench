diff --git a/tmp/bc49e960-6b32-44a0-b0c3-6ea90f37274f_buggy.java b/tmp/d13797e7-515a-4000-b116-ec6c5293413a_fixed.java
index 7030ef0..e9a15be 100644
--- a/tmp/bc49e960-6b32-44a0-b0c3-6ea90f37274f_buggy.java
+++ b/tmp/d13797e7-515a-4000-b116-ec6c5293413a_fixed.java
@@ -1,15 +1,30 @@
     /**
-     Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
-
-     @param tags tag names to allow
-     @return this (for chaining)
+     * Add a list of allowed elements to a safelist. (If a tag is not allowed, it will be removed from the HTML.)
+     *
+     * @param tags tag names to allow
+     * @return this (for chaining)
+     * @throws ValidationException if the tag name is not supported
      */
-    public Safelist addTags(String... tags) {
+    public Safelist addTags(String... tags) throws ValidationException {
         Validate.notNull(tags);
 
         for (String tagName : tags) {
             Validate.notEmpty(tagName);
+            if (!validateTagName(tagName)) {
+                throw new ValidationException(
+                        String.format("Tag name \"%s\" is unsupported.", tagName));
+            }
             tagNames.add(TagName.valueOf(tagName));
         }
         return this;
     }
+
+    private boolean validateTagName(String tagName) {
+        // Add the logic here to validate supported tag names
+        // This method should return true if the tag name is supported, false otherwise
+        // For example:
+        return switch(tagName.toUpperCase()) {
+            case "NOSCRIPT" -> false;
+            default -> Arrays.asList("html", "body", "div").contains(tagName.toUpperCase());
+        };
+    }
\ No newline at end of file
