diff --git a/tmp/a5a5a218-46a7-483b-8ff3-066a24df6232_buggy.java b/tmp/cc799e3c-5c28-42be-abe1-a36e6df18b59_fixed.java
index 7b9216c..3b1ddc0 100644
--- a/tmp/a5a5a218-46a7-483b-8ff3-066a24df6232_buggy.java
+++ b/tmp/cc799e3c-5c28-42be-abe1-a36e6df18b59_fixed.java
@@ -1,47 +1,81 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
+
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // Reading additional attributes based on the data received
+    // It seems there are optional attributes that need to be read based on certain conditions
+    if (buf.isReadable()) {
+        if (buf.isReadable(1) && (buf.readByte() & 0x02) != 0) {
+            position.set(Position.PREFIX_TEMP + 3, buf.readShortLE() / 10.0);
+        }
+        if (buf.isReadable(1) && buf.readByte() == 0xA3) {
+            position.set(Position.KEY_GYRO, buf.readIntLE() + "");
+        }
+        if (buf.isReadable(1) && buf.readByte() == 0xAA) {
+            position.set(Position.KEY_CHARGE, true);
+        }
+
+        // Check for temperature
+        if (buf.isReadable(1) && buf.readByte() == 0x11) {
+            position.set(Position.KEY_DTCS, "Error in vehicle");
+
+            // Check for specific alerts (alarm, tamper, etc.)
+            if (buf.readByte() == 0x01) {
+                position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
+            }
+
+            // Ensure all data aligns with expected format
+            if (buf.readByte() != 0xB2) {
+                return null;
+            }
+        }
+
+        // Ensure buffer ends correctly
+        if (buf.readByte() == 0x7E && buf.readByte() == 0x7E) {
             return position;
         }
+    }
+    return null;
+}
\ No newline at end of file
