diff --git a/tmp/ec17f4fd-f2f0-4a8d-b8e7-e8c6c6cac9df_buggy.java b/tmp/42bfdf42-bef7-4ef3-9044-d27dd96b0d83_fixed.java
index 7b9216c..5ea8caa 100644
--- a/tmp/ec17f4fd-f2f0-4a8d-b8e7-e8c6c6cac9df_buggy.java
+++ b/tmp/42bfdf42-bef7-4ef3-9044-d27dd96b0d83_fixed.java
@@ -1,47 +1,60 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
-
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
+
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
+    // Assuming the sequence is consistent:
+    // Set RSSI, SATELLITES, ODOMETER.
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
+    // Read Battery
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
+    // Read Network information
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
+    // Read Product, Status, Alarm
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
+    // Read remaining attributes
     position.set(Position.KEY_STATUS, status);
 
+    // Read extra fields from payload
+    if (buf.readableBytes() > 0) {
+        byte[] extra = new byte[buf.readableBytes()];
+        buf.readBytes(extra);
+        position.addAttribute(new Attribute(Position.PREFIX_TRAILER, String.valueOf(extras)));
+    }
+
     return position;
 }
\ No newline at end of file
