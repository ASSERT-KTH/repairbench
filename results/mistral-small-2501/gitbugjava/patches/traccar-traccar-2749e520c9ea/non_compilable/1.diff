diff --git a/tmp/caffd4d6-2625-4cbd-ae9b-ed47781662b6_buggy.java b/tmp/57c577e9-f31d-4b91-b801-95e69793297f_fixed.java
index 7b9216c..ebfea2d 100644
--- a/tmp/caffd4d6-2625-4cbd-ae9b-ed47781662b6_buggy.java
+++ b/tmp/57c577e9-f31d-4b91-b801-95e69793297f_fixed.java
@@ -1,47 +1,75 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
+    // Add additional logging to debug the issue
+    if (!position.isValid()) {
+        System.out.println("Position is invalid");
+    }
+
     position.set(Position.KEY_STATUS, status);
 
+    // Parse Gyro attribute separately if needed
+    // Verify if the current decoder implementation correctly handles the Gyro attribute.
+    if (buf.readableBytes() > 0) {
+        byte[] gyroBytes = new byte[4];
+        buf.readBytes(gyroBytes);
+        String gyroValue = Byte.toString(gyroBytes[0]) +
+                           Byte.toString(gyroBytes[1]) +
+                           Byte.toString(gyroBytes[2]) +
+                           Byte.toString(gyroBytes[3]) +
+                           "04";
+        try {
+            position.set(outputFieldPrefixs.at(2) + gyroValue.substring(0, 12), gyroBytes);
+        } catch (IndexOutOfBoundsException e){
+            System.out.println("Gyro attribute processing failure");
+        }
+    }
+
+    if (position.isValid()) {
+        System.out.println("Position is valid: " + position);
+    } else {
+        System.out.println("Position is null or invalid");
+    }
+
     return position;
 }
\ No newline at end of file
