diff --git a/tmp/bc45e9bb-4f09-428e-99db-6407f007efca_buggy.java b/tmp/cccc7484-0ed4-4611-8855-51f695d6c1ef_fixed.java
index fcb460f..4cb1e61 100644
--- a/tmp/bc45e9bb-4f09-428e-99db-6407f007efca_buggy.java
+++ b/tmp/cccc7484-0ed4-4611-8855-51f695d6c1ef_fixed.java
@@ -1,183 +1,183 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
-
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
-
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-
-        buf.readUnsignedIntLE(); // remaining cache
+    buf.readUnsignedIntLE(); // cached data
     int count = buf.readUnsignedShortLE();
-
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
-
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
-
+        buf.skipBytes(2); // skip the length byte and index
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
-                    case 0x01:
+                case 0x01: // Via Point
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
-                    case 0x05:
+                case 0x05: // Energy
                     position.setValid(buf.readUnsignedByte() > 0);
+                    buf.skipBytes(1); // skip energy type
+                    buf.skipBytes(1); // skip power data
                     break;
-                    case 0x06:
+                case 0x06: // Satellite
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    buf.skipBytes(1); // skip satellite system
+                    buf.skipBytes(1); // skip status
                     break;
-                    case 0x07:
+                case 0x07: // RSSI
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
-                    case 0x14:
+                case 0x14: // Output
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
-                    case 0x15:
+                case 0x15: // Input
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
-                    case 0x97:
+                case 0x97: // Throttle
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
-                    case 0x9D:
+                case 0x9D: // Fuel
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
-                    case 0xFE69:
+                case 0xFE69: // Battery level
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
+                    if (extension) {
+                        buf.readUnsignedShort();
+                    } else {
                         buf.readUnsignedByte();
+                    }
                     break;
             }
         }
-
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
-                    case 0x08:
+                case 0x08: // Speed
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
-                    case 0x09:
+                case 0x09: // Course
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
-                    case 0x0A:
+                case 0x0A: // HDOP
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
-                    case 0x0B:
+                case 0x0B: // Altitude
                     position.setAltitude(buf.readShortLE());
                     break;
-                    case 0x16:
+                case 0x16: // ADC Channel
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
-                    case 0x19:
+                case 0x19: // Battery
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
-                    case 0x1A:
+                case 0x1A: // Power
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
-                    case 0x40:
+                case 0x40: // Event
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
-                    case 0x91:
+                case 0x91: // OBD Speed
                 case 0x92:
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
-                    case 0x98:
+                case 0x98: // Fuel Used
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
-                    case 0x99:
+                case 0x99: // RPM
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
-                    case 0x9C:
+                case 0x9C: // Coolant Temp
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
-                    case 0x9F:
+                case 0x9F: // Temperature sensor
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
-                    case 0xC9:
+                case 0xC9: // Fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
+                    if (extension) {
                         buf.readUnsignedShortLE();
+                    } else {
+                        buf.readUnsignedShortLE();
+                    }
                     break;
             }
         }
-
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
-                    case 0x0C:
+                case 0x0C: // Odometer
                 case 0x9B:
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
-                    case 0x0D:
+                case 0x0D: // Runtime
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
-                    case 0x25:
+                case 0x25: // Driver unique ID
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
-                    case 0xA0:
+                case 0xA0: // Fuel Used
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
-                    case 0xA2:
+                case 0xA2: // Fuel Consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
                     buf.readUnsignedIntLE();
                     break;
             }
         }
-
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             int length = buf.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
                     buf.readUnsignedByte(); // label
                     position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
                     break;
-                    case 0xFE31:
+                case 0xFE31: // Alarm Data
                     buf.readUnsignedByte(); // alarm protocol
                     buf.readUnsignedByte(); // alarm type
                     buf.skipBytes(length - 2);
                     break;
                 default:
                     buf.skipBytes(length);
                     break;
             }
         }
-
         positions.add(position);
     }
-
     return positions;
 }
\ No newline at end of file
