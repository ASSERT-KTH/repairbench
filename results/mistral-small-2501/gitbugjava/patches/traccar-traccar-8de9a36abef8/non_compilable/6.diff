diff --git a/tmp/5bc7ebd3-f0e9-4b2c-8707-86c69a877e39_buggy.java b/tmp/de29a76b-ec54-40a7-a697-627cd613db8f_fixed.java
index ad77f15..9f4397d 100644
--- a/tmp/5bc7ebd3-f0e9-4b2c-8707-86c69a877e39_buggy.java
+++ b/tmp/de29a76b-ec54-40a7-a697-627cd613db8f_fixed.java
@@ -1,112 +1,167 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
+    if (dataIndex == -1) {
+        // Invalid fragment format
+        return;
+    }
+
     int index = 0;
-        String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
-        } else {
-            values = fragment.substring(dataIndex + 1).split(";");
-        }
+    String[] values = fragment.substring(dataIndex + 1).split(";");
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
             position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.set(Position.KEY_SATELLITES, getIntValue(values, index++));
+            position.setLatitude(getDoubleValue(values, index++, 1));
+            if (values[index].length() > 0 && values[index].charAt(0) == 'S') {
                 position.setLatitude(-position.getLatitude());
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            index++;
+            position.setLongitude(getDoubleValue(values, index++, 1));
+            if (values[index].length() > 0 && values[index++].charAt(0) == 'W') {
                 position.setLongitude(-position.getLongitude());
             }
-                if (!values[index++].isEmpty()) {
+            if (index < values.length && !values[index++].isEmpty()) {
                 position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
+            position.setCourse(getIntValue(values, index++));
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                position.setAltitude(getIntValue(values, index++));
             }
             if (index < values.length) {
                 position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // registration status and signal strength
             position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                    getIntValue(values, index++),
+                    getIntValue(values, index++),
+                    Integer.parseInt(values[index++], 16),
+                    Integer.parseInt(values[index++], 16),
+                    getIntValue(values, index++)
+            )));
             break;
         case "COT":
             if (index < values.length) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
             if (index < values.length) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                position.set(Position.KEY_HOURS, (getIntValue(hours, 0) * 3600
+                        + (hours.length > 1 ? getIntValue(hours, 1) * 60 : 0)
+                        + (hours.length > 2 ? getIntValue(hours, 2) : 0)) * 1000);
             }
             break;
         case "ADC":
             position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
             if (index < values.length) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
+            position.set(Position.KEY_STATUS, getIntValue(values, index++, 16));
             if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                int io = getIntValue(values, index - 1, 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
             position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
             position.set("eventStatus", values[index++]);
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
             position.set("eventData", values[index++]);
             break;
         case "OBD":
             position.set("obd", values[index++]);
             break;
         case "TAG":
             position.set("tagData", values[index++]);
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                int sensorIndex = getIntValue(values, index++);
+                int dataType = getIntValue(values, index++);
                 if (dataType == 0) {
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    position.set(Position.PREFIX_TEMP + sensorIndex, getDoubleValue(values, index++));
                 }
             }
             break;
         default:
             break;
     }
 }
+
+private int getIntValue(String[] values, int index) {
+    if (index < values.length) {
+        String value = values[index];
+        if (value.isEmpty()) {
+            return 0;
+        } else {
+            return Integer.parseInt(value);
+        }
+    } else {
+        return 0;
+    }
+}
+
+private int getIntValue(String[] values, int index, int radix) {
+    if (index < values.length) {
+        String value = values[index];
+        if (value.isEmpty()) {
+            return 0;
+        } else {
+            return Integer.parseInt(value, radix);
+        }
+    } else {
+        return 0;
+    }
+}
+
+private double getDoubleValue(String[] values, int index) {
+    if (index < values.length) {
+        String value = values[index];
+        if (value.isEmpty()) {
+            return 0.0;
+        } else {
+            return Double.parseDouble(value);
+        }
+    } else {
+        return 0.0;
+    }
+}
+
+private double getDoubleValue(String[] values, int index, int startIndex) {
+    if (index < values.length) {
+        String value = values[index];
+        if (value.isEmpty() || value.length() < startIndex) {
+            return 0.0;
+        } else {
+            return Double.parseDouble(value.substring(startIndex));
+        }
+    } else {
+        return 0.0;
+    }
+}
\ No newline at end of file
