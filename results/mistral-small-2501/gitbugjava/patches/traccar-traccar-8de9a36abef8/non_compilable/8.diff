diff --git a/tmp/dc6a1cc5-6fd5-4307-a169-5685a969cf82_buggy.java b/tmp/e62542b1-f77f-4c2f-8b4c-3bc8289d3d59_fixed.java
index ad77f15..c661788 100644
--- a/tmp/dc6a1cc5-6fd5-4307-a169-5685a969cf82_buggy.java
+++ b/tmp/e62542b1-f77f-4c2f-8b4c-3bc8289d3d59_fixed.java
@@ -1,112 +1,142 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.setValid(values.length > index && values[index].equals("A"));
+            if (values.length > index + 1) {
+                position.setPositionKeySATELLITES(Integer.parseInt(values[index + 1]));
+                position.setLatitude(Double.parseDouble(values[index + 2].substring(1)));
+                if (values[index + 2].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                position.setLongitude(Double.parseDouble(values[index + 3].substring(1)));
+                if (values[index + 3].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                if (values.length > index + 3 && !values[index + 4].isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index + 4])));
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                if (values.length > index + 4) {
+                    position.setCourse(Integer.parseInt(values[index + 5]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                if (values.length > index + 5) {
+                    position.setAltitude(Integer.parseInt(values[index + 6]));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                if (values.length > index + 6) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index + 7]));
+                }
+                if (values.length > index + 7) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index + 8]));
+                }
+            } else {
+                throw new IllegalStateException("Not enough GPS data");
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index = Math.min(index + 1, values.length); // Registration status
+            index = Math.min(index + 1, values.length); // Signal strength
+            if (values.length > index + 5) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        Integer.parseInt(values[index]),
+                        Integer.parseInt(values[index + 1]),
+                        Integer.parseInt(values[index + 2], 16),
+                        Integer.parseInt(values[index + 3], 16),
+                        Integer.parseInt(values[index + 4]))));
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (values.length > index) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
-                if (index < values.length) {
+            if (values.length > index) {
                 String[] hours = values[index].split("-");
                 position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                         + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                         + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
             }
             break;
         case "ADC":
+            if (values.length > index) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+            }
+            if (values.length > index) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (values.length > index) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (values.length > index) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
+            if (values.length > index) {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            }
+            if (values.length > index + 1) {
+                int io = Integer.parseInt(values[index], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
+                if (values.length > index + 1) {
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+            }
+            if (values.length > index + 2) {
+                position.set(Position.KEY_GEOFENCE, values[index] + values[index + 1]);
+            }
+            if (values.length > index + 2) {
+                position.set("eventStatus", values[index]);
+            }
+            if (values.length > index + 3) {
+                position.set("packetType", values[index + 1]);
             }
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (values.length > index) {
+                position.set("eventData", values[index]);
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (values.length > index) {
+                position.set("obd", values[index]);
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (values.length > index) {
+                position.set("tagData", values[index]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
+                try {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
                     if (dataType == 0) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                     } else if (dataType == 1) {
                         index += 1; // temperature sensor serial number
                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                     }
+                } catch (ArrayIndexOutOfBoundsException e) {
+                    throw new IllegalStateException("Unexpected end of IWD data");
+                }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
