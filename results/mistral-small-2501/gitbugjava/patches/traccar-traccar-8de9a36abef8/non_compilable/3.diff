diff --git a/tmp/c22ba299-62da-4e40-9b4a-25f8abda8edb_buggy.java b/tmp/979da247-16c0-43ec-ac4a-be49e3bab185_fixed.java
index ad77f15..c3a15e0 100644
--- a/tmp/c22ba299-62da-4e40-9b4a-25f8abda8edb_buggy.java
+++ b/tmp/979da247-16c0-43ec-ac4a-be49e3bab185_fixed.java
@@ -1,112 +1,143 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
-        if (fragment.length() == dataIndex + 1) {
-            values = new String[0];
+    if (fragment.length() == dataIndex + 1 || dataIndex == -1) {
+        values = new String[]{};
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+            position.setValid(index < values.length && values[index].equals("A"));
+            if (index + 1 < values.length && values[index + 1] != null && !values[index + 1].isEmpty()) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index + 1]));
+            }
+            if (index + 2 < values.length && values[index + 2] != null && !values[index + 2].isEmpty()) {
+                position.setLatitude(Double.parseDouble(values[index + 2].substring(1)));
+                if (index + 3 < values.length && values[index + 3] != null && values[index + 3].charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            }
+            if (index + 4 < values.length && values[index + 4] != null && !values[index + 4].isEmpty()) {
+                position.setLongitude(Double.parseDouble(values[index + 4].substring(1)));
+                if (index + 5 < values.length && values[index + 5] != null && values[index + 5].charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+            if (index + 6 < values.length && values[index + 6] != null && !values[index + 6].isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index + 6])));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+            if (index + 7 < values.length && values[index + 7] != null && !values[index + 7].isEmpty()) {
+                position.setCourse(Integer.parseInt(values[index + 7]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+            if (index + 8 < values.length && values[index + 8] != null && !values[index + 8].isEmpty()) {
+                position.setAltitude(Integer.parseInt(values[index + 8]));
+            }
+            if (index + 9 < values.length && values[index + 9] != null && !values[index + 9].isEmpty()) {
+                position.set(Position.KEY_HDOP, Double.parseDouble(values[index + 9]));
+            }
+            if (index + 10 < values.length && values[index + 10] != null && !values[index + 10].isEmpty()) {
+                position.set(Position.KEY_VDOP, Double.parseDouble(values[index + 10]));
             }
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // registration status and signal strength
+            if (index < values.length) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        Integer.parseInt(values[index++])));
+            }
             break;
         case "COT":
-                if (index < values.length) {
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600 + (hours.length > 1
+                        ? Integer.parseInt(hours[1]) * 60 : 0) + (hours.length > 2
+                        ? Integer.parseInt(hours[2]) : 0)) * 1000);
             }
             break;
         case "ADC":
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+            }
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            }
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index++], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
+            if (index + 2 < values.length && values[index + 2] != null && values[index + 2].length() > 0) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            }
+            if (index < values.length && values[index] != null && !values[index].isEmpty()) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
+                if (index + 2 < values.length
+                        && values[index + 1] != null
+                        && values[index + 1].length() > 0
+                        && values[index + 2] != null
+                        && values[index + 2].length() > 0) {
                     int sensorIndex = Integer.parseInt(values[index++]);
                     int dataType = Integer.parseInt(values[index++]);
                     if (dataType == 0) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                        index++;
                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                     }
+                } else {
+                    break;
+                }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
