diff --git a/tmp/4f284280-c5f6-4f83-9eb4-585b500b4a6b_buggy.java b/tmp/64cfceaa-f6bb-4c8d-8e8e-914a4a34a77b_fixed.java
index 1c875ad..3225b4f 100644
--- a/tmp/4f284280-c5f6-4f83-9eb4-585b500b4a6b_buggy.java
+++ b/tmp/64cfceaa-f6bb-4c8d-8e8e-914a4a34a77b_fixed.java
@@ -1,31 +1,49 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+
+            for (int position = 0; position < matchers.size(); position++) {
+                Matcher m = matchers.get(position);
+                if (m instanceof CapturesArguments) {
+                    if (position == indexOfVararg) {
+                        Object array = invocation.getRawArguments()[position];
+                        if (array != null) {
+                            int length = java.lang.reflect.Array.getLength(array);
+                            for (int i = 0; i < length; i++) {
+                                ((CapturesArguments) m).captureFrom(java.lang.reflect.Array.get(array, i));
+                            }
+                        }
+                    } else if (position < invocation.getRawArguments().length) {
+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                    }
+                }
+            }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
+                    if (position < invocation.getRawArguments().length) {
                         ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                     }
                 }
             }
+        }
 
 //        for (int position = 0; position < matchers.size(); position++) {
 //            Matcher m = matchers.get(position);
 //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
 //                //TODO SF - this whole lot can be moved captureFrom implementation
 //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
 //                    Object array = invocation.getRawArguments()[position];
 //                    for (int i = 0; i < Array.getLength(array); i++) {
 //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
 //                    }
 //                    //since we've captured all varargs already, it does not make sense to process other matchers.
 //                    return;
 //                } else {
 //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
 //                }
 //            }
 //        }
     }
\ No newline at end of file
