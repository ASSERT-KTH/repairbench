diff --git a/tmp/a0974f4c-9098-4df4-b593-f01d7a4c7f25_buggy.java b/tmp/1a4d05d9-c42f-460c-b539-08985cec1026_fixed.java
index 1c875ad..a6494a8 100644
--- a/tmp/a0974f4c-9098-4df4-b593-f01d7a4c7f25_buggy.java
+++ b/tmp/1a4d05d9-c42f-460c-b539-08985cec1026_fixed.java
@@ -1,31 +1,53 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+            //throw new UnsupportedOperationException();
+            for (int position = 0; position < matchers.size(); position++) {
+                Matcher m = matchers.get(position);
+                if (m instanceof CapturesArguments) {
+                    if (position < invocation.getRawArguments().length) {
+                        Object[] rawArguments = invocation.getRawArguments();
+                        if (rawArguments.length > 0) {
+                            Object vararg = rawArguments[position];
+                            if (vararg != null && vararg.getClass().isArray()) {
+                                int length = java.lang.reflect.Array.getLength(vararg);
+                                for (int i = 0; i < length; i++) {
+                                    Object element = java.lang.reflect.Array.get(vararg, i);
+                                    ((CapturesArguments) m).captureFrom(element);
+                                }
+                            } else {
+                                ((CapturesArguments) m).captureFrom(vararg);
+                            }
+                        }
+                    }
+                }
+            }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
+                    if (position < invocation.getArguments().length) {
                         ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                     }
                 }
             }
+        }
 
 //        for (int position = 0; position < matchers.size(); position++) {
 //            Matcher m = matchers.get(position);
 //            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
 //                //TODO SF - this whole lot can be moved captureFrom implementation
 //                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
 //                    Object array = invocation.getRawArguments()[position];
 //                    for (int i = 0; i < Array.getLength(array); i++) {
 //                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
 //                    }
 //                    //since we've captured all varargs already, it does not make sense to process other matchers.
 //                    return;
 //                } else {
 //                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
 //                }
 //            }
 //        }
     }
\ No newline at end of file
