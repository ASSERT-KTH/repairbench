diff --git a/tmp/7e3acd4e-c993-4984-a102-8e22f6803c9d_buggy.java b/tmp/51b049e2-8033-44bd-8e5a-fe6e52102a04_fixed.java
index 08093b4..93ae99d 100644
--- a/tmp/7e3acd4e-c993-4984-a102-8e22f6803c9d_buggy.java
+++ b/tmp/51b049e2-8033-44bd-8e5a-fe6e52102a04_fixed.java
@@ -1,42 +1,40 @@
     /**
      * Writes a PAX extended header with the given map as contents.
      * @since 1.4
      */
     void writePaxHeaders(String entryName,
                          Map<String, String> headers) throws IOException {
         String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
             // TarEntry's constructor would think this is a directory
             // and not allow any data to be written
         if (name.length() >= TarConstants.NAMELEN) {
             name = name.substring(0, TarConstants.NAMELEN - 1);
         }
         TarArchiveEntry pex = new TarArchiveEntry(name,
                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
         StringWriter w = new StringWriter();
         for (Map.Entry<String, String> h : headers.entrySet()) {
             String key = h.getKey();
             String value = h.getValue();
             int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+                + 3 /* blank, equals and newline */ ;
             String line = len + " " + key + "=" + value + "\n";
             int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
+            int lineLength = String.valueOf(actualLength).length();
+
+            while (String.valueOf(actualLength).length() != lineLength) {
+                len = key.length() + value.length() + 3;
+                line = actualLength + " " + key + "=" + value + "\n";
                 actualLength = line.getBytes(CharsetNames.UTF_8).length;
+                lineLength = String.valueOf(actualLength).length();
             }
+            line = actualLength + " " + key + "=" + value + "\n";
             w.write(line);
         }
         byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
         pex.setSize(data.length);
         putArchiveEntry(pex);
         write(data);
         closeArchiveEntry();
     }
\ No newline at end of file
