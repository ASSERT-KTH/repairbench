diff --git a/tmp/4389c4fa-f9da-4937-afe0-a387b9d368b7_buggy.java b/tmp/0aa5bf6d-87ab-475c-801c-e9adccc5e084_fixed.java
index 21f64c6..bba94e0 100644
--- a/tmp/4389c4fa-f9da-4937-afe0-a387b9d368b7_buggy.java
+++ b/tmp/0aa5bf6d-87ab-475c-801c-e9adccc5e084_fixed.java
@@ -1,23 +1,30 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+            if (offset >= length)
+                return -1; // past the end;
             int i = offset + 1;
-            int last = i + seq.length()-1;
+            int last = i + seqLen - 1;
+            if (last > length)
+                continue;
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                int j = 1;
+                for (; i < last && j < seqLen && seq.charAt(j) == input[i]; i++, j++);
+                if (j == seqLen) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
