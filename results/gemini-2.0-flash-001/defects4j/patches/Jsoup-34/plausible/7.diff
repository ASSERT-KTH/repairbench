diff --git a/tmp/abcb48b3-6466-4cd0-81e3-41c517dfa8a3_buggy.java b/tmp/dce7e502-ee89-4526-8b88-c48105084e21_fixed.java
index 21f64c6..7f1a39b 100644
--- a/tmp/abcb48b3-6466-4cd0-81e3-41c517dfa8a3_buggy.java
+++ b/tmp/dce7e502-ee89-4526-8b88-c48105084e21_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        int seqLen = seq.length();
+        for (int offset = pos; offset <= length - seqLen; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            if (startChar != input[offset]) {
+                while (++offset <= length - seqLen && startChar != input[offset]);
+            }
+            if (offset <= length - seqLen) {
                 int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                int last = i + seqLen - 1;
+                if (last > length)
+                    continue;
+
+                int j = 1;
+                while (i < last && j < seqLen && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
+                }
+                if (j == seqLen) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
