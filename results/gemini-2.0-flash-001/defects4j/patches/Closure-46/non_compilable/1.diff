diff --git a/tmp/a3df96d8-de25-4731-93fe-dbc023670d1b_buggy.java b/tmp/4c84d88d-5179-4be7-85dc-4fd9a26bff67_fixed.java
index 46817a7..b2a70a6 100644
--- a/tmp/a3df96d8-de25-4731-93fe-dbc023670d1b_buggy.java
+++ b/tmp/4c84d88d-5179-4be7-85dc-4fd9a26bff67_fixed.java
@@ -1,16 +1,27 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    // Find properties in common.
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (that.toMaybeRecordType().hasProperty(property)) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType =
+            that.toMaybeRecordType().getPropertyType(property);
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(
+              property, thisPropertyType, getPropertyNode(property));
         }
       }
-    return builder.build();
+    }
+
+    JSType result = builder.build();
+    if (result.getPropertiesCount() > 0) {
+      return result;
+    } else {
+      return registry.createUnionType(this, that);
+    }
   }
\ No newline at end of file
