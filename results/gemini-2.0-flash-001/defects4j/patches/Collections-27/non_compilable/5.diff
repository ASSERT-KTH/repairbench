diff --git a/tmp/20915b43-4406-4b73-b425-6791b3425c10_buggy.java b/tmp/865a7a02-4087-42b2-8313-c1698790723d_fixed.java
index e69de29..bc0119c 100644
--- a/tmp/20915b43-4406-4b73-b425-6791b3425c10_buggy.java
+++ b/tmp/865a7a02-4087-42b2-8313-c1698790723d_fixed.java
@@ -0,0 +1,178 @@
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiValuedMap;
+
+/**
+ * {@link MultiValuedMap} that decorates another {@link MultiValuedMap} to provide additional behavior.
+ * <p>
+ * Subclasses override key methods to inject their behavior.
+ * </p>
+ *
+ * @param <K> the type of the keys in the map
+ * @param <V> the type of the values in the map
+ * @since 4.1
+ */
+public class MultiValueMap<K, V> implements MultiValuedMap<K, V> {
+
+    private static final long serialVersionUID = -8128336489314771832L;
+
+    private final Map<K, Collection<V>> map;
+    private final Class<? extends Collection<V>> collectionClass;
+
+    public MultiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        this.map = map;
+        this.collectionClass = collectionClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    @Override
+    public void clear() {
+        map.clear();
+    }
+
+    @Override
+    public boolean containsKey(final Object key) {
+        return map.containsKey(key);
+    }
+
+    @Override
+    public boolean containsValue(final Object value) {
+        for (final Collection<V> coll : map.values()) {
+            if (coll.contains(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public boolean containsMapping(final Object key, final Object value) {
+        final Collection<V> coll = map.get(key);
+        if (coll == null) {
+            return false;
+        }
+        return coll.contains(value);
+    }
+
+    @Override
+    public Collection<Map.Entry<K, V>> entries() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public Collection<V> get(final K key) {
+        return map.get(key);
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return map.isEmpty();
+    }
+
+    @Override
+    public Set<K> keySet() {
+        return map.keySet();
+    }
+
+    @Override
+    public boolean put(final K key, final V value) {
+        Collection<V> coll = map.get(key);
+        if (coll == null) {
+            try {
+                coll = collectionClass.getDeclaredConstructor().newInstance();
+            } catch (final Exception e) {
+                throw new UnsupportedOperationException("Cannot instantiate collection class: " + collectionClass.getName(), e);
+            }
+            map.put(key, coll);
+        }
+        return coll.add(value);
+    }
+
+    @Override
+    public boolean putAll(final K key, final Iterable<? extends V> values) {
+        if (values == null) {
+            return false;
+        }
+        boolean changed = false;
+        for (final V value : values) {
+            changed |= put(key, value);
+        }
+        return changed;
+    }
+
+    @Override
+    public boolean putAll(final Map<? extends K, ? extends V> map) {
+        if (map == null) {
+            return false;
+        }
+        boolean changed = false;
+        for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
+            changed |= put(entry.getKey(), entry.getValue());
+        }
+        return changed;
+    }
+
+    @Override
+    public Collection<V> remove(final Object key) {
+        return map.remove(key);
+    }
+
+    @Override
+    public boolean removeMapping(final Object key, final Object value) {
+        final Collection<V> coll = map.get(key);
+        if (coll == null) {
+            return false;
+        }
+        return coll.remove(value);
+    }
+
+    @Override
+    public int size() {
+        int size = 0;
+        for (final Collection<V> coll : map.values()) {
+            size += coll.size();
+        }
+        return size;
+    }
+
+    @Override
+    public Collection<V> values() {
+        final List<V> allValues = new ArrayList<>();
+        for (final Collection<V> coll : map.values()) {
+            allValues.addAll(coll);
+        }
+        return Collections.unmodifiableCollection(allValues);
+    }
+
+    @Override
+    public Map<K, Collection<V>> asMap() {
+        return Collections.unmodifiableMap(map);
+    }
+
+    @Override
+    public int hashCode() {
+        return map.hashCode();
+    }
+
+    @Override
+    public boolean equals(final Object obj) {
+        if (obj == this) {
+            return true;
+        }
+        if (!(obj instanceof MultiValueMap)) {
+            return false;
+        }
+        final MultiValueMap<?, ?> other = (MultiValueMap<?, ?>) obj;
+        return map.equals(other.map);
+    }
+
+    @Override
+    public String toString() {
+        return map.toString();
+    }
+
+}
\ No newline at end of file
