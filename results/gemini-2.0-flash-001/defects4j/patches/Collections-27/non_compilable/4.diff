diff --git a/tmp/9ff0fcb5-afc5-486a-ba89-67d751cdd389_buggy.java b/tmp/f162e44e-ce68-4b03-be6f-1f783c80cc21_fixed.java
index e69de29..d9177e5 100644
--- a/tmp/9ff0fcb5-afc5-486a-ba89-67d751cdd389_buggy.java
+++ b/tmp/f162e44e-ce68-4b03-be6f-1f783c80cc21_fixed.java
@@ -0,0 +1,90 @@
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiValuedMap;
+
+public class MultiValueMap<K, V> extends AbstractMultiValueMap<K, V> {
+
+    /** Serializable version identifier */
+    private static final long serialVersionUID = 20161114L;
+
+    /**
+     * Creates a new MultiValueMap backed by a HashMap
+     */
+    public MultiValueMap() {
+        super(new HashMap<K, Collection<V>>(), null);
+    }
+
+    /**
+     * Creates a new MultiValueMap which copies the contents of another
+     * MultiValueMap.
+     *
+     * @param map the MultiValueMap whose contents are copied
+     * @throws NullPointerException if map is null
+     */
+    public MultiValueMap(final MultiValuedMap<? extends K, ? extends V> map) {
+        super(new HashMap<K, Collection<V>>(), null);
+        putAll(map);
+    }
+
+    /**
+     * Creates a new MultiValueMap backed by the specified Map which
+     * returns collections of type <code>collectionClass</code> when
+     * values are added.
+     *
+     * @param map the Map to wrap
+     * @param collectionClass the class to create collections of
+     * @since 4.1
+     */
+    protected MultiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map, collectionClass);
+    }
+
+    /**
+     * Creates a new MultiValueMap backed by the specified Map which
+     * returns collections of type <code>collectionClass</code> when
+     * values are added.
+     * <p>
+     * If the map is a {@link SortedMap}, the returned map is also a {@link SortedMap}.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map the Map to wrap
+     * @param collectionClass the class to create collections of
+     * @return a new {@link MultiValueMap}
+     * @throws IllegalArgumentException if collectionClass is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        if (map instanceof SortedMap) {
+            return new SortedMultiValueMap<>(map, collectionClass);
+        }
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    /**
+     * Creates a new MultiValueMap backed by the specified Map which
+     * returns collections of type <code>collectionClass</code> when
+     * values are added.
+     * <p>
+     * If the map is a {@link SortedMap}, the returned map is also a {@link SortedMap}.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map the Map to wrap
+     * @param collectionClass the class to create collections of
+     * @param clone true to clone the map
+     * @return a new {@link MultiValueMap}
+     * @throws IllegalArgumentException if collectionClass is null
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass, final boolean clone) {
+        if (clone) {
+            if (map instanceof SortedMap) {
+                return new SortedMultiValueMap<>(new TreeMap<>(map), collectionClass);
+            }
+            return new MultiValueMap<>(new HashMap<>(map), collectionClass);
+        }
+        return multiValueMap(map, collectionClass);
+    }
+}
\ No newline at end of file
