diff --git a/tmp/b1c2acaa-ceec-46e2-bb3c-5504f3be5198_buggy.java b/tmp/e637b3e6-97dc-4fce-8a9c-6c2c0f47ce6c_fixed.java
index e69de29..e7fb7e7 100644
--- a/tmp/b1c2acaa-ceec-46e2-bb3c-5504f3be5198_buggy.java
+++ b/tmp/e637b3e6-97dc-4fce-8a9c-6c2c0f47ce6c_fixed.java
@@ -0,0 +1,69 @@
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiValuedMap;
+
+public class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {
+
+    private static final long serialVersionUID = 20160307L;
+
+    /**
+     * Creates a new MultiValueMap backed by a HashMap.
+     */
+    public MultiValueMap() {
+        super(new java.util.HashMap<K, Collection<V>>());
+    }
+
+    /**
+     * Creates a new MultiValueMap backed by the specified Map.
+     *
+     * @param map  the Map to use as a container
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {
+        super(map);
+    }
+
+    /**
+     * Creates a new MultiValueMap which copies the contents of another map
+     * converting it to a multi-value map in the process.
+     *
+     * @param map  the Map whose contents are copied
+     * @param valueClass  the class of the collection used for values
+     * @throws UnsupportedOperationException if the map is read-only
+     * @throws IllegalArgumentException if the valueClass is null
+     * @since 4.1
+     */
+    public MultiValueMap(final Map<K, V> map, final Class<? extends Collection<V>> valueClass) {
+        super(map, valueClass);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new MultiValueMap using the supplied Map and Collection
+     * implementations.
+     *
+     * @param map  the Map to use as a container
+     * @param collectionClass  the class of the Collection used for values
+     * @return a new MultiValueMap
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        final MultiValueMap<K, V> mvp = new MultiValueMap<K, V>(map);
+        mvp.setCollectionClass(collectionClass);
+        return mvp;
+    }
+
+    /**
+     * Creates a new MultiValueMap using the supplied Map and Collection
+     * implementations.
+     *
+     * @param map  the Map whose contents are copied
+     * @param collectionClass  the class of the Collection used for values
+     * @return a new MultiValueMap
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, V> map, final Class<? extends Collection<V>> collectionClass) {
+        final MultiValueMap<K, V> mvp = new MultiValueMap<K, V>(map, collectionClass);
+        return mvp;
+    }
+}
\ No newline at end of file
