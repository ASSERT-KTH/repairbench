diff --git a/tmp/adbc92fa-6142-4958-99f3-fb7e7b32e634_buggy.java b/tmp/e057bff7-6a4a-456f-8814-7872de717bc0_fixed.java
index e69de29..db8b09c 100644
--- a/tmp/adbc92fa-6142-4958-99f3-fb7e7b32e634_buggy.java
+++ b/tmp/e057bff7-6a4a-456f-8814-7872de717bc0_fixed.java
@@ -0,0 +1,699 @@
+public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiValuedMap<K, V>, Serializable {
+
+    /** The default collection class. */
+    private static final Class<? extends Collection> DEFAULT_COLLECTION_CLASS = ArrayList.class;
+
+    /** Serialization version */
+    private static final long serialVersionUID = -224210336603061264L;
+
+    /** The collection class to use. */
+    private final Class<? extends Collection> collectionClass;
+
+    /**
+     * Creates a new MultiValueMap that uses an {@link ArrayList}
+     * as the collection for each value.
+     */
+    public MultiValueMap() {
+        this(new HashMap<K, Object>(), DEFAULT_COLLECTION_CLASS);
+    }
+
+    /**
+     * Creates a new MultiValueMap that uses an {@link ArrayList}
+     * as the collection for each value.
+     *
+     * @param map  the Map whose values are to be added to the new MultiValueMap.
+     */
+    public MultiValueMap(final Map<? extends K, ? extends V> map) {
+        this(new HashMap<K, Object>(), DEFAULT_COLLECTION_CLASS);
+        putAll(map);
+    }
+
+    /**
+     * Creates a new MultiValueMap which copies the given map.
+     *
+     * @param map  the Map whose values are to be added to the new MultiValueMap.
+     * @param collectionClass  the collection class to use for storing the values.
+     */
+    public MultiValueMap(final Map<K, Object> map, final Class<? extends Collection> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new IllegalArgumentException("The collection class must not be null");
+        }
+        this.collectionClass = collectionClass;
+    }
+
+    /**
+     * Creates a new MultiValueMap which copies the given map.
+     *
+     * @param map  the Map whose values are to be added to the new MultiValueMap.
+     */
+    protected MultiValueMap(final Map<K, Object> map) {
+        super(map);
+        this.collectionClass = DEFAULT_COLLECTION_CLASS;
+    }
+
+    /**
+     * Creates a map which wraps the specified map and will create collections
+     * of type <Code>collectionClass</Code> to hold the data.
+     * <p>
+     * If the map is already a {@link MultiValueMap} it is returned directly.
+     *
+     * @param <K> the key type
+     * @param <V> the value type
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the class to use for collection values, must not be null
+     * @return a new MultiValueMap
+     * @throws IllegalArgumentException if map is null
+     * @throws IllegalArgumentException if collectionClass is null
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, Object> map, final Class<? extends Collection> collectionClass) {
+        if (map == null) {
+            throw new IllegalArgumentException("The map must not be null");
+        }
+        if (collectionClass == null) {
+            throw new IllegalArgumentException("The collection class must not be null");
+        }
+        if (map instanceof MultiValueMap) {
+            return (MultiValueMap<K, V>) map;
+        }
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Write the map out using a custom routine.
+     * @param out the output stream
+     * @throws IOException if an error occurs while writing to the stream
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     * @param in the input stream
+     * @throws IOException if an error occurs while reading from the stream
+     * @throws ClassNotFoundException if an object read from the stream can not be loaded
+     */
+    @SuppressWarnings("unchecked")
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        map = (Map<K, Object>) in.readObject();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the collection that is stored under the specified key.
+     * <p>
+     * If the key is not in the map, a new empty collection is created,
+     * added to the map and returned. This contrasts with {@link #get(Object)}
+     * which returns null if the key is not in the map.
+     *
+     * @param key  the key to retrieve the collection for
+     * @return the collection of values for this key, will not be null
+     */
+    @SuppressWarnings("unchecked")
+    private Collection<V> getCollection(final K key) {
+        Object coll = decorated().get(key);
+        if (coll == null) {
+            coll = createCollection();
+            decorated().put(key, coll);
+        }
+        return (Collection<V>) coll;
+    }
+
+    /**
+     * Creates a new instance of the collection that will hold the values.
+     * <p>
+     * This uses the {@link #collectionClass} field to create the collection.
+     *
+     * @return the new collection
+     * @throws UnsupportedOperationException if the collection class cannot be instantiated
+     */
+    protected Collection<V> createCollection() {
+        try {
+            return collectionClass.newInstance();
+        } catch (final InstantiationException ex) {
+            throw new UnsupportedOperationException("Cannot instantiate collection class: " + collectionClass.getName() + ", message: " + ex.getMessage());
+        } catch (final IllegalAccessException ex) {
+            throw new UnsupportedOperationException("Cannot instantiate collection class: " + collectionClass.getName() + ", message: " + ex.getMessage());
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the total size of the map by counting all the values.
+     *
+     * @return the total size of the map
+     */
+    @Override
+    public int size() {
+        int total = 0;
+        for (final Object value : decorated().values()) {
+            total += ((Collection<?>) value).size();
+        }
+        return total;
+    }
+
+    /**
+     * Checks whether the map is empty.
+     *
+     * @return true if the map is empty
+     */
+    @Override
+    public boolean isEmpty() {
+        return decorated().isEmpty() || size() == 0;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Contains value method that checks the entire collection of values
+     * against the value being searched for.
+     *
+     * @param value  the value to search for
+     * @return true if the map contains the value
+     */
+    @Override
+    public boolean containsValue(final Object value) {
+        for (final Object coll : decorated().values()) {
+            if (((Collection<?>) coll).contains(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Gets the collection of values associated with the specified key.
+     * <p>
+     * This method returns <code>null</code> if the key is not present in the
+     * map. If you require a non-null result, use {@link #getCollection(Object)}.
+     *
+     * @param key  the key to retrieve
+     * @return the collection of values, or null if no values map to the key
+     */
+    @Override
+    public Object get(final Object key) {
+        return decorated().get(key);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds the value to the collection associated with the specified key.
+     * <p>
+     * Unlike a normal <code>Map</code> the previous value is not replaced.
+     * Instead the new value is added to the collection of values on the key.
+     *
+     * @param key  the key to add the value to
+     * @param value  the value to add
+     * @return the value previously mapped to the key, null if none
+     */
+    @Override
+    public V put(final K key, final Object value) {
+        final Collection<V> coll = getCollection(key);
+        final boolean modified = coll.add((V) value);
+        return modified ? null : (V) value;
+    }
+
+    /**
+     * Removes a specific value from the map.
+     * <p>
+     * The item is removed from the collection mapped to the specified key.
+     * Other values attached to that key are unaffected.
+     * <p>
+     * If the last value for a key is removed, the key is also removed
+     * from the map.
+     *
+     * @param key  the key to remove from
+     * @param value  the value to remove
+     * @return true if the mapping was removed, false otherwise
+     */
+    @Override
+    public boolean removeMapping(final Object key, final Object value) {
+        final Collection<V> coll = getCollection((K) key);
+        if (coll == null) {
+            return false;
+        }
+        final boolean modified = coll.remove(value);
+        if (coll.isEmpty()) {
+            remove(key);
+        }
+        return modified;
+    }
+
+    /**
+     * Removes all values associated with the specified key.
+     * <p>
+     * You can also remove the values via the {@link #get(Object)} method.
+     *
+     * @param key  the key to remove values from
+     * @return the <code>Collection</code> of values that was removed, or null if none found.
+     */
+    @Override
+    public Collection<V> remove(final Object key) {
+        Collection<V> coll = (Collection<V>) decorated().remove(key);
+        return coll;
+    }
+
+    /**
+     * Copies all of the mappings from the specified map to this map.
+     * <p>
+     * This will replace any existing values for a key with the values from
+     * the specified map. Existing values will be removed.
+     *
+     * @param map  the map to copy
+     */
+    @Override
+    public void putAll(final Map<? extends K, ? extends V> map) {
+        if (map instanceof MultiValuedMap) {
+            for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
+                final K key = entry.getKey();
+                final Object value = entry.getValue();
+                put(key, value);
+            }
+        } else {
+            for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
+                final K key = entry.getKey();
+                final V value = entry.getValue();
+                put(key, value);
+            }
+        }
+    }
+
+    /**
+     * Removes all mappings from this map.
+     */
+    @Override
+    public void clear() {
+        decorated().clear();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a collection containing all the values in the map.
+     * <p>
+     * This returns a collection of the combined values.
+     *
+     * @return a collection view of the values contained in this map
+     */
+    @Override
+    public Collection<V> values() {
+        return new ValuesView<V>(this);
+    }
+
+    /**
+     * Gets a set view of the keys contained in this map.
+     * <p>
+     * The set is backed by the map, so changes to the map are reflected in
+     * the set, and vice-versa. If the map is modified while an iteration
+     * over the set is in progress (except through the iterator's remove
+     * operation), the results of the iteration are undefined.
+     * <p>
+     * The set supports element removal, which removes the corresponding
+     * mapping from the map, via the <code>Iterator.remove</code>,
+     * <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code>,
+     * and <code>clear</code> operations. It does not support the add or addAll
+     * operations.
+     *
+     * @return a set view of the keys contained in this map
+     */
+    @Override
+    public Set<K> keySet() {
+        return decorated().keySet();
+    }
+
+    /**
+     * Gets a set view of the mappings contained in this map.
+     * <p>
+     * Each element in the set is a Map.Entry. The set is backed by the
+     * map, so changes to the map are reflected in the set, and vice-versa.
+     * If the map is modified while an iteration over the set is in progress
+     * (except through the iterator's remove operation, or through the
+     * setValue operation on a map entry returned by the iterator) the
+     * results of the iteration are undefined.
+     * <p>
+     * The set supports element removal, which removes the corresponding
+     * mapping from the map, via the <code>Iterator.remove</code>,
+     * <code>Set.remove</code>, <code>removeAll</code>, <code>retainAll</code>,
+     * and <code>clear</code> operations. It does not support the add or addAll
+     * operations. The setValue operation on the Map.Entry is supported.
+     *
+     * @return a set view of the mappings contained in this map
+     */
+    @Override
+    public Set<Map.Entry<K, V>> entrySet() {
+        return new EntrySet<K, V>(this);
+    }
+
+    /**
+     * Inner class that provides a view of the values.
+     */
+    private static class ValuesView<V> extends AbstractCollection<V> {
+
+        /** The parent map */
+        private final MultiValueMap<?, V> map;
+
+        /**
+         * Constructor.
+         * @param map the parent map
+         */
+        protected ValuesView(final MultiValueMap<?, V> map) {
+            this.map = map;
+        }
+
+        /**
+         * @return the size of this collection
+         */
+        @Override
+        public int size() {
+            return map.size();
+        }
+
+        /**
+         * @return true if this collection is empty
+         */
+        @Override
+        public boolean isEmpty() {
+            return map.isEmpty();
+        }
+
+        /**
+         * @param value the value to search for
+         * @return true if this collection contains the value
+         */
+        @Override
+        public boolean contains(final Object value) {
+            return map.containsValue(value);
+        }
+
+        /**
+         * @return an iterator over this collection
+         */
+        @Override
+        public Iterator<V> iterator() {
+            return new MultiValueMapIterator<V>(map);
+        }
+    }
+
+    /**
+     * Inner class that provides an iterator.
+     */
+    private static class MultiValueMapIterator<V> implements Iterator<V> {
+
+        /** The parent map */
+        private final Map<?, Object> map;
+        /** The collection iterator */
+        private Iterator<?> collectionIterator;
+        /** The main iterator */
+        private final Iterator<?> iterator;
+        /** The last returned value */
+        private Object lastValue;
+
+        /**
+         * Constructor.
+         * @param map the map to iterate over
+         */
+        protected MultiValueMapIterator(final MultiValueMap<?, V> map) {
+            this.map = map.decorated();
+            iterator = this.map.values().iterator();
+            collectionIterator = null;
+        }
+
+        /**
+         * @return true if there are more values
+         */
+        @Override
+        public boolean hasNext() {
+            if (collectionIterator != null && collectionIterator.hasNext()) {
+                return true;
+            }
+            if (iterator.hasNext()) {
+                collectionIterator = ((Collection<?>) iterator.next()).iterator();
+                return hasNext();
+            }
+            return false;
+        }
+
+        /**
+         * @return the next value in the iteration
+         */
+        @Override
+        public V next() {
+            if (hasNext() == false) {
+                throw new NoSuchElementException("No next() entry in the iteration");
+            }
+            lastValue = collectionIterator.next();
+            return (V) lastValue;
+        }
+
+        /**
+         * Removes the last returned element via the Collection iterator.
+         */
+        @Override
+        public void remove() {
+            if (lastValue == null) {
+                throw new IllegalStateException("remove() can only be called once after next()");
+            }
+            collectionIterator.remove();
+            lastValue = null;
+        }
+    }
+
+    /**
+     * Inner class that provides a view of the entry set.
+     */
+    private static class EntrySet<K, V> extends AbstractSet<Map.Entry<K, V>> {
+
+        /** The parent map */
+        private final MultiValueMap<K, V> map;
+
+        /**
+         * Constructor.
+         * @param map the parent map
+         */
+        protected EntrySet(final MultiValueMap<K, V> map) {
+            this.map = map;
+        }
+
+        /**
+         * @return the size of the set
+         */
+        @Override
+        public int size() {
+            return map.size();
+        }
+
+        /**
+         * @return true if this set is empty
+         */
+        @Override
+        public boolean isEmpty() {
+            return map.isEmpty();
+        }
+
+        /**
+         * @return an iterator over the set
+         */
+        @Override
+        public Iterator<Map.Entry<K, V>> iterator() {
+            return new MultiValueMapEntryIterator<K, V>(map);
+        }
+
+        /**
+         * @param obj the object to search for
+         * @return true if this set contains the object
+         */
+        @Override
+        public boolean contains(final Object obj) {
+            if (obj instanceof Map.Entry == false) {
+                return false;
+            }
+            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;
+            final Object key = entry.getKey();
+            if (map.containsKey(key) == false) {
+                return false;
+            }
+            final Object value = entry.getValue();
+            return map.getCollection((K) key).contains(value);
+        }
+
+        /**
+         * Removes the specified mapping from the map.
+         * @param obj the mapping to remove
+         * @return true if the mapping was removed
+         */
+        @Override
+        public boolean remove(final Object obj) {
+            if (obj instanceof Map.Entry == false) {
+                return false;
+            }
+            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;
+            final Object key = entry.getKey();
+            if (map.containsKey(key) == false) {
+                return false;
+            }
+            final Object value = entry.getValue();
+            return map.removeMapping(key, value);
+        }
+    }
+
+    /**
+     * Inner class that provides an iterator over the map.
+     */
+    private static class MultiValueMapEntryIterator<K, V> implements Iterator<Map.Entry<K, V>> {
+
+        /** The parent map */
+        private final MultiValueMap<K, V> map;
+        /** The map entry iterator */
+        private Iterator<Map.Entry<K, Object>> entryIterator;
+        /** The key of the current entry */
+        private Map.Entry<K, Object> currentEntry;
+        /** The collection iterator */
+        private Iterator<V> collectionIterator;
+        /** The last returned entry */
+        private MultiValueMapEntry<K, V> lastEntry;
+
+        /**
+         * Constructor.
+         * @param map the map to iterate over
+         */
+        protected MultiValueMapEntryIterator(final MultiValueMap<K, V> map) {
+            this.map = map;
+            this.entryIterator = map.decorated().entrySet().iterator();
+            this.currentEntry = null;
+            this.collectionIterator = null;
+        }
+
+        /**
+         * @return true if there is another entry in the iteration
+         */
+        @Override
+        public boolean hasNext() {
+            if (collectionIterator != null && collectionIterator.hasNext()) {
+                return true;
+            }
+            if (entryIterator.hasNext()) {
+                currentEntry = entryIterator.next();
+                @SuppressWarnings("unchecked")
+                final Collection<V> coll = (Collection<V>) currentEntry.getValue();
+                collectionIterator = coll.iterator();
+                return hasNext();
+            }
+            return false;
+        }
+
+        /**
+         * @return the next entry in the iteration
+         */
+        @Override
+        public Map.Entry<K, V> next() {
+            if (hasNext() == false) {
+                throw new NoSuchElementException("No next() entry in the iteration");
+            }
+            final K key = currentEntry.getKey();
+            final V value = collectionIterator.next();
+            lastEntry = new MultiValueMapEntry<K, V>(key, value);
+            return lastEntry;
+        }
+
+        /**
+         * Removes the last returned entry via the Collection iterator.
+         */
+        @Override
+        public void remove() {
+            if (lastEntry == null) {
+                throw new IllegalStateException("remove() can only be called once after next()");
+            }
+            collectionIterator.remove();
+            if (((Collection<?>) currentEntry.getValue()).isEmpty()) {
+                entryIterator.remove();
+            }
+            lastEntry = null;
+        }
+    }
+
+    /**
+     * Inner class that represents a map entry.
+     */
+    private static class MultiValueMapEntry<K, V> implements Map.Entry<K, V> {
+
+        /** The key */
+        private final K key;
+        /** The value */
+        private V value;
+
+        /**
+         * Constructor.
+         * @param key the key
+         * @param value the value
+         */
+        protected MultiValueMapEntry(final K key, final V value) {
+            this.key = key;
+            this.value = value;
+        }
+
+        /**
+         * @return the key
+         */
+        @Override
+        public K getKey() {
+            return key;
+        }
+
+        /**
+         * @return the value
+         */
+        @Override
+        public V getValue() {
+            return value;
+        }
+
+        /**
+         * Sets the value.
+         * @param value the new value
+         * @return the old value
+         */
+        @Override
+        public V setValue(final V value) {
+            final V oldValue = this.value;
+            this.value = value;
+            return oldValue;
+        }
+
+        /**
+         * @param obj the object to compare to
+         * @return true if the entries are equal
+         */
+        @Override
+        public boolean equals(final Object obj) {
+            if (obj == this) {
+                return true;
+            }
+            if (obj instanceof Map.Entry == false) {
+                return false;
+            }
+            final Map.Entry<?, ?> other = (Map.Entry<?, ?>) obj;
+            return (key == null ? other.getKey() == null : key.equals(other.getKey())) &&
+                   (value == null ? other.getValue() == null : value.equals(other.getValue()));
+        }
+
+        /**
+         * @return a suitable hash code
+         */
+        @Override
+        public int hashCode() {
+            return (key == null ? 0 : key.hashCode()) ^
+                   (value == null ? 0 : value.hashCode());
+        }
+
+        /**
+         * @return a string representation of the entry
+         */
+        @Override
+        public String toString() {
+            return new StringBuilder().append(getKey()).append("=").append(getValue()).toString();
+        }
+    }
+
+}
\ No newline at end of file
