diff --git a/tmp/124873b3-f288-4052-a70d-66b9e923639b_buggy.java b/tmp/ee1e8abb-a874-47d6-9603-a1789e1cc0d1_fixed.java
index e69de29..7e8d5b4 100644
--- a/tmp/124873b3-f288-4052-a70d-66b9e923639b_buggy.java
+++ b/tmp/ee1e8abb-a874-47d6-9603-a1789e1cc0d1_fixed.java
@@ -0,0 +1,136 @@
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.commons.collections4.MultiValuedMap;
+
+/**
+ * {@code MultiValueMap} is a map that allows multiple values to be associated with a key.
+ * <p>
+ * It decorates a {@link Map} to provide simplified multi-value behaviour.
+ * The Map contains keys and a collection of values.
+ * When you put a key/value pair into the map, the value is added to the collection
+ * at that key.
+ * </p>
+ * <p>
+ * For example:
+ * </p>
+ * <pre>
+ * MultiValueMap&lt;String, Integer&gt; map = new MultiValueMap&lt;&gt;();
+ * map.put("A", 1);
+ * map.put("A", 2);
+ * map.put("B", 3);
+ * Collection&lt;Integer&gt; coll = map.getCollection("A");
+ * System.out.println(coll);  // prints "[1, 2]"
+ * </pre>
+ * <p>
+ * <b>Limitations:</b>
+ * </p>
+ * <ul>
+ *   <li>If the map contains null keys, then you won't be able to use the
+ *       {@link #getCollection(Object)} method. It is possible to overcome this limitation
+ *       by using {@link #containsKey(Object)} to check for null keys.
+ *   <li>When the {@link #clone()} method is used, the clone will refer to the
+ *       same collection instance as the original. This is a shallow clone and
+ *       is provided for backwards compatibility only.
+ * </ul>
+ *
+ * @param <K> the type of the keys in this map
+ * @param <V> the type of the values in this map
+ * @since 3.0
+ */
+public class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> implements MultiValuedMap<K, V> {
+
+    /**
+     * Creates a new MultiValueMap that uses a HashMap as the underlying map.
+     */
+    public MultiValueMap() {
+        super(new java.util.HashMap<K, Collection<V>>(), null);
+    }
+
+    /**
+     * Creates a new MultiValueMap using the supplied Map as the underlying map.
+     *
+     * @param map the Map to use as the underlying map
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {
+        super(map, null);
+    }
+
+    /**
+     * Creates a new MultiValueMap that uses a HashMap as the underlying map
+     * and the specified collection class.
+     *
+     * @param collectionClass the class to use for the collection of values.
+     */
+    public MultiValueMap(final Class<? extends Collection<V>> collectionClass) {
+        super(new java.util.HashMap<K, Collection<V>>(), collectionClass);
+    }
+
+    /**
+     * Creates a new MultiValueMap that uses the specified map and collection class.
+     *
+     * @param map the Map to use as the underlying map
+     * @param collectionClass the class to use for the collection of values.
+     */
+    protected MultiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map, collectionClass);
+    }
+
+    /**
+     * Creates a new MultiValueMap that decorates the given map and uses the specified
+     * collection class.
+     * <p>
+     * If the map is already a {@code MultiValueMap} no copying is done. Otherwise each
+     * key in the provided map is added to the new multi-value map with the values
+     * associated to it.
+     * <p>
+     * This method is useful to create a {@code MultiValueMap} from another multi-value map
+     * that does not implement the interface {@code MultiValuedMap} (e.g. a map from
+     * commons-collections 3.x).
+     *
+     * @param <K>  the key type
+     * @param <V>  the value type
+     * @param map  the map to decorate
+     * @param collectionClass the class to use for the collection of values.
+     * @return a new MultiValueMap
+     * @since 4.1
+     */
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map,
+                                                            final Class<? extends Collection<V>> collectionClass) {
+        if (map instanceof MultiValueMap) {
+            return (MultiValueMap<K, V>) map;
+        }
+
+        final MultiValueMap<K, V> mvp = new MultiValueMap<>(new java.util.HashMap<K, Collection<V>>(), collectionClass);
+        mvp.putAll(map);
+        return mvp;
+    }
+
+    /**
+     * Write the map out using a custom routine.
+     * @param out the output stream
+     * @throws java.io.IOException
+     * @throws ClassNotFoundException
+     * @serialData the underlying map and collection class
+     */
+    @SuppressWarnings("unchecked")  // readObject only calls newCollection()
+    private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
+        final Map<K, Collection<V>> map = (Map<K, Collection<V>>) in.readObject();
+        final Class<? extends Collection<V>> collectionClass = (Class<? extends Collection<V>>) in.readObject();
+
+        setMap(map);
+        setCollectionClass(collectionClass);
+    }
+
+    /**
+     * Write the map out using a custom routine.
+     * @param out the output stream
+     * @throws java.io.IOException
+     * @serialData the underlying map and collection class
+     */
+    private void writeObject(final java.io.ObjectOutputStream out) throws java.io.IOException {
+        out.writeObject(getMap());
+        out.writeObject(getCollectionClass());
+    }
+
+}
\ No newline at end of file
