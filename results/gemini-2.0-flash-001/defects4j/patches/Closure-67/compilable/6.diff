diff --git a/tmp/ba4a9d1c-ac99-4376-979c-03390fc2b60b_buggy.java b/tmp/ec49ead9-b679-421a-b13d-cd9c7c7a893a_fixed.java
index 939f49b..f9708d4 100644
--- a/tmp/ba4a9d1c-ac99-4376-979c-03390fc2b60b_buggy.java
+++ b/tmp/ec49ead9-b679-421a-b13d-cd9c7c7a893a_fixed.java
@@ -1,21 +1,21 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // check that a prototype property is assigned.
+        Node firstChild = n.getFirstChild();
+        if (firstChild != null && firstChild.getType() == Token.GETPROP) {
+          Node potentialPrototype = firstChild.getFirstChild();
+          if (potentialPrototype != null &&
+              potentialPrototype.getNext() != null &&
+              potentialPrototype.getNext().getType() == Token.STRING &&
+              potentialPrototype.getNext().getString().equals("prototype")) {
                 return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
