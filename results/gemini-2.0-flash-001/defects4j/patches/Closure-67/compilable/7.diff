diff --git a/tmp/2c9239e0-bd2e-4e7c-a870-5e99726d0405_buggy.java b/tmp/fd56b0a1-ab6d-4e53-ab13-6ab8a5e79d5f_fixed.java
index 939f49b..ffa4033 100644
--- a/tmp/2c9239e0-bd2e-4e7c-a870-5e99726d0405_buggy.java
+++ b/tmp/fd56b0a1-ab6d-4e53-ab13-6ab8a5e79d5f_fixed.java
@@ -1,21 +1,19 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
           && n.getType() == Token.GETPROP
           ) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // check that a prototype property is assigned.
+        Node firstChild = n.getFirstChild();
+        if (firstChild != null && firstChild.getType() == Token.GETPROP) {
+          Node prototype = firstChild.getFirstChild().getNext();
+          if (prototype != null && prototype.getType() == Token.STRING &&
+              prototype.getString().equals("prototype")) {
             return true;
           }
         }
       }
 
       return false;
     }
\ No newline at end of file
