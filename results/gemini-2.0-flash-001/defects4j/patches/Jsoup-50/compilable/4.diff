diff --git a/tmp/0016f92c-7d56-47e4-ad87-de75d1ae7347_buggy.java b/tmp/2532f36f-6f5f-4b0e-8ab2-c3ee9d259c90_fixed.java
index 25ca093..8e60f2d 100644
--- a/tmp/0016f92c-7d56-47e4-ad87-de75d1ae7347_buggy.java
+++ b/tmp/2532f36f-6f5f-4b0e-8ab2-c3ee9d259c90_fixed.java
@@ -1,52 +1,104 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
+        Charset charset = null;
+        if (charsetName != null) {
+            try {
+                charset = Charset.forName(charsetName);
+            } catch (IllegalCharsetNameException e) {
+                // If the specified charsetName is invalid, ignore it and try to detect the charset.
+                charsetName = null;
+            }
+        }
+
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            charset = Charset.forName(defaultCharset);
+            byteData.mark();
+            docData = charset.decode(byteData).toString();
+            byteData.reset();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
+                    try {
+                        charset = Charset.forName(foundCharset);
                         byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                        docData = charset.decode(byteData).toString();
                         doc = null;
+                    } catch (IllegalCharsetNameException e) {
+                        // If the charsetName found in meta tag is invalid, ignore it and keep the previous charset.
+                    }
+
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+            charset = Charset.forName(charsetName);
+            byteData.mark();
+            docData = charset.decode(byteData).toString();
+            byteData.reset();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+        // Check for BOM *after* parsing with the initial or specified charset
+        byteData.mark();
+        if (byteData.remaining() >= 2) {
+            int byte1 = byteData.get(0) & 0xFF;
+            int byte2 = byteData.get(1) & 0xFF;
+
+            if ((byte1 == 0xFE && byte2 == 0xFF) || (byte1 == 0xFF && byte2 == 0xFE)) {
+                // UTF-16BE or UTF-16LE BOM found
+                charsetName = "UTF-16"; // Let the Charset decoder choose BE/LE
+                charset = Charset.forName(charsetName);
                 byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+                docData = charset.decode(byteData).toString();
                 doc = null;
+            } else if (byteData.remaining() >= 3 && byte1 == 0xEF && byte2 == 0xBB && (byteData.get(2) & 0xFF) == 0xBF) {
+                // UTF-8 BOM found
+                charsetName = "UTF-8";
+                charset = Charset.forName(charsetName);
+                byteData.rewind();
+                docData = charset.decode(byteData).toString();
+                doc = null;
+            } else if (byteData.remaining() >= 4 && byte1 == 0x00 && byte2 == 0x00 && (byteData.get(2) & 0xFF) == 0xFE && (byteData.get(3) & 0xFF) == 0xFF) {
+                charsetName = "UTF-32BE";
+                 charset = Charset.forName(charsetName);
+                 byteData.rewind();
+                 docData = charset.decode(byteData).toString();
+                 doc = null;
+            } else if (byteData.remaining() >= 4 && byte1 == 0xFF && byte2 == 0xFE && (byteData.get(2) & 0xFF) == 0x00 && (byteData.get(3) & 0xFF) == 0x00) {
+                 charsetName = "UTF-32LE";
+                 charset = Charset.forName(charsetName);
+                 byteData.rewind();
+                 docData = charset.decode(byteData).toString();
+                 doc = null;
+            }
         }
+        byteData.reset();
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charset);
         }
         return doc;
     }
\ No newline at end of file
