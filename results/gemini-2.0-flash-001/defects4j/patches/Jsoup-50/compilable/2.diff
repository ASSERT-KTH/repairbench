diff --git a/tmp/8f145e99-242f-440b-b87f-a48f65d924f4_buggy.java b/tmp/58bf4fe3-3fef-4604-891c-90b116a89c6d_fixed.java
index 25ca093..b3ab748 100644
--- a/tmp/8f145e99-242f-440b-b87f-a48f65d924f4_buggy.java
+++ b/tmp/58bf4fe3-3fef-4604-891c-90b116a89c6d_fixed.java
@@ -1,52 +1,68 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
         // look for BOM - overrides any other header or input
+        Charset charset = null;
+        if (charsetName != null) {
+            try {
+                charset = Charset.forName(charsetName);
+            } catch (IllegalCharsetNameException e) {
+                // If the provided charsetName is invalid, fall back to defaultCharset and attempt to detect from meta
+                charsetName = null;
+            }
+        }
+
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            charset = Charset.forName(defaultCharset);
+            byteData.mark();
+            docData = charset.decode(byteData).toString();
+            byteData.reset(); // Rewind the buffer
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
+                    try {
+                        charset = Charset.forName(charsetName);
+                    } catch (IllegalCharsetNameException e) {
+                        // If the foundCharset is invalid, log the error and continue with the defaultCharset
+                        charset = Charset.forName(defaultCharset);
+                    }
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    docData = charset.decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+            docData = charset.decode(byteData).toString();
         }
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+
         }
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charset);
         }
         return doc;
     }
\ No newline at end of file
