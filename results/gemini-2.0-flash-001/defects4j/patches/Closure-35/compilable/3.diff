diff --git a/tmp/6b360c82-6cbd-481b-bade-bdadbd64e421_buggy.java b/tmp/d555f530-0398-4bf9-ac5e-b1e7a3833b9d_fixed.java
index d57736b..8ca380d 100644
--- a/tmp/6b360c82-6cbd-481b-bade-bdadbd64e421_buggy.java
+++ b/tmp/d555f530-0398-4bf9-ac5e-b1e7a3833b9d_fixed.java
@@ -1,39 +1,42 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
-          JSType propType = constraintObj.getPropertyType(prop);
+          JSType constraintPropType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
+            JSType typeToInfer = constraintPropType;
+            if (objType.hasProperty(prop)) {
+              JSType existingPropType = objType.getPropertyType(prop);
+              typeToInfer = existingPropType.getLeastSupertype(constraintPropType);
+            } else {
               typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                  getNativeType(VOID_TYPE).getLeastSupertype(constraintPropType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
