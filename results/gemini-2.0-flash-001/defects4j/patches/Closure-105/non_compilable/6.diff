diff --git a/tmp/9864b9cf-8b68-4515-b58c-80f50b88e12e_buggy.java b/tmp/187e35a5-2c75-4221-8e11-e911824ccaef_fixed.java
index ef65dd9..db0f9d9 100644
--- a/tmp/9864b9cf-8b68-4515-b58c-80f50b88e12e_buggy.java
+++ b/tmp/187e35a5-2c75-4221-8e11-e911824ccaef_fixed.java
@@ -1,92 +1,131 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    foldedSize += arrayFoldedChildren.size() == 0 ? 0 : arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
+          foldedStringNode = replacement.copyInformationFrom(foldedStringNode);
+          parent.replaceChild(n, replacement);
+        } else {
             parent.replaceChild(n, foldedStringNode);
+        }
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
+        // Don't fold if the numbers of characters after the join is
+        // greater than the original.
         if (foldedSize > originalSize) {
           return;
         }
+
+        Node replacement = null;
+        // If there are string literals, join them.
+        // message: ['a', 'b', 'c'].join('') becomes 'abc'
+        if (joinString.isEmpty()) {
+          replacement = Node.newString("");
+          for (Node node : arrayFoldedChildren) {
+            if (node.getType() == Token.STRING) {
+              replacement = Node.newString(replacement.getString() + node.getString());
+            } else {
+              replacement = null;
+              break;
+            }
+          }
+        }
+
+        // message: [1, 2, 3].join('a') becomes '1a2a3'
+        if (replacement == null && right.getType() == Token.STRING) {
+          replacement = Node.newString("");
+          for (Node node : arrayFoldedChildren) {
+            if (NodeUtil.isImmutableValue(node)) {
+              if (replacement.getString().length() > 0) {
+                replacement = Node.newString(replacement.getString() + joinString + NodeUtil.getStringValue(node));
+              } else {
+                replacement = Node.newString(NodeUtil.getStringValue(node));
+              }
+
+            } else {
+              replacement = null;
+              break;
+            }
+          }
+        }
+
+        if (replacement != null) {
+          parent.replaceChild(n, replacement);
+        } else {
           arrayNode.detachChildren();
           for (Node node : arrayFoldedChildren) {
             arrayNode.addChildToBack(node);
           }
+        }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
