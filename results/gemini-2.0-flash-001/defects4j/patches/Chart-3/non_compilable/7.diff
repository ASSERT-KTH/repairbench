diff --git a/tmp/c7ab26a7-5119-4a84-90c9-f3ce11c186fa_buggy.java b/tmp/ab3c732f-2e47-486e-8820-ff70b2fbe09a_fixed.java
index 388771b..699ccb3 100644
--- a/tmp/c7ab26a7-5119-4a84-90c9-f3ce11c186fa_buggy.java
+++ b/tmp/ab3c732f-2e47-486e-8820-ff70b2fbe09a_fixed.java
@@ -1,37 +1,43 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
-                try {
                 copy.add(clone);
             }
-                catch (SeriesException e) {
-                    e.printStackTrace();
         }
+        copy.setMinY(java.lang.Double.NaN);
+        copy.setMaxY(java.lang.Double.NaN);
+        for (int i = 0; i < copy.getItemCount(); i++) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) copy.getDataItem(i);
+            double value = item.getValue().doubleValue();
+            if (java.lang.Double.isNaN(copy.getMinY()) || value < copy.getMinY()) {
+                copy.setMinY(value);
+            }
+            if (java.lang.Double.isNaN(copy.getMaxY()) || value > copy.getMaxY()) {
+                copy.setMaxY(value);
             }
         }
         return copy;
     }
\ No newline at end of file
