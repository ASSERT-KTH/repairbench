diff --git a/tmp/bdd93bfb-5fd9-46fd-addb-5744a95d4fca_buggy.java b/tmp/a6030ae8-a79e-49cf-8b08-a93de9a03fac_fixed.java
index 71189c3..1aa00ba 100644
--- a/tmp/bdd93bfb-5fd9-46fd-addb-5744a95d4fca_buggy.java
+++ b/tmp/a6030ae8-a79e-49cf-8b08-a93de9a03fac_fixed.java
@@ -1,46 +1,59 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
+                try {
                     option.validate(commandLine);
+                } catch (OptionException e) {
+                    throw e;
+                }
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
+                present++;
+                if (present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                try {
                     option.validate(commandLine);
+                } catch (OptionException e) {
+                    throw e;
+                }
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
+            try {
                 option.validate(commandLine);
+            } catch (OptionException e) {
+                throw e;
+            }
         }
     }
\ No newline at end of file
