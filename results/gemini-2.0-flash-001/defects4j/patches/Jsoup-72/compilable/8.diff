diff --git a/tmp/020d328b-79c1-4860-9fd9-c14c9d1256d6_buggy.java b/tmp/e29b0350-a254-4911-8837-aa85ee69d407_fixed.java
index d666a67..068988b 100644
--- a/tmp/020d328b-79c1-4860-9fd9-c14c9d1256d6_buggy.java
+++ b/tmp/e29b0350-a254-4911-8837-aa85ee69d407_fixed.java
@@ -1,36 +1,36 @@
     /**
      * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
      * <p />
      * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
      * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
      * some more duplicates.
      */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
         // limit (no cache):
         if (count > maxStringCacheLen)
             return new String(charBuf, start, count);
 
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+            if (count == cached.length() && rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
\ No newline at end of file
