diff --git a/tmp/041a2b62-fba0-471d-b446-2094e8a4cd7a_buggy.java b/tmp/d7888cf7-7d83-416d-b72e-c6c244292731_fixed.java
index e087f95..c7cd542 100644
--- a/tmp/041a2b62-fba0-471d-b446-2094e8a4cd7a_buggy.java
+++ b/tmp/d7888cf7-7d83-416d-b72e-c6c244292731_fixed.java
@@ -1,53 +1,59 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes long");
+        }
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
+        boolean foundEnding = false;
 
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                foundEnding = true;
                 break;
             }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == (byte) ' ') {
                 if (stillPadding) {
                    continue;
             }
-                if (currentByte == (byte) ' ') {
+                foundEnding = true;
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        if (!foundEnding) {
+            throw new IllegalArgumentException("Trailing space or NUL missing");
+        }
+
         return result;
     }
\ No newline at end of file
