diff --git a/tmp/8b4ed543-42b3-4688-a735-c800dd6f8232_buggy.java b/tmp/b595ca01-f62d-4897-9eed-a73c48220595_fixed.java
index e0ecec8..395187b 100644
--- a/tmp/8b4ed543-42b3-4688-a735-c800dd6f8232_buggy.java
+++ b/tmp/b595ca01-f62d-4897-9eed-a73c48220595_fixed.java
@@ -1,35 +1,45 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
       // If there are no parameters left in the list, then the while loop
       // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // For var_args functions, the functionType.getMaxArguments() will be
+    // greater than the number of arguments we have.
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (functionType.isVarArgs()) {
+      if (minArgs > numArgs) {
+        report(t, call, WRONG_ARGUMENT_COUNT,
+                validator.getReadableJSTypeName(call.getFirstChild(), false),
+                String.valueOf(numArgs), String.valueOf(minArgs),
+                maxArgs != Integer.MAX_VALUE ?
+                " and no more than " + maxArgs + " argument(s)" : "");
+      }
+    } else if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
