diff --git a/tmp/8927929b-85fe-4375-a4b2-783f5a92a86e_buggy.java b/tmp/7df218e7-cc76-467d-906e-fc4c424f21c6_fixed.java
index e0ecec8..dbdce64 100644
--- a/tmp/8927929b-85fe-4375-a4b2-783f5a92a86e_buggy.java
+++ b/tmp/7df218e7-cc76-467d-906e-fc4c424f21c6_fixed.java
@@ -1,35 +1,39 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
       // If there are no parameters left in the list, then the while loop
       // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // For var_args functions, the functionType parameters only represent
+    // the non-var_args portion of the parameters.
+    if (!functionType.isVarArgs()) {
       int numArgs = call.getChildCount() - 1;
       int minArgs = functionType.getMinArguments();
       int maxArgs = functionType.getMaxArguments();
       if (minArgs > numArgs || maxArgs < numArgs) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                 validator.getReadableJSTypeName(call.getFirstChild(), false),
                 String.valueOf(numArgs), String.valueOf(minArgs),
                 maxArgs != Integer.MAX_VALUE ?
                 " and no more than " + maxArgs + " argument(s)" : "");
       }
     }
+  }
\ No newline at end of file
