diff --git a/tmp/aa520e7a-c1b3-4a5b-89c1-7ae2b7699de5_buggy.java b/tmp/fe617251-77c0-4b4f-86d0-2c19cb587006_fixed.java
index 7c9c72e..9e323c6 100644
--- a/tmp/aa520e7a-c1b3-4a5b-89c1-7ae2b7699de5_buggy.java
+++ b/tmp/fe617251-77c0-4b4f-86d0-2c19cb587006_fixed.java
@@ -1,93 +1,104 @@
     /**
      * <p>Creates a random string based on a variety of options, using
      * supplied source of randomness.</p>
      *
      * <p>If start and end are both {@code 0}, start and end are set
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
      * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
      *
      * <p>This method accepts a user-supplied {@link Random}
      * instance to use as a source of randomness. By seeding a single 
      * {@link Random} instance with a fixed seed and using it for each call,
      * the same random sequence of strings can be generated repeatedly
      * and predictably.</p>
      *
      * @param count  the length of random string to create
      * @param start  the position in set of chars to start at
      * @param end  the position in set of chars to end before
      * @param letters  only allow letters?
      * @param numbers  only allow numbers?
      * @param chars  the set of chars to choose randoms from, must not be empty.
      *  If {@code null}, then it will use the set of all chars.
      * @param random  a source of randomness.
      * @return the random string
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  {@code (end - start) + 1} characters in the set array.
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers,
                                 char[] chars, Random random) {
         if (count == 0) {
             return "";
         } else if (count < 0) {
             throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
         }
 
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The chars array must not be empty");
+        }
+
         if (start == 0 && end == 0) {
             if (!letters && !numbers) {
+                start = 0;
                 end = Integer.MAX_VALUE;
             } else {
-                    end = 'z' + 1;
                 start = ' ';
+                end = 'z' + 1;
             }
         }
 
-        char[] buffer = new char[count];
         int gap = end - start;
 
-        while (count-- != 0) {
+
+        if (gap == 0 && (chars == null)) {
+            gap = 1;
+        }
+
+        char[] buffer = new char[count];
+
+        for (int i = 0; i < count; i++) {
             char ch;
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
                 ch = chars[random.nextInt(gap) + start];
             }
             if (letters && Character.isLetter(ch)
                     || numbers && Character.isDigit(ch)
                     || !letters && !numbers) {
                 if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
-                        count++;
+                    if(i == 0) {
+                        i--;
                     } else {
                         // low surrogate, insert high surrogate after putting it in
-                        buffer[count] = ch;
-                        count--;
-                        buffer[count] = (char) (55296 + random.nextInt(128));
+                        buffer[i] = ch;
+                        i--;
+                        buffer[i] = (char) (55296 + random.nextInt(128));
                     }
                 } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
-                        count++;
+                    if(i == 0) {
+                        i--;
                     } else {
                         // high surrogate, insert low surrogate before putting it in
-                        buffer[count] = (char) (56320 + random.nextInt(128));
-                        count--;
-                        buffer[count] = ch;
+                        buffer[i] = (char) (56320 + random.nextInt(128));
+                        i--;
+                        buffer[i] = ch;
                     }
                 } else if(ch >= 56192 && ch <= 56319) {
                     // private high surrogate, no effing clue, so skip it
-                    count++;
+                    i--;
                 } else {
-                    buffer[count] = ch;
+                    buffer[i] = ch;
                 }
             } else {
-                count++;
+                i--;
             }
         }
         return new String(buffer);
     }
\ No newline at end of file
