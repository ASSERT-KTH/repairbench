diff --git a/tmp/8a840490-36bc-431f-9f4a-867c039452d1_buggy.java b/tmp/07b2a13b-e74d-4f57-8413-a2277364a700_fixed.java
index 4b7e1e4..85a0aff 100644
--- a/tmp/8a840490-36bc-431f-9f4a-867c039452d1_buggy.java
+++ b/tmp/07b2a13b-e74d-4f57-8413-a2277364a700_fixed.java
@@ -1,52 +1,68 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
-            int len = 0;
+            long len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
-                            final int restLen = len - read;
+                            final long restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
-                                final byte[] rest = new byte[restLen];
+                                if (restLen < 0) {
+                                    throw new IOException("Corrupted Paxheader, negative restLen "+restLen);
+                                }
+                                final byte[] rest = new byte[(int) restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                          (int)restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
+                if (ch >= '0' && ch <= '9') {
                     len *= 10;
                     len += ch - '0';
+                } else {
+                    // Invalid character in length string.
+                    // CPArchiveEntry.readPaxHeaders may have to skip
+                    // some garbage before reaching the real header.
+                    // At this point it reads "garbage\n" and tries
+                    // to interpret "garbage" as a length.
+                    len = 0;
+                    break;
                 }
-            if (ch == -1){ // EOF
+            }
+            if (ch == -1 && len == 0){ // EOF
+                break;
+            }
+            if (ch == -1 && len > 0){
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
