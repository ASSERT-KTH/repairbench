diff --git a/tmp/1376b9cd-d29c-44bd-a0ed-63b51b20c8f4_buggy.java b/tmp/65a588cf-a843-41ae-8874-9a6694815e13_fixed.java
index 31f58d4..d9ffdb4 100644
--- a/tmp/1376b9cd-d29c-44bd-a0ed-63b51b20c8f4_buggy.java
+++ b/tmp/65a588cf-a843-41ae-8874-9a6694815e13_fixed.java
@@ -1,101 +1,101 @@
     /**
      * <p>An implementation of {@link Parser}'s abstract
      * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
      *
      * <p>The following are the rules used by this flatten method.
      * <ol>
      *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
      *  burst anymore of <code>arguments</code> entries, just add each
      *  successive entry without further processing.  Otherwise, ignore
      *  <code>stopAtNonOption</code>.</li>
      *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
      *  just add the entry to the list of processed tokens</li>
      *  <li>if the current <code>arguments</code> entry is two characters
      *  in length and the first character is "<b>-</b>" then check if this
      *  is a valid {@link Option} id.  If it is a valid id, then add the
      *  entry to the list of processed tokens and set the current {@link Option}
      *  member.  If it is not a valid id and <code>stopAtNonOption</code>
      *  is true, then the remaining entries are copied to the list of 
      *  processed tokens.  Otherwise, the current entry is ignored.</li>
      *  <li>if the current <code>arguments</code> entry is more than two
      *  characters in length and the first character is "<b>-</b>" then
      *  we need to burst the entry to determine its constituents.  For more
      *  information on the bursting algorithm see 
      *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
      *  <li>if the current <code>arguments</code> entry is not handled 
      *  by any of the previous rules, then the entry is added to the list
      *  of processed tokens.</li>
      * </ol>
      * </p>
      *
      * @param options The command line {@link Options}
      * @param arguments The command line arguments to be parsed
      * @param stopAtNonOption Specifies whether to stop flattening
      * when an non option is found.
      * @return The flattened <code>arguments</code> String array.
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
 
         // an iterator for the command line tokens
-        Iterator iter = Arrays.asList(arguments).iterator();
+        List<String> processed = new ArrayList<String>();
+        boolean stop = false;
 
-        // process each command line token
-        while (iter.hasNext())
+        for (String token : arguments)
         {
-            // get the next command line token
-            String token = (String) iter.next();
-
-            // handle long option --foo or --foo=bar
-            if (token.startsWith("--"))
-            {
-                if (token.indexOf('=') != -1)
-                {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
-                }
-                else
+            if (stop) {
+                processed.add(token);
+            } else if ("--".equals(token))
             {
-                    tokens.add(token);
-                }
+                processed.add(token);
+                stop = true;
             }
-
-            // single hyphen
             else if ("-".equals(token))
             {
-                tokens.add(token);
+                processed.add(token);
+            }
+            else if (token.startsWith("--"))
+            {
+                if (token.indexOf('=') != -1)
+                {
+                    processed.add(token.substring(0, token.indexOf('=')));
+                    processed.add(token.substring(token.indexOf('=') + 1, token.length()));
+                }
+                else
+                {
+                    processed.add(token);
+                }
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
                 {
                     processOptionToken(token, stopAtNonOption);
                 }
                 else if (options.hasOption(token))
                 {
-                    tokens.add(token);
+                    processed.add(token);
                 }
                 // requires bursting
                 else
                 {
                     burstToken(token, stopAtNonOption);
                 }
             }
             else if (stopAtNonOption)
             {
-                process(token);
+                stop = true;
+                processed.add(token);
             }
             else
             {
-                tokens.add(token);
+                processed.add(token);
             }
-
-            gobble(iter);
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return (String[]) processed.toArray(new String[processed.size()]);
     }
\ No newline at end of file
