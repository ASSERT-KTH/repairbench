diff --git a/tmp/c162f14c-cd10-4782-8074-52eb81f0a82f_buggy.java b/tmp/e3a0c081-1c9e-40f8-94f1-ddaef02a9a99_fixed.java
index 602226b..30d9acb 100644
--- a/tmp/c162f14c-cd10-4782-8074-52eb81f0a82f_buggy.java
+++ b/tmp/e3a0c081-1c9e-40f8-94f1-ddaef02a9a99_fixed.java
@@ -1,26 +1,35 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else if (parent.isFunction() && n.isName()) {
+          // Don't report locals that are function names.
+        } else if (v.getParentNode().isCatch()) {
+          // Don't report exception names.
+        } else if (parent.isExprResult() && parent.getFirstChild().isCall()) {
+            // Don't report names defined in the top level scope
+            // as part of a function call.
+        } else {
+          // Report all other local variables as non-aliases.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
