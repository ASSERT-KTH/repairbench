diff --git a/tmp/1f417ea7-1631-46b9-b0c9-27e6f466eadc_buggy.java b/tmp/9fae6b98-e655-48a4-96dc-36d718d1b7d2_fixed.java
index a7d0787..5345e50 100644
--- a/tmp/1f417ea7-1631-46b9-b0c9-27e6f466eadc_buggy.java
+++ b/tmp/9fae6b98-e655-48a4-96dc-36d718d1b7d2_fixed.java
@@ -1,54 +1,91 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+        if (String.class.equals(clazz))
         {
             return (T) str;
         }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+        else if (Object.class.equals(clazz))
         {
             return (T) createObject(str);
         }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+        else if (Number.class.equals(clazz))
         {
             return (T) createNumber(str);
         }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+        else if (Date.class.equals(clazz))
         {
             return (T) createDate(str);
         }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+        else if (Class.class.equals(clazz))
         {
             return (T) createClass(str);
         }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+        else if (java.io.File.class.equals(clazz))
         {
             return (T) createFile(str);
         }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+        else if (java.io.FileInputStream.class.equals(clazz))
         {
             return (T) openFile(str);
         }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+        else if (java.io.File[].class.equals(clazz))
         {
             return (T) createFiles(str);
         }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+        else if (java.net.URL.class.equals(clazz))
         {
             return (T) createURL(str);
         }
+        else if (clazz.equals(Integer.class)) {
+            try {
+                return (T) Integer.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into an Integer object.");
+            }
+        } else if (clazz.equals(Long.class)) {
+            try {
+                return (T) Long.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into a Long object.");
+            }
+        } else if (clazz.equals(Short.class)) {
+            try {
+                return (T) Short.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into a Short object.");
+            }
+        } else if (clazz.equals(Byte.class)) {
+            try {
+                return (T) Byte.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into a Byte object.");
+            }
+        } else if (clazz.equals(Float.class)) {
+            try {
+                return (T) Float.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into a Float object.");
+            }
+        } else if (clazz.equals(Double.class)) {
+            try {
+                return (T) Double.valueOf(str);
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the string: " + str + " into a Double object.");
+            }
+        }
         else
         {
             return null;
         }
     }
\ No newline at end of file
