diff --git a/tmp/cfd43e48-7406-4253-b826-78987e15cfe4_buggy.java b/tmp/f8a2aa0c-05a8-4664-9532-232ce1452afc_fixed.java
index 658036e..3c71ec3 100644
--- a/tmp/cfd43e48-7406-4253-b826-78987e15cfe4_buggy.java
+++ b/tmp/f8a2aa0c-05a8-4664-9532-232ce1452afc_fixed.java
@@ -1,29 +1,35 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
+
+        // 22-Jul-2016, tatu: [databind#1354] also, allow `null`s
+        if (p.getCurrentToken() == JsonToken.VALUE_NULL) {
+            return null;
+        }
+        
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
\ No newline at end of file
