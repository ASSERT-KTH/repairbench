diff --git a/tmp/d610f26d-9f77-4afc-b6fb-d04ef7409526_buggy.java b/tmp/d810a344-879b-48b9-a33c-62fc52a7b615_fixed.java
index 03b03d7..5e48a15 100644
--- a/tmp/d610f26d-9f77-4afc-b6fb-d04ef7409526_buggy.java
+++ b/tmp/d810a344-879b-48b9-a33c-62fc52a7b615_fixed.java
@@ -1,25 +1,29 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        long instantBefore = convertUTCToLocal(instant - DateTimeConstants.MILLIS_PER_HOUR);
+        long instantAfter = convertUTCToLocal(instant + DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long result = convertLocalToUTC(local, false, instant);
+        if (convertUTCToLocal(result) != local) {
+            return instant;
+        }
+        return result;
         
         // calculate result
           // currently in later offset
           // currently in earlier offset
     }
\ No newline at end of file
