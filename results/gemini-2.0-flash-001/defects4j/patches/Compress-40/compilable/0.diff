diff --git a/tmp/3dadfe11-cc99-4e34-9c10-e0cf4130bf24_buggy.java b/tmp/3ca502fb-796d-4e6f-af08-588255ab471c_fixed.java
index 7116384..751012b 100644
--- a/tmp/3dadfe11-cc99-4e34-9c10-e0cf4130bf24_buggy.java
+++ b/tmp/3ca502fb-796d-4e6f-af08-588255ab471c_fixed.java
@@ -1,39 +1,35 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
-        while (bitsCachedSize < count) {
+        long bitsOut = 0;
+        for (int i = 0; i < count; i++) {
+            if (bitsCachedSize == 0) {
                 final long nextByte = in.read();
                 if (nextByte < 0) {
                     return nextByte;
                 }
-            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
-            } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached = nextByte;
+                bitsCachedSize = 8;
             }
-            bitsCachedSize += 8;
-        }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
-        
-        final long bitsOut;
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
-                bitsCached >>>= count;
+                bitsOut |= ((bitsCached & 1) << i);
+                bitsCached >>>= 1;
             } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+                bitsOut |= (((bitsCached >> (bitsCachedSize - 1)) & 1) << i);
+                bitsCached &= ~(1L << (bitsCachedSize - 1));
+            }
+            bitsCachedSize--;
         }
-            bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
