diff --git a/tmp/b5181821-f936-432c-825c-f81316eb83a8_buggy.java b/tmp/e6dbb32b-4d04-4a62-903b-fdc6fbb7faaf_fixed.java
index e69de29..1ce3bf3 100644
--- a/tmp/b5181821-f936-432c-825c-f81316eb83a8_buggy.java
+++ b/tmp/e6dbb32b-4d04-4a62-903b-fdc6fbb7faaf_fixed.java
@@ -0,0 +1,59 @@
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+
+import java.io.IOException;
+
+public class TestTypeFactoryWithRecursiveTypes {
+
+    static class Base {
+        public int base = 1;
+
+        public int getBase() {
+            return base;
+        }
+    }
+
+    static class Sub extends Base {
+        public int sub = 2;
+
+        public int getSub() {
+            return sub;
+        }
+    }
+
+    private ObjectMapper objectMapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);
+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
+        return mapper;
+    }
+
+    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        tf.constructType(Base.class);
+        tf.constructType(Sub.class);
+        Sub sub = new Sub();
+        String serialized = objectMapper().writeValueAsString(sub);
+        assertEquals("{\"base\":1,\"sub\":2}", serialized);
+    }
+
+    // Helper class and method from the original test, included for context.
+    static class TypeFactory {
+        private static final TypeFactory instance = new TypeFactory();
+
+        public static TypeFactory defaultInstance() {
+            return instance;
+        }
+
+        public com.fasterxml.jackson.databind.JavaType constructType(Class<?> cls) {
+            return com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance().constructType(cls);
+        }
+    }
+
+    private void assertEquals(String expected, String serialized) {
+        if (!expected.equals(serialized)) {
+            throw new junit.framework.ComparisonFailure("expected:<" + expected + "> but was:<" + serialized + ">", expected, serialized);
+        }
+    }
+}
\ No newline at end of file
