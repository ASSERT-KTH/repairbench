diff --git a/tmp/e21cc04d-f64f-499c-8c9e-3fb7005f39b3_buggy.java b/tmp/2cd374d1-d68e-4e8c-a0c5-720924a5224b_fixed.java
index e69de29..b6a94e3 100644
--- a/tmp/e21cc04d-f64f-499c-8c9e-3fb7005f39b3_buggy.java
+++ b/tmp/2cd374d1-d68e-4e8c-a0c5-720924a5224b_fixed.java
@@ -0,0 +1,39 @@
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+import java.io.IOException;
+import junit.framework.TestCase;
+
+public class TestTypeFactoryWithRecursiveTypes {
+
+    static class Base {
+        public int base = 1;
+
+        public int getBase() {
+            return base;
+        }
+    }
+
+    static class Sub extends Base {
+        public int sub = 2;
+
+        public int getSub() {
+            return sub;
+        }
+    }
+
+    private ObjectMapper objectMapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);
+        return mapper;
+    }
+
+    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        tf.constructType(Base.class);
+        tf.constructType(Sub.class);
+        Sub sub = new Sub();
+        String serialized = objectMapper().writeValueAsString(sub);
+        assertEquals("{\"base\":1,\"sub\":2}", serialized);
+    }
+}
\ No newline at end of file
