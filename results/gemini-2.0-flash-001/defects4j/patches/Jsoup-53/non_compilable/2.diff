diff --git a/tmp/1b354ca2-b222-4ba2-a022-c4633b75fb73_buggy.java b/tmp/adbdb394-fa0f-4b44-8659-4bb303464135_fixed.java
index fecb896..9f85e48 100644
--- a/tmp/1b354ca2-b222-4ba2-a022-c4633b75fb73_buggy.java
+++ b/tmp/adbdb394-fa0f-4b44-8659-4bb303464135_fixed.java
@@ -1,34 +1,41 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        int i = 0;
+        while (i < queue.size()) {
+            char c = queue.get(i);
+
+            if (last != ESC) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
-                        start = pos;
+                        start = i + 1;
                 }
-                else if (c.equals(close))
+                else if (c == close)
                     depth--;
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth == 0 && start != -1) {
+                end = i;
+                break;
+            }
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            i++;
+        }
+        if (start != -1 && end == -1 && depth > 0) {
+            end = queue.size();
+        }
+        return (start != -1 && end >= start) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
