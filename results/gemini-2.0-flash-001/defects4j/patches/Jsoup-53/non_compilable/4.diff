diff --git a/tmp/c16bdf4c-6e7a-4587-8321-70fbbf820bed_buggy.java b/tmp/d970790c-4576-47c9-9a71-ea020186df5d_fixed.java
index fecb896..935272e 100644
--- a/tmp/c16bdf4c-6e7a-4587-8321-70fbbf820bed_buggy.java
+++ b/tmp/d970790c-4576-47c9-9a71-ea020186df5d_fixed.java
@@ -1,34 +1,50 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
-        do {
-            if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        int i = 0;
+        while (i < queue.size()) {
+            char c = queue.get(i);
+
+            if (last != ESC) {
+                if (c == open) {
                     depth++;
                     if (start == -1)
-                        start = pos;
+                        start = i + 1;
                 }
-                else if (c.equals(close))
+                else if (c == close)
                     depth--;
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth == 0 && start != -1) {
+                end = i;
+                break;
+            }
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            i++;
+        }
+
+        if (start != -1 && end == -1 && depth == 0)
+            end = i; // last char
+
+        String data = (start != -1 && end != -1 && end >= start) ? queue.substring(start, end) : "";
+        if (end != -1) {
+            i = end + 1;
+            queue.removeHead(i);
+        } else if (start != -1) {
+            queue.removeHead(queue.size());
+        }
+
+        return data;
     }
\ No newline at end of file
