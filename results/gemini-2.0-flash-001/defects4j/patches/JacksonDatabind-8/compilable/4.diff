diff --git a/tmp/c961b46b-c525-42de-80ea-ce11e37c6495_buggy.java b/tmp/1a76a988-8528-4aae-a178-6e49b641b7a6_fixed.java
index c9da1b7..a59eb3e 100644
--- a/tmp/c961b46b-c525-42de-80ea-ce11e37c6495_buggy.java
+++ b/tmp/1a76a988-8528-4aae-a178-6e49b641b7a6_fixed.java
@@ -1,33 +1,35 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+            } else if (explicit) {
+                // new one is explicit, but old one is not. Override.
+            } else {
+                // neither is explicit: verify
                 if (oldOne.getClass() == newOne.getClass()) {
                     // [databind#667]: avoid one particular class of bogus problems
 
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                     // otherwise, which one to choose?
                     // new type more generic, use old
                     // new type more specific, use it
                 }
             }
+        }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
