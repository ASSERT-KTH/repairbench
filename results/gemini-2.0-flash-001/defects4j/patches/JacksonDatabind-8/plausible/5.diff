diff --git a/tmp/35541084-fae9-4fec-ac34-c64d1d78d400_buggy.java b/tmp/07a817ff-b26a-4071-a10f-21f565df9976_fixed.java
index c9da1b7..83113d2 100644
--- a/tmp/35541084-fae9-4fec-ac34-c64d1d78d400_buggy.java
+++ b/tmp/07a817ff-b26a-4071-a10f-21f565df9976_fixed.java
@@ -1,33 +1,38 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
+            } else if (explicit) {
+                // new one is explicit, but old one wasn't...
+            } else {
+                // neither is explicit, so skip replacement
+                return;
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
 
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                 // otherwise, which one to choose?
                     // new type more generic, use old
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
