diff --git a/tmp/9d329aae-62cc-4c21-8d49-2b1a2083e0a3_buggy.java b/tmp/eb6f9204-338a-4718-b9ff-f50a918b1773_fixed.java
index e5ad041..45845aa 100644
--- a/tmp/9d329aae-62cc-4c21-8d49-2b1a2083e0a3_buggy.java
+++ b/tmp/eb6f9204-338a-4718-b9ff-f50a918b1773_fixed.java
@@ -1,19 +1,26 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
         // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
         /*
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
         */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
+        
+        // 27-May-2020, tatu: [databind#2774] need to ensure parameterization is retained,
+        //   as would occur if we resolved from scratch
+        if (_bindings == null || _bindings.isEmpty()) {
             return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
         }
+        // tricky: MUST resolve bindings again, otherwise parameterization is lost
+        return _replaceClass(subclass);
+    }
\ No newline at end of file
