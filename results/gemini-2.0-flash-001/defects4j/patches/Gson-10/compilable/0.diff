diff --git a/tmp/1b227597-116a-429e-9fa2-e892ba5fde92_buggy.java b/tmp/9881e25d-b710-4009-a860-8f730cbce563_fixed.java
index 9d42346..480a00a 100644
--- a/tmp/1b227597-116a-429e-9fa2-e892ba5fde92_buggy.java
+++ b/tmp/9881e25d-b710-4009-a860-8f730cbce563_fixed.java
@@ -1,37 +1,58 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
+          if (isPrimitive && fieldValue == null) {
+            // Set to default value for primitive types if the value is null
+            if (fieldType.getRawType() == int.class) {
+              field.setInt(value, 0);
+            } else if (fieldType.getRawType() == long.class) {
+              field.setLong(value, 0L);
+            } else if (fieldType.getRawType() == short.class) {
+              field.setShort(value, (short) 0);
+            } else if (fieldType.getRawType() == byte.class) {
+              field.setByte(value, (byte) 0);
+            } else if (fieldType.getRawType() == float.class) {
+              field.setFloat(value, 0.0f);
+            } else if (fieldType.getRawType() == double.class) {
+              field.setDouble(value, 0.0d);
+            } else if (fieldType.getRawType() == boolean.class) {
+              field.setBoolean(value, false);
+            } else {
               field.set(value, fieldValue);
             }
+          } else {
+            field.set(value, fieldValue);
+          }
+        }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
