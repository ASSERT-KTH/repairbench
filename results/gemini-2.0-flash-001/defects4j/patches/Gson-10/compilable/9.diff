diff --git a/tmp/28c03304-12c4-4798-94f9-24500a1efa09_buggy.java b/tmp/c3bdf2c7-af1d-46cf-b7d7-ef7d946921f9_fixed.java
index 9d42346..72e5072 100644
--- a/tmp/28c03304-12c4-4798-94f9-24500a1efa09_buggy.java
+++ b/tmp/c3bdf2c7-af1d-46cf-b7d7-ef7d946921f9_fixed.java
@@ -1,37 +1,59 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
+          if (isPrimitive && fieldValue == null) {
+            // Gson does not accept null for primitive types, E.g., int, double.
+            // If this case occurs (when the json contains null), reset the value to the default value of the primitive type.
+            // See https://github.com/google/gson/issues/1439
+            if (fieldType.getRawType() == int.class) {
+              fieldValue = 0;
+            } else if (fieldType.getRawType() == long.class) {
+              fieldValue = 0L;
+            } else if (fieldType.getRawType() == boolean.class) {
+              fieldValue = false;
+            } else if (fieldType.getRawType() == float.class) {
+              fieldValue = 0.0f;
+            } else if (fieldType.getRawType() == double.class) {
+              fieldValue = 0.0d;
+            } else if (fieldType.getRawType() == short.class) {
+              fieldValue = (short) 0;
+            } else if (fieldType.getRawType() == byte.class) {
+              fieldValue = (byte) 0;
+            } else if (fieldType.getRawType() == char.class) {
+              fieldValue = '\u0000';
+            }
+          }
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
         if (!serialized) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
