diff --git a/tmp/bd8575fa-7021-450d-86e8-bf7e8bddd521_buggy.java b/tmp/a2dae93f-aaa3-4880-809e-289b4323896e_fixed.java
index 5f1dcf2..7627921 100644
--- a/tmp/bd8575fa-7021-450d-86e8-bf7e8bddd521_buggy.java
+++ b/tmp/a2dae93f-aaa3-4880-809e-289b4323896e_fixed.java
@@ -1,41 +1,49 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = reflected;
                 }
 
-                return;
-
-            }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = contracted;
+                } else {
+                    // do a completely new simplex
+                    simplex = evaluateNewSimplex(original, sigma, comparator);
+                }
+
+            }
 
             // check convergence
+            if (checker != null && checker.converged(getIterations(), original[0], simplex[0])) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
