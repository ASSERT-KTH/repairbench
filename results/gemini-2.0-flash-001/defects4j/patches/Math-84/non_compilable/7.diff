diff --git a/tmp/55cfe7df-b201-4f41-9e04-a9d8003838ec_buggy.java b/tmp/0d2d9f45-fe81-482d-875d-238cdfd2ab66_fixed.java
index 5f1dcf2..8507ffc 100644
--- a/tmp/55cfe7df-b201-4f41-9e04-a9d8003838ec_buggy.java
+++ b/tmp/0d2d9f45-fe81-482d-875d-238cdfd2ab66_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = reflected;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = contracted;
                 return;
             }
 
+            // compute a shrinked simplex
+            simplex = shrinkSimplex(original, comparator);
+
         }
 
     }
\ No newline at end of file
