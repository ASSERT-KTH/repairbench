diff --git a/tmp/d25e8f37-4ef4-4dc7-9760-b49dbc28bec2_buggy.java b/tmp/683187a0-aa85-4a0a-a4e5-aa8ea71bde20_fixed.java
index 5f1dcf2..0a05a35 100644
--- a/tmp/d25e8f37-4ef4-4dc7-9760-b49dbc28bec2_buggy.java
+++ b/tmp/683187a0-aa85-4a0a-a4e5-aa8ea71bde20_fixed.java
@@ -1,41 +1,49 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = evaluateNewSimplex(original, 1.0, comparator);
                 }
 
-                return;
-
-            }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = contractedSimplex;
+                } else {
+                    // perform a shrink step
+                    simplex = shrinkSimplex(original, comparator);
+                }
+
+            }
 
             // check convergence
+            if (converged(simplex)) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
