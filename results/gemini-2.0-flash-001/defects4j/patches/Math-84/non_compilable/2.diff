diff --git a/tmp/0c14e948-a612-4641-9731-3abaf510597a_buggy.java b/tmp/8dcd1f9c-8933-455d-81d4-49930dc803f5_fixed.java
index 5f1dcf2..c80cc26 100644
--- a/tmp/0c14e948-a612-4641-9731-3abaf510597a_buggy.java
+++ b/tmp/8dcd1f9c-8933-455d-81d4-49930dc803f5_fixed.java
@@ -1,41 +1,59 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = evaluateNewSimplex(original, 1.0, comparator);
                 }
 
-                return;
-
-            }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = contractedSimplex;
+                } else {
+                    // do a complete restart
+                    simplex = original;
+                    for (int i = 0; i < simplex.length; i++) {
+                        RealPointValuePair vertex = simplex[i];
+                        final double[] point = vertex.getPointRef();
+                        double[] centroid = computeCentroid(simplex, i);
+                        for (int k = 0; k < point.length; k++) {
+                            point[k] = centroid[k] + alpha * (point[k] - centroid[k]);
+                        }
+                        simplex[i] = new RealPointValuePair(point, computeFunctionValue(point), false);
+                    }
+                    sortSimplex(comparator);
+                }
+
+            }
 
             // check convergence
+            if (isConverged(simplex)) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
