diff --git a/tmp/869678a2-8183-4667-b722-75e74f8e3271_buggy.java b/tmp/521940e3-0128-4c61-955d-fb5709873d73_fixed.java
index 5f1dcf2..536d2e3 100644
--- a/tmp/869678a2-8183-4667-b722-75e74f8e3271_buggy.java
+++ b/tmp/521940e3-0128-4c61-955d-fb5709873d73_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = expanded.getPoint() != null ? evaluateNewSimplex(original, khi, comparator, true) : simplex;
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
+                    simplex = reflected.getPoint() != null ? evaluateNewSimplex(original, 1.0, comparator, true) : simplex;
                 }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
+                    simplex = contracted.getPoint() != null ? evaluateNewSimplex(original, gamma, comparator, true) : simplex;
+                } else {
+                    // perform a shrink step
+                    simplex = shrinkSimplex(original, comparator);
+                }
+            }
             // check convergence
+            if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
                 return;
             }
-
         }
 
     }
\ No newline at end of file
