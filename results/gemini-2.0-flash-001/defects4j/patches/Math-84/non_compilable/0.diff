diff --git a/tmp/95923614-a235-4e54-8f11-6ceebcb5c6ea_buggy.java b/tmp/3d84a56a-c650-4b4e-8524-c8d28f383b1b_fixed.java
index 5f1dcf2..e2c1968 100644
--- a/tmp/95923614-a235-4e54-8f11-6ceebcb5c6ea_buggy.java
+++ b/tmp/3d84a56a-c650-4b4e-8524-c8d28f383b1b_fixed.java
@@ -1,41 +1,48 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = expanded.getPoint() != null ? evaluateNewSimplex(original, khi, comparator) : reflected;
+                } else {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = reflected.getPoint() != null ? evaluateNewSimplex(original, 1.0, comparator) : original[0];
                 }
 
-                return;
-
-            }
+            } else {
 
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = contracted.getPoint() != null ? evaluateNewSimplex(original, gamma, comparator) : original[0];
+                } else {
+                    // perform a shrink step
+                    simplex = shrinkSimplex(original, comparator);
+                }
+
+            }
 
             // check convergence
+            if (checker != null && checker.converged(getIterations(), original[0], simplex[0])) {
                 return;
             }
-
         }
 
     }
\ No newline at end of file
