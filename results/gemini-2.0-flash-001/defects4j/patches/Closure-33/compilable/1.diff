diff --git a/tmp/8722e272-cd1f-453d-86f2-031c0a97633b_buggy.java b/tmp/bec8194d-8b03-4b7a-b13c-1a76e108753e_fixed.java
index fb2b020..a2f345e 100644
--- a/tmp/8722e272-cd1f-453d-86f2-031c0a97633b_buggy.java
+++ b/tmp/bec8194d-8b03-4b7a-b13c-1a76e108753e_fixed.java
@@ -1,27 +1,32 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          boolean hasProperty = hasProperty(prop);
+          if (!hasProperty) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else if (hasProperty(prop)) {
+          JSType oldType = getPropertyType(prop);
+          JSType inferred = oldType.getLeastSupertype(propType);
+          defineInferredProperty(prop, inferred, null);
         }
       }
     }
   }
\ No newline at end of file
