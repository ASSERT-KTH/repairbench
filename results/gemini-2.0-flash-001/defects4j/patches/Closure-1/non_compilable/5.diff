diff --git a/tmp/6d965c2f-82eb-4059-a3a5-9b79afb78c9c_buggy.java b/tmp/e810baea-782a-4860-b5c4-6929f59cb0e3_fixed.java
index 61ffdbf..11dc205 100644
--- a/tmp/6d965c2f-82eb-4059-a3a5-9b79afb78c9c_buggy.java
+++ b/tmp/e810baea-782a-4860-b5c4-6929f59cb0e3_fixed.java
@@ -1,44 +1,47 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
+      // Only strip if we are removing globals, or are in advanced mode.
+      if (removeGlobal || compiler.getOptions().getCompilerOptions().getWarningLevel().getLevel() == CheckLevel.ERROR) {
         Node lastArg;
         while ((lastArg = argList.getLastChild()) != null) {
           Var var = fnScope.getVar(lastArg.getString());
           if (!referenced.contains(var)) {
             argList.removeChild(lastArg);
             compiler.reportCodeChange();
           } else {
             break;
           }
         }
+      }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
