diff --git a/tmp/16167d88-1870-4c27-914f-ebc4d7fa8fb1_buggy.java b/tmp/f0245930-34c5-4671-b1ee-7c5cc17d4ba4_fixed.java
index 1478ee1..72d1f9b 100644
--- a/tmp/16167d88-1870-4c27-914f-ebc4d7fa8fb1_buggy.java
+++ b/tmp/f0245930-34c5-4671-b1ee-7c5cc17d4ba4_fixed.java
@@ -1,24 +1,19 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      final double v1X = v1.getX();
+      final double v1Y = v1.getY();
+      final double v1Z = v1.getZ();
+      final double v2X = v2.getX();
+      final double v2Y = v2.getY();
+      final double v2Z = v2.getZ();
+
+      return new Vector3D(v1Y * v2Z - v1Z * v2Y, v1Z * v2X - v1X * v2Z, v1X * v2Y - v1Y * v2X);
 
   }
\ No newline at end of file
