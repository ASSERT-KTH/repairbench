diff --git a/tmp/59087c6c-319c-4ef8-9cf2-22825918317f_buggy.java b/tmp/9171bf58-c106-41d5-9e2e-1ab6ecd9c4d7_fixed.java
index b5d94e0..facabf6 100644
--- a/tmp/59087c6c-319c-4ef8-9cf2-22825918317f_buggy.java
+++ b/tmp/9171bf58-c106-41d5-9e2e-1ab6ecd9c4d7_fixed.java
@@ -1,26 +1,37 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
     do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
-
       visit(node);
       visits++;
 
       Preconditions.checkState(visits < 10000, "too many interations");
+
+      if (shouldRetraverse(node)) {
+        // Re-traverse the children after the current node is visited
+        // and should be retraversed.
+        Node c = node.getFirstChild();
+        while(c != null) {
+          traverse(c);
+          c = c.getNext();
+        }
+      } else {
+        // Only traverse the children once if no retraverse needed.
+        Node c = node.getFirstChild();
+        while(c != null) {
+          traverse(c);
+          c = c.getNext();
+        }
+      }
+
     } while (shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
