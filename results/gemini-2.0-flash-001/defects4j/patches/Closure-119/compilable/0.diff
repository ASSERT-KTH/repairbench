diff --git a/tmp/c547e658-4789-485c-bfc4-57888492658c_buggy.java b/tmp/b41dbc39-c59f-4f59-8035-d5115665a21d_fixed.java
index 6dd359b..290faa9 100644
--- a/tmp/c547e658-4789-485c-bfc4-57888492658c_buggy.java
+++ b/tmp/b41dbc39-c59f-4f59-8035-d5115665a21d_fixed.java
@@ -1,125 +1,130 @@
     public void collect(JSModule module, Scope scope, Node n) {
       Node parent = n.getParent();
 
       String name;
       boolean isSet = false;
       Name.Type type = Name.Type.OTHER;
       boolean isPropAssign = false;
 
       switch (n.getType()) {
         case Token.GETTER_DEF:
         case Token.SETTER_DEF:
         case Token.STRING_KEY:
           // This may be a key in an object literal declaration.
           name = null;
           if (parent != null && parent.isObjectLit()) {
             name = getNameForObjLitKey(n);
           }
           if (name == null) {
             return;
           }
           isSet = true;
           switch (n.getType()) {
             case Token.STRING_KEY:
               type = getValueType(n.getFirstChild());
               break;
             case Token.GETTER_DEF:
               type = Name.Type.GET;
               break;
             case Token.SETTER_DEF:
               type = Name.Type.SET;
               break;
             default:
               throw new IllegalStateException("unexpected:" + n);
           }
           break;
         case Token.NAME:
           // This may be a variable get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.VAR:
                 isSet = true;
                 Node rvalue = n.getFirstChild();
                 type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
                 break;
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                 }
                 break;
               case Token.GETPROP:
                 return;
               case Token.FUNCTION:
                 Node gramps = parent.getParent();
                 if (gramps == null || NodeUtil.isFunctionExpression(parent)) {
                   return;
                 }
                 isSet = true;
                 type = Name.Type.FUNCTION;
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
+              case Token.CATCH:
+                // Do not warn about catch parameter names.  They are
+                // block-scoped in ECMAScript 5, and we do not want to report
+                // them as global names.
+                return;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getString();
           break;
         case Token.GETPROP:
           // This may be a namespaced name get or set.
           if (parent != null) {
             switch (parent.getType()) {
               case Token.ASSIGN:
                 if (parent.getFirstChild() == n) {
                   isSet = true;
                   type = getValueType(n.getNext());
                   isPropAssign = true;
                 }
                 break;
               case Token.INC:
               case Token.DEC:
                 isSet = true;
                 type = Name.Type.OTHER;
                 break;
               case Token.GETPROP:
                 return;
               default:
                 if (NodeUtil.isAssignmentOp(parent) &&
                     parent.getFirstChild() == n) {
                   isSet = true;
                   type = Name.Type.OTHER;
                 }
             }
           }
           name = n.getQualifiedName();
           if (name == null) {
             return;
           }
           break;
         default:
           return;
       }
 
       // We are only interested in global names.
       if (!isGlobalNameReference(name, scope)) {
         return;
       }
 
       if (isSet) {
         if (isGlobalScope(scope)) {
           handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);
         } else {
           handleSetFromLocal(module, scope, n, parent, name);
         }
       } else {
         handleGet(module, scope, n, parent, name);
       }
     }
\ No newline at end of file
