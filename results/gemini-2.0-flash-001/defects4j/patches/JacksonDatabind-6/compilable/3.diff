diff --git a/tmp/451bcdfe-7465-4e2c-a4c5-5fb494597fae_buggy.java b/tmp/a7da4728-b00a-49ea-8a0a-0a8844d8d5b2_fixed.java
index cd412d2..4b5b679 100644
--- a/tmp/451bcdfe-7465-4e2c-a4c5-5fb494597fae_buggy.java
+++ b/tmp/a7da4728-b00a-49ea-8a0a-0a8844d8d5b2_fixed.java
@@ -1,76 +1,113 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            if (len > 4 && dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+                int timeZoneOffsetIndex = findTimeZoneOffset(dateStr);
+                if (timeZoneOffsetIndex > 0) {
+                    //int timeLen = len - dateStr.lastIndexOf('T') - 1;
+                    if (dateStr.charAt(timeZoneOffsetIndex - 1) == ':') {
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                        sb.delete(timeZoneOffsetIndex - 1, timeZoneOffsetIndex);
                         dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
                     }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                    int secondsIndex = findLast(dateStr, ':', timeZoneOffsetIndex);
+                    if (secondsIndex > 0) {
+                        int dotIndex = findLast(dateStr, '.', timeZoneOffsetIndex);
+                         if (dotIndex < 0) {
                             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                            sb.insert(timeZoneOffsetIndex, ".000");
                             dateStr = sb.toString();
+                         } else {
+                             int millisLen = timeZoneOffsetIndex - dotIndex - 1;
+                             if (millisLen == 1) {
+                                 StringBuilder sb = new StringBuilder(dateStr);
+                                 sb.insert(timeZoneOffsetIndex, "00");
+                                 dateStr = sb.toString();
+                             } else if (millisLen == 2) {
+                                 StringBuilder sb = new StringBuilder(dateStr);
+                                 sb.insert(timeZoneOffsetIndex, "0");
+                                 dateStr = sb.toString();
+                             }
+                         }
+                    } else {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        int tIndex = dateStr.indexOf('T');
+                        if (tIndex > 0) {
+                           sb.insert(timeZoneOffsetIndex, ":00:00.000");
+                           dateStr = sb.toString();
+                        }
+                    }
                 }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                         sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
+
+    private int findTimeZoneOffset(String dateStr) {
+        int len = dateStr.length();
+        for (int i = len - 5; i >= 10; --i) {
+            char c = dateStr.charAt(i);
+            if (c == '+' || c == '-') {
+                return i;
+            }
+        }
+        return -1;
+    }
+    
+    private int findLast(String dateStr, char ch, int end) {
+        for (int i = end - 1; i >= 0; --i) {
+            if (dateStr.charAt(i) == ch) {
+                return i;
+            }
+        }
+        return -1;
+    }
