diff --git a/tmp/c0695849-0ec1-4292-ad7c-c1cb83acf252_buggy.java b/tmp/2f9bdede-2ad0-4d6d-9a6b-9d16776897d9_fixed.java
index cd412d2..c365f46 100644
--- a/tmp/c0695849-0ec1-4292-ad7c-c1cb83acf252_buggy.java
+++ b/tmp/2f9bdede-2ad0-4d6d-9a6b-9d16776897d9_fixed.java
@@ -1,76 +1,94 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
-            if (dateStr.charAt(len-4) == ':') {
+            if (len > 4 && dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+                int timeZoneOffsetIndex = findTimeZoneOffset(dateStr);
+                if (timeZoneOffsetIndex > 0) {
+                    // If offset includes ':'
+                    if (dateStr.charAt(timeZoneOffsetIndex - 3) == ':') {
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                        sb.delete(timeZoneOffsetIndex - 3, timeZoneOffsetIndex - 2);
                         dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                    } else if ((timeZoneOffsetIndex + 3) == len) {
                         dateStr += "00";
                     }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+                    int dotIndex = dateStr.indexOf('.');
+                    if (dotIndex < 0) {
+                      int timeZoneIndex = findTimeZoneOffset(dateStr);
+                      if (timeZoneIndex > 0) {
+                        int secondsIndex = timeZoneIndex - 3;
+                        if (secondsIndex > 0 && Character.isDigit(dateStr.charAt(secondsIndex))) {
                           StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                          sb.insert(secondsIndex + 1, ".000");
                           dateStr = sb.toString();
                         }
+                      }
+                    } else {
+                      // Pad partial seconds with 0s until it has length 3
+                      int timeZoneIndex = findTimeZoneOffset(dateStr);
+                      if (timeZoneIndex > 0) {
+                        int millisecondsLength = timeZoneIndex - (dotIndex + 1);
+                        if (millisecondsLength < 3) {
+                          StringBuilder sb = new StringBuilder(dateStr);
+                          for (int i = millisecondsLength; i < 3; i++) {
+                            sb.insert(timeZoneIndex, '0');
+                          }
+                          dateStr = sb.toString();
+                        }
+                      }
+                    }
+                }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                         sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
\ No newline at end of file
