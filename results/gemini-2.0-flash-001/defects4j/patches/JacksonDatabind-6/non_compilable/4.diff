diff --git a/tmp/899b9236-7b6f-470d-8566-f4cea7c79426_buggy.java b/tmp/7eb6605d-1ccd-4687-8e28-7d6d77db32b9_fixed.java
index cd412d2..6442d55 100644
--- a/tmp/899b9236-7b6f-470d-8566-f4cea7c79426_buggy.java
+++ b/tmp/7eb6605d-1ccd-4687-8e28-7d6d77db32b9_fixed.java
@@ -1,76 +1,80 @@
     protected Date parseAsISO8601(String dateStr, ParsePosition pos)
     {
         /* 21-May-2009, tatu: DateFormat has very strict handling of
          * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
          */
 
         /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
          * quite simple because we already set date format timezone to be
          * GMT, and hence can just strip out 'Z' altogether
          */
         int len = dateStr.length();
         char c = dateStr.charAt(len-1);
         DateFormat df;
 
         // [JACKSON-200]: need to support "plain" date...
         if (len <= 10 && Character.isDigit(c)) {
             df = _formatPlain;
             if (df == null) {
                 df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
             }
         } else if (c == 'Z') {
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
             // [JACKSON-334]: may be missing milliseconds... if so, add
             if (dateStr.charAt(len-4) == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.insert(len-1, ".000");
                 dateStr = sb.toString();
             }
         } else {
             // Let's see if we have timezone indicator or not...
             if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
                 // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+                int dot = dateStr.indexOf('.');
+                int tzIndex = hasTimeZone(dateStr, len);
+
+                if (dot < 0) { // no fractional seconds
+                    int withoutTZ = (tzIndex < 0) ? len : tzIndex;
+                    if (withoutTZ == len - 6 && dateStr.charAt(withoutTZ -1) == ':') {
+                        dateStr = dateStr.substring(0, withoutTZ -1) + dateStr.substring(withoutTZ);
+                    }
+                } else {
+                    // fix fractional seconds
+                    int millisEnd = (tzIndex < 0) ? len : tzIndex;
+                    int fractionalLength = millisEnd - (dot + 1);
+
+                    if (fractionalLength == 1) {
+                        dateStr = dateStr.substring(0, millisEnd) + "00" + dateStr.substring(millisEnd);
+                    } else if (fractionalLength == 2) {
+                        dateStr = dateStr.substring(0, millisEnd) + "0" + dateStr.substring(millisEnd);
+                    }
+                }
+                if (tzIndex > 0 && dateStr.charAt(tzIndex - 3) == ':') { // remove optional colon
+                    dateStr = dateStr.substring(0, tzIndex - 3) + dateStr.substring(tzIndex - 2);
                 }
                 df = _formatISO8601;
                 if (_formatISO8601 == null) {
                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
                 }
             } else {
                 // If not, plain date. Easiest to just patch 'Z' in the end?
                 StringBuilder sb = new StringBuilder(dateStr);
                 // And possible also millisecond part if missing
                 int timeLen = len - dateStr.lastIndexOf('T') - 1;
                 if (timeLen <= 8) {
                         sb.append(".000");
                 }
                 sb.append('Z');
                 dateStr = sb.toString();
                 df = _formatISO8601_z;
                 if (df == null) {
                     df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                             _timezone, _locale);
                 }
             }
         }
         return df.parse(dateStr, pos);
     }
