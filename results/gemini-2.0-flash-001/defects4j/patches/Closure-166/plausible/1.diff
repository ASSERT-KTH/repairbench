diff --git a/tmp/05a31620-6821-49a7-afaf-b80a9c59bdbf_buggy.java b/tmp/d40b9233-295a-4db2-a485-63217f5477fe_fixed.java
index 5f96616..8fac301 100644
--- a/tmp/05a31620-6821-49a7-afaf-b80a9c59bdbf_buggy.java
+++ b/tmp/d40b9233-295a-4db2-a485-63217f5477fe_fixed.java
@@ -1,20 +1,27 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // If it's a union type, try to match any of the constraints in the
+      // union.
+      UnionType union = (UnionType) constraint;
+      for (JSType alternate : union.getAlternates()) {
+        matchConstraint(alternate);
+      }
     }
   }
\ No newline at end of file
