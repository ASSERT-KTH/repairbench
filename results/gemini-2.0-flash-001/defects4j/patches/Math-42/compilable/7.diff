diff --git a/tmp/813f3ac4-771a-4d7f-9104-2c285e25b82c_buggy.java b/tmp/f0b35d20-ee14-4ad5-b508-d139523141bc_fixed.java
index efa499e..465fb59 100644
--- a/tmp/813f3ac4-771a-4d7f-9104-2c285e25b82c_buggy.java
+++ b/tmp/f0b35d20-ee14-4ad5-b508-d139523141bc_fixed.java
@@ -1,35 +1,34 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+      double mostNegative = negativeVarBasicRow == null ? 0 :
+          getEntry(negativeVarBasicRow, getRhsOffset());
 
       Set<Integer> basicRows = new HashSet<Integer>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
           coefficients[i] = 0;
           continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+        if (basicRow == null) {
+            coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+        } else if (basicRows.contains(basicRow)) {
           // if multiple variables can take a given value
           // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          coefficients[i] = 0;
         } else {
           basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+          coefficients[i] = getEntry(basicRow, getRhsOffset()) -
               (restrictToNonNegative ? 0 : mostNegative);
         }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
