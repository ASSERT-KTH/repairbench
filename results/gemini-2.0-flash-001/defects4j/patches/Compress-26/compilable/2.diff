diff --git a/tmp/57576e3f-c6df-4283-a6d7-4ebfc44b07e5_buggy.java b/tmp/3209ee2f-936f-4b79-8939-acef80972014_fixed.java
index 4b163f6..3102534 100644
--- a/tmp/57576e3f-c6df-4283-a6d7-4ebfc44b07e5_buggy.java
+++ b/tmp/3209ee2f-936f-4b79-8939-acef80972014_fixed.java
@@ -1,28 +1,34 @@
     /**
      * Skips the given number of bytes by repeatedly invoking skip on
      * the given input stream if necessary.
      *
      * <p>In a case where the stream's skip() method returns 0 before
      * the requested number of bytes has been skip this implementation
      * will fall back to using the read() method.</p>
      *
      * <p>This method will only skip less than the requested number of
      * bytes if the end of the input stream has been reached.</p>
      *
      * @param input stream to skip bytes in
      * @param numToSkip the number of bytes to skip
      * @return the number of bytes actually skipped
      * @throws IOException
      */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long skipped = 0;
         while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+            long result = input.skip(numToSkip);
+            if (result == 0) {
+                // fall back to read()
+                int b = input.read();
+                if (b < 0) {
                     break;
+                } else {
+                    result = 1;
                 }
-            numToSkip -= skipped;
             }
-            
-        return available - numToSkip;
+            skipped += result;
+            numToSkip -= result;
+        }
+        return skipped;
     }
\ No newline at end of file
