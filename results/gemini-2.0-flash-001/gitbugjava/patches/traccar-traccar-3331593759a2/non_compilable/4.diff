diff --git a/tmp/960927b3-1b72-4654-91b9-43fefa4c2d3d_buggy.java b/tmp/b6e13162-4e16-4a10-9015-b7b3fdf41faf_fixed.java
index 2189af9..4336b26 100644
--- a/tmp/960927b3-1b72-4654-91b9-43fefa4c2d3d_buggy.java
+++ b/tmp/b6e13162-4e16-4a10-9015-b7b3fdf41faf_fixed.java
@@ -1,113 +1,134 @@
     private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
         int type = buf.readUnsignedByte();
 
         if (type == 0xF0) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
             if (buf.readUnsignedByte() > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
 
             buf.readUnsignedByte(); // vehicle type
 
             int count;
             int subtype = buf.readUnsignedByte();
             switch (subtype) {
                 case 0x01:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x0102:
                             case 0x0528:
                             case 0x0546:
+                                if (length >= 4) {
                                     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x0103:
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x052A:
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x0105:
                             case 0x052C:
+                                if (length >= 4) {
                                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             case 0x014A:
                             case 0x0537:
                             case 0x0538:
                             case 0x0539:
+                                if (length >= 2) {
                                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
+                                } else {
+                                    buf.skipBytes(length);
+                                }
                                 break;
                             default:
                                 switch (length) {
                                     case 1:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                         break;
                                     case 2:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                         break;
                                     case 4:
                                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                         break;
                                     default:
                                         buf.skipBytes(length);
                                         break;
                                 }
                                 break;
                         }
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
                         int id = buf.readUnsignedShort();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:
                                 position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                                 break;
                             case 0x1B:
                                 position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                                 break;
                             case 0x1C:
                                 position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                                 break;
                             case 0x1D:
                             case 0x1E:
                             case 0x1F:
                                 position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                                 break;
                             case 0x23:
                                 position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                                 break;
                             default:
+                                buf.skipBytes(length);
                                 break;
                         }
-                        buf.skipBytes(length);
                     }
                     decodeCoordinates(position, buf);
                     position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {
-                        position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
+                        int readableBytes = Math.min(17, buf.readableBytes());
+                        position.set(Position.KEY_VIN, buf.readCharSequence(readableBytes, StandardCharsets.US_ASCII).toString());
                     }
                     getLastLocation(position, time);
                     break;
                 default:
                     return null;
             }
 
             return position;
         }
 
         return null;
     }
\ No newline at end of file
