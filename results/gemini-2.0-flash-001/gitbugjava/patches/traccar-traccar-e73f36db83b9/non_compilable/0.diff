diff --git a/tmp/966226d9-8343-48be-81ee-bef4a8641b0b_buggy.java b/tmp/a571abcd-f07b-4a29-ae74-4cc772da2936_fixed.java
index cd6f89c..5f37d84 100644
--- a/tmp/966226d9-8343-48be-81ee-bef4a8641b0b_buggy.java
+++ b/tmp/a571abcd-f07b-4a29-ae74-4cc772da2936_fixed.java
@@ -1,102 +1,110 @@
     private Object decodeEri(Channel channel, SocketAddress remoteAddress, String sentence) {
         Parser parser = new Parser(PATTERN_ERI, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         long mask = parser.nextHexLong();
 
         LinkedList<Position> positions = new LinkedList<>();
 
         Integer power = parser.nextInt();
 
         Parser itemParser = new Parser(PATTERN_LOCATION, parser.next());
         while (itemParser.find()) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             decodeLocation(position, itemParser);
 
             positions.add(position);
         }
 
+        if (positions.isEmpty()) {
+            return null;
+        }
+
         Position position = positions.getLast();
 
         skipLocation(parser);
 
         if (power != null) {
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
         if (parser.hasNextAny(12)) {
 
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());
             position.set(Position.PREFIX_ADC + 3, parser.next());
             if (parser.hasNext(2)) {
                 position.set(Position.KEY_INPUT, parser.nextHexInt());
                 position.set(Position.KEY_OUTPUT, parser.nextHexInt());
             }
             if (parser.hasNext(4)) {
                 position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
                 decodeStatus(position, parser);
             }
 
             int index = 0;
             String[] data = parser.next().split(",");
 
             index += 1; // device type
 
             if (BitUtil.check(mask, 0)) {
                 index += 1; // digital fuel sensor data
             }
 
             if (BitUtil.check(mask, 1)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
                     index += 1; // id
                     index += 1; // type
-                    if (!data[index++].isEmpty()) {
+                    if (index < data.length && !data[index++].isEmpty()) {
                         position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                    } else {
+                        index--;
                     }
                 }
             }
 
             if (BitUtil.check(mask, 2)) {
                 index += 1; // can data
             }
 
             if (BitUtil.check(mask, 3) || BitUtil.check(mask, 4)) {
                 int deviceCount = Integer.parseInt(data[index++]);
                 for (int i = 1; i <= deviceCount; i++) {
                     index += 1; // type
                     if (BitUtil.check(mask, 3)) {
+                        if (index < data.length) {
                             position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(data[index++]));
                         }
+                    }
                     if (BitUtil.check(mask, 4)) {
                         index += 1; // volume
                     }
                 }
             }
 
         }
 
         if (parser.hasNext()) {
             position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         }
 
         decodeDeviceTime(position, parser);
         if (ignoreFixTime) {
             positions.clear();
             positions.add(position);
         }
 
         return positions;
     }
\ No newline at end of file
