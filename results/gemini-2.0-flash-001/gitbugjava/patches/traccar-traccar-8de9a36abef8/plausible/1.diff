diff --git a/tmp/3a1a7ddb-a470-40bd-9eae-8d13c305fa8c_buggy.java b/tmp/6d3ce89f-3eda-4c0c-bc80-6d79b3e3eb67_fixed.java
index ad77f15..d8e9de0 100644
--- a/tmp/3a1a7ddb-a470-40bd-9eae-8d13c305fa8c_buggy.java
+++ b/tmp/6d3ce89f-3eda-4c0c-bc80-6d79b3e3eb67_fixed.java
@@ -1,112 +1,197 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                if (values.length > index) {
                     position.setValid(values[index++].equals("A"));
+                }
+                if (values.length > index) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                }
+                if (values.length > index) {
                     position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                    if (values.length > index && values[index].charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
+                    index++;
+                }
+                if (values.length > index) {
                     position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                    if (values.length > index && values[index].charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                    index++;
                 }
+                if (values.length > index) {
+                    if (!values[index].isEmpty()) {
+                        try {
+                            position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                        } catch (NumberFormatException e) {
+                            //ignore
+                        }
+                    }
+                    index++;
+                }
+                if (values.length > index) {
+                    try {
                         position.setCourse(Integer.parseInt(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
+                }
                 if (index < values.length) {
+                    try {
                         position.setAltitude(Integer.parseInt(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 if (index < values.length) {
+                    try {
                         position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 if (index < values.length) {
+                    try {
                         position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
+                try {
                     position.setNetwork(new Network(CellTower.from(
                             Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                             Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                             Integer.parseInt(values[index++]))));
+                } catch (NumberFormatException e) {
+                    //ignore
+                }
                 break;
             case "COT":
                 if (index < values.length) {
+                    try {
                         position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 if (index < values.length) {
                     String[] hours = values[index].split("-");
+                    try {
                         position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                                 + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
                                 + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                        index++;
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 break;
             case "ADC":
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+                } catch (NumberFormatException e) {
+                    //ignore
+                }
                 if (index < values.length) {
+                    try {
                         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 if (index < values.length) {
+                    try {
                         position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 if (index < values.length) {
+                    try {
                         position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 break;
             case "DTT":
+                try {
+                    if (values.length > index) {
                         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                    }
+                    if (values.length > index && !values[index].isEmpty()) {
+                        int io = Integer.parseInt(values[index], 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                        index++;
                     }
+                    if (values.length > index + 1) {
                         position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                    }
+                    if (values.length > index) {
                         position.set("eventStatus", values[index++]);
+                    }
                     if (index < values.length) {
                         position.set("packetType", values[index++]);
                     }
+                } catch (NumberFormatException e) {
+                    //ignore
+                }
                 break;
             case "ETD":
+                if (values.length > index) {
                     position.set("eventData", values[index++]);
+                }
                 break;
             case "OBD":
+                if (values.length > index) {
                     position.set("obd", values[index++]);
+                }
                 break;
             case "TAG":
+                if (values.length > index) {
                     position.set("tagData", values[index++]);
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
+                    try {
                         int sensorIndex = Integer.parseInt(values[index++]);
                         int dataType = Integer.parseInt(values[index++]);
                         if (dataType == 0) {
                             position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                         } else if (dataType == 1) {
                             index += 1; // temperature sensor serial number
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                         }
+                    } catch (NumberFormatException e) {
+                        //ignore
+                    }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
