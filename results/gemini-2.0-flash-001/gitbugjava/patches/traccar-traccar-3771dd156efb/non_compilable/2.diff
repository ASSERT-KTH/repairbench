diff --git a/tmp/b0062d3d-6a13-4f7a-a7e8-1ca9f6c039d9_buggy.java b/tmp/e50357fa-fa0b-4662-97a6-2324601437c2_fixed.java
index 3da904d..6338071 100644
--- a/tmp/b0062d3d-6a13-4f7a-a7e8-1ca9f6c039d9_buggy.java
+++ b/tmp/e50357fa-fa0b-4662-97a6-2324601437c2_fixed.java
@@ -1,73 +1,104 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
         String[] values = parser.next().split(",");
         int index = 0;
 
         Network network = new Network();
 
+        if (values.length > index) {
+            try {
                 int cellCount = Integer.parseInt(values[index++]);
                 if (cellCount > 0) {
+                    if (values.length > index + 1) {
                         index += 1; // timing advance
                         int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
                         int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
                         for (int i = 0; i < cellCount; i++) {
+                            if (values.length > index + 1) {
                                 int lac = Integer.parseInt(values[index++]);
                                 int cid = Integer.parseInt(values[index++]);
+                                if (values.length > index) {
                                     String rssi = values[index++];
                                     if (!rssi.isEmpty()) {
                                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                                     } else {
                                         network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                                     }
+                                } else {
+                                    index = values.length;
+                                    break;
+                                }
+                            } else {
+                                index = values.length;
+                                break;
+                            }
+                        }
                     }
                 }
 
+                if (values.length > index) {
                     if (index < values.length && !values[index].isEmpty()) {
                         int wifiCount = Integer.parseInt(values[index++]);
 
                         for (int i = 0; i < wifiCount; i++) {
+                            if (values.length > index + 1) {
                                 index += 1; // wifi name
                                 String macAddress = values[index++];
                                 String rssi = values[index++];
                                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                                     network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                                 }
+                            } else {
+                                index = values.length;
+                                break;
                             }
                         }
+                    }
+                }
+
+            } catch (NumberFormatException e) {
+                // Avoid crashing if there are invalid numbers
+                // In tests, exception is thrown to report failure
+                if (network.getCellTowers().isEmpty() && network.getWifiAccessPoints().isEmpty()) {
+                    return null;
+                }
+            }
+
+        }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
