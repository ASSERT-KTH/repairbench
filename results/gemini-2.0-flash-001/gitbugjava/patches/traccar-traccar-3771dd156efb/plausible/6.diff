diff --git a/tmp/ab5839c8-b632-43af-9c94-d1d2728aeca1_buggy.java b/tmp/76cedb62-e124-45ad-81cd-f61f306f5f5f_fixed.java
index 3da904d..d684874 100644
--- a/tmp/ab5839c8-b632-43af-9c94-d1d2728aeca1_buggy.java
+++ b/tmp/76cedb62-e124-45ad-81cd-f61f306f5f5f_fixed.java
@@ -1,73 +1,107 @@
     private Position decodePosition(DeviceSession deviceSession, String data) {
 
         Parser parser = new Parser(PATTERN_POSITION, data);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_RSSI, parser.nextInt(0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.KEY_STEPS, parser.nextInt(0));
 
         int status = parser.nextHexInt(0);
         position.set(Position.KEY_ALARM, decodeAlarm(status));
         if (BitUtil.check(status, 4)) {
             position.set(Position.KEY_MOTION, true);
         }
 
-        String[] values = parser.next().split(",");
+        String next = parser.next();
+        if (next == null) {
+            return position;
+        }
+        String[] values = next.split(",");
         int index = 0;
 
         Network network = new Network();
 
+        if (index < values.length) {
+            try {
                 int cellCount = Integer.parseInt(values[index++]);
                 if (cellCount > 0) {
+                    if (index < values.length) {
                         index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                    }
+                    int mcc = 0;
+                    int mnc = 0;
+                    if (index < values.length && !values[index].isEmpty()) {
+                        mcc = Integer.parseInt(values[index++]);
+                    }
+                    if (index < values.length && !values[index].isEmpty()) {
+                        mnc = Integer.parseInt(values[index++]);
+                    }
 
-            for (int i = 0; i < cellCount; i++) {
+                    for (int i = 0; i < cellCount && index < values.length; i++) {
                         int lac = Integer.parseInt(values[index++]);
                         int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
+                        String rssi = "";
+                        if (index < values.length) {
+                            rssi = values[index++];
+                        }
                         if (!rssi.isEmpty()) {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
                     }
                 }
+            } catch (NumberFormatException e) {
+                // ignore
+            }
+        }
+
 
         if (index < values.length && !values[index].isEmpty()) {
+            try {
                 int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+                for (int i = 0; i < wifiCount && index < values.length; i++) {
+                    if (index < values.length) {
                         index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
+                    }
+                    String macAddress = "";
+                    if (index < values.length) {
+                        macAddress = values[index++];
+                    }
+                    String rssi = "";
+                    if (index < values.length) {
+                        rssi = values[index++];
+                    }
                     if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
                     }
                 }
+            } catch (NumberFormatException e) {
+                // ignore
+            }
         }
 
         if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
             position.setNetwork(network);
         }
 
         return position;
     }
\ No newline at end of file
