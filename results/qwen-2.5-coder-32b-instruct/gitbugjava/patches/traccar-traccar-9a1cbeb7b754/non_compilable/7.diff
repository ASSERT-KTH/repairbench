diff --git a/tmp/a4a8b663-6f43-44dc-b551-847e83a69eb7_buggy.java b/tmp/d5400699-17ee-4906-93ca-ef1440b29fcf_fixed.java
index 6d50be3..8e57d7a 100644
--- a/tmp/a4a8b663-6f43-44dc-b551-847e83a69eb7_buggy.java
+++ b/tmp/d5400699-17ee-4906-93ca-ef1440b29fcf_fixed.java
@@ -1,194 +1,373 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
-        buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    int commaIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (commaIndex == -1) {
+        return null; // No comma found, cannot decode
+    }
+    buf.readerIndex(commaIndex + 1);
+    if (buf.readableBytes() < 15) {
+        return null; // Not enough bytes for IMEI
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
+    if (buf.readableBytes() < 1 + 3 + 1) {
+        return null; // Not enough bytes for remaining fields
+    }
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    if (buf.readableBytes() < 4) {
+        return null; // Not enough bytes for remaining cache
+    }
     buf.readUnsignedIntLE(); // remaining cache
+
+    if (buf.readableBytes() < 2) {
+        return null; // Not enough bytes for count
+    }
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        if (buf.readableBytes() < 4) {
+            return null; // Not enough bytes for length and index
+        }
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
+        if (buf.readableBytes() < 1) {
+            return null; // Not enough bytes for paramCount
+        }
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                return null; // Not enough bytes for extension check
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            if (buf.readableBytes() < (extension ? 2 : 1)) {
+                return null; // Not enough bytes for id
+            }
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x01:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for event
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for validity
+                    }
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for satellites
+                    }
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for rssi
+                    }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for output
+                    }
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for input
+                    }
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x47:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for lock state
+                    }
                     int lockState = buf.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for throttle
+                    }
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for fuel level
+                    }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for battery level
+                    }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
+                    if (buf.readableBytes() < 1) {
+                        return null; // Not enough bytes for unknown id
+                    }
                     buf.readUnsignedByte();
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            return null; // Not enough bytes for paramCount
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                return null; // Not enough bytes for extension check
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            if (buf.readableBytes() < (extension ? 2 : 1)) {
+                return null; // Not enough bytes for id
+            }
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x08:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for speed
+                    }
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for course
+                    }
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for hdop
+                    }
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for altitude
+                    }
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for adc
+                    }
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for battery
+                    }
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for power
+                    }
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for event
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for obd speed
+                    }
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for fuel used
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for rpm
+                    }
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for coolant temp
+                    }
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for temp
+                    }
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for fuel consumption
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
+                    if (buf.readableBytes() < 2) {
+                        return null; // Not enough bytes for unknown id
+                    }
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            return null; // Not enough bytes for paramCount
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                return null; // Not enough bytes for extension check
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            if (buf.readableBytes() < (extension ? 2 : 1)) {
+                return null; // Not enough bytes for id
+            }
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for latitude
+                    }
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for longitude
+                    }
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for time
+                    }
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for odometer
+                    }
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for runtime
+                    }
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for driver unique id
+                    }
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for fuel used
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for fuel consumption
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
+                    if (buf.readableBytes() < 4) {
+                        return null; // Not enough bytes for unknown id
+                    }
                     buf.readUnsignedIntLE();
                     break;
             }
         }
 
+        if (buf.readableBytes() < 1) {
+            return null; // Not enough bytes for paramCount
+        }
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                return null; // Not enough bytes for extension check
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+            if (buf.readableBytes() < (extension ? 2 : 1)) {
+                return null; // Not enough bytes for id
+            }
             int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            if (buf.readableBytes() < 1) {
+                return null; // Not enough bytes for length
+            }
             int length = buf.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    if (buf.readableBytes() < 1 + 2 * length) {
+                        return null; // Not enough bytes for label and temps
+                    }
                     buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    for (int k = 0; k < length; k++) {
+                        position.set(Position.PREFIX_TEMP + (id - 0x2A) * length + k, buf.readShortLE() * 0.01);
+                    }
                     break;
                 case 0xFE31:
+                    if (buf.readableBytes() < length) {
+                        return null; // Not enough bytes for alarm data
+                    }
                     buf.readUnsignedByte(); // alarm protocol
                     buf.readUnsignedByte(); // alarm type
                     buf.skipBytes(length - 2);
                     break;
                 case 0xFEA8:
+                    if (buf.readableBytes() < length) {
+                        return null; // Not enough bytes for battery data
+                    }
                     buf.readUnsignedByte(); // battery status
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     buf.readUnsignedByte(); // battery alert
+                    buf.skipBytes(length - 3);
                     break;
                 default:
+                    if (buf.readableBytes() < length) {
+                        return null; // Not enough bytes for unknown id
+                    }
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
