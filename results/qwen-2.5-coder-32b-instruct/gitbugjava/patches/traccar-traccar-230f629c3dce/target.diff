diff --git a/tmp/73a90da4-9543-4edc-a91c-691f0ae0f9ab_buggy.java b/tmp/5873cdb1-4219-4775-aeef-b2c3749626f9_fixed.java
index 9410efa..3c34ae5 100644
--- a/tmp/73a90da4-9543-4edc-a91c-691f0ae0f9ab_buggy.java
+++ b/tmp/5873cdb1-4219-4775-aeef-b2c3749626f9_fixed.java
@@ -1,196 +1,200 @@
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         ByteBuf buf = (ByteBuf) msg;
 
         buf.readUnsignedShort(); // data length
 
         String imei = String.format("%015d", buf.readLong());
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         int type = buf.readUnsignedByte();
 
         if (type == MSG_RECORDS || type == MSG_EXTENDED_RECORDS) {
 
             List<Position> positions = new LinkedList<>();
 
             buf.readUnsignedByte(); // records left
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
                 buf.readUnsignedByte(); // timestamp extension
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     int recordExtension = buf.readUnsignedByte();
                     int mergeRecordCount = BitUtil.from(recordExtension, 4);
                     int currentRecord = BitUtil.to(recordExtension, 4);
 
                     if (currentRecord > 0 && currentRecord <= mergeRecordCount) {
                         position = positions.remove(positions.size() - 1);
                     }
                 }
 
                 buf.readUnsignedByte(); // priority (reserved)
 
+                int longitude = buf.readInt();
+                int latitude = buf.readInt();
+                if (longitude > Integer.MIN_VALUE && latitude > Integer.MIN_VALUE) {
                     position.setValid(true);
-                position.setLongitude(buf.readInt() / 10000000.0);
-                position.setLatitude(buf.readInt() / 10000000.0);
+                    position.setLongitude(longitude / 10000000.0);
+                    position.setLatitude(latitude / 10000000.0);
                     position.setAltitude(buf.readUnsignedShort() / 10.0);
                     position.setCourse(buf.readUnsignedShort() / 100.0);
-
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
-
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte() / 10.0);
+                } else {
+                    buf.skipBytes(8);
+                    getLastLocation(position, null);
+                }
 
                 if (type == MSG_EXTENDED_RECORDS) {
                     position.set(Position.KEY_EVENT, buf.readUnsignedShort());
                 } else {
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                 }
 
                 // Read 1 byte data
                 int valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 1);
                 }
 
                 // Read 2 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 2);
                 }
 
                 // Read 4 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 4);
                 }
 
                 // Read 8 byte data
                 valueCount = buf.readUnsignedByte();
                 for (int j = 0; j < valueCount; j++) {
                     int id = type == MSG_EXTENDED_RECORDS ? buf.readUnsignedShort() : buf.readUnsignedByte();
                     decodeParameter(position, id, buf, 8);
                 }
 
                 decodeDriver(position, Position.PREFIX_IO + 126, Position.PREFIX_IO + 127); // can driver
                 decodeDriver(position, Position.PREFIX_IO + 155, Position.PREFIX_IO + 156); // tco driver
 
                 Long tagIdPart1 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 760);
                 Long tagIdPart2 = (Long) position.getAttributes().remove(Position.PREFIX_IO + 761);
                 if (tagIdPart1 != null && tagIdPart2 != null) {
                     position.set("tagId", Long.toHexString(tagIdPart1) + Long.toHexString(tagIdPart2));
                 }
 
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("0002640113bc")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_DTCS) {
 
             List<Position> positions = new LinkedList<>();
 
             int count = buf.readUnsignedByte();
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 buf.readUnsignedByte(); // reserved
 
                 position.setTime(new Date(buf.readUnsignedInt() * 1000));
 
                 position.setValid(true);
                 position.setLongitude(buf.readInt() / 10000000.0);
                 position.setLatitude(buf.readInt() / 10000000.0);
 
                 if (buf.readUnsignedByte() == 2) {
                     position.set(Position.KEY_ARCHIVE, true);
                 }
 
                 position.set(Position.KEY_DTCS, buf.readSlice(5).toString(StandardCharsets.US_ASCII));
 
                 positions.add(position);
             }
 
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(
                         Unpooled.wrappedBuffer(DataConverter.parseHex("00026d01c4a4")), remoteAddress));
             }
 
             return positions;
 
         } else if (type == MSG_FILES) {
 
             int subtype = buf.readUnsignedByte();
             int source = buf.readUnsignedByte();
 
             if (subtype == 2) {
                 ByteBuf filename = buf.readSlice(8);
                 int total = buf.readUnsignedShort();
                 int current = buf.readUnsignedShort();
                 if (photo == null) {
                     photo = Unpooled.buffer();
                 }
                 photo.writeBytes(buf.readSlice(buf.readableBytes() - 2));
                 if (current < total - 1) {
                     ByteBuf content = Unpooled.buffer();
                     content.writeByte(subtype);
                     content.writeByte(source);
                     content.writeBytes(filename);
                     content.writeShort(current + 1);
                     ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
                     content.release();
                     if (channel != null) {
                         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                     }
                 } else {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
                     getLastLocation(position, null);
                     position.set(Position.KEY_IMAGE, writeMediaFile(imei, photo, "jpg"));
                     photo.release();
                     photo = null;
                     return position;
                 }
             }
 
             return null;
 
         } else if (type == MSG_IDENTIFICATION) {
 
             ByteBuf content = Unpooled.buffer();
             content.writeByte(1);
             ByteBuf response = RuptelaProtocolEncoder.encodeContent(type, content);
             content.release();
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
             }
 
             return null;
 
         } else {
 
             return decodeCommandResponse(deviceSession, type, buf);
 
         }
     }
