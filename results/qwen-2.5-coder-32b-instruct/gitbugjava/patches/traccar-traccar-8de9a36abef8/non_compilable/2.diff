diff --git a/tmp/4a6286f3-13c4-49b1-a6b9-35a2ba88c2f5_buggy.java b/tmp/cffec31e-2be7-4e54-9554-30de40123c55_fixed.java
index ad77f15..c61f390 100644
--- a/tmp/4a6286f3-13c4-49b1-a6b9-35a2ba88c2f5_buggy.java
+++ b/tmp/cffec31e-2be7-4e54-9554-30de40123c55_fixed.java
@@ -1,112 +1,122 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
-                }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
-                }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
-                }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
-                }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
-                }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
-                }
+            if (index < values.length) position.setValid(values[index++].equals("A"));
+            if (index < values.length) position.set(Position.KEY_SATELLITES, parseInt(values[index++]));
+            if (index < values.length) position.setLatitude(parseLatitude(values[index++]));
+            if (index < values.length) position.setLongitude(parseLongitude(values[index++]));
+            if (index < values.length) position.setSpeed(parseSpeed(values[index++]));
+            if (index < values.length) position.setCourse(parseInt(values[index++]));
+            if (index < values.length) position.setAltitude(parseInt(values[index++]));
+            if (index < values.length) position.set(Position.KEY_HDOP, parseDouble(values[index++]));
+            if (index < values.length) position.set(Position.KEY_VDOP, parseDouble(values[index++]));
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            if (index < values.length) position.setNetwork(new Network(CellTower.from(
+                    parseInt(values[index++]), parseInt(values[index++]),
+                    parseInt(values[index++], 16), parseInt(values[index++], 16),
+                    parseInt(values[index++]))));
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
-                }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
-                }
+            if (index < values.length) position.set(Position.KEY_ODOMETER, parseLong(values[index++]));
+            if (index < values.length) position.set(Position.KEY_HOURS, parseHours(values[index++]));
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
-                }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
-                }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
-                }
+            if (index < values.length) position.set(Position.KEY_POWER, parseDouble(values[index++]));
+            if (index < values.length) position.set(Position.KEY_BATTERY, parseDouble(values[index++]));
+            if (index < values.length) position.set(Position.PREFIX_ADC + 1, parseDouble(values[index++]));
+            if (index < values.length) position.set(Position.PREFIX_ADC + 2, parseDouble(values[index++]));
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length) position.set(Position.KEY_STATUS, parseInt(values[index++], 16));
+            if (index < values.length) {
+                int io = parseInt(values[index++], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
-                }
+            if (index < values.length) position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            if (index < values.length) position.set("eventStatus", values[index++]);
+            if (index < values.length) position.set("packetType", values[index++]);
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) position.set("eventData", values[index++]);
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) position.set("obd", values[index++]);
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) position.set("tagData", values[index++]);
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+                int sensorIndex = parseInt(values[index++]);
+                int dataType = parseInt(values[index++]);
                 if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    if (index < values.length) position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
                 } else if (dataType == 1) {
                     index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    if (index < values.length) position.set(Position.PREFIX_TEMP + sensorIndex, parseDouble(values[index++]));
                 }
             }
             break;
         default:
             break;
     }
 }
+
+private int parseInt(String s) {
+    return s.isEmpty() ? 0 : Integer.parseInt(s);
+}
+
+private long parseLong(String s) {
+    return s.isEmpty() ? 0 : Long.parseLong(s);
+}
+
+private double parseDouble(String s) {
+    return s.isEmpty() ? 0.0 : Double.parseDouble(s);
+}
+
+private double parseLatitude(String s) {
+    if (s.isEmpty() || s.length() < 2) return 0.0;
+    double latitude = Double.parseDouble(s.substring(1));
+    if (s.charAt(0) == 'S') latitude = -latitude;
+    return latitude;
+}
+
+private double parseLongitude(String s) {
+    if (s.isEmpty() || s.length() < 2) return 0.0;
+    double longitude = Double.parseDouble(s.substring(1));
+    if (s.charAt(0) == 'W') longitude = -longitude;
+    return longitude;
+}
+
+private double parseSpeed(String s) {
+    return s.isEmpty() ? 0.0 : UnitsConverter.knotsFromKph(Integer.parseInt(s));
+}
+
+private long parseHours(String s) {
+    String[] hours = s.split("-");
+    long totalSeconds = 0;
+    if (hours.length > 0) totalSeconds += Integer.parseInt(hours[0]) * 3600;
+    if (hours.length > 1) totalSeconds += Integer.parseInt(hours[1]) * 60;
+    if (hours.length > 2) totalSeconds += Integer.parseInt(hours[2]);
+    return totalSeconds * 1000;
+}
\ No newline at end of file
