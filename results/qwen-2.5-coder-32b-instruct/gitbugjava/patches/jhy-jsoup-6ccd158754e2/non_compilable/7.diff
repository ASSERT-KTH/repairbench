diff --git a/tmp/082d9eaf-2b24-4bee-b909-150e4cee49d2_buggy.java b/tmp/4922c6ff-42d5-4a0a-979e-ed3c4488514d_fixed.java
index 23f078d..89b33a1 100644
--- a/tmp/082d9eaf-2b24-4bee-b909-150e4cee49d2_buggy.java
+++ b/tmp/4922c6ff-42d5-4a0a-979e-ed3c4488514d_fixed.java
@@ -1,14 +1,26 @@
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
+            i++;
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // Handle supplementary characters correctly
+            if (Character.charCount(c) == 2) { // Surrogate pair
+                String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+                sb.append(encoded);
+                i += 2; // Skip both code units of the surrogate pair
+            } else {
+                sb.append("%").append(Integer.toHexString(c).toUpperCase());
+                i++;
+            }
         } else {
             sb.append((char) c);
+            i++;
         }
     }
 }
\ No newline at end of file
