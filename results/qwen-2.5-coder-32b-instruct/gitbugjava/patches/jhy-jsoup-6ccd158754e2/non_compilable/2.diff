diff --git a/tmp/3b83fbd5-5498-4a51-8298-87f10355c951_buggy.java b/tmp/250604ac-3dfe-4b3b-b661-5ec474c6050e_fixed.java
index 23f078d..fe13d47 100644
--- a/tmp/3b83fbd5-5498-4a51-8298-87f10355c951_buggy.java
+++ b/tmp/250604ac-3dfe-4b3b-b661-5ec474c6050e_fixed.java
@@ -1,14 +1,17 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (Character.isSupplementaryCodePoint(c) || c > 127) { // out of ascii range
+            // Handle supplementary characters and non-ASCII characters
+            byte[] bytes = Character.toString(Character.toChars(c)).getBytes(UTF_8);
+            for (byte b : bytes) {
+                sb.append(String.format("%%%02X", b));
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
