diff --git a/tmp/0195f382-f690-4778-a7be-8c200ca3aac8_buggy.java b/tmp/ad72ee33-05e8-433f-8570-e29177ec8e7b_fixed.java
index 23f078d..859158f 100644
--- a/tmp/0195f382-f690-4778-a7be-8c200ca3aac8_buggy.java
+++ b/tmp/ad72ee33-05e8-433f-8570-e29177ec8e7b_fixed.java
@@ -1,14 +1,23 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
+            if (Character.charCount(c) == 2) { // supplementary character
+                // Handle supplementary characters correctly
+                String supplementaryChar = new String(Character.toChars(c));
+                // Manually encode the supplementary character
+                byte[] bytes = supplementaryChar.getBytes(UTF_8);
+                for (byte b : bytes) {
+                    sb.append(String.format("%%%02X", b));
+                }
+            } else {
                 sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
