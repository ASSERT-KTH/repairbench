diff --git a/tmp/b63c5037-2879-4d0d-9228-6c661c2152b6_buggy.java b/tmp/d89f615d-d816-4afa-8af3-f85de6e56588_fixed.java
index 23f078d..0f663ff 100644
--- a/tmp/b63c5037-2879-4d0d-9228-6c661c2152b6_buggy.java
+++ b/tmp/d89f615d-d816-4afa-8af3-f85de6e56588_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
+            i++;
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Remove the trailing '%' if any (e.g., %3F should not appear as %3F%)
+            if (encoded.endsWith("%")) {
+                encoded = encoded.substring(0, encoded.length() - 1);
+            }
+            sb.append(encoded);
+            // Move the index by the number of characters in the code point
+            i += Character.charCount(c);
         } else {
             sb.append((char) c);
+            i++;
         }
     }
 }
\ No newline at end of file
