diff --git a/tmp/49d04454-2bde-45fd-afdf-720f02157b1e_buggy.java b/tmp/84c2f322-a0c6-4216-96fe-bcd157fba098_fixed.java
index 0a8838d..a5eb047 100644
--- a/tmp/49d04454-2bde-45fd-afdf-720f02157b1e_buggy.java
+++ b/tmp/84c2f322-a0c6-4216-96fe-bcd157fba098_fixed.java
@@ -1,61 +1,78 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
+        // Ensure attributes are correctly extracted and set
+        if (codec == CODEC_13) {
+            // Example of setting a specific attribute based on the buffer
+            // Adjust this part according to the actual format and requirements
+            buf.resetReaderIndex(); // Reset reader index to re-read the necessary part of the buffer
+            buf.skipBytes(2); // Skip type and length fields
+            int attributeLength = buf.readInt() - 4;
+            String attributeString = buf.readCharSequence(attributeLength, StandardCharsets.US_ASCII).toString().trim();
+            String[] keyValuePairs = attributeString.split("\\|");
+            for (String pair : keyValuePairs) {
+                String[] keyValue = pair.split("=");
+                if (keyValue.length == 2) {
+                    position.set(keyValue[0], keyValue[1]);
+                }
+            }
+        }
+
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
