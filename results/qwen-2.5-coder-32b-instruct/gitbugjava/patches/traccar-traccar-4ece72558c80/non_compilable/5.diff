diff --git a/tmp/d1ba65ab-f2ed-4fa6-bad6-e55f741a4ba2_buggy.java b/tmp/71417b0e-ba0d-4a05-8e5c-e4d713d0b2c9_fixed.java
index 0a8838d..d31c306 100644
--- a/tmp/d1ba65ab-f2ed-4fa6-bad6-e55f741a4ba2_buggy.java
+++ b/tmp/71417b0e-ba0d-4a05-8e5c-e4d713d0b2c9_fixed.java
@@ -1,61 +1,82 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
+        // Fallback to extract driver unique ID if not set via codec logic
+        if (!position.hasAttribute(Position.KEY_DRIVER_UNIQUE_ID)) {
+            extractDriverUniqueId(position, buf);
+        }
+
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
+
+// Helper method to extract driver unique ID
+private void extractDriverUniqueId(Position position, ByteBuf buf) {
+    // Example logic to extract driver unique ID from the buffer
+    // This is a placeholder and should be replaced with actual logic based on the protocol
+    if (buf.isReadable()) {
+        int attributeId = buf.readUnsignedByte();
+        if (attributeId == 0x01) { // Assuming 0x01 is the attribute ID for driver unique ID
+            int length = buf.readUnsignedByte();
+            if (length > 0) {
+                String driverUniqueId = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                position.set(Position.KEY_DRIVER_UNIQUE_ID, driverUniqueId);
+            }
+        }
+    }
+}
\ No newline at end of file
