diff --git a/tmp/58165a59-f36e-4624-b53d-582eab951aa5_buggy.java b/tmp/72bd5065-33ef-41a5-880c-054ce81fea3c_fixed.java
index 7b8ee38..5ecd33e 100644
--- a/tmp/58165a59-f36e-4624-b53d-582eab951aa5_buggy.java
+++ b/tmp/72bd5065-33ef-41a5-880c-054ce81fea3c_fixed.java
@@ -1,179 +1,211 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
+    if (buf.readableBytes() < 1) {
+        return null; // Ensure there's at least one byte to read
+    }
+
     buf.skipBytes(1); // '[' header
+    if (buf.readableBytes() < 2) {
+        return null; // Ensure there are at least two bytes for the manufacturer
+    }
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex == -1) {
+        return null; // '*' not found for id
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
-        if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
-                && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
+    if (contentIndex != -1 && contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*' &&
+            buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
         int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
     }
 
     buf.skipBytes(4); // length
+    if (buf.readableBytes() < 1) {
+        return null; // Ensure there's at least one byte left for the delimiter
+    }
     buf.skipBytes(1); // '*' delimiter
 
+    if (buf.readableBytes() < 1) {
+        return null; // Ensure there's at least one byte left for the ending ']'
+    }
     buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
     contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
 
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                 position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
                 position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                if (valueIndex < values.length && Integer.parseInt(values[valueIndex++]) > 0) {
+                    if (valueIndex < values.length) {
                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                     }
+                }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                    if (valueIndex < values.length) {
                         position.set("pressureHigh", values[valueIndex++]);
+                    }
+                    if (valueIndex < values.length) {
                         position.set("pressureLow", values[valueIndex++]);
                     }
-                    if (valueIndex <= values.length - 1) {
+                }
+                if (valueIndex < values.length) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
 
             return position;
 
         }
 
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex == -1 || buf.readableBytes() < 12 + 2) {
+            return null; // ',' not found or not enough bytes for time
+        }
         buf.readerIndex(timeIndex + 12 + 2);
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
         return position;
 
     } else if (type.equals("JXTK")) {
 
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+        if (dataIndex == 0) {
+            return null; // Not enough ',' delimiters
+        }
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
+        if (values.length < 4) {
+            return null; // Not enough values
+        }
+
         int current = Integer.parseInt(values[2]);
         int total = Integer.parseInt(values[3]);
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
 
-            if (buf.readableBytes() == 1) {
-                return null;
+        if (buf.readableBytes() < 1) {
+            return null; // Not enough bytes
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
