diff --git a/tmp/0f6777ff-c4ce-4992-8046-2a0174101340_buggy.java b/tmp/a450e18a-ad92-4e89-967d-78ca48b01c31_fixed.java
index 7b8ee38..fc745a2 100644
--- a/tmp/0f6777ff-c4ce-4992-8046-2a0174101340_buggy.java
+++ b/tmp/a450e18a-ad92-4e89-967d-78ca48b01c31_fixed.java
@@ -1,179 +1,212 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
+    if (buf.readableBytes() < 4) {
+        return null; // Ensure there are enough bytes to read the header
+    }
+
     buf.skipBytes(1); // '[' header
     manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex == -1) {
+        return null; // Ensure '*' delimiter is found
+    }
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
     if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
             && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
         int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
     }
 
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
+    if (buf.readableBytes() < 1) {
+        return null; // Ensure there are enough bytes to read the trailing ']'
+    }
     buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
     contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
     if (contentIndex < 0) {
         contentIndex = buf.writerIndex();
     }
 
     String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
     if (contentIndex < buf.writerIndex()) {
         buf.readerIndex(contentIndex + 1);
     }
 
     if (type.equals("INIT")) {
 
         sendResponse(channel, id, index, "INIT,1");
 
     } else if (type.equals("LK")) {
 
         sendResponse(channel, id, index, "LK");
 
         if (buf.isReadable()) {
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             if (values.length >= 3) {
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
 
                 getLastLocation(position, null);
 
+                try {
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
+                } catch (NumberFormatException e) {
+                    return null; // Handle invalid numbers gracefully
+                }
 
                 return position;
             }
         }
 
     } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
 
         Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
         if (type.startsWith("AL")) {
             if (position != null) {
                 position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
             }
             sendResponse(channel, id, index, "AL");
         }
 
         return position;
 
     } else if (type.equals("TKQ") || type.equals("TKQ2")) {
 
         sendResponse(channel, id, index, type);
 
     } else if (type.equalsIgnoreCase("PULSE")
             || type.equalsIgnoreCase("HEART")
             || type.equalsIgnoreCase("BLOOD")
             || type.equalsIgnoreCase("BPHRT")
             || type.equalsIgnoreCase("btemp2")) {
 
         if (buf.isReadable()) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
             getLastLocation(position, new Date());
 
             String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
             int valueIndex = 0;
 
             if (type.equalsIgnoreCase("btemp2")) {
-                    if (Integer.parseInt(values[valueIndex++]) > 0) {
+                if (ValueUtil.checkIndex(values, valueIndex) && Integer.parseInt(values[valueIndex++]) > 0) {
+                    if (ValueUtil.checkIndex(values, valueIndex)) {
                         position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                     }
+                }
             } else {
                 if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
+                    if (ValueUtil.checkIndex(values, valueIndex)) {
                         position.set("pressureHigh", values[valueIndex++]);
+                    }
+                    if (ValueUtil.checkIndex(values, valueIndex)) {
                         position.set("pressureLow", values[valueIndex++]);
                     }
-                    if (valueIndex <= values.length - 1) {
+                }
+                if (ValueUtil.checkIndex(values, valueIndex)) {
                     position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                 }
             }
 
             return position;
 
         }
 
     } else if (type.equals("img")) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+        if (timeIndex >= 0) {
             buf.readerIndex(timeIndex + 12 + 2);
+        } else {
+            return null; // Ensure ',' is found
+        }
         position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
         return position;
 
     } else if (type.equals("JXTK")) {
 
         int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
+        if (dataIndex < 0) {
+            return null; // Ensure ',' is found
+        }
         String[] values = buf.readCharSequence(
                 dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
 
-            int current = Integer.parseInt(values[2]);
-            int total = Integer.parseInt(values[3]);
+        int current;
+        int total;
+        try {
+            current = Integer.parseInt(values[2]);
+            total = Integer.parseInt(values[3]);
+        } catch (NumberFormatException e) {
+            return null; // Handle invalid numbers gracefully
+        }
 
         if (audio == null) {
             audio = Unpooled.buffer();
         }
         audio.writeBytes(buf);
 
         sendResponse(channel, id, index, "JXTKR,1");
 
         if (current < total) {
             return null;
         } else {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, null);
             position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
             audio.release();
             audio = null;
             return position;
         }
 
     } else if (type.equals("TK")) {
 
         if (buf.readableBytes() == 1) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
