diff --git a/tmp/95160531-b7e2-44e5-ba3d-a04a0ce9498f_buggy.java b/tmp/be906a27-367a-495d-85b4-4aea077079ff_fixed.java
index e883360..e00d0f8 100644
--- a/tmp/95160531-b7e2-44e5-ba3d-a04a0ce9498f_buggy.java
+++ b/tmp/be906a27-367a-495d-85b4-4aea077079ff_fixed.java
@@ -1,196 +1,226 @@
 private Object decodeCan(Channel channel, SocketAddress remoteAddress, String sentence) throws ParseException {
     Position position = new Position(getProtocolName());
 
     int index = 0;
     String[] values = sentence.split(",");
 
     index += 1; // header
     index += 1; // protocol version
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     position.setDeviceId(deviceSession.getDeviceId());
 
     index += 1; // device name
     index += 1; // report type
     index += 1; // canbus state
     long reportMask = Long.parseLong(values[index++], 16);
     long reportMaskExt = 0;
 
     if (BitUtil.check(reportMask, 0)) {
         position.set(Position.KEY_VIN, values[index++]);
     }
     if (BitUtil.check(reportMask, 1)) {
-            position.set(Position.KEY_IGNITION, Integer.parseInt(values[index++]) > 0);
+        String ignitionValue = values[index++];
+        position.set(Position.KEY_IGNITION, !ignitionValue.isEmpty() && Integer.parseInt(ignitionValue) > 0);
     }
     if (BitUtil.check(reportMask, 2)) {
         position.set(Position.KEY_OBD_ODOMETER, values[index++]);
     }
-        if (BitUtil.check(reportMask, 3) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_USED, Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 3)) {
+        String fuelUsedValue = values[index++];
+        position.set(Position.KEY_FUEL_USED, !fuelUsedValue.isEmpty() ? Double.parseDouble(fuelUsedValue) : null);
     }
-        if (BitUtil.check(reportMask, 5) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_RPM, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 5)) {
+        String rpmValue = values[index++];
+        position.set(Position.KEY_RPM, !rpmValue.isEmpty() ? Integer.parseInt(rpmValue) : null);
     }
-        if (BitUtil.check(reportMask, 4) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+    if (BitUtil.check(reportMask, 4)) {
+        String speedValue = values[index++];
+        position.set(Position.KEY_OBD_SPEED, !speedValue.isEmpty() ? UnitsConverter.knotsFromKph(Integer.parseInt(speedValue)) : null);
     }
-        if (BitUtil.check(reportMask, 6) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 6)) {
+        String coolantTempValue = values[index++];
+        position.set(Position.KEY_COOLANT_TEMP, !coolantTempValue.isEmpty() ? Integer.parseInt(coolantTempValue) : null);
     }
-        if (BitUtil.check(reportMask, 7) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_CONSUMPTION, Double.parseDouble(values[index - 1].substring(1)));
+    if (BitUtil.check(reportMask, 7)) {
+        String fuelConsumptionValue = values[index++];
+        position.set(Position.KEY_FUEL_CONSUMPTION, !fuelConsumptionValue.isEmpty() ? Double.parseDouble(fuelConsumptionValue.substring(1)) : null);
     }
-        if (BitUtil.check(reportMask, 8) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_FUEL_LEVEL, Double.parseDouble(values[index - 1].substring(1)));
+    if (BitUtil.check(reportMask, 8)) {
+        String fuelLevelValue = values[index++];
+        position.set(Position.KEY_FUEL_LEVEL, !fuelLevelValue.isEmpty() ? Double.parseDouble(fuelLevelValue.substring(1)) : null);
     }
-        if (BitUtil.check(reportMask, 9) && !values[index++].isEmpty()) {
-            position.set("range", Long.parseLong(values[index - 1]) * 100);
+    if (BitUtil.check(reportMask, 9)) {
+        String rangeValue = values[index++];
+        position.set("range", !rangeValue.isEmpty() ? Long.parseLong(rangeValue) * 100 : null);
     }
-        if (BitUtil.check(reportMask, 10) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_THROTTLE, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 10)) {
+        String throttleValue = values[index++];
+        position.set(Position.KEY_THROTTLE, !throttleValue.isEmpty() ? Integer.parseInt(throttleValue) : null);
     }
-        if (BitUtil.check(reportMask, 11) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(Double.parseDouble(values[index - 1])));
+    if (BitUtil.check(reportMask, 11)) {
+        String hoursValue = values[index++];
+        position.set(Position.KEY_HOURS, !hoursValue.isEmpty() ? UnitsConverter.msFromHours(Double.parseDouble(hoursValue)) : null);
     }
     if (BitUtil.check(reportMask, 12)) {
-            position.set(Position.KEY_DRIVING_TIME, Double.parseDouble(values[index++]));
+        String drivingTimeValue = values[index++];
+        position.set(Position.KEY_DRIVING_TIME, !drivingTimeValue.isEmpty() ? Double.parseDouble(drivingTimeValue) : null);
     }
     if (BitUtil.check(reportMask, 13)) {
-            position.set("idleHours", Double.parseDouble(values[index++]));
+        String idleHoursValue = values[index++];
+        position.set("idleHours", !idleHoursValue.isEmpty() ? Double.parseDouble(idleHoursValue) : null);
     }
-        if (BitUtil.check(reportMask, 14) && !values[index++].isEmpty()) {
-            position.set("idleFuelConsumption", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 14)) {
+        String idleFuelConsumptionValue = values[index++];
+        position.set("idleFuelConsumption", !idleFuelConsumptionValue.isEmpty() ? Double.parseDouble(idleFuelConsumptionValue) : null);
     }
-        if (BitUtil.check(reportMask, 15) && !values[index++].isEmpty()) {
-            position.set(Position.KEY_AXLE_WEIGHT, Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMask, 15)) {
+        String axleWeightValue = values[index++];
+        position.set(Position.KEY_AXLE_WEIGHT, !axleWeightValue.isEmpty() ? Integer.parseInt(axleWeightValue) : null);
     }
-        if (BitUtil.check(reportMask, 16) && !values[index++].isEmpty()) {
-            position.set("tachographInfo", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 16)) {
+        String tachographInfoValue = values[index++];
+        position.set("tachographInfo", !tachographInfoValue.isEmpty() ? Integer.parseInt(tachographInfoValue, 16) : null);
     }
-        if (BitUtil.check(reportMask, 17) && !values[index++].isEmpty()) {
-            position.set("indicators", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 17)) {
+        String indicatorsValue = values[index++];
+        position.set("indicators", !indicatorsValue.isEmpty() ? Integer.parseInt(indicatorsValue, 16) : null);
     }
-        if (BitUtil.check(reportMask, 18) && !values[index++].isEmpty()) {
-            position.set("lights", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 18)) {
+        String lightsValue = values[index++];
+        position.set("lights", !lightsValue.isEmpty() ? Integer.parseInt(lightsValue, 16) : null);
     }
-        if (BitUtil.check(reportMask, 19) && !values[index++].isEmpty()) {
-            position.set("doors", Integer.parseInt(values[index - 1], 16));
+    if (BitUtil.check(reportMask, 19)) {
+        String doorsValue = values[index++];
+        position.set("doors", !doorsValue.isEmpty() ? Integer.parseInt(doorsValue, 16) : null);
     }
-        if (BitUtil.check(reportMask, 20) && !values[index++].isEmpty()) {
-            position.set("vehicleOverspeed", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 20)) {
+        String vehicleOverspeedValue = values[index++];
+        position.set("vehicleOverspeed", !vehicleOverspeedValue.isEmpty() ? Double.parseDouble(vehicleOverspeedValue) : null);
     }
-        if (BitUtil.check(reportMask, 21) && !values[index++].isEmpty()) {
-            position.set("engineOverspeed", Double.parseDouble(values[index - 1]));
+    if (BitUtil.check(reportMask, 21)) {
+        String engineOverspeedValue = values[index++];
+        position.set("engineOverspeed", !engineOverspeedValue.isEmpty() ? Double.parseDouble(engineOverspeedValue) : null);
     }
     if (BitUtil.check(reportMask, 29)) {
         reportMaskExt = Long.parseLong(values[index++], 16);
     }
-        if (BitUtil.check(reportMaskExt, 0) && !values[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 0)) {
+        String adBlueLevelValue = values[index++];
+        position.set("adBlueLevel", !adBlueLevelValue.isEmpty() ? Integer.parseInt(adBlueLevelValue) : null);
     }
-        if (BitUtil.check(reportMaskExt, 1) && !values[index++].isEmpty()) {
-            position.set("axleWeight1", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 1)) {
+        String axleWeight1Value = values[index++];
+        position.set("axleWeight1", !axleWeight1Value.isEmpty() ? Integer.parseInt(axleWeight1Value) : null);
     }
-        if (BitUtil.check(reportMaskExt, 2) && !values[index++].isEmpty()) {
-            position.set("axleWeight3", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 2)) {
+        String axleWeight3Value = values[index++];
+        position.set("axleWeight3", !axleWeight3Value.isEmpty() ? Integer.parseInt(axleWeight3Value) : null);
     }
-        if (BitUtil.check(reportMaskExt, 3) && !values[index++].isEmpty()) {
-            position.set("axleWeight4", Integer.parseInt(values[index - 1]));
+    if (BitUtil.check(reportMaskExt, 3)) {
+        String axleWeight4Value = values[index++];
+        position.set("axleWeight4", !axleWeight4Value.isEmpty() ? Integer.parseInt(axleWeight4Value) : null);
     }
     if (BitUtil.check(reportMaskExt, 4)) {
         index += 1; // tachograph overspeed
     }
     if (BitUtil.check(reportMaskExt, 5)) {
         index += 1; // tachograph motion
     }
     if (BitUtil.check(reportMaskExt, 6)) {
         index += 1; // tachograph direction
     }
-        if (BitUtil.check(reportMaskExt, 7) && !values[index++].isEmpty()) {
-            position.set(Position.PREFIX_ADC + 1, Integer.parseInt(values[index - 1]) * 0.001);
+    if (BitUtil.check(reportMaskExt, 7)) {
+        String adc1Value = values[index++];
+        position.set(Position.PREFIX_ADC + 1, !adc1Value.isEmpty() ? Integer.parseInt(adc1Value) * 0.001 : null);
     }
     if (BitUtil.check(reportMaskExt, 8)) {
         index += 1; // pedal breaking factor
     }
     if (BitUtil.check(reportMaskExt, 9)) {
         index += 1; // engine breaking factor
     }
     if (BitUtil.check(reportMaskExt, 10)) {
         index += 1; // total accelerator kick-downs
     }
     if (BitUtil.check(reportMaskExt, 11)) {
         index += 1; // total effective engine speed
     }
     if (BitUtil.check(reportMaskExt, 12)) {
         index += 1; // total cruise control time
     }
     if (BitUtil.check(reportMaskExt, 13)) {
         index += 1; // total accelerator kick-down time
     }
     if (BitUtil.check(reportMaskExt, 14)) {
         index += 1; // total brake application
     }
-        if (BitUtil.check(reportMaskExt, 15) && !values[index++].isEmpty()) {
-            position.set("driver1Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 15)) {
+        String driver1CardValue = values[index++];
+        position.set("driver1Card", !driver1CardValue.isEmpty() ? driver1CardValue : null);
     }
-        if (BitUtil.check(reportMaskExt, 16) && !values[index++].isEmpty()) {
-            position.set("driver2Card", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 16)) {
+        String driver2CardValue = values[index++];
+        position.set("driver2Card", !driver2CardValue.isEmpty() ? driver2CardValue : null);
     }
-        if (BitUtil.check(reportMaskExt, 17) && !values[index++].isEmpty()) {
-            position.set("driver1Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 17)) {
+        String driver1NameValue = values[index++];
+        position.set("driver1Name", !driver1NameValue.isEmpty() ? driver1NameValue : null);
     }
-        if (BitUtil.check(reportMaskExt, 18) && !values[index++].isEmpty()) {
-            position.set("driver2Name", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 18)) {
+        String driver2NameValue = values[index++];
+        position.set("driver2Name", !driver2NameValue.isEmpty() ? driver2NameValue : null);
     }
-        if (BitUtil.check(reportMaskExt, 19) && !values[index++].isEmpty()) {
-            position.set("registration", values[index - 1]);
+    if (BitUtil.check(reportMaskExt, 19)) {
+        String registrationValue = values[index++];
+        position.set("registration", !registrationValue.isEmpty() ? registrationValue : null);
     }
     if (BitUtil.check(reportMaskExt, 20)) {
         index += 1; // expansion information
     }
     if (BitUtil.check(reportMaskExt, 21)) {
         index += 1; // rapid brakings
     }
     if (BitUtil.check(reportMaskExt, 22)) {
         index += 1; // rapid accelerations
     }
     if (BitUtil.check(reportMaskExt, 23)) {
         index += 1; // engine torque
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
     if (BitUtil.check(reportMask, 30)) {
         while (values[index].isEmpty()) {
             index += 1;
         }
-            position.setValid(Integer.parseInt(values[index++]) > 0);
+        position.setValid(!values[index].isEmpty() && Integer.parseInt(values[index++]) > 0);
         if (!values[index].isEmpty()) {
             position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
-                position.setCourse(Integer.parseInt(values[index++]));
-                position.setAltitude(Double.parseDouble(values[index++]));
-                position.setLongitude(Double.parseDouble(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index++]));
+            position.setCourse(!values[index].isEmpty() ? Integer.parseInt(values[index++]) : null);
+            position.setAltitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);
+            position.setLongitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);
+            position.setLatitude(!values[index].isEmpty() ? Double.parseDouble(values[index++]) : null);
             position.setTime(dateFormat.parse(values[index++]));
         } else {
             index += 6; // no location
             getLastLocation(position, null);
         }
     } else {
         getLastLocation(position, null);
     }
 
     if (BitUtil.check(reportMask, 31)) {
         index += 4; // cell
         index += 1; // reserved
     }
 
     if (ignoreFixTime) {
         position.setTime(dateFormat.parse(values[index]));
     } else {
         position.setDeviceTime(dateFormat.parse(values[index]));
     }
 
     return position;
 }
\ No newline at end of file
