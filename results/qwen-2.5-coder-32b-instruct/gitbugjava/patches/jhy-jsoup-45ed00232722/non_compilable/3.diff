diff --git a/tmp/4ddabd57-b4fb-4cfc-ae43-ef7dfba8b657_buggy.java b/tmp/43853202-910a-480a-a45f-6f1841f96c8f_fixed.java
index 855afa5..d6573c7 100644
--- a/tmp/4ddabd57-b4fb-4cfc-ae43-ef7dfba8b657_buggy.java
+++ b/tmp/43853202-910a-480a-a45f-6f1841f96c8f_fixed.java
@@ -1,13 +1,36 @@
+import java.io.UnsupportedEncodingException;
+import java.net.*;
+
 static URL encodeUrl(URL u) {
-	    u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+        String protocol = u.getProtocol();
+        String host = u.getHost();
+        int port = u.getPort();
+        String path = u.getPath();
+        String query = u.getQuery();
+        String ref = u.getRef();
+
+        // Encode the path and query separately
+        path = URLEncoder.encode(path, "UTF-8").replace("+", "%20");
+        query = query != null ? URLEncoder.encode(query, "UTF-8").replace("+", "%20") : null;
+
+        // Reconstruct the URL
+        StringBuilder encodedUrl = new StringBuilder();
+        encodedUrl.append(protocol).append("://").append(host);
+        if (port != -1) {
+            encodedUrl.append(":").append(port);
+        }
+        encodedUrl.append(path);
+        if (query != null) {
+            encodedUrl.append("?").append(query);
+        }
+        if (ref != null) {
+            encodedUrl.append("#").append(URLEncoder.encode(ref, "UTF-8").replace("+", "%20"));
+        }
+
+        return new URL(encodedUrl.toString());
+    } catch (UnsupportedEncodingException | MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
