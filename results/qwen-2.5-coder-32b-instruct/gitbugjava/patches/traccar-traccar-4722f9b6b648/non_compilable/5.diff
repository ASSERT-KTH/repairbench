diff --git a/tmp/be87c5ba-267b-4dec-bd40-72a450a491bb_buggy.java b/tmp/3ac9ce5a-e71d-46f3-b2a9-38f58ecdefc3_fixed.java
index c84c989..0cfedea 100644
--- a/tmp/be87c5ba-267b-4dec-bd40-72a450a491bb_buggy.java
+++ b/tmp/3ac9ce5a-e71d-46f3-b2a9-38f58ecdefc3_fixed.java
@@ -1,27 +1,44 @@
+import java.nio.charset.StandardCharsets;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import java.net.SocketAddress;
+
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+
+    // Read GPS week and time of week (TOW)
+    long gpsWeek = buf.readUnsignedIntLE();
+    int gpsTow = buf.readUnsignedIntLE();
+
+    // Convert GPS time to UTC time
+    Instant gpsEpoch = Instant.parse("1980-01-06T00:00:00Z");
+    long secondsSinceGpsEpoch = (gpsWeek * 604800L) + gpsTow;
+    Instant dateTime = gpsEpoch.plus(secondsSinceGpsEpoch, ChronoUnit.SECONDS);
+
+    position.setTime(dateTime);
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
\ No newline at end of file
