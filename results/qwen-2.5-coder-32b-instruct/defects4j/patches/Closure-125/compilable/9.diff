diff --git a/tmp/079d65e3-3465-4d07-8a9a-a86c53a60477_buggy.java b/tmp/fea9b6b5-64c7-43d6-ae0b-5b9e4a4eac0d_fixed.java
index 7e43c1c..d725cb8 100644
--- a/tmp/079d65e3-3465-4d07-8a9a-a86c53a60477_buggy.java
+++ b/tmp/fea9b6b5-64c7-43d6-ae0b-5b9e4a4eac0d_fixed.java
@@ -1,19 +1,24 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
+  if (type.isConstructor() || type.isEmptyType() || type.isUnknownType() || type.isInterface()) {
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
+    } else if (type.isInterface()) {
+      // If the type is an interface, it cannot be directly instantiated, but we should still report an error.
+      report(t, n, NOT_A_CONSTRUCTOR);
+      ensureTyped(t, n);
     } else {
+      // If the type is not a function type but is a valid type (e.g., an object type), we should ensure it is typed.
       ensureTyped(t, n);
     }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
