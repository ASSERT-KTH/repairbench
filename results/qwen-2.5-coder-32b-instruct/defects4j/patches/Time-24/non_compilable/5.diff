diff --git a/tmp/71c00651-151f-4339-b70b-fb0dc2b25f90_buggy.java b/tmp/21bd79ea-4b21-450e-b40c-130ce66c96b2_fixed.java
index 99d6a44..1313953 100644
--- a/tmp/71c00651-151f-4339-b70b-fb0dc2b25f90_buggy.java
+++ b/tmp/21bd79ea-4b21-450e-b40c-130ce66c96b2_fixed.java
@@ -1,58 +1,91 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
-            }
-        }
 
     long millis = iMillis;
+    boolean yearParsed = false;
+    boolean weekyearParsed = false;
+    boolean monthParsed = false;
+    boolean weekParsed = false;
+    int year = iDefaultYear;
+    int weekyear = iDefaultYear;
+    int month = 1;
+    int week = 1;
+
     try {
         for (int i = 0; i < count; i++) {
-                millis = savedFields[i].set(millis, resetFields);
+            SavedField field = savedFields[i];
+            DateTimeFieldType fieldType = field.iField.getType();
+            if (fieldType == DateTimeFieldType.year()) {
+                year = field.getSetValue();
+                yearParsed = true;
+            } else if (fieldType == DateTimeFieldType.weekyear()) {
+                weekyear = field.getSetValue();
+                weekyearParsed = true;
+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {
+                month = field.getSetValue();
+                monthParsed = true;
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                week = field.getSetValue();
+                weekParsed = true;
+            } else {
+                millis = field.set(millis, resetFields);
             }
+        }
+
+        if (weekyearParsed) {
+            // If weekyear is parsed, use it as the base year
+            year = weekyear;
+        }
+
+        if (yearParsed || weekyearParsed) {
+            // Set the year
+            millis = iChrono.year().set(millis, year, DateTimeUtils.getChronology(millis, iChrono));
+        }
+
+        if (monthParsed) {
+            // Set the month
+            millis = iChrono.monthOfYear().set(millis, month, DateTimeUtils.getChronology(millis, iChrono));
+        }
+
+        if (weekParsed) {
+            // Set the week
+            if (!monthParsed) {
+                // If month is not parsed, set to the first month of the year
+                millis = iChrono.monthOfYear().set(millis, 1, DateTimeUtils.getChronology(millis, iChrono));
+            }
+            // Calculate the correct day of the year based on week of year
+            LocalDate date = new LocalDate(millis, iChrono);
+            date = date.withWeekOfWeekyear(week).withDayOfWeek(1); // Set to the first day of the week
+            millis = date.toDateTimeAtStartOfDay().getMillis();
+        }
+
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
