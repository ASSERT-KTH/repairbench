diff --git a/tmp/1722eee2-4cbb-428c-883e-161313d9878f_buggy.java b/tmp/e1a30e49-4df9-487d-ba0f-e69db31fbd18_fixed.java
index 99d6a44..8b4efc0 100644
--- a/tmp/1722eee2-4cbb-428c-883e-161313d9878f_buggy.java
+++ b/tmp/e1a30e49-4df9-487d-ba0f-e69db31fbd18_fixed.java
@@ -1,58 +1,79 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
+        // Handle the special case of setting the week of the year after the year and month
+        boolean hasYear = false;
+        boolean hasMonth = false;
+        boolean hasWeekOfWeekyear = false;
+        int yearIndex = -1;
+        int monthIndex = -1;
+        int weekOfWeekyearIndex = -1;
+
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType == DateTimeFieldType.year() || fieldType == DateTimeFieldType.weekyear()) {
+                hasYear = true;
+                yearIndex = i;
+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {
+                hasMonth = true;
+                monthIndex = i;
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeekOfWeekyear = true;
+                weekOfWeekyearIndex = i;
+            }
+        }
+
+        if (hasYear && hasMonth && hasWeekOfWeekyear) {
+            // Set the year and month first
+            millis = savedFields[yearIndex].set(millis, resetFields);
+            millis = savedFields[monthIndex].set(millis, resetFields);
+            // Then set the week of the year
+            millis = savedFields[weekOfWeekyearIndex].set(millis, resetFields);
+        } else {
+            // Otherwise, set fields in order
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
+        }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
