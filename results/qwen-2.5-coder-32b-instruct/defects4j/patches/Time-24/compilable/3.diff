diff --git a/tmp/889128dc-0c79-4921-be71-4b8cf19d8140_buggy.java b/tmp/dbff2bff-2be2-4cd2-acd7-1d468f7e6ebb_fixed.java
index 99d6a44..5f44bdd 100644
--- a/tmp/889128dc-0c79-4921-be71-4b8cf19d8140_buggy.java
+++ b/tmp/dbff2bff-2be2-4cd2-acd7-1d468f7e6ebb_fixed.java
@@ -1,58 +1,92 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
+            // Handle weekyear and week of weekyear together
+            boolean hasWeekyear = false;
+            boolean hasWeekOfWeekyear = false;
+            boolean hasMonth = false;
+
+            for (int i = 0; i < count; i++) {
+                DateTimeFieldType fieldType = savedFields[i].iField.getType();
+                if (fieldType == DateTimeFieldType.weekyear()) {
+                    hasWeekyear = true;
+                } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                    hasWeekOfWeekyear = true;
+                } else if (fieldType == DateTimeFieldType.monthOfYear()) {
+                    hasMonth = true;
+                }
+            }
+
+            if (hasWeekyear && hasWeekOfWeekyear) {
+                // Set the weekyear and week of weekyear first
+                for (int i = 0; i < count; i++) {
+                    DateTimeFieldType fieldType = savedFields[i].iField.getType();
+                    if (fieldType == DateTimeFieldType.weekyear() || fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                        millis = savedFields[i].set(millis, resetFields);
+                    }
+                }
+                // Now handle the month if it exists
+                for (int i = 0; i < count; i++) {
+                    DateTimeFieldType fieldType = savedFields[i].iField.getType();
+                    if (fieldType == DateTimeFieldType.monthOfYear()) {
+                        millis = savedFields[i].set(millis, resetFields);
+                    }
+                }
+            } else {
+                // Otherwise, set the fields in the original order
                 for (int i = 0; i < count; i++) {
                     millis = savedFields[i].set(millis, resetFields);
                 }
+            }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
