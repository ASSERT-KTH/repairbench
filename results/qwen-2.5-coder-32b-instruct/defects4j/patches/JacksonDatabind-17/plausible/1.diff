diff --git a/tmp/63f87a06-a25a-47a0-b667-62c1b87995fd_buggy.java b/tmp/189955ea-4bf6-48cc-8dff-2d92cdde3c5f_fixed.java
index 01967cc..1af013c 100644
--- a/tmp/63f87a06-a25a-47a0-b667-62c1b87995fd_buggy.java
+++ b/tmp/189955ea-4bf6-48cc-8dff-2d92cdde3c5f_fixed.java
@@ -1,35 +1,45 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+        // Ensure we do not apply default typing to JsonNode or its subtypes
+        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+            return false;
+        }
         return (t.getRawClass() == Object.class)
                 || (!t.isConcrete()
                         // [databind#88] Should not apply to JSON tree models:
                         || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
+        // Ensure we do not apply default typing to JsonNode or its subtypes
+        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+            return false;
+        }
         // [Issue#88] Should not apply to JSON tree models:
         return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
     default:
     //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
+        // Ensure we do not apply default typing to JsonNode or its subtypes
+        if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+            return false;
+        }
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
