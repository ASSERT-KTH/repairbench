diff --git a/tmp/c1149474-e19d-4ccc-a834-53fe74787657_buggy.java b/tmp/e05007e4-b314-4525-a652-d7e7d70fa1fa_fixed.java
index a3709ee..2eb3e50 100644
--- a/tmp/c1149474-e19d-4ccc-a834-53fe74787657_buggy.java
+++ b/tmp/e05007e4-b314-4525-a652-d7e7d70fa1fa_fixed.java
@@ -1,71 +1,69 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
-        // same as returning a non-local name, but this doesn't matter if the
-        // value is immutable.
+            // A result that is aliased by a non-local name, is effectively the same as returning a non-local name, but this doesn't matter if the value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+                || (locals.apply(value.getFirstChild())
                     && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                    && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+            return evaluatesToLocalValue(value.getSecondChild(), locals)
                    && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+                // Postfix increment/decrement returns the original value, which is non-local if the operand is non-local.
+                return locals.apply(value.getFirstChild());
             } else {
+                // Prefix increment/decrement returns the new value, which is local if the operand is local.
                 return true;
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+            return NodeUtil.isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
             return locals.apply(value);
         case Token.CALL:
             return callHasLocalResult(value)
                 || isToStringMethodCall(value)
                 || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+            // Return true if the result of new is known to be local, which is only possible if the function is known to not alias.
+            return callHasLocalResult(value);
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+            // Literals with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+            // The 'in' operator results in a boolean, which is a local value.
             return true;
         default:
-        // Other op force a local value:
+            // Other ops force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
                 || isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
-            "Unexpected expression node" + value +
+                "Unexpected expression node: " + value +
                 "\n parent: " + value.getParent());
     }
 }
\ No newline at end of file
