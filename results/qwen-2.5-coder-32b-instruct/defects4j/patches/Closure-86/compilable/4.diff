diff --git a/tmp/1dec3a28-98b9-481f-82b4-73cb74a1059e_buggy.java b/tmp/9f003897-fd2d-4df4-94ce-6ceeb21487e0_fixed.java
index a3709ee..66015b7 100644
--- a/tmp/1dec3a28-98b9-481f-82b4-73cb74a1059e_buggy.java
+++ b/tmp/9f003897-fd2d-4df4-94ce-6ceeb21487e0_fixed.java
@@ -1,71 +1,66 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+            // A result that is aliased by a non-local name, is effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+                || (locals.apply(value.getFirstChild())
                     && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                    && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                    && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
-        } else {
-          return true;
-        }
+            // Pre-increment/decrement always results in a local value.
+            // Post-increment/decrement does not.
+            return value.getBooleanProp(Node.INCRDECR_PROP);
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+            return NodeUtil.isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
             return locals.apply(value);
         case Token.CALL:
             return callHasLocalResult(value)
                 || isToStringMethodCall(value)
                 || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
+            // A new object is local unless it's returned and modified elsewhere.
             return true;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
             // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
-        return true;
+            return true; // The IN operator always results in a local boolean value.
         default:
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+                || NodeUtil.isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
                 "Unexpected expression node" + value +
                 "\n parent:" + value.getParent());
     }
 }
\ No newline at end of file
