diff --git a/tmp/e1032c06-c85e-405a-8ffe-0f979691ad62_buggy.java b/tmp/d56d4f70-ce65-42c7-8425-01aff6e5e34c_fixed.java
index fb2b020..afccc64 100644
--- a/tmp/e1032c06-c85e-405a-8ffe-0f979691ad62_buggy.java
+++ b/tmp/d56d4f70-ce65-42c7-8425-01aff6e5e34c_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                    typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE)
                         .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
+            } else {
+                // Ensure the existing property type is compatible with the constraint
+                JSType existingType = getPropertyType(prop);
+                JSType newType = existingType.getLeastSupertype(propType);
+                redefineInferredProperty(prop, newType, null);
             }
         }
     }
 }
\ No newline at end of file
