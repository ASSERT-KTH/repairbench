diff --git a/tmp/e75da367-1f1a-4fb2-892f-bfbcc6047295_buggy.java b/tmp/d4ce3c6f-2cad-48c7-8fa3-81f302363640_fixed.java
index 939f49b..70a7543 100644
--- a/tmp/e75da367-1f1a-4fb2-892f-bfbcc6047295_buggy.java
+++ b/tmp/d4ce3c6f-2cad-48c7-8fa3-81f302363640_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+        Node rhs = assign.getLastChild();
+        if (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) {
+            Node objNode = n.getFirstChild();
+            Node propNode = n.getSecondChild();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+            // Check if the object part of the property is a prototype access
+            if (objNode.getType() == Token.GETPROP) {
+                Node objObjNode = objNode.getFirstChild();
+                Node objPropNode = objNode.getSecondChild();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+                if (objPropNode.getType() == Token.STRING && objPropNode.getString().equals("prototype")) {
+                    // Check if the property being assigned is a string or name
+                    if (propNode.getType() == Token.STRING || propNode.getType() == Token.NAME) {
                         return true;
                     }
                 }
             }
-
+        }
+    }
     return false;
 }
\ No newline at end of file
