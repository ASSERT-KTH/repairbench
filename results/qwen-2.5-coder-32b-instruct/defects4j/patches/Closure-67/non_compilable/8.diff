diff --git a/tmp/9ecf2478-36eb-4150-8a02-9d54fa8216ed_buggy.java b/tmp/3b6a10be-a829-4551-a674-cf30e8b06e09_fixed.java
index 939f49b..8b1d7de 100644
--- a/tmp/9ecf2478-36eb-4150-8a02-9d54fa8216ed_buggy.java
+++ b/tmp/3b6a10be-a829-4551-a674-cf30e8b06e09_fixed.java
@@ -1,21 +1,21 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+        // Traverse the chain of property accesses
+        while (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) {
+            if (n.getType() == Token.GETPROP) {
+                Node child = n.getFirstChild().getNext();
+                if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
                     return true;
                 }
+            } else if (n.getType() == Token.GETELEM) {
+                Node child = n.getFirstChild().getNext();
+                if (child.isString() && child.getString().equals("prototype")) {
+                    return true;
+                }
+            }
+            n = n.getFirstChild();
         }
     }
-
     return false;
 }
\ No newline at end of file
