diff --git a/tmp/ddf2ea21-9d39-43cf-b458-6ff9ae4932d7_buggy.java b/tmp/ba85cbdc-10f5-434e-a3f2-816049b4174d_fixed.java
index 939f49b..bbe914b 100644
--- a/tmp/ddf2ea21-9d39-43cf-b458-6ff9ae4932d7_buggy.java
+++ b/tmp/ba85cbdc-10f5-434e-a3f2-816049b4174d_fixed.java
@@ -1,21 +1,25 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    if (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) {
       // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      Node potentialPrototypeNode = n.getFirstChild();
+      if (potentialPrototypeNode.getType() == Token.GETPROP) {
+        potentialPrototypeNode = potentialPrototypeNode.getFirstChild();
+      }
+      if (potentialPrototypeNode.getType() == Token.GETPROP) {
+        Node propNode = potentialPrototypeNode.getFirstChild().getNext();
+        if (propNode.getType() == Token.STRING && propNode.getString().equals("prototype")) {
           return true;
         }
+      } else if (potentialPrototypeNode.getType() == Token.GETELEM) {
+        Node propNode = potentialPrototypeNode.getFirstChild().getNext();
+        if (propNode.getType() == Token.STRING && propNode.getString().equals("prototype")) {
+          return true;
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
