diff --git a/tmp/80cc23ec-d685-4de2-a32b-1545ec886d20_buggy.java b/tmp/4efbfd15-b194-4528-93da-4eb2a0ea37f7_fixed.java
index 939f49b..ce1bb90 100644
--- a/tmp/80cc23ec-d685-4de2-a32b-1545ec886d20_buggy.java
+++ b/tmp/4efbfd15-b194-4528-93da-4eb2a0ea37f7_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    Node current = n;
+    while (current.getType() == Token.GETPROP) {
+      Node next = current.getFirstChild().getNext();
+      if (next.getType() == Token.STRING && next.getString().equals("prototype")) {
+        // Check if the right side of the assignment is another property assignment
+        Node rightSide = assign.getLastChild();
+        if (rightSide.getType() == Token.ASSIGN) {
+          Node rightSideLhs = rightSide.getFirstChild();
+          if (rightSideLhs.getType() == Token.GETPROP) {
             return true;
           }
+        } else {
+          return true;
+        }
+      }
+      current = current.getFirstChild();
     }
   }
 
   return false;
 }
\ No newline at end of file
