diff --git a/tmp/77b78222-0ea1-4dc2-b257-2346128d0395_buggy.java b/tmp/23dd5638-82fa-46c1-9b39-aa3284e6a20b_fixed.java
index 939f49b..f8a6e89 100644
--- a/tmp/77b78222-0ea1-4dc2-b257-2346128d0395_buggy.java
+++ b/tmp/23dd5638-82fa-46c1-9b39-aa3284e6a20b_fixed.java
@@ -1,21 +1,30 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+        && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        Node objectNode = n.getFirstChild();
+        String propertyName = n.getString();
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+        // Check if the object being assigned to is a prototype
+        while (objectNode.getType() == Token.GETPROP) {
+            if (objectNode.getLastChild().getString().equals("prototype")) {
+                // Check if the current property is being assigned
+                return propertyName != null && !propertyName.isEmpty();
+            }
+            objectNode = objectNode.getFirstChild();
+        }
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        // Check if the object being assigned to is a direct prototype
+        if (objectNode.getType() == Token.GETELEM &&
+            objectNode.getFirstChild().getType() == Token.GETPROP &&
+            objectNode.getFirstChild().getLastChild().getString().equals("prototype")) {
+            Node keyNode = objectNode.getLastChild();
+            if (keyNode.getType() == Token.STRING && keyNode.getString().equals(propertyName)) {
                 return true;
             }
         }
     }
 
     return false;
 }
\ No newline at end of file
