diff --git a/tmp/d93b4919-054a-45c6-a05b-eae1ff8ec823_buggy.java b/tmp/46c872ec-5e71-41da-9dcf-685e716fb53c_fixed.java
index 939f49b..531abf5 100644
--- a/tmp/d93b4919-054a-45c6-a05b-eae1ff8ec823_buggy.java
+++ b/tmp/46c872ec-5e71-41da-9dcf-685e716fb53c_fixed.java
@@ -1,21 +1,16 @@
 private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    Node lhs = assign.getFirstChild();
+    if (lhs != null && NodeUtil.isVarOrSimpleAssignLhs(lhs, assign)) {
+        if (lhs.getType() == Token.GETPROP) {
+            Node current = lhs;
+            while (current.getType() == Token.GETPROP) {
+                Node propNode = current.getLastChild();
+                if (propNode.getType() == Token.STRING && propNode.getString().equals("prototype")) {
                     return true;
                 }
+                current = current.getFirstChild();
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
