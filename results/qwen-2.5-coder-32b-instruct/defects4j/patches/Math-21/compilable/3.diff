diff --git a/tmp/977714ac-5bdc-4432-9b13-78c730a2cbb9_buggy.java b/tmp/d9065c37-581a-4ff8-917e-140dd44b6134_fixed.java
index 6708762..1cba3ec 100644
--- a/tmp/977714ac-5bdc-4432-9b13-78c730a2cbb9_buggy.java
+++ b/tmp/d9065c37-581a-4ff8-917e-140dd44b6134_fixed.java
@@ -1,99 +1,88 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
-
-        int[] swap  = new int[order];
-        int[] index = new int[order];
+        final int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            swap[r] = r;
+            int maxIndex = r;
             for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                if (c[index[i]][index[i]] > c[index[maxIndex]][index[maxIndex]]) {
+                    maxIndex = i;
                 }
             }
 
-
             // swap elements
-            if (swap[r] != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
-            }
+            index[r] = index[maxIndex];
+            index[maxIndex] = tmp;
 
             // check diagonal element
-            int ir = index[r];
-            if (c[ir][ir] < small) {
+            if (c[index[r]][index[r]] < small) {
 
                 if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                    throw new NonPositiveDefiniteMatrixException(c[index[r]][index[r]], r, small);
                 }
 
                 // check remaining diagonal elements
                 for (int i = r; i < order; ++i) {
                     if (c[index[i]][index[i]] < -small) {
                         // there is at least one sufficiently negative diagonal element,
                         // the symmetric positive semidefinite matrix is wrong
                         throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                     }
                 }
 
                 // all remaining diagonal elements are close to zero, we consider we have
                 // found the rank of the symmetric positive semidefinite matrix
                 ++r;
                 loop = false;
 
             } else {
 
                 // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+                final double sqrt = FastMath.sqrt(c[index[r]][index[r]]);
                 b[r][r] = sqrt;
                 final double inverse = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                    final double e = inverse * c[index[i]][index[r]];
                     b[i][r] = e;
-                    c[ii][ii] -= e * e;
+                    c[index[i]][index[i]] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
-                        c[ii][ij] = f;
-                        c[ij][ii] = f;
+                        final double f = c[index[i]][index[j]] - e * b[j][r];
+                        c[index[i]][index[j]] = f;
+                        c[index[j]][index[i]] = f;
                     }
                 }
 
                 // prepare next iteration
                 loop = ++r < order;
             }
         }
 
         // build the root matrix
         rank = r;
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+                root.setEntry(i, j, b[index[i]][j]);
             }
         }
-
     }
\ No newline at end of file
