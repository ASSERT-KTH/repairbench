diff --git a/tmp/c080119f-2096-41a0-b706-63fbf68dc9da_buggy.java b/tmp/b04ea21f-9632-42dd-ac37-a7c627db373e_fixed.java
index 3075782..615a69c 100644
--- a/tmp/c080119f-2096-41a0-b706-63fbf68dc9da_buggy.java
+++ b/tmp/b04ea21f-9632-42dd-ac37-a7c627db373e_fixed.java
@@ -1,82 +1,93 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
+  // Check for side effects in the return statement
+  boolean hasSideEffectsInReturn = false;
   if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+    if (stmt.isReturn() && stmt.hasChildren()) {
+      hasSideEffectsInReturn = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
+
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+        // Check for side effects in arguments
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+
+        // Check if the argument is mutable and referenced more than once
+        if (NodeUtil.mayEffectMutableState(cArg, compiler) &&
+            NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+
+        // Check if the function parameter is modified
+        if (NodeUtil.isNameReferencedInBlock(block, fnParam.getString(), new NodeUtil.MatchWarningReporter(compiler))) {
+          Node scp = block.getFirstChild();
+          while (scp != null) {
+            if (scp != stmt && NodeUtil.isAssignmentOp(scp) &&
+                NodeUtil.isLValueMatch(scp.getFirstChild(), fnParam.getString())) {
+              return CanInlineResult.NO;
+            }
+            scp = scp.getNext();
+          }
         }
 
-        // Move to the next name.
+        // Move to the next parameter
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
+    } else {
+      // If there are more call arguments than function parameters, cannot inline
+      if (cArg != null) {
+        return CanInlineResult.NO;
+      }
+      // Move to the next call argument
+      cArg = cArg.getNext();
+    }
+  }
+
+  // Check for side effects in the return statement again, in context of arguments
+  if (hasSideEffectsInReturn && NodeUtil.canBeSideEffected(callNode)) {
+    return CanInlineResult.NO;
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
