diff --git a/tmp/0b589893-c405-4751-809b-aebebc7fecc8_buggy.java b/tmp/60cc1151-499a-49fc-b8e2-329fa0a62b3f_fixed.java
index 3075782..cb66564 100644
--- a/tmp/0b589893-c405-4751-809b-aebebc7fecc8_buggy.java
+++ b/tmp/60cc1151-499a-49fc-b8e2-329fa0a62b3f_fixed.java
@@ -1,82 +1,83 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
-  private CanInlineResult canInlineReferenceDirectly(
-      Node callNode, Node fnNode) {
+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
         return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
+    // Determine if the return statement has side effects
+    boolean hasReturnSideEffects = false;
     if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
         Node stmt = block.getFirstChild();
         if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+            Node returnValue = stmt.getFirstChild();
+            if (returnValue != null) {
+                hasReturnSideEffects = NodeUtil.mayHaveSideEffects(returnValue, compiler);
             }
         }
+    }
+
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
         if (NodeUtil.isFunctionObjectCall(callNode)) {
             // TODO(johnlenz): Support replace this with a value.
             if (cArg == null || !cArg.isThis()) {
                 return CanInlineResult.NO;
             }
             cArg = cArg.getNext();
         } else {
             // ".apply" call should be filtered before this.
             Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
         }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
-    while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+    while (cArg != null && fnParam != null) {
+        // Check if a mutable argument is used more than once.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
         }
-        }
 
-        // Move to the next name.
+        // Move to the next parameter and argument
         fnParam = fnParam.getNext();
+        cArg = cArg.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
+    // If there are more arguments than parameters, and any of the extra arguments have side effects, inline is not possible
+    while (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
             return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
     }
+
+    // If there are more parameters than arguments, and the function has side effects, inline is not possible
+    while (fnParam != null) {
+        String paramName = fnParam.getString();
+        if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {
+            return CanInlineResult.NO;
+        }
+        fnParam = fnParam.getNext();
+    }
+
+    // Check if the return statement has side effects and parameters are used only once
+    if (hasReturnSideEffects) {
+        NodeUtil.FunctionParamTypeCreator creator = new NodeUtil.FunctionParamTypeCreator(compiler);
+        List<Node> params = NodeUtil.get FunctionParameters(fnNode).getChildren();
+        for (Node param : params) {
+            String paramName = param.getString();
+            if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {
+                return CanInlineResult.NO;
+            }
+        }
     }
 
     return CanInlineResult.YES;
 }
\ No newline at end of file
