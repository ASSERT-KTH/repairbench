diff --git a/tmp/1bb062a2-9828-45a2-ad64-0bf44ff640a9_buggy.java b/tmp/090521dc-86a7-48a5-b458-9ab6bc94f72e_fixed.java
index d27c40c..a2c0107 100644
--- a/tmp/1bb062a2-9828-45a2-ad64-0bf44ff640a9_buggy.java
+++ b/tmp/090521dc-86a7-48a5-b458-9ab6bc94f72e_fixed.java
@@ -1,49 +1,99 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Handle special cases
+    if (Double.isNaN(y[yOffset]) || Double.isNaN(x[xOffset])) {
+        for (int i = 0; i < getSize(); ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+        return;
+    }
+
+    if (x[xOffset] == 0) {
+        if (y[yOffset] > 0) {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = FastMath.PI / 2.0;
+            }
+        } else if (y[yOffset] < 0) {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = -FastMath.PI / 2.0;
+            }
+        } else {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = Double.NaN; // atan2(0, 0) is undefined
+            }
+        }
+        return;
+    }
+
+    if (y[yOffset] == 0) {
+        if (x[xOffset] > 0) {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+        } else {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = FastMath.PI;
+            }
+        }
+        return;
+    }
+
+    if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {
+        if (x[xOffset] > 0) {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = FastMath.PI / 4.0;
+            }
+        } else {
+            for (int i = 0; i < getSize(); ++i) {
+                result[resultOffset + i] = 3.0 * FastMath.PI / 4.0;
+            }
+        }
+        return;
+    }
+
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
     if (x[xOffset] >= 0) {
 
         // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
-            for (int i = 0; i < tmp2.length; ++i) {
+        for (int i = 0; i < getSize(); ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
         // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
 
     // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
