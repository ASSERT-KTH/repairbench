diff --git a/tmp/2800b7ae-7261-4d22-8ceb-0c1461849177_buggy.java b/tmp/e1221755-fe95-4f9e-ad13-8b591542c90b_fixed.java
index f650982..86200ad 100644
--- a/tmp/2800b7ae-7261-4d22-8ceb-0c1461849177_buggy.java
+++ b/tmp/e1221755-fe95-4f9e-ad13-8b591542c90b_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            return contains((Collection) l, r);
         }
 
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            return contains((Collection) r, l);
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        return compareObjects(l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+
+    private boolean contains(Collection<?> collection, Object value) {
+        for (Object item : collection) {
+            if (compareObjects(item, value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean compareObjects(Object l, Object r) {
+        if (l == null && r == null) {
+            return true;
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (l == null || r == null) {
+            return false;
         }
-        return equal(l, r);
+        return l.equals(r);
     }
\ No newline at end of file
