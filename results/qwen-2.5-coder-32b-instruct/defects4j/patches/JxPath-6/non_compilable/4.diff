diff --git a/tmp/8b9344ca-1097-4ef7-9991-4e33c7e89ceb_buggy.java b/tmp/476b39bf-3525-40a0-994a-595d7938817b_fixed.java
index f650982..f4f7f28 100644
--- a/tmp/8b9344ca-1097-4ef7-9991-4e33c7e89ceb_buggy.java
+++ b/tmp/476b39bf-3525-40a0-994a-595d7938817b_fixed.java
@@ -1,42 +1,68 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            if (r instanceof Collection) {
+                return ((Collection) l).equals(r);
+            } else {
+                return contains((Collection) l, r);
+            }
         }
 
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            return contains((Collection) r, l);
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+        return l == null ? r == null : l.equals(r);
+    }
+
+    private boolean contains(Collection<?> collection, Object value) {
+        return collection.contains(value);
+    }
+
+    private boolean contains(Iterator<?> iterator, Object value) {
+        while (iterator.hasNext()) {
+            if (equal(null, new ConstantExpression(iterator.next()), new ConstantExpression(value))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean findMatch(Iterator<?> leftIterator, Iterator<?> rightIterator) {
+        while (leftIterator.hasNext() && rightIterator.hasNext()) {
+            if (equal(null, new ConstantExpression(leftIterator.next()), new ConstantExpression(rightIterator.next()))) {
+                return true;
+            }
+        }
+        return !leftIterator.hasNext() && !rightIterator.hasNext();
     }
\ No newline at end of file
