diff --git a/tmp/f36b3d5e-69c2-46bc-9916-e24d218d867e_buggy.java b/tmp/29762a35-16e4-40cd-8de6-570520e0f356_fixed.java
index f650982..b220593 100644
--- a/tmp/f36b3d5e-69c2-46bc-9916-e24d218d867e_buggy.java
+++ b/tmp/29762a35-16e4-40cd-8de6-570520e0f356_fixed.java
@@ -1,42 +1,76 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return Objects.equals(l, r);
+}
+
+private boolean contains(Iterator<?> iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (equal(null, new ConstantExpression(iterator.next()), new ConstantExpression(value))) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator<?> leftIterator, Iterator<?> rightIterator) {
+    List<Object> leftList = new ArrayList<>();
+    while (leftIterator.hasNext()) {
+        leftList.add(leftIterator.next());
+    }
+    List<Object> rightList = new ArrayList<>();
+    while (rightIterator.hasNext()) {
+        rightList.add(rightIterator.next());
+    }
+    return leftList.equals(rightList);
+}
+
+class ConstantExpression implements Expression {
+    private final Object value;
+
+    public ConstantExpression(Object value) {
+        this.value = value;
+    }
+
+    @Override
+    public Object compute(EvalContext context) {
+        return value;
+    }
 }
\ No newline at end of file
