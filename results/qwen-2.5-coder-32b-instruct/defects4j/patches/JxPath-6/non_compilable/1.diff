diff --git a/tmp/1e326180-f618-4064-af12-2be519556f16_buggy.java b/tmp/02714c99-464e-43e0-b694-9f8aaa99e109_fixed.java
index f650982..d08f528 100644
--- a/tmp/1e326180-f618-4064-af12-2be519556f16_buggy.java
+++ b/tmp/02714c99-464e-43e0-b694-9f8aaa99e109_fixed.java
@@ -1,42 +1,56 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    if (l instanceof Iterator) {
+        return contains((Iterator<?>) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+    if (r instanceof Iterator) {
+        return contains((Iterator<?>) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    return equals(l, r);
 }
-        return equal(l, r);
+
+private boolean contains(Iterator<?> iterator, Object value) {
+    while (iterator.hasNext()) {
+        Object element = iterator.next();
+        if (equals(element, value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean equals(Object l, Object r) {
+    if (l == null) {
+        return r == null;
+    }
+    return l.equals(r);
 }
\ No newline at end of file
