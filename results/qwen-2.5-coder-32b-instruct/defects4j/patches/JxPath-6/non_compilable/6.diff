diff --git a/tmp/f47fd264-396b-4383-b114-7084d569b168_buggy.java b/tmp/23ca5968-9451-4212-a7c7-bf96080b421e_fixed.java
index f650982..3f61048 100644
--- a/tmp/f47fd264-396b-4383-b114-7084d569b168_buggy.java
+++ b/tmp/23ca5968-9451-4212-a7c7-bf96080b421e_fixed.java
@@ -1,42 +1,70 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return safeEquals(l, r);
+}
+
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (safeEquals(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator leftIterator, Iterator rightIterator) {
+    List<Object> rightList = new ArrayList<>();
+    rightIterator.forEachRemaining(rightList::add);
+
+    while (leftIterator.hasNext()) {
+        if (contains(rightList.iterator(), leftIterator.next())) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean safeEquals(Object left, Object right) {
+    if (left == null) {
+        return right == null;
+    }
+    return left.equals(right);
 }
\ No newline at end of file
