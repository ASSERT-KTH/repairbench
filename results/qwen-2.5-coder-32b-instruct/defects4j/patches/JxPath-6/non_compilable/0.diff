diff --git a/tmp/7a843bdc-eb69-4502-a452-def194f4cd7c_buggy.java b/tmp/ada1bbb7-3844-44a2-ad44-09c81cb7c16d_fixed.java
index f650982..5d474b2 100644
--- a/tmp/7a843bdc-eb69-4502-a452-def194f4cd7c_buggy.java
+++ b/tmp/ada1bbb7-3844-44a2-ad44-09c81cb7c16d_fixed.java
@@ -1,42 +1,74 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    return areEqual(l, r);
+}
+
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (areEqual(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean areEqual(Object l, Object r) {
+    if (l == r) {
+        return true;
+    }
+    if (l == null || r == null) {
+        return false;
+    }
+    return l.equals(r);
+}
+
+private boolean findMatch(Iterator leftIterator, Iterator rightIterator) {
+    while (leftIterator.hasNext()) {
+        Object left = leftIterator.next();
+        rightIterator = ((Collection) rightIterator).iterator(); // Reset right iterator
+        while (rightIterator.hasNext()) {
+            if (areEqual(left, rightIterator.next())) {
+                return true;
+            }
+        }
+    }
+    return false;
 }
\ No newline at end of file
