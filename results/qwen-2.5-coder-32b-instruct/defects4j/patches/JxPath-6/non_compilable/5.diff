diff --git a/tmp/4ef8a0ff-a398-4368-9fec-c9d451ec20c6_buggy.java b/tmp/d8886e46-2e05-4eea-bce2-8bf45fe7efc7_fixed.java
index f650982..e6a0e6e 100644
--- a/tmp/4ef8a0ff-a398-4368-9fec-c9d451ec20c6_buggy.java
+++ b/tmp/d8886e46-2e05-4eea-bce2-8bf45fe7efc7_fixed.java
@@ -1,42 +1,76 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+        return objectsEqual(l, r);
+    }
+
+    private boolean contains(Iterator iterator, Object value) {
+        while (iterator.hasNext()) {
+            Object item = iterator.next();
+            if (objectsEqual(item, value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean findMatch(Iterator left, Iterator right) {
+        while (left.hasNext()) {
+            Object lItem = left.next();
+            right.reset(); // Assuming there's a reset method or the iterator can be reinitialized
+            while (right.hasNext()) {
+                Object rItem = right.next();
+                if (objectsEqual(lItem, rItem)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    private boolean objectsEqual(Object l, Object r) {
+        if (l == null) {
+            return r == null;
+        }
+        if (r == null) {
+            return false;
+        }
+        return l.equals(r);
     }
\ No newline at end of file
