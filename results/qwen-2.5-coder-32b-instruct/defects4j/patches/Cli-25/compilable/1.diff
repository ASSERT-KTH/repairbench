diff --git a/tmp/524a0eaa-ad3c-46f3-96f1-6767f2b84426_buggy.java b/tmp/6d905508-e95d-4a20-b1f2-315b1fbcfaf3_fixed.java
index 875b31b..671dd24 100644
--- a/tmp/524a0eaa-ad3c-46f3-96f1-6767f2b84426_buggy.java
+++ b/tmp/6d905508-e95d-4a20-b1f2-315b1fbcfaf3_fixed.java
@@ -1,54 +1,52 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
             // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        text = text.substring(pos).trim();
+
+        while (!text.isEmpty())
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, width - nextLineTabStop, 0);
 
             if (pos == -1)
             {
-                sb.append(text);
-
+                sb.append(padding).append(text);
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            text = text.substring(pos).trim();
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
+        return sb;
     }
\ No newline at end of file
