diff --git a/tmp/6cc5763e-5b79-4d4c-9ac1-bc4d5f594486_buggy.java b/tmp/d3955d50-efde-4855-b897-18da3d6e3cbb_fixed.java
index 875b31b..d6d94bf 100644
--- a/tmp/6cc5763e-5b79-4d4c-9ac1-bc4d5f594486_buggy.java
+++ b/tmp/d3955d50-efde-4855-b897-18da3d6e3cbb_fixed.java
@@ -1,54 +1,52 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+    text = text.substring(pos).trim();
+    while (text.length() > 0)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - nextLineTabStop, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(rtrim(text));
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // Ensure we don't wrap right after the padding
+        if (pos == 0)
         {
-                pos = width;
+            pos = findWrapPos(text, width - nextLineTabStop, 1);
+            if (pos == -1)
+            {
+                sb.append(padding).append(rtrim(text));
+
+                return sb;
+            }
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
+
+    return sb;
 }
\ No newline at end of file
