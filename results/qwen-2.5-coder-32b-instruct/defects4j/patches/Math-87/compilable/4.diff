diff --git a/tmp/c90b0d62-d898-4f6b-b57b-759f3adde631_buggy.java b/tmp/2369c017-76c6-4689-a3cf-ea289d8f11d6_fixed.java
index 70cafe0..a34454b 100644
--- a/tmp/c90b0d62-d898-4f6b-b57b-759f3adde631_buggy.java
+++ b/tmp/2369c017-76c6-4689-a3cf-ea289d8f11d6_fixed.java
@@ -1,18 +1,33 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && isPivotRow(i, col)) {
                 if (row == null) {
                     row = i;
                 } else {
                     return null;
                 }
             }
         }
         return row;
     }
+
+    /**
+     * Checks if the given row is a pivot row for the given column.
+     * @param row index of the row to check
+     * @param col index of the column to check
+     * @return true if the row is a pivot row for the column, false otherwise
+     */
+    private boolean isPivotRow(final int row, final int col) {
+        for (int j = 0; j < getWidth(); j++) {
+            if (j != col && !MathUtils.equals(getEntry(row, j), 0.0, epsilon)) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
