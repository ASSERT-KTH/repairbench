diff --git a/tmp/6b971c58-826c-46b0-bdfb-722461560e1b_buggy.java b/tmp/76512309-f124-4f20-af5e-e595349c343e_fixed.java
index 70cafe0..de31b0b 100644
--- a/tmp/6b971c58-826c-46b0-bdfb-722461560e1b_buggy.java
+++ b/tmp/76512309-f124-4f20-af5e-e595349c343e_fixed.java
@@ -1,18 +1,34 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && MathUtils.equals(sumRowExcludingColumn(i, col), 0.0, epsilon)) {
                 if (row == null) {
                     row = i;
                 } else {
                     return null;
                 }
             }
         }
         return row;
     }
+
+    /**
+     * Sums all elements in a row excluding the element in the specified column.
+     * @param row index of the row to sum
+     * @param col index of the column to exclude
+     * @return the sum of the row elements excluding the specified column
+     */
+    private double sumRowExcludingColumn(int row, int col) {
+        double sum = 0.0;
+        for (int j = 0; j < getWidth(); j++) {
+            if (j != col) {
+                sum += getEntry(row, j);
+            }
+        }
+        return sum;
+    }
\ No newline at end of file
