diff --git a/tmp/e10ba596-f3b1-4875-939e-bcdbb7cfb879_buggy.java b/tmp/a87b3b45-7d25-485b-a686-8ec11cb1b821_fixed.java
index 70cafe0..4e1146e 100644
--- a/tmp/e10ba596-f3b1-4875-939e-bcdbb7cfb879_buggy.java
+++ b/tmp/a87b3b45-7d25-485b-a686-8ec11cb1b821_fixed.java
@@ -1,18 +1,35 @@
     /**
      * Checks whether the given column is basic.
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && isPivotColumn(i, col)) {
                 if (row == null) {
                     row = i;
                 } else {
-                return null;
+                    return null; // More than one basic entry found in the column
                 }
+            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+                return null; // Non-zero and non-one entry found, not a basic column
             }
         }
         return row;
     }
+
+    /**
+     * Checks if the column is a pivot column for the given row.
+     * @param row index of the row to check
+     * @param col index of the column to check
+     * @return true if the column is a pivot column for the row, false otherwise
+     */
+    private boolean isPivotColumn(int row, int col) {
+        for (int j = 0; j < getWidth(); j++) {
+            if (j != col && !MathUtils.equals(getEntry(row, j), 0.0, epsilon)) {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
