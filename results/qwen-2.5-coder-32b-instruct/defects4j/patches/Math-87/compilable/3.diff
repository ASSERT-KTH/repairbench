diff --git a/tmp/4d6815b5-e3cc-4b75-94a4-03af8d72caec_buggy.java b/tmp/1e76c048-c534-4126-9e94-a2885528bcfe_fixed.java
index 70cafe0..73fbc6f 100644
--- a/tmp/4d6815b5-e3cc-4b75-94a4-03af8d72caec_buggy.java
+++ b/tmp/1e76c048-c534-4126-9e94-a2885528bcfe_fixed.java
@@ -1,18 +1,35 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in. null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
     Integer row = null;
     for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+        if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && isPivotColumn(i, col)) {
             if (row == null) {
                 row = i;
             } else {
-                return null;
+                return null; // More than one basic row found, should not happen for a basic column
             }
+        } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            return null; // Non-zero and non-one value found, not a basic column
         }
     }
     return row;
 }
+
+/**
+ * Helper method to check if the column is a pivot column in the given row.
+ * @param row index of the row
+ * @param col index of the column
+ * @return true if the column is a pivot column in the row, false otherwise
+ */
+private boolean isPivotColumn(int row, int col) {
+    for (int j = 0; j < getWidth(); j++) {
+        if (j != col && !MathUtils.equals(getEntry(row, j), 0.0, epsilon)) {
+            return false; // Found a non-zero entry in the row, not a pivot column
+        }
+    }
+    return true; // All other entries in the row are zero, this is a pivot column
+}
\ No newline at end of file
