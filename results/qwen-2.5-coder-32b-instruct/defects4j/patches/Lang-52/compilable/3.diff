diff --git a/tmp/93680044-b638-4ace-9f67-9cad1fcbd4d6_buggy.java b/tmp/78c438b9-22bc-4599-a7e6-e3bac5ffc105_fixed.java
index a6dab52..392b382 100644
--- a/tmp/93680044-b638-4ace-9f67-9cad1fcbd4d6_buggy.java
+++ b/tmp/78c438b9-22bc-4599-a7e6-e3bac5ffc105_fixed.java
@@ -1,80 +1,88 @@
     /**
      * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>
      * 
-     * @param out write to receieve the escaped string
+     * @param out write to receive the escaped string
      * @param str String to escape values in, may be null
      * @param escapeSingleQuote escapes single quotes if <code>true</code>
      * @throws IOException if an IOException occurs
      */
     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (str == null) {
             return;
         }
         int sz;
         sz = str.length();
         for (int i = 0; i < sz; i++) {
             char ch = str.charAt(i);
 
             // handle unicode
             if (ch > 0xfff) {
                 out.write("\\u" + hex(ch));
             } else if (ch > 0xff) {
                 out.write("\\u0" + hex(ch));
             } else if (ch > 0x7f) {
                 out.write("\\u00" + hex(ch));
             } else if (ch < 32) {
                 switch (ch) {
                     case '\b':
                         out.write('\\');
                         out.write('b');
                         break;
                     case '\n':
                         out.write('\\');
                         out.write('n');
                         break;
                     case '\t':
                         out.write('\\');
                         out.write('t');
                         break;
                     case '\f':
                         out.write('\\');
                         out.write('f');
                         break;
                     case '\r':
                         out.write('\\');
                         out.write('r');
                         break;
                     default :
                         if (ch > 0xf) {
                             out.write("\\u00" + hex(ch));
                         } else {
                             out.write("\\u000" + hex(ch));
                         }
                         break;
                 }
             } else {
                 switch (ch) {
                     case '\'':
                         if (escapeSingleQuote) {
                           out.write('\\');
                         }
                         out.write('\'');
                         break;
                     case '"':
                         out.write('\\');
                         out.write('"');
                         break;
                     case '\\':
                         out.write('\\');
                         out.write('\\');
                         break;
+                    case '/':
+                        // Check if we need to escape the slash to prevent </script> termination
+                        if (i > 0 && str.charAt(i - 1) == '<' && 
+                            i + 6 < sz && str.substring(i, i + 7).equalsIgnoreCase("/script>")) {
+                            out.write('\\');
+                        }
+                        out.write('/');
+                        break;
                     default :
                         out.write(ch);
                         break;
                 }
             }
         }
     }
\ No newline at end of file
