diff --git a/tmp/4519fff3-72aa-41b3-afef-964188db247d_buggy.java b/tmp/a338f7c0-81fd-4a74-8d33-6445cecb8734_fixed.java
index de9af32..8a1a182 100644
--- a/tmp/4519fff3-72aa-41b3-afef-964188db247d_buggy.java
+++ b/tmp/a338f7c0-81fd-4a74-8d33-6445cecb8734_fixed.java
@@ -1,18 +1,48 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
       if (child.getType() == Token.NAME) {
         changed.add(child.getString());
+      } else if (child.getType() == Token.GETPROP) {
+        // Check if the call is through a property (e.g., obj.method.call)
+        Node grandChild = child.getFirstChild();
+        if (grandChild.getType() == Token.NAME) {
+          changed.add(grandChild.getString() + "." + child.getLastChild().getString());
+        }
+      } else if (child.getType() == Token.GETELEM) {
+        // Check if the call is through an element access (e.g., obj['method'].call)
+        Node grandChild = child.getFirstChild();
+        if (grandChild.getType() == Token.NAME) {
+          changed.add(grandChild.getString() + "." + child.getLastChild().getString());
+        }
+      }
+    } else if (node.getType() == Token.GETPROP && node.getNext() != null && node.getNext().getType() == Token.CALL) {
+      // Check if the call is through a property (e.g., obj.method.call)
+      Node propNode = node.getLastChild();
+      if (propNode.getType() == Token.STRING) {
+        Node objNode = node.getFirstChild();
+        if (objNode.getType() == Token.NAME) {
+          changed.add(objNode.getString() + "." + propNode.getString());
+        }
+      }
+    } else if (node.getType() == Token.GETELEM && node.getNext() != null && node.getNext().getType() == Token.CALL) {
+      // Check if the call is through an element access (e.g., obj['method'].call)
+      Node propNode = node.getLastChild();
+      if (propNode.getType() == Token.STRING) {
+        Node objNode = node.getFirstChild();
+        if (objNode.getType() == Token.NAME) {
+          changed.add(objNode.getString() + "." + propNode.getString());
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
