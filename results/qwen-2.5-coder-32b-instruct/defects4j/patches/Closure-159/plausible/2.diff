diff --git a/tmp/76f30206-504f-4ebe-ad84-900adcd387c7_buggy.java b/tmp/86c3ebd1-5255-4414-a33e-cba2fd084315_fixed.java
index de9af32..158dce3 100644
--- a/tmp/76f30206-504f-4ebe-ad84-900adcd387c7_buggy.java
+++ b/tmp/86c3ebd1-5255-4414-a33e-cba2fd084315_fixed.java
@@ -1,18 +1,36 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
+    } else if (child.getType() == Token.GETPROP) {
+      // Handle cases like `initialize.call(this, options)`
+      Node functionNameNode = child.getFirstChild();
+      if (functionNameNode.getType() == Token.NAME) {
+        changed.add(functionNameNode.getString());
+      } else if (functionNameNode.getType() == Token.GETPROP) {
+        // Handle nested property accesses, e.g., `obj.method.call(this, args)`
+        changed.add(getQualifiedName(functionNameNode));
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
+
+private String getQualifiedName(Node node) {
+  if (node.getType() == Token.NAME) {
+    return node.getString();
+  } else if (node.getType() == Token.GETPROP) {
+    return getQualifiedName(node.getFirstChild()) + "." + node.getLastChild().getString();
+  }
+  return "";
+}
\ No newline at end of file
