diff --git a/tmp/21d00f18-0bc7-475b-a864-9d58e089ebdf_buggy.java b/tmp/0950d0bc-18c3-402f-837b-3dfa14ee91dc_fixed.java
index de9af32..fb373f7 100644
--- a/tmp/21d00f18-0bc7-475b-a864-9d58e089ebdf_buggy.java
+++ b/tmp/0950d0bc-18c3-402f-837b-3dfa14ee91dc_fixed.java
@@ -1,18 +1,30 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
+    } else if (child.getType() == Token.GETPROP) {
+      Node getPropNode = child;
+      Node functionNameNode = getPropNode.getLastChild();
+      if (functionNameNode.getType() == Token.STRING) {
+        String functionName = functionNameNode.getString();
+        if (functionName.equals("call") || functionName.equals("apply")) {
+          Node targetFunctionNode = getPropNode.getFirstChild();
+          if (targetFunctionNode.getType() == Token.NAME) {
+            changed.add(targetFunctionNode.getString());
+          }
+        }
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
