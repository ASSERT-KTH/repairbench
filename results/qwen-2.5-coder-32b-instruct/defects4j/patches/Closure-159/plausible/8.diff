diff --git a/tmp/966ea585-b2c3-4cd7-a1a8-cf3b899d40ca_buggy.java b/tmp/60117d16-0b38-4f22-9d8c-00f87e3b8f38_fixed.java
index de9af32..2e0a1f9 100644
--- a/tmp/966ea585-b2c3-4cd7-a1a8-cf3b899d40ca_buggy.java
+++ b/tmp/60117d16-0b38-4f22-9d8c-00f87e3b8f38_fixed.java
@@ -1,18 +1,30 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
+    } else if (child.getType() == Token.GETPROP) {
+      // Handle the case where the function is called using the call method
+      Node getPropChild = child.getFirstChild();
+      if (getPropChild.getType() == Token.NAME) {
+        changed.add(getPropChild.getString());
+      }
+    } else if (child.getType() == Token.GETELEM) {
+      // Handle the case where the function is called using the call method and is an element access
+      Node getElemChild = child.getFirstChild();
+      if (getElemChild.getType() == Token.NAME) {
+        changed.add(getElemChild.getString());
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
