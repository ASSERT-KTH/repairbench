diff --git a/tmp/602754d7-98a4-4a4a-8a42-b35165b78edd_buggy.java b/tmp/3a1647ef-062f-4c57-a534-0b4483e43c32_fixed.java
index ec6c9ee..aaa0035 100644
--- a/tmp/602754d7-98a4-4a4a-8a42-b35165b78edd_buggy.java
+++ b/tmp/3a1647ef-062f-4c57-a534-0b4483e43c32_fixed.java
@@ -1,21 +1,30 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
+        if (sep.finishesParser() || sep.finishesPrinter()) {
             return new PeriodFormatter(sep, sep);
+        } else {
+            // If the separator does not finish the parser or printer, we need to handle it differently
+            // Here we assume that the separator should be part of the parser and printer if it's not finished
+            Object[] comp = createComposite(elementPairs.subList(2, size));
+            PeriodPrinter printer = notPrinter ? null : new CompositePeriodPrinter(new Object[]{sep, comp[0]});
+            PeriodParser parser = notParser ? null : new CompositePeriodParser(new Object[]{sep, comp[1]});
+            return new PeriodFormatter(printer, parser);
+        }
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
