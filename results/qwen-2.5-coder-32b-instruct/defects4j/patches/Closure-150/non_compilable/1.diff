diff --git a/tmp/7598a06e-3798-4076-82b8-ca1346702346_buggy.java b/tmp/a02089d6-ea8a-4d62-ad7b-94db59063635_fixed.java
index 800e6e1..862a3a6 100644
--- a/tmp/7598a06e-3798-4076-82b8-ca1346702346_buggy.java
+++ b/tmp/a02089d6-ea8a-4d62-ad7b-94db59063635_fixed.java
@@ -1,32 +1,74 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
-            return;
+        // Handle named function expression
+        defineDeclaredFunction(n, parent);
+        break;
+      } else if (parent.getType() == Token.ASSIGN) {
+        // Handle function assigned to a property
+        Node lhs = parent.getFirstChild();
+        if (lhs.isGetProp()) {
+          defineFunctionProperty(lhs, n);
         }
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.GETPROP:
+      // Handle property assignments like goog.foo
+      if (n.getNext() != null && n.getNext().getType() == Token.FUNCTION) {
+        defineFunctionProperty(n, n.getNext());
       }
+      break;
+  }
+}
+
+/**
+ * Helper method to define a function property in an object or prototype.
+ *
+ * @param propNode The property node (GETPROP).
+ * @param functionNode The function node.
+ */
+private void defineFunctionProperty(Node propNode, Node functionNode) {
+  String qName = NodeUtil.getQualifiedName(propNode);
+  if (qName != null) {
+    JSType functionType = inferFunctionType(functionNode);
+    JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(functionNode);
+    scope.declareVariable(qName, functionNode, functionType, docInfo);
+  }
+}
+
+/**
+ * Infer the JSType for a function node.
+ *
+ * @param functionNode The function node.
+ * @return The inferred JSType.
+ */
+private JSType inferFunctionType(Node functionNode) {
+  // This is a placeholder for the actual type inference logic
+  // You may need to implement this based on your specific requirements
+  return registry.createFunctionType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE), functionNode.getParameters());
 }
\ No newline at end of file
