diff --git a/tmp/2aa2f7a7-a65e-43c7-a6d9-b2560409945e_buggy.java b/tmp/95ab97df-9412-42f8-ae94-3af8c1c17b81_fixed.java
index 800e6e1..31f53de 100644
--- a/tmp/2aa2f7a7-a65e-43c7-a6d9-b2560409945e_buggy.java
+++ b/tmp/95ab97df-9412-42f8-ae94-3af8c1c17b81_fixed.java
@@ -1,32 +1,43 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+  if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+      if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.VAR) {
+        // Function expression assigned to a var name
+        defineVar(parent, parent.getParent());
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.GETPROP:
+      if (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN) {
+        // Handle cases like var goog = {}; goog.foo = function() {};
+        String name = n.getQualifiedName();
+        if (name != null) {
+          defineQname(name, n, parent);
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
