diff --git a/tmp/f3baa470-d961-4384-80b2-57a92a04776d_buggy.java b/tmp/0d0d63cb-e91a-45b3-b183-6dc6a1170c11_fixed.java
index 800e6e1..3b7772d 100644
--- a/tmp/f3baa470-d961-4384-80b2-57a92a04776d_buggy.java
+++ b/tmp/0d0d63cb-e91a-45b3-b183-6dc6a1170c11_fixed.java
@@ -1,32 +1,50 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+  if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.NAME:
+      // Handle namespaced functions and properties
+      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {
+        Node valueNode = parent.getSecondChild();
+        if (valueNode.getType() == Token.FUNCTION) {
+          defineNamespacedFunction(n, valueNode);
+        }
+      }
+      break;
+    case Token.GETPROP:
+      // Handle property definition in constructors
+      if (parent.getType() == Token.EXPR_RESULT) {
+        Node grandParent = parent.getParent();
+        if (grandParent.getType() == Token.BLOCK) {
+          Node scriptOrFunction = grandParent.getParent();
+          if (scriptOrFunction.getType() == Token.FUNCTION) {
+            defineConstructorProperty(n, scriptOrFunction);
+          }
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
