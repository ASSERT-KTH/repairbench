diff --git a/tmp/e24a79a6-ecb6-42cc-b9a2-024975745e7e_buggy.java b/tmp/af86e77b-11a5-440a-8a04-9621b9267bdb_fixed.java
index 800e6e1..668117c 100644
--- a/tmp/e24a79a6-ecb6-42cc-b9a2-024975745e7e_buggy.java
+++ b/tmp/af86e77b-11a5-440a-8a04-9621b9267bdb_fixed.java
@@ -1,32 +1,51 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
-            return;
-          }
+        // Handle named function expressions
+        defineNamedFunctionInScope(parent.getString(), n, parent);
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.ASSIGN:
+      // Handle assignments like goog.foo = function() {...};
+      if (n.getFirstChild().isQualifiedName()) {
+        String qname = n.getFirstChild().getQualifiedName();
+        Node functionNode = n.getSecondChild();
+        if (functionNode.isFunction()) {
+          defineNamedFunctionInScope(qname, functionNode, n);
         }
       }
+      break;
+  }
+}
+
+private void defineNamedFunctionInScope(String name, Node functionNode, Node parent) {
+  JSDocInfo jsDoc = NodeUtil.getFunctionJSDocInfo(functionNode);
+  JSType functionType = typeRegistry.createFunctionTypeWithVarArgs(null, jsDoc.getParameterTypes());
+  Var var = scope.declare(name, functionNode, functionType, null);
+  var.markAsInjected();
+}
\ No newline at end of file
