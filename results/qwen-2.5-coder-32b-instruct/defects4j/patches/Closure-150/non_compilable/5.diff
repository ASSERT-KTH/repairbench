diff --git a/tmp/2589b2e1-af26-455c-bf3a-7c74131c085d_buggy.java b/tmp/5ac03ce0-0a19-4079-b79c-5b0bb34bbcaf_fixed.java
index 800e6e1..5b06fe8 100644
--- a/tmp/2589b2e1-af26-455c-bf3a-7c74131c085d_buggy.java
+++ b/tmp/5ac03ce0-0a19-4079-b79c-5b0bb34bbcaf_fixed.java
@@ -1,32 +1,39 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+  if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+      if (parent.getType() == Token.Name) {
+        // Named function expression, do not define here, it will be handled when visited as NAME node.
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.NAME:
+      if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.FUNCTION) {
+        // Named function expression, define the function here.
+        defineDeclaredFunction(n.getFirstChild(), n);
+      }
+      break;
   }
 }
\ No newline at end of file
