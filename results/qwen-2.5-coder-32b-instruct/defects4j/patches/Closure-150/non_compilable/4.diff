diff --git a/tmp/60f6c99d-fe1f-4acc-9b28-ceb1eb0e2a75_buggy.java b/tmp/776f7090-5f91-490e-b481-aed3896ceb65_fixed.java
index 800e6e1..2bf1a1c 100644
--- a/tmp/60f6c99d-fe1f-4acc-9b28-ceb1eb0e2a75_buggy.java
+++ b/tmp/776f7090-5f91-490e-b481-aed3896ceb65_fixed.java
@@ -1,32 +1,52 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (n == scope.getRootNode()) return;
 
-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {
+    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {
         handleFunctionInputs(parent);
         return;
     }
 
     attachLiteralTypes(n);
     switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
             defineDeclaredFunction(n, parent);
             break;
         case Token.CATCH:
             defineCatch(n, parent);
             break;
         case Token.VAR:
             defineVar(n, parent);
             break;
+        case Token.GETPROP:
+            if (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN || parent.getType() == Token.LP) {
+                attachQualifiedNameTypes(n, parent);
+            }
+            break;
+        case Token.GETELEM:
+            if (parent.getType() == Token.VAR || parent.getType() == Token.ASSIGN || parent.getType() == Token.LP) {
+                attachQualifiedNameTypes(n, parent);
+            }
+            break;
+    }
+}
+
+private void attachQualifiedNameTypes(Node n, Node parent) {
+    JSDocInfo jsdoc = n.getJSDocInfo();
+    if (jsdoc != null) {
+        String qname = n.getQualifiedName();
+        if (qname != null) {
+            Var var = lastLocalScope.getVar(qname);
+            if (var != null) {
+                var.setType(t.getTypeRegistry().createObjectType(jsdoc));
+            }
+        }
     }
 }
\ No newline at end of file
