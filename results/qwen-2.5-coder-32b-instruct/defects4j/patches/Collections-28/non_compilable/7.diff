diff --git a/tmp/c8a203f8-4da3-4509-bb5b-ebb6d251411a_buggy.java b/tmp/c8a9968a-62d6-4bb5-bc46-820555850658_fixed.java
index e69de29..6ed60c3 100644
--- a/tmp/c8a203f8-4da3-4509-bb5b-ebb6d251411a_buggy.java
+++ b/tmp/c8a9968a-62d6-4bb5-bc46-820555850658_fixed.java
@@ -0,0 +1,102 @@
+@Override
+public SortedMap<K, V> prefixMap(K prefix) {
+    if (prefix == null) {
+        throw new NullPointerException("Prefix must not be null");
+    }
+    return new PrefixMap(prefix);
+}
+
+private class PrefixMap extends AbstractMap<K, V> implements SortedMap<K, V> {
+    private final K prefix;
+
+    public PrefixMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public V put(K key, V value) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public Comparator<? super K> comparator() {
+        return PatriciaTrie.this.comparator();
+    }
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        Set<Entry<K, V>> result = new HashSet<>();
+        for (Map.Entry<K, V> entry : PatriciaTrie.this.entrySet()) {
+            if (entry.getKey().toString().startsWith(prefix.toString())) {
+                result.add(entry);
+            }
+        }
+        return result;
+    }
+
+    @Override
+    public K firstKey() {
+        K first = null;
+        for (K key : keySet()) {
+            if (first == null || comparator().compare(key, first) < 0) {
+                first = key;
+            }
+        }
+        return first;
+    }
+
+    @Override
+    public SortedMap<K, V> headMap(K toKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public K lastKey() {
+        K last = null;
+        for (K key : keySet()) {
+            if (last == null || comparator().compare(key, last) > 0) {
+                last = key;
+            }
+        }
+        return last;
+    }
+
+    @Override
+    public SortedMap<K, V> subMap(K fromKey, K toKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public SortedMap<K, V> tailMap(K fromKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public Set<K> keySet() {
+        Set<K> result = new HashSet<>();
+        for (Map.Entry<K, V> entry : entrySet()) {
+            result.add(entry.getKey());
+        }
+        return result;
+    }
+
+    @Override
+    public Collection<V> values() {
+        Collection<V> result = new ArrayList<>();
+        for (Map.Entry<K, V> entry : entrySet()) {
+            result.add(entry.getValue());
+        }
+        return result;
+    }
+
+    @Override
+    public void clear() {
+        List<K> keysToRemove = new ArrayList<>();
+        for (K key : keySet()) {
+            keysToRemove.add(key);
+        }
+        for (K key : keysToRemove) {
+            PatriciaTrie.this.remove(key);
+        }
+    }
+}
\ No newline at end of file
