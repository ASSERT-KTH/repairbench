diff --git a/tmp/9b00bee0-3951-478f-b2c0-4e42310c986f_buggy.java b/tmp/89e4bcd0-ffc7-412d-bad0-c42eac3d9f60_fixed.java
index 1b36a4f..96780fb 100644
--- a/tmp/9b00bee0-3951-478f-b2c0-4e42310c986f_buggy.java
+++ b/tmp/89e4bcd0-ffc7-412d-bad0-c42eac3d9f60_fixed.java
@@ -1,58 +1,45 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
 public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
     // initial parameter checks
     if (str == null) {
         return null;
     }
     if (str.length() == 0) {
         return StringUtils.EMPTY;
     }
 
     // if the lower value is greater than the length of the string,
     // set to the length of the string
     // if the upper value is -1 (i.e. no limit) or is greater
     // than the length of the string, set to the length of the string
     if (upper == -1 || upper > str.length()) {
         upper = str.length();
     }
     // if upper is less than lower, raise it to lower
     if (upper < lower) {
         upper = lower;
     }
 
     StringBuffer result = new StringBuffer();
     int index = StringUtils.indexOf(str, " ", lower);
+    boolean abbreviated = false;
+
     if (index == -1) {
+        // No space found, abbreviate to the upper limit
         result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
+        abbreviated = true;
     } else if (index > upper) {
+        // Space found but beyond upper limit, abbreviate to the upper limit
         result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+        abbreviated = true;
     } else {
+        // Space found within the upper limit, abbreviate to the space
         result.append(str.substring(0, index));
+    }
+
+    // Append the appendToEnd string if the string was abbreviated
+    if (abbreviated && upper != str.length()) {
         result.append(StringUtils.defaultString(appendToEnd));
     }
+
     return result.toString();
 }
\ No newline at end of file
