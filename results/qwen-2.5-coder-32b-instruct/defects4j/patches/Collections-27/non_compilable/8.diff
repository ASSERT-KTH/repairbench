diff --git a/tmp/3218672d-2c58-4d87-9916-616145798056_buggy.java b/tmp/10490409-88a1-461c-907d-656a5aa4bd19_fixed.java
index e69de29..43b9fb8 100644
--- a/tmp/3218672d-2c58-4d87-9916-616145798056_buggy.java
+++ b/tmp/10490409-88a1-461c-907d-656a5aa4bd19_fixed.java
@@ -0,0 +1,54 @@
+import java.io.*;
+import java.util.HashMap;
+import java.util.ArrayList;
+import java.util.Map;
+
+public class MultiValueMap<K, V> implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private final Map<K, ArrayList<V>> map;
+    private final Class<V> valueClass;
+
+    private MultiValueMap(Map<K, ArrayList<V>> map, Class<V> valueClass) {
+        this.map = map;
+        this.valueClass = valueClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, ArrayList<V>> map, Class<V> valueClass) {
+        return new MultiValueMap<>(map, valueClass);
+    }
+
+    private void writeObject(ObjectOutputStream oos) throws IOException {
+        oos.defaultWriteObject();
+    }
+
+    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        // Check if the valueClass is safe during deserialization
+        if (!isSafeClass(valueClass)) {
+            throw new UnsupportedOperationException("unsafe clazz accepted when de-serializing MultiValueMap");
+        }
+    }
+
+    private boolean isSafeClass(Class<?> clazz) {
+        // Define what classes are considered safe
+        return clazz.equals(ArrayList.class) || clazz.equals(HashMap.class) ||
+               clazz.equals(String.class) || // This is an example, adjust as needed
+               // Add other safe classes here
+               clazz.isPrimitive() || clazz.isArray();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) o;
+        return map.equals(that.map) && valueClass.equals(that.valueClass);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = map.hashCode();
+        result = 31 * result + valueClass.hashCode();
+        return result;
+    }
+}
\ No newline at end of file
