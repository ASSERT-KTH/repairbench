diff --git a/tmp/5bda6c39-07ca-42ec-9374-02e0d1153e0d_buggy.java b/tmp/88408c45-d558-4226-910c-61da5e7f8d19_fixed.java
index e69de29..d6e08f8 100644
--- a/tmp/5bda6c39-07ca-42ec-9374-02e0d1153e0d_buggy.java
+++ b/tmp/88408c45-d558-4226-910c-61da5e7f8d19_fixed.java
@@ -0,0 +1,51 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MultiValueMap<K, V> implements Serializable {
+    private Map<K, Object> map;
+    private Class<? extends V> valueClass;
+
+    private MultiValueMap(Map<K, Object> map, Class<? extends V> valueClass) {
+        this.map = map;
+        this.valueClass = valueClass;
+    }
+
+    public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, Object> map, Class<V> valueClass) {
+        return new MultiValueMap<>(map, valueClass);
+    }
+
+    private void writeObject(ObjectOutputStream oos) throws IOException {
+        oos.defaultWriteObject();
+    }
+
+    @SuppressWarnings("unchecked")
+    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        // Check if the deserialized valueClass is the same as expected
+        if (!valueClass.equals(((MultiValueMap<K, V>) ois.readObject()).valueClass)) {
+            throw new UnsupportedOperationException("unsafe clazz accepted when de-serializing MultiValueMap");
+        }
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) return true;
+        if (obj == null || getClass() != obj.getClass()) return false;
+
+        MultiValueMap<?, ?> that = (MultiValueMap<?, ?>) obj;
+
+        if (!map.equals(that.map)) return false;
+        return valueClass.equals(that.valueClass);
+    }
+
+    @Override
+    public int hashCode() {
+        int result = map.hashCode();
+        result = 31 * result + valueClass.hashCode();
+        return result;
+    }
+}
\ No newline at end of file
