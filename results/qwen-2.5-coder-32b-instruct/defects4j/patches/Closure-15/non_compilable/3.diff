diff --git a/tmp/656613b3-db90-4edf-bb24-f1d4e8026241_buggy.java b/tmp/0f431fba-6278-41e1-b57e-6ba01a128aae_fixed.java
index b56897c..05a89a8 100644
--- a/tmp/656613b3-db90-4edf-bb24-f1d4e8026241_buggy.java
+++ b/tmp/0f431fba-6278-41e1-b57e-6ba01a128aae_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check for for-in expression, which can have side effects
+    if (n.isForIn()) {
+        Node lhs = n.getFirstChild(); // left-hand side of the for-in
+        Node rhs = lhs.getNext(); // right-hand side of the for-in
+        if (NodeUtil.mayHaveSideEffects(rhs, compiler)) {
+            return true;
+        }
+    }
+
+    // We only care about calls to functions that pass one of the dependent variable to a non-side-effect free function.
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
