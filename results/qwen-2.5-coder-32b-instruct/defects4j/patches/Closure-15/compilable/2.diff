diff --git a/tmp/ebb4fa62-1090-49ec-8f46-a24e9c033081_buggy.java b/tmp/af0dba5b-2de7-4302-851a-22bfcd65728d_fixed.java
index b56897c..fab3468 100644
--- a/tmp/ebb4fa62-1090-49ec-8f46-a24e9c033081_buggy.java
+++ b/tmp/af0dba5b-2de7-4302-851a-22bfcd65728d_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check for the 'in' operator, which is a binary operator and can have side effects
+    if (n.isIn()) {
+        return true;
+    }
+
+    // Check for calls to functions that have side effects
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check for constructor calls that have side effects
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
+    // Recursively check children nodes
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
