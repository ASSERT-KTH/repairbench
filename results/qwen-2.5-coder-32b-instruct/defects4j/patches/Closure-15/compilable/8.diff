diff --git a/tmp/d77f9a13-467a-4325-89d5-29f1db71370f_buggy.java b/tmp/f57a670b-f0ec-45f5-ae04-f4967891f9e3_fixed.java
index b56897c..d1a54eb 100644
--- a/tmp/d77f9a13-467a-4325-89d5-29f1db71370f_buggy.java
+++ b/tmp/f57a670b-f0ec-45f5-ae04-f4967891f9e3_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check if the node is a call and has side effects
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check if the node is a new (constructor call) and has side effects
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check for specific expressions like 'in' that have side effects
+    if (n.isIn()) {
+        return true;
+    }
 
+    // Recursively apply to children
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
