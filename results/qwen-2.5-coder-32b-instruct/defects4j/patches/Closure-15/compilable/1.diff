diff --git a/tmp/6beccff9-27b8-4c06-abb2-96b466e2150e_buggy.java b/tmp/1630078f-8358-4963-8bed-97a82e85892d_fixed.java
index b56897c..650a321 100644
--- a/tmp/6beccff9-27b8-4c06-abb2-96b466e2150e_buggy.java
+++ b/tmp/1630078f-8358-4963-8bed-97a82e85892d_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check if the node is an IN operator, which has side effects in the context of for-in loop
+    if (n.isIn()) {
+        return true;
+    }
+
+    // Check if the node is a call to a function that has side effects
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check if the node is a new expression that has side effects
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
+    // Recursively check all children of the current node
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
