diff --git a/tmp/b53c4c2c-e5df-4f25-8df6-9870175e7a62_buggy.java b/tmp/f4eb4079-6014-43f0-bc96-972559a1d153_fixed.java
index e087f95..ae3e864 100644
--- a/tmp/b53c4c2c-e5df-4f25-8df6-9870175e7a62_buggy.java
+++ b/tmp/f4eb4079-6014-43f0-bc96-972559a1d153_fixed.java
@@ -1,53 +1,77 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Invalid length - must be at least 2 bytes long");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
+        boolean encounteredDigit = false;
+
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (stillPadding && (currentByte == (byte) ' ')) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Check for invalid characters
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+
+            encounteredDigit = true;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // If we encountered a digit, check for trailing space or NUL
+        if (encounteredDigit && buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+        }
+
+        // If the buffer is all NULs, return 0
+        if (!encounteredDigit && allNuls(buffer, offset, length)) {
+            return 0L;
         }
 
         return result;
     }
+
+    private static boolean allNuls(final byte[] buffer, final int offset, final int length) {
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int index, final byte currentByte) {
+        return "Invalid byte at index " + index + ": " + currentByte + " in buffer of length " + length + " starting at offset " + offset;
+    }
\ No newline at end of file
