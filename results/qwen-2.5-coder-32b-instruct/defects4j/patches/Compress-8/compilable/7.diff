diff --git a/tmp/fc5dcf86-6d63-4a40-8324-b26f7fd7aca5_buggy.java b/tmp/46cb92a3-c3c9-41e4-afb9-a617950e23f3_fixed.java
index e087f95..a6fe5c7 100644
--- a/tmp/fc5dcf86-6d63-4a40-8324-b26f7fd7aca5_buggy.java
+++ b/tmp/46cb92a3-c3c9-41e4-afb9-a617950e23f3_fixed.java
@@ -1,53 +1,61 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException(
+                    "Length must be at least 2 bytes: " + length);
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // Check for trailing NUL or space
+        for (int i = end - 1; i >= start && (buffer[i] == 0 || buffer[i] == (byte) ' '); i--) {
+            continue;
+        }
+        if (end > start && buffer[end - 1] != 0 && buffer[end - 1] != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+        }
+
         return result;
     }
\ No newline at end of file
