diff --git a/tmp/14b64a0b-fa26-4ac0-9ca8-c97bc8007415_buggy.java b/tmp/27443a52-667f-4d47-b188-8785f1259eb3_fixed.java
index e087f95..fa4d3a3 100644
--- a/tmp/14b64a0b-fa26-4ac0-9ca8-c97bc8007415_buggy.java
+++ b/tmp/27443a52-667f-4d47-b188-8785f1259eb3_fixed.java
@@ -1,53 +1,59 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for invalid characters
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
+        // CheckStyle:MagicNumber OFF
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    // Ensure there is a trailing space or NUL
+    for (int i = end - 1; i >= start; i--) {
+        if (buffer[i] == 0 || buffer[i] == (byte) ' ') {
             return result;
         }
+    }
+
+    throw new IllegalArgumentException("No trailing space or NUL found");
+}
\ No newline at end of file
