diff --git a/tmp/ab692403-8e39-493e-8fbd-bf6957e9b319_buggy.java b/tmp/27e9e85a-ea68-4f56-9a95-893789d10f7e_fixed.java
index e087f95..06ad4d5 100644
--- a/tmp/ab692403-8e39-493e-8fbd-bf6957e9b319_buggy.java
+++ b/tmp/27e9e85a-ea68-4f56-9a95-893789d10f7e_fixed.java
@@ -1,53 +1,59 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for trailing NUL or space
+        if (i == end - 1 && currentByte != (byte) ' ' && currentByte != 0) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+        }
+
+        // Check for invalid characters
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check if all bytes were NULs
+    if (stillPadding) {
+        return 0L;
     }
 
     return result;
 }
\ No newline at end of file
