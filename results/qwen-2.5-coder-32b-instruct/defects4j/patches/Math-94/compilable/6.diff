diff --git a/tmp/c2966f90-dc71-455b-a05e-1204ff181c16_buggy.java b/tmp/ab495c9e-7c5b-4df5-9d38-d4ec1434c75a_fixed.java
index ce55b5f..eb582e6 100644
--- a/tmp/c2966f90-dc71-455b-a05e-1204ff181c16_buggy.java
+++ b/tmp/ab495c9e-7c5b-4df5-9d38-d4ec1434c75a_fixed.java
@@ -1,63 +1,56 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      * 
      * @param u a non-zero number
      * @param v a non-zero number
      * @return the greatest common divisor, never zero
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        // Handle the case where one or both numbers are zero
+        if (u == 0) {
+            return Math.abs(v);
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
-        if (u > 0) {
-            u = -u;
-        } // make u negative
-        if (v > 0) {
-            v = -v;
-        } // make v negative
+        if (v == 0) {
+            return Math.abs(u);
+        }
+        // make u and v positive
+        u = Math.abs(u);
+        v = Math.abs(v);
         // B1. [Find power of 2]
         int k = 0;
         while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
                                                             // both even...
-            u /= 2;
-            v /= 2;
+            u >>= 1;
+            v >>= 1;
             k++; // cast out twos.
         }
         if (k == 31) {
             throw new ArithmeticException("overflow: gcd is 2^31");
         }
         // B2. Initialize: u and v have been divided by 2^k and at least
         // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+        while ((u & 1) == 0) { // while u is even...
+            u >>= 1;
+        }
         do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+            // B3. [Make v odd] if (v is even) {
+            while ((v & 1) == 0) { // while v is even..
+                v >>= 1;
             }
-            // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
+            // B4. [Test u,v] Set t = |u âˆ’ v|/2. Both u and v are odd. t is even.
+            if (u > v) {
+                u -= v; // replaced usubv
             } else {
-                v = t;
+                v -= u; // replaced vsubu
             }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+            // B5. [Halve t] Set u = t.
+        } while (u != 0);
+        // B6. Shift/return. gcd is (2**k) * v.
+        return v << k;
     }
\ No newline at end of file
