diff --git a/tmp/96d1bb6d-8d08-404e-8483-b1517998b162_buggy.java b/tmp/66a51902-8e62-466e-a0c9-96e03bae99a7_fixed.java
index bada2b6..4356a0d 100644
--- a/tmp/96d1bb6d-8d08-404e-8483-b1517998b162_buggy.java
+++ b/tmp/66a51902-8e62-466e-a0c9-96e03bae99a7_fixed.java
@@ -1,16 +1,22 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+    if (generic instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) generic;
+        Type actualTypeArgument = parameterizedType.getActualTypeArguments()[0];
+        if (actualTypeArgument instanceof Class) {
+            return (Class<?>) actualTypeArgument;
+        } else if (actualTypeArgument instanceof ParameterizedType) {
+            // If it's nested, return the raw type of the parameterized type
+            return (Class<?>) ((ParameterizedType) actualTypeArgument).getRawType();
+        }
     }
     
+    // If it's not a parameterized type or we can't determine the class, return Object.class
     return Object.class;
 }
\ No newline at end of file
