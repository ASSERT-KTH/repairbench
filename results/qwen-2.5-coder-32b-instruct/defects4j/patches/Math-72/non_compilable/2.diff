diff --git a/tmp/262bd0ca-86a6-4c45-9c2b-2220b2fd2454_buggy.java b/tmp/393a33bc-b1b5-49eb-9bc9-53cb11431000_fixed.java
index 0fe7b81..516858f 100644
--- a/tmp/262bd0ca-86a6-4c45-9c2b-2220b2fd2454_buggy.java
+++ b/tmp/393a33bc-b1b5-49eb-9bc9-53cb11431000_fixed.java
@@ -1,67 +1,135 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
+        verifyInterval(min, max);
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // check if initial is between min and max
+        if (initial < min || initial > max) {
+            throw MathRuntimeException.createIllegalArgumentException(
+                  ILLEGAL_ARGUMENT, initial, min, max);
         }
 
-        if (yMin * yMax > 0) {
+        // check if the interval brackets a root
+        if (yInitial * yMin < 0) {
+            return solve(f, min, initial, yMin, yInitial);
+        } else if (yInitial * yMax < 0) {
+            return solve(f, initial, max, yInitial, yMax);
+        } else if (yMin * yMax > 0) {
             throw MathRuntimeException.createIllegalArgumentException(
                   NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
         }
 
         // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+        return solve(f, min, initial, yMin, yInitial);
+    }
+
+    private double solve(final UnivariateRealFunction f,
+                         final double lo, final double hi,
+                         final double fLo, final double fHi)
+        throws MaxIterationsExceededException, FunctionEvaluationException {
+
+        double a = lo;
+        double fa = fLo;
+        double b = hi;
+        double fb = fHi;
+        double c = initial;
+        double fc = fInitial;
+
+        if (Math.abs(fc) < Math.abs(fb)) {
+            a = b;
+            b = c;
+            c = a;
+            fa = fb;
+            fb = fc;
+            fc = fa;
+        }
+
+        double d = b - c;
+        double e = d;
+
+        for (int i = 1; i <= maximalIterationCount; ++i) {
+            if (fa != fc && fb != fc) {
+                double s =
+                    (a * fb * fc / ((fa - fb) * (fa - fc)) +
+                     b * fa * fc / ((fb - fa) * (fb - fc)) +
+                     c * fa * fb / ((fc - fa) * (fc - fb)));
+                if (s >= Math.min(a, b) && s <= Math.max(a, b) &&
+                    Math.abs(s - c) < Math.abs(e / 2)) {
+                    d = e;
+                    e = s - c;
+                } else {
+                    e = (c >= (a + b) / 2) ? a - c : b - c;
+                    d = cN * e;
+                }
+            } else {
+                e = (c >= (a + b) / 2) ? a - c : b - c;
+                d = cN * e;
+            }
+
+            double u = (Math.abs(d) >= tol / 2) ?
+                       c + d :
+                       c + (d > 0 ? tol / 2 : -tol / 2);
+
+            double fu = f.value(u);
+
+            if (fu == 0) {
+                setResult(u, i);
+                return result;
+            }
+
+            if ((fu < 0 && fb < 0) || (fu > 0 && fb > 0)) {
+                a = b;
+                fa = fb;
+                b = c;
+                fb = fc;
+                c = u;
+                fc = fu;
+            } else {
+                if (Math.abs(fu) < Math.abs(fb)) {
+                    b = c;
+                    fb = fc;
+                    c = u;
+                    fc = fu;
+                }
+            }
+
+            if (Math.abs(e) > tol) {
+                tol = cN * Math.abs(u - c);
+            } else {
+                tol = tol / 2;
+            }
+
+            a = b;
+            fa = fb;
+            b = c;
+            fb = fc;
+            c = u;
+            fc = fu;
+        }
 
+        throw new MaxIterationsExceededException(maximalIterationCount, a, b);
     }
\ No newline at end of file
