diff --git a/tmp/4736584c-47ce-48c0-88b9-9786d6da2a95_buggy.java b/tmp/66676bde-d77b-4827-ba21-a836894df11f_fixed.java
index d6a560a..29a772a 100644
--- a/tmp/4736584c-47ce-48c0-88b9-9786d6da2a95_buggy.java
+++ b/tmp/66676bde-d77b-4827-ba21-a836894df11f_fixed.java
@@ -1,33 +1,44 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Use a set to track resolved types and avoid recursion
+    Set<JSType> resolvedTypes = new HashSet<>();
+    return resolveInternalHelper(t, enclosing, resolvedTypes);
+}
+
+private JSType resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolvedTypes) {
+    if (resolvedTypes.contains(this)) {
+        // Cycle detected
+        handleTypeCycle(t);
+        return this;
+    }
+
+    resolvedTypes.add(this);
+
+    // Resolution via registry is first to avoid triggering warnings built into resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
\ No newline at end of file
