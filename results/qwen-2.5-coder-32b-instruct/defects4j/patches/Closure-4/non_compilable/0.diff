diff --git a/tmp/d9696a87-cfc6-424a-a60f-41315d0ce599_buggy.java b/tmp/76b9ea95-352f-427c-86e6-afbe7954a9f0_fixed.java
index d6a560a..394f267 100644
--- a/tmp/d9696a87-cfc6-424a-a60f-41315d0ce599_buggy.java
+++ b/tmp/76b9ea95-352f-427c-86e6-afbe7954a9f0_fixed.java
@@ -1,33 +1,52 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
+    // Use a set to track the resolution path to detect cycles
+    Set<JSType> resolutionPath = new HashSet<>();
+    return resolveInternalHelper(t, enclosing, resolutionPath);
+}
+
+private JSType resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> resolutionPath) {
+    if (resolutionPath.contains(this)) {
+        handleTypeCycle(t);
+        return this;
+    }
+
+    resolutionPath.add(this);
+
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
+        resolutionPath.remove(this);
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
+    resolutionPath.remove(this);
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
+
+private void handleTypeCycle(ErrorReporter t) {
+    t.warning("Parse error. Cycle detected in inheritance chain of type " + getReferencedType().getDisplayName());
+}
\ No newline at end of file
