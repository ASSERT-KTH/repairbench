diff --git a/tmp/23ee0c05-477c-4f36-866e-0fb5dffff466_buggy.java b/tmp/ba7fb218-87a1-4080-b01e-918ab4a3cf45_fixed.java
index d6a560a..ddd79e2 100644
--- a/tmp/23ee0c05-477c-4f36-866e-0fb5dffff466_buggy.java
+++ b/tmp/ba7fb218-87a1-4080-b01e-918ab4a3cf45_fixed.java
@@ -1,33 +1,43 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check if the type is already being resolved to avoid infinite recursion
+    if (isResolved() || registry.isInResolution(this)) {
+        return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
+    // Mark the type as currently being resolved
+    registry.markInResolution(this);
+
+    try {
+        // First, try resolving via the registry
         boolean resolved = resolveViaRegistry(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         if (resolved) {
             super.resolveInternal(t, enclosing);
             finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+            return registry.isLastGeneration() ? getReferencedType() : this;
         }
 
+        // If resolution via registry failed, try resolving via properties
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    } finally {
+        // Unmark the type as being resolved
+        registry.unmarkInResolution(this);
+    }
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
