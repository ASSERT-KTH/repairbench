diff --git a/tmp/5d62681c-331c-45d4-8c9c-71f412b96ffb_buggy.java b/tmp/3bedfc83-bc07-4b8f-9256-4b5756aacf8f_fixed.java
index d6a560a..c6a7da1 100644
--- a/tmp/5d62681c-331c-45d4-8c9c-71f412b96ffb_buggy.java
+++ b/tmp/3bedfc83-bc07-4b8f-9256-4b5756aacf8f_fixed.java
@@ -1,33 +1,39 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
-    if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
-    }
-
+    // Use a set to track resolved types to detect cycles
+    Set<String> resolvedTypes = new HashSet<>();
+    if (!resolveInternalHelper(t, enclosing, resolvedTypes)) {
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
-
+    }
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
+
+private boolean resolveInternalHelper(ErrorReporter t, StaticScope<JSType> enclosing, Set<String> resolvedTypes) {
+    String typeName = getName();
+    if (resolvedTypes.contains(typeName)) {
+        handleTypeCycle(t);
+        return true; // Cycle detected
+    }
+    resolvedTypes.add(typeName);
+
+    boolean resolved = resolveViaRegistry(t, enclosing);
+    if (resolved) {
+        if (detectImplicitPrototypeCycle()) {
+            handleTypeCycle(t);
+        }
+        return true;
+    }
+
+    return false;
+}
\ No newline at end of file
