diff --git a/tmp/2f964529-3fdb-450d-825e-a515608b29b9_buggy.java b/tmp/4e11723b-0817-418f-9dc6-d1a0a9b1c943_fixed.java
index d6a560a..e6f0c54 100644
--- a/tmp/2f964529-3fdb-450d-825e-a515608b29b9_buggy.java
+++ b/tmp/4e11723b-0817-418f-9dc6-d1a0a9b1c943_fixed.java
@@ -1,33 +1,45 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // To avoid infinite recursion, we use a set to track resolving types.
+    Set<JSType> resolvingTypes = new HashSet<>();
+    if (!resolvingTypes.add(this)) {
+      // This type is already being resolved, indicating a cycle.
+      handleTypeCycle(t);
+      return this;
+    }
+
+    try {
+      // Resolution via registry is first to avoid triggering warnings.
       boolean resolved = resolveViaRegistry(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
       }
 
       if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
+      // Fallback to resolution via properties.
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this;
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+    } finally {
+      resolvingTypes.remove(this);
+    }
   }
\ No newline at end of file
