diff --git a/tmp/921ccb2b-d37b-4ffd-851f-37362eeb1008_buggy.java b/tmp/dc644ffd-fa81-4264-8712-0bfa97df10e8_fixed.java
index d6a560a..7706ec2 100644
--- a/tmp/921ccb2b-d37b-4ffd-851f-37362eeb1008_buggy.java
+++ b/tmp/dc644ffd-fa81-4264-8712-0bfa97df10e8_fixed.java
@@ -1,33 +1,40 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    // Use a visited set to prevent infinite recursion
+    Set<JSType> visitedTypes = new HashSet<>();
+
+    // Helper function to resolve types with cycle detection
+    JSType resolveTypeWithCycleDetection(JSType type, ErrorReporter t, StaticScope<JSType> enclosing, Set<JSType> visited) {
+        if (visited.contains(type)) {
             handleTypeCycle(t);
+            return type;
+        }
+        visited.add(type);
+
+        boolean resolved = type.resolveViaRegistry(t, enclosing);
+        if (type.detectImplicitPrototypeCycle()) {
+            type.handleTypeCycle(t);
         }
 
         if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+            type.super.resolveInternal(t, enclosing);
+            type.finishPropertyContinuations();
+            return type.registry.isLastGeneration() ?
+                type.getReferencedType() : type;
         }
 
-    resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+        type.resolveViaProperties(t, enclosing);
+        if (type.detectImplicitPrototypeCycle()) {
+            type.handleTypeCycle(t);
         }
 
-    super.resolveInternal(t, enclosing);
-    if (isResolved()) {
-      finishPropertyContinuations();
+        type.super.resolveInternal(t, enclosing);
+        if (type.isResolved()) {
+            type.finishPropertyContinuations();
         }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+        return type.registry.isLastGeneration() ?
+            type.getReferencedType() : type;
+    }
+
+    return resolveTypeWithCycleDetection(this, t, enclosing, visitedTypes);
 }
\ No newline at end of file
