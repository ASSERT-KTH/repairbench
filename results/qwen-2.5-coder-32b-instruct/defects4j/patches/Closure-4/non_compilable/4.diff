diff --git a/tmp/b09dd49a-2d03-49a8-b9ca-bf11b8cacf6b_buggy.java b/tmp/9b218676-fad9-4a7e-9c65-e30066c89d6a_fixed.java
index d6a560a..5cc0c68 100644
--- a/tmp/b09dd49a-2d03-49a8-b9ca-bf11b8cacf6b_buggy.java
+++ b/tmp/9b218676-fad9-4a7e-9c65-e30066c89d6a_fixed.java
@@ -1,33 +1,45 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return early after handling the cycle
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return early after handling the cycle
     }
 
+    if (resolved) {
+        super.resolveInternal(t, enclosing);
+        if (isResolved()) {
+            finishPropertyContinuations();
+        }
+        return registry.isLastGeneration() ?
+            getReferencedType() : this;
+    }
+
+    // If still not resolved, handle the situation appropriately
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
\ No newline at end of file
