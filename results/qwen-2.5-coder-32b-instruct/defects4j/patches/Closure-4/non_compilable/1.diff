diff --git a/tmp/054b3c12-abbf-44ba-a67b-88dc41fb6ed2_buggy.java b/tmp/970e6441-f6c1-4a74-a2dd-170960004329_fixed.java
index d6a560a..4035d25 100644
--- a/tmp/054b3c12-abbf-44ba-a67b-88dc41fb6ed2_buggy.java
+++ b/tmp/970e6441-f6c1-4a74-a2dd-170960004329_fixed.java
@@ -1,33 +1,61 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Use a stack to track the types being resolved to detect cycles
+    if (TypeResolver.containsCycle(enclosing, this)) {
+        handleTypeCycle(t);
+        return this;
+    }
+
+    // Add the current type to the resolution stack
+    TypeResolver.pushResolution(enclosing, this);
+
+    // Resolve via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
+        TypeResolver.popResolution(enclosing, this);
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
+    // Resolve via properties if not resolved via registry
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
+    
+    // Remove the current type from the resolution stack
+    TypeResolver.popResolution(enclosing, this);
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
+
+// Helper class to manage type resolution stacks
+static class TypeResolver {
+    private static final ThreadLocal<Set<Object>> resolutionStack = ThreadLocal.withInitial(HashSet::new);
+
+    static boolean containsCycle(StaticScope<JSType> enclosing, NamedType type) {
+        return resolutionStack.get().contains(type);
+    }
+
+    static void pushResolution(StaticScope<JSType> enclosing, NamedType type) {
+        resolutionStack.get().add(type);
+    }
+
+    static void popResolution(StaticScope<JSType> enclosing, NamedType type) {
+        resolutionStack.get().remove(type);
+    }
+}
\ No newline at end of file
