diff --git a/tmp/22ca0618-8a12-4770-adcd-22fe55861a4c_buggy.java b/tmp/28c8b14b-7417-4566-9188-8509671322b3_fixed.java
index 388771b..3d73a43 100644
--- a/tmp/22ca0618-8a12-4770-adcd-22fe55861a4c_buggy.java
+++ b/tmp/28c8b14b-7417-4566-9188-8509671322b3_fixed.java
@@ -1,37 +1,51 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+    copy.data = new java.util.ArrayList<>();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
-                }
-                catch (SeriesException e) {
+            } catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
+    // Recalculate minY and maxY for the copied series
+    copy.minY = Double.MAX_VALUE;
+    copy.maxY = Double.MIN_VALUE;
+    for (int index = 0; index < copy.data.size(); index++) {
+        TimeSeriesDataItem item = (TimeSeriesDataItem) copy.data.get(index);
+        Number y = item.getValue();
+        if (y != null) {
+            double value = y.doubleValue();
+            if (value < copy.minY) {
+                copy.minY = value;
+            }
+            if (value > copy.maxY) {
+                copy.maxY = value;
+            }
+        }
+    }
     return copy;
 }
\ No newline at end of file
