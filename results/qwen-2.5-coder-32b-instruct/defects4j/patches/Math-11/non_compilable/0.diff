diff --git a/tmp/7b5c7f17-741b-4d7e-8186-8bf500bbecd0_buggy.java b/tmp/68e95bcf-ae0b-4f44-ac59-d8decaad563a_fixed.java
index 51a0115..4ec25ff 100644
--- a/tmp/7b5c7f17-741b-4d7e-8186-8bf500bbecd0_buggy.java
+++ b/tmp/68e95bcf-ae0b-4f44-ac59-d8decaad563a_fixed.java
@@ -1,11 +1,33 @@
 /** {@inheritDoc} */
 public double density(final double[] vals) throws DimensionMismatchException {
     final int dim = getDimension();
     if (vals.length != dim) {
         throw new DimensionMismatchException(vals.length, dim);
     }
 
-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *
-            getExponentTerm(vals);
+    double det = getCovarianceMatrix().getDeterminant();
+    double normFactor = FastMath.pow(2 * FastMath.PI, -dim / 2.0) * FastMath.pow(det, -0.5);
+    double exponent = getExponentTerm(vals);
+
+    return normFactor * FastMath.exp(exponent);
+}
+
+private double getExponentTerm(final double[] vals) {
+    final double[] mean = getMeans();
+    final RealMatrix covarianceMatrix = getCovarianceMatrix();
+    final RealMatrix inverseCovarianceMatrix = covarianceMatrix.createInverse();
+
+    double[] centered = new double[vals.length];
+    for (int i = 0; i < vals.length; i++) {
+        centered[i] = vals[i] - mean[i];
+    }
+
+    RealMatrix centeredMatrix = MatrixUtils.createColumnRealMatrix(centered);
+    RealMatrix centeredMatrixTranspose = centeredMatrix.transpose();
+
+    double exponent = -0.5 * centeredMatrixTranspose.multiply(inverseCovarianceMatrix)
+                                               .multiply(centeredMatrix)
+                                               .getEntry(0, 0);
+
+    return exponent;
 }
\ No newline at end of file
