diff --git a/tmp/fa39170d-5bc4-4ba4-8d56-8406ad0c1ed7_buggy.java b/tmp/eb77a6b4-c319-4b76-abed-5626effb381d_fixed.java
index 66e3d01..79683d1 100644
--- a/tmp/fa39170d-5bc4-4ba4-8d56-8406ad0c1ed7_buggy.java
+++ b/tmp/eb77a6b4-c319-4b76-abed-5626effb381d_fixed.java
@@ -1,34 +1,40 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
         case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.ADD: // Include addition for string concatenation
+            Node left = val.getFirstChild();
+            Node right = val.getSecondChild();
+            return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+            Node child = val.getFirstChild();
+            // Negation or NOT of a boolean or number is fine, but not of a string or other types.
+            return child.getType() == Token.TRUE || child.getType() == Token.FALSE || child.getType() == Token.NUMBER;
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
     }
     return false;
 }
\ No newline at end of file
