diff --git a/tmp/1e7a0225-e808-497b-96d2-0a0f54bc5024_buggy.java b/tmp/cae21cbb-780d-470e-a1f1-ee88a1985b04_fixed.java
index 7116384..9d46301 100644
--- a/tmp/1e7a0225-e808-497b-96d2-0a0f54bc5024_buggy.java
+++ b/tmp/cae21cbb-780d-470e-a1f1-ee88a1985b04_fixed.java
@@ -1,39 +1,38 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
-            final long nextByte = in.read();
+            final int nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                return -1;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                bitsCached |= ((long) nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached |= (nextByte & 0xFF);
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached & ((1L << count) - 1);
             bitsCached >>>= count;
         } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsOut = (bitsCached >> (bitsCachedSize - count)) & ((1L << count) - 1);
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
