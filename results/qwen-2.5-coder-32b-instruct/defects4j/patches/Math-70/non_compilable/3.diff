diff --git a/tmp/0d7a43ee-a097-497b-ae5f-d1f78d3997fb_buggy.java b/tmp/fb5813b3-5eb4-4f37-96b7-f17a4e82f533_fixed.java
index d931bce..f790446 100644
--- a/tmp/0d7a43ee-a097-497b-ae5f-d1f78d3997fb_buggy.java
+++ b/tmp/fb5813b3-5eb4-4f37-96b7-f17a4e82f533_fixed.java
@@ -1,5 +1,44 @@
 /** {@inheritDoc} */
 public double solve(final UnivariateRealFunction f, double min, double max, double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    // Ensure the initial guess is within the specified range
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial guess is not within the range [min, max]");
+    }
+    
+    // Use the initial guess to help narrow down the interval
+    double a = min;
+    double b = max;
+    
+    if (f.value(a) * f.value(initial) <= 0) {
+        b = initial;
+    } else if (f.value(initial) * f.value(b) <= 0) {
+        a = initial;
+    } else {
+        throw new FunctionEvaluationException(initial, "Initial guess does not bracket a root");
+    }
+    
+    // Perform the bisection method
+    while (b - a > getAbsoluteAccuracy() && getIterations() < getMaxIterations()) {
+        double mid = a + (b - a) / 2.0;
+        double midValue = f.value(mid);
+        
+        if (midValue == 0.0) {
+            return mid; // Found an exact root
+        }
+        
+        if (f.value(a) * midValue < 0) {
+            b = mid;
+        } else {
+            a = mid;
+        }
+        
+        incrementIterations();
+    }
+    
+    if (getIterations() >= getMaxIterations()) {
+        throw new MaxIterationsExceededException(getMaxIterations(), a + (b - a) / 2.0);
+    }
+    
+    return a + (b - a) / 2.0;
 }
\ No newline at end of file
