diff --git a/tmp/6690fa32-6501-4313-b535-082ba5f01d2f_buggy.java b/tmp/066ccd5a-fc11-4f02-9494-b68628a3427d_fixed.java
index d931bce..7c7f631 100644
--- a/tmp/6690fa32-6501-4313-b535-082ba5f01d2f_buggy.java
+++ b/tmp/066ccd5a-fc11-4f02-9494-b68628a3427d_fixed.java
@@ -1,5 +1,43 @@
 /** {@inheritDoc} */
 public double solve(final UnivariateRealFunction f, double min, double max, double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    // Check that the initial value is within the interval [min, max]
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial value is not within the interval [min, max]");
+    }
+
+    // Initialize the iteration counter
+    int numIterations = 0;
+
+    // Perform the bisection method
+    while (max - min > getAbsoluteAccuracy()) {
+        if (++numIterations > getMaxIterations()) {
+            throw new MaxIterationsExceededException(getMaxIterations(), min, max);
+        }
+
+        double mid = 0.5 * (min + max);
+
+        // Evaluate the function at the boundaries and midpoint
+        double fMin = f.value(min);
+        double fMid = f.value(mid);
+        double fMax = f.value(max);
+
+        // Check for a root at the midpoint
+        if (fMid == 0.0) {
+            return mid;
+        }
+
+        // Determine the subinterval that contains the root
+        if (fMin * fMid < 0) {
+            max = mid;
+        } else if (fMid * fMax < 0) {
+            min = mid;
+        } else {
+            // This should not happen if f is continuous and sign changes occur
+            throw new FunctionEvaluationException(mid, "Function values at interval endpoints do not bracket a root");
+        }
+    }
+
+    // Return the midpoint of the final interval
+    return 0.5 * (min + max);
 }
\ No newline at end of file
