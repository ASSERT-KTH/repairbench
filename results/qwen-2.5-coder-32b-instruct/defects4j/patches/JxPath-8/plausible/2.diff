diff --git a/tmp/f3e3da4f-ea82-4d7e-b049-53411a3b2300_buggy.java b/tmp/12bf31f0-1421-49c2-91fa-6a8a3037d1d2_fixed.java
index 98d89dc..4a40b68 100644
--- a/tmp/f3e3da4f-ea82-4d7e-b049-53411a3b2300_buggy.java
+++ b/tmp/12bf31f0-1421-49c2-91fa-6a8a3037d1d2_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not equal to any value, including itself
+        if (ld == rd) {
+            return true; // Equal comparison with NaN should be false, but since ld == rd is false, we return true here to handle the special case
+        }
+        return false; // Any other comparison with NaN should be false
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
