diff --git a/tmp/05878679-dd7d-4d7f-be8c-7814fccc3e3b_buggy.java b/tmp/4b89f7ed-bf43-42ce-86d4-f7ca50e5e3c7_fixed.java
index 98d89dc..8d9156d 100644
--- a/tmp/05878679-dd7d-4d7f-be8c-7814fccc3e3b_buggy.java
+++ b/tmp/4b89f7ed-bf43-42ce-86d4-f7ca50e5e3c7_fixed.java
@@ -1,23 +1,33 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
-        right = reduce(right);
+    right = reduce(left);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (ld == rd) {
+            return true; // NaN == NaN should be true for equality check
+        } else {
+            return false; // Any other comparison with NaN should be false
+        }
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
