diff --git a/tmp/d210f45c-b92b-47d9-ba56-a01629fd4eec_buggy.java b/tmp/b275c846-3a31-449e-a5d5-b3fdf50e5731_fixed.java
index 98d89dc..85c9300 100644
--- a/tmp/d210f45c-b92b-47d9-ba56-a01629fd4eec_buggy.java
+++ b/tmp/b275c846-3a31-449e-a5d5-b3fdf50e5731_fixed.java
@@ -1,23 +1,39 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        switch (getOperator()) {
+            case EQUAL:
+                return false;
+            case LESS_THAN:
+            case LESS_THAN_OR_EQUAL:
+            case GREATER_THAN:
+            case GREATER_THAN_OR_EQUAL:
+                return false;
+            default:
+                throw new IllegalArgumentException("Unsupported operator for NaN comparison");
+        }
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
