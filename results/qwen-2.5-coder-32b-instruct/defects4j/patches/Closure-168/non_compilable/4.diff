diff --git a/tmp/6c76cfa6-79a7-44cd-b602-50006e4588d7_buggy.java b/tmp/765d83be-bde8-4ef9-ba67-e94914a9516f_fixed.java
index b12de99..f21fe1c 100644
--- a/tmp/6c76cfa6-79a7-44cd-b602-50006e4588d7_buggy.java
+++ b/tmp/765d83be-bde8-4ef9-ba67-e94914a9516f_fixed.java
@@ -1,52 +1,74 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
              NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isCall()) {
+    // Check the arguments of the function call to ensure type correctness
+    Node calledNode = n.getFirstChild();
+    Node argNode = calledNode.getNext();
+    if (calledNode.isGetProp() && calledNode.isQualifiedName()) {
+      String qualifiedName = calledNode.getQualifiedName();
+      JSType functionType = t.getTypeResolver().getType(calledNode);
+      if (functionType != null && functionType instanceof FunctionType) {
+        FunctionType function = (FunctionType) functionType;
+        Node paramList = function.getParametersNode();
+        int i = 0;
+        for (Node param = paramList.getFirstChild(), arg = argNode;
+             param != null && arg != null;
+             param = param.getNext(), arg = arg.getNext(), i++) {
+          JSType paramType = param.getJSType();
+          JSType argType = t.getTypeInfo().getType(arg);
+          if (paramType != null && argType != null && !paramType.isEquivalentTo(argType)) {
+            t.report(arg, TypeMismatch.WARNING, argType, paramType);
+          }
+        }
+      }
+    }
   }
 }
\ No newline at end of file
