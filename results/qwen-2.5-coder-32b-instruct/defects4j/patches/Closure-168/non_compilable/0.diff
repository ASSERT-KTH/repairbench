diff --git a/tmp/1bbcc974-f63e-4016-b17b-f29029164430_buggy.java b/tmp/e548cf9c-835e-4e49-8f66-93eae4a9ef08_fixed.java
index b12de99..cefa3b4 100644
--- a/tmp/1bbcc974-f63e-4016-b17b-f29029164430_buggy.java
+++ b/tmp/e548cf9c-835e-4e49-8f66-93eae4a9ef08_fixed.java
@@ -1,52 +1,77 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isCall()) {
+    // Check for type mismatches in function calls
+    Node functionNode = n.getFirstChild();
+    if (functionNode.isName() || functionNode.isGetProp()) {
+      String functionName = functionNode.getQualifiedName();
+      Var functionVar = t.getScope().getVar(functionName);
+      if (functionVar != null && functionVar.getType() != null) {
+        JSType functionType = functionVar.getType();
+        if (functionType.isFunctionType()) {
+          FunctionType functionFuncType = functionType.toMaybeFunctionType();
+          if (functionFuncType != null) {
+            Node args = n.getSecondChild();
+            Node params = functionFuncType.getParametersNode();
+            int i = 0;
+            for (Node arg = args; arg != null && i < params.getChildCount(); arg = arg.getNext(), i++) {
+              JSType paramType = params.getChildAtIndex(i).getJSType();
+              JSType argType = arg.getJSType();
+              if (argType != null && paramType != null && !paramType.isUnknownType() && !argType.isSubtype(paramType)) {
+                t.report(n, TypeValidator.INVALID_ARGUMENT_TYPE, paramType.toString(), argType.toString(), i + 1);
+              }
+            }
+          }
+        }
+      }
+    }
   }
 }
\ No newline at end of file
