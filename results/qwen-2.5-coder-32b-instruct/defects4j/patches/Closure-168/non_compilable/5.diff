diff --git a/tmp/a45b9539-7bf8-45d7-baa5-55f4695ee952_buggy.java b/tmp/1957103e-d021-4d49-a57e-72ab69f3580e_fixed.java
index b12de99..d274302 100644
--- a/tmp/a45b9539-7bf8-45d7-baa5-55f4695ee952_buggy.java
+++ b/tmp/1957103e-d021-4d49-a57e-72ab69f3580e_fixed.java
@@ -1,52 +1,81 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
     }
 
     if (n.isName() && NodeUtil.isLValue(n) &&
         // Be careful of bleeding functions, which create variables
         // in the inner scope, not the scope where the name appears.
         !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
         }
     } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
         NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode())
                     .recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
+    } else if (n.isCall()) {
+        // Check the arguments of the call to ensure they match the expected types
+        Node functionNode = n.getFirstChild();
+        Node argNode = functionNode.getNext();
+        if (functionNode != null && argNode != null) {
+            Var functionVar = t.getScope().getVar(functionNode.getQualifiedName());
+            if (functionVar != null) {
+                JSType functionType = functionVar.getType();
+                if (functionType != null && functionType.isFunctionType()) {
+                    FunctionType fnType = functionType.toMaybeFunctionType();
+                    if (fnType != null) {
+                        Node paramList = fnType.getParametersNode();
+                        Node param = paramList.getFirstChild();
+                        Node arg = argNode;
+                        int i = 0;
+                        while (param != null && arg != null) {
+                            JSType paramType = param.getJSType();
+                            JSType argType = arg.getJSType();
+                            if (paramType != null && argType != null && !paramType.isSubtype(argType)) {
+                                t.report(n, mismatchedTypesWarning, paramType, argType);
+                            }
+                            param = param.getNext();
+                            arg = arg.getNext();
+                            i++;
+                        }
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
