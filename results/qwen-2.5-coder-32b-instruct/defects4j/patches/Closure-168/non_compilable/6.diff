diff --git a/tmp/5ee3c9e2-304c-4949-929d-d39de9bf04f8_buggy.java b/tmp/dbcc8f24-0448-4787-ace9-190d43738c77_fixed.java
index b12de99..aa8b046 100644
--- a/tmp/5ee3c9e2-304c-4949-929d-d39de9bf04f8_buggy.java
+++ b/tmp/dbcc8f24-0448-4787-ace9-190d43738c77_fixed.java
@@ -1,52 +1,74 @@
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
     if (t.inGlobalScope()) {
         return;
     }
 
     if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
     }
 
     if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
     }
 
     if (n.isName() && NodeUtil.isLValue(n) &&
         // Be careful of bleeding functions, which create variables
         // in the inner scope, not the scope where the name appears.
         !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
 
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
         }
     } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
                NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
             Scope ownerScope = var.getScope();
             if (scope != ownerScope && ownerScope.isLocal()) {
                 data.get(ownerScope.getRootNode())
                     .recordEscapedQualifiedName(n.getQualifiedName());
             }
         }
+    } else if (n.isCall()) {
+        // Check function calls for type mismatches
+        Node funcNode = n.getFirstChild();
+        if (funcNode != null) {
+            FunctionType functionType = JSType.toMaybeFunctionType(funcNode.getJSType());
+            if (functionType != null) {
+                Node argNode = funcNode.getNext();
+                int paramIndex = 0;
+                for (Node param : functionType.getParameters()) {
+                    if (argNode != null) {
+                        JSType expectedType = param.getJSType();
+                        JSType actualType = argNode.getJSType();
+                        if (expectedType != null && actualType != null && !expectedType.isEquivalentTo(actualType)) {
+                            compiler.report(JSError.make(argNode, TypeCheck.PARAMETER_MISMATCH, expectedType.toString(), actualType.toString(), String.valueOf(paramIndex + 1)));
+                        }
+                        argNode = argNode.getNext();
+                        paramIndex++;
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
