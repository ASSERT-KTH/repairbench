diff --git a/tmp/6c56ed5a-3a28-4506-937d-9d8f4259d59d_buggy.java b/tmp/b6ffc309-6617-4f49-8a5f-f40fb803a460_fixed.java
index fecb896..ccaa001 100644
--- a/tmp/6c56ed5a-3a28-4506-937d-9d8f4259d59d_buggy.java
+++ b/tmp/b6ffc309-6617-4f49-8a5f-f40fb803a460_fixed.java
@@ -1,34 +1,34 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
+        char c = consume();
         if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
-                        start = pos;
+                    start = pos - 1; // Adjust start to include the opening character
             }
-                else if (c.equals(close))
+            else if (c == close)
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth > 0)
+            end = pos; // Update end to the current position
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    return (end >= 0) ? queue.substring(start + 1, end) : ""; // Adjust start to exclude the opening character
 }
\ No newline at end of file
