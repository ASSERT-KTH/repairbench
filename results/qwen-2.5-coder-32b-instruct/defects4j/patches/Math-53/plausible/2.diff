diff --git a/tmp/38db8309-3d4b-4e76-b8c7-3d321952944d_buggy.java b/tmp/b60a1e16-7907-4cf7-b556-4db469620915_fixed.java
index 181b1ac..17db44f 100644
--- a/tmp/38db8309-3d4b-4e76-b8c7-3d321952944d_buggy.java
+++ b/tmp/b60a1e16-7907-4cf7-b556-4db469620915_fixed.java
@@ -1,23 +1,30 @@
     /**
      * Return the sum of this complex number and the given complex number.
      * <p>
      * Uses the definitional formula
      * <pre>
      * (a + bi) + (c + di) = (a+c) + (b+d)i
      * </pre></p>
      * <p>
      * If either this or <code>rhs</code> has a NaN value in either part,
      * {@link #NaN} is returned; otherwise Infinite and NaN values are
      * returned in the parts of the result according to the rules for
      * {@link java.lang.Double} arithmetic.</p>
      *
      * @param rhs the other complex number
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        
+        double realSum = real + rhs.getReal();
+        double imaginarySum = imaginary + rhs.getImaginary();
+        
+        if (Double.isNaN(realSum) || Double.isNaN(imaginarySum)) {
+            return NaN;
+        }
+        
+        return createComplex(realSum, imaginarySum);
     }
\ No newline at end of file
