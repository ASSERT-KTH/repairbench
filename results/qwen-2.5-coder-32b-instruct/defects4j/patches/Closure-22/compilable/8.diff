diff --git a/tmp/9008f9bf-9fd0-49e1-8f57-ca617dbdfb71_buggy.java b/tmp/236f8e5b-9b86-4141-af22-2920a133f78d_fixed.java
index 7f61a8c..4d41217 100644
--- a/tmp/9008f9bf-9fd0-49e1-8f57-ca617dbdfb71_buggy.java
+++ b/tmp/236f8e5b-9b86-4141-af22-2920a133f78d_fixed.java
@@ -1,73 +1,88 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
     if (n.isEmpty() ||
         n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (parent.getType() == Token.COMMA) {
         Node gramps = parent.getParent();
         if (gramps.isCall() && parent == gramps.getFirstChild()) {
             if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
                 return;
             }
         }
 
         // This no-op statement was there so that JSDoc information could
         // be attached to the name. This check should not complain about it.
         if (n == parent.getLastChild()) {
             for (Node an : parent.getAncestors()) {
                 int ancestorType = an.getType();
                 if (ancestorType == Token.COMMA)
                     continue;
                 if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
                     return;
                 else
                     break;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
         if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
                n == parent.getFirstChild().getNext().getNext())) {
         } else {
             return;
         }
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
     if (!isResultUsed &&
         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
         if (n.isQualifiedName() && n.getJSDocInfo() != null) {
             return;
         } else if (n.isExprResult()) {
             return;
         }
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                 "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
         // TODO(johnlenz): determine if it is necessary to
         // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
+
+    // Check for useless code in comma expressions
+    if (parent.getType() == Token.COMMA && n != parent.getLastChild()) {
+        boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());
+        if (!hasSideEffects) {
+            String msg = "This code lacks side-effects. Is there a bug?";
+            if (n.isString()) {
+                msg = "Is there a missing '+' on the previous line?";
+            }
+
+            t.getCompiler().report(
+                t.makeError(n, level, USELESS_CODE_ERROR, msg));
+            problemNodes.add(n);
+        }
+    }
 }
\ No newline at end of file
