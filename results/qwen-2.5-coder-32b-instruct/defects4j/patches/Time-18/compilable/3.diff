diff --git a/tmp/8ea0d8a4-22ed-4954-8b9d-3f567610f568_buggy.java b/tmp/fd62166d-2f8f-470a-9e51-b5d88c131ee8_fixed.java
index be2af16..7b95698 100644
--- a/tmp/8ea0d8a4-22ed-4954-8b9d-3f567610f568_buggy.java
+++ b/tmp/fd62166d-2f8f-470a-9e51-b5d88c131ee8_fixed.java
@@ -1,29 +1,53 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Determine if the date is before the cutover
     long instant;
+    if (iJulianChronology.getYear(iCutoverMillis) > year ||
+        (iJulianChronology.getYear(iCutoverMillis) == year &&
+         (iJulianChronology.getMonthOfYear(iCutoverMillis) > monthOfYear ||
+          (iJulianChronology.getMonthOfYear(iCutoverMillis) == monthOfYear &&
+           iJulianChronology.getDayOfMonth(iCutoverMillis) >= dayOfMonth)))) {
+        // Use Julian calendar
+        instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } else {
+        // Use Gregorian calendar
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
+
+    // Check for the cutover gap
+    if (instant < iCutoverMillis && iJulianChronology.isLeapYear(year)) {
+        // Check if the date is in the leap year period of the Julian calendar
+        if (monthOfYear == 2 && dayOfMonth == 29) {
+            // Use Julian calendar for February 29 in a leap year
+            instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        }
+    }
+
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
