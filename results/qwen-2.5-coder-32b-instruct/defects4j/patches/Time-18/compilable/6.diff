diff --git a/tmp/8395d9d0-1929-4221-9f28-acd94652a4b5_buggy.java b/tmp/6adbc38d-6eaf-4842-a5a1-c5d8eda1e58a_fixed.java
index be2af16..343a379 100644
--- a/tmp/8395d9d0-1929-4221-9f28-acd94652a4b5_buggy.java
+++ b/tmp/6adbc38d-6eaf-4842-a5a1-c5d8eda1e58a_fixed.java
@@ -1,29 +1,34 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
     // Assume date is Gregorian.
     long instant;
     instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
         // Maybe it's Julian.
+        try {
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // If the date is invalid in Julian, throw an exception
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
