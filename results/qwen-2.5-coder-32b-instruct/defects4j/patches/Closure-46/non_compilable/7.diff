diff --git a/tmp/cd1a1310-fd4f-4e6d-a1dd-eca5dcb05ef1_buggy.java b/tmp/fe4e681b-2cf7-48e4-b05b-ece369469a2f_fixed.java
index 46817a7..3bd81de 100644
--- a/tmp/cd1a1310-fd4f-4e6d-a1dd-eca5dcb05ef1_buggy.java
+++ b/tmp/fe4e681b-2cf7-48e4-b05b-ece369469a2f_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+    if (!this.isRecordType()) {
+        return super.getLeastSupertype(that);
+    }
+    RecordType thisRecord = this.toMaybeRecordType();
+    RecordType thatRecord = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(thisRecord.getProperties().keySet());
+    allProperties.addAll(thatRecord.getProperties().keySet());
+    for (String property : allProperties) {
+        JSType thisPropType = thisRecord.getPropertyType(property);
+        JSType thatPropType = thatRecord.getPropertyType(property);
+        if (thisPropType != null && thatPropType != null) {
+            builder.addProperty(property, thisPropType.getLeastSupertype(thatPropType), null);
+        } else if (thisPropType != null) {
+            builder.addProperty(property, thisPropType, null);
+        } else {
+            builder.addProperty(property, thatPropType, null);
         }
     }
     return builder.build();
 }
\ No newline at end of file
