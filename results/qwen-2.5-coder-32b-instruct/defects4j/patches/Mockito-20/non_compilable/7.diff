diff --git a/tmp/abb249ac-72fd-4602-80ef-3cb4b1a09870_buggy.java b/tmp/ea2e9a62-6800-46aa-874d-10a3c0b328ff_fixed.java
index f9a9b5b..cfaed9e 100644
--- a/tmp/abb249ac-72fd-4602-80ef-3cb4b1a09870_buggy.java
+++ b/tmp/ea2e9a62-6800-46aa-874d-10a3c0b328ff_fixed.java
@@ -1,30 +1,62 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
+            // Handle constructor settings
+            Constructor<?> constructor = getConstructor(mockedProxyType, settings);
+            if (constructor != null) {
+                Object[] args = getConstructorArguments(constructor, settings);
+                mockInstance = (T) constructor.newInstance(args);
+            } else {
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
+
+    private Constructor<?> getConstructor(Class<?> clazz, MockCreationSettings<?> settings) throws NoSuchMethodException {
+        if (settings.getConstructorArgs().length > 0) {
+            Class<?>[] parameterTypes = settings.getConstructorArgTypes();
+            return clazz.getConstructor(parameterTypes);
+        }
+        if (isInnerClass(clazz)) {
+            return clazz.getDeclaredConstructor(settings.getOuterClass().getClass());
+        }
+        return clazz.getDeclaredConstructor();
+    }
+
+    private Object[] getConstructorArguments(Constructor<?> constructor, MockCreationSettings<?> settings) {
+        if (settings.getConstructorArgs().length > 0) {
+            return settings.getConstructorArgs();
+        }
+        if (constructor.getParameterCount() == 1 && isInnerClass(constructor.getDeclaringClass())) {
+            return new Object[]{settings.getOuterInstance()};
+        }
+        return new Object[0];
+    }
+
+    private boolean isInnerClass(Class<?> clazz) {
+        return clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers());
+    }
\ No newline at end of file
