diff --git a/tmp/127c1ef8-fa31-4a3f-b92b-8eb1845afcb5_buggy.java b/tmp/6b347bd0-3c92-45e9-a7f2-a7a349ba9c25_fixed.java
index f9a9b5b..ced3cd9 100644
--- a/tmp/127c1ef8-fa31-4a3f-b92b-8eb1845afcb5_buggy.java
+++ b/tmp/6b347bd0-3c92-45e9-a7f2-a7a349ba9c25_fixed.java
@@ -1,30 +1,45 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+    
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+    
     T mockInstance = null;
     try {
+        if (settings.getConstructorArgs() != null || settings.getOuterInstance() != null) {
+            // Use constructor-based instantiation if constructor args or outer instance is provided
+            mockInstance = constructorInstantiator.newInstance(mockedProxyType, settings.getConstructorArgs(), settings.getOuterInstance());
+        } else {
+            // Otherwise, use the default class instantiation
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                "  instance creation by : " + (settings.getConstructorArgs() != null ? constructorInstantiator.getClass().getSimpleName() : classInstantiator.getClass().getSimpleName()),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (Exception e) {
+        if (e instanceof org.mockito.internal.creation.instance.InstantiationException) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'", e);
+        } else if (settings.getOuterInstance() != null) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'. Please ensure that the outer instance has correct type and that the target class has a 0-arg constructor.", e);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getName() + "'", e);
+        }
     }
 }
\ No newline at end of file
