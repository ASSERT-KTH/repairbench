diff --git a/tmp/fab76b90-5fd0-4820-8cb8-ac63ad0e5814_buggy.java b/tmp/d9d4f670-014f-42cf-8165-6dff293c0b15_fixed.java
index 0f439b3..d6b1648 100644
--- a/tmp/fab76b90-5fd0-4820-8cb8-ac63ad0e5814_buggy.java
+++ b/tmp/d9d4f670-014f-42cf-8165-6dff293c0b15_fixed.java
@@ -1,38 +1,30 @@
-    /**
-     * Reads bytes from the current tar archive entry.
-     *
-     * This method is aware of the boundaries of the current
-     * entry in the archive and will deal with them as if they
-     * were this stream's start and EOF.
-     *
-     * @param buf The buffer into which to place bytes read.
-     * @param offset The offset at which to place bytes read.
-     * @param numToRead The number of bytes to read.
-     * @return The number of bytes read, or -1 at EOF.
-     * @throws IOException on error
-     */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
     numToRead = Math.min(numToRead, available());
 
     totalRead = is.read(buf, offset, numToRead);
     count(totalRead);
 
     if (totalRead == -1) {
         hasHitEOF = true;
     } else {
         entryOffset += totalRead;
     }
 
+    // Check if the entry is truncated
+    if (totalRead < numToRead && entryOffset >= entrySize) {
+        throw new IOException("Truncated tar archive entry");
+    }
+
     return totalRead;
 }
\ No newline at end of file
