diff --git a/tmp/94b54795-2491-49be-993b-41b3974c11d5_buggy.java b/tmp/0edb13d3-c975-4441-9643-ca5d216e5d34_fixed.java
index 6fecc90..54b6978 100644
--- a/tmp/94b54795-2491-49be-993b-41b3974c11d5_buggy.java
+++ b/tmp/0edb13d3-c975-4441-9643-ca5d216e5d34_fixed.java
@@ -1,7 +1,48 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
     } else {
       return mayBeStringHelper(n);
     }
   }
+
+  private static boolean mayBeStringHelper(Node n) {
+    switch (n.getToken()) {
+      case STRING:
+        return true;
+      case NAME:
+        // If the name is a known string variable, return true
+        String name = n.getString();
+        // Here you would typically check if the variable is known to be a string
+        // For simplicity, we assume that if it's not a built-in, it might be a string
+        return !TokenStream.isBuiltIn(name);
+      case NUMBER:
+      case TRUE:
+      case FALSE:
+      case NULL:
+      case THIS:
+      case REGEXP:
+        return false;
+      case ADD:
+        // If any operand is a string, the result is a string
+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+          if (mayBeString(child, true)) {
+            return true;
+          }
+        }
+        return false;
+      case OR:
+      case AND:
+      case HOOK:
+        // For logical operations and ternary, check if any branch could be a string
+        for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+          if (mayBeString(child, true)) {
+            return true;
+          }
+        }
+        return false;
+      default:
+        // For other operations, we assume they don't result in a string
+        return false;
+    }
+  }
\ No newline at end of file
