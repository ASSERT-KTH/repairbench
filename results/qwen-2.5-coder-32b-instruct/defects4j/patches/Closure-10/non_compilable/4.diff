diff --git a/tmp/1651410b-1669-4510-b489-9acb47550460_buggy.java b/tmp/7d1bb70e-6c8f-4a57-9c31-35ae92984f1f_fixed.java
index 6fecc90..bbdaf6f 100644
--- a/tmp/1651410b-1669-4510-b489-9acb47550460_buggy.java
+++ b/tmp/7d1bb70e-6c8f-4a57-9c31-35ae92984f1f_fixed.java
@@ -1,7 +1,51 @@
 static boolean mayBeString(Node n, boolean recurse) {
   if (recurse) {
-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
+    // Check if all sub-nodes can be considered as strings
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (!mayBeString(child, true)) {
+        return false;
+      }
+    }
+    return true;
   } else {
     return mayBeStringHelper(n);
   }
 }
+
+private static boolean mayBeStringHelper(Node n) {
+  // Check the node itself to see if it can be considered as a string
+  switch (n.getToken()) {
+    case STRING:
+      return true;
+    case NAME:
+      // Assume variables can hold strings, though this might not always be true
+      return true;
+    case TRUE:
+    case FALSE:
+    case THIS:
+    case NULL:
+    case NUMBER:
+      return false;
+    case ADD:
+      // If one operand is a string, the result can be a string
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (mayBeString(child, false)) {
+          return true;
+        }
+      }
+      return false;
+    case OR:
+    case AND:
+    case HOOK:
+      // For conditional and logical expressions, check both sides
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        if (mayBeString(child, true)) {
+          return true;
+        }
+      }
+      return false;
+    default:
+      // For other operations, assume they do not result in a string
+      return false;
+  }
+}
\ No newline at end of file
