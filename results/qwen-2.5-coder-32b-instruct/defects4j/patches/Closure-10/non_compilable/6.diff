diff --git a/tmp/d588f709-b067-4c9a-82f6-a6e6042b944d_buggy.java b/tmp/e52d8cf7-c6b8-46ea-83f4-6cd0cf984cf7_fixed.java
index 6fecc90..e6f80ed 100644
--- a/tmp/d588f709-b067-4c9a-82f6-a6e6042b944d_buggy.java
+++ b/tmp/e52d8cf7-c6b8-46ea-83f4-6cd0cf984cf7_fixed.java
@@ -1,7 +1,30 @@
   static boolean mayBeString(Node n, boolean recurse) {
     if (recurse) {
       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);
     } else {
+      switch (n.getToken()) {
+        case NAME:
+        case STRING:
+          return true;
+        case NUMBER:
+        case TRUE:
+        case FALSE:
+        case NULL:
+        case THIS:
+        case VOID:
+        case REGEXP:
+          return false;
+        case ADD:
+          // If either child of an ADD node may be a string, the result may be a string.
+          return mayBeString(n.getFirstChild(), false) || mayBeString(n.getSecondChild(), false);
+        case OR:
+        case AND:
+        case HOOK:
+          // For OR, AND, and HOOK (ternary) nodes, we need to check both possible paths.
+          return mayBeString(n.getFirstChild(), false) || mayBeString(n.getSecondChild(), false) ||
+                 (n.hasMoreThanOneChild() && mayBeString(n.getLastChild(), false));
+        default:
           return mayBeStringHelper(n);
       }
     }
+  }
\ No newline at end of file
