diff --git a/tmp/0318884e-4956-4acc-b081-0c993e8b1109_buggy.java b/tmp/a7b40d69-8f33-4d6c-a66b-12bec728fedb_fixed.java
index 6e45f80..34412f4 100644
--- a/tmp/0318884e-4956-4acc-b081-0c993e8b1109_buggy.java
+++ b/tmp/a7b40d69-8f33-4d6c-a66b-12bec728fedb_fixed.java
@@ -1,21 +1,39 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
-        if (!clazz.isAssignableFrom(requestedType)) {
+      if (clazz.isAssignableFrom(requestedType)) {
+        // Create a new TypeAdapter that wraps the original typeAdapter
+        // and performs the necessary casting.
+        return new TypeAdapter<T2>() {
+          @Override
+          public void write(JsonWriter out, T2 value) throws IOException {
+            typeAdapter.write(out, (T1) value);
+          }
+
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            T1 tempValue = typeAdapter.read(in);
+            if (requestedType.isInstance(tempValue)) {
+              return (T2) tempValue;
+            } else {
+              throw new JsonSyntaxException("Expected a " + requestedType.getName() + " but was " + tempValue.getClass().getName());
+            }
+          }
+        };
+      }
       return null;
     }
-        return (TypeAdapter<T2>) typeAdapter;
 
-      }
-      @Override public String toString() {
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
