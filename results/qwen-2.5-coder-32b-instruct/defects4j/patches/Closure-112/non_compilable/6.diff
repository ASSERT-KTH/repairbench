diff --git a/tmp/432fafcf-285f-4ee6-b4c4-b97bd705d14c_buggy.java b/tmp/76cde68f-c1f6-4678-b795-4195fb927896_fixed.java
index 63641d0..5507ea6 100644
--- a/tmp/432fafcf-285f-4ee6-b4c4-b97bd705d14c_buggy.java
+++ b/tmp/76cde68f-c1f6-4678-b795-4195fb927896_fixed.java
@@ -1,33 +1,45 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // If we couldn't infer all template types, try to use the return type or other context clues
+  if (inferred.size() < keys.size()) {
+    inferTemplateTypesFromReturnType(n, fnType, inferred);
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
+
+private void inferTemplateTypesFromReturnType(Node callNode, FunctionType functionType, Map<TemplateType, JSType> inferred) {
+  Node callTarget = callNode.getFirstChild();
+  JSType returnType = callNode.getJSType();
+  if (returnType != null) {
+    for (TemplateType key : functionType.getTemplateTypeMap().getTemplateKeys()) {
+      if (!inferred.containsKey(key)) {
+        JSType inferredType = key.getBound().isUnknownType() ? returnType : key.getBound();
+        inferred.put(key, inferredType);
+      }
+    }
+  }
+}
\ No newline at end of file
