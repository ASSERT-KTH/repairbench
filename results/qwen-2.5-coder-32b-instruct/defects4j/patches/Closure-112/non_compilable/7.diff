diff --git a/tmp/a4487380-1bbd-4699-8081-5b4fcbc4986f_buggy.java b/tmp/0b85dc90-ca4c-4ffb-83be-af9e79f21daf_fixed.java
index 63641d0..3abff77 100644
--- a/tmp/a4487380-1bbd-4699-8081-5b4fcbc4986f_buggy.java
+++ b/tmp/0b85dc90-ca4c-4ffb-83be-af9e79f21daf_fixed.java
@@ -1,33 +1,37 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // If we couldn't infer all template types, try to use the return type
+  if (!inferred.keySet().containsAll(keys)) {
+    JSType returnType = n.getJSType();
+    if (returnType != null && returnType.isTemplatizedType()) {
+      TemplateTypeReplacer returnReplacer = new TemplateTypeReplacer(
+          registry, ((TemplatizedType) returnType).getTemplateTypes());
+      inferred.putAll(returnReplacer.getReplacements());
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
