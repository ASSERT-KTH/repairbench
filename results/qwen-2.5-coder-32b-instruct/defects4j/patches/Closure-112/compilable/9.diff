diff --git a/tmp/a5f29774-1ed1-4c99-9d7f-c7e15b6386fb_buggy.java b/tmp/3c3b34b2-0f7b-4448-9d24-8e3648069ac9_fixed.java
index 63641d0..7a701ad 100644
--- a/tmp/a5f29774-1ed1-4c99-9d7f-c7e15b6386fb_buggy.java
+++ b/tmp/3c3b34b2-0f7b-4448-9d24-8e3648069ac9_fixed.java
@@ -1,33 +1,40 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+ * actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // If no types were inferred, we cannot proceed with replacement
+    if (inferred.isEmpty()) {
+        return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    JSType returnType = replacementFnType.getReturnType();
+
+    // Ensure that the return type is set correctly on the call node
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
 }
\ No newline at end of file
