diff --git a/tmp/9226e6e5-846f-487f-9f20-f8ec66cf61e9_buggy.java b/tmp/8d468270-3668-4e06-b9d2-0374e644fa4c_fixed.java
index 63641d0..8d38b76 100644
--- a/tmp/9226e6e5-846f-487f-9f20-f8ec66cf61e9_buggy.java
+++ b/tmp/8d468270-3668-4e06-b9d2-0374e644fa4c_fixed.java
@@ -1,33 +1,41 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
         return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Validate that the inferred types are compatible with the function's template types
+    boolean validInference = true;
+    for (TemplateType key : keys) {
+        JSType inferredType = inferred.get(key);
+        if (inferredType == null || inferredType.isUnknownType()) {
+            validInference = false;
+            break;
+        }
+    }
+
+    if (!validInference) {
+        return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
 }
\ No newline at end of file
