diff --git a/tmp/c6bc8fda-0718-41ea-b58b-59a7862c11ff_buggy.java b/tmp/3daf48a5-db00-44fa-a6a0-8e43b7b19c70_fixed.java
index e1cbe77..1143f8e 100644
--- a/tmp/c6bc8fda-0718-41ea-b58b-59a7862c11ff_buggy.java
+++ b/tmp/3daf48a5-db00-44fa-a6a0-8e43b7b19c70_fixed.java
@@ -1,196 +1,173 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
     // Need to deal with all possible hex prefixes here
-        final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
+    final String[] hexPrefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
-        for(final String pfx : hex_prefixes) {
+    for (final String pfx : hexPrefixes) {
         if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+            pfxLen = pfx.length();
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
-            final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
-                return createBigInteger(str);
+        final String hexNumberStr = str.substring(pfxLen);
+        final boolean isNegative = str.startsWith("-");
+
+        // Check if the hex number is negative
+        final String unsignedHexNumberStr = isNegative ? hexNumberStr.substring(1) : hexNumberStr;
+        final int hexDigits = unsignedHexNumberStr.length();
+
+        try {
+            if (hexDigits > 16 || (hexDigits == 16 && (unsignedHexNumberStr.compareTo("7FFFFFFFFFFFFFFF") > 0))) {
+                return new BigInteger(str);
+            } else if (hexDigits > 8 || (hexDigits == 8 && (unsignedHexNumberStr.compareTo("7FFFFFFF") > 0))) {
+                return Long.parseLong(isNegative ? "-" + unsignedHexNumberStr : unsignedHexNumberStr, 16);
+            } else {
+                return Integer.parseInt(isNegative ? "-" + unsignedHexNumberStr : unsignedHexNumberStr, 16);
             }
-            if (hexDigits > 8) { // too many for an int
-                return createLong(str);
+        } catch (final NumberFormatException nfe) {
+            throw new NumberFormatException("Invalid hex number: " + str);
         }
-            return createInteger(str);
     }
+
     final char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
     final int decPos = str.indexOf('.');
     final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
     // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
     // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
 
         if (expPos > -1) { // there is an exponent
             if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
         numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
     } else {
         if (expPos > -1) {
             if (expPos > str.length()) { // prevents double exponent causing IOOBE
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
     if (!Character.isDigit(lastChar) && lastChar != '.') {
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
         //Requesting a specific type..
         final String numeric = str.substring(0, str.length() - 1);
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                if (dec == null && exp == null && (isDigits(numeric) || (numeric.charAt(0) == '-' && isDigits(numeric.substring(1))))) {
                     try {
                         return createLong(numeric);
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // Too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
                     final Float f = NumberUtils.createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         //If it's too big for a float or the float value = 0 and the string
                         //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
 
                 } catch (final NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
             case 'd':
             case 'D':
                 try {
                     final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (final NumberFormatException nfe) { // NOPMD
                     // ignore the bad number
                 }
                 try {
                     return createBigDecimal(numeric);
                 } catch (final NumberFormatException e) { // NOPMD
                     // ignore the bad number
                 }
                 //$FALL-THROUGH$
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
 
         }
     }
     //User doesn't have a preference on the return type, so let's start
     //small and go from there...
     if (expPos > -1 && expPos < str.length() - 1) {
         exp = str.substring(expPos + 1, str.length());
     } else {
         exp = null;
     }
     if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+        //Must be an Integer, Long, BigInteger
         try {
             return createInteger(str);
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         try {
             return createLong(str);
         } catch (final NumberFormatException nfe) { // NOPMD
             // ignore the bad number
         }
         return createBigInteger(str);
     }
 
     //Must be a Float, Double, BigDecimal
     final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
     try {
         if (numDecimals <= 7) { // If number has 7 or fewer digits past the decimal point then make it a float
             final Float f = createFloat(str);
             if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                 return f;
             }
         }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
     try {
         if (numDecimals <= 16) { // If number has between 8 and 16 digits past the decimal point then make it a double
             final Double d = createDouble(str);
             if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                 return d;
             }
         }
     } catch (final NumberFormatException nfe) { // NOPMD
         // ignore the bad number
     }
 
     return createBigDecimal(str);
 }
\ No newline at end of file
