diff --git a/tmp/b2915f4e-2593-4c18-87a2-c9a58871e0a0_buggy.java b/tmp/e87da1cb-d471-4e22-ad64-e57fb1c6ed17_fixed.java
index ef65dd9..6b95122 100644
--- a/tmp/b2915f4e-2593-4c18-87a2-c9a58871e0a0_buggy.java
+++ b/tmp/e87da1cb-d471-4e22-ad64-e57fb1c6ed17_fixed.java
@@ -1,92 +1,84 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                      Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
-    int foldedSize = 0;
+  boolean canFold = true;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
-        if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = new StringBuilder();
-        }
-        foldedSize += InlineCostEstimator.getCost(elem);
-        arrayFoldedChildren.add(elem);
+      canFold = false;
+      break;
     }
     elem = elem.getNext();
   }
 
-    if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(Node.newString(sb.toString()));
-    }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
-
+  if (canFold) {
+    String foldedString = sb.toString();
+    int foldedSize = foldedString.length() + 2; // +2 for the quotes
     int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        parent.replaceChild(n, emptyStringNode);
-        break;
 
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString(""), foldedStringNode);
-          foldedStringNode = replacement;
-        }
+    if (foldedSize < originalSize) {
+      Node foldedStringNode = Node.newString(foldedString);
       parent.replaceChild(n, foldedStringNode);
-        break;
+      t.getCompiler().reportCodeChange();
+    }
+  } else {
+    // If we can't fully fold, we can still optimize by removing empty strings
+    List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    sb = new StringBuilder();
+    elem = arrayNode.getFirstChild();
 
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
+    while (elem != null) {
+      if (NodeUtil.isImmutableValue(elem)) {
+        String value = NodeUtil.getStringValue(elem);
+        if (!value.isEmpty()) {
+          if (sb.length() > 0) {
+            sb.append(joinString);
+          }
+          sb.append(value);
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
+      } else {
+        if (sb.length() > 0) {
+          arrayFoldedChildren.add(Node.newString(sb.toString()));
+          sb = new StringBuilder();
         }
-        arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+        arrayFoldedChildren.add(elem);
       }
-        break;
+      elem = elem.getNext();
+    }
+
+    if (sb.length() > 0) {
+      arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
+
+    if (!arrayFoldedChildren.isEmpty() && arrayFoldedChildren.size() < arrayNode.getChildCount()) {
+      Node newNode = NodeUtil.newCallNode(NodeUtil.newGetProp(NodeUtil.newArrayLiteral(), "join"), right);
+      for (Node child : arrayFoldedChildren) {
+        newNode.getFirstChild().getNext().addChildToBack(child.cloneTree());
+      }
+      parent.replaceChild(n, newNode);
       t.getCompiler().reportCodeChange();
     }
+  }
+}
\ No newline at end of file
