diff --git a/tmp/49e4c4bc-253c-4de4-81a6-0f5b06ccd98c_buggy.java b/tmp/0960f6ea-32ae-4a46-a752-9cd1e9a02132_fixed.java
index 6e05e4b..24696c9 100644
--- a/tmp/49e4c4bc-253c-4de4-81a6-0f5b06ccd98c_buggy.java
+++ b/tmp/0960f6ea-32ae-4a46-a752-9cd1e9a02132_fixed.java
@@ -1,51 +1,49 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+    boolean isUnnamedFunction = false;
     if (name == null) {
+        // Check if this is a function statement or expression
+        if (functionNode.isFunctionStatement()) {
+            throw new IllegalStateException("Unnamed function statement is not allowed.");
+        }
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
     }
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
     if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+        // Mark line number of paren correctly.
+        // The left paren might not be on the same line as the function keyword.
+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
     }
 
     node.addChildToBack(newName);
     Node lp = newNode(Token.LP);
     // The left paren's complicated because it's not represented by an
     // AstNode, so there's nothing that has the actual line number that it
     // appeared on.  We know the paren has to appear on the same line as the
     // function name (or else a semicolon will be inserted.)  If there's no
     // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+    if (name != null) {
+        lp.setLineno(name.getLineno());
     } else {
         lp.setLineno(functionNode.getLineno());
     }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
     lp.setCharno(position2charno(lparenCharno));
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
     return node;
 }
\ No newline at end of file
