diff --git a/tmp/9b126904-1c12-4986-b605-26ff465c735d_buggy.java b/tmp/d7c649bc-32b9-4a7e-aaa8-53bc12148fbe_fixed.java
index 1ad070d..d5a3503 100644
--- a/tmp/9b126904-1c12-4986-b605-26ff465c735d_buggy.java
+++ b/tmp/d7c649bc-32b9-4a7e-aaa8-53bc12148fbe_fixed.java
@@ -1,38 +1,39 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
  * the escape character is not allowed at end of strem
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        case 'N': // MySQL uses \N to symbolize null values
+            return c;
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // For any other character, return it as-is, since it's not a recognized escape sequence
             return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
