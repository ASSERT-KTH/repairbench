diff --git a/tmp/afa0e35b-0db7-45ef-a91c-219f6491a6e2_buggy.java b/tmp/43fceba3-e39e-4320-ab78-e4321a0dabd5_fixed.java
index fa6828a..dbac262 100644
--- a/tmp/afa0e35b-0db7-45ef-a91c-219f6491a6e2_buggy.java
+++ b/tmp/43fceba3-e39e-4320-ab78-e4321a0dabd5_fixed.java
@@ -1,5 +1,25 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Optional<Object> bestMatch = mocks.stream()
+            .filter(mock -> field.getType().isInstance(mock))
+            .max(Comparator.comparingInt(mock -> typeHierarchyDistance(field.getType(), mock.getClass())));
+
+        bestMatch.ifPresent(mock -> {
+            try {
+                field.setAccessible(true);
+                field.set(fieldInstance, mock);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Failed to inject mock into field: " + field.getName(), e);
             }
+        });
+    }
+}
+
+private int typeHierarchyDistance(Class<?> target, Class<?> candidate) {
+    int distance = 0;
+    while (candidate != null && !candidate.equals(target)) {
+        candidate = candidate.getSuperclass();
+        distance++;
+    }
+    return candidate == null ? Integer.MAX_VALUE : distance;
 }
\ No newline at end of file
