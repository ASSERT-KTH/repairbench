diff --git a/tmp/d6b4009c-50f0-4fbf-9af6-fa160d2eca5f_buggy.java b/tmp/fe1597e6-18e9-498a-8bea-cd6755225d46_fixed.java
index fa6828a..0f04dc3 100644
--- a/tmp/d6b4009c-50f0-4fbf-9af6-fa160d2eca5f_buggy.java
+++ b/tmp/fe1597e6-18e9-498a-8bea-cd6755225d46_fixed.java
@@ -1,5 +1,26 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Object bestMatchMock = null;
+        Class<?> fieldType = field.getType();
+
+        // Find the best match mock
+        for (Object mock : mocks) {
+            Class<?> mockType = mock.getClass().getInterfaces().length > 0 ? mock.getClass().getInterfaces()[0] : mock.getClass();
+            if (fieldType.equals(mockType)) {
+                bestMatchMock = mock;
+                break; // Exact type match found, no need to look further
+            } else if (fieldType.isAssignableFrom(mockType)) {
+                bestMatchMock = mock; // Ancestor type match
+            }
+        }
+
+        if (bestMatchMock != null) {
+            field.setAccessible(true);
+            try {
+                field.set(fieldInstance, bestMatchMock);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Failed to inject mock into field: " + field.getName(), e);
+            }
+        }
     }
 }
\ No newline at end of file
