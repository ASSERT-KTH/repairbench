diff --git a/tmp/f6543487-30c6-4f23-bd2a-60661bbbf825_buggy.java b/tmp/a2680de0-01b7-479e-9346-67dec4a4433b_fixed.java
index 670114d..c25fbcb 100644
--- a/tmp/f6543487-30c6-4f23-bd2a-60661bbbf825_buggy.java
+++ b/tmp/a2680de0-01b7-479e-9346-67dec4a4433b_fixed.java
@@ -1,48 +1,71 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
 
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
 
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
-        if (ns != null && ns.onlyAffectsClassDef) {
+    if (ns != null) {
+      if (ns.onlyAffectsClassDef) {
         JsName name = getName(ns.name, false);
         if (name != null) {
           refNodes.add(new ClassDefiningFunctionNode(
               name, n, parent, parent.getParent()));
         }
       }
     }
+
+    // Handle goog.inherits specifically
+    if (nameNode.matchesQualifiedName("goog.inherits")) {
+      Node subclassNode = nameNode.getNext();
+      Node superclassNode = subclassNode.getNext();
+
+      if (subclassNode != null && superclassNode != null) {
+        NameInformation subclassNs = createNameInformation(t, subclassNode, n);
+        NameInformation superclassNs = createNameInformation(t, superclassNode, n);
+
+        if (subclassNs != null && superclassNs != null) {
+          JsName subclass = getName(subclassNs.name, false);
+          JsName superclass = getName(superclassNs.name, false);
+
+          if (subclass != null && superclass != null) {
+            refNodes.add(new ClassDefiningFunctionNode(
+                subclass, n, parent, parent.getParent()));
+          }
+        }
+      }
+    }
+  }
 }
\ No newline at end of file
