diff --git a/tmp/c7f6e33b-33ed-43fe-8c64-075a05e1a1dd_buggy.java b/tmp/a813d86b-de00-41b4-90dc-1b2c1e9261f2_fixed.java
index f7bc541..841cdb5 100644
--- a/tmp/c7f6e33b-33ed-43fe-8c64-075a05e1a1dd_buggy.java
+++ b/tmp/a813d86b-de00-41b4-90dc-1b2c1e9261f2_fixed.java
@@ -1,14 +1,37 @@
 /**
-     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
-     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
-     @param dirtyDocument Untrusted base document to clean.
-     @return cleaned document.
+ * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
+ * The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
+ * @param dirtyDocument Untrusted base document to clean.
+ * @return cleaned document.
  */
 public Document clean(Document dirtyDocument) {
     Validate.notNull(dirtyDocument);
 
     Document clean = Document.createShell(dirtyDocument.baseUri());
-            copySafeNodes(dirtyDocument.body(), clean.body());
+    // Instead of directly copying, we should use the whitelist to filter allowed elements
+    Whitelist whitelist = this.whitelist; // Assuming 'whitelist' is an instance variable of the Cleaner class
+    copySafeNodes(dirtyDocument.body(), clean.body(), whitelist);
 
     return clean;
 }
+
+/**
+ * Recursively copies nodes from the source to the destination if they are allowed by the whitelist.
+ * @param source Node source to copy from.
+ * @param dest Node destination to copy to.
+ * @param whitelist The whitelist to determine which elements and attributes are allowed.
+ */
+private void copySafeNodes(Node source, Node dest, Whitelist whitelist) {
+    for (Node srcChild : source.childNodes()) {
+        if (srcChild instanceof Element) {
+            Element srcElement = (Element) srcChild;
+            if (whitelist.isSafeTag(srcElement.tagName())) {
+                Element destChild = dest.appendChild(new Element(Tag.valueOf(srcElement.tagName()), srcElement.baseUri()));
+                destChild.attributes().addAll(whitelist.getAttributes(srcElement.tagName()).filter(srcElement.attributes()));
+                copySafeNodes(srcElement, destChild, whitelist);
+            }
+        } else {
+            dest.appendChild(srcChild.clone());
+        }
+    }
+}
\ No newline at end of file
