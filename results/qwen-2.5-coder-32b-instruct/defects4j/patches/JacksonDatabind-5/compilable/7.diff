diff --git a/tmp/95d53ae2-ccf4-457f-ac13-6407c1ddd7d0_buggy.java b/tmp/bfde4174-815f-439c-9006-8ea99b27e4de_fixed.java
index b2db1d6..99df8ce 100644
--- a/tmp/95d53ae2-ccf4-457f-ac13-6407c1ddd7d0_buggy.java
+++ b/tmp/bfde4174-815f-439c-9006-8ea99b27e4de_fixed.java
@@ -1,29 +1,27 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                // Ensure that we are adding the method to the mixIns map correctly
+                // and that it can be used to augment the target class's methods.
+                AnnotatedMethod mixInMethod = _constructMethod(m);
+                mixIns.add(mixInMethod);
             }
         }
     }
 }
\ No newline at end of file
