diff --git a/tmp/6fca8fa6-8fb6-4f81-a4fd-5532acb07079_buggy.java b/tmp/ae36ec8f-b61e-4de6-beee-c4e875920172_fixed.java
index 4bbd561..7075d42 100644
--- a/tmp/6fca8fa6-8fb6-4f81-a4fd-5532acb07079_buggy.java
+++ b/tmp/ae36ec8f-b61e-4de6-beee-c4e875920172_fixed.java
@@ -1,37 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
     int start = index + 2;
     boolean isHex = false;
 
     char firstChar = input.charAt(start);
     if (firstChar == 'x' || firstChar == 'X') {
         start++;
         isHex = true;
     }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end) != ';') {
         end++;
     }
+    if (end >= input.length()) {
+        return 0; // No closing ';'
+    }
 
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    if (Character.isSupplementaryCodePoint(entityValue)) {
+        // Handle supplementary characters
+        char[] surrogates = Character.toChars(entityValue);
+        out.write(surrogates);
+    } else {
         out.write(entityValue);
+    }
+
     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
