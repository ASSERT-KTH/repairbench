diff --git a/tmp/06c74b8f-2852-428f-b024-a82404e99020_buggy.java b/tmp/e9be5d3d-7308-4939-b8b2-1a1c1c3eeed2_fixed.java
index 5abdeb5..9d84daa 100644
--- a/tmp/06c74b8f-2852-428f-b024-a82404e99020_buggy.java
+++ b/tmp/e9be5d3d-7308-4939-b8b2-1a1c1c3eeed2_fixed.java
@@ -1,29 +1,39 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if the node is the right-hand side of an assignment
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // If it's the left-hand side of an assignment, do not count it
+          return;
+        }
+        // Check if the node is the condition or consequence of a hook
+        if (parent.isHook()) {
+          int childIndex = parent.getIndexOfChild(n);
+          if (childIndex == 0) {
+            // If it's the condition of a hook, count it
             numUsesWithinCfgNode++;
+          } else {
+            // If it's the consequence or alternative of a hook, count it
+            numUsesWithinCfgNode++;
+          }
+        } else {
+          // For other cases, count the usage
+          numUsesWithinCfgNode++;
+        }
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
