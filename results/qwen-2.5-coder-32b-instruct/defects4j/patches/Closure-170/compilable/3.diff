diff --git a/tmp/3d47e661-6b96-490c-94e3-4eeddabef266_buggy.java b/tmp/cbcbf3bc-4fde-4fbb-a822-5211d34c5c78_fixed.java
index 5abdeb5..1a85ebb 100644
--- a/tmp/3d47e661-6b96-490c-94e3-4eeddabef266_buggy.java
+++ b/tmp/cbcbf3bc-4fde-4fbb-a822-5211d34c5c78_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * numUseWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if the name node is part of an assignment
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // This is the lhs of an assignment, do not count
+          return;
+        }
+        // Check if the name node is part of a ternary operation and is the condition
+        if (parent.isHook() && (parent.getFirstChild() == n)) {
+          // This is the condition part of a ternary, do not count
+          return;
+        }
+        // Count the use of the variable
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
