diff --git a/tmp/a3776465-98d7-464e-ae5b-a8c54cee9e87_buggy.java b/tmp/011b0e44-885c-451d-8a75-63dc9c95c52f_fixed.java
index 5abdeb5..a990dda 100644
--- a/tmp/a3776465-98d7-464e-ae5b-a8c54cee9e87_buggy.java
+++ b/tmp/011b0e44-885c-451d-8a75-63dc9c95c52f_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * numUseWithinCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Check if the node is the lhs of an assignment
+            boolean isLhsOfAssignment = parent.isAssign() && parent.getFirstChild() == n;
+            // Check if the node is inside a HOOK ( ?: ) expression and is not the condition part
+            boolean isInHook = parent.isHook() && n != parent.getFirstChild();
+
+            if (!isLhsOfAssignment && !isInHook) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
