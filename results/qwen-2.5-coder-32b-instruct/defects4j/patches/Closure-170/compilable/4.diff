diff --git a/tmp/69fb6c5f-9b95-45bf-b8bd-501d1ade433d_buggy.java b/tmp/ad2d0722-c391-435d-921b-4f9b951a22f2_fixed.java
index 5abdeb5..a2b73d3 100644
--- a/tmp/69fb6c5f-9b95-45bf-b8bd-501d1ade433d_buggy.java
+++ b/tmp/ad2d0722-c391-435d-921b-4f9b951a22f2_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if the name node is the left-hand side of an assignment
+        boolean isLhsOfAssignment = parent.isAssign() && parent.getFirstChild() == n;
+        // Check if the name node is part of a complex expression that includes an assignment
+        boolean isPartOfComplexExpressionWithAssignment = parent.isHook() || parent.isOr() || parent.isAnd();
+
+        if (!(isLhsOfAssignment && isPartOfComplexExpressionWithAssignment)) {
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
