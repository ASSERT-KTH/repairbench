diff --git a/tmp/5e22e62b-f435-49e7-ad66-16d7045e1693_buggy.java b/tmp/40d42a76-1508-49bb-8f8e-810ae9935770_fixed.java
index 5abdeb5..57b5795 100644
--- a/tmp/5e22e62b-f435-49e7-ad66-16d7045e1693_buggy.java
+++ b/tmp/40d42a76-1508-49bb-8f8e-810ae9935770_fixed.java
@@ -1,29 +1,37 @@
 /**
  * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * numUseWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
           // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
           //   and remove this special case.
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            (parent.getFirstChild() == n) &&
+            isPartOfAssignmentChain(parent, cfgNode))) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
       }
     }
 
+    private boolean isPartOfAssignmentChain(Node assignNode, Node cfgNode) {
+      Node current = assignNode;
+      while (current.getParent() != cfgNode && current.getParent().isExprResult()) {
+        current = current.getParent();
+      }
+      return current.getParent() == cfgNode && current.getParent().isExprResult();
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
