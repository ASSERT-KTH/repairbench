diff --git a/tmp/c20f1071-b4a3-4efe-b736-3b158b8bc2c7_buggy.java b/tmp/a44595ee-7b25-41c0-be81-4a90b413caf5_fixed.java
index 5abdeb5..572986c 100644
--- a/tmp/c20f1071-b4a3-4efe-b736-3b158b8bc2c7_buggy.java
+++ b/tmp/a44595ee-7b25-41c0-be81-4a90b413caf5_fixed.java
@@ -1,29 +1,36 @@
 /**
  * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * numUseWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        // Check if parent is an assignment and n is the left-hand side
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // Don't count lhs of assignment
+          return;
+        }
+        // Check if parent is a ternary operator and n is the condition
+        if (parent.isHook() && parent.getFirstChild() == n) {
+          // Don't count condition part of ternary operator
+          return;
+        }
+        // Check if parent is a for-in or for-of loop and n is the variable declaration
+        if ((parent.isForIn() || parent.isForOf()) && parent.getFirstChild() == n) {
+          // Don't count loop variable declaration
+          return;
+        }
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
