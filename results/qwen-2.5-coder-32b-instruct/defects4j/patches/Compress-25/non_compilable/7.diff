diff --git a/tmp/8e82cf5e-be5e-4ce7-ba95-5362be9d3623_buggy.java b/tmp/4229ff6b-4c4d-4e80-b263-2796e1e8a23d_fixed.java
index 6c0aa19..760fe5a 100644
--- a/tmp/8e82cf5e-be5e-4ce7-ba95-5362be9d3623_buggy.java
+++ b/tmp/4229ff6b-4c4d-4e80-b263-2796e1e8a23d_fixed.java
@@ -1,20 +1,22 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
+    // Ensure the buffer capacity is correctly set if buf is defined elsewhere
+    // For now, assuming buf is correctly initialized and has a capacity method
     in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
     // haven't read anything so far
+    curr = new CurrentEntry();
 }
\ No newline at end of file
