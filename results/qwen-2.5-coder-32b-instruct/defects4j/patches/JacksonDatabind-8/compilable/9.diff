diff --git a/tmp/84f6861e-cc2a-4372-a36e-11504ad5aeaa_buggy.java b/tmp/e434fd07-04bd-4907-932f-ca3f73f88660_fixed.java
index c9da1b7..5e40223 100644
--- a/tmp/84f6861e-cc2a-4372-a36e-11504ad5aeaa_buggy.java
+++ b/tmp/e434fd07-04bd-4907-932f-ca3f73f88660_fixed.java
@@ -1,33 +1,42 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated
+            // if new one is also explicitly annotated, throw an exception
+            if (explicit) {
+                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                        +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            }
+            // if new one is not explicitly annotated, do nothing
+            return;
+        } else {
+            // if old one is not explicitly annotated, allow new one to override
+            if (explicit) {
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            if (explicit) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+                        +" creators: already had implicitly marked "+oldOne+", encountered explicitly marked "+newOne);
+            }
             // otherwise, which one to choose?
             // new type more generic, use old
             // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
