diff --git a/tmp/0fb71848-f251-4a2a-bf2a-a3477b826897_buggy.java b/tmp/5b9156d0-afe7-4777-a242-37a64e2bc5b7_fixed.java
index 3002587..01e44b7 100644
--- a/tmp/0fb71848-f251-4a2a-bf2a-a3477b826897_buggy.java
+++ b/tmp/5b9156d0-afe7-4777-a242-37a64e2bc5b7_fixed.java
@@ -1,10 +1,28 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        
+        // Define bounds for the parameters: amplitude, mean, sigma
+        // Sigma must be strictly positive
+        double[] lowerBounds = { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0 };
+        double[] upperBounds = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY };
+        
+        // Create a bounded optimizer
+        BoundMaximizer<ParametricUnivariateFunction> boundedOptimizer = 
+            new BoundMaximizer<>(getOptimizer(), lowerBounds, upperBounds);
+        
+        return boundedOptimizer.optimize(new MaxEval(Integer.MAX_VALUE), 
+                                       new LeastSquaresProblem.Builder()
+                                           .start(guess)
+                                           .model(new Gaussian.Parametric())
+                                           .target(getYObservables())
+                                           .weight(new DiagonalMatrix(toArray(getWeightObservables())))
+                                           .build())
+                             .getPoint()
+                             .toArray();
     }
\ No newline at end of file
