diff --git a/tmp/efbcfa24-d1a2-455c-b060-f92cb386c716_buggy.java b/tmp/09e45f81-910d-4cac-b696-8be724a91f9d_fixed.java
index 3002587..b9ce0de 100644
--- a/tmp/efbcfa24-d1a2-455c-b060-f92cb386c716_buggy.java
+++ b/tmp/09e45f81-910d-4cac-b696-8be724a91f9d_fixed.java
@@ -1,10 +1,26 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    
+    // Define the lower bounds for the parameters (mean, sigma, amplitude)
+    double[] lowerBounds = { Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY };
+    double[] upperBounds = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY };
+    
+    // Use a bounded optimizer
+    final BaseMultivariateOptimizer<Gaussian.Parametric> optimizer = new LevenbergMarquardtOptimizer().bounded(lowerBounds, upperBounds);
+    
+    return optimizer.optimize(
+        new MaxEval(Integer.MAX_VALUE),
+        new LeastSquaresProblem.Builder()
+            .start(guess)
+            .model(new Gaussian.Parametric())
+            .target(new ArrayRealVector(getObservations()))
+            .weight(new ArrayRealVector(new double[getObservations().length], 1.0))
+            .build()
+    ).getPoint().toArray();
 }
\ No newline at end of file
