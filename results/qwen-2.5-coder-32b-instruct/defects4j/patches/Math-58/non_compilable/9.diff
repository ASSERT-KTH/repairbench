diff --git a/tmp/485f1e91-428b-4187-b5b3-ed8f83d7d8c5_buggy.java b/tmp/6ffca1b7-2158-49a5-ac34-f65bbad42e55_fixed.java
index 3002587..a9a708b 100644
--- a/tmp/485f1e91-428b-4187-b5b3-ed8f83d7d8c5_buggy.java
+++ b/tmp/6ffca1b7-2158-49a5-ac34-f65bbad42e55_fixed.java
@@ -1,10 +1,35 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the guess to log space for sigma to ensure positivity
+    final double[] transformedGuess = {guess[0], guess[1], Math.log(guess[2])};
+
+    // Define a new ParametricUnivariateFunction that works in the transformed space
+    final Gaussian.Parametric parametric = new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double... parameters) {
+            // Transform back to original space for sigma
+            return super.value(x, parameters[0], parameters[1], Math.exp(parameters[2]));
+        }
+
+        @Override
+        public double[] gradient(double x, double... parameters) {
+            // Transform back to original space for sigma
+            double[] grad = super.gradient(x, parameters[0], parameters[1], Math.exp(parameters[2]));
+            // Scale the gradient for sigma by the Jacobian of the transformation
+            grad[2] *= Math.exp(parameters[2]);
+            return grad;
+        }
+    };
+
+    // Perform the fit in the transformed space
+    final double[] transformedResult = fit(parametric, transformedGuess);
+
+    // Transform the result back to the original space
+    return new double[]{transformedResult[0], transformedResult[1], Math.exp(transformedResult[2])};
 }
\ No newline at end of file
