diff --git a/tmp/6ddc8c85-606a-4cd7-afdf-5bcf48d50b92_buggy.java b/tmp/9cc92115-a273-4955-838e-c463ef62ecc6_fixed.java
index 3002587..fc685b7 100644
--- a/tmp/6ddc8c85-606a-4cd7-afdf-5bcf48d50b92_buggy.java
+++ b/tmp/9cc92115-a273-4955-838e-c463ef62ecc6_fixed.java
@@ -1,10 +1,30 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the initial guess for sigma to its logarithm
+    double[] transformedGuess = new double[] { guess[0], guess[1], Math.log(guess[2]) };
+    final double[] transformedResult = fit(new Gaussian.Parametric() {
+        @Override
+        public double value(double x, double... p) {
+            // Exploit the transformation for sigma
+            return Gaussian.value(x, p[0], p[1], Math.exp(p[2]));
+        }
+
+        @Override
+        public double[] gradient(double x, double... p) {
+            // Exploit the transformation for sigma
+            double[] gradient = Gaussian.gradient(x, p[0], p[1], Math.exp(p[2]));
+            // Adjust the gradient for the transformation
+            gradient[2] *= Math.exp(p[2]);
+            return gradient;
+        }
+    }, transformedGuess);
+
+    // Transform the result back to the original parameter space
+    return new double[] { transformedResult[0], transformedResult[1], Math.exp(transformedResult[2]) };
 }
\ No newline at end of file
