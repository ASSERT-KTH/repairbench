diff --git a/tmp/c1403b6a-1517-4368-a9ae-ebe8a1b3a806_buggy.java b/tmp/5cd70120-2e4f-4917-afcc-7b56b0872735_fixed.java
index 3002587..bff99ef 100644
--- a/tmp/c1403b6a-1517-4368-a9ae-ebe8a1b3a806_buggy.java
+++ b/tmp/5cd70120-2e4f-4917-afcc-7b56b0872735_fixed.java
@@ -1,10 +1,30 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the guess to ensure sigma is positive
+    double[] transformedGuess = new double[] { guess[0], Math.log(guess[1]), guess[2] };
+
+    // Define a Parametric UnivariateFunction that applies the transformation
+    ParametricUnivariateFunction parametricFunction = new ParametricUnivariateFunction() {
+        @Override
+        public double value(double x, double... p) {
+            // p[0] = norm, p[1] = log(sigma), p[2] = mean
+            return new Gaussian().value(x, p[0], Math.exp(p[1]), p[2]);
+        }
+
+        @Override
+        public double[] gradient(double x, double... p) {
+            // p[0] = norm, p[1] = log(sigma), p[2] = mean
+            double[] grad = new Gaussian().gradient(x, p[0], Math.exp(p[1]), p[2]);
+            grad[1] *= Math.exp(p[1]); // Chain rule for log(sigma)
+            return grad;
+        }
+    };
+
+    return fit(parametricFunction, transformedGuess);
 }
\ No newline at end of file
