diff --git a/tmp/4564500a-4f51-4e43-b477-6c9c025de265_buggy.java b/tmp/a0f474b0-92f0-4b45-9096-9937e201c57f_fixed.java
index 3002587..1b86aa5 100644
--- a/tmp/4564500a-4f51-4e43-b477-6c9c025de265_buggy.java
+++ b/tmp/a0f474b0-92f0-4b45-9096-9937e201c57f_fixed.java
@@ -1,10 +1,33 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the initial guess to use log(sigma) instead of sigma
+    final double[] transformedGuess = {guess[0], guess[1], Math.log(guess[2])};
+
+    // Define a transformed model that works with log(sigma)
+    final ParametricUnivariateFunction transformedModel = new ParametricUnivariateFunction() {
+        @Override
+        public double value(double x, double... parameters) {
+            // Transform back to sigma
+            double sigma = Math.exp(parameters[2]);
+            return Gaussian.Parametric.value(x, parameters[0], parameters[1], sigma);
+        }
+
+        @Override
+        public double[] gradient(double x, double... parameters) {
+            // Transform back to sigma
+            double sigma = Math.exp(parameters[2]);
+            double[] grad = Gaussian.Parametric.gradient(x, parameters[0], parameters[1], sigma);
+            // Adjust the gradient for log(sigma)
+            grad[2] *= sigma;
+            return grad;
+        }
+    };
+
+    return fit(transformedModel, transformedGuess);
 }
\ No newline at end of file
