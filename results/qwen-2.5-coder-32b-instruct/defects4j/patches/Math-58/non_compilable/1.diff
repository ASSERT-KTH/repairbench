diff --git a/tmp/7f135f77-a383-492a-a964-9f7baf7e9c43_buggy.java b/tmp/f19926f7-5e6a-41de-bb7d-87ca8c97b07b_fixed.java
index 3002587..b834107 100644
--- a/tmp/7f135f77-a383-492a-a964-9f7baf7e9c43_buggy.java
+++ b/tmp/f19926f7-5e6a-41de-bb7d-87ca8c97b07b_fixed.java
@@ -1,10 +1,30 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the guess to ensure sigma is positive
+    final double[] transformedGuess = new double[]{guess[0], Math.log(guess[1]), guess[2]};
+
+    Optimum optimum = optimizer.optimize(
+        new MaxIter(1000),
+        new ObjectiveFunction(new GaussianTransformer()),
+        new LeastSquaresProblem.Constraints(),
+        new InitialGuess(transformedGuess)
+    );
+
+    double[] result = optimum.getPoint().toArray();
+    // Transform back the result to the original parameter space
+    return new double[]{result[0], Math.exp(result[1]), result[2]};
+}
+
+private class GaussianTransformer implements MultivariateVectorFunction {
+    @Override
+    public double[] value(double[] point) {
+        double[] params = new double[]{point[0], Math.exp(point[1]), point[2]};
+        return new Gaussian.Parametric().value(point[0], params);
+    }
 }
\ No newline at end of file
