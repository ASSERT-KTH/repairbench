diff --git a/tmp/0906cfff-9430-45bd-8514-f626192ed3d4_buggy.java b/tmp/2c57e895-8150-40e1-8ade-f353676449ba_fixed.java
index 3002587..ba34250 100644
--- a/tmp/0906cfff-9430-45bd-8514-f626192ed3d4_buggy.java
+++ b/tmp/2c57e895-8150-40e1-8ade-f353676449ba_fixed.java
@@ -1,10 +1,47 @@
 /**
  * Fits a Gaussian function to the observed points.
  *
  * @return the parameters of the Gaussian function that best fits the
  * observed points (in the same order as above).
  */
 public double[] fit() {
     final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+    // Transform the guess to use the logarithm of sigma
+    final double[] transformedGuess = {guess[0], guess[1], Math.log(guess[2])};
+    
+    // Define a ParametricUnivariateFunction that uses the transformed parameters
+    final ParametricUnivariateFunction parametricFunction = new ParametricUnivariateFunction() {
+        @Override
+        public double value(double x, double... parameters) {
+            double norm = parameters[0];
+            double mean = parameters[1];
+            double logSigma = parameters[2];
+            double sigma = Math.exp(logSigma); // Transform back to sigma
+            return norm * Math.exp(-Math.pow(x - mean, 2) / (2 * sigma * sigma));
+        }
+
+        @Override
+        public double[] gradient(double x, double... parameters) {
+            double norm = parameters[0];
+            double mean = parameters[1];
+            double logSigma = parameters[2];
+            double sigma = Math.exp(logSigma); // Transform back to sigma
+            double sigmaSquared = sigma * sigma;
+            double xMinusMean = x - mean;
+            double expTerm = Math.exp(-xMinusMean * xMinusMean / (2 * sigmaSquared));
+            
+            // Compute the gradient components
+            double dNorm = expTerm;
+            double dMean = norm * expTerm * xMinusMean / sigmaSquared;
+            double dLogSigma = norm * expTerm * xMinusMean * xMinusMean / (sigmaSquared * sigma);
+            
+            return new double[] {dNorm, dMean, dLogSigma};
+        }
+    };
+
+    // Perform the fit using the transformed parameters
+    double[] transformedFit = fit(parametricFunction, transformedGuess);
+
+    // Transform the result back to the original parameter space
+    return new double[] {transformedFit[0], transformedFit[1], Math.exp(transformedFit[2])};
 }
\ No newline at end of file
