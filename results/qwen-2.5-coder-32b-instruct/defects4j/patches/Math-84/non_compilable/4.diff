diff --git a/tmp/a478cb20-2a8a-405a-aa5c-814824ac108c_buggy.java b/tmp/5e27ec60-c07f-4ee4-b22f-15cf35d181d6_fixed.java
index 5f1dcf2..53732f8 100644
--- a/tmp/a478cb20-2a8a-405a-aa5c-814824ac108c_buggy.java
+++ b/tmp/5e27ec60-c07f-4ee4-b22f-15cf35d181d6_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone(); // Clone to avoid modifying the current simplex
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = reflected.simplex.clone();
+            } else {
+                // accept the expanded simplex
+                simplex = expanded.simplex.clone();
             }
-
-                return;
-
-            }
-
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contracted.simplex.clone();
+            } else {
+                // perform a shrink step
+                for (int i = 1; i < simplex.length; i++) {
+                    simplex[i] = evaluatePoint((simplex[0].getPoint()[0] + simplex[i].getPoint()[0]) / 2, 
+                                               (simplex[0].getPoint()[1] + simplex[i].getPoint()[1]) / 2, 
+                                               comparator);
+                }
+            }
+        }
 
         // check convergence
+        final RealPointValuePair currentBest = simplex[0];
+        if (isConverged(original, currentBest)) {
             return;
         }
+    }
+}
 
+private boolean isConverged(final RealPointValuePair[] original, final RealPointValuePair currentBest) {
+    // Check if the current best has changed significantly from the original
+    for (RealPointValuePair originalPoint : original) {
+        if (comparator.compare(currentBest, originalPoint) != 0) {
+            return false;
+        }
+    }
+    return true;
 }
 
+private RealPointValuePair evaluatePoint(final double x, final double y, final Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException {
+    double value = function.value(new double[] { x, y });
+    return new RealPointValuePair(new double[] { x, y }, value);
 }
\ No newline at end of file
