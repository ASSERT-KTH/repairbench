diff --git a/tmp/1dbdb020-8c15-4d96-8ef3-98b9df42ba1e_buggy.java b/tmp/e1a88d99-d857-43d4-b5a7-50b028bf6f19_fixed.java
index 5f1dcf2..c756262 100644
--- a/tmp/1dbdb020-8c15-4d96-8ef3-98b9df42ba1e_buggy.java
+++ b/tmp/e1a88d99-d857-43d4-b5a7-50b028bf6f19_fixed.java
@@ -1,41 +1,66 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone(); // clone to avoid modifying the original array
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // clone to avoid modifying the original array
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(reflectedSimplex, 0, simplex, 0, original.length);
             }
 
-                return;
-
-            }
+        } else if (comparator.compare(reflected, worst) < 0) {
+            // accept the reflected simplex
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(reflectedSimplex, 0, simplex, 0, original.length);
 
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, worst) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(new RealPointValuePair[] { contracted }, 0, simplex, original.length - 1, 1);
+            } else {
+                // perform a shrink step
+                for (int i = 1; i < original.length; i++) {
+                    final double[] x = new double[original[i].getPoint().length];
+                    for (int j = 0; j < x.length; j++) {
+                        x[j] = (original[0].getPoint()[j] + original[i].getPoint()[j]) * 0.5;
+                    }
+                    simplex[i] = new RealPointValuePair(x, Double.NaN, true);
+                }
+                evaluateSimplex(comparator);
+            }
+        }
 
         // check convergence
+        if (checkConvergence(comparator)) {
             return;
         }
 
+        // ensure we do not exceed the maximum number of iterations
+        if (getIterations() >= getMaxIterations()) {
+            throw new MaxIterationsExceededException(getMaxIterations());
+        }
     }
-
 }
\ No newline at end of file
