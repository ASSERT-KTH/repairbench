diff --git a/tmp/9b868493-4b96-453f-bafa-461b9786ca09_buggy.java b/tmp/af361fbf-4815-41ee-9ebf-95025b395542_fixed.java
index 5f1dcf2..263b38d 100644
--- a/tmp/9b868493-4b96-453f-bafa-461b9786ca09_buggy.java
+++ b/tmp/af361fbf-4815-41ee-9ebf-95025b395542_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
+        // Check for convergence
+        if (getIterationsCounter() >= getMaxIterations()) {
+            throw new MaxIterationsExceededException(getMaxIterations());
+        }
+
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
-                return;
+            continue;
 
-            }
+        } else if (comparator.compare(reflected, worst) < 0) {
+            // accept the reflected simplex
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length - 1);
+            simplex[original.length - 1] = reflected;
+            continue;
 
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, worst) < 0) {
                 // accept the contracted simplex
+                simplex[original.length - 1] = contracted;
+                continue;
+            } else {
+                // perform a shrink step
+                for (int i = 1; i < original.length; i++) {
+                    simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best, original[i] }, rho, comparator);
+                }
+            }
+        }
 
-            // check convergence
+        // Check for convergence based on the difference in the best and worst values
+        if (Math.abs(best.getValue() - worst.getValue()) < getConvergenceChecker().getRelativeThreshold() ||
+            Math.abs(best.getValue() - worst.getValue()) < getConvergenceChecker().getAbsoluteThreshold()) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
