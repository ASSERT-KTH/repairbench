diff --git a/tmp/12eaab5f-aded-46dd-b720-98cb3c5d57ed_buggy.java b/tmp/72c8cd46-b901-4029-a0c2-fb6c367a8d6d_fixed.java
index 5f1dcf2..ea11241 100644
--- a/tmp/12eaab5f-aded-46dd-b720-98cb3c5d57ed_buggy.java
+++ b/tmp/72c8cd46-b901-4029-a0c2-fb6c367a8d6d_fixed.java
@@ -1,41 +1,57 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (getIterationsCounter() < getMaxIterations()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = reflected.clone();
+                } else {
+                    // accept the expanded simplex
+                    simplex = expanded.clone();
                 }
 
-                return;
-
+                continue;
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contracted.clone();
+            } else {
+                // perform a shrink step
+                for (int i = 1; i < simplex.length; i++) {
+                    simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best, simplex[i] }, rho, comparator);
+                }
+            }
 
             // check convergence
+            final RealPointValuePair currentBest = simplex[0];
+            if (getIterationsCounter() > 1) {
+                final RealPointValuePair previousBest = getPreviousBest();
+                if (Math.abs(currentBest.getValue() - previousBest.getValue()) < getConvergenceChecker().getRelativeThreshold() +
+                    Math.abs(currentBest.getValue()) * getConvergenceChecker().getAbsoluteThreshold()) {
                     return;
                 }
+            }
+            setPreviousBest(currentBest);
 
         }
 
+        throw new MaxIterationsExceededException(getMaxIterations());
     }
\ No newline at end of file
