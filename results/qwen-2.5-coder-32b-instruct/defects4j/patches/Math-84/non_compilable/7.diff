diff --git a/tmp/9ab3d575-3093-4604-95dc-4c3fc3189e54_buggy.java b/tmp/a267a5cc-b516-495f-9f36-b61f3472a9c9_fixed.java
index 5f1dcf2..f7679fe 100644
--- a/tmp/9ab3d575-3093-4604-95dc-4c3fc3189e54_buggy.java
+++ b/tmp/a267a5cc-b516-495f-9f36-b61f3472a9c9_fixed.java
@@ -1,41 +1,73 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        final int maxIterations = getMaxIterations();
+        int iterationCount = 0;
+
+        while (iterationCount < maxIterations) {
 
             incrementIterationsCounter();
+            iterationCount++;
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
+            final RealPointValuePair worst = original[original.length - 1];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
-
-            }
+            } else if (comparator.compare(reflected, worst) < 0) {
+                // accept the reflected simplex
+                simplex = new RealPointValuePair[simplex.length];
+                System.arraycopy(reflectedSimplex, 0, simplex, 0, simplex.length - 1);
+                simplex[simplex.length - 1] = reflected;
 
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+                if (comparator.compare(contracted, worst) < 0) {
                     // accept the contracted simplex
+                    simplex[simplex.length - 1] = contracted;
+                } else {
+                    // perform a shrink step
+                    for (int i = 1; i < simplex.length; i++) {
+                        simplex[i] = new RealPointValuePair(
+                            new ArrayRealVector(simplex[0].getPointRef(), true).mapAddToSelf(
+                                simplex[i].getPointRef()).mapMultiplyToSelf(0.5)
+                        );
+                    }
+                }
+            }
 
             // check convergence
+            RealPointValuePair[] s = simplex;
+            RealPointValuePair min = s[0];
+            RealPointValuePair max = s[0];
+            for (RealPointValuePair p : s) {
+                if (comparator.compare(p, min) < 0) {
+                    min = p;
+                }
+                if (comparator.compare(p, max) > 0) {
+                    max = p;
+                }
+            }
+            double size = comparator.compare(max, min);
+            if (size < getConvergenceChecker().getRelativeThreshold()) {
                 return;
             }
-
         }
 
+        throw new MaxIterationsExceededException(maxIterations);
     }
\ No newline at end of file
