diff --git a/tmp/a1e10ab0-352f-4566-881c-a04630b2ebff_buggy.java b/tmp/8ab6df20-f57a-470a-9add-9f1e3503dcd1_fixed.java
index 5f1dcf2..ef8f50c 100644
--- a/tmp/a1e10ab0-352f-4566-881c-a04630b2ebff_buggy.java
+++ b/tmp/8ab6df20-f57a-470a-9add-9f1e3503dcd1_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        if (comparator.compare(reflected, best) < 0 && comparator.compare(reflected, worst) >= 0) {
+            // accept the reflected simplex
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length - 1);
+            simplex[simplex.length - 1] = reflected;
+            continue;
+        }
+
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length - 1);
+                simplex[simplex.length - 1] = reflected;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length - 1);
+                simplex[simplex.length - 1] = expanded;
             }
-
-                return;
-
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+        if (comparator.compare(contracted, worst) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length - 1);
+            simplex[simplex.length - 1] = contracted;
+            continue;
+        }
+
+        // compute the shrinked simplex
+        for (int i = 1; i < original.length; i++) {
+            simplex[i] = evaluateNewSimplex(new RealPointValuePair[] { best, original[i] }, sigma, comparator);
+        }
 
-            // check convergence
-                return;
     }
 
+    if (getIterations() >= getMaxIterations()) {
+        throw new MaxIterationsExceededException(getMaxIterations());
     }
 
 }
\ No newline at end of file
