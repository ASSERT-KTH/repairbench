diff --git a/tmp/ad21d7ca-c1d3-4091-99ea-3aa0cad4b0ae_buggy.java b/tmp/1ea331c4-e1f8-41cf-aa96-4b9d5184c8c8_fixed.java
index 5f1dcf2..f978d3a 100644
--- a/tmp/ad21d7ca-c1d3-4091-99ea-3aa0cad4b0ae_buggy.java
+++ b/tmp/1ea331c4-e1f8-41cf-aa96-4b9d5184c8c8_fixed.java
@@ -1,41 +1,109 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone(); // Use clone to avoid modifying the original simplex
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // Use clone to avoid modifying the original simplex
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
+            // Check convergence
+            if (checkConvergence(simplex)) {
                 return;
+            }
+
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[]{contracted};
 
-            // check convergence
+            // Check convergence
+            if (checkConvergence(simplex)) {
                 return;
             }
+        } else {
+            // compute the shrunk simplex
+            simplex = shrinkSimplex(original, comparator);
+        }
 
+        // Check convergence
+        if (checkConvergence(simplex)) {
+            return;
+        }
+
+    }
+
+}
+
+/**
+ * Check if the optimization has converged.
+ * @param simplex the current simplex
+ * @return true if the optimization has converged
+ */
+private boolean checkConvergence(RealPointValuePair[] simplex) {
+    final RealPointValuePair best = simplex[0];
+    double minValue = best.getValue();
+    double maxValue = best.getValue();
+    for (RealPointValuePair point : simplex) {
+        double value = point.getValue();
+        if (value < minValue) {
+            minValue = value;
+        }
+        if (value > maxValue) {
+            maxValue = value;
         }
+    }
+    return (maxValue - minValue) <= getConvergenceChecker().getRelativeThreshold() * Math.abs(maxValue) +
+           getConvergenceChecker().getAbsoluteThreshold();
+}
+
+/**
+ * Shrink the simplex towards the best point.
+ * @param original the original simplex
+ * @param comparator the comparator to use
+ * @return the shrunk simplex
+ * @throws FunctionEvaluationException if a function evaluation fails
+ * @throws IllegalArgumentException if the simplex cannot be shrunk
+ */
+private RealPointValuePair[] shrinkSimplex(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException, IllegalArgumentException {
+
+    final RealPointValuePair best = original[0];
+    final double[] bestX = best.getPoint();
+    final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+    newSimplex[0] = best;
+
+    for (int i = 1; i < original.length; i++) {
+        final double[] xi = original[i].getPoint();
+        final double[] xshrunk = new double[xi.length];
+        for (int j = 0; j < xi.length; j++) {
+            xshrunk[j] = bestX[j] + sigma * (xi[j] - bestX[j]);
+        }
+        newSimplex[i] = new RealPointValuePair(xshrunk, computeObjectiveValue(xshrunk));
+    }
+
+    Arrays.sort(newSimplex, comparator);
 
+    return newSimplex;
 }
\ No newline at end of file
