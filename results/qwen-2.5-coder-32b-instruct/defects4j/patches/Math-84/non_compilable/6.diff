diff --git a/tmp/ba57ac05-58c1-4fbf-89d0-8bc6da40b2c2_buggy.java b/tmp/aa8c8c96-0c63-446c-a362-e25203c61f34_fixed.java
index 5f1dcf2..4bf8698 100644
--- a/tmp/ba57ac05-58c1-4fbf-89d0-8bc6da40b2c2_buggy.java
+++ b/tmp/aa8c8c96-0c63-446c-a362-e25203c61f34_fixed.java
@@ -1,41 +1,75 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone(); // Clone to avoid modifying the original array
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = reflected.getPointRef();
+            } else {
+                // accept the expanded simplex
+                simplex = expanded.getPointRef();
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contracted.getPointRef();
+            } else {
+                // perform a shrink step
+                shrinkSimplex(original);
+            }
+        }
 
         // check convergence
+        if (checkConvergence(comparator)) {
             return;
         }
 
+        if (getIterations() >= getMaxIterations()) {
+            throw new MaxIterationsExceededException(getMaxIterations());
         }
 
     }
+}
+
+private boolean checkConvergence(final Comparator<RealPointValuePair> comparator) {
+    // Implement a convergence check based on the comparator
+    final RealPointValuePair[] current = simplex;
+    final RealPointValuePair best = current[0];
+    double minDifference = Double.MAX_VALUE;
+
+    for (RealPointValuePair point : current) {
+        minDifference = Math.min(minDifference, Math.abs(comparator.compare(best, point)));
+    }
+
+    return minDifference < getRelativeThreshold() && (getEvaluations() >= getMinEvaluations());
+}
+
+private void shrinkSimplex(final RealPointValuePair[] original) {
+    // Implement shrinking logic if necessary
+    for (int i = 1; i < original.length; i++) {
+        double[] newPoint = new double[original[i].getPoint().length];
+        for (int j = 0; j < original[i].getPoint().length; j++) {
+            newPoint[j] = (original[0].getPoint()[j] + original[i].getPoint()[j]) * 0.5;
+        }
+        simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);
+    }
+}
\ No newline at end of file
