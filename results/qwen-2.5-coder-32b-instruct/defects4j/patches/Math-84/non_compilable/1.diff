diff --git a/tmp/f5766174-c830-4b42-99be-77814c051815_buggy.java b/tmp/3547c6ab-9cf8-4205-9e31-72b4340cad6a_fixed.java
index 5f1dcf2..4c57172 100644
--- a/tmp/f5766174-c830-4b42-99be-77814c051815_buggy.java
+++ b/tmp/3547c6ab-9cf8-4205-9e31-72b4340cad6a_fixed.java
@@ -1,41 +1,92 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
+        final RealPointValuePair secondWorst = original[original.length - 2];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
+        if (comparator.compare(reflected, best) < 0 && comparator.compare(reflected, secondWorst) <= 0) {
+            // accept the reflected simplex if it's better than the best and not worse than the second worst
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length - 1);
+            simplex[original.length - 1] = reflected;
+        } else if (comparator.compare(reflected, secondWorst) < 0 && comparator.compare(reflected, worst) >= 0) {
+            // accept the reflected simplex if it's between the second worst and the worst
+            simplex = new RealPointValuePair[original.length];
+            System.arraycopy(original, 0, simplex, 0, original.length - 1);
+            simplex[original.length - 1] = reflected;
+        } else if (comparator.compare(reflected, worst) < 0) {
+            // compute the contracted simplex
+            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+            if (comparator.compare(contracted, worst) < 0) {
+                // accept the contracted simplex if it's better than the worst
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length - 1);
+                simplex[original.length - 1] = contracted;
+            } else {
+                // perform a shrink step
+                for (int i = 1; i < simplex.length; i++) {
+                    simplex[i] = new RealPointValuePair(
+                        midpoint(simplex[0].getPoint(), simplex[i].getPoint()),
+                        Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
+            }
+        } else {
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            if (comparator.compare(expanded, reflected) >= 0) {
+                // accept the expanded simplex if it's at least as good as the reflected
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length - 1);
+                simplex[original.length - 1] = expanded;
+            } else {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = new RealPointValuePair[original.length];
+                System.arraycopy(original, 0, simplex, 0, original.length - 1);
+                simplex[original.length - 1] = reflected;
             }
-
-                return;
-
         }
 
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+        checkConvergence();
+    }
+}
 
-            // check convergence
-                return;
+private double[] midpoint(final double[] p1, final double[] p2) {
+    final double[] midpoint = new double[p1.length];
+    for (int i = 0; i < p1.length; i++) {
+        midpoint[i] = (p1[i] + p2[i]) / 2.0;
+    }
+    return midpoint;
 }
 
+private void evaluateSimplex(final Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException, OptimizationException {
+    for (int i = 0; i < simplex.length; i++) {
+        if (Double.isNaN(simplex[i].getValue())) {
+            simplex[i] = new RealPointValuePair(simplex[i].getPoint(), function.value(simplex[i].getPoint()), false);
+        }
+    }
+    Arrays.sort(simplex, comparator);
 }
 
+private void checkConvergence()
+    throws ConvergenceException {
+    if (getIterations() >= getMaxIterations()) {
+        throw new MaxIterationsExceededException(getMaxIterations());
+    }
+    if (getEvaluations() >= getMaxEvaluations()) {
+        throw new MaxEvaluationsExceededException(getMaxEvaluations());
+    }
+    // Additional convergence checks can be added here if necessary
 }
\ No newline at end of file
