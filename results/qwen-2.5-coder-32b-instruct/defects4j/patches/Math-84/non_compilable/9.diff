diff --git a/tmp/c498a934-0eb2-44a2-9f8f-f03ab8f9e426_buggy.java b/tmp/5fd79496-926d-4484-88ef-ff4d1378cd86_fixed.java
index 5f1dcf2..07df86e 100644
--- a/tmp/c498a934-0eb2-44a2-9f8f-f03ab8f9e426_buggy.java
+++ b/tmp/5fd79496-926d-4484-88ef-ff4d1378cd86_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
+        
+        // Evaluate the current best point
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
-
-                return;
-
+                simplex = new RealPointValuePair[] { reflected, original[1], original[2] };
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] { expanded, original[1], original[2] };
             }
 
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted, original[1], original[2] };
+            } else {
+                // perform a shrink step
+                simplex = shrinkSimplex(original, comparator);
+            }
+        }
 
         // check convergence
+        if (isConverged(comparator)) {
             return;
         }
 
+        // Ensure we do not exceed the maximum number of evaluations
+        if (getEvaluations() >= getMaxEvaluations()) {
+            throw new MaxIterationsExceededException(getMaxIterations());
+        }
+
     }
 
 }
\ No newline at end of file
