diff --git a/tmp/b29addf3-4ae8-4243-8290-b3763d22ebc6_buggy.java b/tmp/c833c176-cfc2-421a-9135-83b8e4e3ead8_fixed.java
index 72a422c..7e301d0 100644
--- a/tmp/b29addf3-4ae8-4243-8290-b3763d22ebc6_buggy.java
+++ b/tmp/c833c176-cfc2-421a-9135-83b8e4e3ead8_fixed.java
@@ -1,51 +1,60 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+    if (index < seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
 
             // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0; // Not enough characters for a valid entity
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while (end < seqEnd && input.charAt(end) != ';') {
+            if (!Character.isDigit(input.charAt(end)) && (isHex ? !isHexDigit(input.charAt(end)) : true)) {
+                return 0; // Invalid character in numeric entity
+            }
             end++;
         }
 
+        if (end == seqEnd) {
+            return 0; // No semicolon found, and at end of string
+        }
+
+        String entitySubstring = input.subSequence(start, end).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(entitySubstring, 16) : Integer.parseInt(entitySubstring, 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            System.err.println("FAIL: " + entitySubstring + "[" + start + "][" + end + "]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
+
+private boolean isHexDigit(char c) {
+    return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+}
\ No newline at end of file
