diff --git a/tmp/80019ebb-4b9c-4f75-a314-1c480022ad24_buggy.java b/tmp/f1a8d7aa-c45d-43a1-b8a3-f787615d7e84_fixed.java
index 2608424..aae6850 100644
--- a/tmp/80019ebb-4b9c-4f75-a314-1c480022ad24_buggy.java
+++ b/tmp/f1a8d7aa-c45d-43a1-b8a3-f787615d7e84_fixed.java
@@ -1,39 +1,25 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+    if (index < 0 || index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+    for (int i = 0; i < dimension; i++) {
+        int divisor = 1;
+        for (int j = i + 1; j < dimension; j++) {
+            divisor *= uniCounterOffset[j];
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+        indices[i] = (index / divisor) % uniCounterOffset[i];
     }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
     return indices;
 }
\ No newline at end of file
