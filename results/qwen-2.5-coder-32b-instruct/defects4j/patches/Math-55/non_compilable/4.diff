diff --git a/tmp/2a12964c-9c79-4302-af7b-e16712eb4d01_buggy.java b/tmp/8077d38f-58ba-4c14-9788-1fbf59f5e08d_fixed.java
index 1478ee1..da4465e 100644
--- a/tmp/2a12964c-9c79-4302-af7b-e16712eb4d01_buggy.java
+++ b/tmp/8077d38f-58ba-4c14-9788-1fbf59f5e08d_fixed.java
@@ -1,24 +1,35 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double dotV2V2 = v2.dotProduct(v2);
+    if (dotV2V2 == 0) {
+        // If v2 is the zero vector, the cross product is zero
+        return Vector3D.ZERO;
+    }
+    double rho = Math.rint(v1.dotProduct(v2) / dotV2V2);
 
+    // compute v3 = v1 - rho * v2
+    Vector3D v3 = new Vector3D(v1.getX() - rho * v2.getX(),
+                              v1.getY() - rho * v2.getY(),
+                              v1.getZ() - rho * v2.getZ());
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),
+                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),
+                        v3.getX() * v2.getY() - v3.getY() * v2.getX());
 
 }
\ No newline at end of file
