diff --git a/tmp/5c612c5e-7b7c-4b42-9743-ce9e8e4cea70_buggy.java b/tmp/9e0fdd79-81c4-4917-9a2e-f7c075000dea_fixed.java
index bf9bb88..c03bcb1 100644
--- a/tmp/5c612c5e-7b7c-4b42-9743-ce9e8e4cea70_buggy.java
+++ b/tmp/9e0fdd79-81c4-4917-9a2e-f7c075000dea_fixed.java
@@ -1,108 +1,101 @@
-  /**
-   * Computes the follow() node of a given node and its parent. There is a side
-   * effect when calling this function. If this function computed an edge that
-   * exists a FINALLY, it'll attempt to connect the fromNode to the outer
-   * FINALLY according to the finallyMap.
-   *
-   * @param fromNode The original source node since {@code node} is changed
-   *        during recursion.
-   * @param node The node that follow() should compute.
-   */
   private static Node computeFollowNode(
       Node fromNode, Node node, ControlFlowAnalysis cfa) {
     /*
      * This is the case where:
      *
      * 1. Parent is null implies that we are transferring control to the end of
      * the script.
      *
      * 2. Parent is a function implies that we are transferring control back to
      * the caller of the function.
      *
      * 3. If the node is a return statement, we should also transfer control
      * back to the caller of the function.
      *
      * 4. If the node is root then we have reached the end of what we have been
      * asked to traverse.
      *
      * In all cases we should transfer control to a "symbolic return" node.
      * This will make life easier for DFAs.
      */
     Node parent = node.getParent();
     if (parent == null || parent.isFunction() ||
         (cfa != null && node == cfa.root)) {
       return null;
     }
 
     // If we are just before a IF/WHILE/DO/FOR:
     switch (parent.getType()) {
       // The follow() of any of the path from IF would be what follows IF.
       case Token.IF:
+        if (parent.getFirstChild() != node) { // If this is not the condition
+          // If this is one of the branches, follow the parent's follow
           return computeFollowNode(fromNode, parent, cfa);
+        }
+        // If this is the condition, fall through to the next sibling
+        break;
       case Token.CASE:
       case Token.DEFAULT_CASE:
         // After the body of a CASE, the control goes to the body of the next
         // case, without having to go to the case condition.
-        if (parent.getNext() != null) {
-          if (parent.getNext().isCase()) {
-            return parent.getNext().getFirstChild().getNext();
-          } else if (parent.getNext().isDefaultCase()) {
-            return parent.getNext().getFirstChild();
-          } else {
-            Preconditions.checkState(false, "Not reachable");
+        Node next = parent.getNext();
+        while (next != null && (next.isCase() || next.isDefaultCase())) {
+          if (next.isCase() && next.getFirstChild() != null) {
+            return next.getFirstChild().getNext(); // After the case condition
+          } else if (next.isDefaultCase() && next.getFirstChild() != null) {
+            return next.getFirstChild(); // Default case body
+          }
+          next = next.getNext();
         }
-        } else {
         return computeFollowNode(fromNode, parent, cfa);
-        }
-        break;
       case Token.FOR:
         if (NodeUtil.isForIn(parent)) {
-          return parent;
+          return parent.getFirstChild().getNext().getNext(); // After the loop body
         } else {
-          return parent.getFirstChild().getNext().getNext();
+          return parent.getFirstChild().getNext().getNext(); // After the loop body
         }
       case Token.WHILE:
       case Token.DO:
-        return parent;
+        return parent.getFirstChild().getNext(); // After the loop body
       case Token.TRY:
         // If we are coming out of the TRY block...
         if (parent.getFirstChild() == node) {
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(parent.getLastChild());
+            return parent.getLastChild().getFirstChild(); // Entry to FINALLY
           } else { // and have no FINALLY.
             return computeFollowNode(fromNode, parent, cfa);
           }
         // CATCH block.
         } else if (NodeUtil.getCatchBlock(parent) == node){
           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
-            return computeFallThrough(node.getNext());
+            return parent.getLastChild().getFirstChild(); // Entry to FINALLY
           } else {
             return computeFollowNode(fromNode, parent, cfa);
           }
         // If we are coming out of the FINALLY block...
         } else if (parent.getLastChild() == node){
           if (cfa != null) {
             for (Node finallyNode : cfa.finallyMap.get(parent)) {
               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
             }
           }
           return computeFollowNode(fromNode, parent, cfa);
         }
     }
 
     // Now that we are done with the special cases follow should be its
     // immediate sibling, unless its sibling is a function
     Node nextSibling = node.getNext();
 
     // Skip function declarations because control doesn't get pass into it.
     while (nextSibling != null && nextSibling.isFunction()) {
       nextSibling = nextSibling.getNext();
     }
 
     if (nextSibling != null) {
       return computeFallThrough(nextSibling);
     } else {
       // If there are no more siblings, control is transferred up the AST.
       return computeFollowNode(fromNode, parent, cfa);
     }
   }
\ No newline at end of file
