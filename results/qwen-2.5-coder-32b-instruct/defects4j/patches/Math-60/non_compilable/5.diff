diff --git a/tmp/1b7230d3-9173-4739-8f91-f1cf7f7b1a0f_buggy.java b/tmp/df38d54e-739b-45ab-9c4e-41ea8eb45e89_fixed.java
index 3127f85..12f4fe1 100644
--- a/tmp/1b7230d3-9173-4739-8f91-f1cf7f7b1a0f_buggy.java
+++ b/tmp/df38d54e-739b-45ab-9c4e-41ea8eb45e89_fixed.java
@@ -1,24 +1,18 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
  */
-    public double cumulativeProbability(double x) throws MathException {
+public double cumulativeProbability(double x) {
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+    if (dev > 40 * standardDeviation) {
         return 1;
+    } else if (dev < -40 * standardDeviation) {
+        return 0;
     } else {
-                throw ex;
-            }
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     }
 }
\ No newline at end of file
