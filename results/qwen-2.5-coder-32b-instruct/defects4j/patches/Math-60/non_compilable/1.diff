diff --git a/tmp/b62a42ac-48fa-48bb-a385-ea141e751aca_buggy.java b/tmp/47df0501-85fd-4271-be34-a0a7f3500439_fixed.java
index 3127f85..5018bb6 100644
--- a/tmp/b62a42ac-48fa-48bb-a385-ea141e751aca_buggy.java
+++ b/tmp/47df0501-85fd-4271-be34-a0a7f3500439_fixed.java
@@ -1,24 +1,22 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
  */
-    public double cumulativeProbability(double x) throws MathException {
+public double cumulativeProbability(double x) {
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+    if (x == Double.NEGATIVE_INFINITY) {
         return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+    } else if (x == Double.POSITIVE_INFINITY) {
         return 1;
+    } else if (dev > 40 * standardDeviation) {
+        return 1;
+    } else if (dev < -40 * standardDeviation) {
+        return 0;
     } else {
-                throw ex;
-            }
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     }
 }
\ No newline at end of file
