diff --git a/tmp/498b8226-11ca-4c75-bb18-a18155dd68eb_buggy.java b/tmp/4296554d-9466-43e2-84f3-c758c19a507e_fixed.java
index 3127f85..27fcb56 100644
--- a/tmp/498b8226-11ca-4c75-bb18-a18155dd68eb_buggy.java
+++ b/tmp/4296554d-9466-43e2-84f3-c758c19a507e_fixed.java
@@ -1,24 +1,38 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
+        if (x == Double.NEGATIVE_INFINITY) {
+            return 0;
+        } else if (x == Double.POSITIVE_INFINITY) {
+            return 1;
+        }
+
         final double dev = x - mean;
+        double z = dev / (standardDeviation * FastMath.sqrt(2.0));
+
+        // Handle extreme values directly to avoid convergence issues
+        if (z < -40) {
+            return 0;
+        } else if (z > 40) {
+            return 1;
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(z));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (z < -20) { // JDK 1.5 blows at 38
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (z > 20) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
