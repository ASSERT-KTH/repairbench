diff --git a/tmp/45e79a88-ffd5-4c06-ac9a-b12dc41e7f80_buggy.java b/tmp/ed8f793d-6bfa-4eec-84fe-5cd5b334ca71_fixed.java
index dc93be3..92f7cb5 100644
--- a/tmp/45e79a88-ffd5-4c06-ac9a-b12dc41e7f80_buggy.java
+++ b/tmp/ed8f793d-6bfa-4eec-84fe-5cd5b334ca71_fixed.java
@@ -1,14 +1,22 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isKnownTag() && !tag.isEmpty()) {
+            // If the tag is known and not supposed to be empty, don't treat it as self-closing
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            return el;
+        } else {
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
