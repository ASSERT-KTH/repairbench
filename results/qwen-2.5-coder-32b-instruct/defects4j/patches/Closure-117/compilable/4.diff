diff --git a/tmp/c0c26b06-4227-44b8-808b-d7a299a04d58_buggy.java b/tmp/7d35b6c4-cc8f-4b2e-993e-ce2bc6ada03f_fixed.java
index 39981f0..3d4eaba 100644
--- a/tmp/c0c26b06-4227-44b8-808b-d7a299a04d58_buggy.java
+++ b/tmp/7d35b6c4-cc8f-4b2e-993e-ce2bc6ada03f_fixed.java
@@ -1,65 +1,80 @@
   /**
    * Given a node, get a human-readable name for the type of that node so
    * that will be easy for the programmer to find the original declaration.
    *
    * For example, if SubFoo's property "bar" might have the human-readable
    * name "Foo.prototype.bar".
    *
    * @param n The node.
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
   String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // Return the constructor's display name if available
+          FunctionType constructor = objectType.getConstructor();
+          if (constructor != null) {
+            String constructorName = constructor.getDisplayName();
+            if (constructorName != null) {
+              return constructorName + "." + propName;
+            }
+          }
           return objectType.toString() + "." + propName;
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
+      FunctionType functionType = type.toMaybeFunctionType();
+      if (functionType != null) {
+        String displayName = functionType.getDisplayName();
+        if (displayName != null) {
+          return displayName;
+        }
+      }
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
