diff --git a/tmp/62071719-d94c-4c39-ba83-93ae964a0ee7_buggy.java b/tmp/f0523050-bb56-45ba-9d1a-b7cdf7c07108_fixed.java
index 21f64c6..d7a74cf 100644
--- a/tmp/62071719-d94c-4c39-ba83-93ae964a0ee7_buggy.java
+++ b/tmp/f0523050-bb56-45ba-9d1a-b7cdf7c07108_fixed.java
@@ -1,23 +1,28 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0) return 0; // Edge case: empty sequence
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
+        // scan to first instance of startChar:
+        if (startChar == input[offset]) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = offset + seq.length();
+            boolean match = true;
+            for (int j = 1; i < last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
