diff --git a/tmp/4732ada7-d178-4f98-9196-77c83983b7ff_buggy.java b/tmp/5d1dbd3d-739d-4d2b-891a-db61c39e5028_fixed.java
index 21f64c6..c02ffcb 100644
--- a/tmp/4732ada7-d178-4f98-9196-77c83983b7ff_buggy.java
+++ b/tmp/5d1dbd3d-739d-4d2b-891a-db61c39e5028_fixed.java
@@ -1,23 +1,31 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return 0;
+    }
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (input[offset] == startChar) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            boolean found = true;
+            for (int j = 1; i < last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    found = false;
+                    break;
+                }
+            }
+            if (found && (last == offset + seq.length() || seq.charAt(seq.length() - 1) == input[last - 1])) {
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
