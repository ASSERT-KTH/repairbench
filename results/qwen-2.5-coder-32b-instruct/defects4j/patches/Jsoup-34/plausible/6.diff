diff --git a/tmp/a387f435-4807-471c-a117-bef82eefd6f7_buggy.java b/tmp/09b88a85-fe3b-4e0e-af95-cc849cc80932_fixed.java
index 21f64c6..802c86d 100644
--- a/tmp/a387f435-4807-471c-a117-bef82eefd6f7_buggy.java
+++ b/tmp/09b88a85-fe3b-4e0e-af95-cc849cc80932_fixed.java
@@ -1,23 +1,29 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return 0; // If the sequence is empty, return 0 as per typical behavior.
+    }
+    
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
+        // scan to first instance of startChar:
+        if (startChar == input[offset]) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = offset + seq.length();
+            int j = 1;
+            while (i < last && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
+            if (i == last) { // found full sequence
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
