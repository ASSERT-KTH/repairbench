diff --git a/tmp/6a91312d-bc8c-4dd9-ab6b-d33dc8f79e1a_buggy.java b/tmp/d01f678e-79de-4b95-8f64-1eaecc57277f_fixed.java
index 21f64c6..9e3bf6b 100644
--- a/tmp/6a91312d-bc8c-4dd9-ab6b-d33dc8f79e1a_buggy.java
+++ b/tmp/d01f678e-79de-4b95-8f64-1eaecc57277f_fixed.java
@@ -1,23 +1,33 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLength = seq.length();
+    if (seqLength == 0) {
+        return 0; // If the sequence is empty, return 0
+    }
+    
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    for (int offset = pos; offset <= length - seqLength; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (startChar != input[offset]) {
+            continue;
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = offset + seqLength;
+        boolean found = true;
+        for (int j = 1; i < last; i++, j++) {
+            if (i >= length || seq.charAt(j) != input[i]) {
+                found = false;
+                break;
+            }
+        }
+        if (found) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
