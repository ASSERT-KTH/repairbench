diff --git a/tmp/06346eb8-f196-4502-98b7-cefd437bc1bc_buggy.java b/tmp/f271e932-7d32-4eb9-8ee9-85c8440805cd_fixed.java
index b5d94e0..78176d1 100644
--- a/tmp/06346eb8-f196-4502-98b7-cefd437bc1bc_buggy.java
+++ b/tmp/f271e932-7d32-4eb9-8ee9-85c8440805cd_fixed.java
@@ -1,26 +1,29 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
         return;
     }
 
     int visits = 0;
     do {
         Node c = node.getFirstChild();
         while (c != null) {
             traverse(c);
             Node next = c.getNext();
             c = next;
         }
 
         visit(node);
         visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+        // Prevent infinite loops by setting a reasonable limit
+        if (visits >= 10000) {
+            throw new IllegalStateException("Too many iterations while traversing node: " + node.toStringTree());
+        }
     } while (shouldRetraverse(node));
 
     exitNode(node);
 }
\ No newline at end of file
