diff --git a/tmp/9dd44ff6-b30e-45fe-8bc9-5919ef1844fb_buggy.java b/tmp/8ec28a5e-aa3a-4cee-9639-c1993a045e5c_fixed.java
index efa499e..b023b00 100644
--- a/tmp/9dd44ff6-b30e-45fe-8bc9-5919ef1844fb_buggy.java
+++ b/tmp/8ec28a5e-aa3a-4cee-9639-c1993a045e5c_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
+    double mostNegative = negativeVarBasicRow != null ? getEntry(negativeVarBasicRow, getRhsOffset()) : 0;
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
+        if (basicRow == null) {
+            coefficients[i] = 0;
+        } else {
             // if the basic row is found to be the objective function row
             // set the coefficient to 0 -> this case handles unconstrained 
             // variables that are still part of the objective function
             if (basicRows.contains(basicRow)) {
                 // if multiple variables can take a given value
                 // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = 0;
             } else {
                 basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
+            }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
