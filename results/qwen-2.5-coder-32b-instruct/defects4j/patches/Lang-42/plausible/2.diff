diff --git a/tmp/0915b1f2-acf3-4b25-88ee-9ccb4825d23c_buggy.java b/tmp/2c2657de-f131-4158-a0ac-11627e7f42bf_fixed.java
index 822447c..b2bcc81 100644
--- a/tmp/0915b1f2-acf3-4b25-88ee-9ccb4825d23c_buggy.java
+++ b/tmp/2c2657de-f131-4158-a0ac-11627e7f42bf_fixed.java
@@ -1,37 +1,51 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (Character.isHighSurrogate(c) && i + 1 < len) {
+                    char nextChar = str.charAt(i + 1);
+                    if (Character.isLowSurrogate(nextChar)) {
+                        int codePoint = Character.toCodePoint(c, nextChar);
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                        i++; // Skip the next character as it is part of the surrogate pair
+                    } else {
+                        // Handle the case where there is a high surrogate without a matching low surrogate
+                        writer.write("&#");
+                        writer.write(Integer.toString(c, 10));
+                        writer.write(';');
+                    }
+                } else if (c > 0x7F) {
                     writer.write("&#");
                     writer.write(Integer.toString(c, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
         }
     }
\ No newline at end of file
