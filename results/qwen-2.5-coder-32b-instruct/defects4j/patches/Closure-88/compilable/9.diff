diff --git a/tmp/628b3a3e-23a6-48db-b888-7c464dcaaccc_buggy.java b/tmp/ad074581-74a7-46c7-99f1-44d74cfcf7a8_fixed.java
index 9353941..3a4442c 100644
--- a/tmp/628b3a3e-23a6-48db-b888-7c464dcaaccc_buggy.java
+++ b/tmp/ad074581-74a7-46c7-99f1-44d74cfcf7a8_fixed.java
@@ -1,30 +1,23 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
         if (NodeUtil.isLhs(n, n.getParent())) {
             // The expression to which the assignment is made is evaluated before
             // the RHS is evaluated (normal left to right evaluation) but the KILL
             // occurs after the RHS is evaluated.
             return VariableLiveness.KILL;
         } else {
             return VariableLiveness.READ;
         }
     }
 
     // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
