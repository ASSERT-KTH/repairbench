diff --git a/tmp/21b7ace0-b737-4324-9f21-ea71ab9b7a57_buggy.java b/tmp/0cd4ac12-4aa8-4914-8570-eab5c15d63b1_fixed.java
index 9353941..1fdbdd9 100644
--- a/tmp/21b7ace0-b737-4324-9f21-ea71ab9b7a57_buggy.java
+++ b/tmp/0cd4ac12-4aa8-4914-8570-eab5c15d63b1_fixed.java
@@ -1,30 +1,39 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
+        // Check if the assignment is part of a binary operation
+        Node parent = n.getParent();
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // The variable is being assigned, check if it's read before the assignment
+          if (parent.getParent().isAnd() || parent.getParent().isOr() || parent.getParent().isHook()) {
+            // In these cases, the left side is evaluated before the right side
+            for (Node child = parent.getParent().getFirstChild(); child != parent; child = child.getNext()) {
+              VariableLiveness state = isVariableReadBeforeKill(child, variable);
+              if (state != VariableLiveness.MAYBE_LIVE) {
+                return state;
+              }
+            }
+          }
+        }
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
