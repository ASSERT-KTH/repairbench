diff --git a/tmp/b8c91933-7695-48c1-84a4-43490e3a7bc0_buggy.java b/tmp/54faee92-9e09-4791-8792-f7a5577e1f4e_fixed.java
index 9353941..753235f 100644
--- a/tmp/b8c91933-7695-48c1-84a4-43490e3a7bc0_buggy.java
+++ b/tmp/54faee92-9e09-4791-8792-f7a5577e1f4e_fixed.java
@@ -1,30 +1,61 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+
+    // Special handling for binary operations where the left side could be a read
+    if (n.isAssign() && NodeUtil.isName(n.getFirstChild())) {
+      Node lhs = n.getFirstChild();
+      if (variable.equals(lhs.getString())) {
+        // Check if there is any read before this assignment in the current expression
+        if (isVariableReadInExpression(n.getNext(), variable)) {
+          return VariableLiveness.READ;
+        }
+        return VariableLiveness.KILL;
+      }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
+
+  private boolean isVariableReadInExpression(Node n, String variable) {
+    if (n == null) {
+      return false;
+    }
+    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
+      // If n is not a lhs of an assignment, it is a read
+      if (!NodeUtil.isLhs(n, n.getParent())) {
+        return true;
+      }
+    }
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (isVariableReadInExpression(child, variable)) {
+        return true;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
