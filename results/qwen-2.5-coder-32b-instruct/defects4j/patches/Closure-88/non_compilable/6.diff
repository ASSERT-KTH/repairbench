diff --git a/tmp/c5b34296-45e6-4e88-b8fd-15697f04b13d_buggy.java b/tmp/e68c0e7e-8c3f-418e-b127-41c97fe8dfd2_fixed.java
index 9353941..ec9c39e 100644
--- a/tmp/c5b34296-45e6-4e88-b8fd-15697f04b13d_buggy.java
+++ b/tmp/e68c0e7e-8c3f-418e-b127-41c97fe8dfd2_fixed.java
@@ -1,30 +1,37 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      if (NodeUtil.isLhs(n, parent)) {
+        // If the variable is part of an assignment, check if it's the first reference.
+        // We need to ensure that this is not a read within the RHS of an assignment.
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+          // This is a kill if it's the LHS of an assignment.
           return VariableLiveness.KILL;
         } else {
+          // If it's used in an expression and not the LHS of an assignment, it's a read.
+          return VariableLiveness.READ;
+        }
+      } else {
+        // If it's not part of the LHS of an assignment, it's a read.
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
