diff --git a/tmp/e8058318-49e7-4843-bcf2-7ccf1ce84dde_buggy.java b/tmp/0e2453b7-50a0-47da-8905-ad554bb067e3_fixed.java
index 9353941..26dc277 100644
--- a/tmp/e8058318-49e7-4843-bcf2-7ccf1ce84dde_buggy.java
+++ b/tmp/0e2453b7-50a0-47da-8905-ad554bb067e3_fixed.java
@@ -1,30 +1,36 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
         if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
             return VariableLiveness.KILL;
         } else {
             return VariableLiveness.READ;
         }
     }
 
     // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
+
+    // Special handling for short-circuit operators
+    if (n.isAnd() || n.isOr()) {
+        VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+        if (leftState == VariableLiveness.KILL) {
+            return VariableLiveness.KILL;
+        } else if (leftState == VariableLiveness.READ) {
+            VariableLiveness rightState = isVariableReadBeforeKill(n.getSecondChild(), variable);
+            if (rightState == VariableLiveness.KILL) {
+                return VariableLiveness.READ; // READ first, then KILL
+            } else if (rightState == VariableLiveness.READ) {
+                return VariableLiveness.READ; // READ first, then READ
+            }
+        }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
