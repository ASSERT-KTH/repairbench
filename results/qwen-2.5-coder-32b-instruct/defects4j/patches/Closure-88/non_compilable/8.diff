diff --git a/tmp/e10e994d-0c37-4fc2-91d4-13d2484e038f_buggy.java b/tmp/4b4411b8-888f-4fa1-b80e-ca09fd4d237f_fixed.java
index 9353941..deb9ff4 100644
--- a/tmp/e10e994d-0c37-4fc2-91d4-13d2484e038f_buggy.java
+++ b/tmp/4b4411b8-888f-4fa1-b80e-ca09fd4d237f_fixed.java
@@ -1,30 +1,40 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
+    Node parent = n.getParent();
+    if (parent != null) {
+      switch (parent.getToken()) {
+        case NAME:
+          // This handles cases where the variable is used in a function call
+          // or another expression where it's not clearly LHS or RHS.
+          return VariableLiveness.READ;
+        default:
+          if (NodeUtil.isLhs(n, parent)) {
             // The expression to which the assignment is made is evaluated before
             // the RHS is evaluated (normal left to right evaluation) but the KILL
             // occurs after the RHS is evaluated.
             return VariableLiveness.KILL;
           } else {
             return VariableLiveness.READ;
           }
       }
+    }
+  }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
