diff --git a/tmp/5e217b0b-e756-4205-a8da-1953f45f4e9c_buggy.java b/tmp/6ff86ab4-2da1-45ef-8e97-8c73bbda2b85_fixed.java
index b98f0a7..1a8fe26 100644
--- a/tmp/5e217b0b-e756-4205-a8da-1953f45f4e9c_buggy.java
+++ b/tmp/6ff86ab4-2da1-45ef-8e97-8c73bbda2b85_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backward type inference for the constructor arguments
+                Node arg = constructor.getNext();
+                for (int i = 0; arg != null; arg = arg.getNext(), i++) {
+                    JSType paramType = ct.getParameterType(i);
+                    JSType currentType = arg.getJSType();
+                    if (currentType != null) {
+                        JSType inferredType = currentType.getLeastSupertype(paramType);
+                        arg.setJSType(inferredType);
+                    } else {
+                        arg.setJSType(paramType);
                     }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
                     scope = traverse(arg, scope);
                 }
+            }
+        }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
