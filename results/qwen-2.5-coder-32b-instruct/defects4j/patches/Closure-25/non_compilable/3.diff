diff --git a/tmp/7e304bac-1a7c-4ff1-b4ee-3bc3e93f04c4_buggy.java b/tmp/46f0f131-e9db-413f-9dc7-91bbe9f877cd_fixed.java
index b98f0a7..76db407 100644
--- a/tmp/7e304bac-1a7c-4ff1-b4ee-3bc3e93f04c4_buggy.java
+++ b/tmp/46f0f131-e9db-413f-9dc7-91bbe9f877cd_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backwards inference for the arguments
+                NodeList arguments = n.getSecondChild();
+                if (arguments != null) {
+                    FunctionType paramType = ct;
+                    for (Node arg = arguments.getFirstChild(); arg != null; arg = arg.getNext()) {
+                        paramType = paramType.getParameterType(arg.getChildIndex());
+                        JSType argType = arg.getJSType();
+                        if (argType != null && !argType.isUnknownType()) {
+                            scope = inferForArguments(scope, arg, paramType);
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
+
+private FlowScope inferForArguments(FlowScope scope, Node arg, JSType paramType) {
+    if (paramType != null && !paramType.isUnknownType()) {
+        scope = scope.inferSlotType(arg.getString(), paramType);
+    }
+    return scope;
+}
\ No newline at end of file
