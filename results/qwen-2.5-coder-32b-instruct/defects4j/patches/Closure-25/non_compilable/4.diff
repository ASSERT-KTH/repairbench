diff --git a/tmp/6d180dd7-951b-4cba-9507-6aea57ea13b7_buggy.java b/tmp/47b0eb2b-66f4-45ae-8895-a3bcd6fb3fd0_fixed.java
index b98f0a7..357f34a 100644
--- a/tmp/6d180dd7-951b-4cba-9507-6aea57ea13b7_buggy.java
+++ b/tmp/47b0eb2b-66f4-45ae-8895-a3bcd6fb3fd0_fixed.java
@@ -1,29 +1,34 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backwards inference for constructor parameters.
+                List<Node> args = new ArrayList<>();
+                for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+                    args.add(arg);
+                }
+                ct.inferJSTypesFromCallNode(n, getGlobalTypedScope(), args);
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
