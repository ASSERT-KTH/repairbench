diff --git a/tmp/fb2ddef9-4132-4e78-9ebf-176cb9029da9_buggy.java b/tmp/52d3087b-2111-4606-a368-fb05fe587541_fixed.java
index b98f0a7..6154cdf 100644
--- a/tmp/fb2ddef9-4132-4e78-9ebf-176cb9029da9_buggy.java
+++ b/tmp/52d3087b-2111-4606-a368-fb05fe587541_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Process the arguments
+    Node arg = constructor.getNext();
+    int argIndex = 0;
+    while (arg != null) {
         scope = traverse(arg, scope);
+
+        // Update the type of the argument based on the constructor's parameter types
+        if (constructorType != null && constructorType instanceof FunctionType) {
+            FunctionType ctorType = (FunctionType) constructorType;
+            Node param = ctorType.getParametersNode().getChildAt(argIndex);
+            if (param != null) {
+                JSType paramType = param.getJSType();
+                if (paramType != null) {
+                    JSType argType = arg.getJSType();
+                    if (argType != null && !argType.isUnknownType() && !argType.isSubtype(paramType)) {
+                        arg.setJSType(argType.getLeastSupertype(paramType));
+                    }
+                }
+            }
+        }
+        argIndex++;
+        arg = arg.getNext();
     }
     return scope;
 }
\ No newline at end of file
