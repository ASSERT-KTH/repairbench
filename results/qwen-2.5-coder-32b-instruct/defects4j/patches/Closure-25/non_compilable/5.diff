diff --git a/tmp/3e8192aa-c2ce-4baf-a871-8338eff13d2d_buggy.java b/tmp/c78b629b-6482-4b7c-8e18-a143499c0913_fixed.java
index b98f0a7..848927f 100644
--- a/tmp/3e8192aa-c2ce-4baf-a871-8338eff13d2d_buggy.java
+++ b/tmp/c78b629b-6482-4b7c-8e18-a143499c0913_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Perform backwards type inference for the arguments
+                Node arg = constructor.getNext();
+                if (ct.hasInstanceType()) {
+                    FunctionType paramType = ct;
+                    for (int i = 0; arg != null; arg = arg.getNext(), i++) {
+                        Node paramNode = paramType.getParameters().get(i);
+                        JSType paramJSType = paramNode.getJSType();
+                        JSType argJSType = traverse(arg, scope).getJSTypeOf(arg);
+                        if (argJSType != null && paramJSType != null) {
+                            scope = scope.createChildScope();
+                            scope.inferSlotType(arg.getString(), paramJSType);
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
