diff --git a/tmp/bbe4cb80-5c83-4ed8-be1e-a9e1603eb442_buggy.java b/tmp/38721216-1086-42c1-a387-67ac671b83d0_fixed.java
index b98f0a7..07266a7 100644
--- a/tmp/bbe4cb80-5c83-4ed8-be1e-a9e1603eb442_buggy.java
+++ b/tmp/38721216-1086-42c1-a387-67ac671b83d0_fixed.java
@@ -1,29 +1,45 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backwards inference on the constructor parameters
+                FunctionType instanceType = ct.getInstanceType();
+                if (instanceType != null) {
+                    Node params = ct.getParametersNode();
+                    Node args = constructor.getNext();
+                    for (int i = 0; i < params.getChildCount() && args != null; i++) {
+                        Node param = params.getChildAtIndex(i);
+                        JSType paramType = param.getJSType();
+                        Node arg = args;
+                        JSType argType = arg.getJSType();
+                        if (argType != null && paramType != null) {
+                            arg.setJSType(argType.intersectionWith(paramType));
+                        }
+                        args = args.getNext();
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
