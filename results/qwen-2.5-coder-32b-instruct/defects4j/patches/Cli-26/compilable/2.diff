diff --git a/tmp/09d33986-d408-4c61-92d0-5ec99cbd5bc7_buggy.java b/tmp/3c3b5c6b-5f38-499c-bbe8-92a50b6da7ea_fixed.java
index cc69d41..7718bee 100644
--- a/tmp/09d33986-d408-4c61-92d0-5ec99cbd5bc7_buggy.java
+++ b/tmp/3c3b5c6b-5f38-499c-bbe8-92a50b6da7ea_fixed.java
@@ -1,29 +1,40 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
  * @param opt the <code>java.lang.String</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
-    public static Option create(String opt) throws IllegalArgumentException
-    {
+public static Option create(String opt) throws IllegalArgumentException {
+    // validate the option character
+    if (opt == null || opt.length() != 1 || !isValidChar(opt.charAt(0))) {
+        throw new IllegalArgumentException("opt cannot be null, empty, or invalid");
+    }
+
     // create the option
     Option option = new Option(opt, description);
 
     // set the option properties
     option.setLongOpt(longopt);
     option.setRequired(required);
     option.setOptionalArg(optionalArg);
     option.setArgs(numberOfArgs);
     option.setType(type);
     option.setValueSeparator(valuesep);
     option.setArgName(argName);
+
     // reset the OptionBuilder properties
     OptionBuilder.reset();
 
     // return the Option instance
     return option;
 }
+
+// Helper method to check if a character is a valid option character
+private static boolean isValidChar(char c) {
+    // You can define the valid characters here. For simplicity, assuming all non-whitespace characters are valid.
+    return !Character.isWhitespace(c);
+}
\ No newline at end of file
