diff --git a/tmp/25d96942-3047-43a5-8b7b-9fd0b97b0ee4_buggy.java b/tmp/b570419a-3b61-40b0-b37c-a858c369b9fe_fixed.java
index b05b859..584a770 100644
--- a/tmp/25d96942-3047-43a5-8b7b-9fd0b97b0ee4_buggy.java
+++ b/tmp/b570419a-3b61-40b0-b37c-a858c369b9fe_fixed.java
@@ -1,61 +1,65 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
         if (outStream == null) {
             setErrorManager(
                 new LoggerErrorManager(createMessageFormatter(), logger));
         } else {
             PrintStreamErrorManager printer =
                 new PrintStreamErrorManager(createMessageFormatter(), outStream);
             printer.setSummaryDetailLevel(options.summaryDetailLevel);
             setErrorManager(printer);
         }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = false;
     } else if (!options.checkTypes) {
         // If DiagnosticGroups did not override the plain checkTypes
         // option, and checkTypes is enabled, then turn off the
         // parser type warnings.
         options.setWarningLevel(
             DiagnosticGroup.forType(
                 RhinoErrorReporter.TYPE_PARSE_ERROR),
             CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
         options.setWarningLevel(
             DiagnosticGroups.GLOBAL_THIS,
             options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
         (warningsGuard == null || !warningsGuard.disables(
             DiagnosticGroups.CHECK_VARIABLES))) {
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
+    } else if (options.checkSymbols && options.warningLevel == CheckLevel.QUIET) {
+        // Ensure that if checkSymbols is true and warning level is QUIET,
+        // we do not add a guard to turn off CHECK_VARIABLES.
+        guards.removeIf(guard -> guard instanceof DiagnosticGroupWarningsGuard &&
+                                  ((DiagnosticGroupWarningsGuard) guard).getDiagnosticGroup().equals(DiagnosticGroups.CHECK_VARIABLES));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
