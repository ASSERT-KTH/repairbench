diff --git a/tmp/f1cd3df5-9cd9-488c-bea3-035bcf183e61_buggy.java b/tmp/b531f4eb-cb10-4aee-b0ee-b6a1dfc65185_fixed.java
index 1c875ad..a5f9a15 100644
--- a/tmp/f1cd3df5-9cd9-488c-bea3-035bcf183e61_buggy.java
+++ b/tmp/b531f4eb-cb10-4aee-b0ee-b6a1dfc65185_fixed.java
@@ -1,31 +1,37 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object varargArray = invocation.getRawArguments()[indexOfVararg];
+        if (varargArray != null) {
+            int varargLength = Array.getLength(varargArray);
+            for (int i = 0; i < matchers.size(); i++) {
+                Matcher m = matchers.get(i);
+                if (m instanceof CapturesArguments) {
+                    if (i < indexOfVararg || i == indexOfVararg && varargLength == 0) {
+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));
+                    } else {
+                        for (int j = 0; j < varargLength; j++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varargArray, j));
+                        }
+                    }
+                }
+            }
+        } else {
+            for (int i = 0; i < matchers.size(); i++) {
+                Matcher m = matchers.get(i);
+                if (m instanceof CapturesArguments) {
+                    if (i < indexOfVararg) {
+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
+                ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
