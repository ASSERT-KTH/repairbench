diff --git a/tmp/6eb25cf3-5a4c-4c10-8178-8c4d2db4e0fb_buggy.java b/tmp/f17a7f8a-67bc-43ad-b2de-a3fa768a0219_fixed.java
index e69de29..cc6ce25 100644
--- a/tmp/6eb25cf3-5a4c-4c10-8178-8c4d2db4e0fb_buggy.java
+++ b/tmp/f17a7f8a-67bc-43ad-b2de-a3fa768a0219_fixed.java
@@ -0,0 +1,46 @@
+private void _testFieldNameQuotingEnabled(JsonFactory jsonFactory, boolean enableFeature, boolean defaultQuoting, String expected) throws IOException {
+    JsonGenerator gen = jsonFactory.createGenerator(System.out, JsonEncoding.UTF8);
+    
+    if (enableFeature) {
+        gen.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    } else {
+        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+    
+    // If defaultQuoting is false, ensure the feature is disabled regardless of enableFeature
+    if (!defaultQuoting) {
+        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+
+    // Write a simple JSON object {"foo":1}
+    gen.writeStartObject();
+    gen.writeFieldName("foo");
+    gen.writeNumber(1);
+    gen.writeEndObject();
+    gen.flush();
+    
+    // Capture the output and compare it with the expected string
+    StringWriter writer = new StringWriter();
+    gen = jsonFactory.createGenerator(writer, JsonEncoding.UTF8);
+    
+    if (enableFeature) {
+        gen.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    } else {
+        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+    
+    if (!defaultQuoting) {
+        gen.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
+    }
+
+    gen.writeStartObject();
+    gen.writeFieldName("foo");
+    gen.writeNumber(1);
+    gen.writeEndObject();
+    gen.flush();
+
+    String output = writer.toString();
+    assertEquals(expected, output);
+    
+    gen.close();
+}
\ No newline at end of file
