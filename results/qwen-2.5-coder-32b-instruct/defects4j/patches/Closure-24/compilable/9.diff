diff --git a/tmp/a12114a6-dda4-4c65-83a2-842e40ac3bc2_buggy.java b/tmp/ad89dd7f-7d75-44c3-a7a4-a8b1683081d5_fixed.java
index 602226b..cefa33d 100644
--- a/tmp/a12114a6-dda4-4c65-83a2-842e40ac3bc2_buggy.java
+++ b/tmp/ad89dd7f-7d75-44c3-a7a4-a8b1683081d5_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
                 // Bleeding functions already get a BAD_PARAMETERS error, so just
                 // do nothing.
                 // Parameters of the scope function also get a BAD_PARAMETERS
                 // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // Report non-alias locals
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
+        } else {
+            // Report non-alias locals defined in other contexts (e.g., function parameters)
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
