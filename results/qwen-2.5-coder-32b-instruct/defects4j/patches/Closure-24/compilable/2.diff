diff --git a/tmp/8f32b67a-c875-48ca-af4a-00ba0ce51436_buggy.java b/tmp/9e7a5bcb-cc50-4dc1-84b4-b391fbe6ef1f_fixed.java
index 602226b..40a0746 100644
--- a/tmp/8f32b67a-c875-48ca-af4a-00ba0ce51436_buggy.java
+++ b/tmp/9e7a5bcb-cc50-4dc1-84b4-b391fbe6ef1f_fixed.java
@@ -1,26 +1,18 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+      // Check if the variable is a simple assignment to a qualified name
+      if (!n.hasChildren() || !n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
+      }
     } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
+      // If the variable is not declared in a var statement, it's a local or non-alias
+      String name = n.getString();
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);
     }
   }
 }
\ No newline at end of file
