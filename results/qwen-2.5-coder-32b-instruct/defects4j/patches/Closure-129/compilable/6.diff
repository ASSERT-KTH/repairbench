diff --git a/tmp/277e5104-aee8-4e6d-ba76-b6c4ed9400bc_buggy.java b/tmp/65a747b9-a837-4b3d-aeb9-2566d9b6aa22_fixed.java
index e8705ac..9699885 100644
--- a/tmp/277e5104-aee8-4e6d-ba76-b6c4ed9400bc_buggy.java
+++ b/tmp/65a747b9-a837-4b3d-aeb9-2566d9b6aa22_fixed.java
@@ -1,24 +1,30 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Ignore cast nodes.
+      if (first.isCast()) {
+        first = first.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
+      // Check if the call is a free call.
+      boolean isFreeCall = true;
+      if (NodeUtil.isGet(first)) {
+        // If the first child is a property access, it's not a free call.
+        isFreeCall = false;
+      } else if (first.isName()) {
+        // If the first child is a name, it could be a free call.
+        isFreeCall = true;
       }
+      n.putBooleanProp(Node.FREE_CALL, isFreeCall);
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
