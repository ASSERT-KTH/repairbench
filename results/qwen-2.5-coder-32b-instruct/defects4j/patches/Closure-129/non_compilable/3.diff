diff --git a/tmp/dfa36c36-83df-4350-9a4b-9be0ddc76baa_buggy.java b/tmp/d5181500-ffae-4a15-89a4-71dedaa7ddfe_fixed.java
index e8705ac..88012c6 100644
--- a/tmp/dfa36c36-83df-4350-9a4b-9be0ddc76baa_buggy.java
+++ b/tmp/d5181500-ffae-4a15-89a4-71dedaa7ddfe_fixed.java
@@ -1,24 +1,30 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Keep track of the "this" context of a call. A call without an explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Ignore cast nodes.
+  if (NodeUtil.isCast(first)) {
+    first = first.getFirstChild();
+  }
 
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
+  // Check if the call is a free call.
+  boolean isFreeCall = false;
+  if (NodeUtil.isGet(first) || first.isName() || NodeUtil.isNew(first)) {
+    Node target = NodeUtil.getCallTarget(n);
+    if (target.isName() || NodeUtil.isGet(target)) {
+      isFreeCall = true;
+    }
+  } else {
+    isFreeCall = true;
   }
 
+  n.putBooleanProp(Node.FREE_CALL, isFreeCall);
+
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
