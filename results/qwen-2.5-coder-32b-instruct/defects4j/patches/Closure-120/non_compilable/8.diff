diff --git a/tmp/017f88bf-733a-488c-b47d-af7f3604c7d4_buggy.java b/tmp/c734af9f-d19d-4968-a396-d800b64c67cf_fixed.java
index 07b0792..a8a193a 100644
--- a/tmp/017f88bf-733a-488c-b47d-af7f3604c7d4_buggy.java
+++ b/tmp/c734af9f-d19d-4968-a396-d800b64c67cf_fixed.java
@@ -1,22 +1,41 @@
 /**
  * @return Whether the variable is only assigned a value once for its
  *     lifetime.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
-      // Make sure this assignment is not in a loop.
+  // Make sure this assignment is not in a loop and the function is not called multiple times.
   for (BasicBlock block = ref.getBasicBlock();
        block != null; block = block.getParent()) {
     if (block.isFunction) {
+      // Check if the function can be called multiple times
+      if (isFunctionCalledMultipleTimes(block)) {
+        return false;
+      }
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
   return true;
 }
+
+/**
+ * @return Whether the function can be called multiple times.
+ */
+private boolean isFunctionCalledMultipleTimes(BasicBlock functionBlock) {
+  // This is a simplified check. In a real scenario, you would need a more sophisticated
+  // analysis to determine if a function is called multiple times. This example assumes
+  // that if the function has any call references, it can be called multiple times.
+  for (Reference ref : functionBlock.getReferences()) {
+    if (ref.getType() == Reference.Type.CALL) {
+      return true;
+    }
+  }
+  return false;
+}
\ No newline at end of file
