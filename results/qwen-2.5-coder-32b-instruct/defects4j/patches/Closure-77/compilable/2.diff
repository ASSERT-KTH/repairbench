diff --git a/tmp/73f5d144-f573-43a9-a6e4-7a5c255b5ac2_buggy.java b/tmp/fdf15e3b-db8c-4741-b2da-9364260fc2d7_fixed.java
index 89c5bf7..39f8106 100644
--- a/tmp/73f5d144-f573-43a9-a6e4-7a5c255b5ac2_buggy.java
+++ b/tmp/fdf15e3b-db8c-4741-b2da-9364260fc2d7_fixed.java
@@ -1,71 +1,105 @@
 /** Helper to escape javascript string as well as regular expression */
 static String strEscape(String s, char quote,
                         String doublequoteEscape,
                         String singlequoteEscape,
                         String backslashEscape,
                         CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
         char c = s.charAt(i);
         switch (c) {
             case '\n': sb.append("\\n"); break;
             case '\r': sb.append("\\r"); break;
             case '\t': sb.append("\\t"); break;
-        case '\\': sb.append(backslashEscape); break;
+            case '\\': 
+                // Check for \0, \x00, \u0000
+                if (i + 1 < s.length()) {
+                    char next = s.charAt(i + 1);
+                    if (next == '0') {
+                        // Check for \0
+                        if (i + 2 < s.length()) {
+                            char nextNext = s.charAt(i + 2);
+                            if (nextNext == 'x' || nextNext == 'u') {
+                                // This is not a simple \0, it might be \x00 or \u0000
+                                if (nextNext == 'x') {
+                                    // Check for \x00
+                                    if (i + 3 < s.length() && s.charAt(i + 2) == '0' && s.charAt(i + 3) == '0') {
+                                        sb.append("\\x00");
+                                        i += 3; // Skip the next three characters
+                                        break;
+                                    }
+                                } else if (nextNext == 'u') {
+                                    // Check for \u0000
+                                    if (i + 5 < s.length() && 
+                                        s.charAt(i + 2) == '0' && s.charAt(i + 3) == '0' && 
+                                        s.charAt(i + 4) == '0' && s.charAt(i + 5) == '0') {
+                                        sb.append("\\u0000");
+                                        i += 5; // Skip the next five characters
+                                        break;
+                                    }
+                                }
+                            }
+                        }
+                        sb.append("\\0");
+                        i += 1; // Skip the next character
+                        break;
+                    }
+                }
+                sb.append(backslashEscape); break;
             case '\"': sb.append(doublequoteEscape); break;
             case '\'': sb.append(singlequoteEscape); break;
             case '>':                       // Break --> into --\> or ]]> into ]]\>
                 if (i >= 2 &&
                     ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                      (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
                     sb.append("\\>");
                 } else {
                     sb.append(c);
                 }
                 break;
             case '<':
                 // Break </script into <\/script
                 final String END_SCRIPT = "/script";
 
                 // Break <!-- into <\!--
                 final String START_COMMENT = "!--";
 
                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                                     END_SCRIPT.length())) {
                     sb.append("<\\");
                 } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                            START_COMMENT.length())) {
                     sb.append("<\\");
                 } else {
                     sb.append(c);
                 }
                 break;
             default:
                 // If we're given an outputCharsetEncoder, then check if the
                 //  character can be represented in this character set.
                 if (outputCharsetEncoder != null) {
                     if (outputCharsetEncoder.canEncode(c)) {
                         sb.append(c);
                     } else {
                         // Unicode-escape the character.
                         appendHexJavaScriptRepresentation(sb, c);
                     }
                 } else {
                     // No charsetEncoder provided - pass straight latin characters
                     // through, and escape the rest.  Doing the explicit character
                     // check is measurably faster than using the CharsetEncoder.
                     if (c > 0x1f && c <= 0x7f) {
                         sb.append(c);
                     } else {
                         // Other characters can be misinterpreted by some js parsers,
                         // or perhaps mangled by proxies along the way,
                         // so we play it safe and unicode escape them.
                         appendHexJavaScriptRepresentation(sb, c);
                     }
                 }
         }
     }
     sb.append(quote);
     return sb.toString();
 }
\ No newline at end of file
