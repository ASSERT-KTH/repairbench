diff --git a/tmp/ed79ef26-872a-483f-9c18-c45ab4a50f51_buggy.java b/tmp/e814ebaa-258e-492a-97da-9a1bf6c44efe_fixed.java
index 757067a..69a853f 100644
--- a/tmp/ed79ef26-872a-483f-9c18-c45ab4a50f51_buggy.java
+++ b/tmp/e814ebaa-258e-492a-97da-9a1bf6c44efe_fixed.java
@@ -1,63 +1,134 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        if (initial < min || initial > max) {
+            throw new IllegalArgumentException("Initial value is not between min and max");
+        }
+        verifySequence(min, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // check if the initial guess brackets the root with either endpoint
+        if (yInitial * yMin < 0) {
+            return solve(f, min, initial, yMin, yInitial);
+        } else if (yInitial * yMax < 0) {
+            return solve(f, initial, max, yInitial, yMax);
         }
 
+        // if no bracketing is found, throw an IllegalArgumentException
+        throw new IllegalArgumentException("Function values at endpoints do not bracket the root");
 
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
+    }
+
+    // Helper method to perform the Brent algorithm
+    private double solve(final UnivariateRealFunction f, final double lo, final double hi, final double yLo, final double yHi)
+        throws MaxIterationsExceededException, FunctionEvaluationException {
+
+        double a = lo;
+        double fa = yLo;
+        double b = hi;
+        double fb = yHi;
+        double c = a;
+        double fc = fa;
+        boolean mflag = true;
+        double s = 0;
+        double fs = 0;
+        double d = 0;
+
+        for (int i = 0; i < maximalIterationCount; i++) {
+            if (Math.abs(fb) < Math.abs(fc)) {
+                a = b;
+                b = c;
+                c = a;
+                fa = fb;
+                fb = fc;
+                fc = fa;
+            }
+
+            double tol = relativeAccuracy * Math.abs(b) + absoluteAccuracy;
+            double m = 0.5 * (c - b);
+
+            if (Math.abs(m) <= tol || fb == 0) {
+                setResult(b, i);
+                return result;
+            }
+
+            if (Math.abs(e) > tol && Math.abs(fa) != Math.abs(fb)) {
+                s = fb / fa;
+                double p, q;
+                if (a == c) {
+                    p = 2 * m * s;
+                    q = 1 - s;
+                } else {
+                    q = fa / fc;
+                    double r = fb / fc;
+                    p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));
+                    q = (q - 1) * (r - 1) * (s - 1);
+                }
+                if (p > 0) {
+                    q = -q;
+                }
+                p = Math.abs(p);
+                double min1 = 3 * m * q - Math.abs(tol * q);
+                double min2 = Math.abs(e * q);
+                if (2 * p < Math.min(min1, min2)) {
+                    e = d;
+                    d = p / q;
+                } else {
+                    e = m;
+                    d = m;
+                }
+            } else {
+                e = m;
+                d = m;
+            }
+
+            if (Math.abs(d) > tol) {
+                s = d;
+            } else {
+                s = Math.copySign(tol, m);
+            }
+
+            a = b;
+            fa = fb;
+
+            if (Math.abs(s) > tol) {
+                b = b + s;
+            } else {
+                b = b + Math.copySign(tol, c - b);
+            }
+
+            fb = f.value(b);
+            if ((fb > 0 && fc > 0) || (fb < 0 && fc < 0)) {
+                c = a;
+                fc = fa;
+                d = b - a;
+                e = d;
+            }
+
+            mflag = (Math.abs(fb) < Math.abs(fc));
+        }
 
+        throw new MaxIterationsExceededException(maximalIterationCount);
     }
\ No newline at end of file
