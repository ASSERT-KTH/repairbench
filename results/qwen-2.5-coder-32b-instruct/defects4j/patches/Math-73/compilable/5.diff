diff --git a/tmp/01d39fd4-4c06-4ef8-9ea4-765c31b03086_buggy.java b/tmp/5f0e8f74-baf9-4335-a49f-1eb9512a67f1_fixed.java
index 757067a..db0ba41 100644
--- a/tmp/01d39fd4-4c06-4ef8-9ea4-765c31b03086_buggy.java
+++ b/tmp/5f0e8f74-baf9-4335-a49f-1eb9512a67f1_fixed.java
@@ -1,63 +1,79 @@
     /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
      * opposite sign function-wise).</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
      * @param initial the start value to use (must be set to min if no
      * initial point is known).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
-        }
-
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
+        // check if the initial guess is between the endpoints
+        if (initial < min || initial > max) {
+            throw new IllegalArgumentException("Initial value is out of the interval [" + min + ", " + max + "]");
+        }
+
+        // check if the function values at the endpoints have opposite signs
+        if (yMin * yMax > 0) {
+            // check if the initial guess brackets one of the endpoints
+            if (yInitial * yMin <= 0) {
+                return solve(f, min, initial, yMin, yInitial, min, yMin);
+            } else if (yInitial * yMax <= 0) {
+                return solve(f, initial, max, yInitial, yMax, initial, yInitial);
+            } else {
+                throw new IllegalArgumentException("Endpoints do not bracket a root and initial guess does not help");
+            }
+        }
+
+        // reduce interval if min and initial bracket the root
+        if (yInitial * yMin < 0) {
+            return solve(f, min, initial, yMin, yInitial, min, yMin);
+        }
+
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+            return solve(f, initial, max, yInitial, yMax, initial, yInitial);
         }
 
-
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
 
     }
\ No newline at end of file
