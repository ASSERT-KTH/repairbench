diff --git a/tmp/0c695d55-c6eb-4628-8161-6a147ff06bc3_buggy.java b/tmp/3f9df185-8ea7-474b-b4b8-86ceb4e87bef_fixed.java
index 25ca093..5eda97f 100644
--- a/tmp/0c695d55-c6eb-4628-8161-6a147ff06bc3_buggy.java
+++ b/tmp/3f9df185-8ea7-474b-b4b8-86ceb4e87bef_fixed.java
@@ -1,52 +1,90 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and determine charset
+    Charset detectedCharset = detectCharsetFromBOM(byteData);
+    if (detectedCharset != null) {
+        charsetName = detectedCharset.name();
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static Charset detectCharsetFromBOM(ByteBuffer byteData) {
+    byteData.mark();
+    Charset charset = null;
+    if (byteData.remaining() >= 3) {
+        if (byteData.get() == (byte) 0xEF && byteData.get() == (byte) 0xBB && byteData.get() == (byte) 0xBF) {
+            charset = Charset.forName("UTF-8");
+        } else {
+            byteData.reset();
+        }
+    }
+    if (charset == null && byteData.remaining() >= 4) {
+        if (byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {
+            charset = Charset.forName("UTF-32BE");
+        } else if (byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0x00 && byteData.get() == (byte) 0x00) {
+            charset = Charset.forName("UTF-32LE");
+        } else {
+            byteData.reset();
+        }
+    }
+    if (charset == null && byteData.remaining() >= 2) {
+        if (byteData.get() == (byte) 0xFE && byteData.get() == (byte) 0xFF) {
+            charset = Charset.forName("UTF-16BE");
+        } else if (byteData.get() == (byte) 0xFF && byteData.get() == (byte) 0xFE) {
+            charset = Charset.forName("UTF-16LE");
+        } else {
+            byteData.reset();
+        }
+    }
+    byteData.reset();
+    return charset;
+}
+
+private static String getCharsetFromContentType(String contentType) {
+    Pattern charsetPattern = Pattern.compile("charset=([\"']?)(?<charset>[^\"';]+)\\1", Pattern.CASE_INSENSITIVE);
+    Matcher matcher = charsetPattern.matcher(contentType);
+    if (matcher.find()) {
+        return matcher.group("charset").trim();
+    }
+    return null;
+}
\ No newline at end of file
