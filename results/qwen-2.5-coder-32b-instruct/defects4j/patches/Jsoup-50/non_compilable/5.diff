diff --git a/tmp/d99a401f-0b88-4761-a2d6-70867ddffd92_buggy.java b/tmp/dfb08e2f-8d12-47b6-b910-b9a2a972bf71_fixed.java
index 25ca093..888c0f5 100644
--- a/tmp/d99a401f-0b88-4761-a2d6-70867ddffd92_buggy.java
+++ b/tmp/dfb08e2f-8d12-47b6-b910-b9a2a972bf71_fixed.java
@@ -1,52 +1,74 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM
+    if (byteData.limit() >= 2) {
+        byte b1 = byteData.get(0);
+        byte b2 = byteData.get(1);
+        if (b1 == (byte) 0xFE && b2 == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+        } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE) {
+            charsetName = "UTF-16LE";
+        }
+    }
+    if (byteData.limit() >= 4) {
+        byte b3 = byteData.get(2);
+        byte b4 = byteData.get(3);
+        if (b1 == (byte) 0x00 && b2 == (byte) 0x00 && b3 == (byte) 0xFE && b4 == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+        } else if (b1 == (byte) 0xFF && b2 == (byte) 0xFE && b3 == (byte) 0x00 && b4 == (byte) 0x00) {
+            charsetName = "UTF-32LE";
+        }
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) {
+        // determine from meta. safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.trim().isEmpty() && !foundCharset.trim().equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    if (docData.length() > 0) {
+        if (docData.charAt(0) == '\uFEFF') { // UTF-8 BOM
+            docData = docData.substring(1);
+        } else if (charsetName == null) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
-            doc = null;
         }
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
