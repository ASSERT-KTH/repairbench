diff --git a/tmp/5fe37fc0-0d1b-4278-905c-cc1c15146500_buggy.java b/tmp/b9b4e422-91b6-43fd-bcf7-6abdefbdad90_fixed.java
index 25ca093..d2045e1 100644
--- a/tmp/5fe37fc0-0d1b-4278-905c-cc1c15146500_buggy.java
+++ b/tmp/b9b4e422-91b6-43fd-bcf7-6abdefbdad90_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    Charset detectedCharset = null;
 
     // look for BOM - overrides any other header or input
+    if (byteData.remaining() >= 3) {
+        int bom = byteData.getInt();
+        byteData.rewind();
+        switch (bom) {
+            case 0xFeFF0000:
+                detectedCharset = Charset.forName("UTF-32BE");
+                byteData.order(ByteOrder.BIG_ENDIAN);
+                byteData.position(4);
+                break;
+            case 0x0000FEFF:
+                detectedCharset = Charset.forName("UTF-32LE");
+                byteData.order(ByteOrder.LITTLE_ENDIAN);
+                byteData.position(4);
+                break;
+            case 0xF7644C16:
+                detectedCharset = Charset.forName("UTF-7");
+                break;
+            default:
+                byteData.rewind();
+                if (byteData.remaining() >= 2) {
+                    bom = byteData.getShort() & 0xFFFF;
+                    byteData.rewind();
+                    switch (bom) {
+                        case 0xFEFF:
+                            detectedCharset = Charset.forName("UTF-16BE");
+                            byteData.order(ByteOrder.BIG_ENDIAN);
+                            byteData.position(2);
+                            break;
+                        case 0xFFFE:
+                            detectedCharset = Charset.forName("UTF-16LE");
+                            byteData.order(ByteOrder.LITTLE_ENDIAN);
+                            byteData.position(2);
+                            break;
+                        default:
+                            byteData.rewind();
+                            if (byteData.remaining() >= 1) {
+                                bom = byteData.get() & 0xFF;
+                                byteData.rewind();
+                                if (bom == 0xEF) {
+                                    detectedCharset = Charset.forName("UTF-8");
+                                    byteData.position(3);
+                                }
+                            }
+                            break;
+                    }
+                }
+                break;
+        }
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset.name();
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals("UTF-8")) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
