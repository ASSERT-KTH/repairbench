diff --git a/tmp/5a8eef11-bf29-4779-8ac5-f47f9065ef10_buggy.java b/tmp/d3c50918-ab23-4fc2-847e-f5536fcd831c_fixed.java
index 25ca093..1fb7d64 100644
--- a/tmp/5a8eef11-bf29-4779-8ac5-f47f9065ef10_buggy.java
+++ b/tmp/d3c50918-ab23-4fc2-847e-f5536fcd831c_fixed.java
@@ -1,52 +1,78 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    if (byteData.remaining() >= 4) {
+        int bom = byteData.getInt();
+        byteData.rewind();
+        if (bom == 0xFEFF0000) {
+            // UTF-32BE
+            charsetName = "UTF-32BE";
+            byteData.position(4);
+        } else if (bom == 0x0000FEFF) {
+            // UTF-32LE
+            charsetName = "UTF-32LE";
+            byteData.position(4);
+        } else if (bom >> 16 == 0xFEFF || bom >> 16 == 0xFFFE) {
+            // UTF-16BE or UTF-16LE
+            charsetName = bom >> 16 == 0xFEFF ? "UTF-16BE" : "UTF-16LE";
+            byteData.position(2);
+        } else {
+            byteData.rewind();
+        }
+    } else if (byteData.remaining() >= 2) {
+        int bom = byteData.getShort();
+        byteData.rewind();
+        if (bom == 0xFEFF) {
+            // UTF-16BE
+            charsetName = "UTF-16BE";
+            byteData.position(2);
+        } else if (bom == 0xFFFE) {
+            // UTF-16LE
+            charsetName = "UTF-16LE";
+            byteData.position(2);
+        } else {
+            byteData.rewind();
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
