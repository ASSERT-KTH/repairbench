diff --git a/tmp/e059ca11-3372-43cf-bf25-694957859143_buggy.java b/tmp/3a32e6a2-bdc9-4d33-8e10-2565cced8da2_fixed.java
index 25ca093..dee66dd 100644
--- a/tmp/e059ca11-3372-43cf-bf25-694957859143_buggy.java
+++ b/tmp/3a32e6a2-bdc9-4d33-8e10-2565cced8da2_fixed.java
@@ -1,52 +1,67 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and determine charset
+    if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+        // UTF-8 BOM
+        charsetName = "UTF-8";
+        byteData.position(3); // Skip BOM
+    } else if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {
+        // UTF-16BE BOM
+        charsetName = "UTF-16BE";
+        byteData.position(2); // Skip BOM
+    } else if (byteData.remaining() >= 2 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {
+        // UTF-16LE BOM
+        charsetName = "UTF-16LE";
+        byteData.position(2); // Skip BOM
+    } else if (byteData.remaining() >= 4 && byteData.get(0) == 0 && byteData.get(1) == 0 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {
+        // UTF-32BE BOM
+        charsetName = "UTF-32BE";
+        byteData.position(4); // Skip BOM
+    } else if (byteData.remaining() >= 4 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == 0 && byteData.get(3) == 0) {
+        // UTF-32LE BOM
+        charsetName = "UTF-32LE";
+        byteData.position(4); // Skip BOM
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        charsetName = "UTF-8";
+    }
+
+    docData = Charset.forName(charsetName).decode(byteData).toString();
     doc = parser.parseInput(docData, baseUri);
     Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
     if (meta != null) { // if not found, will keep utf-8 as best attempt
         String foundCharset = null;
         if (meta.hasAttr("http-equiv")) {
             foundCharset = getCharsetFromContentType(meta.attr("content"));
         }
         if (foundCharset == null && meta.hasAttr("charset")) {
             try {
                 if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
             } catch (IllegalCharsetNameException e) {
                 foundCharset = null;
             }
         }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+        if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(charsetName)) { // need to re-decode
             foundCharset = foundCharset.trim().replaceAll("[\"']", "");
             charsetName = foundCharset;
             byteData.rewind();
             docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+            doc = parser.parseInput(docData, baseUri);
         }
     }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
+        charsetName = "UTF-8";
         doc = parser.parseInput(docData, baseUri);
+    }
+    
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
