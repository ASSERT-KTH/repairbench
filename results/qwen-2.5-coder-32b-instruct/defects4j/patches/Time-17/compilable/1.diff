diff --git a/tmp/d249cd4a-4a49-497b-9810-e612230902f1_buggy.java b/tmp/ceba82ad-c094-4de5-8765-704f4e0b44cf_fixed.java
index 03b03d7..815dc8c 100644
--- a/tmp/d249cd4a-4a49-497b-9810-e612230902f1_buggy.java
+++ b/tmp/ceba82ad-c094-4de5-8765-704f4e0b44cf_fixed.java
@@ -1,25 +1,52 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long overlapStart = findOverlapStart(instant);
+        long overlapEnd = findOverlapEnd(instant);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        if (instant >= overlapStart && instant <= overlapEnd) {
+            // We are in an overlap period
+            if (earlierOrLater) {
+                return overlapStart; // later offset
+            } else {
+                return overlapEnd; // earlier offset
+            }
+        }
+        
+        // If not in an overlap period, return the original instant
+        return instant;
+    }
+    
+    private long findOverlapStart(long instant) {
+        // Find the start of the overlap period
+        long start = instant;
+        while (convertUTCToLocal(start) == convertUTCToLocal(start + 1)) {
+            start--;
+        }
+        return start + 1;
+    }
+    
+    private long findOverlapEnd(long instant) {
+        // Find the end of the overlap period
+        long end = instant;
+        while (convertUTCToLocal(end) == convertUTCToLocal(end - 1)) {
+            end++;
+        }
+        return end - 1;
     }
\ No newline at end of file
