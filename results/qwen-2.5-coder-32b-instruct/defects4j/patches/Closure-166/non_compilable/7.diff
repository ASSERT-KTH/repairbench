diff --git a/tmp/e17abb93-fbe6-4294-8929-417edc81fd73_buggy.java b/tmp/77483afe-b7e7-464f-b59c-919838c07f30_fixed.java
index 5f96616..27f85d9 100644
--- a/tmp/e17abb93-fbe6-4294-8929-417edc81fd73_buggy.java
+++ b/tmp/77483afe-b7e7-464f-b59c-919838c07f30_fixed.java
@@ -1,20 +1,26 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        RecordType recordType = constraint.toMaybeRecordType();
+        if (recordType != null) {
+            ObjectType selfObjType = toMaybeObjectType();
+            if (selfObjType != null) {
+                for (String propName : recordType.getOwnPropertyNames()) {
+                    JSType propType = recordType.getPropertyType(propName);
+                    JSType currentPropType = selfObjType.getPropertyType(propName);
+                    if (currentPropType == null || currentPropType.isUnknownType()) {
+                        selfObjType.defineDeclaredProperty(propName, propType, null);
+                    } else {
+                        selfObjType.defineInferredProperty(propName, propType, null);
+                    }
+                }
+            }
+        }
     }
 }
\ No newline at end of file
