diff --git a/tmp/99f2da26-f2f7-4d04-b491-9377c4b54884_buggy.java b/tmp/96460bfc-aee5-45e2-bdd8-5e1735206a85_fixed.java
index 5f96616..606c785 100644
--- a/tmp/99f2da26-f2f7-4d04-b491-9377c4b54884_buggy.java
+++ b/tmp/96460bfc-aee5-45e2-bdd8-5e1735206a85_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a record type or a union that includes a record type.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+        if (constraint.isUnionType()) {
+            UnionType unionType = constraint.toMaybeUnionType();
+            for (JSType alternative : unionType.getAlternates()) {
+                if (alternative.isRecordType()) {
+                    matchRecordTypeConstraint(alternative.toObjectType());
+                }
+            }
+        } else if (constraint.isRecordType()) {
             matchRecordTypeConstraint(constraint.toObjectType());
         }
     }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    for (String property : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(property);
+        defineDeclaredProperty(property, propertyType, null);
+    }
+}
\ No newline at end of file
