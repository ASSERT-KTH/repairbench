diff --git a/tmp/e64dd9f8-d515-4644-b227-5f72bcf6849f_buggy.java b/tmp/f942eed1-6b28-4279-9ab1-17da35e85d4a_fixed.java
index 5f96616..621d314 100644
--- a/tmp/e64dd9f8-d515-4644-b227-5f72bcf6849f_buggy.java
+++ b/tmp/f942eed1-6b28-4279-9ab1-17da35e85d4a_fixed.java
@@ -1,20 +1,30 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        // Handle the case where the constraint is a union of record types.
+        UnionType unionType = constraint.toMaybeUnionType();
+        if (unionType != null) {
+            for (JSType alternate : unionType.getAlternates()) {
+                if (alternate.isRecordType()) {
+                    matchRecordTypeConstraint(alternate.toObjectType());
+                }
+            }
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    for (String property : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(property);
+        // Assuming there's a method to add or update property types in the object
+        this.addProperty(property, propertyType);
     }
 }
\ No newline at end of file
