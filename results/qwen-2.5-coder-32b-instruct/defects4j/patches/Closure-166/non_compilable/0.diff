diff --git a/tmp/a1fce39c-9c02-4afb-a352-92c38600e3ff_buggy.java b/tmp/baf28172-f97e-4943-b55e-397c75148d25_fixed.java
index 5f96616..f0c1852 100644
--- a/tmp/a1fce39c-9c02-4afb-a352-92c38600e3ff_buggy.java
+++ b/tmp/baf28172-f97e-4943-b55e-397c75148d25_fixed.java
@@ -1,20 +1,44 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+        ObjectType recordType = null;
         if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+            recordType = constraint.toObjectType();
+        } else if (constraint.isUnionType()) {
+            // If it's a union type, we need to handle each component of the union.
+            UnionType unionType = constraint.toMaybeUnionType();
+            for (JSType type : unionType.getAlternates()) {
+                if (type.isRecordType()) {
+                    recordType = type.toObjectType();
+                    break; // Assuming we only need to match one record type in the union for this context.
+                }
+            }
+        }
+
+        if (recordType != null) {
+            matchRecordTypeConstraint(recordType);
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    // For each property in the record type, ensure the current object type has a matching property.
+    for (String propName : recordType.getOwnPropertyNames()) {
+        JSType propType = recordType.getPropertyType(propName);
+        defineInferredProperty(propName, propType, SourceKind.ANNOTATION);
     }
 }
\ No newline at end of file
