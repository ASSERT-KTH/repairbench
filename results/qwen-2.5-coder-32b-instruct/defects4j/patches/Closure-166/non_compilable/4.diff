diff --git a/tmp/63fe5510-44a1-452a-b79e-f8f3f0898401_buggy.java b/tmp/379609c5-006c-42cc-9acd-a798af50515f_fixed.java
index 5f96616..98dae05 100644
--- a/tmp/63fe5510-44a1-452a-b79e-f8f3f0898401_buggy.java
+++ b/tmp/379609c5-006c-42cc-9acd-a798af50515f_fixed.java
@@ -1,20 +1,33 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        for (JSType type : constraint.toMaybeUnionType().getAlternates()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    for (String propertyName : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(propertyName);
+        defineDeclaredProperty(propertyName, propertyType, null);
     }
 }
\ No newline at end of file
