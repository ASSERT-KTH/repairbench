diff --git a/tmp/8f6a690a-afc2-4689-a99b-2b80f7975408_buggy.java b/tmp/68396953-1c83-4582-8478-78a1eaccb403_fixed.java
index 5f96616..b90d7e2 100644
--- a/tmp/8f6a690a-afc2-4689-a99b-2b80f7975408_buggy.java
+++ b/tmp/68396953-1c83-4582-8478-78a1eaccb403_fixed.java
@@ -1,20 +1,35 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        // If the constraint is a union type, we need to handle each element of the union.
+        UnionType unionType = constraint.toMaybeUnionType();
+        for (JSType type : unionType.getAlternates()) {
+            if (type.isRecordType()) {
+                matchRecordTypeConstraint(type.toObjectType());
+            }
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    for (String property : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(property);
+        defineOwnProperty(property, propertyType, SourceKind.UNKNOWN);
     }
 }
\ No newline at end of file
