diff --git a/tmp/7f12738d-fef5-4e27-85fe-257ae4a2061a_buggy.java b/tmp/3402b000-009e-43e1-8e17-c2fe68407484_fixed.java
index 5f96616..afd2022 100644
--- a/tmp/7f12738d-fef5-4e27-85fe-257ae4a2061a_buggy.java
+++ b/tmp/3402b000-009e-43e1-8e17-c2fe68407484_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a record type or a union of record types.
+    if (constraint.isUnionType()) {
+        UnionType unionType = constraint.toMaybeUnionType();
+        for (JSType alternate : unionType.getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
