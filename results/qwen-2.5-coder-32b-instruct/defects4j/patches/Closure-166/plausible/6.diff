diff --git a/tmp/1dfe3403-3bba-4195-bb6d-b5419c5e62d5_buggy.java b/tmp/10bc3b2a-3248-4946-912a-2a9b757ba935_fixed.java
index 5f96616..7a10e4c 100644
--- a/tmp/1dfe3403-3bba-4195-bb6d-b5419c5e62d5_buggy.java
+++ b/tmp/10bc3b2a-3248-4946-912a-2a9b757ba935_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // If the constraint is a union type, we need to handle each type in the union.
+    if (constraint.isUnionType()) {
+        UnionType unionType = constraint.toMaybeUnionType();
+        for (JSType alternate : unionType.getAlternates()) {
+            matchConstraint(alternate);
+        }
+    } else if (constraint.isRecordType()) {
         // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
