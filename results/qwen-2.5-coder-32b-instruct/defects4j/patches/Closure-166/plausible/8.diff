diff --git a/tmp/9a46a1fb-cf39-4fb6-b653-bc9803021c4b_buggy.java b/tmp/49221e8e-a00f-4957-ad9e-c7b626dff683_fixed.java
index 5f96616..24c4b4b 100644
--- a/tmp/9a46a1fb-cf39-4fb6-b653-bc9803021c4b_buggy.java
+++ b/tmp/49221e8e-a00f-4957-ad9e-c7b626dff683_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking any property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+      if (constraint.isUnionType()) {
+        UnionType unionType = constraint.toMaybeUnionType();
+        for (JSType alternate : unionType.getAlternates()) {
+          if (alternate.isRecordType()) {
+            matchRecordTypeConstraint(alternate.toObjectType());
+          }
+        }
+      } else {
         matchRecordTypeConstraint(constraint.toObjectType());
       }
     }
+  }
\ No newline at end of file
