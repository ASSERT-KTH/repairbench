diff --git a/tmp/a71bf13a-88b9-486f-b703-a241a2511e62_buggy.java b/tmp/ac69b93c-a054-47a2-94c2-ea6155b88805_fixed.java
index d8b0158..f9cf154 100644
--- a/tmp/a71bf13a-88b9-486f-b703-a241a2511e62_buggy.java
+++ b/tmp/ac69b93c-a054-47a2-94c2-ea6155b88805_fixed.java
@@ -1,113 +1,80 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
         return n;
     }
 
     Node right = callTarget.getNext();
     if (right != null) {
         if (!NodeUtil.isImmutableValue(right)) {
             return n;
         }
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
         return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
-    int foldedSize = 0;
+    List<Node> arrayFoldedChildren = Lists.newArrayList();
+    StringBuilder sb = new StringBuilder();
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
+        if (NodeUtil.isImmutableValue(elem)) {
+            if (sb.length() > 0) {
                 sb.append(joinString);
             }
             sb.append(NodeUtil.getArrayElementStringValue(elem));
         } else {
-        if (sb != null) {
-          Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
-          arrayFoldedChildren.add(
-              Node.newString(sb.toString()).copyInformationFrom(prev));
-          sb = null;
+            if (sb.length() > 0) {
+                arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
+                sb.setLength(0);
             }
-        foldedSize += InlineCostEstimator.getCost(elem);
             arrayFoldedChildren.add(elem);
         }
         prev = elem;
         elem = elem.getNext();
     }
 
-    if (sb != null) {
-      Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
-      arrayFoldedChildren.add(
-          Node.newString(sb.toString()).copyInformationFrom(prev));
+    if (sb.length() > 0) {
+        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
-    int originalSize = InlineCostEstimator.getCost(n);
-    switch (arrayFoldedChildren.size()) {
-      case 0:
-        Node emptyStringNode = Node.newString("");
-        n.getParent().replaceChild(n, emptyStringNode);
-        reportCodeChange();
-        return emptyStringNode;
-      case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return n;
-        }
-        arrayNode.detachChildren();
-        if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
-          Node replacement = new Node(Token.ADD,
-              Node.newString("").copyInformationFrom(n),
-              foldedStringNode);
-          foldedStringNode = replacement;
-        }
+    if (arrayFoldedChildren.size() == 1 && NodeUtil.isString(arrayFoldedChildren.get(0))) {
+        Node foldedStringNode = arrayFoldedChildren.get(0);
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
-      default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+    } else if (arrayFoldedChildren.size() == arrayNode.getChildCount() && right == null) {
         return n;
     }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
-        if (foldedSize > originalSize) {
+
+    int foldedSize = 0;
+    for (Node node : arrayFoldedChildren) {
+        foldedSize += InlineCostEstimator.getCost(node);
+    }
+    foldedSize += arrayFoldedChildren.size() > 1 ? (arrayFoldedChildren.size() - 1) * joinString.length() : 0;
+
+    int originalSize = InlineCostEstimator.getCost(n);
+    if (foldedSize >= originalSize) {
         return n;
     }
+
     arrayNode.detachChildren();
     for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
     }
     reportCodeChange();
-        break;
-    }
 
     return n;
 }
\ No newline at end of file
