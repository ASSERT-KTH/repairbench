diff --git a/tmp/e9f8a464-062e-4e11-9865-5a2b1f90f227_buggy.java b/tmp/2a63241a-7563-4a0d-abb8-1d3c369c148e_fixed.java
index 9976e43..4ce6c71 100644
--- a/tmp/e9f8a464-062e-4e11-9865-5a2b1f90f227_buggy.java
+++ b/tmp/2a63241a-7563-4a0d-abb8-1d3c369c148e_fixed.java
@@ -1,76 +1,76 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
+    int thisParamCount = 0;
+    int thatParamCount = 0;
+
     while (thisParam != null && thatParam != null) {
         JSType thisParamType = thisParam.getJSType();
         JSType thatParamType = thatParam.getJSType();
         if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
                 return false;
             }
         }
 
         boolean thisIsVarArgs = thisParam.isVarArgs();
         boolean thatIsVarArgs = thatParam.isVarArgs();
 
+        // If "this" has a required parameter, "that" must also have a required parameter
+        if (!thisParam.isOptionalArg() && thatParam.isOptionalArg()) {
+            return false;
+        }
+
         // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+        if (thatParam.isOptionalArg() && !thisParam.isOptionalArg()) {
+            return false;
+        }
 
         // don't advance if we have variable arguments
         if (!thisIsVarArgs) {
             thisParam = thisParam.getNext();
+            thisParamCount++;
         }
         if (!thatIsVarArgs) {
             thatParam = thatParam.getNext();
+            thatParamCount++;
         }
 
         // both var_args indicates the end
         if (thisIsVarArgs && thatIsVarArgs) {
             thisParam = null;
             thatParam = null;
         }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // "that" can't be a supertype, because it's missing a required argument.
+    if (thisParam != null && !thisParam.isVarArgs()) {
+        return false;
+    }
+
+    // If "this" has more required parameters than "that", then "that" is not a subtype of "this"
+    if (thisParamCount > thatParamCount) {
+        Node remainingThisParam = thisParam;
+        while (remainingThisParam != null) {
+            if (!remainingThisParam.isOptionalArg()) {
+                return false;
+            }
+            remainingThisParam = remainingThisParam.getNext();
+        }
+    }
 
     return true;
 }
\ No newline at end of file
