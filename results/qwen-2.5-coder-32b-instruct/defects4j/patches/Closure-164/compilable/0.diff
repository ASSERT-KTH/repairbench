diff --git a/tmp/aebc2c1e-3393-4909-afec-dd959cb7f743_buggy.java b/tmp/e0cb0a71-dcfa-4887-9e95-ed69819c0852_fixed.java
index 9976e43..737330a 100644
--- a/tmp/aebc2c1e-3393-4909-afec-dd959cb7f743_buggy.java
+++ b/tmp/e0cb0a71-dcfa-4887-9e95-ed69819c0852_fixed.java
@@ -1,76 +1,85 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+    Node thisParamPrev = null;
+    Node thatParamPrev = null;
+
+    while (thisParam != null || thatParam != null) {
+        if (thisParam == null) {
+            // "this" has fewer parameters than "that", and "this" is not varargs.
+            // "this" can't be a supertype, because "that" requires more arguments.
+            return false;
+        }
+        if (thatParam == null) {
+            // "that" has fewer parameters than "this".
+            // Check if "this" is varargs or if remaining "this" parameters are optional.
+            if (!thisParam.isVarArgs() && !thisParam.isOptionalArg()) {
+                return false;
+            }
+        } else {
             JSType thisParamType = thisParam.getJSType();
             JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+
+            if (thatParamType != null) {
+                if (thisParamType == null || !thisParamType.isSubtype(thatParamType)) {
                     return false;
                 }
             }
 
             boolean thisIsVarArgs = thisParam.isVarArgs();
             boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
-      }
-
-      // both var_args indicates the end
             if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+                // Both are varargs, we need to check the type of the vararg parameter
+                if (thatParamType != null && thisParamType != null && !thisParamType.isSubtype(thatParamType)) {
+                    return false;
                 }
+                thisParam = thisParam.getNext();
+                thatParam = thatParam.getNext();
+                break; // varargs matches the rest
             }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+            if (!thatIsVarArgs) {
+                thatParamPrev = thatParam;
+                thatParam = thatParam.getNext();
+            }
+            if (!thisIsVarArgs) {
+                thisParamPrev = thisParam;
+                thisParam = thisParam.getNext();
+            }
+        }
+    }
 
     return true;
 }
\ No newline at end of file
