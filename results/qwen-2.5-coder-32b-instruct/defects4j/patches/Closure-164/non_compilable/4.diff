diff --git a/tmp/e407d6e2-b85b-4e56-b541-d0d864c6bf9c_buggy.java b/tmp/ad2c70fe-de90-410a-bdf9-7385ccb4c38b_fixed.java
index 9976e43..98d6ae5 100644
--- a/tmp/e407d6e2-b85b-4e56-b541-d0d864c6bf9c_buggy.java
+++ b/tmp/ad2c70fe-de90-410a-bdf9-7385ccb4c38b_fixed.java
@@ -1,76 +1,83 @@
 @Override
 public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
         return false;
     }
 
     ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
         return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+
+    int thisParamCount = 0;
+    int thatParamCount = 0;
+
+    while (thisParam != null || thatParam != null) {
+        if (thisParam == null) {
+            // "that" has more parameters than "this", but they are optional
+            if (!thatParam.isOptional()) {
+                return false;
+            }
+            thatParam = thatParam.getNext();
+            thatParamCount++;
+            continue;
+        }
+        if (thatParam == null) {
+            // "this" has more parameters than "that", but they are required
+            if (!thisParam.isOptional()) {
+                return false;
+            }
+            thisParam = thisParam.getNext();
+            thisParamCount++;
+            continue;
+        }
+
         JSType thisParamType = thisParam.getJSType();
         JSType thatParamType = thatParam.getJSType();
+
         if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+            if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {
                 return false;
             }
         }
 
         boolean thisIsVarArgs = thisParam.isVarArgs();
         boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
-      }
-
-      // both var_args indicates the end
+        // If both methods have varargs, we can't have more parameters in the superclass method
         if (thisIsVarArgs && thatIsVarArgs) {
+            // both var_args indicates the end
             thisParam = null;
             thatParam = null;
+        } else {
+            // don't advance if we have variable arguments
+            if (!thisIsVarArgs) {
+                thisParam = thisParam.getNext();
+                thisParamCount++;
+            }
+            if (!thatIsVarArgs) {
+                thatParam = thatParam.getNext();
+                thatParamCount++;
+            }
         }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // Ensure all non-optional parameters in "that" are matched by "this"
+    if (thatParamCount > thisParamCount) {
+        thatParam = that.parameters.getFirstChild();
+        for (int i = 0; i < thatParamCount; i++) {
+            if (!thatParam.isOptional() && i >= thisParamCount) {
+                return false;
+            }
+            thatParam = thatParam.getNext();
+        }
+    }
 
     return true;
 }
\ No newline at end of file
