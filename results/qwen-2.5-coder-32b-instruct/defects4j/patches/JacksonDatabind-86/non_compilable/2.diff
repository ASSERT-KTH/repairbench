diff --git a/tmp/cecbd87d-7012-4162-a5f3-41b22e31e154_buggy.java b/tmp/9048df8c-2c3a-42d7-b49e-e192335d2b9a_fixed.java
index e69de29..82b35a7 100644
--- a/tmp/cecbd87d-7012-4162-a5f3-41b22e31e154_buggy.java
+++ b/tmp/9048df8c-2c3a-42d7-b49e-e192335d2b9a_fixed.java
@@ -0,0 +1,45 @@
+package com.fasterxml.jackson.databind.type;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+
+public class TypeFactoryFix {
+    public static void main(String[] args) throws Exception {
+        ObjectMapper mapper = new ObjectMapper();
+        TypeFactory tf = mapper.getTypeFactory();
+
+        // Constructing types to ensure they are cached correctly
+        tf.constructType(Base.class);
+        JavaType subType = tf.constructType(Sub.class);
+
+        // Ensuring that the base type is correctly referenced
+        JavaType baseTypeFromSub = subType.getSuperClass();
+        assertNotNull(baseTypeFromSub);
+
+        // Testing serialization
+        Sub sub = new Sub();
+        String serialized = mapper.writeValueAsString(sub);
+        assertEquals("{\"base\":1,\"sub\":2}", serialized);
+    }
+
+    public static void assertNotNull(Object obj) {
+        if (obj == null) {
+            throw new AssertionError("Expected object to be not null");
+        }
+    }
+
+    public static void assertEquals(String expected, String actual) {
+        if (!expected.equals(actual)) {
+            throw new AssertionError("Expected:<" + expected + "> but was:<" + actual + ">");
+        }
+    }
+}
+
+class Base {
+    public int base = 1;
+}
+
+class Sub extends Base {
+    public int sub = 2;
+}
\ No newline at end of file
