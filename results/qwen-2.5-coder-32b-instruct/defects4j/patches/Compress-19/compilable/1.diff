diff --git a/tmp/3e2d2049-2256-4485-bf3f-0800295896cf_buggy.java b/tmp/591c89e4-cbb8-487e-845d-6e03b9e20b66_fixed.java
index 730ab7d..231d251 100644
--- a/tmp/3e2d2049-2256-4485-bf3f-0800295896cf_buggy.java
+++ b/tmp/591c89e4-cbb8-487e-845d-6e03b9e20b66_fixed.java
@@ -1,48 +1,56 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData != null) {
         int expectedLength = (hasUncompressedSize ? DWORD : 0)
             + (hasCompressedSize ? DWORD : 0)
             + (hasRelativeHeaderOffset ? DWORD : 0)
             + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
+
         int offset = 0;
         if (hasUncompressedSize) {
+            if (offset + DWORD <= rawCentralDirectoryData.length) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
+            } else {
+                throw new ZipException("central directory zip64 extended information extra field is too short");
+            }
         }
         if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+            if (offset + DWORD <= rawCentralDirectoryData.length) {
+                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
+            } else {
+                throw new ZipException("central directory zip64 extended information extra field is too short");
+            }
         }
         if (hasRelativeHeaderOffset) {
-                relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+            if (offset + DWORD <= rawCentralDirectoryData.length) {
+                relativeHeaderOffset = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
+            } else {
+                throw new ZipException("central directory zip64 extended information extra field is too short");
+            }
         }
         if (hasDiskStart) {
+            if (offset + WORD <= rawCentralDirectoryData.length) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
+            } else {
+                throw new ZipException("central directory zip64 extended information extra field is too short");
             }
         }
+        // Ignore any additional data in rawCentralDirectoryData
+    }
 }
\ No newline at end of file
