diff --git a/tmp/0b8078e8-9785-4fac-9d43-1438232f723d_buggy.java b/tmp/1a76e659-0347-49be-a440-3e3bccd6025e_fixed.java
index b2d53db..69da33e 100644
--- a/tmp/0b8078e8-9785-4fac-9d43-1438232f723d_buggy.java
+++ b/tmp/1a76e659-0347-49be-a440-3e3bccd6025e_fixed.java
@@ -1,34 +1,45 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
+    } else {
+        // Ensure that we correctly handle content within <script> tags
+        if (t.getTagPending().toString().equalsIgnoreCase("script") && !t.isScripting()) {
+            t.setScripting(true);
+        }
+        if (t.isScripting()) {
+            t.dataBuffer.append(r.consumeTo("</script>", false));
+            t.emit(new Token.Character().data(t.dataBuffer.toString()));
+            t.dataBuffer.setLength(0);
+            t.transition(Data);
         } else {
             anythingElse(t, r);
         }
     }
+}
\ No newline at end of file
