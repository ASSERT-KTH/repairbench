diff --git a/tmp/ef32f137-659f-4be0-9aab-180803ca53a7_buggy.java b/tmp/47651245-3b7c-4297-9ce4-9f1c9ee56c6b_fixed.java
index b2d53db..d71130e 100644
--- a/tmp/ef32f137-659f-4be0-9aab-180803ca53a7_buggy.java
+++ b/tmp/47651245-3b7c-4297-9ce4-9f1c9ee56c6b_fixed.java
@@ -1,34 +1,46 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
-                char c = r.consume();
+        char c = r.current();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
+                r.advance();
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
+                r.advance();
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
+                r.advance();
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
+                r.advance();
                 break;
         }
+    } else {
+        // Ensure we handle script content correctly
+        if (t.currentToken.isCharacterData() && t.getCurrentToken().tagName().equals("script")) {
+            // Consume the entire script content as raw text
+            String scriptData = r.consumeTo("</script>");
+            t.dataBuffer.append(scriptData);
+            t.transition(ScriptDataEndTagOpen);
         } else {
             anythingElse(t, r);
         }
     }
+}
\ No newline at end of file
