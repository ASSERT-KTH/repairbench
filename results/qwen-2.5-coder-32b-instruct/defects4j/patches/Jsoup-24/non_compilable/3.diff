diff --git a/tmp/9899ba36-3db8-4c46-83a7-a0871186c28c_buggy.java b/tmp/0640de51-0e76-4cac-aed0-d87f6ae0f409_fixed.java
index b2d53db..f04d986 100644
--- a/tmp/9899ba36-3db8-4c46-83a7-a0871186c28c_buggy.java
+++ b/tmp/0640de51-0e76-4cac-aed0-d87f6ae0f409_fixed.java
@@ -1,34 +1,47 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
+    } else {
+        // Ensure that we correctly handle characters within script tags
+        if (t.current.isScriptType()) {
+            t.dataBuffer.append(r.consumeToAny('<', '&', '\0'));
+            if (!r.isEmpty()) {
+                char next = r.current();
+                if (next == '<') {
+                    t.transition(BeforeAttributeName);
+                } else if (next == '&') {
+                    t.transition(CharacterReferenceInData);
+                }
+            }
         } else {
             anythingElse(t, r);
         }
     }
+}
\ No newline at end of file
