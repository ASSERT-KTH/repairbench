diff --git a/tmp/6d25d5a8-91c4-4e73-8486-49ceafdaab09_buggy.java b/tmp/2bf3b355-ec27-49b6-a3e7-e75c5d143fcf_fixed.java
index 2573d30..235d207 100644
--- a/tmp/6d25d5a8-91c4-4e73-8486-49ceafdaab09_buggy.java
+++ b/tmp/2bf3b355-ec27-49b6-a3e7-e75c5d143fcf_fixed.java
@@ -1,20 +1,38 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node nameNode = node.getFirstChild();
+  if (nameNode.isName()) {
+    String name = nameNode.getString();
+    // Check if the name is assigned to in the current scope or its parents.
+    if (isNameAssignedTo(name, node)) {
       return false;
     }
+  }
+
+  return true;
+}
 
+/**
+ * Helper method to determine if a name is assigned to in the given scope or its parents.
+ */
+private boolean isNameAssignedTo(String name, Node node) {
+  Node current = node;
+  while (current != null) {
+    Node parent = current.getParent();
+    if (parent != null && parent.isAssign() && parent.getFirstChild().isName() && parent.getFirstChild().getString().equals(name)) {
       return true;
     }
+    current = parent;
+  }
+  return false;
+}
\ No newline at end of file
