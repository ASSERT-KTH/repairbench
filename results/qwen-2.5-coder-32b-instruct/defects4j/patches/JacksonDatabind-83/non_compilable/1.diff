diff --git a/tmp/e92f1eda-9394-4730-a00e-a62968d799eb_buggy.java b/tmp/dbc8d45d-4bbc-4c10-9d3b-efd449c2a482_fixed.java
index abe09ae..82de133 100644
--- a/tmp/e92f1eda-9394-4730-a00e-a62968d799eb_buggy.java
+++ b/tmp/dbc8d45d-4bbc-4c10-9d3b-efd449c2a482_fixed.java
@@ -1,57 +1,70 @@
 @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
     if (text != null) { // has String representation
         if (text.length() == 0 || (text = text.trim()).length() == 0) {
             // 04-Feb-2013, tatu: Usually should become null; but not always
             return _deserializeFromEmptyString();
         }
         Exception cause = null;
+        T result = null;
         try {
             // 19-May-2017, tatu: Used to require non-null result (assuming `null`
             //    indicated error; but that seems wrong. Should be able to return
             //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
-                }
+            result = _deserialize(text, ctxt);
         } catch (IllegalArgumentException iae) {
             cause = iae;
         } catch (MalformedURLException me) {
             cause = me;
         }
+        
+        if (result == null && cause == null) {
+            // Invoke the weird string handler
+            for (final DeserializationProblemHandler handler : ctxt.getProblemHandlers()) {
+                if (handler instanceof WeirdStringHandler) {
+                    result = ((WeirdStringHandler) handler).handleWeirdStringValue(_valueClass, text, ctxt);
+                    if (result != null) {
+                        return result;
+                    }
+                }
+            }
+        }
+        
+        if (result == null) {
             String msg = "not a valid textual representation";
             if (cause != null) {
                 String m2 = cause.getMessage();
                 if (m2 != null) {
                     msg = msg + ", problem: "+m2;
                 }
             }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
             JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
             if (cause != null) {
                 e.initCause(cause);
             }
             throw e;
-            // nothing to do here, yet? We'll fail anyway
+        }
+        return result;
     }
     JsonToken t = p.getCurrentToken();
     // [databind#381]
     if (t == JsonToken.START_ARRAY) {
         return _deserializeFromArray(p, ctxt);
     }
     if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
         // Trivial cases; null to null, instance of type itself returned as is
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
