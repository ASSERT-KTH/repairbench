diff --git a/tmp/eddaf4d8-28c5-49d1-89f6-4c45c53e10b9_buggy.java b/tmp/20e5a0c1-b112-462c-b6ca-a029afeb387c_fixed.java
index c6b65da..768edea 100644
--- a/tmp/eddaf4d8-28c5-49d1-89f6-4c45c53e10b9_buggy.java
+++ b/tmp/20e5a0c1-b112-462c-b6ca-a029afeb387c_fixed.java
@@ -1,25 +1,35 @@
 /**
  * Returns the options with a long name starting with the name specified.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
+    boolean exactMatchFound = false;
 
-        // for a perfect match return the single option only
-
-        for (String longOpt : longOpts.keySet())
-        {
-            if (longOpt.startsWith(opt))
-            {
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+        exactMatchFound = true;
+    } else {
+        // for partial matches, add all options starting with the specified prefix
+        for (String longOpt : longOpts.keySet()) {
+            if (longOpt.startsWith(opt)) {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // If an exact match was found, return it alone
+    if (exactMatchFound && matchingOpts.size() > 1) {
+        matchingOpts = new ArrayList<String>();
+        matchingOpts.add(opt);
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
