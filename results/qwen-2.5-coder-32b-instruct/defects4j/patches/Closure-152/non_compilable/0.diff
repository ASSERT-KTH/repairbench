diff --git a/tmp/b1b9f442-31a9-4af8-ad9b-f93ee5d1dc25_buggy.java b/tmp/bd085448-7738-4596-8801-d20b29f18e00_fixed.java
index 58a1651..a9afc8a 100644
--- a/tmp/b1b9f442-31a9-4af8-ad9b-f93ee5d1dc25_buggy.java
+++ b/tmp/bd085448-7738-4596-8801-d20b29f18e00_fixed.java
@@ -1,32 +1,47 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        for (JSType alternate : unionType.getAlternates()) {
+            if (!(alternate instanceof ObjectType)) {
+                t.warning("Type of @this must be an object. Actual type: " + resolvedTypeOfThis.toString());
+                break; // Report the first non-ObjectType and stop further checks
+            }
+        }
+        // We can't directly cast UnionType to ObjectType, so we keep it as JSType
+        typeOfThis = resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        t.warning("Type of @this must be an object. Actual type: " + resolvedTypeOfThis.toString());
+        typeOfThis = resolvedTypeOfThis;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
