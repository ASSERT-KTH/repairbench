diff --git a/tmp/1d8dd2d7-f752-48ea-94df-b04b6d2db83d_buggy.java b/tmp/a802197d-a534-469a-a092-e05f7819d2f8_fixed.java
index 58a1651..2f468cb 100644
--- a/tmp/1d8dd2d7-f752-48ea-94df-b04b6d2db83d_buggy.java
+++ b/tmp/a802197d-a534-469a-a092-e05f7819d2f8_fixed.java
@@ -1,32 +1,43 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and handle union types
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = resolvedTypeOfThis.toMaybeUnionType();
+        if (!unionType.getAlternates().stream().allMatch(alternate -> alternate instanceof ObjectType)) {
+            t.error("Type of @this must be an object type", null, null);
+            typeOfThis = null; // or handle it as needed
+        } else {
+            typeOfThis = resolvedTypeOfThis; // All alternates are ObjectTypes
+        }
+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        t.error("Type of @this must be an object type", null, null);
+        typeOfThis = null; // or handle it as needed
+    } else {
+        typeOfThis = resolvedTypeOfThis;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
