diff --git a/tmp/24c401f0-bf02-41c7-9fee-fd9c68d461a8_buggy.java b/tmp/0f75aeb0-6aa7-40c7-9bd6-de78ddf560e2_fixed.java
index 58a1651..247d06c 100644
--- a/tmp/24c401f0-bf02-41c7-9fee-fd9c68d461a8_buggy.java
+++ b/tmp/0f75aeb0-6aa7-40c7-9bd6-de78ddf560e2_fixed.java
@@ -1,32 +1,47 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and handle UnionType if necessary
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        for (JSType alternate : unionType.getAlternates()) {
+            if (!(alternate instanceof ObjectType)) {
+                t.error("Type of @this must be an object or a union of objects. "
+                        + "Found type: " + alternate.toString());
+                typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+                break;
+            }
+        }
+        typeOfThis = resolvedTypeOfThis;
+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        t.error("Type of @this must be an object. Found type: " + resolvedTypeOfThis.toString());
+        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    } else {
+        typeOfThis = resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
