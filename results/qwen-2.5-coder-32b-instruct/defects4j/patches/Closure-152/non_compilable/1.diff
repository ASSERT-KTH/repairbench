diff --git a/tmp/eaeb6e1c-af54-475e-998c-272ae3ff44af_buggy.java b/tmp/bb148e0a-f9b1-4386-9449-221533ce5fc0_fixed.java
index 58a1651..d3117a3 100644
--- a/tmp/eaeb6e1c-af54-475e-998c-272ae3ff44af_buggy.java
+++ b/tmp/bb148e0a-f9b1-4386-9449-221533ce5fc0_fixed.java
@@ -1,32 +1,51 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+
+    // Check if typeOfThis is a UnionType and all its components are ObjectTypes
+    if (typeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) typeOfThis;
+        boolean allObjectTypes = true;
+        for (JSType alt : unionType.getAlternates()) {
+            if (!(alt instanceof ObjectType)) {
+                allObjectTypes = false;
+                break;
+            }
+        }
+        if (!allObjectTypes) {
+            // Handle the case where typeOfThis is not an ObjectType
+            typeOfThis = null; // or handle it as needed, e.g., report an error
+        }
+    } else if (!(typeOfThis instanceof ObjectType)) {
+        // Handle the case where typeOfThis is not an ObjectType
+        typeOfThis = null; // or handle it as needed, e.g., report an error
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
