diff --git a/tmp/4ce9ac14-ebf9-42c9-9827-d5aa415c81a7_buggy.java b/tmp/2595446a-fcd6-433d-9568-a3f593881017_fixed.java
index 58a1651..7faec92 100644
--- a/tmp/4ce9ac14-ebf9-42c9-9827-d5aa415c81a7_buggy.java
+++ b/tmp/2595446a-fcd6-433d-9568-a3f593881017_fixed.java
@@ -1,32 +1,42 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis.isUnionType()) {
+        UnionType unionType = resolvedTypeOfThis.toMaybeUnionType();
+        if (!unionType.getAlternates().stream().allMatch(JSType::isObject)) {
+            t.warning("Type of @this must be an object\nActual type: " + resolvedTypeOfThis.toString());
+        }
+        typeOfThis = unionType;
+    } else if (!resolvedTypeOfThis.isObject()) {
+        t.warning("Type of @this must be an object\nActual type: " + resolvedTypeOfThis.toString());
+    } else {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
