diff --git a/tmp/35f77df3-fb20-412b-9982-2054099b0695_buggy.java b/tmp/72bb9396-bfa7-4f5d-aef8-ec538282c94f_fixed.java
index 7e64f1d..8d45360 100644
--- a/tmp/35f77df3-fb20-412b-9982-2054099b0695_buggy.java
+++ b/tmp/72bb9396-bfa7-4f5d-aef8-ec538282c94f_fixed.java
@@ -1,78 +1,77 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
+    List<String> tokens = new ArrayList<>();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
             if (options.hasOption(opt))
             {
                 tokens.add(arg);
+                if (arg.contains("="))
+                {
+                    // Handle -f=bar or --foo=bar
+                    String[] split = arg.split("=", 2);
+                    tokens.add(split[0]);
+                    tokens.add(split[1]);
                 }
-                else
+            }
+            else if (arg.startsWith("--") && arg.contains("="))
             {
-                    if (options.hasOption(arg.substring(0, 2)))
+                // Handle --foo=bar
+                String[] split = arg.split("=", 2);
+                if (options.hasOption(Util.stripLeadingHyphens(split[0])))
                 {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add(split[0]);
+                    tokens.add(split[1]);
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
+            else if (opt.length() > 1 && options.hasOption(opt.substring(0, 1)))
+            {
+                // Handle -foo
+                tokens.add("-" + opt.substring(0, 1));
+                tokens.add("-" + opt.substring(1));
+            }
+            else
+            {
+                eatTheRest = stopAtNonOption;
+                tokens.add(arg);
+            }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
