diff --git a/tmp/1d5890b0-592c-4a52-864f-e134881d9add_buggy.java b/tmp/63befa51-8079-4476-bab6-d8e4c600493e_fixed.java
index 7e64f1d..407ba68 100644
--- a/tmp/1d5890b0-592c-4a52-864f-e134881d9add_buggy.java
+++ b/tmp/63befa51-8079-4476-bab6-d8e4c600493e_fixed.java
@@ -1,78 +1,77 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
-        List tokens = new ArrayList();
+    List<String> tokens = new ArrayList<>();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
+            // Check if the option has an equal sign
+            int equalsIndex = opt.indexOf('=');
+            if (equalsIndex != -1)
+            {
+                String optName = opt.substring(0, equalsIndex);
+                String optValue = opt.substring(equalsIndex + 1);
+
+                if (options.hasOption(optName))
+                {
+                    tokens.add("-" + optName);
+                    tokens.add(optValue);
+                }
+                else
+                {
+                    eatTheRest = stopAtNonOption;
+                    tokens.add(arg);
+                }
+            }
+            else
+            {
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
+                else if (opt.length() > 1 && options.hasOption(opt.substring(0, 1)))
                 {
                     // the format is --foo=value or -foo=value
                     // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                    tokens.add("-" + opt.substring(0, 1)); // -D
+                    tokens.add(opt.substring(1)); // property=value
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+    return tokens.toArray(new String[0]);
 }
\ No newline at end of file
