diff --git a/tmp/e347e743-eae5-49f2-be25-c936e9d425a9_buggy.java b/tmp/0c09fcc2-d27e-4975-89a1-abf6cee74ea0_fixed.java
index 0b7c52e..01462cc 100644
--- a/tmp/e347e743-eae5-49f2-be25-c936e9d425a9_buggy.java
+++ b/tmp/0c09fcc2-d27e-4975-89a1-abf6cee74ea0_fixed.java
@@ -1,27 +1,41 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    String name = null;
+
+    if (child.isStringKey()) {
+      // Direct string key in object literal, e.g., {a: 0}
+      name = child.getString();
+    } else if (child.isGetterDef() || child.isSetterDef()) {
+      // Getter or setter definition, e.g., {get a() { ... }, set a(v) { ... }}
+      name = child.getString();
+    } else if (child.isComputedProp()) {
+      // Computed property, e.g., {[key]: value}
+      Node keyNode = child.getFirstChild();
+      if (keyNode.isStringLit() || keyNode.isName()) {
+        name = keyNode.getString();
+      } else {
+        // If the key is not a simple string or name, we cannot determine the property name
+        continue;
+      }
+    } else {
+      // Unhandled case, skip
+      continue;
+    }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
+      // TODO(user): It doesn't look like the user can do much in this case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
