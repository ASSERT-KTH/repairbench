diff --git a/tmp/cc094801-7df2-4f73-805a-f7e35aa6b93a_buggy.java b/tmp/a703d5d6-f100-4e23-a179-54411d31856a_fixed.java
index 0b7c52e..d667878 100644
--- a/tmp/cc094801-7df2-4f73-805a-f7e35aa6b93a_buggy.java
+++ b/tmp/a703d5d6-f100-4e23-a179-54411d31856a_fixed.java
@@ -1,27 +1,40 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
     for (Node child = n.getFirstChild();
          child != null;
          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // child should be a STRING_KEY or COMPUTED_PROP
+        String name = null;
+        if (child.isStringKey()) {
+            name = child.getString();
+        } else if (child.isComputedProp()) {
+            Node keyNode = child.getFirstChild();
+            if (keyNode.isStringLit()) {
+                name = keyNode.getString();
+            } else {
+                // If the key is not a string literal, we cannot determine the property name.
+                continue;
+            }
+        } else {
+            // Unexpected node type for object literal key.
+            continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
                 compiler.report(JSError.make(
                     t.getSourceName(), child, propertiesToErrorFor.get(name),
                     Warnings.INVALIDATION, name,
                     (type == null ? "null" : type.toString()), n.toString(), ""));
             }
         }
     }
 }
\ No newline at end of file
