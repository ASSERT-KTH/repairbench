diff --git a/tmp/c938ef3e-c194-4a5d-aa44-d21c8b24cf19_buggy.java b/tmp/034f2756-5b83-422a-b4d3-32eea8962138_fixed.java
index 0b7c52e..a15c723 100644
--- a/tmp/c938ef3e-c194-4a5d-aa44-d21c8b24cf19_buggy.java
+++ b/tmp/034f2756-5b83-422a-b4d3-32eea8962138_fixed.java
@@ -1,27 +1,44 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
     for (Node child = n.getFirstChild();
          child != null;
          child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Maybe STRING, GET, SET, GETELEM, SETELEM
+
+        String name = null;
+        Node keyNode = child.getFirstChild();
+        if (keyNode.isString()) {
+            name = keyNode.getString();
+        } else if (keyNode.isName()) {
+            name = keyNode.getString();
+        } else if (keyNode.isGetElem()) {
+            Node key = keyNode.getFirstChild();
+            if (key.isStringLit()) {
+                name = key.getString();
+            } else {
+                // Handle dynamic property names
+                continue;
+            }
+        } else {
+            // Handle other cases (e.g., computed property names)
+            continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
             // TODO(user): It doesn't look like the user can do much in this
             // case right now.
             if (propertiesToErrorFor.containsKey(name)) {
                 compiler.report(JSError.make(
                     t.getSourceName(), child, propertiesToErrorFor.get(name),
                     Warnings.INVALIDATION, name,
                     (type == null ? "null" : type.toString()), n.toString(), ""));
             }
         }
     }
 }
\ No newline at end of file
