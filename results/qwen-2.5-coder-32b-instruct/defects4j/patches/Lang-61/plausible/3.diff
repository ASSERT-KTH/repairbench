diff --git a/tmp/792e9ed2-feef-4649-9d03-4d07afb5ac83_buggy.java b/tmp/c84d692e-8666-4e78-ab65-0ed99edfe6d1_fixed.java
index addeb8d..d338282 100644
--- a/tmp/792e9ed2-feef-4649-9d03-4d07afb5ac83_buggy.java
+++ b/tmp/c84d692e-8666-4e78-ab65-0ed99edfe6d1_fixed.java
@@ -1,38 +1,36 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
-        if (str == null || startIndex >= size) {
+        if (str == null) {
             return -1;
         }
+        startIndex = Math.max(startIndex, 0);
         int strLen = str.length();
-        if (strLen == 1) {
-            return indexOf(str.charAt(0), startIndex);
-        }
+        int size = length(); // Ensure we use the current length of the buffer
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+        if (strLen > size || startIndex > size) {
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        int len = size - strLen;
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= len; i++) {
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
