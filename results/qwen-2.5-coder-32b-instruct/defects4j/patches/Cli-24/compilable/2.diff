diff --git a/tmp/4dec4e7f-d5c9-43ba-9d77-d33f19a95bcf_buggy.java b/tmp/0ab311b5-5989-4f27-b42d-ea311f4525be_fixed.java
index 229b3e7..c6a45a2 100644
--- a/tmp/4dec4e7f-d5c9-43ba-9d77-d33f19a95bcf_buggy.java
+++ b/tmp/0ab311b5-5989-4f27-b42d-ea311f4525be_fixed.java
@@ -1,55 +1,33 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
+    text = text.substring(pos).trim();
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - nextLineTabStop, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(text);
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
 }
\ No newline at end of file
