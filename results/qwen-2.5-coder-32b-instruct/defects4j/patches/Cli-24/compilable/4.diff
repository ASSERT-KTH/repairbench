diff --git a/tmp/d3084513-7427-4e69-af08-88bc3dde82db_buggy.java b/tmp/25dd9738-9026-41ee-be2c-d19351f78899_fixed.java
index 229b3e7..64899f1 100644
--- a/tmp/d3084513-7427-4e69-af08-88bc3dde82db_buggy.java
+++ b/tmp/25dd9738-9026-41ee-be2c-d19351f78899_fixed.java
@@ -1,55 +1,41 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Ensure nextLineTabStop does not exceed the available width
+    int availableWidth = width - nextLineTabStop;
+    if (availableWidth <= 0)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // If no room for the description, we should handle it gracefully
+        // For now, let's append the rest of the text without further wrapping
+        sb.append(createPadding(nextLineTabStop)).append(rtrim(text.substring(pos)));
+        return sb;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        text = text.substring(pos).trim();
+        pos = findWrapPos(text, availableWidth, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(rtrim(text));
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
