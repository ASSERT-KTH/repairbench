diff --git a/tmp/c68c48c8-cf80-4cc4-b81e-39d51f838d69_buggy.java b/tmp/44c0c2d6-06d1-442f-a86e-f45a5da88125_fixed.java
index 851ffc2..734f671 100644
--- a/tmp/c68c48c8-cf80-4cc4-b81e-39d51f838d69_buggy.java
+++ b/tmp/44c0c2d6-06d1-442f-a86e-f45a5da88125_fixed.java
@@ -1,70 +1,101 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
             ProvidedName parentName =
                 providedNames.get(namespace.substring(0, indexOfDot));
             Preconditions.checkNotNull(parentName);
             Preconditions.checkNotNull(parentName.replacementNode);
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
+
+    // Helper method to create the declaration node for the namespace.
+    private Node createDeclarationNode() {
+        String[] parts = namespace.split("\\.");
+        Node currentNode = null;
+        Node parentNode = null;
+
+        for (String part : parts) {
+            Node newNode = IR.name(part);
+            newNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
+
+            if (currentNode == null) {
+                currentNode = IR.var(newNode);
+            } else {
+                if (parentNode == null) {
+                    parentNode = IR.exprResult(currentNode).srcref(currentNode);
+                    newNode = IR.getprop(currentNode, newNode).srcref(currentNode);
+                } else {
+                    newNode = IR.getprop(parentNode, newNode).srcref(parentNode);
+                }
+                currentNode = IR.exprResult(newNode).srcref(newNode);
+            }
+            parentNode = newNode;
+        }
+
+        if (currentNode != null) {
+            currentNode.setToken(Token.EMPTY);
+        }
+
+        return currentNode != null ? currentNode.getFirstChild() : IR.var();
+    }
\ No newline at end of file
