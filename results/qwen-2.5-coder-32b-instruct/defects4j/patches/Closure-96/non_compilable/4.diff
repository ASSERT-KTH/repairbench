diff --git a/tmp/5094f44b-f24f-4c7b-ad90-27054185e7f8_buggy.java b/tmp/317937d3-6de7-487a-87bb-c3f2da302a0b_fixed.java
index e0ecec8..b44830e 100644
--- a/tmp/5094f44b-f24f-4c7b-ad90-27054185e7f8_buggy.java
+++ b/tmp/317937d3-6de7-487a-87bb-c3f2da302a0b_fixed.java
@@ -1,35 +1,44 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  boolean hasVarArgs = functionType.hasVarArgs();
+
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
+    } else if (hasVarArgs) {
+      // If there are more arguments than fixed parameters, and the function has var_args,
+      // use the type of the last parameter (the var_args parameter) for all remaining arguments.
+      parameter = functionType.getParameters().get(functionType.getParameters().size() - 1);
+    } else {
+      // If there are more arguments than fixed parameters and no var_args, break out of the loop
+      break;
+    }
+
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (minArgs > numArgs || (maxArgs < numArgs && maxArgs != Integer.MAX_VALUE)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
