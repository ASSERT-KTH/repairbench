diff --git a/tmp/ec5dd852-ce52-4660-a0d1-9801b91a6bca_buggy.java b/tmp/80557066-ad37-4b23-bb43-24414cdf8b60_fixed.java
index 42b58d0..3f6b148 100644
--- a/tmp/ec5dd852-ce52-4660-a0d1-9801b91a6bca_buggy.java
+++ b/tmp/80557066-ad37-4b23-bb43-24414cdf8b60_fixed.java
@@ -1,19 +1,29 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Use a set to track the types we've already processed to prevent infinite recursion
+    Set<Type> processedTypes = new HashSet<>();
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        if (processedTypes.add(actualTypeArgument)) { // Only process if not already processed
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+            
+            // Recursively register type variables for any nested parameterized types
+            if (actualTypeArgument instanceof ParameterizedType) {
+                registerTypeVariablesOn(actualTypeArgument);
+            }
+        }
     }
 }
\ No newline at end of file
