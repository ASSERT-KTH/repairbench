diff --git a/tmp/b76f621d-b02a-4069-ad83-9cef4e796ff3_buggy.java b/tmp/e9b529a7-24f8-41c0-a7e5-fd8abf8808dd_fixed.java
index 42b58d0..38cfb47 100644
--- a/tmp/b76f621d-b02a-4069-ad83-9cef4e796ff3_buggy.java
+++ b/tmp/e9b529a7-24f8-41c0-a7e5-fd8abf8808dd_fixed.java
@@ -1,19 +1,29 @@
-    protected void registerTypeVariablesOn(Type classType) {
+protected void registerTypeVariablesOn(Type classType, Set<Type> visitedTypes) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
+    if (visitedTypes.contains(classType)) {
+        return; // Prevent infinite recursion
+    }
+    visitedTypes.add(classType);
+
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+        // Recursively register type variables if actualTypeArgument is a ParameterizedType
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariablesOn(actualTypeArgument, visitedTypes);
         }
     }
+    visitedTypes.remove(classType); // Clean up visited set
+}
\ No newline at end of file
