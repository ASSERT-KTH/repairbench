diff --git a/tmp/091f5b34-dacf-454c-800e-b060e8b33b5c_buggy.java b/tmp/16a0e60a-9bed-4055-a9b1-d8cb3b25a4a2_fixed.java
index 42b58d0..153ff2a 100644
--- a/tmp/091f5b34-dacf-454c-800e-b060e8b33b5c_buggy.java
+++ b/tmp/16a0e60a-9bed-4055-a9b1-d8cb3b25a4a2_fixed.java
@@ -1,19 +1,35 @@
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.WildcardType;
+import java.util.HashSet;
+import java.util.Set;
+
 protected void registerTypeVariablesOn(Type classType) {
-        if (!(classType instanceof ParameterizedType)) {
+    Set<Type> processedTypes = new HashSet<>();
+    registerTypeVariablesOn(classType, processedTypes);
+}
+
+private void registerTypeVariablesOn(Type classType, Set<Type> processedTypes) {
+    if (!(classType instanceof ParameterizedType) || processedTypes.contains(classType)) {
         return;
     }
+    processedTypes.add(classType);
+
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+        // Recursively process the actual type argument if it is a parameterized type
+        registerTypeVariablesOn(actualTypeArgument, processedTypes);
     }
 }
\ No newline at end of file
