diff --git a/tmp/61596fcd-96cd-4c57-971e-609e2c536222_buggy.java b/tmp/e2fa4bb9-a634-476f-a562-7b695916c7fd_fixed.java
index 373b1e8..395225f 100644
--- a/tmp/61596fcd-96cd-4c57-971e-609e2c536222_buggy.java
+++ b/tmp/e2fa4bb9-a634-476f-a562-7b695916c7fd_fixed.java
@@ -1,37 +1,46 @@
+/**
+ * Checks if the provided byte array resembles a UTF-8 encoded string.
+ * 
+ * @param input the input byte array to check
+ * @return true if the input looks like UTF-8, false otherwise
+ */
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) { // Fixed '&' to '&&'
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+    for (; i < input.length; ++i) { // Replaced 'int j = input.length; i < j' with simpler loop condition
         int o = input[i];
         if ((o & 0x80) == 0) {
             continue; // ASCII
         }
 
         // UTF-8 leading:
+        int end;
         if ((o & 0xE0) == 0xC0) {
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
         } else {
             return false;
         }
 
+        // Ensure we don't exceed array bounds
+        end = Math.min(end, input.length);
 
-                while (i < end) {
+        while (i < end - 1) { // Changed 'i < end' to 'i < end - 1' to avoid ArrayIndexOutOfBoundsException
             i++;
             o = input[i];
             if ((o & 0xC0)!= 0x80) {
                 return false;
             }
         }
+        i = end - 1; // Adjust 'i' to point to the last processed byte
     }
     return true;
 }
\ No newline at end of file
