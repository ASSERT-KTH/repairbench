diff --git a/tmp/2a65aa16-928f-471d-a08d-34c67e0b865a_buggy.java b/tmp/2874ef51-726c-43d5-b239-464a2c19c3c1_fixed.java
index 373b1e8..968783a 100644
--- a/tmp/2a65aa16-928f-471d-a08d-34c67e0b865a_buggy.java
+++ b/tmp/2874ef51-726c-43d5-b239-464a2c19c3c1_fixed.java
@@ -1,37 +1,48 @@
+/**
+ * Checks if the input byte array resembles a UTF-8 encoded string.
+ * 
+ * @param input the byte array to check
+ * @return true if the input resembles UTF-8, false otherwise
+ */
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+    for (; i < input.length; ++i) {
         int o = input[i];
         if ((o & 0x80) == 0) {
             continue; // ASCII
         }
 
         // UTF-8 leading:
+        int end;
         if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+            end = i + 2; // Fix: Ensure at least one trailing byte
         } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
-                } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
+        } else if ((o & 0xF8) == 0xF0) {
+            end = i + 4;
         } else {
             return false;
         }
 
+        // Fix: Check for index bounds before iterating
+        if (end > input.length) {
+            return false;
+        }
 
-                while (i < end) {
+        while (i + 1 < end) { // Fix: Start from i + 1 to avoid re-checking the current byte
             i++;
             o = input[i];
             if ((o & 0xC0)!= 0x80) {
                 return false;
             }
         }
+        i++; // Move to the next potential leading byte
     }
     return true;
 }
\ No newline at end of file
