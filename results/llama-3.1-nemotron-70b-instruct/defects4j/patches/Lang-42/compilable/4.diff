diff --git a/tmp/cd0f96ac-2820-4924-aba3-2e2c572d8129_buggy.java b/tmp/5a976655-0fe3-41a0-a281-0450fb18c96f_fixed.java
index 822447c..b09a65e 100644
--- a/tmp/cd0f96ac-2820-4924-aba3-2e2c572d8129_buggy.java
+++ b/tmp/5a976655-0fe3-41a0-a281-0450fb18c96f_fixed.java
@@ -1,37 +1,69 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
+    for (int i = 0; i < len; ) {
+        int codePoint = str.codePointAt(i);
+        int charCount = Character.charCount(codePoint);
+        
+        if (codePoint > 0xFFFF) { // surrogate pair
+            // Write the high surrogate
+            char highSurrogate = str.charAt(i);
+            String entityName = this.entityName(highSurrogate);
+            if (entityName == null) {
+                writer.write("&#");
+                writer.write(Integer.toString(highSurrogate, 10));
+                writer.write(';');
+            } else {
+                writer.write('&');
+                writer.write(entityName);
+                writer.write(';');
+            }
+            // Write the low surrogate
+            char lowSurrogate = str.charAt(i + 1);
+            entityName = this.entityName(lowSurrogate);
+            if (entityName == null) {
+                writer.write("&#");
+                writer.write(Integer.toString(lowSurrogate, 10));
+                writer.write(';');
+            } else {
+                writer.write('&');
+                writer.write(entityName);
+                writer.write(';');
+            }
+            i += charCount; // increment by 2 for surrogate pair
+        } else {
             char c = str.charAt(i);
             String entityName = this.entityName(c);
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
                     writer.write(c);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            i++; // increment by 1 for single character
+        }
     }
 }
\ No newline at end of file
