diff --git a/tmp/a9cb1525-13b2-4cb0-972e-ec681d7f51a7_buggy.java b/tmp/c8321818-3af9-4432-8e16-73dba0245d7c_fixed.java
index 822447c..2dcad94 100644
--- a/tmp/a9cb1525-13b2-4cb0-972e-ec681d7f51a7_buggy.java
+++ b/tmp/c8321818-3af9-4432-8e16-73dba0245d7c_fixed.java
@@ -1,37 +1,40 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
+    StringBuilder sb = new StringBuilder();
     for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+        int codePoint = str.codePointAt(i);
+        int charCount = Character.charCount(codePoint);
+        if (charCount > 1) {
+            // surrogate pair, handle as a single unit
+            i += charCount - 1;
+        }
+        String entityName = this.entityName(codePoint);
         if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
-                    writer.write(';');
+            if (codePoint > 0x7F) {
+                sb.append("&#").append(Integer.toString(codePoint, 10)).append(';');
             } else {
-                    writer.write(c);
+                sb.appendCodePoint(codePoint);
             }
         } else {
-                writer.write('&');
-                writer.write(entityName);
-                writer.write(';');
+            sb.append('&').append(entityName).append(';');
         }
     }
+    writer.write(sb.toString());
 }
\ No newline at end of file
