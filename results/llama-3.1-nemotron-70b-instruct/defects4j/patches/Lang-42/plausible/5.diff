diff --git a/tmp/74c3f47e-a8c9-4ffc-aaa1-24e6a6a03a68_buggy.java b/tmp/81a1bad5-3f92-4413-b88f-299682ea89dd_fixed.java
index 822447c..3fe6200 100644
--- a/tmp/74c3f47e-a8c9-4ffc-aaa1-24e6a6a03a68_buggy.java
+++ b/tmp/81a1bad5-3f92-4413-b88f-299682ea89dd_fixed.java
@@ -1,37 +1,39 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+    int codePoint;
+    for (int i = 0; i < len; ) {
+        codePoint = str.codePointAt(i);
+        String entityName = this.entityName(codePoint);
         if (entityName == null) {
-                if (c > 0x7F) {
+            if (codePoint > 0x7F) {
                 writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                writer.write(Integer.toString(codePoint, 10));
                 writer.write(';');
             } else {
-                    writer.write(c);
+                writer.write(codePoint);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
+        i += Character.charCount(codePoint); // increment by the correct number of chars
     }
 }
\ No newline at end of file
