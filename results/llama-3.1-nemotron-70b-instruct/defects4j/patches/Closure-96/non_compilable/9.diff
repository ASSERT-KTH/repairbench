diff --git a/tmp/c0455ef6-4d8e-4581-a562-d05f6fbd308f_buggy.java b/tmp/9ef60c32-a281-4d05-8485-c25ab5bda5cb_fixed.java
index e0ecec8..378da8c 100644
--- a/tmp/c0455ef6-4d8e-4581-a562-d05f6fbd308f_buggy.java
+++ b/tmp/9ef60c32-a281-4d05-8485-c25ab5bda5cb_fixed.java
@@ -1,35 +1,53 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  boolean isVarArgs = functionType.isVarArgs();
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
 
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (isVarArgs) {
+      // If there are no parameters left but it's a var_args function,
+      // just check the type against the var_args type
+      Node varArgsParameter = functionType.getVarArgsParameter();
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(varArgsParameter), call, ordinal);
+    } else {
+      // If there are no parameters left and it's not a var_args function,
+      // report an error for excess arguments
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(ordinal), 
+          String.valueOf(functionType.getMinArguments()),
+          String.valueOf(functionType.getMaxArguments()));
+      break;
+    }
   }
 
+  if (!isVarArgs) {
+    int numParams = functionType.getParameterCount();
     int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (numParams < numArgs) {
+      // already reported above
+    } else if (numParams > numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          String.valueOf(numArgs), 
+          String.valueOf(functionType.getMinArguments()),
+          String.valueOf(functionType.getMaxArguments()));
+    }
   }
 }
\ No newline at end of file
