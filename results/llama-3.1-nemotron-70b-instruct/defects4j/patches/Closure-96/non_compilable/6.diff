diff --git a/tmp/ce0e5289-6bc8-4283-a851-5bc3d295f391_buggy.java b/tmp/11c79415-ede0-4b41-b475-a4ff4962acd7_fixed.java
index e0ecec8..036b166 100644
--- a/tmp/ce0e5289-6bc8-4283-a851-5bc3d295f391_buggy.java
+++ b/tmp/11c79415-ede0-4b41-b475-a4ff4962acd7_fixed.java
@@ -1,35 +1,52 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  
+  // Separate loops to handle var_args functions correctly
+  while (parameters.hasNext()) {
     parameter = parameters.next();
+    if (arguments.hasNext()) {
       argument = arguments.next();
+    } else {
+      argument = null; // no more arguments, but still parameters
+    }
     ordinal++;
 
+    if (argument!= null) {
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
     }
+  }
+
+  // Check for extra arguments (beyond declared parameters)
+  while (arguments.hasNext()) {
+    argument = arguments.next();
+    ordinal++;
+    validator.expectArgumentMatchesParameter(t, argument,
+        getJSType(argument), 
+        functionType.getVarargsElementType()!= null? 
+            functionType.getVarargsElementType() : 
+            UNKNOWN_TYPE, 
+        call, ordinal);
+  }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs!= Integer.MAX_VALUE?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
