diff --git a/tmp/3ca3c923-7c31-4590-afe6-09fc6094f602_buggy.java b/tmp/9fc52e2a-5fac-420b-b65a-079e2b949a6a_fixed.java
index e0ecec8..818870d 100644
--- a/tmp/3ca3c923-7c31-4590-afe6-09fc6094f602_buggy.java
+++ b/tmp/9fc52e2a-5fac-420b-b65a-079e2b949a6a_fixed.java
@@ -1,35 +1,54 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  boolean isVarArgs = functionType.isVarArgs();
+
+  // Check all explicitly defined parameters
+  while (parameters.hasNext()) {
     parameter = parameters.next();
+    if (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
-
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (!isVarArgs) {
+      // If there are no more arguments but the function is not var_args,
+      // report an error
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(call.getChildCount() - 1), 
+          String.valueOf(functionType.getMinArguments()),
+          String.valueOf(functionType.getMaxArguments()));
+      return;
+    }
   }
 
-    int numArgs = call.getChildCount() - 1;
-    int minArgs = functionType.getMinArguments();
-    int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  // Check var_args
+  while (arguments.hasNext()) {
+    argument = arguments.next();
+    ordinal++;
+    if (isVarArgs) {
+      JSType varArgType = functionType.getVarArgType();
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgType, call, ordinal);
+    } else {
+      // If there are more arguments than parameters and the function is not var_args,
+      // report an error
       report(t, call, WRONG_ARGUMENT_COUNT,
           validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+          String.valueOf(call.getChildCount() - 1), 
+          String.valueOf(functionType.getMinArguments()),
+          String.valueOf(functionType.getMaxArguments()));
+      return;
+    }
   }
 }
\ No newline at end of file
