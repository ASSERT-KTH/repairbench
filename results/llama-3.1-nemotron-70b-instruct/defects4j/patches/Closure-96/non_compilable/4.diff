diff --git a/tmp/0052779f-3a92-4b77-9fa4-e2d09b199a5d_buggy.java b/tmp/50cd755d-467e-4062-a3d3-d1dca696b362_fixed.java
index e0ecec8..1480b3c 100644
--- a/tmp/0052779f-3a92-4b77-9fa4-e2d09b199a5d_buggy.java
+++ b/tmp/50cd755d-467e-4062-a3d3-d1dca696b362_fixed.java
@@ -1,35 +1,44 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  boolean isVarArgs = functionType.isVarArgs();
+  List<Node> varArgs = new ArrayList<>();
+
+  // First, validate non-varargs parameters
+  while (parameters.hasNext() && arguments.hasNext()) {
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Then, validate varargs (if any)
+  if (isVarArgs && arguments.hasNext()) {
+    while (arguments.hasNext()) {
+      varArgs.add(arguments.next());
+    }
+    validator.expectVarArgsMatch(t, varArgs, functionType.getVarArgsType(), call, ordinal);
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs!= Integer.MAX_VALUE?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
