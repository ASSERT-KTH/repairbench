diff --git a/tmp/ce161c30-d158-4ddc-9a5c-acd9009136cb_buggy.java b/tmp/167a2d5b-f61f-4df3-a25c-2e48f3bf69dd_fixed.java
index 192e83d..e0de2d4 100644
--- a/tmp/ce161c30-d158-4ddc-9a5c-acd9009136cb_buggy.java
+++ b/tmp/167a2d5b-f61f-4df3-a25c-2e48f3bf69dd_fixed.java
@@ -1,21 +1,36 @@
 /**
  * Return whether or not this entry represents a directory.
  *
  * @return True if this entry is a directory.
  */
 @Override
 public boolean isDirectory() {
     if (file!= null) {
         return file.isDirectory();
     }
 
     if (linkFlag == LF_DIR) {
         return true;
     }
 
-        if (getName().endsWith("/")) {
+    // Fix: only consider names ending with "/" as directories if they don't have a corresponding pax header with a different name
+    if (getName().endsWith("/") &&!hasPaxHeaderWithOverriddenName()) {
         return true;
     }
 
     return false;
 }
+
+// Assuming the existence of a method to check for pax headers with overridden names
+private boolean hasPaxHeaderWithOverriddenName() {
+    // Implementation depends on the specifics of your TarArchiveEntry and PaxHeader handling
+    // For demonstration purposes, a simple example is provided:
+    return getoplevelPaxHeaders().stream()
+           .anyMatch(header -> header.getName()!= null &&!header.getName().endsWith("/"));
+}
+
+// Assuming the existence of a method to retrieve pax headers
+private List<PaxHeader> get topLevelPaxHeaders() {
+    // Implementation depends on the specifics of your TarArchiveEntry and PaxHeader handling
+    // For demonstration purposes, an example is omitted
+}
\ No newline at end of file
