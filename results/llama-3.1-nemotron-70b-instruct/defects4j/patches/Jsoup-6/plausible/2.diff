diff --git a/tmp/f5d330ca-b23c-430a-960e-42b08bf65bde_buggy.java b/tmp/d30f4195-0a7e-4bf2-9c2c-72fdbbd870b7_fixed.java
index 99141e0..7448c53 100644
--- a/tmp/f5d330ca-b23c-430a-960e-42b08bf65bde_buggy.java
+++ b/tmp/d30f4195-0a7e-4bf2-9c2c-72fdbbd870b7_fixed.java
@@ -1,33 +1,45 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length()); 
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2)!= null? 16 : 10; 
                 charval = Integer.valueOf(num, base);
+                if (charval > 0xFFFF) { // out of range, skip
+                    m.appendReplacement(accum, m.group(0));
+                    continue;
+                }
             } catch (NumberFormatException e) {
-                } // skip
+                m.appendReplacement(accum, m.group(0)); // skip invalid num
+                continue;
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
-            }
-
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
-            } else {
+            else { // unknown entity, skip
                 m.appendReplacement(accum, m.group(0));
+                continue;
+            }
+        }
+
+        if (charval!= -1) {
+            String c;
+            if (charval < 128) { // ASCII
+                c = Character.toString((char) charval);
+            } else { // non-ASCII, possibly multi-byte UTF-16
+                c = String.valueOf(Character.toChars(charval));
+            }
+            m.appendReplacement(accum, Matcher.quoteReplacement(c));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
