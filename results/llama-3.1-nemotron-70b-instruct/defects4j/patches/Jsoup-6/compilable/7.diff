diff --git a/tmp/40674348-e88a-499b-a991-2ba0d9887863_buggy.java b/tmp/69e2c5ba-18ae-4c9a-ae52-d1fade061fdc_fixed.java
index 99141e0..2d36a62 100644
--- a/tmp/40674348-e88a-499b-a991-2ba0d9887863_buggy.java
+++ b/tmp/69e2c5ba-18ae-4c9a-ae52-d1fade061fdc_fixed.java
@@ -1,33 +1,50 @@
+/**
+ * Unescapes a string containing HTML entities into a raw string.
+ * 
+ * @param string the string to unescape
+ * @return the unescaped string
+ */
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
                 int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator
                 charval = Integer.valueOf(num, base);
+                if (charval > 0xFFFF) { // Unicode code point out of range for a single char
+                    // Handle supplementary characters (e.g., emojis)
+                    String c = Character.toString((char) (0xD800 + (charval - 0x10000) / 0x400));
+                    c += Character.toString((char) (0xDC00 + (charval - 0x10000) % 0x400));
+                    m.appendReplacement(accum, c);
+                } else {
+                    String c = Character.toString((char) charval);
+                    m.appendReplacement(accum, c);
+                }
             } catch (NumberFormatException e) {
-                } // skip
+                // skip
+            }
         } else {
             String name = m.group(1);
-                if (full.containsKey(name))
+            if (full.containsKey(name)) {
                 charval = full.get(name);
+                if (charval!= -1) {
+                    m.appendReplacement(accum, Character.toString((char) charval));
+                } else {
+                    m.appendReplacement(accum, m.group(0));
                 }
-
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
             } else {
+                // Handle unknown entity by appending original text
                 m.appendReplacement(accum, m.group(0));
             }
         }
+    }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
