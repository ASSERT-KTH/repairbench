diff --git a/tmp/47db39c4-6953-44a4-b305-a496ea9c9dfc_buggy.java b/tmp/170b437c-f36b-45cb-8e74-0168e5fe7cdd_fixed.java
index 99141e0..7e6fcf7 100644
--- a/tmp/47db39c4-6953-44a4-b305-a496ea9c9dfc_buggy.java
+++ b/tmp/170b437c-f36b-45cb-8e74-0168e5fe7cdd_fixed.java
@@ -1,33 +1,34 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length()); 
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2)!= null? 16 : 10; 
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+                // skip
+                continue; // <--- FIX: skip to next iteration if parsing fails
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval >= 0 && charval <= 0xFFFF) { // <--- FIX: corrected range check
             String c = Character.toString((char) charval);
             m.appendReplacement(accum, c);
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
