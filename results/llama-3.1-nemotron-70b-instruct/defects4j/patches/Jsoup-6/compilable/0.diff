diff --git a/tmp/f75c7f3c-be34-4aaa-9cc9-2715ce9f8af9_buggy.java b/tmp/2e512ff1-4db6-458d-9301-bb9d8c7029db_fixed.java
index 99141e0..e2b36d6 100644
--- a/tmp/f75c7f3c-be34-4aaa-9cc9-2715ce9f8af9_buggy.java
+++ b/tmp/2e512ff1-4db6-458d-9301-bb9d8c7029db_fixed.java
@@ -1,33 +1,44 @@
+/**
+ * Unescapes a string containing HTML entities.
+ * 
+ * @param string the string to unescape
+ * @return the unescaped string
+ */
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
-            String num = m.group(3);
+        String num = m.group(2)!= null? m.group(3) : m.group(1); // handle both numeric and named entities
         if (num!= null) {
+            if (m.group(2)!= null) { // numeric entity
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    int base = m.group(2).equalsIgnoreCase("x")? 16 : 10; 
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
-            } else {
-                String name = m.group(1);
-                if (full.containsKey(name))
-                    charval = full.get(name);
+                    // skip invalid numeric entities, append original text
+                    m.appendReplacement(accum, m.group(0));
+                    continue;
+                }
+            } else { // named entity
+                if (full.containsKey(num))
+                    charval = full.get(num);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+            if (charval!= -1 && charval <= 0xFFFF) { // within valid Unicode range
                 String c = Character.toString((char) charval);
                 m.appendReplacement(accum, c);
             } else {
                 m.appendReplacement(accum, m.group(0));
             }
+        } else {
+            m.appendReplacement(accum, m.group(0)); // unknown entity, append original text
+        }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
