diff --git a/tmp/2469853f-e29d-49c8-9e89-36b3b5f3be78_buggy.java b/tmp/c63cd51e-6a6f-4d57-aff8-ee6699a77fa3_fixed.java
index 99141e0..e56d22c 100644
--- a/tmp/2469853f-e29d-49c8-9e89-36b3b5f3be78_buggy.java
+++ b/tmp/c63cd51e-6a6f-4d57-aff8-ee6699a77fa3_fixed.java
@@ -1,33 +1,57 @@
+/**
+ * Unescapes a string containing HTML entities into a raw string.
+ * @param string string to unescape
+ * @return unescaped string
+ */
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num!= null) {
             try {
                 int base = m.group(2)!= null? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                charval = Integer.parseInt(num, base); // Using Integer.parseInt instead of Integer.valueOf
             } catch (NumberFormatException e) {
-                } // skip
+                // skip, but append original match to avoid data loss
+                m.appendReplacement(accum, m.group(0));
+                continue;
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval!= -1) {
+            if (charval > 0xFFFF) { // out of range
+                // Handle surrogate pairs or high Unicode code points
                 String c = Character.toString((char) charval);
+                if (charval > 0xFFFF) {
+                    // Split into surrogate pair (if necessary)
+                    if (charval <= 0x10FFFF) {
+                        int high = 0xD800 + ((charval - 0x10000) >> 10);
+                        int low = 0xDC00 + ((charval - 0x10000) & 0x3FF);
+                        c = new String(new char[] {(char) high, (char) low});
+                    } else {
+                        // Handle invalid code points (e.g., above 0x10FFFF)
+                        // You may choose to append the original match, throw an exception, etc.
+                        c = m.group(0); // Append original for now
+                    }
+                }
                 m.appendReplacement(accum, c);
+            } else {
+                m.appendReplacement(accum, Character.toString((char) charval));
+            }
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
