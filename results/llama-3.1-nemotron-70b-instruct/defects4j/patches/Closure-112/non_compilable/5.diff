diff --git a/tmp/79d84698-8686-48ad-acf9-6b0f91f456d7_buggy.java b/tmp/da47e036-d028-43a0-b571-3594bff7aa6d_fixed.java
index 63641d0..332c398 100644
--- a/tmp/79d84698-8686-48ad-acf9-6b0f91f456d7_buggy.java
+++ b/tmp/da47e036-d028-43a0-b571-3594bff7aa6d_fixed.java
@@ -1,33 +1,36 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
        .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // If inference was incomplete, do not replace template types
+    if (inferred.values().stream().anyMatch(jstype -> jstype.isUnknown())) {
+      return false;
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
        .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
 }
\ No newline at end of file
