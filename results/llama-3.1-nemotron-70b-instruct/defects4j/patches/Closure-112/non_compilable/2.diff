diff --git a/tmp/bf86e5e2-940a-431c-9ad9-1f08d837f987_buggy.java b/tmp/36bbb291-9705-4683-b5d7-b043eb6f5d8e_fixed.java
index 63641d0..68f5439 100644
--- a/tmp/bf86e5e2-940a-431c-9ad9-1f08d837f987_buggy.java
+++ b/tmp/36bbb291-9705-4683-b5d7-b043eb6f5d8e_fixed.java
@@ -1,33 +1,55 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Check if all template types have been inferred before replacement
+  for (TemplateType key : keys) {
+    if (!inferred.containsKey(key)) {
+      // If not, infer the type from the function's return type (if applicable)
+      JSType returnType = fnType.getReturnType();
+      if (returnType!= null && returnType.isTemplatized()) {
+        inferred.putAll(inferTemplateTypesFromReturnType(fnType, returnType));
+      }
+      // If still not inferred, try to infer from 'this' type (if applicable)
+      JSType thisType = fnType.getPropertyTypeOfThis();
+      if (thisType!= null && thisType.isTemplatized()) {
+        inferred.putAll(inferTemplateTypesFromThisType(fnType, thisType));
+      }
+    }
+  }
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
+
+// Note: The following helper methods are assumed to be already implemented
+// within the class, as they are not provided in the buggy code snippet.
+// If not, they would need to be implemented according to the specific requirements.
+
+// private Map<TemplateType, JSType> inferTemplateTypesFromReturnType(FunctionType fnType, JSType returnType) {... }
+// private Map<TemplateType, JSType> inferTemplateTypesFromThisType(FunctionType fnType, JSType thisType) {... }
\ No newline at end of file
