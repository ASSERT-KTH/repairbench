diff --git a/tmp/5360be90-7fe0-4365-9b9a-1d68c8556541_buggy.java b/tmp/1223d698-c245-41c0-810c-cecd1466751a_fixed.java
index 63641d0..8216708 100644
--- a/tmp/5360be90-7fe0-4365-9b9a-1d68c8556541_buggy.java
+++ b/tmp/1223d698-c245-41c0-810c-cecd1466751a_fixed.java
@@ -1,33 +1,41 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
-
+  // **FIX**: Check if any template types were successfully inferred
+  // before attempting to replace them. This prevents replacing uninferred
+  // template types with UNKNOWN, which could lead to incorrect type checks.
+  if (inferred.values().stream().anyMatch(type -> type!= null)) {
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
        .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
+  } else {
+    // **FIX**: If no template types were inferred, do not modify the node's type
+    // to prevent incorrect type checks. Return false to indicate no changes.
+    return false;
+  }
 }
\ No newline at end of file
