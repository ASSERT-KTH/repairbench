diff --git a/tmp/1570a654-4f3e-46d1-a954-3d6d67a13661_buggy.java b/tmp/a853d659-9904-4adb-a590-d8fce4a4f32d_fixed.java
index 63641d0..326fded 100644
--- a/tmp/1570a654-4f3e-46d1-a954-3d6d67a13661_buggy.java
+++ b/tmp/a853d659-9904-4adb-a590-d8fce4a4f32d_fixed.java
@@ -1,33 +1,37 @@
 /**
  * For functions with function(this: T,...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
      .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // If inference was unsuccessful for any template type, 
+  // do not attempt to replace template types to avoid incorrect replacements
+  if (inferred.values().stream().anyMatch(t -> t ==.registry.getUnknownType())) {
+    return false;
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Replace all template types. 
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
      .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
