diff --git a/tmp/adfa92c4-896b-4724-8905-dc4765e9ca0b_buggy.java b/tmp/66f0a7b5-da98-4efb-81ef-859fbeea286f_fixed.java
index 6e45f80..dffed28 100644
--- a/tmp/adfa92c4-896b-4724-8905-dc4765e9ca0b_buggy.java
+++ b/tmp/66f0a7b5-da98-4efb-81ef-859fbeea286f_fixed.java
@@ -1,21 +1,37 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
-
+      // Additional check to ensure typeAdapter can handle the specific subtype
+      return (requestedType.equals(clazz)) 
+            ? (TypeAdapter<T2>) typeAdapter 
+             : new TypeAdapter<T2>() {
+                 @Override
+                 public void write(JsonWriter out, T2 value) throws IOException {
+                   typeAdapter.write(out, clazz.cast(value));
+                 }
+                 @Override
+                 public T2 read(JsonReader in) throws IOException {
+                   T1 value = typeAdapter.read(in);
+                   if (!requestedType.isInstance(value)) {
+                     throw new JsonSyntaxException(
+                         "Expected " + requestedType.getName() + " but was " + value.getClass().getName());
+                   }
+                   return requestedType.cast(value);
+                 }
+               };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
