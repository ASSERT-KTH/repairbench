diff --git a/tmp/0844d1e7-2d8c-449d-bc4d-050322bf6ac2_buggy.java b/tmp/1f883d0e-c21f-425f-aeec-87b1226c2e55_fixed.java
index 6e45f80..9cfc2c6 100644
--- a/tmp/0844d1e7-2d8c-449d-bc4d-050322bf6ac2_buggy.java
+++ b/tmp/1f883d0e-c21f-425f-aeec-87b1226c2e55_fixed.java
@@ -1,21 +1,34 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
-
+      // Added explicit type check before casting
+      return new TypeAdapter<T2>() {
+        @Override
+        public void write(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.write(out, value);
+        }
+        @Override
+        public T2 read(JsonReader in) throws IOException {
+          T1 deserialized = typeAdapter.read(in);
+          if (!requestedType.isInstance(deserialized)) {
+            throw new JsonSyntaxException("Expected " + requestedType.getName() + " but was " + deserialized.getClass().getName());
+          }
+          return requestedType.cast(deserialized);
+        }
+      };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
