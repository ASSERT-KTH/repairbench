diff --git a/tmp/14bae5bd-610c-46a6-811a-e8383e074fd5_buggy.java b/tmp/b9e800d3-1810-4cab-9281-e045ba1ae4ce_fixed.java
index 5f8ac1a..54767a2 100644
--- a/tmp/14bae5bd-610c-46a6-811a-e8383e074fd5_buggy.java
+++ b/tmp/b9e800d3-1810-4cab-9281-e045ba1ae4ce_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Handle null case for p1 or p2 at the beginning
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null || p2 == null) {
+        return p1 == null? -1 : 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
-        }
-
-        if (depth1 == 1) {
+    // Check if both pointers belong to the same tree before comparing
+    if (!p1.isSameTree(p2)) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
+
+    if (p1.equals(p2)) {
+        return 0;
+    }
+
+    if (depth1 == 1) {
+        // If at root level and not equal, consider them unequal
+        return p1.hashCode() - p2.hashCode();
+    }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
