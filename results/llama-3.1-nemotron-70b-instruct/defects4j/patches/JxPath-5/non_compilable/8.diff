diff --git a/tmp/c430b349-68d4-43b3-a5c9-111b4ced20fe_buggy.java b/tmp/6c16f7e1-8e73-426a-9046-09b0b46752c1_fixed.java
index 5f8ac1a..9832949 100644
--- a/tmp/c430b349-68d4-43b3-a5c9-111b4ced20fe_buggy.java
+++ b/tmp/6c16f7e1-8e73-426a-9046-09b0b46752c1_fixed.java
@@ -1,34 +1,54 @@
+/**
+ * Compares two NodePointers.
+ * 
+ * @param p1 NodePointer to compare
+ * @param depth1 Depth of p1
+ * @param p2 NodePointer to compare
+ * @param depth2 Depth of p2
+ * @return -1 if p1 is "less than" p2, 1 if p1 is "greater than" p2, 0 if equal
+ */
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Check if either pointer is a VariablePointer (not part of a document tree)
+    if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+        // If one is a VariablePointer and the other is not, they are not equal
+        if (!(p1 instanceof VariablePointer) ||!(p2 instanceof VariablePointer)) {
+            return p1 instanceof VariablePointer? -1 : 1;
+        }
+        // Both are VariablePointers, compare their values
+        return ((VariablePointer) p1).getValue().compareTo(((VariablePointer) p2).getValue());
+    }
+
+    // Original logic for comparing NodePointers within a document tree
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1!= null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
