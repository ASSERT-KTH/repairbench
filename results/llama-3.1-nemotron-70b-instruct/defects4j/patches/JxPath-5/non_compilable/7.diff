diff --git a/tmp/da1d6a28-7d3c-43d0-a299-3a1f5ad3c7db_buggy.java b/tmp/2a86a3d8-e6b8-4b47-897c-71ba49974107_fixed.java
index 5f8ac1a..a3f35d3 100644
--- a/tmp/da1d6a28-7d3c-43d0-a299-3a1f5ad3c7db_buggy.java
+++ b/tmp/2a86a3d8-e6b8-4b47-897c-71ba49974107_fixed.java
@@ -1,34 +1,45 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        if (p1 instanceof VariablePointer && p2 instanceof VariablePointer) {
+            // Compare variable pointers based on their values or names
+            return ((VariablePointer) p1).getValue().equals(((VariablePointer) p2).getValue())? 0 : 
+                   ((VariablePointer) p1).getName().compareTo(((VariablePointer) p2).getName());
+        }
+        
+        if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+            // If one is a variable pointer and the other is not, consider them unequal
+            return p1 instanceof VariablePointer? -1 : 1;
+        }
+        
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1!= null && p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r!= 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
