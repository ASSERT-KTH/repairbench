diff --git a/tmp/3eaffe1b-8f14-4c64-95c6-2e097d502077_buggy.java b/tmp/efe17792-0f44-4e27-8e2d-a84487d400a3_fixed.java
index 5f8ac1a..db23320 100644
--- a/tmp/3eaffe1b-8f14-4c64-95c6-2e097d502077_buggy.java
+++ b/tmp/efe17792-0f44-4e27-8e2d-a84487d400a3_fixed.java
@@ -1,34 +1,55 @@
+/**
+ * Compares two NodePointers for equality.
+ * 
+ * @param p1 NodePointer to compare
+ * @param depth1 Depth of p1
+ * @param p2 NodePointer to compare
+ * @param depth2 Depth of p2
+ * @return 0 if equal, -1 if p1 is less than p2, 1 if p1 is greater than p2
+ */
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Check if either pointer is a VariablePointer (i.e., not part of a tree)
+    if (p1 instanceof VariablePointer || p2 instanceof VariablePointer) {
+        // If one is a VariablePointer and the other isn't, they're not equal
+        if (!(p1 instanceof VariablePointer && p2 instanceof VariablePointer)) {
+            throw new JXPathException(
+                    "Cannot compare pointers that do not belong to the same tree: '"
+                            + p1 + "' and '" + p2 + "'");
+        }
+        // If both are VariablePointers, compare their values
+        return ((VariablePointer) p1).getValue().equals(((VariablePointer) p2).getValue())? 0 : 1;
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
     if (p1!= null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
         throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
