diff --git a/tmp/29719e56-93b6-4bb2-9f19-31d2c08664b0_buggy.java b/tmp/33299bcb-0222-4534-b26d-16d66c505bca_fixed.java
index 5f8ac1a..85eeebc 100644
--- a/tmp/29719e56-93b6-4bb2-9f19-31d2c08664b0_buggy.java
+++ b/tmp/33299bcb-0222-4534-b26d-16d66c505bca_fixed.java
@@ -1,34 +1,35 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Special handling for null pointers (variables) to allow comparison across trees
+    if (p1 == null || p2 == null) {
+        return (p1 == null? 1 : 0) - (p2 == null? 1 : 0);
+    }
+
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+    if (p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+        // No explicit exception for root level comparison; instead, handle as unequal
+        return p1.compareTo(p2);
     }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r!= 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
