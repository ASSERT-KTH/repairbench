diff --git a/tmp/c3629be4-e8bf-4b78-b204-53679aaae2d0_buggy.java b/tmp/32b7ae71-aa4d-4612-b007-bb8f35f78842_fixed.java
index 8ff679b..38209a1 100644
--- a/tmp/c3629be4-e8bf-4b78-b204-53679aaae2d0_buggy.java
+++ b/tmp/32b7ae71-aa4d-4612-b007-bb8f35f78842_fixed.java
@@ -1,39 +1,43 @@
 /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
+ * Check whether there's any property conflict for a particular super interface
  * @param t The node traversal object that supplies context
  * @param n The node being visited
  * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
+ * @param properties The property names in the super interfaces that have been visited
+ * @param currentProperties The property names in the super interface that have been visited
  * @param interfaceType The super interface that is being visited
  */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
     String functionName, HashMap<String, ObjectType> properties,
     HashMap<String, ObjectType> currentProperties,
     ObjectType interfaceType) {
+  if (interfaceType == null) { // added null check
+    return;
+  }
   ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+  if (implicitProto == null) { // added null check
+    compiler.report(
+        t.makeError(n, UNKNOWN_INTERFACE_TYPE, functionName, interfaceType.toString()));
+    return;
+  }
+  Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
   for (String name : currentPropertyNames) {
     ObjectType oType = properties.get(name);
     if (oType!= null) {
       if (!interfaceType.getPropertyType(name).isEquivalentTo(
           oType.getPropertyType(name))) {
         compiler.report(
             t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                 functionName, name, oType.toString(),
                 interfaceType.toString()));
       }
     }
     currentProperties.put(name, interfaceType);
   }
   for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+    if (iType!= null) { // added null check
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
+}
\ No newline at end of file
