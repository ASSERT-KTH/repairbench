diff --git a/tmp/941e0c6b-3a5b-4d5c-87f1-b4b301a58a67_buggy.java b/tmp/b89eb98f-8e06-4451-ac4c-f7fca3481024_fixed.java
index 8ff679b..4e0200f 100644
--- a/tmp/941e0c6b-3a5b-4d5c-87f1-b4b301a58a67_buggy.java
+++ b/tmp/b89eb98f-8e06-4451-ac4c-f7fca3481024_fixed.java
@@ -1,39 +1,47 @@
 /**
-   * Check whether there's any property conflict for for a particular super
-   * interface
+ * Check whether there's any property conflict for a particular super interface
  * @param t The node traversal object that supplies context
  * @param n The node being visited
  * @param functionName The function name being checked
-   * @param properties The property names in the super interfaces that have
-   * been visited
-   * @param currentProperties The property names in the super interface
-   * that have been visited
+ * @param properties The property names in the super interfaces that have been visited
+ * @param currentProperties The property names in the super interface that have been visited
  * @param interfaceType The super interface that is being visited
  */
 private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    if (interfaceType == null) { // added null check for interfaceType
+      return;
+    }
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) { // added null check for implicitProto
+      compiler.report(
+          t.makeError(n, BAD_TYPE_ANNOTATION, functionName, interfaceType.toString()));
+      return;
+    }
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (currentPropertyNames == null) { // added null check for currentPropertyNames
+      // This can be the case if interfaceType is proxy to a non-existent object
+      return;
+    }
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType!= null) {
         if (!interfaceType.getPropertyType(name).isEquivalentTo(
             oType.getPropertyType(name))) {
           compiler.report(
               t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                   functionName, name, oType.toString(),
                   interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
+      if (iType!= null) { // added null check for iType
         checkInterfaceConflictProperties(t, n, functionName, properties,
             currentProperties, iType);
       }
     }
+  }
\ No newline at end of file
