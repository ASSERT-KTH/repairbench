diff --git a/tmp/cee10736-78a3-4077-afc2-f873c5773013_buggy.java b/tmp/dbfa8224-25cf-4421-8af6-920246701346_fixed.java
index 4b163f6..de340fc 100644
--- a/tmp/cee10736-78a3-4077-afc2-f873c5773013_buggy.java
+++ b/tmp/dbfa8224-25cf-4421-8af6-920246701346_fixed.java
@@ -1,28 +1,35 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long chunk = input.skip(numToSkip);
+        if (chunk > 0) {
+            skipped += chunk;
+            numToSkip -= chunk;
+        } else {
+            // fallback to read() if skip() returns 0
+            int b;
+            while (numToSkip > 0 && (b = input.read())!= -1) {
+                skipped++;
+                numToSkip--;
+            }
             break;
         }
-            numToSkip -= skipped;
     }
-            
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
