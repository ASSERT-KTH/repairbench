diff --git a/tmp/03775184-85ee-40a1-a5bd-014f651e3023_buggy.java b/tmp/c0e5cab5-8efc-4f00-a46d-ea7a99aa480c_fixed.java
index 4b163f6..47a5df6 100644
--- a/tmp/03775184-85ee-40a1-a5bd-014f651e3023_buggy.java
+++ b/tmp/c0e5cab5-8efc-4f00-a46d-ea7a99aa480c_fixed.java
@@ -1,28 +1,38 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long skippedThisTime = input.skip(numToSkip);
+        if (skippedThisTime == 0) {
+            // fall back to read() if skip() returns 0
+            byte[] buffer = new byte[1024];
+            while (numToSkip > 0) {
+                int bytesRead = input.read(buffer, 0, (int) Math.min(numToSkip, buffer.length));
+                if (bytesRead == -1) {
+                    break; // end of stream reached
+                }
+                skipped += bytesRead;
+                numToSkip -= bytesRead;
+            }
             break;
         }
-            numToSkip -= skipped;
+        skipped += skippedThisTime;
+        numToSkip -= skippedThisTime;
     }
-            
-        return available - numToSkip;
+    return skipped;
 }
\ No newline at end of file
