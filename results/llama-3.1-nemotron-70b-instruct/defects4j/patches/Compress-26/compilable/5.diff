diff --git a/tmp/be30fb2b-8f46-412a-9042-3bb506740aaa_buggy.java b/tmp/01e1ff5b-55ad-44c1-aaa3-38e4039c1736_fixed.java
index 4b163f6..b9d5638 100644
--- a/tmp/be30fb2b-8f46-412a-9042-3bb506740aaa_buggy.java
+++ b/tmp/01e1ff5b-55ad-44c1-aaa3-38e4039c1736_fixed.java
@@ -1,28 +1,37 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+        if (skipped > 0) {
             numToSkip -= skipped;
+        } else { // skip() returned 0, fall back to read()
+            byte[] buf = new byte[1024];
+            while (numToSkip > 0) {
+                int len = (int) Math.min(buf.length, numToSkip);
+                int read = input.read(buf, 0, len);
+                if (read == -1) { // end of stream reached
+                    break;
+                }
+                numToSkip -= read;
+            }
+            break; // exit the outer while loop
+        }
     }
-            
     return available - numToSkip;
 }
\ No newline at end of file
