diff --git a/tmp/bb653041-c6a4-457a-85ad-9b2e179e6fc2_buggy.java b/tmp/f62b79d2-1d1c-4f33-bffd-8c9afec645a1_fixed.java
index 4b163f6..3a5e93c 100644
--- a/tmp/bb653041-c6a4-457a-85ad-9b2e179e6fc2_buggy.java
+++ b/tmp/f62b79d2-1d1c-4f33-bffd-8c9afec645a1_fixed.java
@@ -1,28 +1,36 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
         if (skipped == 0) {
+            // fall back to using read() if skip() returns 0
+            while (numToSkip > 0) {
+                int read = input.read();
+                if (read == -1) {
+                    break; // end of stream reached
+                }
+                numToSkip--;
+            }
             break;
         }
         numToSkip -= skipped;
     }
     
     return available - numToSkip;
 }
\ No newline at end of file
