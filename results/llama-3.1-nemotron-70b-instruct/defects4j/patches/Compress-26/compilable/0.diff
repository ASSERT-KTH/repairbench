diff --git a/tmp/eeba2667-624b-4b53-bfa7-f06463401997_buggy.java b/tmp/520ea63b-9555-4baa-9493-9ef152b6de61_fixed.java
index 4b163f6..e234be1 100644
--- a/tmp/eeba2667-624b-4b53-bfa7-f06463401997_buggy.java
+++ b/tmp/520ea63b-9555-4baa-9493-9ef152b6de61_fixed.java
@@ -1,28 +1,32 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
  * the requested number of bytes has been skip this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long justSkipped = input.skip(numToSkip);
+        if (justSkipped == 0) { // fallback to read() if skip() returns 0
+            int b = input.read();
+            if (b == -1) { // end of stream reached
                 break;
             }
-            numToSkip -= skipped;
+            justSkipped = 1; // successfully read (and thus skipped) 1 byte
         }
-            
-        return available - numToSkip;
+        skipped += justSkipped;
+        numToSkip -= justSkipped;
+    }
+    return skipped;
 }
\ No newline at end of file
