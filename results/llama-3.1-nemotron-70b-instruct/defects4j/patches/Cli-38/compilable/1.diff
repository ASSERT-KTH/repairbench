diff --git a/tmp/48551d0b-33b1-4212-909e-8d779cd620bf_buggy.java b/tmp/e13146de-0688-40fd-abdf-3040f7bb28ac_fixed.java
index 81a6e8b..718d1d1 100644
--- a/tmp/48551d0b-33b1-4212-909e-8d779cd620bf_buggy.java
+++ b/tmp/e13146de-0688-40fd-abdf-3040f7bb28ac_fixed.java
@@ -1,19 +1,29 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
 private boolean isShortOption(String token)
 {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
     if (!token.startsWith("-") || token.length() == 1)
     {
         return false;
     }
 
-        // remove leading "-" and "=value"
+    // remove leading "-"
+    String optName = token.substring(1);
+
+    // check if token contains concatenated short options
+    for (char c : optName.toCharArray()) {
+        String singleOpt = String.valueOf(c);
+        if (!options.hasShortOption(singleOpt) &&!singleOpt.contains("=")) {
+            return false; // not a short option if any character doesn't match
+        }
+    }
+
+    // specifically check for the initial token without splitting, for "=value" case
     int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    String initialOptName = pos == -1? optName : optName.substring(0, pos);
+    return options.hasShortOption(initialOptName);
 }
\ No newline at end of file
