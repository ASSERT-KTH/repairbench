diff --git a/tmp/4035f8a3-351a-43df-92b2-d92ecabdd912_buggy.java b/tmp/45cf48f9-05fd-49fa-bd13-fa021485f8d6_fixed.java
index a5e7b85..d3929bb 100644
--- a/tmp/4035f8a3-351a-43df-92b2-d92ecabdd912_buggy.java
+++ b/tmp/45cf48f9-05fd-49fa-bd13-fa021485f8d6_fixed.java
@@ -1,52 +1,64 @@
 protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
 {
     JsonDeserializer<Object> deser = _deserializers.get(typeId);
     if (deser == null) {
         /* As per [Databind#305], need to provide contextual info. But for
          * backwards compatibility, let's start by only supporting this
          * for base class, not via interface. Later on we can add this
          * to the interface, assuming deprecation at base class helps.
          */
         JavaType type = _idResolver.typeFromId(ctxt, typeId);
         if (type == null) {
             // As per [JACKSON-614], use the default impl if no type id available:
             deser = _findDefaultImplDeserializer(ctxt);
             if (deser == null) {
                 // 10-May-2016, tatu: We may get some help...
                 JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                if (actual == null) { 
+                    // Instead of returning null, throw an exception for better error handling
+                    throw new JsonMappingException(ctxt, "Unable to resolve type id '" + typeId + "' into a Java type");
                 }
                 //... would this actually work?
                 deser = ctxt.findContextualValueDeserializer(actual, _property);
             }
         } else {
             /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
              *   we actually now need to explicitly narrow from base type (which may have parameterization)
              *   using raw type.
              *
              *   One complication, though; can not change 'type class' (simple type to container); otherwise
              *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
              *   type in process (getting SimpleType of Map.class which will not work as expected)
              */
             if ((_baseType!= null)
                     && _baseType.getClass() == type.getClass()) {
                 /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
                  *   but it appears to check that JavaType impl class is the same which is
                  *   important for some reason?
                  *   Disabling the check will break 2 Enum-related tests.
                  */
                 // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
                 //   generic type with custom type resolvers. If so, should try to retain them.
                 //  Whether this is sufficient to avoid problems remains to be seen, but for
                 //  now it should improve things.
+                if (type.isContainerType() || type.UseTextualTypeResolver()) {
+                    // If the resolved type has type parameters or uses a textual type resolver,
+                    // do not narrow it to the base type to preserve parameterization
+                    ;
+                } else {
                     type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                 }
+            }
+            // Check if the deserializer is already registered for the resolved type
             deser = ctxt.findContextualValueDeserializer(type, _property);
+            if (deser == null) {
+                // If not, try to find a deserializer for the raw class of the resolved type
+                // This helps in cases where the resolved type has type parameters
+                deser = ctxt.findContextualValueDeserializer(ctxt.constructType(type.getRawClass()), _property);
             }
             _deserializers.put(typeId, deser);
         }
+    }
     return deser;
 }
\ No newline at end of file
