diff --git a/tmp/f299b1c0-d0b2-416e-b176-7a95b324d782_buggy.java b/tmp/dfba1745-7564-4547-a438-a7ec748fa64f_fixed.java
index a5e7b85..d438ca9 100644
--- a/tmp/f299b1c0-d0b2-416e-b176-7a95b324d782_buggy.java
+++ b/tmp/dfba1745-7564-4547-a438-a7ec748fa64f_fixed.java
@@ -1,52 +1,90 @@
 protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,
             String typeId) throws IOException
 {
     JsonDeserializer<Object> deser = _deserializers.get(typeId);
     if (deser == null) {
-            /* As per [Databind#305], need to provide contextual info. But for
-             * backwards compatibility, let's start by only supporting this
-             * for base class, not via interface. Later on we can add this
-             * to the interface, assuming deprecation at base class helps.
-             */
         JavaType type = _idResolver.typeFromId(ctxt, typeId);
         if (type == null) {
-                // As per [JACKSON-614], use the default impl if no type id available:
             deser = _findDefaultImplDeserializer(ctxt);
             if (deser == null) {
-                    // 10-May-2016, tatu: We may get some help...
                 JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType);
-                    if (actual == null) { // what should this be taken to mean?
-                        // TODO: try to figure out something better
-                        return null;
+                if (actual == null) {
+                    // Instead of returning null, throw an exception to indicate failure
+                    throw JsonMappingException.from(ctxt, "Cannot resolve type id '" + typeId + "' into a subtype of " + _baseType);
                 }
-                    // ... would this actually work?
                 deser = ctxt.findContextualValueDeserializer(actual, _property);
             }
         } else {
-                /* 16-Dec-2010, tatu: Since nominal type we get here has no (generic) type parameters,
-                 *   we actually now need to explicitly narrow from base type (which may have parameterization)
-                 *   using raw type.
-                 *
-                 *   One complication, though; can not change 'type class' (simple type to container); otherwise
-                 *   we may try to narrow a SimpleType (Object.class) into MapType (Map.class), losing actual
-                 *   type in process (getting SimpleType of Map.class which will not work as expected)
-                 */
-                if ((_baseType != null)
-                        && _baseType.getClass() == type.getClass()) {
-                    /* 09-Aug-2015, tatu: Not sure if the second part of the check makes sense;
-                     *   but it appears to check that JavaType impl class is the same which is
-                     *   important for some reason?
-                     *   Disabling the check will break 2 Enum-related tests.
-                     */
-                    // 19-Jun-2016, tatu: As per [databind#1270] we may actually get full
-                    //   generic type with custom type resolvers. If so, should try to retain them.
-                    //  Whether this is sufficient to avoid problems remains to be seen, but for
-                    //  now it should improve things.
+            if ((_baseType!= null) && _baseType.getClass() == type.getClass()) {
+                // Additionally, check if the type has type parameters and retain them if possible
+                if (type.hasTypeParameters()) {
+                    type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass(), type.getTypeParameters());
+                } else {
                     type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());
                 }
+            }
+            // Before assigning the deserializer, check if the type matches the expected type
+            if (_property.hasValueTypeDeserializer()) {
+                JavaType valueType = _property.getValueType();
+                if (!valueType.isTypeOrSuperType(type)) {
+                    // If not, try to find a deserializer for the actual type
+                    JsonDeserializer<?> valueDeser = ctxt.findContextualValueDeserializer(type, _property);
+                    // If found, create a delegating deserializer to handle the type mismatch
+                    deser = new DelegatingDeserializer(valueDeser, type);
+                } else {
                     deser = ctxt.findContextualValueDeserializer(type, _property);
                 }
+            } else {
+                deser = ctxt.findContextualValueDeserializer(type, _property);
+            }
+        }
         _deserializers.put(typeId, deser);
     }
     return deser;
 }
+
+// Helper class for delegating deserialization to a different type
+private static class DelegatingDeserializer extends JsonDeserializer<Object> {
+    private final JsonDeserializer<?> _delegate;
+    private final JavaType _actualType;
+
+    public DelegatingDeserializer(JsonDeserializer<?> delegate, JavaType actualType) {
+        _delegate = delegate;
+        _actualType = actualType;
+    }
+
+    @Override
+    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        return _delegate.deserialize(p, ctxt);
+    }
+
+    @Override
+    public Object deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue) throws IOException {
+        return _delegate.deserialize(p, ctxt, intoValue);
+    }
+
+    @Override
+    public AccessPattern getEmptyAccessPattern() {
+        return _delegate.getEmptyAccessPattern();
+    }
+
+    @Override
+    public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
+        return _delegate.getEmptyValue(ctxt);
+    }
+
+    @Override
+    public Object getNullValue(DeserializationContext ctxt) throws JsonMappingException {
+        return _delegate.getNullValue(ctxt);
+    }
+
+    @Override
+    public Object getNullAccessPattern() {
+        return _delegate.getNullAccessPattern();
+    }
+
+    @Override
+    public AccessPattern getAccessPattern() {
+        return _delegate.getAccessPattern();
+    }
+}
\ No newline at end of file
