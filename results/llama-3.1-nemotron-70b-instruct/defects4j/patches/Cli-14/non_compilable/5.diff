diff --git a/tmp/9ad366ae-95f5-4ae5-bf47-86cbf6361b1e_buggy.java b/tmp/2eb691cf-0ff3-4654-9ea9-b0ba088e6156_fixed.java
index 71189c3..552dc23 100644
--- a/tmp/9ad366ae-95f5-4ae5-bf47-86cbf6361b1e_buggy.java
+++ b/tmp/2eb691cf-0ff3-4654-9ea9-b0ba088e6156_fixed.java
@@ -1,46 +1,62 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
-                option.validate(commandLine);
+            // Fix: Ensure correct casting of option value
+            Object value = commandLine.getValue(option);
+            if (value!= null && option.getArgument()!= null) {
+                try {
+                    value = option.getArgument().getType().convertValue(value);
+                } catch (Exception e) {
+                    throw new OptionException(this, ResourceConstants.INVALID_VALUE, option.getPreferredName(), e);
+                }
+            }
+            option.validate(commandLine, value); // Pass the validated value
         }
     }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
-            option.validate(commandLine);
+        Object value = commandLine.getValue(option);
+        if (value!= null && option.getArgument()!= null) {
+            try {
+                value = option.getArgument().getType().convertValue(value);
+            } catch (Exception e) {
+                throw new OptionException(this, ResourceConstants.INVALID_VALUE, option.getPreferredName(), e);
+            }
+        }
+        option.validate(commandLine, value); // Pass the validated value
     }
 }
\ No newline at end of file
