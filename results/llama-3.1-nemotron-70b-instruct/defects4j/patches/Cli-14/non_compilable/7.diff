diff --git a/tmp/a4ee46cb-4c79-40dd-8df6-072b54fa688e_buggy.java b/tmp/8c0bf253-e805-4cae-a4f0-0d824568c9cf_fixed.java
index 71189c3..7770194 100644
--- a/tmp/a4ee46cb-4c79-40dd-8df6-072b54fa688e_buggy.java
+++ b/tmp/8c0bf253-e805-4cae-a4f0-0d824568c9cf_fixed.java
@@ -1,46 +1,63 @@
+/**
+ * Validate the specified command line.
+ * 
+ * @param commandLine the command line to validate
+ * @throws OptionException if there are any validation errors
+ */
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            // Fix: Cast to correct type before validation
+            Object value = commandLine.getValue(option);
+            if (value instanceof String && option.getArgument()!= null 
+                && option.getArgument().getValidator()!= null) {
+                try {
+                    option.getArgument().getValidator().validate((String) value);
+                } catch (ValidatorException ve) {
+                    throw new OptionException(this, ve.getMessage(), option.getPreferredName());
+                }
+            } else {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
