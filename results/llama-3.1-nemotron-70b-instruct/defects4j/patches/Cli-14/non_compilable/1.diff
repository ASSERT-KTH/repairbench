diff --git a/tmp/dfb4b90e-1c12-4aba-a111-794e3e7848ed_buggy.java b/tmp/1bf2e6b4-1314-460b-9d86-15dc97da22f7_fixed.java
index 71189c3..751edad 100644
--- a/tmp/dfb4b90e-1c12-4aba-a111-794e3e7848ed_buggy.java
+++ b/tmp/1bf2e6b4-1314-460b-9d86-15dc97da22f7_fixed.java
@@ -1,46 +1,61 @@
+/**
+ * Validates the given command line against the set of defined options.
+ * 
+ * @param commandLine the command line to validate
+ * @throws OptionException if validation fails
+ */
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
-                option.validate(commandLine);
+            // Fix: Explicitly cast to correct type before validation
+            Object value = commandLine.getValue(option);
+            if (value!= null && option.getArgument()!= null) {
+                try {
+                    value = option.getArgument().getType().getParser().parse(value);
+                } catch (ParseException e) {
+                    throw new OptionException(this, ResourceConstants.INVALID_VALUE, option.getPreferredName(), e);
+                }
+            }
+            option.validate(commandLine.withValue(option, value));
         }
     }
 
     // too many options
     if (unexpected!= null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
