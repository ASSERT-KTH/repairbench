diff --git a/tmp/c03d7b98-fa90-4f35-8ed9-813d71c65f34_buggy.java b/tmp/7035f070-6f6d-4a4e-94f5-6fe2da141faf_fixed.java
index 351a97a..ff255b8 100644
--- a/tmp/c03d7b98-fa90-4f35-8ed9-813d71c65f34_buggy.java
+++ b/tmp/7035f070-6f6d-4a4e-94f5-6fe2da141faf_fixed.java
@@ -1,18 +1,45 @@
 /**
  * Tests the list for equality with another object (typically also a list).
  *
  * @param obj  the other object (<code>null</code> permitted).
  *
  * @return A boolean.
  */
 public boolean equals(Object obj) {
 
     if (obj == this) {
         return true;
     }
     if (!(obj instanceof ShapeList)) {
         return false;
     }
-        return super.equals(obj);
+    ShapeList other = (ShapeList) obj;
+    return super.equals(obj) && this.size() == other.size() 
+           && this.elementsEqual(other); // Assuming elementsEqual() method exists
 
 }
+
+// If elementsEqual() method doesn't exist, you can add it as follows:
+
+private boolean elementsEqual(ShapeList other) {
+    if (this.size()!= other.size()) {
+        return false;
+    }
+    for (int i = 0; i < this.size(); i++) {
+        if (!equalsShape(this.getShape(i), other.getShape(i))) {
+            return false;
+        }
+    }
+    return true;
+}
+
+// Helper method to compare shapes (considering null cases)
+private boolean equalsShape(Shape s1, Shape s2) {
+    if (s1 == null && s2 == null) {
+        return true;
+    }
+    if (s1 == null || s2 == null) {
+        return false;
+    }
+    return s1.equals(s2);
+}
\ No newline at end of file
