diff --git a/tmp/7744c5da-1da1-41ba-a34b-e4f147417632_buggy.java b/tmp/ecc397ac-9b11-4a76-bb91-5a0d853a56f2_fixed.java
index 351a97a..d71f1c6 100644
--- a/tmp/7744c5da-1da1-41ba-a34b-e4f147417632_buggy.java
+++ b/tmp/ecc397ac-9b11-4a76-bb91-5a0d853a56f2_fixed.java
@@ -1,18 +1,43 @@
 /**
  * Tests the list for equality with another object (typically also a list).
  *
  * @param obj  the other object (<code>null</code> permitted).
  *
  * @return A boolean.
  */
 public boolean equals(Object obj) {
 
     if (obj == this) {
         return true;
     }
     if (!(obj instanceof ShapeList)) {
         return false;
     }
-        return super.equals(obj);
+    ShapeList other = (ShapeList) obj;
+    return this.size() == other.size() && 
+           this contenuEquals(other); // NOTE: You might need to implement or use an existing method for deep content comparison
 
+    // Alternatively, if the superclass has a correct implementation for list comparison:
+    // return super.equals(obj);
+
+    // The previous super.equals(obj) was likely failing because the superclass (e.g., AbstractList) 
+    // relies on the equals method of the elements. If the elements (Shapes) do not have a proper 
+    // equals implementation, the comparison would fail. The added condition checks for size and 
+    // content equality explicitly.
+}
+
+// If needed (as hinted in the code above), here's an example implementation for deep content comparison:
+private boolean contenuEquals(ShapeList other) {
+    for (int i = 0; i < size(); i++) {
+        Object thisElement = get(i);
+        Object otherElement = other.get(i);
+        if (thisElement == null) {
+            if (otherElement!= null) {
+                return false;
+            }
+        } else if (!thisElement.equals(otherElement)) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
