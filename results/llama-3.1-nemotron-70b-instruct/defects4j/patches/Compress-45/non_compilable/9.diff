diff --git a/tmp/c6b16d15-2113-4abf-bb5c-f89c00acbc83_buggy.java b/tmp/2e2fd757-a0da-4996-b478-620a6f44507c_fixed.java
index 1bbc082..23d7f20 100644
--- a/tmp/c6b16d15-2113-4abf-bb5c-f89c00acbc83_buggy.java
+++ b/tmp/2e2fd757-a0da-4996-b478-620a6f44507c_fixed.java
@@ -1,36 +1,44 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
-        if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+    // Calculate the actual space needed for the binary representation
+    final int binaryLength = (long.SIZE - Long.numberOfLeadingZeros(Math.abs(value)) + 7) / 8;
+    if (binaryLength + (negative? 1 : 0) > length) {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
     }
+
+    if (binaryLength + (negative? 1 : 0) <= length) {
+        formatLongBinary(value, buf, offset, binaryLength, negative);
+        if (negative) {
+            buf[offset + binaryLength] = (byte) 0xff;
+        }
+    } else {
         formatBigIntegerBinary(value, buf, offset, length, negative);
-
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    }
     return offset + length;
 }
\ No newline at end of file
