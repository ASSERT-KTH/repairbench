diff --git a/tmp/19560ca7-70d6-445f-88f8-880c5dbcff54_buggy.java b/tmp/09010e9b-63d3-48f3-ba00-fcbf65053a08_fixed.java
index 1bbc082..33e44d1 100644
--- a/tmp/19560ca7-70d6-445f-88f8-880c5dbcff54_buggy.java
+++ b/tmp/09010e9b-63d3-48f3-ba00-fcbf65053a08_fixed.java
@@ -1,36 +1,37 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
-            return formatLongOctalBytes(value, buf, offset, length);
+    if ((!negative && value <= maxAsOctalChar) || (negative && -value <= maxAsOctalChar)) { 
+        // OK to store as octal chars, considering absolute value for negative numbers
+        return formatLongOctalBytes((negative? -value : value), buf, offset, length);
     }
 
     if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
     }
+
     formatBigIntegerBinary(value, buf, offset, length, negative);
-
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+    buf[offset + length - 1] = (byte) (negative? 0xff : 0x80); // Adjusted index to avoid overwriting data
     return offset + length;
 }
\ No newline at end of file
