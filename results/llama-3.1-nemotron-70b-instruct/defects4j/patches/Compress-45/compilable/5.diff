diff --git a/tmp/bdf02aa3-b9f0-4013-b9d0-5047ae3dd258_buggy.java b/tmp/19b0ffcf-9411-4b54-b181-349bc7c6d65a_fixed.java
index 1bbc082..4181945 100644
--- a/tmp/bdf02aa3-b9f0-4013-b9d0-5047ae3dd258_buggy.java
+++ b/tmp/19b0ffcf-9411-4b54-b181-349bc7c6d65a_fixed.java
@@ -1,36 +1,46 @@
 /**
  * Write an long integer into a buffer as an octal string if this
  * will fit, or as a binary number otherwise.
  * 
  * Uses {@link #formatUnsignedOctalString} to format
  * the value as an octal string with leading zeros.
  * The converted number is followed by a space.
  * 
  * @param value The value to write into the buffer.
  * @param buf The destination buffer.
  * @param offset The starting offset into the buffer.
  * @param length The length of the buffer.
  * @return The updated offset.
  * @throws IllegalArgumentException if the value (and trailer)
  * will not fit in the buffer.
  * @since 1.4
  */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
+    // Fix: always use formatBigIntegerBinary for negative values or values that don't fit as octal
+    if (negative || value > maxAsOctalChar) {
         if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
         }
         formatBigIntegerBinary(value, buf, offset, length, negative);
-
         buf[offset] = (byte) (negative? 0xff : 0x80);
         return offset + length;
     }
+
+    // Fix: only use formatLongBinary if the value fits
+    if (length >= 9) {
+        formatLongBinary(value, buf, offset, length, negative);
+        return offset + length;
+    } else {
+        throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+    }
+}
\ No newline at end of file
