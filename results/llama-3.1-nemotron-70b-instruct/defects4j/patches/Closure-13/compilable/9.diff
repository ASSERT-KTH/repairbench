diff --git a/tmp/c5c05858-6c0a-48e2-8d26-2485719192ec_buggy.java b/tmp/abf28a40-6456-4406-9d39-a75ec01316b8_fixed.java
index b5d94e0..82f75b0 100644
--- a/tmp/c5c05858-6c0a-48e2-8d26-2485719192ec_buggy.java
+++ b/tmp/abf28a40-6456-4406-9d39-a75ec01316b8_fixed.java
@@ -1,26 +1,35 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
+    Node lastModifiedChild = null;
     do {
       Node c = node.getFirstChild();
+      boolean childRevisited = false;
       while(c!= null) {
-        traverse(c);
         Node next = c.getNext();
+        if (lastModifiedChild == c) {
+          childRevisited = true;
+        } else {
+          traverse(c);
+        }
         c = next;
       }
 
+      if (childRevisited || shouldRetraverse(node)) {
         visit(node);
         visits++;
+        lastModifiedChild = node; // track last modified child to revisit in next iteration
+      }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+      Preconditions.checkState(visits < 10000, "too many iterations");
     } while (shouldRetraverse(node));
 
     exitNode(node);
 }
\ No newline at end of file
