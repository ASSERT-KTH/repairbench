diff --git a/tmp/54e8b03f-77d4-49bc-b636-18aecca96ad2_buggy.java b/tmp/add4c45e-b625-4d2f-b42a-4ac43cd5ef29_fixed.java
index e69de29..387a2e5 100644
--- a/tmp/54e8b03f-77d4-49bc-b636-18aecca96ad2_buggy.java
+++ b/tmp/add4c45e-b625-4d2f-b42a-4ac43cd5ef29_fixed.java
@@ -0,0 +1,37 @@
+/**
+ * Construct a `JavaType` for the specified class.
+ * 
+ * @param cls Class to construct type for
+ * @return Constructed type
+ */
+public JavaType constructType(Class<?> cls) {
+    // Existing logic for resolving type (e.g., from cache, annotations, etc.)
+    JavaType type = _resolveTypeFromCacheOrAnnotations(cls);
+    if (type!= null) {
+        return type;
+    }
+
+    // ** POSSIBLE FIX **: Ensure recursive types and superclasses are properly resolved
+    if (cls.getGenericSuperclass()!= null &&!cls.getGenericSuperclass().equals(Object.class)) {
+        JavaType superClassType = constructType((Class<?>) cls.getGenericSuperclass());
+        // If superclass is a recursive type, ensure it's resolved before constructing subtype
+        if (superClassType.isRecursiveType()) {
+            ((ResolvedRecursiveType) superClassType).resolve(dft);
+        }
+        // Construct type for subclass, considering the resolved superclass
+        type = _constructTypeWithSuperClass(cls, superClassType);
+    } else {
+        type = _constructSimpleType(cls);
+    }
+
+    // Cache and return the constructed type
+    _cacheAndReturn(type);
+    return type;
+}
+
+// Helper method to construct type with superclass considerations
+private JavaType _constructTypeWithSuperClass(Class<?> subclass, JavaType superClassType) {
+    // Implementation details may vary based on your existing type construction logic
+    // The key idea is to ensure the superclass's type is properly resolved and considered
+    // when constructing the subtype's JavaType instance.
+}
\ No newline at end of file
