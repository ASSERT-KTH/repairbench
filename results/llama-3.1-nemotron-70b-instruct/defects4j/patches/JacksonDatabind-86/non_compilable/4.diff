diff --git a/tmp/c510d307-2a35-45f8-97ac-05dd344bfee9_buggy.java b/tmp/c6c6509a-2c03-438e-860b-9c4afd4b6438_fixed.java
index e69de29..edb6254 100644
--- a/tmp/c510d307-2a35-45f8-97ac-05dd344bfee9_buggy.java
+++ b/tmp/c6c6509a-2c03-438e-860b-9c4afd4b6438_fixed.java
@@ -0,0 +1,34 @@
+/**
+ * Construct a type instance for the given Java class.
+ * 
+ * @param cls the Java class to construct a type for
+ * @return Constructed type; may be a recursive type (like `ResolvedRecursiveType`)
+ */
+public JavaType constructType(Class<?> cls) {
+    // Simplified example; actual implementation may vary based on Jackson's TypeFactory internals
+    if (_constructedTypes.containsKey(cls)) { // Cache check (assuming _constructedTypes is a cache map)
+        return _constructedTypes.get(cls);
+    }
+    
+    JavaType type;
+    if (RecursiveType.class.isAssignableFrom(cls)) { // Handling for recursive types
+        type = new ResolvedRecursiveType(cls, this); // Use ResolvedRecursiveType for recursive cases
+    } else {
+        type = _constructSimpleType(cls, null); // Assuming a method for simple type construction
+    }
+    
+    // Crucial fix: Ensure super-class type is properly resolved and cached (if applicable)
+    JavaType superClass = _constructType(cls.getSuperclass(), type);
+    type.setSuperClass(superClass);
+    
+    _constructedTypes.put(cls, type); // Store in cache
+    return type;
+}
+
+// Assuming the following method exists for constructing super-class type
+private JavaType _constructType(Class<?> superClass, JavaType subType) {
+    if (superClass == null || superClass == Object.class) {
+        return __NullType; // or another default type for Object class
+    }
+    return constructType(superClass); // Recursive call to ensure proper caching
+}
\ No newline at end of file
