diff --git a/tmp/ba31fa2f-8633-40dd-a4c3-1d3e296c7fc7_buggy.java b/tmp/159efb6c-bbd7-4402-a8c6-1fd3e5fd8378_fixed.java
index 30d7266..e9e524d 100644
--- a/tmp/ba31fa2f-8633-40dd-a4c3-1d3e296c7fc7_buggy.java
+++ b/tmp/159efb6c-bbd7-4402-a8c6-1fd3e5fd8378_fixed.java
@@ -1,69 +1,98 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc!= null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
 
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
-      // Don't traverse functions that are getting lent to a prototype.
+    // **FIXED**: Don't traverse functions that are getting lent to a prototype.
+    if (isLentToPrototype(parent)) {
+      return false;
+    }
   }
 
   if (parent!= null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
+
+// **NEW METHOD TO CHECK IF FUNCTION IS LENT TO PROTOTYPE**
+private boolean isLentToPrototype(Node parent) {
+  if (parent!= null) {
+    Node grandParent = parent.getParent();
+    if (grandParent!= null && grandParent.getString().equals("dojo.declare")) {
+      Node declaration = grandParent.getFirstChild().getNext();
+      if (declaration.getType() == Token.OBJLIT) {
+        for (Node_child = declaration.getFirstChild(); child!= null; child = child.getNext()) {
+          if (child.getType() == Token.KEYVALUE) {
+            Node key = child.getFirstChild();
+            if (key.getString().equals("@lends")) {
+              Node lendsValue = key.getNext();
+              if (lendsValue.getType() == Token.STRING ||
+                  (lendsValue.getType() == Token.OBJLIT &&
+                   lendsValue.getLastChild().getString().equals("prototype"))) {
+                return true;
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
