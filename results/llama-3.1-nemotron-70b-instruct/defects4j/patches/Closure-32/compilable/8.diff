diff --git a/tmp/a4d66c1f-3dcb-47e8-8a1c-7c42a749e5e5_buggy.java b/tmp/fd5d1433-c043-4f86-8324-c7d3e0044539_fixed.java
index 4be01ab..856145c 100644
--- a/tmp/a4d66c1f-3dcb-47e8-8a1c-7c42a749e5e5_buggy.java
+++ b/tmp/fd5d1433-c043-4f86-8324-c7d3e0044539_fixed.java
@@ -1,115 +1,120 @@
 /**
  * Extracts the text found on the current line and all subsequent
  * until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
         token == JsDocToken.EOF) {
       return new ExtractionInfo("", token);
     }
 
     stream.update();
     int startLineno = stream.getLineno();
     int startCharno = stream.getCharno() + 1;
 
     // Read the content from the first line.
     String line = stream.getRemainingJSDocLine();
     if (option!= WhitespaceOption.PRESERVE) {
       line = line.trim();
     }
 
     StringBuilder builder = new StringBuilder();
     builder.append(line);
 
     state = State.SEARCHING_ANNOTATION;
     token = next();
 
     boolean ignoreStar = false;
-
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
+    int leadingWhitespaceOnNextLine = 0;
 
     do {
       switch (token) {
         case STAR:
           if (ignoreStar) {
             // Mark the position after the star as the new start of the line.
+            int currentCharno = stream.getCharno();
+            leadingWhitespaceOnNextLine = currentCharno - startCharno;
           } else {
             // The star is part of the comment.
             if (builder.length() > 0) {
               builder.append(' ');
             }
 
             builder.append('*');
           }
 
           token = next();
           continue;
 
         case EOL:
           if (option!= WhitespaceOption.SINGLE_LINE) {
+            if (leadingWhitespaceOnNextLine > 0) {
+              for (int i = 0; i < leadingWhitespaceOnNextLine; i++) {
+                builder.append(' ');
+              }
+            }
             builder.append("\n");
           }
 
           ignoreStar = true;
           token = next();
+          leadingWhitespaceOnNextLine = 0; // Reset for next line
           continue;
 
         default:
           ignoreStar = false;
           state = State.SEARCHING_ANNOTATION;
 
           // All tokens must be separated by a space.
 
           if (token == JsDocToken.EOC ||
               token == JsDocToken.EOF ||
               // When we're capturing a license block, annotations
               // in the block are ok.
               (token == JsDocToken.ANNOTATION &&
                option!= WhitespaceOption.PRESERVE)) {
             String multilineText = builder.toString();
 
             if (option!= WhitespaceOption.PRESERVE) {
               multilineText = multilineText.trim();
             }
 
             int endLineno = stream.getLineno();
             int endCharno = stream.getCharno();
 
             if (multilineText.length() > 0) {
               jsdocBuilder.markText(multilineText, startLineno, startCharno,
                   endLineno, endCharno);
             }
 
             return new ExtractionInfo(multilineText, token);
           }
 
           if (builder.length() > 0) {
             builder.append(' ');
           }
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
 
           if (option!= WhitespaceOption.PRESERVE) {
             line = trimEnd(line);
           }
 
           builder.append(line);
           token = next();
       }
     } while (true);
 }
\ No newline at end of file
