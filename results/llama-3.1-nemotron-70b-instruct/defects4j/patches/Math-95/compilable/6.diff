diff --git a/tmp/d0c5d4b3-b211-41e6-9022-4ac871860be1_buggy.java b/tmp/4e7d3e67-0ef3-4ed5-b6a0-b63c649c5689_fixed.java
index 25c13b3..9baa17d 100644
--- a/tmp/d0c5d4b3-b211-41e6-9022-4ac871860be1_buggy.java
+++ b/tmp/4e7d3e67-0ef3-4ed5-b6a0-b63c649c5689_fixed.java
@@ -1,15 +1,23 @@
 /**
  * Access the initial domain value, based on <code>p</code>, used to
  * bracket a CDF root.  This method is used by
  * {@link #inverseCumulativeProbability(double)} to find critical values.
  * 
  * @param p the desired probability for the critical value
  * @return initial domain value
  */
 protected double getInitialDomain(double p) {
     double ret;
     double d = getDenominatorDegreesOfFreedom();
-            // use mean
+    // Fix: handle the case where d is close to 2.0 to avoid division by zero
+    // and use a more suitable initial guess for the root bracketing
+    if (Math.abs(d - 2.0) < 1e-6) { // arbitrary small threshold, adjust if needed
+        ret = 1.0; // or any other reasonable initial guess for d ≈ 2.0
+    } else if (d < 2.0) {
+        throw new IllegalStateException("Denominator degrees of freedom must be ≥ 2.0");
+    } else {
+        // use mean as initial guess for d > 2.0
         ret = d / (d - 2.0);
+    }
     return ret;
 }
\ No newline at end of file
