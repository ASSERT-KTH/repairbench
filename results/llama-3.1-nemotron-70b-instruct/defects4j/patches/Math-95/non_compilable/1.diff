diff --git a/tmp/8938218b-4dc6-45e4-87f7-bb1d94cff2ae_buggy.java b/tmp/968087e0-8fc2-4bf0-b35b-0a64241245bc_fixed.java
index 25c13b3..c19644a 100644
--- a/tmp/8938218b-4dc6-45e4-87f7-bb1d94cff2ae_buggy.java
+++ b/tmp/968087e0-8fc2-4bf0-b35b-0a64241245bc_fixed.java
@@ -1,15 +1,21 @@
 /**
  * Access the initial domain value, based on <code>p</code>, used to
  * bracket a CDF root.  This method is used by
  * {@link #inverseCumulativeProbability(double)} to find critical values.
  * 
  * @param p the desired probability for the critical value
  * @return initial domain value
  */
 protected double getInitialDomain(double p) {
     double ret;
     double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
+    // Fix: Handle case where d is close to 2.0 to avoid division by zero
+    // and ensure a valid initial domain value for the root finder
+    if (FastMath.abs(d - 2.0) < 1e-6) {
+        ret = 1.0; // or any other sensible default value for this edge case
+    } else {
+        // use mean, but avoid negative values which can confuse root finder
+        ret = Math.max(1.0, d / (d - 2.0));
+    }
     return ret;
 }
\ No newline at end of file
