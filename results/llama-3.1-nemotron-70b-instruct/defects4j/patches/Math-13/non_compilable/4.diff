diff --git a/tmp/f5837ee9-7a38-4f9a-9b3a-ee6e656a52e6_buggy.java b/tmp/bd3f6bf5-6215-4bca-a8ae-7d9fa961d45f_fixed.java
index 4e21866..095005c 100644
--- a/tmp/f5837ee9-7a38-4f9a-9b3a-ee6e656a52e6_buggy.java
+++ b/tmp/bd3f6bf5-6215-4bca-a8ae-7d9fa961d45f_fixed.java
@@ -1,10 +1,22 @@
 /**
-     * Computes the square-root of the weight matrix.
+ * Computes the square-root of the weight matrix, handling potential OutOfMemory issues.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    // Avoid loading the entire decomposition into memory
+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-6, 100); // threshold, max iterations
+    final RealMatrix sqrtMatrix = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());
+
+    // Compute square root in-place, without storing all eigenvectors
+    for (int i = 0; i < m.getColumnDimension(); i++) {
+        final double eigenValue = dec.getEigenValue(i).getReal();
+        if (eigenValue > 0) { // ensure positive-definite
+            final double sqrtEigenValue = Math.sqrt(eigenValue);
+            final RealVector eigenvector = dec.getEigenvector(i);
+            sqrtMatrix.operate(eigenvector.mapMultiply(sqrtEigenValue));
+        }
+    }
+    return sqrtMatrix;
 }
\ No newline at end of file
