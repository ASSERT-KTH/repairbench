diff --git a/tmp/92d42e6d-efc4-49b7-976d-8ee5b3c000f9_buggy.java b/tmp/50983a75-cb19-4310-aa42-21c2891a545f_fixed.java
index 4e21866..351fab3 100644
--- a/tmp/92d42e6d-efc4-49b7-976d-8ee5b3c000f9_buggy.java
+++ b/tmp/50983a75-cb19-4310-aa42-21c2891a545f_fixed.java
@@ -1,10 +1,32 @@
 /**
-     * Computes the square-root of the weight matrix.
+ * Computes the square-root of the weight matrix, handling potential OOM issues.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
+    // Check if matrix is identity or very close to it, 
+    // in which case its square-root is itself (optimization)
+    if (isIdentityOrClose(m)) {
+        return m;
+    }
+    
+    // Perform eigen decomposition with a solver that handles large matrices efficiently
+    final EigenDecomposition dec = new EigenDecomposition(m, 
+                                                          new SwingSolver(m.getColumnDimension(), 
+                                                                          SwingSolver defaults to using less memory));
     return dec.getSquareRoot();
 }
+
+// Helper method to check if a matrix is identity or close to it
+private boolean isIdentityOrClose(RealMatrix m, double epsilon = 1e-9) {
+    for (int i = 0; i < m.getRowDimension(); i++) {
+        for (int j = 0; j < m.getColumnDimension(); j++) {
+            double expected = (i == j)? 1.0 : 0.0;
+            if (Math.abs(m.getEntry(i, j) - expected) > epsilon) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
\ No newline at end of file
