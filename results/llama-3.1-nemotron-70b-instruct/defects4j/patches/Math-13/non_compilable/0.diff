diff --git a/tmp/0cb593dd-4894-4547-b70f-0f20fe59e1ed_buggy.java b/tmp/81b4a65e-7b46-4fcd-826c-3b27d33c37f7_fixed.java
index 4e21866..feffdcf 100644
--- a/tmp/0cb593dd-4894-4547-b70f-0f20fe59e1ed_buggy.java
+++ b/tmp/81b4a65e-7b46-4fcd-826c-3b27d33c37f7_fixed.java
@@ -1,10 +1,36 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // Check if matrix is identity to avoid unnecessary computation
+    if (isIdentity(m)) {
+        return m;
+    }
+
     final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    if (dec.hasPositiveEigenvalue()) {
+        // Compute square-root only for positive eigenvalues
+        final RealVector sqrtEigenValues = dec.getEigenvalues().mapToSelf(e -> (e > 0)? Math.sqrt(e) : e);
+        return dec.getSquareRoot(sqrtEigenValues);
+    } else {
+        // Handle non-positive definite matrix (e.g., return a default value or throw an exception)
+        throw new NonPositiveDefiniteMatrixException("Matrix is not positive definite");
+    }
+}
+
+// Helper function to check for identity matrix
+private boolean isIdentity(RealMatrix m) {
+    final int dim = m.getRowDimension();
+    for (int i = 0; i < dim; i++) {
+        for (int j = 0; j < dim; j++) {
+            if ((i == j && Math.abs(m.getEntry(i, j) - 1.0) > 1e-6) ||
+                (i!= j && Math.abs(m.getEntry(i, j)) > 1e-6)) {
+                return false;
+            }
+        }
+    }
+    return true;
 }
\ No newline at end of file
