diff --git a/tmp/28df27ea-147b-4273-b6a2-e3a0cc63aaf8_buggy.java b/tmp/2c48ef23-11d0-4289-83a4-4ced58a1c801_fixed.java
index 4e21866..9692218 100644
--- a/tmp/28df27ea-147b-4273-b6a2-e3a0cc63aaf8_buggy.java
+++ b/tmp/2c48ef23-11d0-4289-83a4-4ced58a1c801_fixed.java
@@ -1,10 +1,40 @@
 /**
  * Computes the square-root of the weight matrix.
  * 
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // Check if matrix is identity to avoid unnecessary decomposition
+    if (isIdentity(m)) {
+        return m;
+    }
+    
     final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+    if (dec.hasPositiveSemidefiniteSymmetricMatrix()) {
+        RealVector sqrtEigenValues = dec.getRealEigenvalues().map(e -> Math.sqrt(e));
+        RealMatrix sqrtEigenVectorMatrix = dec.getV();
+        return sqrtEigenVectorMatrix.multiply(DiagonalMatrix.of(sqrtEigenValues)).multiply(sqrtEigenVectorMatrix.transpose());
+    } else {
+        throw new IllegalStateException("Input matrix is not positive-definite");
+    }
+}
+
+// Helper method to check if a matrix is identity
+private boolean isIdentity(RealMatrix m) {
+    int rows = m.getRowDimension();
+    int cols = m.getColumnDimension();
+    if (rows!= cols) {
+        return false;
+    }
+    for (int i = 0; i < rows; i++) {
+        for (int j = 0; j < cols; j++) {
+            if (i == j && m.getEntry(i, j)!= 1) {
+                return false;
+            } else if (i!= j && m.getEntry(i, j)!= 0) {
+                return false;
+            }
+        }
+    }
+    return true;
 }
\ No newline at end of file
