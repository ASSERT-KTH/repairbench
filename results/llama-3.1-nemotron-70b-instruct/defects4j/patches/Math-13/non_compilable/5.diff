diff --git a/tmp/17263960-612d-418e-b8cc-f13948a07608_buggy.java b/tmp/de531d58-4496-4001-b6be-b3db728c1702_fixed.java
index 4e21866..36814d1 100644
--- a/tmp/17263960-612d-418e-b8cc-f13948a07608_buggy.java
+++ b/tmp/de531d58-4496-4001-b6be-b3db728c1702_fixed.java
@@ -1,10 +1,30 @@
 /**
-     * Computes the square-root of the weight matrix.
+ * Computes the square-root of the weight matrix, handling potential OutOfMemory errors.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // Check if the matrix is too large to avoid OutOfMemoryError
+    if (m.getRowDimension() * m.getColumnDimension() > Integer.MAX_VALUE / 8) {
+        throw new IllegalArgumentException("Matrix too large for eigen decomposition");
+    }
+
+    try {
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
+    } catch (OutOfMemoryError e) {
+        // Fallback to a more memory-efficient approach (e.g., iterative method)
+        // Note: This implementation uses a simple iterative method, which may not be as accurate as eigen decomposition
+        RealMatrix sqrtM = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());
+        for (int i = 0; i < 10; i++) { // number of iterations (trade-off between accuracy and performance)
+            sqrtM = sqrtM.multiply(add(sqrtM, m.multiply(sqrtM.inverse()).scalarMultiply(0.5)).scalarMultiply(0.5));
+        }
+        return sqrtM;
+    }
+}
+
+// Helper method for iterative square root computation
+private RealMatrix add(RealMatrix a, RealMatrix b) {
+    return a.add(b);
 }
\ No newline at end of file
