diff --git a/tmp/e462400b-f962-4b1a-94b8-db4f178f7184_buggy.java b/tmp/c4c2e556-3f26-4e1f-898c-fcf98f2eaef3_fixed.java
index 4e21866..17b846c 100644
--- a/tmp/e462400b-f962-4b1a-94b8-db4f178f7184_buggy.java
+++ b/tmp/c4c2e556-3f26-4e1f-898c-fcf98f2eaef3_fixed.java
@@ -1,10 +1,39 @@
 /**
  * Computes the square-root of the weight matrix.
  *
  * @param m Symmetric, positive-definite (weight) matrix.
  * @return the square-root of the weight matrix.
  */
 private RealMatrix squareRoot(RealMatrix m) {
+    // Fix: Check for singularity and handle large matrices to prevent OOM
+    if (m.getRowDimension() > 1000) { // arbitrary large size threshold
+        // For large matrices, use a more memory-efficient approach (e.g., iterative method)
+        return iterativeSquareRoot(m);
+    } else if (new LUDecomposition(m).getDeterminant() == 0) {
+        // Handle singular matrix (non-invertible)
+        throw new SingularMatrixException();
+    } else {
+        // Original approach for smaller, non-singular matrices
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
+}
+
+// New method for iterative square root computation (memory-efficient)
+private RealMatrix iterativeSquareRoot(RealMatrix m) {
+    int maxIter = 100; // max iterations
+    double tol = 1e-6; // convergence tolerance
+    RealMatrix Y = m.copy();
+    RealMatrix Z = MatrixUtils.createRealIdentityMatrix(m.getColumnDimension());
+    
+    for (int i = 0; i < maxIter; i++) {
+        RealMatrix T = Y.multiply(Y);
+        RealMatrix delta = T.subtract(m).scalarMultiply(0.5);
+        if (delta.getFrobeniusNorm() < tol) {
+            break;
+        }
+        Y = Y.subtract(delta.multiply(Z));
+        Z = Z.add(delta.multiply(Y));
+    }
+    return Y;
+}
\ No newline at end of file
