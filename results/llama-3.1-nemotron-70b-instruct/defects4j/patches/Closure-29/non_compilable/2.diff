diff --git a/tmp/2cbee8e9-2203-4978-9222-c973fdbaae84_buggy.java b/tmp/d7eeb952-d524-41e0-9f05-6c5106cdd007_fixed.java
index be9c8a3..cbe36f6 100644
--- a/tmp/2cbee8e9-2203-4978-9222-c973fdbaae84_buggy.java
+++ b/tmp/d7eeb952-d524-41e0-9f05-6c5106cdd007_fixed.java
@@ -1,94 +1,127 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  boolean hasMultipleAssignments = false;
+  boolean hasNonObjectLiteralAssignment = false;
+  Set<String> propertyNames = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
     // Ignore indirect references, like x.y (except x.y(), since
     // the function referenced by y might reference 'this').
     //
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
       // A call target maybe using the object as a 'this' value.
       if (gramps.isCall()
           && gramps.getFirstChild() == parent) {
         return false;
       }
 
       // NOTE(nicksantos): This pass's object-splitting algorithm has
       // a blind spot. It assumes that if a property isn't defined on an
       // object, then the value is undefined. This is not true, because
       // Object.prototype can have arbitrary properties on it.
       //
       // We short-circuit this problem by bailing out if we see a reference
       // to a property that isn't defined on the object literal. This
       // isn't a perfect algorithm, but it should catch most cases.
       continue;
     }
 
     // Only rewrite VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
        return false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
       // A var with no assignment.
       continue;
     }
 
     // We're looking for object literal assignments only.
     if (!val.isObjectLit()) {
+      hasNonObjectLiteralAssignment = true;
+      break;
+    }
+
+    // Track property names
+    for (Node child = val.getFirstChild(); child!= null;
+         child = child.getNext()) {
+      if (child.isGetterDef() ||
+          child.isSetterDef()) {
+        // ES5 get/set not supported.
         return false;
       }
+      propertyNames.add(child.getKey());
+    }
+
+    // Check for multiple assignments to the same variable
+    if (hasMultipleAssignments) {
+      // If we've already seen an assignment and now we're seeing another,
+      // and the property names don't match, we can't inline.
+      if (!propertyNames.equals(getPropertyNamesFromPreviousAssignment(refs, ref))) {
+        return false;
+      }
+    } else {
+      hasMultipleAssignments = true;
+    }
 
     // Make sure that the value is not self-refential. IOW,
     // disallow things like x = {b: x.a}.
     //
     // TODO: Only exclude unorderable self-referential
     // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
     // but x = {a: 1, b: x.a} is.
     //
-        // Also, ES5 getters/setters aren't handled by this pass.
     for (Node child = val.getFirstChild(); child!= null;
          child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
-            return false;
-          }
-
-
       Node childVal = child.getFirstChild();
       // Check if childVal is the parent of any of the passed in
       // references, as that is how self-referential assignments
       // will happen.
       for (Reference t : refs) {
         Node refNode = t.getParent();
         while (!NodeUtil.isStatementBlock(refNode)) {
           if (refNode == childVal) {
             // There's a self-referential assignment
             return false;
           }
           refNode = refNode.getParent();
         }
       }
     }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
     ret = true;
   }
-      return ret;
+  return ret &&!hasNonObjectLiteralAssignment;
+}
+
+// Helper method to get property names from a previous assignment
+private Set<String> getPropertyNamesFromPreviousAssignment(List<Reference> refs, Reference currentRef) {
+  Set<String> propertyNames = new HashSet<>();
+  for (Reference ref : refs) {
+    if (ref == currentRef) {
+      break;
+    }
+    Node val = ref.getAssignedValue();
+    if (val!= null && val.isObjectLit()) {
+      for (Node child = val.getFirstChild(); child!= null;
+           child = child.getNext()) {
+        propertyNames.add(child.getKey());
+      }
+    }
+  }
+  return propertyNames;
 }
\ No newline at end of file
