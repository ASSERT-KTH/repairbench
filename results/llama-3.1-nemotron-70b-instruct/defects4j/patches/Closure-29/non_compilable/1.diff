diff --git a/tmp/9444392d-501a-4f3f-84f2-d2f55454e2a2_buggy.java b/tmp/46fef3a5-d674-4370-8175-9b4f5b4da3eb_fixed.java
index be9c8a3..1286d00 100644
--- a/tmp/9444392d-501a-4f3f-84f2-d2f55454e2a2_buggy.java
+++ b/tmp/46fef3a5-d674-4370-8175-9b4f5b4da3eb_fixed.java
@@ -1,94 +1,105 @@
 /**
  * Counts the number of direct (full) references to an object.
  * Specifically we check for references of the following type:
  * <pre>
  *   x;
  *   x.fn();
  * </pre>
  */
 private boolean isInlinableObject(List<Reference> refs) {
   boolean ret = false;
+  boolean hasNonObjectLiteralAssignment = false;
+  Set<String> definedProperties = new HashSet<>();
+
   for (Reference ref : refs) {
     Node name = ref.getNode();
     Node parent = ref.getParent();
     Node gramps = ref.getGrandparent();
 
     // Ignore indirect references, like x.y (except x.y(), since
     // the function referenced by y might reference 'this').
     //
     if (parent.isGetProp()) {
       Preconditions.checkState(parent.getFirstChild() == name);
       // A call target maybe using the object as a 'this' value.
       if (gramps.isCall()
           && gramps.getFirstChild() == parent) {
         return false;
       }
 
       // NOTE(nicksantos): This pass's object-splitting algorithm has
       // a blind spot. It assumes that if a property isn't defined on an
       // object, then the value is undefined. This is not true, because
       // Object.prototype can have arbitrary properties on it.
       //
       // We short-circuit this problem by bailing out if we see a reference
       // to a property that isn't defined on the object literal. This
       // isn't a perfect algorithm, but it should catch most cases.
+      String propertyName = parent.getString();
+      if (!definedProperties.contains(propertyName)) {
         continue;
       }
+    }
 
     // Only rewrite VAR declarations or simple assignment statements
     if (!isVarOrAssignExprLhs(name)) {
        return false;
     }
 
     Node val = ref.getAssignedValue();
     if (val == null) {
       // A var with no assignment.
       continue;
     }
 
+    if (val.isObjectLit()) {
       // We're looking for object literal assignments only.
-        if (!val.isObjectLit()) {
-          return false;
+      for (Node child = val.getFirstChild(); child!= null;
+           child = child.getNext()) {
+        definedProperties.add(child.getString());
+      }
+    } else {
+      hasNonObjectLiteralAssignment = true;
     }
 
     // Make sure that the value is not self-refential. IOW,
     // disallow things like x = {b: x.a}.
     //
     // TODO: Only exclude unorderable self-referential
     // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
     // but x = {a: 1, b: x.a} is.
     //
     // Also, ES5 getters/setters aren't handled by this pass.
+    if (val.isObjectLit()) {
       for (Node child = val.getFirstChild(); child!= null;
            child = child.getNext()) {
         if (child.isGetterDef() ||
             child.isSetterDef()) {
           // ES5 get/set not supported.
           return false;
         }
 
-
         Node childVal = child.getFirstChild();
         // Check if childVal is the parent of any of the passed in
         // references, as that is how self-referential assignments
         // will happen.
         for (Reference t : refs) {
           Node refNode = t.getParent();
           while (!NodeUtil.isStatementBlock(refNode)) {
             if (refNode == childVal) {
               // There's a self-referential assignment
               return false;
             }
             refNode = refNode.getParent();
           }
         }
       }
-
+    }
+  }
 
   // We have found an acceptable object literal assignment. As
   // long as there are no other assignments that mess things up,
   // we can inline.
-        ret = true;
-      }
+  ret =!hasNonObjectLiteralAssignment;
   return ret;
 }
\ No newline at end of file
