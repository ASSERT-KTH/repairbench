diff --git a/tmp/9cf591dc-ca44-4e01-83c5-f8a748d0cefc_buggy.java b/tmp/ad5592f5-d536-4b5e-b9ab-ec9841f7499d_fixed.java
index ad4b0d8..d204629 100644
--- a/tmp/9cf591dc-ca44-4e01-83c5-f8a748d0cefc_buggy.java
+++ b/tmp/ad5592f5-d536-4b5e-b9ab-ec9841f7499d_fixed.java
@@ -1,47 +1,62 @@
 /**
  * Use K-means++ to choose the initial centers.
  *
  * @param <T> type of the points to cluster
  * @param points the points to choose the initial centers from
  * @param k the number of centers to choose
  * @param random random generator to use
  * @return the initial centers
  */
 private static <T extends Clusterable<T>> List<Cluster<T>>
     chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
     final List<T> pointSet = new ArrayList<T>(points);
     final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
     // Choose one center uniformly at random from among the data points.
     final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
     resultSet.add(new Cluster<T>(firstPoint));
 
     final double[] dx2 = new double[pointSet.size()];
     while (resultSet.size() < k) {
         // For each data point x, compute D(x), the distance between x and
         // the nearest center that has already been chosen.
-            int sum = 0;
+        double sum = 0; // Changed to double to avoid overflow
         for (int i = 0; i < pointSet.size(); i++) {
             final T p = pointSet.get(i);
             final Cluster<T> nearest = getNearestCluster(resultSet, p);
             final double d = p.distanceFrom(nearest.getCenter());
             sum += d * d;
             dx2[i] = sum;
         }
 
         // Add one new data point as a center. Each point x is chosen with
         // probability proportional to D(x)2
         final double r = random.nextDouble() * sum;
         for (int i = 0 ; i < dx2.length; i++) {
             if (dx2[i] >= r) {
                 final T p = pointSet.remove(i);
                 resultSet.add(new Cluster<T>(p));
                 break;
             }
         }
+        // Fix for MATH-546: Ensure unique points have a higher chance of being selected
+        if (resultSet.size() < k && pointSet.size() > 0) {
+            T mostDistantPoint = pointSet.get(0);
+            double maxDistance = 0;
+            for (T point : pointSet) {
+                double distance = point.distanceFrom(getNearestCluster(resultSet, point).getCenter());
+                if (distance > maxDistance) {
+                    maxDistance = distance;
+                    mostDistantPoint = point;
+                }
+            }
+            if (random.nextDouble() < maxDistance / sum) {
+                pointSet.remove(mostDistantPoint);
+                resultSet.add(new Cluster<T>(mostDistantPoint));
+            }
+        }
     }
 
     return resultSet;
-
 }
\ No newline at end of file
