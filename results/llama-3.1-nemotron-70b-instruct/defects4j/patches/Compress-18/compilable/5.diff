diff --git a/tmp/caca1717-62f6-4368-8717-166019df6b5e_buggy.java b/tmp/77a71163-8e80-4eff-9348-c060a0053da6_fixed.java
index 08093b4..b7b49c5 100644
--- a/tmp/caca1717-62f6-4368-8717-166019df6b5e_buggy.java
+++ b/tmp/77a71163-8e80-4eff-9348-c060a0053da6_fixed.java
@@ -1,42 +1,41 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
     // TarEntry's constructor would think this is a directory
     // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Initialize size to account for the final newline character
+    int dataSize = 1; 
+    for (Map.Entry<String, String> h : headers.entrySet()) {
+        String key = h.getKey();
+        String value = h.getValue();
+        String line = key + "=" + value + "\n";
+        int len = line.getBytes(CharsetNames.UTF_8).length;
+        dataSize += (String.valueOf(len).length() + 1 + len); // +1 for space
+    }
+    pex.setSize(dataSize);
+
+    putArchiveEntry(pex);
+    
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
-            int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
-            String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
-                line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            }
-            w.write(line);
+        String line = key + "=" + value + "\n";
+        int len = line.getBytes(CharsetNames.UTF_8).length;
+        w.write(len + " " + line);
     }
+    w.write("\n"); // Final newline character
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
-        putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
