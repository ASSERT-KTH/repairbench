diff --git a/tmp/b01c9638-910c-4584-bd8d-26fd90a8f39d_buggy.java b/tmp/25ca6acf-0b89-4cb4-bdc8-9866a11dcad7_fixed.java
index 08093b4..7a021c0 100644
--- a/tmp/b01c9638-910c-4584-bd8d-26fd90a8f39d_buggy.java
+++ b/tmp/25ca6acf-0b89-4cb4-bdc8-9866a11dcad7_fixed.java
@@ -1,42 +1,49 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
     // TarEntry's constructor would think this is a directory
     // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
     StringWriter w = new StringWriter();
+    int totalLength = 0; // <--- ADDED VARIABLE TO TRACK TOTAL LENGTH
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
             + 3 /* blank, equals and newline */
             + 2 /* guess 9 < actual length < 100 */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len!= actualLength) {
             // Adjust for cases where length < 10 or > 100
             // or where UTF-8 encoding isn't a single octet
             // per character.
             // Must be in loop as size may go from 99 to 100 in
             // first pass so we'd need a second.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
+        totalLength += actualLength; // <--- UPDATE TOTAL LENGTH
     }
+    // Add the length of the final newline character (required for PAX headers)
+    totalLength += 1; 
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
+    assert data.length == totalLength : "Data length mismatch"; // <--- ASSERTION FOR SAFETY
+    pex.setSize(totalLength); // <--- SET SIZE BASED ON TOTAL LENGTH
     putArchiveEntry(pex);
     write(data);
+    // Write the final newline character (required for PAX headers)
+    write("\n".getBytes(CharsetNames.UTF_8));
     closeArchiveEntry();
 }
\ No newline at end of file
