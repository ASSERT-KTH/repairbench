diff --git a/tmp/55d52c26-21c3-4e5b-87ae-7d3a27628404_buggy.java b/tmp/57076da3-bb9b-4b02-8f85-f770e4828b55_fixed.java
index 08093b4..be00dd1 100644
--- a/tmp/55d52c26-21c3-4e5b-87ae-7d3a27628404_buggy.java
+++ b/tmp/57076da3-bb9b-4b02-8f85-f770e4828b55_fixed.java
@@ -1,42 +1,53 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
         // TarEntry's constructor would think this is a directory
         // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
     StringWriter w = new StringWriter();
+    int totalLength = 0; // Track the total length of the data
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
             + 3 /* blank, equals and newline */
             + 2 /* guess 9 < actual length < 100 */;
         String line = len + " " + key + "=" + value + "\n";
         int actualLength = line.getBytes(CharsetNames.UTF_8).length;
         while (len!= actualLength) {
             // Adjust for cases where length < 10 or > 100
             // or where UTF-8 encoding isn't a single octet
             // per character.
             // Must be in loop as size may go from 99 to 100 in
             // first pass so we'd need a second.
             len = actualLength;
             line = len + " " + key + "=" + value + "\n";
             actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
+        totalLength += actualLength; // Update the total length
     }
-        byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
+    // Add the length of the final newline (if any) and the padding to 0
+    if (w.getBuffer().length() > 0) {
+        totalLength += 1; // For the final newline
+        totalLength = (totalLength + 511) / 512 * 512; // Round up to the nearest 512 byte block
+    }
+    pex.setSize(totalLength); // Set the correct size
     putArchiveEntry(pex);
+    byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
     write(data);
+    if (data.length < totalLength) { // Write padding if necessary
+        byte[] padding = new byte[totalLength - data.length];
+        write(padding);
+    }
     closeArchiveEntry();
 }
\ No newline at end of file
