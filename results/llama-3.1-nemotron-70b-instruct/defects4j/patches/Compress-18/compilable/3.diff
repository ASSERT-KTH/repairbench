diff --git a/tmp/e571f012-3ea8-413f-bcf3-953bbad8b9a2_buggy.java b/tmp/30a53246-1a43-4548-85c8-04807454390d_fixed.java
index 08093b4..d74241e 100644
--- a/tmp/e571f012-3ea8-413f-bcf3-953bbad8b9a2_buggy.java
+++ b/tmp/30a53246-1a43-4548-85c8-04807454390d_fixed.java
@@ -1,42 +1,53 @@
 /**
  * Writes a PAX extended header with the given map as contents.
  * @since 1.4
  */
 void writePaxHeaders(String entryName,
                      Map<String, String> headers) throws IOException {
     String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
     // TarEntry's constructor would think this is a directory
     // and not allow any data to be written
     if (name.length() >= TarConstants.NAMELEN) {
         name = name.substring(0, TarConstants.NAMELEN - 1);
     }
     TarArchiveEntry pex = new TarArchiveEntry(name,
                                               TarConstants.LF_PAX_EXTENDED_HEADER_LC);
 
+    // Calculate the total size of the headers beforehand
+    int totalSize = 0;
+    for (Map.Entry<String, String> h : headers.entrySet()) {
+        String key = h.getKey();
+        String value = h.getValue();
+        int len = key.length() + value.length()
+            + 3 /* blank, equals and newline */;
+        String line = len + " " + key + "=" + value + "\n";
+        totalSize += line.getBytes(CharsetNames.UTF_8).length;
+        // Adjust for cases where UTF-8 encoding isn't a single octet per character
+        while (line.getBytes(CharsetNames.UTF_8).length!= len + 1) {
+            len = line.getBytes(CharsetNames.UTF_8).length - 1; // exclude newline
+            line = len + " " + key + "=" + value + "\n";
+        }
+        totalSize -= line.getBytes(CharsetNames.UTF_8).length; // subtract the previous incorrect addition
+        totalSize += line.getBytes(CharsetNames.UTF_8).length; // add the corrected length
+    }
+
+    pex.setSize(totalSize);
+    putArchiveEntry(pex);
+
     StringWriter w = new StringWriter();
     for (Map.Entry<String, String> h : headers.entrySet()) {
         String key = h.getKey();
         String value = h.getValue();
         int len = key.length() + value.length()
-                + 3 /* blank, equals and newline */
-                + 2 /* guess 9 < actual length < 100 */;
+            + 3 /* blank, equals and newline */;
         String line = len + " " + key + "=" + value + "\n";
-            int actualLength = line.getBytes(CharsetNames.UTF_8).length;
-            while (len != actualLength) {
-                // Adjust for cases where length < 10 or > 100
-                // or where UTF-8 encoding isn't a single octet
-                // per character.
-                // Must be in loop as size may go from 99 to 100 in
-                // first pass so we'd need a second.
-                len = actualLength;
+        while (line.getBytes(CharsetNames.UTF_8).length!= len + 1) {
+            len = line.getBytes(CharsetNames.UTF_8).length - 1; // exclude newline
             line = len + " " + key + "=" + value + "\n";
-                actualLength = line.getBytes(CharsetNames.UTF_8).length;
         }
         w.write(line);
     }
     byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
-        pex.setSize(data.length);
-        putArchiveEntry(pex);
     write(data);
     closeArchiveEntry();
 }
\ No newline at end of file
