diff --git a/tmp/5939e440-2777-4e2d-a625-a339fe85ee37_buggy.java b/tmp/ed85b069-d99d-4e54-9d81-61e688d5e374_fixed.java
index 1650d36..3d72d9d 100644
--- a/tmp/5939e440-2777-4e2d-a625-a339fe85ee37_buggy.java
+++ b/tmp/ed85b069-d99d-4e54-9d81-61e688d5e374_fixed.java
@@ -1,25 +1,26 @@
 /**
  * <p>Checks if two calendar objects represent the same local time.</p>
  *
-     * <p>This method compares the values of the fields of the two objects.
-     * In addition, both calendars must be the same of the same type.</p>
+ * <p>This method compares the values of the fields of the two objects, 
+ * considering their respective time zones.</p>
  * 
  * @param cal1  the first calendar, not altered, not null
  * @param cal2  the second calendar, not altered, not null
-     * @return true if they represent the same millisecond instant
+ * @return true if they represent the same local time
  * @throws IllegalArgumentException if either date is <code>null</code>
  * @since 2.1
  */
 public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
     if (cal1 == null || cal2 == null) {
         throw new IllegalArgumentException("The date must not be null");
     }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+    // Normalize to a common time zone (e.g., UTC) for comparison
+    long utc1 = cal1.getTimeInMillis() - cal1.getTimeZone().getOffset(cal1.getTimeInMillis());
+    long utc2 = cal2.getTimeInMillis() - cal2.getTimeZone().getOffset(cal2.getTimeInMillis());
+    
+    // Compare the local times by comparing the UTC times and the time zones
+    return (utc1 / (1000 * 60 * 60 * 24) == utc2 / (1000 * 60 * 60 * 24)) &&  // same day
+           ((utc1 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60) == (utc2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)) &&  // same hour
+           ((utc1 % (1000 * 60 * 60)) / (1000 * 60) == (utc2 % (1000 * 60 * 60)) / (1000 * 60)) &&  // same minute
+           (utc1 % (1000 * 60) == utc2 % (1000 * 60));  // same second and millisecond
 }
\ No newline at end of file
