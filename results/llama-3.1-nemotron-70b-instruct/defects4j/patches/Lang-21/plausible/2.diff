diff --git a/tmp/93ce0237-d8a0-45a5-bcfe-9369b1bec8ec_buggy.java b/tmp/c302a95f-3c27-4a14-b9ce-e46ac4517dc6_fixed.java
index 1650d36..8f42990 100644
--- a/tmp/93ce0237-d8a0-45a5-bcfe-9369b1bec8ec_buggy.java
+++ b/tmp/c302a95f-3c27-4a14-b9ce-e46ac4517dc6_fixed.java
@@ -1,25 +1,32 @@
 /**
  * <p>Checks if two calendar objects represent the same local time.</p>
  *
-     * <p>This method compares the values of the fields of the two objects.
-     * In addition, both calendars must be the same of the same type.</p>
+ * <p>This method compares the values of the fields of the two objects, considering their time zones.
+ * In addition, both calendars must be the same type.</p>
  * 
  * @param cal1  the first calendar, not altered, not null
  * @param cal2  the second calendar, not altered, not null
-     * @return true if they represent the same millisecond instant
+ * @return true if they represent the same local time
  * @throws IllegalArgumentException if either date is <code>null</code>
  * @since 2.1
  */
 public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {
     if (cal1 == null || cal2 == null) {
         throw new IllegalArgumentException("The date must not be null");
     }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+    if (!cal1.getClass().equals(cal2.getClass())) {
+        return false; // Ensure same calendar type
+    }
+    
+    // Normalize to a common timezone to compare local times
+    Calendar cal1Normalized = (Calendar) cal1.clone();
+    cal1Normalized.setTimeZone(cal2.getTimeZone());
+    
+    return (cal1Normalized.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
+            cal1Normalized.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
+            cal1Normalized.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
+            cal1Normalized.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&
+            cal1Normalized.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
+            cal1Normalized.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
+            cal1Normalized.get(Calendar.ERA) == cal2.get(Calendar.ERA));
 }
\ No newline at end of file
