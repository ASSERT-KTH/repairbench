diff --git a/tmp/20527a87-7aaf-4838-915c-27a7fae7dc26_buggy.java b/tmp/21db6593-f585-4299-b46e-c3f8f8102b81_fixed.java
index 19fe1b4..56d0624 100644
--- a/tmp/20527a87-7aaf-4838-915c-27a7fae7dc26_buggy.java
+++ b/tmp/21db6593-f585-4299-b46e-c3f8f8102b81_fixed.java
@@ -1,17 +1,47 @@
+/**
+ * Checks if a given string is a valid JavaScript identifier.
+ * 
+ * @param s the input string to check
+ * @return true if the string is a valid JavaScript identifier, false otherwise
+ */
 public static boolean isJSIdentifier(String s) {
   int length = s.length();
 
+  // JavaScript identifiers cannot be empty and must start with a valid start character
   if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+     !isValidJSIdentifierStart(s.charAt(0))) {
     return false;
   }
 
+  // Check each subsequent character to ensure it's a valid part of a JavaScript identifier
   for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+    if (!isValidJSIdentifierPart(s.charAt(i))) {
       return false;
     }
   }
 
   return true;
 }
+
+// Helper methods to align with JavaScript identifier rules (ECMAScript 2015, 11.6)
+private static boolean isValidJSIdentifierStart(char c) {
+  // JavaScript allows: 
+  // - Uppercase and lowercase ASCII letters (A-Z, a-z)
+  // - Dollar sign ($) and underscore (_)
+  // - Unicode escape sequences (e.g., \u200D)
+  // - Unicode code points U+0080 to U+FFFF (non-ASCII characters)
+  return 
+    (c >= 'A' && c <= 'Z') || 
+    (c >= 'a' && c <= 'z') || 
+    c == '$' || 
+    c == '_' || 
+    (c >= '\u0080' && c <= '\uFFFF');
+}
+
+private static boolean isValidJSIdentifierPart(char c) {
+  // In addition to the start characters, JavaScript also allows:
+  // - Digits (0-9)
+  return 
+    isValidJSIdentifierStart(c) || 
+    (c >= '0' && c <= '9');
+}
\ No newline at end of file
