diff --git a/tmp/2d286185-9061-47df-9b06-20365511d6ef_buggy.java b/tmp/841a783b-82fa-4a6b-b163-f0cb8f48b1d6_fixed.java
index 511560e..a4322cd 100644
--- a/tmp/2d286185-9061-47df-9b06-20365511d6ef_buggy.java
+++ b/tmp/841a783b-82fa-4a6b-b163-f0cb8f48b1d6_fixed.java
@@ -1,21 +1,24 @@
+/**
+ * Checks if an element is within a specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames Names of elements to match for a positive result
+ * @param baseTypes   Names of elements that, if encountered, immediately end the search with a negative result
+ * @param extraTypes  Additional names of elements that, if encountered, immediately end the search with a negative result
+ * @return True if a matching target element is found before any base or extra types, False otherwise
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
-        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    // Calculate the top and bottom indices for the search, ensuring we don't walk too far up the tree
+    final int bottom = Math.min(stack.size() - 1, MaxScopeSearchDepth); // Fix: Ensure bottom doesn't exceed MaxScopeSearchDepth directly
+    final int top = Math.max(bottom - MaxScopeSearchDepth, 0); // Fix: Simplify calculation and ensure top is not negative
 
+    // Iterate from bottom to top of the specified range in the stack
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames))
-                return true;
-            if (inSorted(elName, baseTypes))
-                return false;
-            if (extraTypes != null && inSorted(elName, extraTypes))
-                return false;
+            return true; // Found a target, return immediately
+        if (inSorted(elName, baseTypes) || (extraTypes!= null && inSorted(elName, extraTypes)))
+            return false; // Found a base or extra type, return immediately with failure
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
+    // If the loop completes without finding a match, the element is not in the specific scope
     return false;
 }
\ No newline at end of file
