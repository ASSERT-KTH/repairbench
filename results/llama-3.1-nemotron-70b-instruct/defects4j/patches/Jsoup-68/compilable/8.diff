diff --git a/tmp/27107817-8ba9-44ef-9687-7a884bc034cd_buggy.java b/tmp/59170ec3-5391-4dfe-8e4d-f601b1b30d02_fixed.java
index 511560e..c41b38c 100644
--- a/tmp/27107817-8ba9-44ef-9687-7a884bc034cd_buggy.java
+++ b/tmp/59170ec3-5391-4dfe-8e4d-f601b1b30d02_fixed.java
@@ -1,21 +1,24 @@
+/**
+ * Checks if an element is within a specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames Names of elements to terminate the search if found.
+ * @param baseTypes   Names of base elements to terminate the search if found.
+ * @param extraTypes  Additional names of elements to terminate the search if found.
+ * @return True if an element in targetNames is found before baseTypes or extraTypes.
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
     // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    int bottom = Math.max(0, stack.size() - 1); // Ensure bottom index is non-negative
+    int top = Math.max(0, bottom - MaxScopeSearchDepth); // Ensure top index is non-negative
 
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames))
             return true;
         if (inSorted(elName, baseTypes))
             return false;
         if (extraTypes!= null && inSorted(elName, extraTypes))
             return false;
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
     return false;
 }
\ No newline at end of file
