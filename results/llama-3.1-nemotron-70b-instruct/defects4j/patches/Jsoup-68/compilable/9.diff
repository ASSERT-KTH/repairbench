diff --git a/tmp/2fe518a2-8253-4313-9d0d-be718dc1377d_buggy.java b/tmp/00fbfbe1-053a-457d-97be-b11be7457e7f_fixed.java
index 511560e..00dd3fc 100644
--- a/tmp/2fe518a2-8253-4313-9d0d-be718dc1377d_buggy.java
+++ b/tmp/00fbfbe1-053a-457d-97be-b11be7457e7f_fixed.java
@@ -1,21 +1,21 @@
+/**
+ * Checks if an element is in the specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames   names of elements to search for
+ * @param baseTypes     names of base elements that, if found, exit the search
+ * @param extraTypes    additional names of elements that, if found, exit the search
+ * @return true if a target element is found before a base or extra element
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
-        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
+    int top = Math.max(0, stack.size() - 1 - MaxScopeSearchDepth); // calculate top based on stack size
     int bottom = stack.size() - 1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
 
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames))
             return true;
-            if (inSorted(elName, baseTypes))
-                return false;
-            if (extraTypes != null && inSorted(elName, extraTypes))
+        if (inSorted(elName, baseTypes) || (extraTypes!= null && inSorted(elName, extraTypes)))
             return false;
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
     return false;
 }
\ No newline at end of file
