diff --git a/tmp/6cd6dd99-8b13-4681-b899-448952c8625b_buggy.java b/tmp/f88677c5-b827-4f6a-b0ce-91a5df17fb89_fixed.java
index 511560e..b1f74da 100644
--- a/tmp/6cd6dd99-8b13-4681-b899-448952c8625b_buggy.java
+++ b/tmp/f88677c5-b827-4f6a-b0ce-91a5df17fb89_fixed.java
@@ -1,21 +1,25 @@
+/**
+ * Checks if an element is in the specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames Names of target elements
+ * @param baseTypes   Names of base elements ( scopes to break out of )
+ * @param extraTypes  Additional types to break out of (optional)
+ * @return True if in scope, false if not
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
     // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    int bottom = Math.max(0, stack.size() - 1); // Ensure bottom is not negative
+    int top = Math.max(0, bottom - MaxScopeSearchDepth); // Calculate top based on bottom, ensure non-negative
 
+    // Limit the search to the top 'MaxScopeSearchDepth' elements from the bottom of the stack
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames)) 
             return true;
         if (inSorted(elName, baseTypes)) 
             return false;
         if (extraTypes!= null && inSorted(elName, extraTypes)) 
             return false;
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
     return false;
 }
\ No newline at end of file
