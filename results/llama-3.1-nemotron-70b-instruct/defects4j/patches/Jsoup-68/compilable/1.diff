diff --git a/tmp/0d39a2e1-aa05-4fee-a7e3-abcdf7f519d7_buggy.java b/tmp/cf7ee3b0-edf1-4de0-a522-b5d304bb151b_fixed.java
index 511560e..c6d2536 100644
--- a/tmp/0d39a2e1-aa05-4fee-a7e3-abcdf7f519d7_buggy.java
+++ b/tmp/cf7ee3b0-edf1-4de0-a522-b5d304bb151b_fixed.java
@@ -1,21 +1,22 @@
+/**
+ * Checks if an element is within a specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames  Names of elements to stop at (inclusive)
+ * @param baseTypes    Names of base elements to stop at (exclusive)
+ * @param extraTypes   Additional names of elements to stop at (exclusive), or null
+ * @return True if within scope, false otherwise
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
     // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    int bottom = Math.max(0, stack.size() - 1); // Ensure non-negative index
+    int top = Math.max(0, bottom - MaxScopeSearchDepth); // Prevent overshooting the stack's bottom
 
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames))
             return true;
-            if (inSorted(elName, baseTypes))
-                return false;
-            if (extraTypes != null && inSorted(elName, extraTypes))
-                return false;
+        if (inSorted(elName, baseTypes) || (extraTypes!= null && inSorted(elName, extraTypes)))
+            break; // Stop searching if hitting a base or extra type, no need to return false immediately
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
     return false;
 }
\ No newline at end of file
