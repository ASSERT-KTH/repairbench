diff --git a/tmp/d071bafd-fe41-4095-ad05-fa14de135fe5_buggy.java b/tmp/3dfc15ee-f2b6-40a3-8bb7-811578d1b8e0_fixed.java
index 511560e..d16e120 100644
--- a/tmp/d071bafd-fe41-4095-ad05-fa14de135fe5_buggy.java
+++ b/tmp/3dfc15ee-f2b6-40a3-8bb7-811578d1b8e0_fixed.java
@@ -1,21 +1,26 @@
+/**
+ * Checks if an element is in the specific scope as defined by the HTML spec.
+ * 
+ * @param targetNames  Names of elements to Match
+ * @param baseTypes    Names of elements that halt the search (typically 'html', 'head', etc.)
+ * @param extraTypes   Additional names of elements that halt the search (optional)
+ * @return              True if element is in scope, false otherwise
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
     // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    
+    // Fix: Prevent excessive stack traversal by limiting the search to the actual stack size
+    int bottom = Math.min(stack.size() - 1, MaxScopeSearchDepth);
+    final int top = Math.max(0, bottom - MaxScopeSearchDepth); // Ensure top doesn't go below 0
 
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
         if (inSorted(elName, targetNames))
             return true;
         if (inSorted(elName, baseTypes))
             return false;
         if (extraTypes!= null && inSorted(elName, extraTypes))
             return false;
     }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
     return false;
 }
\ No newline at end of file
