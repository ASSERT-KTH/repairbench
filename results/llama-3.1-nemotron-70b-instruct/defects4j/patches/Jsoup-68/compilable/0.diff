diff --git a/tmp/a871edfa-e886-4ec6-9194-420c486f01cd_buggy.java b/tmp/2f773d17-70f1-47fc-a713-73f49e761a2c_fixed.java
index 511560e..688a304 100644
--- a/tmp/a871edfa-e886-4ec6-9194-420c486f01cd_buggy.java
+++ b/tmp/2f773d17-70f1-47fc-a713-73f49e761a2c_fixed.java
@@ -1,21 +1,32 @@
+/**
+ * Checks if an element is within a specific scope as defined in the HTML spec.
+ * 
+ * @param targetNames Names of elements to match (inclusive)
+ * @param baseTypes   Names of elements to stop at (exclusive)
+ * @param extraTypes  Additional names of elements to stop at (exclusive), or null
+ * @return True if an element in the target names is found within the specific scope, false otherwise
+ */
 private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {
-        // https://html.spec.whatwg.org/multipage/parsing.html#has-an-element-in-the-specific-scope
-        int bottom = stack.size() -1;
-        if (bottom > MaxScopeSearchDepth) {
-            bottom = MaxScopeSearchDepth;
-        }
-        final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;
-        // don't walk too far up the tree
+    // Calculate the top and bottom bounds for the scope search, capping at MaxScopeSearchDepth
+    int bottom = Math.min(stack.size() - 1, MaxScopeSearchDepth);
+    final int top = Math.max(bottom - MaxScopeSearchDepth, 0);
 
+    // Walk up the stack from bottom to top
     for (int pos = bottom; pos >= top; pos--) {
         final String elName = stack.get(pos).nodeName();
-            if (inSorted(elName, targetNames))
+
+        // Check if the element is in the target names (return true if found)
+        if (inSorted(elName, targetNames)) {
             return true;
-            if (inSorted(elName, baseTypes))
-                return false;
-            if (extraTypes != null && inSorted(elName, extraTypes))
+        }
+
+        // Check if the element is in the base or extra types (return false if found)
+        if (inSorted(elName, baseTypes) || 
+            (extraTypes!= null && inSorted(elName, extraTypes))) {
             return false;
         }
-        //Validate.fail("Should not be reachable"); // would end up false because hitting 'html' at root (basetypes)
+    }
+
+    // If no matching element is found within the scope, return false
     return false;
 }
\ No newline at end of file
