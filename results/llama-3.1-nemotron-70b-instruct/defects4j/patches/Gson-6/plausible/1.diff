diff --git a/tmp/2e395025-388a-4376-a37b-b83c3405ca72_buggy.java b/tmp/3ed20896-e77d-4d24-8f19-43eb7acd100b_fixed.java
index 1c53d31..0fa1110 100644
--- a/tmp/2e395025-388a-4376-a37b-b83c3405ca72_buggy.java
+++ b/tmp/3ed20896-e77d-4d24-8f19-43eb7acd100b_fixed.java
@@ -1,20 +1,29 @@
+/**
+ * Returns a TypeAdapter for the given @JsonAdapter annotation value.
+ * 
+ * @param constructorConstructor for creating TypeAdapter instances
+ * @param gson the Gson instance to which the TypeAdapter will be added
+ * @param fieldType the field type for which the TypeAdapter is created
+ * @param annotation the @JsonAdapter annotation instance
+ * @return a TypeAdapter instance for the specified annotation value
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
          .construct()
          .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+    // FIX: only apply nullSafe() if the original TypeAdapter is not null
+    return (typeAdapter!= null)? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
