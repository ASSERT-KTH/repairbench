diff --git a/tmp/7b8985d2-2898-46f8-9659-1007fbf1f6e3_buggy.java b/tmp/be0b86d7-1f6b-4f9b-af47-be720d526feb_fixed.java
index 1c53d31..8fa31f9 100644
--- a/tmp/7b8985d2-2898-46f8-9659-1007fbf1f6e3_buggy.java
+++ b/tmp/be0b86d7-1f6b-4f9b-af47-be720d526feb_fixed.java
@@ -1,20 +1,30 @@
+/**
+ * Fixed version of the buggy function.
+ * 
+ * The issue was that the nullSafe() call was outside the if-else block, 
+ * causing it to be applied regardless of whether the typeAdapter was successfully created.
+ * If the typeAdapter creation failed (e.g., due to NPE in construct() or create()), 
+ * calling nullSafe() on the null typeAdapter would result in a NullPointerException.
+ * 
+ * Here, we only apply nullSafe() when the typeAdapter is not null.
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
        .construct()
        .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+  // Only apply nullSafe() if typeAdapter is not null
+  return (typeAdapter!= null)? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
