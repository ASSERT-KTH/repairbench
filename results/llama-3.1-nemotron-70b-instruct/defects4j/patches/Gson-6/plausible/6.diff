diff --git a/tmp/72a30336-f849-4451-bd02-0f23d53d2bc1_buggy.java b/tmp/3271fca1-7831-4ea7-a424-a03fccd45e4f_fixed.java
index 1c53d31..c3da052 100644
--- a/tmp/72a30336-f849-4451-bd02-0f23d53d2bc1_buggy.java
+++ b/tmp/3271fca1-7831-4ea7-a424-a03fccd45e4f_fixed.java
@@ -1,20 +1,23 @@
+/**
+ * Fixed function to retrieve a TypeAdapter instance while ensuring null safety.
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
          .construct()
          .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+    // FIX: Ensure null safety only if typeAdapter is not null
+    return (typeAdapter!= null)? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
