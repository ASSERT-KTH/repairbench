diff --git a/tmp/5ada7350-f7a1-4061-aa0b-0b5c9e92b7ff_buggy.java b/tmp/1fbcaa2f-2791-4193-877d-3ba6d19ee356_fixed.java
index 1c53d31..3146d6c 100644
--- a/tmp/5ada7350-f7a1-4061-aa0b-0b5c9e92b7ff_buggy.java
+++ b/tmp/1fbcaa2f-2791-4193-877d-3ba6d19ee356_fixed.java
@@ -1,20 +1,29 @@
+/**
+ * Returns a TypeAdapter for the given @JsonAdapter annotation.
+ * 
+ * @param constructorConstructor constructs adapters and type factories
+ * @param gson used to create TypeAdapters
+ * @param fieldType field being adapted
+ * @param annotation @JsonAdapter annotation
+ * @return TypeAdapter adapted to the field type
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
        .construct()
        .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+  // Fix: Only call nullSafe() if typeAdapter is not null
+  return (typeAdapter!= null)? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
