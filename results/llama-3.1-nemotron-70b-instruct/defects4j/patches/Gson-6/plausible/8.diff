diff --git a/tmp/614736fe-0ce8-49a0-898c-8d4d8b15d076_buggy.java b/tmp/35e9c659-74c9-4b63-8d6f-ee185d426603_fixed.java
index 1c53d31..b1b07ff 100644
--- a/tmp/614736fe-0ce8-49a0-898c-8d4d8b15d076_buggy.java
+++ b/tmp/35e9c659-74c9-4b63-8d6f-ee185d426603_fixed.java
@@ -1,20 +1,29 @@
+/**
+ * Fixes the buggy function by ensuring null safety is only applied when the type adapter is not null.
+ *
+ * @param constructorConstructor used to construct the type adapter
+ * @param gson the Gson instance
+ * @param fieldType the type of the field
+ * @param annotation the JsonAdapter annotation
+ * @return the constructed and potentially null-safe type adapter
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
   TypeAdapter<?> typeAdapter;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
     typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
        .construct()
        .create(gson, fieldType);
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+  // Fix: Only apply null safety if the type adapter is not null
+  return (typeAdapter!= null)? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
