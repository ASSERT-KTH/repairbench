diff --git a/tmp/dc49024e-b8c9-4cfd-a65b-eff1bdf3d2c1_buggy.java b/tmp/578bb06a-1d4c-4989-8c0c-d6248bbd3b82_fixed.java
index 1c53d31..801eb93 100644
--- a/tmp/dc49024e-b8c9-4cfd-a65b-eff1bdf3d2c1_buggy.java
+++ b/tmp/578bb06a-1d4c-4989-8c0c-d6248bbd3b82_fixed.java
@@ -1,20 +1,29 @@
+/**
+ * Fixed function to retrieve a TypeAdapter instance while ensuring null safety.
+ *
+ * @param constructorConstructor ConstructorConstructor instance for object creation
+ * @param gson                  Gson instance for serialization/deserialization
+ * @param fieldType             TypeToken representing the field type
+ * @param annotation            JsonAdapter annotation with the adapter reference
+ * @return A null-safe TypeAdapter instance
+ */
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
     TypeAdapter<?> typeAdapter;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
       typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
          .construct()
          .create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+    // Ensure null safety only if the type adapter is not null
+    return typeAdapter!= null? typeAdapter.nullSafe() : null;
 }
\ No newline at end of file
