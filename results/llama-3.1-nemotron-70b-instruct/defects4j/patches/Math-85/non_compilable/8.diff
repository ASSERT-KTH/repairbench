diff --git a/tmp/59d090b7-73e1-4da9-8d20-69b7ef1d23a6_buggy.java b/tmp/ccb14866-9748-4de9-b7a3-ea52a8f6dd75_fixed.java
index 8e40528..8634e7f 100644
--- a/tmp/59d090b7-73e1-4da9-8d20-69b7ef1d23a6_buggy.java
+++ b/tmp/ccb14866-9748-4de9-b7a3-ea52a8f6dd75_fixed.java
@@ -1,78 +1,85 @@
 /**
  * This method attempts to find two values a and b satisfying <ul>
  * <li> <code> lowerBound <= a < initial < b <= upperBound</code> </li>
  * <li> <code> f(a) * f(b) <= 0 </code> </li>
  * </ul>
  * If f is continuous on <code>[a,b],</code> this means that <code>a</code>
  * and <code>b</code> bracket a root of f.
  * <p>
  * The algorithm starts by setting 
  * <code>a := initial -1; b := initial +1,</code> examines the value of the
  * function at <code>a</code> and <code>b</code> and keeps moving
  * the endpoints out by one unit each time through a loop that terminates 
  * when one of the following happens: <ul>
  * <li> <code> f(a) * f(b) <= 0 </code> --  success!</li>
  * <li> <code> a = lower </code> and <code> b = upper</code> 
  * -- ConvergenceException </li>
  * <li> <code> maximumIterations</code> iterations elapse 
  * -- ConvergenceException </li></ul></p>
  * 
  * @param function the function
  * @param initial initial midpoint of interval being expanded to
  * bracket a root
  * @param lowerBound lower bound (a is never lower than this value)
  * @param upperBound upper bound (b never is greater than this
  * value)
  * @param maximumIterations maximum number of iterations to perform
  * @return a two element array holding {a, b}.
  * @throws ConvergenceException if the algorithm fails to find a and b
  * satisfying the desired conditions
  * @throws FunctionEvaluationException if an error occurs evaluating the 
  * function
  * @throws IllegalArgumentException if function is null, maximumIterations
  * is not positive, or initial is not between lowerBound and upperBound
  */
 public static double[] bracket(UnivariateRealFunction function,
         double initial, double lowerBound, double upperBound, 
         int maximumIterations) throws ConvergenceException, 
         FunctionEvaluationException {
     
     if (function == null) {
         throw MathRuntimeException.createIllegalArgumentException("function is null");
     }
     if (maximumIterations <= 0)  {
         throw MathRuntimeException.createIllegalArgumentException(
               "bad value for maximum iterations number: {0}", maximumIterations);
     }
     if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
         throw MathRuntimeException.createIllegalArgumentException(
               "invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",
               lowerBound, initial, upperBound);
     }
-        double a = initial;
-        double b = initial;
+    double a = initial - 1.0; // Initialize a to initial - 1 instead of initial
+    double b = initial + 1.0; // Initialize b to initial + 1 instead of initial
     double fa;
     double fb;
     int numIterations = 0 ;
     
     do {
         a = Math.max(a - 1.0, lowerBound);
         b = Math.min(b + 1.0, upperBound);
         fa = function.value(a);
-            
+        // Check if fa is NaN before using it to avoid NullPointerException
+        if (Double.isNaN(fa)) {
+            throw new FunctionEvaluationException("Failed to evaluate function at a={0}", a);
+        }
         fb = function.value(b);
+        // Check if fb is NaN before using it to avoid NullPointerException
+        if (Double.isNaN(fb)) {
+            throw new FunctionEvaluationException("Failed to evaluate function at b={0}", b);
+        }
         numIterations++ ;
     } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
             ((a > lowerBound) || (b < upperBound)));
  
-        if (fa * fb >= 0.0 ) {
+    if (fa * fb > 0.0 ) { // Changed from >= to > to match the loop condition
         throw new ConvergenceException(
                   "number of iterations={0}, maximum iterations={1}, " +
                   "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
                   "final b value={6}, f(a)={7}, f(b)={8}",
                   numIterations, maximumIterations, initial,
                   lowerBound, upperBound, a, b, fa, fb);
     }
     
     return new double[]{a, b};
 }
\ No newline at end of file
