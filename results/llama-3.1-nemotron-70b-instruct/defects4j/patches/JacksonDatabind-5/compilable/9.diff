diff --git a/tmp/a7bf2052-f31a-42c9-8056-7556ac832e84_buggy.java b/tmp/69276e6a-30aa-48a2-910f-ecca3b9ac7cc_fixed.java
index b2db1d6..7081531 100644
--- a/tmp/a7bf2052-f31a-42c9-8056-7556ac832e84_buggy.java
+++ b/tmp/69276e6a-30aa-48a2-910f-ecca3b9ac7cc_fixed.java
@@ -1,29 +1,38 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am!= null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Fix: Also add mixin methods if they are not overridden in the target class or its superclasses
+                if (!hasOverridingMethod(targetClass, m)) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
+
+// Helper method to check if a method is overridden in a class or its superclasses
+private boolean hasOverridingMethod(Class<?> clazz, Method method) {
+    try {
+        clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
+        return true;
+    } catch (NoSuchMethodException e) {
+        for (Class<?> parent : ClassUtil.findSuperTypes(clazz, Object.class, null)) {
+            if (hasOverridingMethod(parent, method)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
\ No newline at end of file
