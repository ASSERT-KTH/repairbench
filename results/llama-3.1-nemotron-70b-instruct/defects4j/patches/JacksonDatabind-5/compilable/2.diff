diff --git a/tmp/5561944e-97fa-4485-b80b-bfacce487ae6_buggy.java b/tmp/0f10fc21-79ed-425f-a65e-f8510ee8e994_fixed.java
index b2db1d6..2af3cea 100644
--- a/tmp/5561944e-97fa-4485-b80b-bfacce487ae6_buggy.java
+++ b/tmp/0f10fc21-79ed-425f-a65e-f8510ee8e994_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am!= null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Fix: Add mixin method to target's method map if not already present
+                if (methods.find(m) == null) {
+                    methods.add(_constructMethod(m));
+                }
+                // Still add to mixIns for multi-level merge within mixins (as per [Issue#515])
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
