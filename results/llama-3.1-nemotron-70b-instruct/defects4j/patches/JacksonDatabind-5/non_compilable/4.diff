diff --git a/tmp/83f61cc5-c73e-4f8f-9e5d-1a1a9b79c67c_buggy.java b/tmp/047175c0-c304-423d-a853-1fc4f74fc412_fixed.java
index b2db1d6..6828011 100644
--- a/tmp/83f61cc5-c73e-4f8f-9e5d-1a1a9b79c67c_buggy.java
+++ b/tmp/047175c0-c304-423d-a853-1fc4f74fc412_fixed.java
@@ -1,29 +1,49 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am!= null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
+                // Fix for [Issue#515]: also check in 'methods' for super types of mixin methods
+                boolean foundInSupertype = false;
+                for (Class<?> supertype : parents) {
+                    if (supertype!= mixin && hasMethod(supertype, m.getName(), m.getParameterTypes())) {
+                        am = methods.find(supertype.getDeclaredMethod(m.getName(), m.getParameterTypes()));
+                        if (am!= null) {
+                            _addMixUnders(m, am);
+                            foundInSupertype = true;
+                            break;
+                        }
+                    }
+                }
+                if (!foundInSupertype) {
                     // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+}
+
+// Helper method to check if a class has a method with the given name and parameter types
+private boolean hasMethod(Class<?> clazz, String name, Class<?>[] paramTypes) {
+    try {
+        clazz.getDeclaredMethod(name, paramTypes);
+        return true;
+    } catch (NoSuchMethodException e) {
+        return false;
+    }
+}
\ No newline at end of file
