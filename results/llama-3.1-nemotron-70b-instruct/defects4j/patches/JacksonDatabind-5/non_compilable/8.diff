diff --git a/tmp/dd7edeb8-2510-4322-a6b2-4f04e4b4ebdd_buggy.java b/tmp/4df34e9c-b2cb-4870-9630-bc457f76d246_fixed.java
index b2db1d6..2244d34 100644
--- a/tmp/dd7edeb8-2510-4322-a6b2-4f04e4b4ebdd_buggy.java
+++ b/tmp/4df34e9c-b2cb-4870-9630-bc457f76d246_fixed.java
@@ -1,29 +1,30 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am!= null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Fix for [Issue#515]: also add mixin methods when not masked by a subclass method
+                AnnotatedMethod existingMixIn = mixIns.find(m);
+                if (existingMixIn == null) {
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
+    // Additional fix to ensure mixin methods are not lost: iterate over mixIns again and add any remaining
+    for (AnnotatedMethod mixInMethod : mixIns) {
+        if (!methods.hasAnyMixinAnnotations(mixInMethod.getAnnotated())) {
+            methods.add(mixInMethod);
+        }
+    }
+}
\ No newline at end of file
