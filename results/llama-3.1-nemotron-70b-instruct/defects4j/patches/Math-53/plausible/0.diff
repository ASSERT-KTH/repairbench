diff --git a/tmp/961a9727-cdfd-4a94-bad6-3c3a63acee4e_buggy.java b/tmp/404aff48-ffd9-4c9f-9d08-e3d8d33fe2d3_fixed.java
index 181b1ac..2211a7d 100644
--- a/tmp/961a9727-cdfd-4a94-bad6-3c3a63acee4e_buggy.java
+++ b/tmp/404aff48-ffd9-4c9f-9d08-e3d8d33fe2d3_fixed.java
@@ -1,23 +1,32 @@
 /**
  * Return the sum of this complex number and the given complex number.
  * <p>
  * Uses the definitional formula
  * <pre>
  * (a + bi) + (c + di) = (a+c) + (b+d)i
  * </pre></p>
  * <p>
  * If either this or <code>rhs</code> has a NaN value in either part,
  * {@link #NaN} is returned; otherwise Infinite and NaN values are
  * returned in the parts of the result according to the rules for
  * {@link java.lang.Double} arithmetic.</p>
  *
  * @param rhs the other complex number
  * @return the complex number sum
  * @throws NullArgumentException if <code>rhs</code> is null
  */
 public Complex add(Complex rhs)
     throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+    
+    double newReal = real + rhs.getReal();
+    double newImaginary = imaginary + rhs.getImaginary();
+    
+    if (Double.isNaN(newReal) || Double.isNaN(newImaginary) ||
+        Double.isNaN(real) || Double.isNaN(rhs.getReal()) ||
+        Double.isNaN(imaginary) || Double.isNaN(rhs.getImaginary())) {
+        return Complex.NaN;
+    } else {
+        return createComplex(newReal, newImaginary);
+    }
 }
\ No newline at end of file
