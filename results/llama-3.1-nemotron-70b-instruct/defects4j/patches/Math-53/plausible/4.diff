diff --git a/tmp/f95b6ee0-7d3a-465a-83ff-a293854e5350_buggy.java b/tmp/a0a15ed0-a92d-497b-bf9d-3e05ac52fadb_fixed.java
index 181b1ac..f9a0ef9 100644
--- a/tmp/f95b6ee0-7d3a-465a-83ff-a293854e5350_buggy.java
+++ b/tmp/a0a15ed0-a92d-497b-bf9d-3e05ac52fadb_fixed.java
@@ -1,23 +1,30 @@
 /**
  * Return the sum of this complex number and the given complex number.
  * <p>
  * Uses the definitional formula
  * <pre>
  * (a + bi) + (c + di) = (a+c) + (b+d)i
  * </pre></p>
  * <p>
  * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
+ * {@link #NaN} is returned if either part of the result would be NaN;
+ * otherwise Infinite and NaN values are returned in the parts of the result 
+ * according to the rules for {@link java.lang.Double} arithmetic.</p>
  *
  * @param rhs the other complex number
  * @return the complex number sum
  * @throws NullArgumentException if <code>rhs</code> is null
  */
 public Complex add(Complex rhs)
     throws NullArgumentException {
     MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+    double realSum = real + rhs.getReal();
+    double imaginarySum = imaginary + rhs.getImaginary();
+    
+    // Check if either sum is NaN, and return NaN if so
+    if (Double.isNaN(realSum) || Double.isNaN(imaginarySum)) {
+        return Complex.NaN;
+    } else {
+        return createComplex(realSum, imaginarySum);
+    }
 }
\ No newline at end of file
