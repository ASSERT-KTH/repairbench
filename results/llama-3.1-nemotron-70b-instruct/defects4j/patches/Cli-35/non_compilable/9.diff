diff --git a/tmp/e1dc82eb-421e-49d7-b8ab-9ab9046fef1b_buggy.java b/tmp/e373fbaf-727d-48ca-97a1-6ad596b73f66_fixed.java
index c6b65da..7da765c 100644
--- a/tmp/e1dc82eb-421e-49d7-b8ab-9ab9046fef1b_buggy.java
+++ b/tmp/e373fbaf-727d-48ca-97a1-6ad596b73f66_fixed.java
@@ -1,25 +1,37 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, only that option is returned.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+    } else {
+        // No exact match, find all options starting with the given name
         for (String longOpt : longOpts.keySet())
         {
-            if (longOpt.startsWith(opt))
+            if (longOpt.startsWith(opt) &&!matchingOpts.contains(longOpt)) // added check to avoid duplicates
             {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // If more than one option matches and one of them is a prefix of another, 
+    // consider it an ambiguous match and return only the longest matches
+    if (matchingOpts.size() > 1) {
+        int maxLen = matchingOpts.stream().mapToInt(String::length).max().getAsInt();
+        matchingOpts.removeIf(opt -> opt.length() < maxLen);
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
