diff --git a/tmp/e253dd85-ec8a-484c-bc44-497fc960965f_buggy.java b/tmp/3da65b61-5671-4cbf-8a75-b3ab5aab75b5_fixed.java
index c6b65da..5ab94eb 100644
--- a/tmp/e253dd85-ec8a-484c-bc44-497fc960965f_buggy.java
+++ b/tmp/3da65b61-5671-4cbf-8a75-b3ab5aab75b5_fixed.java
@@ -1,25 +1,42 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, only that option is returned; otherwise, 
+ * all options matching the partial name specified are returned.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+    } else {
+        // if no exact match, find all options starting with the partial name
         for (String longOpt : longOpts.keySet())
         {
-            if (longOpt.startsWith(opt))
+            if (longOpt.startsWith(opt) &&!matchingOpts.contains(longOpt))
             {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // If multiple options match and one is a prefix of another, throw AmbiguousOptionException
+    if (matchingOpts.size() > 1) {
+        for (String match : matchingOpts) {
+            for (String otherMatch : matchingOpts) {
+                if (!match.equals(otherMatch) && otherMatch.startsWith(match)) {
+                    throw new AmbiguousOptionException("Ambiguous option: '" + opt + "'  (could be: " + String.join(", ", matchingOpts) + ")");
+                }
+            }
+        }
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
