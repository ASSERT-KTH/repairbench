diff --git a/tmp/8781321b-acda-4e05-9c99-c5e0c2fa457f_buggy.java b/tmp/f7a791c0-75e7-401e-b4e5-cdce5ac2cae1_fixed.java
index c6b65da..df42b62 100644
--- a/tmp/8781321b-acda-4e05-9c99-c5e0c2fa457f_buggy.java
+++ b/tmp/f7a791c0-75e7-401e-b4e5-cdce5ac2cae1_fixed.java
@@ -1,25 +1,34 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match exists, returns only the exact match; otherwise, returns all matching options.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
-
-        // for a perfect match return the single option only
+    boolean exactMatchFound = false;
 
     for (String longOpt : longOpts.keySet())
     {
-            if (longOpt.startsWith(opt))
-            {
+        if (longOpt.equals(opt)) { // Exact match check
+            exactMatchFound = true;
+            matchingOpts.clear(); // Clear any previous partial matches
             matchingOpts.add(longOpt);
+            break;
+        } else if (longOpt.startsWith(opt) &&!exactMatchFound) {
+            matchingOpts.add(longOpt);
+        }
     }
+    
+    // If no exact match, but multiple partial matches, ensure the original partial match is included
+    if (!exactMatchFound &&!matchingOpts.isEmpty() &&!matchingOpts.contains(opt) && containsKey(opt)) {
+        matchingOpts.add(0, opt); // Add the original opt to the beginning to maintain expected order
     }
     
     return matchingOpts;
 }
\ No newline at end of file
