diff --git a/tmp/47dda106-bf69-46f3-94da-1d32300c8780_buggy.java b/tmp/cd4c98d3-8c1f-4edd-b7e7-a5f5b5d32362_fixed.java
index c6b65da..b286a0a 100644
--- a/tmp/47dda106-bf69-46f3-94da-1d32300c8780_buggy.java
+++ b/tmp/cd4c98d3-8c1f-4edd-b7e7-a5f5b5d32362_fixed.java
@@ -1,25 +1,50 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, returns only that option. Otherwise, returns all matching options.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        // If an exact match is found, return only that option
+        matchingOpts.add(opt);
+    } else {
+        // No exact match, return all options starting with the specified name
         for (String longOpt : longOpts.keySet())
         {
             if (longOpt.startsWith(opt))
             {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // If multiple options match and the input is an exact prefix of more than one option, 
+    // filter out options that have another option as a prefix
+    if (matchingOpts.size() > 1) {
+        List<String> filteredOpts = new ArrayList<>();
+        for (String match : matchingOpts) {
+            boolean isPrefixOfOther = false;
+            for (String otherMatch : matchingOpts) {
+                if (match!= otherMatch && otherMatch.startsWith(match)) {
+                    isPrefixOfOther = true;
+                    break;
+                }
+            }
+            if (!isPrefixOfOther) {
+                filteredOpts.add(match);
+            }
+        }
+        matchingOpts = filteredOpts;
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
