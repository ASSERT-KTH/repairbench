diff --git a/tmp/1d14ec4f-3a29-40e4-9771-192af11a3d16_buggy.java b/tmp/099b21b4-1edb-407d-9b58-a77e596db6d0_fixed.java
index c6b65da..f0a39c4 100644
--- a/tmp/1d14ec4f-3a29-40e4-9771-192af11a3d16_buggy.java
+++ b/tmp/099b21b4-1edb-407d-9b58-a77e596db6d0_fixed.java
@@ -1,25 +1,37 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, returns a list containing only the exact match.
+ * Otherwise, returns a list of options matching the partial name specified.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+    } else {
+        // for partial matches return all matching options
         for (String longOpt : longOpts.keySet())
         {
-            if (longOpt.startsWith(opt))
+            if (longOpt.startsWith(opt) &&!longOpt.equals(opt)) // exclude the exact match already handled
             {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // If multiple matches are found and not all are exact matches, 
+    // the user likely intended an exact match, so filter to exact matches only
+    if (matchingOpts.size() > 1) {
+        matchingOpts.removeIf(match ->!opt.equals(match));
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
