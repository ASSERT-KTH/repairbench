diff --git a/tmp/863c1532-803d-4b82-8288-fb2659fdd366_buggy.java b/tmp/cc7969f7-c672-4b7e-9d27-a9a6e7bc90df_fixed.java
index c6b65da..e50dac4 100644
--- a/tmp/863c1532-803d-4b82-8288-fb2659fdd366_buggy.java
+++ b/tmp/cc7969f7-c672-4b7e-9d27-a9a6e7bc90df_fixed.java
@@ -1,25 +1,38 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, only that option is returned.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for a perfect match first
     for (String longOpt : longOpts.keySet())
     {
-            if (longOpt.startsWith(opt))
+        if (longOpt.equals(opt)) // Exact match
         {
+            matchingOpts.clear(); // Clear any preceding partial matches
             matchingOpts.add(longOpt);
+            break; // Exit loop as exact match found
         }
+        else if (longOpt.startsWith(opt))
+        {
+            matchingOpts.add(longOpt);
+        }
+    }
+    
+    // If multiple matches and one is an exact match, filter to exact match only
+    if (matchingOpts.size() > 1 && longOpts.containsKey(opt)) 
+    {
+        matchingOpts.clear();
+        matchingOpts.add(opt);
     }
     
     return matchingOpts;
 }
\ No newline at end of file
