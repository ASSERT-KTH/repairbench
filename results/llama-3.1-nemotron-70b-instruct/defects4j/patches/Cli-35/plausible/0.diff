diff --git a/tmp/9373f134-efd9-420e-baa9-b606ba00be4c_buggy.java b/tmp/a015e56e-3a2a-4544-b024-858e04a1a007_fixed.java
index c6b65da..8aea6c2 100644
--- a/tmp/9373f134-efd9-420e-baa9-b606ba00be4c_buggy.java
+++ b/tmp/a015e56e-3a2a-4544-b024-858e04a1a007_fixed.java
@@ -1,25 +1,41 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, only that option is returned.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+    } else {
+        // if no exact match, find options starting with the partial name
         for (String longOpt : longOpts.keySet())
         {
-            if (longOpt.startsWith(opt))
+            if (longOpt.startsWith(opt) &&!longOpt.equals(opt))
             {
                 matchingOpts.add(longOpt);
             }
         }
+    }
+    
+    // if more than one option matches, ensure the input opt doesn't exactly match one of them
+    if (matchingOpts.size() > 1) {
+        for (String matchingOpt : matchingOpts) {
+            if (opt.equals(matchingOpt)) {
+                matchingOpts.clear();
+                matchingOpts.add(opt);
+                break;
+            }
+        }
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
