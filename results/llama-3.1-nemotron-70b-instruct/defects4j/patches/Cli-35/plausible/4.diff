diff --git a/tmp/42587645-c261-4131-832d-b478442b128c_buggy.java b/tmp/5388af57-bdfa-4a29-8266-b4ef62b1deb4_fixed.java
index c6b65da..8f37f88 100644
--- a/tmp/42587645-c261-4131-832d-b478442b128c_buggy.java
+++ b/tmp/5388af57-bdfa-4a29-8266-b4ef62b1deb4_fixed.java
@@ -1,25 +1,38 @@
 /**
  * Returns the options with a long name starting with the name specified.
+ * If an exact match is found, only that option is returned.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
 public List<String> getMatchingOptions(String opt)
 {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
-
+    // Check for an exact match first
+    if (longOpts.containsKey(opt)) {
+        matchingOpts.add(opt);
+    } else {
+        // If no exact match, find all options starting with the given name
         for (String longOpt : longOpts.keySet())
         {
-            if (longOpt.startsWith(opt))
+            if (longOpt.startsWith(opt) &&!matchingOpts.contains(longOpt))
             {
                 matchingOpts.add(longOpt);
+                // If more than one match is found, return all matches
+                // (though ideally, we'd want to avoid ambiguous options in the first place)
+                if (matchingOpts.size() > 1) break;
             }
         }
+    }
+    
+    // If more than one option matches and the input exactly matches one of them, return only the exact match
+    if (matchingOpts.size() > 1 && longOpts.containsKey(opt)) {
+        return Collections.singletonList(opt);
+    }
     
     return matchingOpts;
 }
\ No newline at end of file
