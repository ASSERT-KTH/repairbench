diff --git a/tmp/bf1766f6-f525-4562-b44e-97c766029edb_buggy.java b/tmp/08a640f7-8a2e-40c4-b517-7e78ef5ee777_fixed.java
index b05b859..45b9b3d 100644
--- a/tmp/bf1766f6-f525-4562-b44e-97c766029edb_buggy.java
+++ b/tmp/08a640f7-8a2e-40c4-b517-7e78ef5ee777_fixed.java
@@ -1,61 +1,68 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
+    // Fix: Check the warning level before suppressing variable checks
+    if (options.getWarningLevel()!= CheckLevel.QUIET) {
       // All passes must run the variable check. This synthesizes
       // variables later so that the compiler doesn't crash. It also
       // checks the externs file for validity. If you don't want to warn
       // about missing variable declarations, we shut that specific
       // error off.
       if (!options.checkSymbols &&
           (warningsGuard == null ||!warningsGuard.disables(
               DiagnosticGroups.CHECK_VARIABLES))) {
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
       }
+    }
+
+    // Fix: Set checkSymbols to true when warning level is QUIET and undefinedVars is an error
+    if (options.getWarningLevel() == CheckLevel.QUIET && options.isError(DiagnosticGroups.UNDEFINED_VARS)) {
+      options.checkSymbols = true;
+    }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
