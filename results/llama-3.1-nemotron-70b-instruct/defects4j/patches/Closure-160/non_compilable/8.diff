diff --git a/tmp/bff9a7a9-1a0d-401e-ade6-06b9df1ca72a_buggy.java b/tmp/fa036449-389f-4e61-9e0f-e3f787c36118_fixed.java
index b05b859..6346848 100644
--- a/tmp/bff9a7a9-1a0d-401e-ade6-06b9df1ca72a_buggy.java
+++ b/tmp/fa036449-389f-4e61-9e0f-e3f787c36118_fixed.java
@@ -1,61 +1,57 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
   this.options = options;
   if (errorManager == null) {
     if (outStream == null) {
       setErrorManager(
           new LoggerErrorManager(createMessageFormatter(), logger));
     } else {
       PrintStreamErrorManager printer =
           new PrintStreamErrorManager(createMessageFormatter(), outStream);
       printer.setSummaryDetailLevel(options.summaryDetailLevel);
       setErrorManager(printer);
     }
   }
 
   // DiagnosticGroups override the plain checkTypes option.
   if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = true;
   } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
     options.checkTypes = false;
   } else if (!options.checkTypes) {
     // If DiagnosticGroups did not override the plain checkTypes
     // option, and checkTypes is enabled, then turn off the
     // parser type warnings.
     options.setWarningLevel(
         DiagnosticGroup.forType(
             RhinoErrorReporter.TYPE_PARSE_ERROR),
         CheckLevel.OFF);
   }
 
   if (options.checkGlobalThisLevel.isOn()) {
     options.setWarningLevel(
         DiagnosticGroups.GLOBAL_THIS,
         options.checkGlobalThisLevel);
   }
 
   // Initialize the warnings guard.
   List<WarningsGuard> guards = Lists.newArrayList();
   guards.add(
       new SuppressDocWarningsGuard(
           getDiagnosticGroups().getRegisteredGroups()));
   guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
+  // Fix: Do not override warning level for CHECK_VARIABLES when quiet mode is enabled
   if (!options.checkSymbols && 
+      options.getWarningLevel()!= CheckLevel.QUIET && 
       (warningsGuard == null ||!warningsGuard.disables(
           DiagnosticGroups.CHECK_VARIABLES))) {
     guards.add(new DiagnosticGroupWarningsGuard(
         DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
   }
 
   this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
