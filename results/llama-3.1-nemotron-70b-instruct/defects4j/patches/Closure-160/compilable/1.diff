diff --git a/tmp/fd1a60be-328d-4f0f-84e7-3fb1d2d8a002_buggy.java b/tmp/6b64f0e0-3a2a-4525-89b6-14c017184cfc_fixed.java
index b05b859..cd3907b 100644
--- a/tmp/fd1a60be-328d-4f0f-84e7-3fb1d2d8a002_buggy.java
+++ b/tmp/6b64f0e0-3a2a-4525-89b6-14c017184cfc_fixed.java
@@ -1,61 +1,58 @@
 /**
  * Initialize the compiler options. Only necessary if you're not doing
  * a normal compile() job.
  */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
         if (outStream == null) {
             setErrorManager(
                 new LoggerErrorManager(createMessageFormatter(), logger));
         } else {
             PrintStreamErrorManager printer =
                 new PrintStreamErrorManager(createMessageFormatter(), outStream);
             printer.setSummaryDetailLevel(options.summaryDetailLevel);
             setErrorManager(printer);
         }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = false;
     } else if (!options.checkTypes) {
         // If DiagnosticGroups did not override the plain checkTypes
         // option, and checkTypes is enabled, then turn off the
         // parser type warnings.
         options.setWarningLevel(
             DiagnosticGroup.forType(
                 RhinoErrorReporter.TYPE_PARSE_ERROR),
             CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
         options.setWarningLevel(
             DiagnosticGroups.GLOBAL_THIS,
             options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // Fix: Ensure checkSymbols is honored even when warning level is QUIET
+    if (options.checkSymbols) {
+        guards.add(new DiagnosticGroupWarningsGuard(
+            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.WARNING));
+    } else if (warningsGuard == null ||!warningsGuard.disables(
+        DiagnosticGroups.CHECK_VARIABLES)) {
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
 }
\ No newline at end of file
