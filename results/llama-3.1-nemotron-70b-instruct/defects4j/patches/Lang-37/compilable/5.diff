diff --git a/tmp/bdc435d4-d2a5-4587-abdd-3ce57b11a37d_buggy.java b/tmp/9d645cd2-d405-4369-bc4f-268cd9238d9f_fixed.java
index d5b1b52..86ad4b1 100644
--- a/tmp/bdc435d4-d2a5-4587-abdd-3ce57b11a37d_buggy.java
+++ b/tmp/9d645cd2-d405-4369-bc4f-268cd9238d9f_fixed.java
@@ -1,36 +1,65 @@
 /**
  * <p>Adds all the elements of the given arrays into a new array.</p>
  * <p>The new array contains all of the element of <code>array1</code> followed
  * by all of the elements <code>array2</code>. When an array is returned, it is always
  * a new array.</p>
  *
  * <pre>
  * ArrayUtils.addAll(null, null)     = null
  * ArrayUtils.addAll(array1, null)   = cloned copy of array1
  * ArrayUtils.addAll(null, array2)   = cloned copy of array2
  * ArrayUtils.addAll([], [])         = []
  * ArrayUtils.addAll([null], [null]) = [null, null]
  * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
  * </pre>
  *
  * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
  * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
  * @return The new array, <code>null</code> if both arrays are <code>null</code>.
  *      The type of the new array is the type of the first array,
  *      unless the first array is null, in which case the type is the same as the second array.
  * @since 2.1
  */
 @SuppressWarnings("unchecked")
 public static <T> T[] addAll(T[] array1, T... array2) {
     if (array1 == null) {
         return clone(array2);
     } else if (array2 == null) {
         return clone(array1);
     }
+    // Check if component types are compatible to prevent ArrayStoreException
+    if (!array1.getClass().getComponentType().isAssignableFrom(array2.getClass().getComponentType())) {
+        // If not, use the common superclass of both component types
+        final Class<?> commonSuperclass = getCommonSuperclass(array1.getClass().getComponentType(), array2.getClass().getComponentType());
+        T[] joinedArray = (T[]) Array.newInstance(commonSuperclass, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
         final Class<?> type1 = array1.getClass().getComponentType();
         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
         return joinedArray;
     }
+}
+
+// Helper method to find the common superclass of two classes
+private static Class<?> getCommonSuperclass(Class<?> clazz1, Class<?> clazz2) {
+    if (clazz1.isAssignableFrom(clazz2)) {
+        return clazz1;
+    } else if (clazz2.isAssignableFrom(clazz1)) {
+        return clazz2;
+    } else {
+        // Find the common superclass in the inheritance hierarchy
+        Class<?> superclass = clazz1;
+        while (!superclass.isAssignableFrom(clazz2)) {
+            superclass = superclass.getSuperclass();
+            if (superclass == Object.class) {
+                // If no common superclass is found, use Object
+                return Object.class;
+            }
+        }
+        return superclass;
+    }
+}
\ No newline at end of file
