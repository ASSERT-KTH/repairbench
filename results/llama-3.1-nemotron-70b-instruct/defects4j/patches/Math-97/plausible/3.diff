diff --git a/tmp/ddaa86de-f9b6-4e6f-847d-c63c840c9379_buggy.java b/tmp/e595fc05-b5ad-47fb-bc3c-0fba4f724a6a_fixed.java
index 88647d1..11d39b9 100644
--- a/tmp/ddaa86de-f9b6-4e6f-847d-c63c840c9379_buggy.java
+++ b/tmp/e595fc05-b5ad-47fb-bc3c-0fba4f724a6a_fixed.java
@@ -1,44 +1,51 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+ * signs, or that one of the endpoint values is close to zero. An 
+ * <code>IllegalArgumentException</code> is thrown if neither condition is met.
+ * </p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+ * @throws IllegalArgumentException if min is not less than max, or the
+ * signs of the values of the function at the endpoints are not opposites and 
+ * neither value is close to zero
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
-        // Verify bracketing
+    // Verify bracketing or root at endpoint
     double sign = yMin * yMax;
     if (sign >= 0) {
-            // check if either value is close to a zero
+        // check if either value is close to a zero (i.e., a root at an endpoint)
+        if (Math.abs(yMin) < getAbsoluteAccuracy()) {
+            return min;
+        } else if (Math.abs(yMax) < getAbsoluteAccuracy()) {
+            return max;
+        } else {
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
+            ("Function values at endpoints do not have different signs and" +
+                    " neither is close to zero. Endpoints: [" + min + "," + max + "]" + 
                     " Values: [" + yMin + "," + yMax + "]");
+        }
     } else {
-            // solve using only the first endpoint as initial guess
+        // solve using both endpoints as initial guesses
         ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
     return ret;
 }
\ No newline at end of file
