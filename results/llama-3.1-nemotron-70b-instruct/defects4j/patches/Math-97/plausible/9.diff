diff --git a/tmp/103b3a1c-042f-42d3-ad5b-ccbe319dd033_buggy.java b/tmp/f875d36b-2460-4087-bc7d-a6426bd0f79a_fixed.java
index 88647d1..3e823a4 100644
--- a/tmp/103b3a1c-042f-42d3-ad5b-ccbe319dd033_buggy.java
+++ b/tmp/f875d36b-2460-4087-bc7d-a6426bd0f79a_fixed.java
@@ -1,44 +1,54 @@
 /**
  * Find a zero in the given interval.
  * <p>
  * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
+ * signs or are zero (indicating the endpoint is a root). An 
+ * <code>IllegalArgumentException</code> is thrown if neither condition is met.
+ * </p>
  * 
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating the
  * function 
  * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
+ * signs of the values of the function at the endpoints are not opposites and neither is zero
  */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
     
     clearResult();
     verifyInterval(min, max);
     
     double ret = Double.NaN;
     
     double yMin = f.value(min);
     double yMax = f.value(max);
     
-        // Verify bracketing
+    // Verify bracketing or endpoint is root
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+    if (sign > 0) {
+        // neither value is a root and min and max do not bracket root.
+        if (Math.abs(yMin) > getAbsoluteAccuracy() && Math.abs(yMax) > getAbsoluteAccuracy()) {
             throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
+            ("Function values at endpoints do not have different signs and neither is a root." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
-            // solve using only the first endpoint as initial guess
+            // one of the endpoints is a root
+            ret = (Math.abs(yMin) < Math.abs(yMax))? min : max;
+        }
+    } else {
+        // solve using initial guesses
+        if (yMin == 0) {
+            ret = min;
+        } else if (yMax == 0) {
+            ret = max;
+        } else {
             ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+        }
     }
 
     return ret;
 }
\ No newline at end of file
