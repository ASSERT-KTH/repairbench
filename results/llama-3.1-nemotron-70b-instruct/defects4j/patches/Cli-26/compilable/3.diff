diff --git a/tmp/bd8cb0ce-b326-4822-934e-56e7d94b0201_buggy.java b/tmp/f6ba3d53-08c8-4a83-bd01-c9670e6cefea_fixed.java
index cc69d41..4d314fd 100644
--- a/tmp/bd8cb0ce-b326-4822-934e-56e7d94b0201_buggy.java
+++ b/tmp/f6ba3d53-08c8-4a83-bd01-c9670e6cefea_fixed.java
@@ -1,29 +1,40 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
  * @param opt the <code>java.lang.String</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
 public static Option create(String opt) throws IllegalArgumentException
 {
+    // Create a copy of the current settings to avoid inherited state
+    String localDescription = description;
+    String localLongopt = longopt;
+    boolean localRequired = required;
+    boolean localOptionalArg = optionalArg;
+    int localNumberOfArgs = numberOfArgs;
+    Object localType = type;
+    char localValuesep = valuesep;
+    String localArgName = argName;
+
     // create the option
-        Option option = new Option(opt, description);
+    Option option = new Option(opt, localDescription);
 
     // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
+    option.setLongOpt(localLongopt);
+    option.setRequired(localRequired);
+    option.setOptionalArg(localOptionalArg);
+    option.setArgs(localNumberOfArgs);
+    option.setType(localType);
+    option.setValueSeparator(localValuesep);
+    option.setArgName(localArgName);
+
     // reset the OptionBuilder properties
     OptionBuilder.reset();
 
     // return the Option instance
     return option;
 }
\ No newline at end of file
