diff --git a/tmp/f3d3788f-b8b4-4842-871c-8dab7c529d91_buggy.java b/tmp/05d0c6e3-90e2-445c-bf73-7123b24f92d6_fixed.java
index cc69d41..7a7545c 100644
--- a/tmp/f3d3788f-b8b4-4842-871c-8dab7c529d91_buggy.java
+++ b/tmp/05d0c6e3-90e2-445c-bf73-7123b24f92d6_fixed.java
@@ -1,29 +1,40 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
  * @param opt the <code>java.lang.String</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
 public static Option create(String opt) throws IllegalArgumentException
 {
+    // Create a copy of the current settings to avoid inheritance
+    String descriptionCopy = description;
+    String longoptCopy = longopt;
+    boolean requiredCopy = required;
+    boolean optionalArgCopy = optionalArg;
+    int numberOfArgsCopy = numberOfArgs;
+    Object typeCopy = type;
+    char valuesepCopy = valuesep;
+    String argNameCopy = argName;
+
     // create the option
-        Option option = new Option(opt, description);
+    Option option = new Option(opt, descriptionCopy);
 
     // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
+    option.setLongOpt(longoptCopy);
+    option.setRequired(requiredCopy);
+    option.setOptionalArg(optionalArgCopy);
+    option.setArgs(numberOfArgsCopy);
+    option.setType(typeCopy);
+    option.setValueSeparator(valuesepCopy);
+    option.setArgName(argNameCopy);
+
     // reset the OptionBuilder properties
     OptionBuilder.reset();
 
     // return the Option instance
     return option;
 }
\ No newline at end of file
