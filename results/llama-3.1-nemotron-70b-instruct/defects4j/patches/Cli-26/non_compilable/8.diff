diff --git a/tmp/610690a2-49f4-48a9-85cc-c2e2ced2699f_buggy.java b/tmp/187ed05c-98a5-49c9-aebc-c43cc4588bfb_fixed.java
index cc69d41..dbc2dce 100644
--- a/tmp/610690a2-49f4-48a9-85cc-c2e2ced2699f_buggy.java
+++ b/tmp/187ed05c-98a5-49c9-aebc-c43cc4588bfb_fixed.java
@@ -1,29 +1,31 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
  * @param opt the <code>java.lang.String</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
 public static Option create(String opt) throws IllegalArgumentException
 {
-            // create the option
-        Option option = new Option(opt, description);
-
-            // set the option properties
-            option.setLongOpt(longopt);
-            option.setRequired(required);
-            option.setOptionalArg(optionalArg);
-            option.setArgs(numberOfArgs);
-            option.setType(type);
-            option.setValueSeparator(valuesep);
-            option.setArgName(argName);
-            // reset the OptionBuilder properties
+    // reset the OptionBuilder properties to ensure no inheritance
     OptionBuilder.reset();
     
+    // create the option
+    Option option = new Option(opt, ""); // default description to avoid inheritance
+
+    // override with the current settings, if any
+    if (description!= null) option.setDescription(description);
+    if (longopt!= null) option.setLongOpt(longopt);
+    if (required) option.setRequired(required);
+    if (optionalArg) option.setOptionalArg(optionalArg);
+    if (numberOfArgs > 0) option.setArgs(numberOfArgs);
+    if (type!= null) option.setType(type);
+    if (valuesep!= null) option.setValueSeparator(valuesep);
+    if (argName!= null) option.setArgName(argName);
+
     // return the Option instance
     return option;
 }
\ No newline at end of file
