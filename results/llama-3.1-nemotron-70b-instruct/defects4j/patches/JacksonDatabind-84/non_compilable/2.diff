diff --git a/tmp/a1824a54-84f7-4b4d-8745-470b3c4db3b3_buggy.java b/tmp/8afcc1db-93ff-4da9-aeea-ce810930caad_fixed.java
index e69de29..d6902fc 100644
--- a/tmp/a1824a54-84f7-4b4d-8745-470b3c4db3b3_buggy.java
+++ b/tmp/8afcc1db-93ff-4da9-aeea-ce810930caad_fixed.java
@@ -0,0 +1,22 @@
+public JavaType constructType(Class<?> cls) {
+    // Existing code to handle non-inheritance cases or other scenarios...
+    
+    // **Assumed Fix**:
+    if (cls.getSuperclass()!= null &&!cls.getSuperclass().equals(Object.class)) {
+        // Construct type for superclass first to ensure its properties are registered
+        JavaType superType = constructType(cls.getSuperclass());
+        
+        // Merge superclass properties with subclass properties
+        JavaType subtype = _constructType(cls, superType); // Assuming _constructType is the method building the actual type
+        subtype = _refineType(subtype, superType); // Optionally refine with any additional settings from superclass
+        
+        return subtype;
+    }
+    
+    // If no superclass or Object, proceed as before
+    return _constructType(cls, null);
+}
+
+// **Note**: `_constructType` and `_refineType` are placeholder method names, 
+// assuming they exist in your original codebase for constructing and refining types, respectively.
+// You would replace these with the actual method names used in your `TypeFactory` class.
\ No newline at end of file
