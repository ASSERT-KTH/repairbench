diff --git a/tmp/a8c4693d-8fae-464f-867f-d6f4150731db_buggy.java b/tmp/76590809-5a9e-4b1e-b01c-ae43c5e29277_fixed.java
index 544303b..b6badcc 100644
--- a/tmp/a8c4693d-8fae-464f-867f-d6f4150731db_buggy.java
+++ b/tmp/76590809-5a9e-4b1e-b01c-ae43c5e29277_fixed.java
@@ -1,29 +1,26 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());
         if (basicRow!= null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
+                if (tableau.getEntry(basicRow, j) == 1 && j!= (getNumObjectiveFunctions() + i)) {
                      coefficients[i] = 0;
+                     break; // no need to continue checking once we've set to 0
                 }
             }
         }
+        if (restrictToNonNegative) {
+            coefficients[i] = Math.max(0, coefficients[i]);
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
