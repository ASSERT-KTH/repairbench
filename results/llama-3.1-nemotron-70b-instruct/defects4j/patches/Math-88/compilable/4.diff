diff --git a/tmp/2629a748-5df1-4696-9792-d9933131cb4e_buggy.java b/tmp/aff77f7c-3d27-4c3f-9e64-64d34d975b3e_fixed.java
index 544303b..d1f569d 100644
--- a/tmp/2629a748-5df1-4696-9792-d9933131cb4e_buggy.java
+++ b/tmp/aff77f7c-3d27-4c3f-9e64-64d34d975b3e_fixed.java
@@ -1,29 +1,34 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset()));
         if (basicRow!= null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break; // exit the inner loop once coefficient is set to 0
                 }
             }
         }
+        if (restrictToNonNegative) {
+            double mostNegative = Double.POSITIVE_INFINITY;
+            for (int k = 0; k < coefficients.length; k++) {
+                Integer row = getBasicRow(getNumObjectiveFunctions() + k);
+                double value = (row == null? 0 : getEntry(row, getRhsOffset()));
+                if (value < mostNegative) {
+                    mostNegative = value;
+                }
+            }
+            coefficients[i] -= mostNegative;
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
