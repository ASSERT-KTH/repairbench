diff --git a/tmp/fec497a5-e331-4526-aa4c-032df6867181_buggy.java b/tmp/04dcac55-1d44-4944-9ed8-d1dd2baf7e40_fixed.java
index 544303b..e3edbb8 100644
--- a/tmp/fec497a5-e331-4526-aa4c-032df6867181_buggy.java
+++ b/tmp/04dcac55-1d44-4944-9ed8-d1dd2baf7e40_fixed.java
@@ -1,29 +1,37 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset()));
         if (basicRow!= null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                if (tableau.getEntry(basicRow, j) == 1 && j!= (getNumObjectiveFunctions() + i)) {
                     coefficients[i] = 0;
+                    break; // no need to continue checking once set to 0
                 }
             }
         }
+        if (restrictToNonNegative) {
+            coefficients[i] = Math.max(coefficients[i], 0);
+        }
+    }
+    double mostNegative = Double.POSITIVE_INFINITY;
+    for (double coefficient : coefficients) {
+        if (coefficient < mostNegative) {
+            mostNegative = coefficient;
+        }
+    }
+    if (!restrictToNonNegative && mostNegative < 0) {
+        for (int i = 0; i < coefficients.length; i++) {
+            coefficients[i] -= mostNegative;
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
