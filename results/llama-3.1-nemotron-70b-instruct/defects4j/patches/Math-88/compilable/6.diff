diff --git a/tmp/5273fed9-628f-4d02-9289-4140317de752_buggy.java b/tmp/9f7fb558-2097-4612-85fb-fdec2e031622_fixed.java
index 544303b..77fe332 100644
--- a/tmp/5273fed9-628f-4d02-9289-4140317de752_buggy.java
+++ b/tmp/9f7fb558-2097-4612-85fb-fdec2e031622_fixed.java
@@ -1,29 +1,43 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset()));
+        
+        // Check if this variable is a basic variable in any other constraint
         if (basicRow!= null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                if (i!= j && tableau.getEntry(basicRow, j) == 1) {
                      coefficients[i] = 0;
+                     break; // No need to continue checking once we've set it to 0
                 }
             }
         }
+        
+        // Adjust for unrestricted variables (if applicable)
+        if (!restrictToNonNegative) {
+            double mostNegative = getMostNegativeEntryInRHS();
+            coefficients[i] -= mostNegative;
+        }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
+
+// Helper method to find the most negative entry in the RHS (for unrestricted variables adjustment)
+private double getMostNegativeEntryInRHS() {
+    double mostNegative = 0;
+    for (int i = 0; i < tableau.getRowDimension(); i++) {
+        double entry = tableau.getEntry(i, getRhsOffset());
+        if (entry < mostNegative) {
+            mostNegative = entry;
+        }
+    }
+    return mostNegative;
+}
\ No newline at end of file
