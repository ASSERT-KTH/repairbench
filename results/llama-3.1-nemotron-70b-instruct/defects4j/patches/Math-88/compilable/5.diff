diff --git a/tmp/f022a221-28af-43dd-a373-6540dc5e9827_buggy.java b/tmp/62f78dd4-bdc3-4fc0-8ba9-8c472f216cef_fixed.java
index 544303b..942e4b2 100644
--- a/tmp/f022a221-28af-43dd-a373-6540dc5e9827_buggy.java
+++ b/tmp/62f78dd4-bdc3-4fc0-8ba9-8c472f216cef_fixed.java
@@ -1,29 +1,46 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        coefficients[i] = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());
+        
+        // Check if the variable is non-basic (not in the basis)
         if (basicRow!= null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            // Check if the variable's column has a single 1 in the tableau (basic variable)
+            boolean isBasicVariable = true;
+            for (int j = 0; j < tableau.getRowDimension(); j++) {
+                if (j!= basicRow && tableau.getEntry(j, getNumObjectiveFunctions() + i) == 1) {
+                    isBasicVariable = false;
+                    break;
                 }
             }
+            if (!isBasicVariable) {
+                coefficients[i] = 0; // Set non-basic variables to 0
+            }
+        }
+    }
+    // Adjust for unrestricted variables (if any)
+    if (!restrictToNonNegative) {
+        double mostNegative = Double.MAX_VALUE;
+        for (int i = 0; i < coefficients.length; i++) {
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow!= null) {
+                double value = getEntry(basicRow, getRhsOffset());
+                if (value < mostNegative) {
+                    mostNegative = value;
+                }
+            }
+        }
+        for (int i = 0; i < coefficients.length; i++) {
+            coefficients[i] -= mostNegative;
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
