diff --git a/tmp/2ac7b775-a65d-44f0-8b1b-4f2097e61a5b_buggy.java b/tmp/a73b903a-7823-4d71-801a-b632af72e4ea_fixed.java
index 3effef5..966fcc1 100644
--- a/tmp/2ac7b775-a65d-44f0-8b1b-4f2097e61a5b_buggy.java
+++ b/tmp/a73b903a-7823-4d71-801a-b632af72e4ea_fixed.java
@@ -1,73 +1,81 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
         throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    boolean creatorParametersSet = false;
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp!= null) {
+            if (!creatorParametersSet) { // <--- ADDITION: Keep track of creator parameters being set
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                    creatorParametersSet = true; // <--- ADDITION: Mark creator parameters as set
+                    // Continue to the next token to ensure all properties are processed
                     t = p.nextToken();
+                }
+                continue;
+            }
+        }
+        // Continue with existing logic
+        if (creatorParametersSet && buffer.assignParameter(creator.findCreatorProperty(propName), 
+                creator.findCreatorProperty(propName).deserialize(p, ctxt))) {
             Object bean;
             try {
                 bean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                 continue;
             }
             while (t == JsonToken.FIELD_NAME) {
                 p.nextToken();
                 tokens.copyCurrentStructure(p);
                 t = p.nextToken();
             }
             tokens.writeEndObject();
             if (bean.getClass()!= _beanType.getRawClass()) {
                 ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                 return null;
             }
             return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
         }
-                continue;
-            }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop!= null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         if (_ignorableProps!= null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
         if (_anySetter!= null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT, so:
     Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
     try {
         bean = creator.build(ctxt, buffer);
     } catch (Exception e) {
         return wrapInstantiationProblem(e, ctxt);
     }
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
