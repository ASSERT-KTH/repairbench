diff --git a/tmp/15edad92-b169-424f-9bda-d6f603e9b2f4_buggy.java b/tmp/22be70fc-50bc-4acf-bced-1faab770417a_fixed.java
index a3709ee..76d90f7 100644
--- a/tmp/15edad92-b169-424f-9bda-d6f603e9b2f4_buggy.java
+++ b/tmp/22be70fc-50bc-4acf-bced-1faab770417a_fixed.java
@@ -1,71 +1,86 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
           return true;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
         return locals.apply(value);
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // FIX: Return true only if the constructor has no side effects and 
+        // the object is not aliased from inside the constructor.
+        return callHasLocalResult(value) &&!hasAliasFromInsideConstructor(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
       case Token.IN:
         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
       default:
         // Other op force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
 }
+
+// Helper function to check if the constructor has an alias from inside
+private boolean hasAliasFromInsideConstructor(Node node) {
+    // This is a simplified implementation, the actual logic might be more complex
+    // based on the requirements of your compiler.
+    Node constructor = node.getFirstChild();
+    for (Node child = constructor.getFirstChild(); child!= null; child = child.getNext()) {
+        if (child.getType() == Token.NAME && child.getString().equals("this")) {
+            // If the constructor assigns a property to 'this', it might be aliased
+            if (child.getParent().getType() == Token.GETPROP || child.getParent().getType() == Token.SETPROP) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
\ No newline at end of file
