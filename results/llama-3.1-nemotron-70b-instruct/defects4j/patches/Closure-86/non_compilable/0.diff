diff --git a/tmp/cbf2932e-78b3-413a-9ec3-a1046c071bee_buggy.java b/tmp/9bf2900e-7f2b-4c41-8842-773dfebbacb8_fixed.java
index a3709ee..4ded643 100644
--- a/tmp/cbf2932e-78b3-413a-9ec3-a1046c071bee_buggy.java
+++ b/tmp/9bf2900e-7f2b-4c41-8842-773dfebbacb8_fixed.java
@@ -1,71 +1,87 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
             || (locals.apply(value)
                 && evaluatesToLocalValue(value.getLastChild(), locals));
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
            && evaluatesToLocalValue(value.getLastChild(), locals);
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
           return true;
         }
       case Token.THIS:
         return locals.apply(value);
       case Token.NAME:
         return isImmutableValue(value) || locals.apply(value);
       case Token.GETELEM:
       case Token.GETPROP:
         // There is no information about the locality of object properties.
         return locals.apply(value);
       case Token.CALL:
         return callHasLocalResult(value)
             || isToStringMethodCall(value)
             || locals.apply(value);
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // FIX: only return true if the constructor is known to not alias its 'this' 
+        //      to an external scope, otherwise return locals.apply(value)
+        return!mayAliasExternally(value) || locals.apply(value);
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
       case Token.IN:
         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
       default:
         // Other op force a local value:
         //  x = '' + g (x is now an local string)
         //  x -= g (x is now an local number)
         if (isAssignmentOp(value)
             || isSimpleOperator(value)
             || isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
             "Unexpected expression node" + value +
             "\n parent:" + value.getParent());
     }
 }
+
+// Helper function to determine if a NEW expression may alias its 'this' to an external scope
+private boolean mayAliasExternally(Node value) {
+    // This is a simplified version, the actual implementation may need to traverse the AST
+    // to accurately determine if the constructor aliases its 'this'
+    return value.getFirstChild().getString()!= null 
+           &&!isTrustedConstructor(value.getFirstChild().getString());
+}
+
+// Helper function to determine if a constructor is trusted not to alias its 'this'
+private boolean isTrustedConstructor(String constructorName) {
+    // This is a simplified version, the actual implementation may need to check against a 
+    // whitelist of trusted constructors
+    return constructorName.equals("Array") 
+           || constructorName.equals("Object") 
+           || constructorName.equals("RegExp");
+}
\ No newline at end of file
