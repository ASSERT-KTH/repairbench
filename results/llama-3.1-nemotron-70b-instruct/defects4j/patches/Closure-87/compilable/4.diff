diff --git a/tmp/befc6403-6d6e-4304-b8bc-32415127942c_buggy.java b/tmp/2f5dccc1-a764-4959-a27e-8330eb116402_fixed.java
index 19fd63e..19afa9b 100644
--- a/tmp/befc6403-6d6e-4304-b8bc-32415127942c_buggy.java
+++ b/tmp/2f5dccc1-a764-4959-a27e-8330eb116402_fixed.java
@@ -1,24 +1,17 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and not an event handler with an implicit 'this' param.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            // Additional check to avoid folding EXPR_RESULTs in event handlers
+            // with implicit 'this' param (fix for Issue 291)
+            return NodeUtil.isExpressionNode(maybeExpr) 
+                &&!(maybeExpr.getFirstChild() instanceof Node 
+                     && ((Node) maybeExpr.getFirstChild()).getString().equals("onchange"));
         }
     }
-
     return false;
 }
\ No newline at end of file
