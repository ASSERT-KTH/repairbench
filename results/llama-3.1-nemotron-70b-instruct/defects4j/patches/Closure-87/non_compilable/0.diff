diff --git a/tmp/2368e82f-6cfd-4eb1-9d6f-ebcadc308edb_buggy.java b/tmp/52443831-8477-44c6-833e-8c1b8dd63828_fixed.java
index 19fd63e..fe9851c 100644
--- a/tmp/2368e82f-6cfd-4eb1-9d6f-ebcadc308edb_buggy.java
+++ b/tmp/52443831-8477-44c6-833e-8c1b8dd63828_fixed.java
@@ -1,24 +1,28 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, considering the IE event handler bug (issue 291).
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            // Additional check to handle the IE event handler bug (issue 291)
+            // where event handlers behave differently when their return value 
+            // is used vs. when their return value is in an EXPR_RESULT.
+            return NodeUtil.isExpressionNode(maybeExpr) 
+                &&!isEventHandlerReturningExprResult(maybeExpr);
         }
     }
+    return false;
+}
 
+// Helper function to detect potential IE event handler bug pattern
+private boolean isEventHandlerReturningExprResult(Node expr) {
+    // Check if the expression is a method call with 'on' prefix (common in event handlers)
+    if (expr.isCall() && expr.getFirstChild().getString().matches("on\\w+")) {
+        // Check if the method call is within an EXPR_RESULT node (indicating return value usage)
+        Node parent = expr.getParent();
+        return parent!= null && parent.getType() == Token.EXPR_RESULT;
+    }
     return false;
 }
\ No newline at end of file
