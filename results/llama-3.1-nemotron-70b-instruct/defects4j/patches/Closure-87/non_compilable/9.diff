diff --git a/tmp/f523464f-3e1e-4082-9255-641179faf12f_buggy.java b/tmp/c3716941-a1b0-4d8e-925b-9684180454b8_fixed.java
index 19fd63e..3881a9f 100644
--- a/tmp/f523464f-3e1e-4082-9255-641179faf12f_buggy.java
+++ b/tmp/c3716941-a1b0-4d8e-925b-9684180454b8_fixed.java
@@ -1,24 +1,23 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and the expression is not a method call on an 
+ *     identifier that could be an event handler (to avoid IE bug #291).
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                // Check if the expression is a method call on an identifier
+                // that could be an event handler (e.g., 'f.onchange()')
+                if (maybeExpr.getType() == Token.CALL && 
+                    maybeExpr.getFirstChild().getType() == Token.GETPROP && 
+                    maybeExpr.getFirstChild().getSecondChild().isFromString("on")) {
+                    return false; // avoid IE bug #291
+                }
+            }
             return NodeUtil.isExpressionNode(maybeExpr);
         }
     }
-
     return false;
 }
\ No newline at end of file
