diff --git a/tmp/d31a2eb8-234b-4ede-a900-4cf3239e0ec2_buggy.java b/tmp/52585940-107e-49c3-bcb0-a4eb56a91fb5_fixed.java
index 19fd63e..1f9b318 100644
--- a/tmp/d31a2eb8-234b-4ede-a900-4cf3239e0ec2_buggy.java
+++ b/tmp/52585940-107e-49c3-bcb0-a4eb56a91fb5_fixed.java
@@ -1,24 +1,21 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, considering the EXPR_RESULT exception for IE event handlers.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+      // Additional check to exclude EXPR_RESULT nodes (fix for IE event handler issue)
+      if (maybeExpr.getType() == Token.EXPR_RESULT) {
+        Node exprInsideResult = maybeExpr.getFirstChild();
+        // Only allow folding if the inner expression is not a property access with 'on' prefix (e.g., 'onchange')
+        return!NodeUtil.isPropertyAccessNode(exprInsideResult) || 
+              !exprInsideResult.getString().startsWith("on");
+      } else {
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
+  }
   return false;
 }
\ No newline at end of file
