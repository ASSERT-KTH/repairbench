diff --git a/tmp/1a4a9163-f193-4871-96ec-d82bde1d51a3_buggy.java b/tmp/e3addcff-4736-428b-a5dc-32fef943a112_fixed.java
index bb3193c..cf95059 100644
--- a/tmp/1a4a9163-f193-4871-96ec-d82bde1d51a3_buggy.java
+++ b/tmp/e3addcff-4736-428b-a5dc-32fef943a112_fixed.java
@@ -1,52 +1,55 @@
 /**
  * For each qualified name N in the global scope, we check if:
  * (a) No ancestor of N is ever aliased or assigned an unknown value type.
  *     (If N = "a.b.c", "a" and "a.b" are never aliased).
  * (b) N has exactly one write, and it lives in the global scope.
  * (c) N is aliased in a local scope.
  *
  * If (a) is true, then GlobalNamespace must know all the writes to N.
  * If (a) and (b) are true, then N cannot change during the execution of
  *    a local scope.
  * If (a) and (b) and (c) are true, then the alias can be inlined if the
  *    alias obeys the usual rules for how we decide whether a variable is
  *    inlineable.
  * @see InlineVariables
  */
 private void inlineAliases(GlobalNamespace namespace) {
     // Invariant: All the names in the worklist meet condition (a).
     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
     while (!workList.isEmpty()) {
       Name name = workList.pop();
 
       // Don't attempt to inline a getter or setter property as a variable.
       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
         continue;
       }
 
       if (name.globalSets == 1 && name.localSets == 0 &&
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
         List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
+            // Check if the alias is captured by a closure (like in testIssue931)
+            if (!ref.scope.isCapturedByClosure()) {
               // {@code name} meets condition (c). Try to inline it.
               if (inlineAliasIfPossible(ref, namespace)) {
                 name.removeRef(ref);
               }
             }
           }
         }
+      }
 
       // Check if {@code name} has any aliases left after the
       // local-alias-inlining above.
       if ((name.type == Name.Type.OBJECTLIT ||
            name.type == Name.Type.FUNCTION) &&
           name.aliasingGets == 0 && name.props!= null) {
         // All of {@code name}'s children meet condition (a), so they can be
         // added to the worklist.
         workList.addAll(name.props);
       }
     }
 }
\ No newline at end of file
