diff --git a/tmp/978799c7-a8e5-4c7d-91fa-8da66303d946_buggy.java b/tmp/00f09458-8e33-4110-ba04-2eba3e655418_fixed.java
index 730ab7d..3207df6 100644
--- a/tmp/978799c7-a8e5-4c7d-91fa-8da66303d946_buggy.java
+++ b/tmp/00f09458-8e33-4110-ba04-2eba3e655418_fixed.java
@@ -1,48 +1,50 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
         int expectedLength = (hasUncompressedSize? DWORD : 0)
             + (hasCompressedSize? DWORD : 0)
             + (hasRelativeHeaderOffset? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            + (hasDiskStart? DWORD : 0); // Fixed: Changed WORD to DWORD
+        int actualLength = Math.min(expectedLength, rawCentralDirectoryData.length);
+        if (actualLength!= expectedLength && expectedLength!= 0) {
             throw new ZipException("central directory zip64 extended"
                                    + " information extra field's length"
                                    + " doesn't match central directory"
                                    + " data.  Expected length "
                                    + expectedLength + " but is "
                                    + rawCentralDirectoryData.length);
         }
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += DWORD; // Fixed: Changed WORD to DWORD
         }
+        // Ignore excess data
     }
 }
\ No newline at end of file
