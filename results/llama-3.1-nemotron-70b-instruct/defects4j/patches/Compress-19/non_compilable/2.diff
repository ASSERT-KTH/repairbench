diff --git a/tmp/816ef006-9606-46bf-9c9e-21d7fa00c2eb_buggy.java b/tmp/3ec1b8e8-77f0-4383-a90e-3379fb4aa17b_fixed.java
index 730ab7d..6964041 100644
--- a/tmp/816ef006-9606-46bf-9c9e-21d7fa00c2eb_buggy.java
+++ b/tmp/3ec1b8e8-77f0-4383-a90e-3379fb4aa17b_fixed.java
@@ -1,48 +1,57 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
+        int expectedLength = (hasUncompressedSize? QWORD : 0)
+            + (hasCompressedSize? QWORD : 0)
+            + (hasRelativeHeaderOffset? QWORD : 0)
+            + (hasDiskStart? DWORD : 0); // Fix: WORD -> DWORD for consistency with others (QWORD)
+        int actualConsumedLength = 0;
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD;
+            actualConsumedLength += QWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                       offset);
-                offset += DWORD;
+            offset += QWORD;
+            actualConsumedLength += QWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD;
+            actualConsumedLength += QWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += DWORD;
+            actualConsumedLength += DWORD;
+        }
+        if (rawCentralDirectoryData.length!= actualConsumedLength) {
+            // Relax the length check to allow for excess data
+            if (rawCentralDirectoryData.length < actualConsumedLength) {
+                throw new ZipException("central directory zip64 extended"
+                                       + " information extra field's length"
+                                       + " doesn't match central directory"
+                                       + " data.  Expected at least "
+                                       + actualConsumedLength + " but is "
+                                       + rawCentralDirectoryData.length);
+            }
+            // Ignore excess data
         }
     }
 }
\ No newline at end of file
