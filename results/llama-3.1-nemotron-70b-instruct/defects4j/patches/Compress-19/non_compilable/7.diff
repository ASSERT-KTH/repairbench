diff --git a/tmp/066f4053-9a3f-4a62-a3c4-a6377b422edc_buggy.java b/tmp/41481b3b-7081-4c67-ae46-c3d0eb88a5bb_fixed.java
index 730ab7d..5374c73 100644
--- a/tmp/066f4053-9a3f-4a62-a3c4-a6377b422edc_buggy.java
+++ b/tmp/41481b3b-7081-4c67-ae46-c3d0eb88a5bb_fixed.java
@@ -1,48 +1,53 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
  * value.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                         boolean hasCompressedSize,
                                         boolean hasRelativeHeaderOffset,
                                         boolean hasDiskStart)
     throws ZipException {
     if (rawCentralDirectoryData!= null) {
-            int expectedLength = (hasUncompressedSize ? DWORD : 0)
-                + (hasCompressedSize ? DWORD : 0)
-                + (hasRelativeHeaderOffset ? DWORD : 0)
-                + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
-                throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
-                                       + rawCentralDirectoryData.length);
-            }
+        int expectedLength = (hasUncompressedSize? QWORD : 0)
+            + (hasCompressedSize? QWORD : 0)
+            + (hasRelativeHeaderOffset? QWORD : 0)
+            + (hasDiskStart? DWORD : 0); // Changed from WORD to DWORD
+        int actualLength = 0;
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD; // Changed from DWORD to QWORD
+            actualLength += QWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                      offset);
-                offset += DWORD;
+            offset += QWORD; // Changed from DWORD to QWORD
+            actualLength += QWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                 new ZipEightByteInteger(rawCentralDirectoryData, offset);
-                offset += DWORD;
+            offset += QWORD; // Changed from DWORD to QWORD
+            actualLength += QWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
-                offset += WORD;
+            offset += DWORD; 
+            actualLength += DWORD;
+        }
+        if (rawCentralDirectoryData.length!= actualLength) {
+            throw new ZipException("central directory zip64 extended"
+                                   + " information extra field's length"
+                                   + " doesn't match central directory"
+                                   + " data.  Expected length "
+                                   + actualLength + " but is "
+                                   + rawCentralDirectoryData.length);
         }
     }
 }
\ No newline at end of file
