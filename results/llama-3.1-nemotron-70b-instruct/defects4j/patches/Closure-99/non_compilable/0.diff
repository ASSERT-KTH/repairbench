diff --git a/tmp/08b8a505-8e61-4668-b3e5-ac9eee78c8a0_buggy.java b/tmp/fca175e3-4760-44e5-afc9-fd59cef3aa86_fixed.java
index 86553f4..7c776b9 100644
--- a/tmp/08b8a505-8e61-4668-b3e5-ac9eee78c8a0_buggy.java
+++ b/tmp/fca175e3-4760-44e5-afc9-fd59cef3aa86_fixed.java
@@ -1,57 +1,61 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc!= null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent!= null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        // property or subproperty, or if the property name is computed.
+          if (lhs.getType() == Token.GETPROP) {
+            Node propertyName = lhs.getLastChild();
+            if (propertyName.getString().equals("prototype")) {
               return false;
+            } else if (propertyName.isComputedPropertyName()) {
+              return true; // Allow computed property names
+            }
           }
           if (lhs.getQualifiedName()!= null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
     return true;
   }
\ No newline at end of file
