diff --git a/tmp/fdcac01a-b21b-4163-b565-b2fc943081d7_buggy.java b/tmp/b9c720a4-981e-4fee-969a-0bbe477a6cb6_fixed.java
index c9da1b7..8be5df5 100644
--- a/tmp/fdcac01a-b21b-4163-b565-b2fc943081d7_buggy.java
+++ b/tmp/b9c720a4-981e-4fee-969a-0bbe477a6cb6_fixed.java
@@ -1,33 +1,41 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne!= null) {
 
         if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+        if (oldOne.getClass().equals(newOne.getClass())) {
+            // Check if constructors are identical (same parameter types)
+            if (java.util.Arrays.equals(oldOne.getParameterTypes(), newOne.getParameterTypes())) {
+                // If identical, it's likely a re-processing, so just return
+                return;
+            }
             // [databind#667]: avoid one particular class of bogus problems
-
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
+        } else {
             // new type more generic, use old
             // new type more specific, use it
+            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {
+                _creators[typeIndex] = _fixAccess(newOne);
             }
         }
+    } else {
+        _creators[typeIndex] = _fixAccess(newOne);
+    }
     if (explicit) {
         _explicitCreators |= mask;
     }
-        _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
