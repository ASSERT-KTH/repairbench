diff --git a/tmp/3af6957c-ae3e-4c87-9124-f2284e8d9c71_buggy.java b/tmp/bf6dc89c-7355-447d-b1e6-1b8cf9a9f039_fixed.java
index c9da1b7..323470f 100644
--- a/tmp/3af6957c-ae3e-4c87-9124-f2284e8d9c71_buggy.java
+++ b/tmp/bf6dc89c-7355-447d-b1e6-1b8cf9a9f039_fixed.java
@@ -1,33 +1,28 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne!= null) {
 
         if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+        // one more thing: ok to override in sub-class or if same instance (databind#667 fix)
+        if (oldOne!= newOne && oldOne.getClass().equals(newOne.getClass())) {
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
