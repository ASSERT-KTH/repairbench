diff --git a/tmp/a1654f20-6f79-4068-890c-71fceb007bca_buggy.java b/tmp/34332801-840d-4755-9f67-de12250d2b86_fixed.java
index c9da1b7..f6dd5f9 100644
--- a/tmp/a1654f20-6f79-4068-890c-71fceb007bca_buggy.java
+++ b/tmp/34332801-840d-4755-9f67-de12250d2b86_fixed.java
@@ -1,33 +1,46 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne!= null) {
 
         if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
             // both explicit: verify
             // otherwise only verify if neither explicitly annotated.
         }
 
         // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+        if (oldOne.getClass().equals(newOne.getClass())) { // Use equals() for class comparison
+            if (oldOne == newOne) { // Check for identical instances before checking annotations
+                return; // identical instance, no conflict
+            }
+            if (oldOne.annotations() == null && newOne.annotations() == null) {
+                return; // both without annotations, no conflict
+            }
+            if (oldOne.annotations()!= null && oldOne.annotations().equals(newOne.annotations())) {
+                return; // same annotations, no conflict
+            }
 
             throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                     + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
+        } else {
+            // which one to choose?
             // new type more generic, use old
             // new type more specific, use it
+            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {
+                _creators[typeIndex] = _fixAccess(newOne);
             }
         }
+    } else {
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
+}
\ No newline at end of file
