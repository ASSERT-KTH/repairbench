diff --git a/tmp/4c4042a3-9479-48f3-b827-23b4cd8acbfb_buggy.java b/tmp/29618b43-2ebe-4078-8401-b70f722bfc97_fixed.java
index c9da1b7..5e1aa2c 100644
--- a/tmp/4c4042a3-9479-48f3-b827-23b4cd8acbfb_buggy.java
+++ b/tmp/29618b43-2ebe-4078-8401-b70f722bfc97_fixed.java
@@ -1,33 +1,30 @@
+/**
+ * Fixed version of the verifyNonDup function
+ */
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+    
     // already had an explicitly marked one?
     if (oldOne!= null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+        if ((_explicitCreators & mask)!= 0) { // already had explicitly annotated
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+            // both explicit or neither: verify
+            if (oldOne.getClass().equals(newOne.getClass()) && 
+                oldOne.getAnnotated().equals(newOne.getAnnotated())) {
                 // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                        +" creators: already had explicitly marked "+oldOne+", encountered identical "+newOne);
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
