diff --git a/tmp/705eaea4-36d8-4946-b341-8fcfe6fa1421_buggy.java b/tmp/45fcac1b-4d2c-44c0-a2ee-dd952e8976d8_fixed.java
index 42b58d0..cbf782f 100644
--- a/tmp/705eaea4-36d8-4946-b341-8fcfe6fa1421_buggy.java
+++ b/tmp/45fcac1b-4d2c-44c0-a2ee-dd952e8976d8_fixed.java
@@ -1,19 +1,31 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Add a check to avoid self-referential type parameters
+    Set<Type> seenTypes = new HashSet<>();
+    seenTypes.add(classType);
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
         
+        // Check for self-referential type parameters
+        if (seenTypes.contains(actualTypeArgument)) {
+            // Handle self-reference by not registering it to avoid infinite loops
+            continue;
+        }
+        seenTypes.add(actualTypeArgument);
+        
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
