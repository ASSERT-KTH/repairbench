diff --git a/tmp/6f2e4fa7-8c87-4220-aeba-cd36ae3585fd_buggy.java b/tmp/5ed44b30-fd86-4308-bbc9-477ecc925788_fixed.java
index 42b58d0..51ec5d2 100644
--- a/tmp/6f2e4fa7-8c87-4220-aeba-cd36ae3585fd_buggy.java
+++ b/tmp/5ed44b30-fd86-4308-bbc9-477ecc925788_fixed.java
@@ -1,19 +1,33 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    
+    // Wrap in a set to detect circular references (e.g., self-type references)
+    Set<Type> visitedTypes = new HashSet<>();
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
         
+        if (visitedTypes.contains(actualTypeArgument)) {
+            // Circular reference detected, skip to prevent StackOverflowError
+            continue;
+        }
+        visitedTypes.add(actualTypeArgument);
+        
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
+        } else if (actualTypeArgument instanceof ParameterizedType) {
+            // Recursively register type variables for nested parameterized types
+            registerTypeVariablesOn(actualTypeArgument);
+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
