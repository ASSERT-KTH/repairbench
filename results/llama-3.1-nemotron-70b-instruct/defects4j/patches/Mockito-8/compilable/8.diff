diff --git a/tmp/a142c266-a403-49da-9c8f-e2fff3ed8e0b_buggy.java b/tmp/4a660d82-1fb7-492e-87d7-8772140a61c1_fixed.java
index 42b58d0..046af23 100644
--- a/tmp/a142c266-a403-49da-9c8f-e2fff3ed8e0b_buggy.java
+++ b/tmp/4a660d82-1fb7-492e-87d7-8772140a61c1_fixed.java
@@ -1,19 +1,33 @@
+/**
+ * Registers type variables with their actual type arguments for the given class type.
+ * 
+ * @param classType the class type to register type variables for
+ */
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type rawType = parameterizedType.getRawType();
+    
+    // Check if the raw type is the same as the classType to prevent infinite recursion
+    if (rawType.equals(classType)) {
+        return; // or throw an exception, depending on the desired behavior
+    }
+    
+    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
+    // Recursively register type variables for the raw type (if not already the same as classType)
+    registerTypeVariablesOn(rawType);
 }
\ No newline at end of file
