diff --git a/tmp/a0eb0ef8-6e96-41d0-bc58-02862e7b048c_buggy.java b/tmp/d9de686c-bb4f-4676-a397-3e3b623cfc98_fixed.java
index 2ce28b5..502ba01 100644
--- a/tmp/a0eb0ef8-6e96-41d0-bc58-02862e7b048c_buggy.java
+++ b/tmp/d9de686c-bb4f-4676-a397-3e3b623cfc98_fixed.java
@@ -1,72 +1,71 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                // Verify the header checksum before returning the TarArchiveInputStream
+                // to avoid returning a TarArchiveInputStream for non-TAR files (COMPRESS-191)
+                if (tais.getNextEntry()!= null) {
                     return new TarArchiveInputStream(in);
+                }
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well
                 // as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
         }
+        // If none of the above match, do not attempt to read more data to avoid 
+        // incorrectly identifying a non-archive file as a TAR (COMPRESS-191)
+        throw new ArchiveException("No Archiver found for the stream signature");
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
