diff --git a/tmp/6a6a0450-fccc-40e3-87ea-6863517581d3_buggy.java b/tmp/52184df3-5d56-40e8-8e0c-7412d69c8897_fixed.java
index 2ce28b5..aec4779 100644
--- a/tmp/6a6a0450-fccc-40e3-87ea-6863517581d3_buggy.java
+++ b/tmp/52184df3-5d56-40e8-8e0c-7412d69c8897_fixed.java
@@ -1,72 +1,86 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            if (signatureLength >= 512) {
             try {
                 TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                    // COMPRESS-191 - verify the header checksum
-                    tais.getNextEntry();
+                // Verify the header checksum before returning the stream
+                if (tais.getNextEntry()!= null) {
                     return new TarArchiveInputStream(in);
-                } catch (Exception e) { // NOPMD
-                    // can generate IllegalArgumentException as well
-                    // as IOException
-                    // autodetection, simply not a TAR
-                    // ignored
                 }
+            } catch (Exception e) { 
+                // ignored, not a valid TAR
+            }
+        }
+    } catch (IOException e) {
+        throw new ArchiveException("Could not use reset and mark operations.", e);
+    }
+
+    // Perform a more thorough check for non-archive files (e.g., AIFF)
+    in.mark(4); // mark for a short read
+    try {
+        byte[] magic = new byte[4];
+        in.read(magic);
+        in.reset();
+        if (isNonArchiveFile(magic)) {
+            throw new ArchiveException("No Archiver found for the stream signature (identified as non-archive file)");
         }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
+
+// Helper method to identify known non-archive file signatures
+private boolean isNonArchiveFile(byte[] magic) {
+    // Add known non-archive file signatures here, for example:
+    // AIFF file signature: 'FORM'
+    return magic.length == 4 && magic[0] == 'F' && magic[1] == 'O' && magic[2] == 'R' && magic[3] == 'M';
+}
\ No newline at end of file
