diff --git a/tmp/2910c543-fa46-4d69-8420-6b7afe40ed48_buggy.java b/tmp/958f96bf-ff7e-4db1-8e5a-2da67133f021_fixed.java
index e087f95..26d329a 100644
--- a/tmp/2910c543-fa46-4d69-8420-6b7afe40ed48_buggy.java
+++ b/tmp/958f96bf-ff7e-4db1-8e5a-2da67133f021_fixed.java
@@ -1,53 +1,65 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, 
+ *                                  if a invalid byte is detected, or 
+ *                                  if the length is less than 2.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+    }
+    
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean foundNonPadding = false;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
+        
+        // Check for trailing NUL or space
+        if (i == end - 1 && (currentByte!= (byte) ' ' && currentByte!= 0)) {
+            throw new IllegalArgumentException("Missing trailing space or NUL");
+        }
+
         if (currentByte == 0) {
+            if (!foundNonPadding) {
+                return 0; // all NULs, return 0
+            }
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
+            } else {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        foundNonPadding = true;
+
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
