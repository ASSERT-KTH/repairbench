diff --git a/tmp/1cee70f7-106a-4fd0-8d9f-69b409d11eb5_buggy.java b/tmp/2a40f5a3-dd98-4238-9469-8fe824cdc144_fixed.java
index e087f95..5f25bba 100644
--- a/tmp/1cee70f7-106a-4fd0-8d9f-69b409d11eb5_buggy.java
+++ b/tmp/2a40f5a3-dd98-4238-9469-8fe824cdc144_fixed.java
@@ -1,53 +1,71 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, 
+ *                                  if a invalid byte is detected, or 
+ *                                  if the buffer length is less than 2.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+    }
+    
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean seenNonPadding = false;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        
+        // Check for trailing NUL or space
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            if (seenNonPadding) {
                 break;
+            } else {
+                if (i == start) { // only padding, return 0
+                    return 0;
+                } else {
+                    throw new IllegalArgumentException("Missing octal digits");
                 }
+            }
+        }
+        
+        seenNonPadding = true;
         
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (currentByte == (byte) ' ' && stillPadding) {
            continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
         
         stillPadding = false;
+
+        // Check for valid octal digit
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
     
+    // Check for missing trailing NUL or space
+    if (seenNonPadding && buffer[end - 1]!= 0 && buffer[end - 1]!= (byte) ' ') {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+
     return result;
 }
\ No newline at end of file
