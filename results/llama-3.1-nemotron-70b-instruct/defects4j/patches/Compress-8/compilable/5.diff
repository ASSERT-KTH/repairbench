diff --git a/tmp/7fd2129b-8462-4bc0-9b91-a9d0f5ae24d1_buggy.java b/tmp/3861b629-96a7-42de-82b5-8135fd3814da_fixed.java
index e087f95..4cae220 100644
--- a/tmp/7fd2129b-8462-4bc0-9b91-a9d0f5ae24d1_buggy.java
+++ b/tmp/3861b629-96a7-42de-82b5-8135fd3814da_fixed.java
@@ -1,53 +1,74 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, 
+ *                                  if a invalid byte is detected, or 
+ *                                  if the buffer length is less than 2 bytes.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean foundNonNull = false;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
+            foundNonNull = true;
             break;
         }
+        foundNonNull = true;
 
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         // May have additional NUL or space
 
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    if (!foundNonNull && length > 1) { // all NULs except possibly the last byte
+        throw new IllegalArgumentException("Not all NULs but missing trailer");
+    }
+
+    if (end == start + 1 && buffer[start]!= 0 && buffer[start]!= ' ') { // single byte without trailer
+        throw new IllegalArgumentException("Missing trailer");
+    }
+
+    if (end > start + 1 && foundNonNull && buffer[end - 1]!= 0 && buffer[end - 1]!= ' ') { // no trailer
+        throw new IllegalArgumentException("Missing trailer");
+    }
+
     return result;
 }
\ No newline at end of file
