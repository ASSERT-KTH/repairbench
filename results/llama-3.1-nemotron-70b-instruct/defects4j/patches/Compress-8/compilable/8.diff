diff --git a/tmp/bf9f861a-9724-4a89-9ef8-c9645fc9cdd4_buggy.java b/tmp/d2ba8c41-3ad1-4751-979b-41bb6a38b41d_fixed.java
index e087f95..e37c3ec 100644
--- a/tmp/bf9f861a-9724-4a89-9ef8-c9645fc9cdd4_buggy.java
+++ b/tmp/d2ba8c41-3ad1-4751-979b-41bb6a38b41d_fixed.java
@@ -1,53 +1,75 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, 
+ *                                  if a invalid byte is detected, or 
+ *                                  if the buffer is too short.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean foundNonSpace = false;
+    boolean foundTrailer = false;
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        // Check for trailing space or NUL
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            if (foundNonSpace) {
+                foundTrailer = true;
                 break;
+            } else {
+                continue;
             }
+        }
+
+        foundNonSpace = true;
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
         if (currentByte == (byte) ' ') {
-                break;
+            if (stillPadding) {
+               continue;
+            } else {
+                throw new IllegalArgumentException(
+                        "Embedded space in octal string: " + exceptionMessage(buffer, offset, length, start, currentByte));
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+        if (currentByte == '0') {
             stillPadding = false;
+        } else {
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+            stillPadding = false;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
+    }
+
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Missing trailing space or NUL in octal string");
+    }
 
     return result;
 }
\ No newline at end of file
