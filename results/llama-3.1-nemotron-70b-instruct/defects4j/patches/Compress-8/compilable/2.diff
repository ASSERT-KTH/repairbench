diff --git a/tmp/def7b651-ebc0-410f-b942-0f28aac5262f_buggy.java b/tmp/0d265620-9908-4d2c-aded-fc8f1c80c9fa_fixed.java
index e087f95..e0443d4 100644
--- a/tmp/def7b651-ebc0-410f-b942-0f28aac5262f_buggy.java
+++ b/tmp/0d265620-9908-4d2c-aded-fc8f1c80c9fa_fixed.java
@@ -1,53 +1,71 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the trailing space/NUL is missing, 
+ *                                  if a invalid byte is detected, or 
+ *                                  if the buffer length is less than 2.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2 bytes long");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean seenNonPadding = false; // track if we've seen non-padding bytes
 
     for (int i = start; i < end; i++){
         final byte currentByte = buffer[i];
+        
+        // check for trailing space/NUL
+        if (i == end - 1 && currentByte!= (byte) ' ' && currentByte!= 0) {
+            throw new IllegalArgumentException("Missing trailing space/NUL");
+        }
+
         if (currentByte == 0) {
+            if (seenNonPadding) { // if we've seen non-padding, break
                 break;
+            } else if (i == end - 1) { // if all NULs, return 0
+                return 0;
+            }
+            continue;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
         if (currentByte == (byte) ' ') {
-                break;
+            if (stillPadding) {
+                continue;
+            } else { // embedded space, throw exception
+                throw new IllegalArgumentException("Embedded space in octal string");
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        seenNonPadding = true; // mark that we've seen non-padding
 
-            stillPadding = false;
+        // Check for valid octal digits
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
+
+        stillPadding = false;
+        result = (result << 3) + (currentByte - '0'); // convert from ASCII
     }
 
     return result;
 }
\ No newline at end of file
