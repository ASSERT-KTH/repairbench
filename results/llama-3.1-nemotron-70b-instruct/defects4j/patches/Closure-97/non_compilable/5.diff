diff --git a/tmp/e7258f4f-b705-4f41-b6f5-1c7cb150f4bd_buggy.java b/tmp/276e137f-d6ff-4514-b386-f5f232930fa0_fixed.java
index 1126687..1ce99cb 100644
--- a/tmp/e7258f4f-b705-4f41-b6f5-1c7cb150f4bd_buggy.java
+++ b/tmp/276e137f-d6ff-4514-b386-f5f232930fa0_fixed.java
@@ -1,65 +1,71 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
+    long result; // Changed from double to long for accurate bitwise operations
     double lval = left.getDouble();
     double rval = right.getDouble();
 
     // check ranges.  We do not do anything that would clip the double to
     // a 32-bit range, since the user likely does not intend that.
     if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
       error(BITWISE_OPERAND_OUT_OF_RANGE, left);
       return n;
     }
 
     // only the lower 5 bits are used when shifting, so don't do anything
     // if the shift amount is outside [0,32)
     if (!(rval >= 0 && rval < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
     // Convert the numbers to ints
     int lvalInt = (int) lval;
     if (lvalInt!= lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
     int rvalInt = (int) rval;
     if (rvalInt!= rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
     switch (n.getType()) {
       case Token.LSH:
-          result = lvalInt << rvalInt;
+        result = (long) lvalInt << rvalInt; // Cast to long before shift
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
         // JavaScript handles zero shifts on signed numbers differently than
         // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
+        // where JavaScript can so use an unsigned right shift here.
         result = lvalInt >>> rvalInt;
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
-      Node newNumber = Node.newNumber(result);
+    // Check for overflow before creating a new Number node
+    if (result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE) {
+      Node newNumber = Node.newNumber((double) result); // Cast to double for Node.newNumber
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
-
       return newNumber;
+    } else {
+      // Handle overflow case, e.g., return the original node or throw an error
+      error(OVERFLOW_ERROR, n); // Define OVERFLOW_ERROR as needed
+      return n;
+    }
   }
 
   return n;
 }
\ No newline at end of file
