diff --git a/tmp/07ab8a7d-d036-449e-b2d3-368f2617c4a9_buggy.java b/tmp/13fe09a2-a77d-43cc-910d-11581d03718a_fixed.java
index 1126687..689a304 100644
--- a/tmp/07ab8a7d-d036-449e-b2d3-368f2617c4a9_buggy.java
+++ b/tmp/13fe09a2-a77d-43cc-910d-11581d03718a_fixed.java
@@ -1,65 +1,71 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
-      double result;
+      long result; // Changed from double to long to handle larger shift results
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt!= lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt!= rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = (long) lvalInt << rvalInt; // Cast to long to prevent overflow
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = lvalInt & 0xFFFFFFFFL; // Mask to ensure unsigned 32-bit
+          result >>>= rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
-      Node newNumber = Node.newNumber(result);
+      // Check if result is within integer range before creating a new Number node
+      if (result >= Integer.MIN_VALUE && result <= Integer.MAX_VALUE) {
+        Node newNumber = Node.newNumber((int) result);
         n.getParent().replaceChild(n, newNumber);
         reportCodeChange();
-
         return newNumber;
+      } else {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, n); // Report error if result is out of range
+        return n;
+      }
     }
 
     return n;
 }
\ No newline at end of file
