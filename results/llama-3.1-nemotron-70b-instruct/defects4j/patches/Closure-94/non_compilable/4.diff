diff --git a/tmp/6fc2f4c5-d608-420b-8186-a991f7bc5d8e_buggy.java b/tmp/056b4fdf-0a87-48ca-a3d0-437954047182_fixed.java
index 66e3d01..ebf9eaf 100644
--- a/tmp/6fc2f4c5-d608-420b-8186-a991f7bc5d8e_buggy.java
+++ b/tmp/056b4fdf-0a87-48ca-a3d0-437954047182_fixed.java
@@ -1,34 +1,40 @@
 /**
  * Determines whether the given value may be assigned to a define.
  *
  * @param val The value being assigned.
  * @param defines The list of names of existing defines.
  */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
+      case Token.NULL:
+      case Token.UNDEFINED:
         return true;
 
       // Binary operators are only valid if both children are valid.
       case Token.BITAND:
       case Token.BITNOT:
       case Token.BITOR:
       case Token.BITXOR:
+      case Token.ADD:
+        return isValidDefineValue(val.getFirstChild(), defines) 
+               && isValidDefineValue(val.getSecondChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if the child is valid.
       case Token.NOT:
       case Token.NEG:
         return isValidDefineValue(val.getFirstChild(), defines);
 
       // Names are valid if and only if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
-    }
+      default:
         return false;
     }
+}
\ No newline at end of file
