diff --git a/tmp/54d17c43-76e6-4505-a86b-0953037e10f2_buggy.java b/tmp/d95eaae1-3a52-4839-a318-3df6eb73e08f_fixed.java
index 57f69c5..2a97003 100644
--- a/tmp/54d17c43-76e6-4505-a86b-0953037e10f2_buggy.java
+++ b/tmp/d95eaae1-3a52-4839-a318-3df6eb73e08f_fixed.java
@@ -1,12 +1,20 @@
 /**
-   * @return Whether the Node is a DO or FUNCTION (with or without
-   * labels).
+ * @return Whether the Node is a DO or FUNCTION (with or without labels)
+ *         and is not nested within a block that would make it invalid 
+ *         (e.g., within an IF statement in Safari for FUNCTIONS or 
+ *         within an IF statement in IE6/IE7 for DO loops).
  */
 private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // Check if the node is a FUNCTION or DO
+    boolean isFunctionOrDo = (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    
+    // Check if the node's parent is an IF statement (which would be invalid for Safari/IE6/IE7)
+    boolean hasInvalidParent = (n.getParent()!= null && n.getParent().getType() == Token.IF);
+    
+    // Either an empty statement or a block with more than one child would also be invalid
+    boolean hasInvalidSibling = (n.getParent()!= null && n.getParent().getType() == Token.BLOCK 
+                                 && (n.getParent().getNumChildren() == 0 || n.getParent().getNumChildren() > 1));
+    
+    // Return true only if the node is a FUNCTION or DO and does not have an invalid parent or sibling
+    return isFunctionOrDo &&!hasInvalidParent &&!hasInvalidSibling;
 }
\ No newline at end of file
