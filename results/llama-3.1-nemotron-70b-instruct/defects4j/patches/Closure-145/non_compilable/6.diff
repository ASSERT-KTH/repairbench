diff --git a/tmp/4d1841df-5174-4025-9faf-6f0aa83a6516_buggy.java b/tmp/10c46c06-e552-47f4-bf47-0afdf78e3ab5_fixed.java
index 57f69c5..a1b122d 100644
--- a/tmp/4d1841df-5174-4025-9faf-6f0aa83a6516_buggy.java
+++ b/tmp/10c46c06-e552-47f4-bf47-0afdf78e3ab5_fixed.java
@@ -1,12 +1,16 @@
 /**
-   * @return Whether the Node is a DO or FUNCTION (with or without
-   * labels).
+ * @return Whether the Node is a DO or FUNCTION (with or without labels),
+ *         considering the node's children to handle labeled blocks correctly.
  */
 private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    // Check if the node is a FUNCTION or DO
+    boolean isFunctionOrDo = (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+
+    // If it's a labeled block, ensure it doesn't contain a single FUNCTION or DO child
+    if (n.isBlock() && n.hasLabel() && n.getChildren().length == 1) {
+        Node child = n.getFirstChild();
+        return isFunctionOrDo &&!(child.getType() == Token.FUNCTION || child.getType() == Token.DO);
+    }
+
+    return isFunctionOrDo;
 }
\ No newline at end of file
