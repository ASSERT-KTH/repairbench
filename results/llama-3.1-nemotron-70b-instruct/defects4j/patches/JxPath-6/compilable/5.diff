diff --git a/tmp/0a397250-f8f5-4728-b44e-8d5eb462d63b_buggy.java b/tmp/df2b33b5-6f19-4787-bd0d-1d2dd06a3fe7_fixed.java
index f650982..0cbb2b3 100644
--- a/tmp/0a397250-f8f5-4728-b44e-8d5eb462d63b_buggy.java
+++ b/tmp/df2b33b5-6f19-4787-bd0d-1d2dd06a3fe7_fixed.java
@@ -1,42 +1,44 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Normalize contexts to single node pointers
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Normalize collections to iterators
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Handle mixed iterator and non-iterator comparisons
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+
+    // Handle iterator-iterator comparisons
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    // **FIX**: Avoid infinite recursion for non-iterator, non-collection comparisons
+    // by directly comparing the objects using equals() method.
+    return l == null? r == null : l.equals(r);
 }
\ No newline at end of file
