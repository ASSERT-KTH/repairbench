diff --git a/tmp/d72db579-9a69-401b-9373-640fc4652628_buggy.java b/tmp/ff4879c3-426a-4ac8-a8c3-5b42d3ce7d82_fixed.java
index f650982..9db70b8 100644
--- a/tmp/d72db579-9a69-401b-9373-640fc4652628_buggy.java
+++ b/tmp/ff4879c3-426a-4ac8-a8c3-5b42d3ce7d82_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Normalize contexts to node pointers if necessary
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Special handling for collections
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Asymmetric iterator comparison
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+
+    // Symmetric comparisons
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    if (l instanceof Comparable && r instanceof Comparable) {
+        // Fix: ensure proper comparison for non-iterator, comparable types
+        return ((Comparable) l).compareTo(r) == 0;
+    }
+    // Original, potentially problematic comparison for non-comparable types
+    return l.equals(r); // was: return equal(l, r); - recursive call removed
 }
\ No newline at end of file
