diff --git a/tmp/dba4ebb0-da57-4559-ab7d-879548ca3289_buggy.java b/tmp/e93441c6-9490-49d1-9714-912f4f43307e_fixed.java
index f650982..65b7c4e 100644
--- a/tmp/dba4ebb0-da57-4559-ab7d-879548ca3289_buggy.java
+++ b/tmp/e93441c6-9490-49d1-9714-912f4f43307e_fixed.java
@@ -1,42 +1,45 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Special handling for context objects
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Convert Collections to Iterators
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Asymmetric iterator comparisons
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+
+    // Symmetric comparisons (including iteratorColorBrush iterator)
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     } 
-        return equal(l, r);
+    // Fix: Avoid recursive call with same params, 
+    //      instead directly compare using equals method
+    return l == null? r == null : l.equals(r);
 }
\ No newline at end of file
