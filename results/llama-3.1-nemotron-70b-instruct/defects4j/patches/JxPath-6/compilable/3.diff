diff --git a/tmp/97dd0ed6-e0dc-4b44-a327-ee970a8c7d20_buggy.java b/tmp/9edb891e-c4f8-4dde-b9b6-7dd1b6b5d2b2_fixed.java
index f650982..773288d 100644
--- a/tmp/97dd0ed6-e0dc-4b44-a327-ee970a8c7d20_buggy.java
+++ b/tmp/9edb891e-c4f8-4dde-b9b6-7dd1b6b5d2b2_fixed.java
@@ -1,42 +1,51 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Normalize contexts to single node pointers
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Normalize collections to iterators
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Asymmetric iterator comparisons
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+    // Symmetric iterator comparisons
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // **FIXED**: Proper null handling and Override equals if not iterators
+    return (l == null)? (r == null) : 
+           (r == null)? false : 
+           (l.getClass() == r.getClass())? l.equals(r) : 
+           toString(l).equals(toString(r));
+}
+
+// Helper method for consistent toString() handling
+private String toString(Object obj) {
+    return (obj == null)? "null" : obj.toString();
 }
\ No newline at end of file
