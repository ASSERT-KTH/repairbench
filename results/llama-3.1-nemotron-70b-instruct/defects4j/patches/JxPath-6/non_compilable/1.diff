diff --git a/tmp/43da3404-e5b1-460b-b060-66ae24576445_buggy.java b/tmp/37356196-1925-4f3f-abcc-e9192bf1087c_fixed.java
index f650982..b9d7dcd 100644
--- a/tmp/43da3404-e5b1-460b-b060-66ae24576445_buggy.java
+++ b/tmp/37356196-1925-4f3f-abcc-e9192bf1087c_fixed.java
@@ -1,42 +1,45 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Normalize contexts to single node pointers if necessary
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    // Handle collection to iterator conversion
+    if (l instanceof Collection &&!(l instanceof String)) { // exclude Strings, which are also Collections
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    if (r instanceof Collection &&!(r instanceof String)) { // exclude Strings, which are also Collections
         r = ((Collection) r).iterator();
     }
 
+    // Asymmetrical iterator comparisons
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
+
+    // Symmetrical comparisons
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+
+    // Base case: compare non-iterator, non-collection objects
+    return Objects.equals(l, r); // Use Java's Objects.equals for null-safe comparison
 }
\ No newline at end of file
