diff --git a/tmp/43b7d37f-0e54-49a2-a7af-08a653411589_buggy.java b/tmp/c95604bf-f7e9-46e6-9611-edced6252b4a_fixed.java
index f650982..87327dc 100644
--- a/tmp/43b7d37f-0e54-49a2-a7af-08a653411589_buggy.java
+++ b/tmp/c95604bf-f7e9-46e6-9611-edced6252b4a_fixed.java
@@ -1,42 +1,47 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
     // System.err.println("COMPARING: " +
     //     (l == null? "null" : l.getClass().getName()) + " " +
     //     (r == null? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Fix: When comparing a non-iterator with an iterator, 
+    // check if the non-iterator value exists in the iterator
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    
+    // Fix: Recursive call was causing the issue, 
+    // instead directly compare the values if none of the above conditions match
+    return Objects.equals(l, r);
 }
\ No newline at end of file
