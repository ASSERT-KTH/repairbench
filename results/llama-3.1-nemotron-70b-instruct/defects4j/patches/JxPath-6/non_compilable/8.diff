diff --git a/tmp/1694013f-0bee-4a7f-b5c3-0f9c061d4e77_buggy.java b/tmp/09c19433-c835-4ed7-975c-361c64c27078_fixed.java
index f650982..f8753c7 100644
--- a/tmp/1694013f-0bee-4a7f-b5c3-0f9c061d4e77_buggy.java
+++ b/tmp/09c19433-c835-4ed7-975c-361c64c27078_fixed.java
@@ -1,42 +1,45 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Handle contexts
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
-
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+    // Handle collections by comparing each element
+    if (l instanceof Collection && r instanceof Collection) {
+        Collection<?> lc = (Collection<?>) l;
+        Collection<?> rc = (Collection<?>) r;
+        if (lc.size()!= rc.size()) return false;
+        Iterator<?> lit = lc.iterator();
+        Iterator<?> rit = rc.iterator();
+        while (lit.hasNext()) {
+            if (!equal(context, lit.next(), rit.next())) return false;
         }
-
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        return true;
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    // Handle iterator to single value comparison
+    if (l instanceof Iterator &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // Direct equality check for non-collection, non-iterator types
+    return Objects.equals(l, r);
 }
\ No newline at end of file
