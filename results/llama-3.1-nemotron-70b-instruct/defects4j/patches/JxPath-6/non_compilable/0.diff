diff --git a/tmp/c5beb159-6876-4dca-b900-8865ab923e35_buggy.java b/tmp/d648e4d2-b60b-413c-a9b6-1519da3a057b_fixed.java
index f650982..ef4cdf4 100644
--- a/tmp/c5beb159-6876-4dca-b900-8865ab923e35_buggy.java
+++ b/tmp/d648e4d2-b60b-413c-a9b6-1519da3a057b_fixed.java
@@ -1,42 +1,43 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Handle contexts
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    // Handle collections and iterators
+    if (l instanceof Collection &&!(l instanceof Iterator)) {
         l = ((Collection) l).iterator();
     }
 
-        if (r instanceof Collection) {
+    if (r instanceof Collection &&!(r instanceof Iterator)) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
-        }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
-        }
+    // Symmetric iterator comparison
+    if (l instanceof Iterator || r instanceof Iterator) {
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
+        } else if (l instanceof Iterator) {
+            return contains((Iterator) l, r);
+        } else {
+            return contains((Iterator) r, l);
         }
-        return equal(l, r);
+    }
+
+    // Base case: compare single values
+    return Objects.equals(l, r);
 }
\ No newline at end of file
