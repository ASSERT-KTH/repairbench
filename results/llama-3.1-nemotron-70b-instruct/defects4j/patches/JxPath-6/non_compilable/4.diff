diff --git a/tmp/dcee005d-c4e7-4e57-83db-825b724e8b5b_buggy.java b/tmp/c45a49d9-0196-4b3d-b6a9-4f54fcd34504_fixed.java
index f650982..83a720d 100644
--- a/tmp/dcee005d-c4e7-4e57-83db-825b724e8b5b_buggy.java
+++ b/tmp/c45a49d9-0196-4b3d-b6a9-4f54fcd34504_fixed.java
@@ -1,42 +1,48 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
     // System.err.println("COMPARING: " +
     //     (l == null? "null" : l.getClass().getName()) + " " +
     //     (r == null? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
+    // Fix: When both operands are not iterators, use equals() for comparison
+    if (!(l instanceof Iterator) &&!(r instanceof Iterator)) {
+        return Objects.equals(l, r); // Use Objects.equals() for null safety
+    }
+
     if ((l instanceof Iterator) &&!(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // This line should not be reachable with the above fixes
+    // return equal(l, r); // Removed to avoid potential infinite recursion
 }
\ No newline at end of file
