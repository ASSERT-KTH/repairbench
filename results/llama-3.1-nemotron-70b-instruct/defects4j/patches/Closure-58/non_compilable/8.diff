diff --git a/tmp/53756ceb-f907-42ba-9de4-d5c565fd406c_buggy.java b/tmp/f0592523-34fa-4835-bd31-002f94fa69d3_fixed.java
index 2ff27ef..f7ff5cb 100644
--- a/tmp/53756ceb-f907-42ba-9de4-d5c565fd406c_buggy.java
+++ b/tmp/f0592523-34fa-4835-bd31-002f94fa69d3_fixed.java
@@ -1,97 +1,127 @@
 /**
  * Computes the GEN and KILL set.
  *
  * @param n Root node.
  * @param gen Local variables that are live because of the instruction at
  *        {@code n} will be added to this set.
  * @param kill Local variables that are killed because of the instruction at
  *        {@code n} will be added to this set.
  * @param conditional {@code true} if any assignments encountered are
  *        conditionally executed. These assignments might not kill a variable.
  */
 private void computeGenKill(Node n, BitSet gen, BitSet kill,
       boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
       case Token.BLOCK:
       case Token.FUNCTION:
         return;
 
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
         computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
             conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
               conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
           if (NodeUtil.isVar(lhs)) {
             // for(var x in y) {...}
             lhs = lhs.getLastChild();
           }
+          // Fix: Handle non-name LHS (e.g., a[1] in the test case)
+          if (NodeUtil.isName(lhs) || NodeUtil.isGetProp(lhs)) {
             addToSetIfLocal(lhs, kill);
             addToSetIfLocal(lhs, gen);
+          } else {
+            // Traverse the LHS to find names that might be killed or generated
+            traverseLHSForGenKill(lhs, gen, kill);
+          }
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;
 
       case Token.VAR:
         for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
           if (c.hasChildren()) {
             computeGenKill(c.getFirstChild(), gen, kill, conditional);
             if (!conditional) {
               addToSetIfLocal(c, kill);
             }
           }
         }
         return;
 
       case Token.AND:
       case Token.OR:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // May short circuit.
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.HOOK:
         computeGenKill(n.getFirstChild(), gen, kill, conditional);
         // Assume both sides are conditional.
         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);
         computeGenKill(n.getLastChild(), gen, kill, true);
         return;
 
       case Token.NAME:
         if (isArgumentsName(n)) {
           markAllParametersEscaped();
         } else {
           addToSetIfLocal(n, gen);
         }
         return;
 
       default:
         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
           Node lhs = n.getFirstChild();
           if (!conditional) {
             addToSetIfLocal(lhs, kill);
           }
           if (!NodeUtil.isAssign(n)) {
             // assignments such as a += 1 reads a.
             addToSetIfLocal(lhs, gen);
           }
           computeGenKill(lhs.getNext(), gen, kill, conditional);
         } else {
           for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
             computeGenKill(c, gen, kill, conditional);
           }
         }
         return;
     }
   }
+
+// New method to traverse the LHS for GEN/KILL sets when it's not a simple name
+private void traverseLHSForGenKill(Node lhs, BitSet gen, BitSet kill) {
+  switch (lhs.getType()) {
+    case Token.GETPROP:
+      Node obj = lhs.getFirstChild();
+      if (NodeUtil.isName(obj) || NodeUtil.isGetProp(obj)) {
+        traverseLHSForGenKill(obj, gen, kill);
+      }
+      // FALL THROUGH to handle the property name
+    case Token.STRING:
+    case Token.NUMBER:
+      // Property access, do not add to GEN/KILL sets
+      break;
+    default:
+      throw new IllegalStateException("Unexpected LHS type: " + lhs.getType());
+  }
+  // Add the LHS to the GEN set if it's a local variable
+  addToSetIfLocal(lhs, gen);
+  // Add the LHS to the KILL set if it's a local variable and not conditional
+  if (!conditional) {
+    addToSetIfLocal(lhs, kill);
+  }
+}
\ No newline at end of file
