diff --git a/tmp/7d84859e-7dd6-49f3-8206-bebfab7e26ac_buggy.java b/tmp/5a8fb5a7-17f8-4a76-b994-0059f75c4ba9_fixed.java
index 70cafe0..765e579 100644
--- a/tmp/7d84859e-7dd6-49f3-8206-bebfab7e26ac_buggy.java
+++ b/tmp/5a8fb5a7-17f8-4a76-b994-0059f75c4ba9_fixed.java
@@ -1,18 +1,27 @@
 /**
  * Checks whether the given column is basic.
  * @param col index of the column to check
  * @return the row that the variable is basic in.  null if the column is not basic
  */
 private Integer getBasicRow(final int col) {
     Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+    for (int i = 0; i < getHeight(); i++) {
+        if (i < getNumObjectiveFunctions()) {
+            // Skip objective functions, only consider constraint rows
+            continue;
+        }
+        if (MathUtils.equals(getEntry(i, col), 1.0, epsilon)) {
+            // A basic column should have exactly one 1.0 entry
             if (row == null) {
                 row = i;
             } else {
+                // If multiple 1.0 entries are found, the column is not basic
                 return null;
             }
+        } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
+            // If any non-zero, non-1.0 entry is found, the column is not basic
+            return null;
         }
     }
     return row;
 }
\ No newline at end of file
