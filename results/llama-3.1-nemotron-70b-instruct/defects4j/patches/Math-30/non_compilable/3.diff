diff --git a/tmp/0ad28ae2-9474-4fff-b96c-c49d92bf4f85_buggy.java b/tmp/99297c7c-73db-4b78-b9d7-b21e2e362678_fixed.java
index 3c69e10..f1c134b 100644
--- a/tmp/0ad28ae2-9474-4fff-b96c-c49d92bf4f85_buggy.java
+++ b/tmp/99297c7c-73db-4b78-b9d7-b21e2e362678_fixed.java
@@ -1,27 +1,30 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    final int n1n2prod = (long) n1 * n2; // avoid integer overflow
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    final double EU = (double) n1n2prod / 2.0;
+    final double VarU = (double) n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Use the survival function (1 - CDF) for large z values to avoid underflow
+    return (z < 0)? 
+           2 * standardNormal.cumulativeProbability(z) : 
+           2 * (1 - standardNormal.cumulativeProbability(-z));
 }
\ No newline at end of file
