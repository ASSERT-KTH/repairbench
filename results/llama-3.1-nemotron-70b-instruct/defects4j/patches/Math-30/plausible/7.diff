diff --git a/tmp/d26783d2-8d82-49d7-bb8f-e8a5c7d0ac71_buggy.java b/tmp/4465bb1b-23a5-4be7-b3c4-6d5ab5267c51_fixed.java
index 3c69e10..5744fe8 100644
--- a/tmp/d26783d2-8d82-49d7-bb8f-e8a5c7d0ac71_buggy.java
+++ b/tmp/4465bb1b-23a5-4be7-b3c4-6d5ab5267c51_fixed.java
@@ -1,27 +1,33 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Fix: handle case where z is near the boundary of the standard normal distribution
+    // to avoid cumulativeProbability() returning NaN or incorrect values for large z
+    if (Double.isNaN(z) || Math.abs(z) > 6) { // 6 is approximately the 1e-9 quantile for standard normal
+        return (Math.abs(z) > 0)? 0 : 1; // extremely low p-value or no difference
+    } else {
+        return 2 * (1 - standardNormal.cumulativeProbability(Math.abs(z)));
+    }
 }
\ No newline at end of file
