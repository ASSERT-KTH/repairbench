diff --git a/tmp/633fd6cd-c3d3-4f49-9535-503803d8222e_buggy.java b/tmp/effd6f61-c156-43f5-9939-128fbf392d23_fixed.java
index 3c69e10..46b0977 100644
--- a/tmp/633fd6cd-c3d3-4f49-9535-503803d8222e_buggy.java
+++ b/tmp/effd6f61-c156-43f5-9939-128fbf392d23_fixed.java
@@ -1,27 +1,31 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
+    // Fix: Handle cases where z is close to zero to avoid underflow
+    // in the cumulative probability calculation, and ensure p-value
+    // is within valid range [0, 1]
+    final double pValue = Math.max(0, Math.min(1, 
+        2 * (1 - new NormalDistribution(0, 1).cumulativeProbability(FastMath.abs(z)))));
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    return pValue;
 }
\ No newline at end of file
