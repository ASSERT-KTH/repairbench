diff --git a/tmp/588a9d83-7ca6-4079-850b-cf2ec1dab1e8_buggy.java b/tmp/a41e19f1-3c3d-4a5b-9c4f-558c6857c865_fixed.java
index 3c69e10..e20df50 100644
--- a/tmp/588a9d83-7ca6-4079-850b-cf2ec1dab1e8_buggy.java
+++ b/tmp/a41e19f1-3c3d-4a5b-9c4f-558c6857c865_fixed.java
@@ -1,27 +1,38 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
+    // Handle case where z is close to 0 to avoid precision issues
+    if (FastMath.abs(z) < 1e-6) {
+        return 1.0; // Approximate p-value for very small z
+    }
+
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
+    // Use complementary cumulative probability for large z values
+    // to improve numerical stability
+    if (z > 0) {
+        return 2 * (1 - standardNormal.cumulativeProbability(z));
+    } else {
         return 2 * standardNormal.cumulativeProbability(z);
     }
+}
\ No newline at end of file
