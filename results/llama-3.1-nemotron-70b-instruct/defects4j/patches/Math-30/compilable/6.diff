diff --git a/tmp/4e56d250-a1d6-4e86-8e3b-6a7000088b6c_buggy.java b/tmp/383080f5-ded9-4584-a44f-23bfce1b4669_fixed.java
index 3c69e10..539f07c 100644
--- a/tmp/4e56d250-a1d6-4e86-8e3b-6a7000088b6c_buggy.java
+++ b/tmp/383080f5-ded9-4584-a44f-23bfce1b4669_fixed.java
@@ -1,27 +1,36 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
+    // Fix: handle the case where z is very large to avoid numerical issues
+    // with the cumulative distribution function
+    if (z > 6) { // Using 6 as a threshold, values above this will yield ~0
+        return 0;
+    } else if (z < -6) { // Similarly, handle very negative z values
+        return 1;
+    }
+
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Fix: Ensure the returned p-value is within valid range [0, 1]
+    return FastMath.min(1, FastMath.max(0, 2 * (1 - standardNormal.cumulativeProbability(FastMath.abs(z)))));
 }
\ No newline at end of file
