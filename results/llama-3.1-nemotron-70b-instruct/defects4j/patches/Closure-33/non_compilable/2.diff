diff --git a/tmp/a5b08b3c-972d-4830-9489-c13ecfe7a7a5_buggy.java b/tmp/188d4055-2f16-4ead-822c-b2c21f00a17d_fixed.java
index fb2b020..85f08c9 100644
--- a/tmp/a5b08b3c-972d-4830-9489-c13ecfe7a7a5_buggy.java
+++ b/tmp/188d4055-2f16-4ead-822c-b2c21f00a17d_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
         } 
-          defineInferredProperty(prop, typeToInfer, null);
+        // FIX: Check if property is already defined before inferring its type
+        else if (getPropertyType(prop).isUnionType() &&!getPropertyType(prop).containsType(propType)) {
+          defineInferredProperty(prop, getPropertyType(prop).unionWith(propType), null);
+        }
       }
     }
   }
 }
\ No newline at end of file
