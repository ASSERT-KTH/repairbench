diff --git a/tmp/61a14aad-92b8-4e16-abe6-985deda3c488_buggy.java b/tmp/74cead93-292a-4561-8a78-b34d95c74360_fixed.java
index fb2b020..824363a 100644
--- a/tmp/61a14aad-92b8-4e16-abe6-985deda3c488_buggy.java
+++ b/tmp/74cead93-292a-4561-8a78-b34d95c74360_fixed.java
@@ -1,27 +1,34 @@
+/**
+ * Matches the given constraint object against this object's type.
+ * 
+ * @param constraintObj the constraint object to match
+ */
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+        
+        // Check if property is already declared with a type that is a supertype of propType
+        if (!isPropertyTypeDeclared(prop) ||!getPropertyType(prop).isSupertype(propType)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
