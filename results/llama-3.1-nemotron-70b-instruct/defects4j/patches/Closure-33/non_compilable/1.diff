diff --git a/tmp/a98d2d12-eb6d-4ca8-9685-4d747d2994fb_buggy.java b/tmp/aadfa3e0-0e0b-4262-a63d-9248319edb5c_fixed.java
index fb2b020..a362e26 100644
--- a/tmp/a98d2d12-eb6d-4ca8-9685-4d747d2994fb_buggy.java
+++ b/tmp/aadfa3e0-0e0b-4262-a63d-9248319edb5c_fixed.java
@@ -1,27 +1,38 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                .getLeastSupertype(propType);
           }
+          // Fix: Check if property already exists before defining a new one
+          if (!hasOwnProperty(prop)) {
             defineInferredProperty(prop, typeToInfer, null);
           }
+        } else if (hasProperty(prop)) {
+          // Fix: If property exists, ensure its type is compatible with the constraint
+          JSType existingPropType = getPropertyType(prop);
+          if (!existingPropType.isAssignableTo(propType)) {
+            // You may want to handle type incompatibility differently (e.g., throw an exception)
+            // For now, just log a warning
+            System.err.println("Warning: Property type mismatch for '" + prop + "'");
+          }
+        }
       }
     }
   }
\ No newline at end of file
