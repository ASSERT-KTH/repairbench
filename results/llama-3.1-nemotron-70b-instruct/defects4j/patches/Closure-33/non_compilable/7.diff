diff --git a/tmp/8881bb77-dd9c-470f-afe5-45dc9ece0f09_buggy.java b/tmp/1b05c9ad-e2fd-42d1-bb32-6838f078cbe9_fixed.java
index fb2b020..0368b4a 100644
--- a/tmp/8881bb77-dd9c-470f-afe5-45dc9ece0f09_buggy.java
+++ b/tmp/1b05c9ad-e2fd-42d1-bb32-6838f078cbe9_fixed.java
@@ -1,27 +1,31 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+          // FIX: Ensure typeToInfer is not more general than the property type
+          typeToInfer = getNativeType(JSTypeNative.OBJECT_TYPE)
              .getLeastSupertype(propType);
+          if (typeToInfer.isEqualTo(getNativeType(JSTypeNative.VOID_TYPE))) {
+            typeToInfer = propType; // default to the original property type
+          }
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
