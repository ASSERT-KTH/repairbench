diff --git a/tmp/81b05c93-9d46-469b-b188-39b8e017b6ab_buggy.java b/tmp/5a7611f1-574f-40da-98d2-51d541888774_fixed.java
index fb2b020..0977e57 100644
--- a/tmp/81b05c93-9d46-469b-b188-39b8e017b6ab_buggy.java
+++ b/tmp/5a7611f1-574f-40da-98d2-51d541888774_fixed.java
@@ -1,27 +1,36 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+            // FIX: Use getNativeType(JSTypeNative.OBJECT_TYPE) instead of VOID_TYPE
+            // to infer object types for undeclared properties
+            typeToInfer = getNativeType(JSTypeNative.OBJECT_TYPE)
                .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else if (hasProperty(prop)) {
+          // FIX: If property is already declared, ensure its type is a supertype
+          // of the constraint property type to avoid type mismatches
+          JSType declaredType = getPropertyType(prop);
+          if (!declaredType.isSupertype(propType)) {
+            defineInferredProperty(prop, declaredType.getLeastSupertype(propType), null);
+          }
         }
       }
     }
 }
\ No newline at end of file
