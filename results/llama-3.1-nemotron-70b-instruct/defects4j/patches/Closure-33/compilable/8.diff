diff --git a/tmp/3f4eb28d-f4c9-47a0-9680-974382c1a477_buggy.java b/tmp/2011a2af-73e9-464e-9a50-ffb79a45cd90_fixed.java
index fb2b020..a6dbfe8 100644
--- a/tmp/3f4eb28d-f4c9-47a0-9680-974382c1a477_buggy.java
+++ b/tmp/2011a2af-73e9-464e-9a50-ffb79a45cd90_fixed.java
@@ -1,27 +1,49 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
              .getLeastSupertype(propType);
-          }
+          // **FIX**: Check if typeToInfer is not NULL before defining the property
+          if (typeToInfer!= null) {
             defineInferredProperty(prop, typeToInfer, null);
           }
+        } else {
+          // **FIX**: If property exists, try to narrow its type to match the constraint
+          narrowPropertyType(prop, propType);
         }
+      } else {
+        // **FIX**: If property type is already declared, check for type compatibility
+        checkPropertyTypeCompatibility(prop, propType);
       }
     }
+  }
+}
+
+// **Assuming the existence of the following methods, 
+// which might need to be implemented or already exist in your codebase**
+
+// Narrow the property type to match the constraint, if possible
+private void narrowPropertyType(String prop, JSType propType) {
+  // Implementation depends on your type system and property type hierarchy
+}
+
+// Check if the property type is compatible with the constraint
+private void checkPropertyTypeCompatibility(String prop, JSType propType) {
+  // Implementation depends on your type system and compatibility rules
+}
\ No newline at end of file
