diff --git a/tmp/3e93bb19-bc1d-494e-8403-f7847286788f_buggy.java b/tmp/a1cfc83e-6fe1-4540-8dbd-efea9fcee703_fixed.java
index fb2b020..cfbe962 100644
--- a/tmp/3e93bb19-bc1d-494e-8403-f7847286788f_buggy.java
+++ b/tmp/a1cfc83e-6fe1-4540-8dbd-efea9fcee703_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+          if (hasProperty(prop)) { // Fix: Check if property exists before inferring type
+            JSType existingType = getPropertyType(prop);
+            typeToInfer = existingType.getLeastSupertype(propType);
+          } else {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else if (isPropertyTypeDeclared(prop) && hasProperty(prop)) { // Additional Fix: Handle existing properties with declared types
+          JSType existingType = getPropertyType(prop);
+          JSType mergedType = existingType.getLeastSupertype(propType);
+          defineInferredProperty(prop, mergedType, null);
         }
       }
     }
   }
\ No newline at end of file
