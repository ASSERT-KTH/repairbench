diff --git a/tmp/e405ad88-56d9-469e-b208-03c91b497129_buggy.java b/tmp/6b6e24c6-8c91-43a2-924a-6f1d8fae5c29_fixed.java
index f9a9b5b..6681b77 100644
--- a/tmp/e405ad88-56d9-469e-b208-03c91b497129_buggy.java
+++ b/tmp/6b6e24c6-8c91-43a2-924a-6f1d8fae5c29_fixed.java
@@ -1,30 +1,79 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+    
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+    
     T mockInstance = null;
     try {
+        // Check if the type to mock is an inner class and requires an outer instance
+        if (settings.getTypeToMock().getEnclosingClass()!= null) {
+            // Get the constructor with the outer instance parameter
+            Constructor<? extends T> constructor = getConstructorWithOuterInstance(mockedProxyType);
+            if (constructor == null) {
+                throw new InstantiationException("No suitable constructor found for inner class " + mockedProxyType.getName());
+            }
+            // Instantiate the mock with the outer instance
+            mockInstance = constructor.newInstance(getOuterInstance(settings.getTypeToMock()));
+        } else if (settings.useConstructor()) {
+            // Try to find a constructor for non-inner classes when useConstructor() is enabled
+            Constructor<? extends T> constructor = getNoArgConstructor(mockedProxyType);
+            if (constructor == null) {
+                throw new InstantiationException("No 0-arg constructor found for type " + mockedProxyType.getName());
+            }
+            // Instantiate the mock using the no-arg constructor
+            mockInstance = constructor.newInstance();
+        } else {
+            // Fallback to the original instantiation method
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+    } catch (Exception e) {
+        throw new MockitoException("Error creating mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+    }
+}
+
+// Helper methods for the changes above
+
+private Constructor<? extends T> getConstructorWithOuterInstance(Class<? extends T> clazz) {
+    for (Constructor<?> constructor : clazz.getConstructors()) {
+        if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].equals(clazz.getEnclosingClass())) {
+            return (Constructor<? extends T>) constructor;
+        }
+    }
+    return null;
+}
+
+private Object getOuterInstance(Class<?> innerClass) {
+    // Assuming the test class is the outer instance for the inner class
+    return getClass().getEnclosingClass()!= null? getClass().getEnclosingInstance() : this;
+}
+
+private Constructor<? extends T> getNoArgConstructor(Class<? extends T> clazz) {
+    try {
+        return clazz.getConstructor();
+    } catch (NoSuchMethodException e) {
+        return null;
     }
 }
\ No newline at end of file
