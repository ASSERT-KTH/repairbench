diff --git a/tmp/3ccf3c6d-a1cf-4a1d-b83a-de8182eca726_buggy.java b/tmp/f3fbf813-537c-4f6e-86cc-c60803da50d6_fixed.java
index f9a9b5b..c9d5da2 100644
--- a/tmp/3ccf3c6d-a1cf-4a1d-b83a-de8182eca726_buggy.java
+++ b/tmp/f3fbf813-537c-4f6e-86cc-c60803da50d6_fixed.java
@@ -1,30 +1,81 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.useConstructor()) {
+            Object[] constructorArgs;
+            if (settings.getOuterClassInstance()!= null) {
+                // Inner class
+                constructorArgs = new Object[]{settings.getOuterClassInstance()};
+            } else {
+                // Look for a no-arg constructor or a constructor with mockable parameters
+                constructorArgs = findConstructorArgs(mockedProxyType, settings);
+            }
+            mockInstance = classInstantiator.instantiate(mockedProxyType, constructorArgs);
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        if (e.getCause() instanceof InvocationTargetException) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } else if (e.getCause() instanceof NoSuchMethodException) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", 
+                                        "Please ensure that the type has a 0-arg constructor or provide a custom instantiator.",
+                                        e);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
         }
     }
+}
+
+// Helper method to find constructor arguments
+private Object[] findConstructorArgs(Class<?> clazz, MockCreationSettings<?> settings) throws InstantiationException {
+    Constructor<?>[] constructors = clazz.getConstructors();
+    for (Constructor<?> constructor : constructors) {
+        if (constructor.getParameterCount() == 0) {
+            // No-arg constructor, return empty array
+            return new Object[0];
+        } else if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].isAssignableFrom(settings.getTypeToMock().getEnclosingClass())) {
+            // Single-arg constructor for inner class, return outer instance
+            return new Object[]{settings.getOuterClassInstance()};
+        } else {
+            // Constructor with multiple parameters, try to find mockable parameters
+            Object[] args = new Object[constructor.getParameterCount()];
+            for (int i = 0; i < constructor.getParameterCount(); i++) {
+                Class<?> paramType = constructor.getParameterTypes()[i];
+                if (settings.getMockableTypes().contains(paramType)) {
+                    args[i] = mock(paramType, withSettings().defaultAnswer(CALLS_REAL_METHODS));
+                } else {
+                    throw new MockitoException("Unable to create mock instance of type '" + clazz.getSimpleName() + "'", 
+                                                "Please ensure that the target class has a 0-arg constructor or provide a custom instantiator.",
+                                                new NoSuchMethodException());
+                }
+            }
+            return args;
+        }
+    }
+    throw new MockitoException("Unable to create mock instance of type '" + clazz.getSimpleName() + "'", 
+                                "Please ensure that the target class has a 0-arg constructor or provide a custom instantiator.",
+                                new NoSuchMethodException());
+}
\ No newline at end of file
