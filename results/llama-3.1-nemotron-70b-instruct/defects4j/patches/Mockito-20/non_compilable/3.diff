diff --git a/tmp/3db15f76-9b81-45a7-9e3b-73a8829372f3_buggy.java b/tmp/99437e33-f3f1-4be2-8386-1b900cd84dce_fixed.java
index f9a9b5b..ff0e646 100644
--- a/tmp/3db15f76-9b81-45a7-9e3b-73a8829372f3_buggy.java
+++ b/tmp/99437e33-f3f1-4be2-8386-1b900cd84dce_fixed.java
@@ -1,30 +1,56 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Use constructor if available and specified in settings
+        if (settings.useConstructor()) {
+            try {
+                // Try to find a constructor with parameters matching the outer instance (for inner classes)
+                Constructor<? extends T> constructor = getMatchingConstructor(mockedProxyType, settings.getOuterInstance());
+                mockInstance = constructor.newInstance(settings.getOuterInstance());
+            } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
+                // Fall back to no-arg constructor or class instantiator if constructor with matching parameters is not found
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+        } else {
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+    } catch (Exception e) {
+        if (settings.useConstructor()) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "' using constructor", e);
+        } else {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
+}
+
+// Helper method to find a constructor with parameters matching the outer instance (for inner classes)
+private <T> Constructor<? extends T> getMatchingConstructor(Class<? extends T> clazz, Object outerInstance) throws NoSuchMethodException {
+    for (Constructor<? extends T> constructor : clazz.getConstructors()) {
+        if (constructor.getParameterCount() == 1 && constructor.getParameterTypes()[0].isInstance(outerInstance)) {
+            return constructor;
+        }
+    }
+    throw new NoSuchMethodException("No constructor with matching parameters found for " + clazz.getName());
+}
\ No newline at end of file
