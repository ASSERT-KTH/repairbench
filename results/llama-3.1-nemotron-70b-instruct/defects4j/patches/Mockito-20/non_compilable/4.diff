diff --git a/tmp/4e57b218-1978-4bc2-8436-fa1582310642_buggy.java b/tmp/bd6ff843-706e-42a7-9c22-675e7d81d991_fixed.java
index f9a9b5b..3331b90 100644
--- a/tmp/4e57b218-1978-4bc2-8436-fa1582310642_buggy.java
+++ b/tmp/bd6ff843-706e-42a7-9c22-675e7d81d991_fixed.java
@@ -1,30 +1,75 @@
+/**
+ * Fixes for:
+ * - Support for creating mocks with non-default constructors
+ * - Handling inner classes correctly
+ * - Providing informative error messages
+ */
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
+
+    Class<? extends T> mockedProxyType;
+    if (settings.useConstructor()) {
+        // Try to generate a proxy type using the specified constructor
+        mockedProxyType = constructorBasedCachingMockBytecodeGenerator.get(
+                settings.getTypeToMock(),
+                settings.getExtraInterfaces(),
+                settings.getConstructorArgs()
+        );
+    } else {
+        // Fallback to the original behavior if constructor usage is not specified
+        mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+    }
+
     T mockInstance = null;
     try {
+        if (settings.useConstructor()) {
+            // Instantiate the mock using the specified constructor args and outer instance (for inner classes)
+            mockInstance = constructorBasedClassInstantiator.instantiate(
+                    mockedProxyType,
+                    settings.getConstructorArgs(),
+                    settings.getOuterInstance()
+            );
+        } else {
+            // Fallback to the original instantiation behavior
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String errorMessage;
+        if (settings.useConstructor()) {
+            // Provide a more informative error message when constructor usage is enabled
+            errorMessage = "Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "' using constructor";
+            if (e.getCause() instanceof java.lang.NoSuchMethodException) {
+                errorMessage += ". Please ensure the target class has a matching constructor.";
+            } else if (mockedProxyType.isMemberClass() && settings.getOuterInstance() == null) {
+                errorMessage += ". For inner classes, please specify the outer instance using 'outerInstance()'.";
+            } else if (mockedProxyType.isMemberClass() &&!mockedProxyType.getDeclaringClass().isInstance(settings.getOuterInstance())) {
+                errorMessage += ". Please ensure that the outer instance has the correct type.";
+            }
+        } else {
+            // Fallback to the original error message if constructor usage is not specified
+            errorMessage = "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'";
+        }
+        throw new MockitoException(errorMessage, e);
     }
 }
\ No newline at end of file
