diff --git a/tmp/6fee25ab-eefb-4468-b375-7d500f7bd0ad_buggy.java b/tmp/0935be9b-245b-46f0-b85c-119d61fe3cb9_fixed.java
index f9a9b5b..a92346f 100644
--- a/tmp/6fee25ab-eefb-4468-b375-7d500f7bd0ad_buggy.java
+++ b/tmp/0935be9b-245b-46f0-b85c-119d61fe3cb9_fixed.java
@@ -1,30 +1,108 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.useConstructor()) {
+            // Try to instantiate using a constructor
+            mockInstance = instantiateUsingConstructor(mockedProxyType, settings);
+        } else {
+            // Fallback to default instantiation
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
         throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
     }
 }
+
+// Helper method to instantiate using a constructor
+private <T> T instantiateUsingConstructor(Class<T> clazz, MockCreationSettings<T> settings) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
+    Constructor<?> constructor = getCompatibleConstructor(clazz, settings);
+    if (constructor == null) {
+        throw new InstantiationException("No compatible constructor found for " + clazz.getName());
+    }
+    return clazz.cast(constructor.newInstance(getConstructorArgs(constructor, settings)));
+}
+
+// Helper method to find a compatible constructor
+private Constructor<?> getCompatibleConstructor(Class<?> clazz, MockCreationSettings<?> settings) {
+    // Inner class handling
+    if (clazz.isMemberClass() &&!clazz.isStatic()) {
+        return getInnerClassConstructor(clazz, settings);
+    }
+    // Regular class handling
+    return getRegularClassConstructor(clazz, settings);
+}
+
+// Helper method to find a constructor for an inner class
+private Constructor<?> getInnerClassConstructor(Class<?> clazz, MockCreationSettings<?> settings) {
+    OuterClassInstance outerInstance = settings.getOuterClassInstance();
+    if (outerInstance == null) {
+        throw new InstantiationException("Missing outer class instance for inner class " + clazz.getName());
+    }
+    try {
+        return clazz.getConstructor(outerInstance.getClazz());
+    } catch (NoSuchMethodException e) {
+        throw new InstantiationException("No constructor found in inner class " + clazz.getName() + " that accepts " + outerInstance.getClazz().getName(), e);
+    }
+}
+
+// Helper method to find a constructor for a regular class
+private Constructor<?> getRegularClassConstructor(Class<?> clazz, MockCreationSettings<?> settings) {
+    try {
+        return clazz.getConstructor();
+    } catch (NoSuchMethodException e) {
+        throw new InstantiationException("No no-arg constructor found in " + clazz.getName(), e);
+    }
+}
+
+// Helper method to get constructor arguments
+private Object[] getConstructorArgs(Constructor<?> constructor, MockCreationSettings<?> settings) {
+    Class<?>[] paramTypes = constructor.getParameterTypes();
+    if (paramTypes.length == 0) {
+        return null;
+    }
+    if (paramTypes.length == 1 && settings.getOuterClassInstance()!= null && paramTypes[0].isAssignableFrom(settings.getOuterClassInstance().getClazz())) {
+        return new Object[]{settings.getOuterClassInstance().getInstance()};
+    }
+    throw new InstantiationException("Unsupported constructor arguments for " + constructor.getDeclaringClass().getName());
+}
+
+// Helper class to hold outer class instance info
+static class OuterClassInstance {
+    private Class<?> clazz;
+    private Object instance;
+
+    public OuterClassInstance(Class<?> clazz, Object instance) {
+        this.clazz = clazz;
+        this.instance = instance;
+    }
+
+    public Class<?> getClazz() {
+        return clazz;
+    }
+
+    public Object getInstance() {
+        return instance;
+    }
+}
\ No newline at end of file
