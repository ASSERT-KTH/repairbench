diff --git a/tmp/d4a96434-5310-473e-a825-78af9fdc31e0_buggy.java b/tmp/33d27fb1-edb2-4980-8c62-15abe86ca24a_fixed.java
index f9a9b5b..ab7acb7 100644
--- a/tmp/d4a96434-5310-473e-a825-78af9fdc31e0_buggy.java
+++ b/tmp/33d27fb1-edb2-4980-8c62-15abe86ca24a_fixed.java
@@ -1,30 +1,66 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Check if the type to mock is an inner class
+        if (mockedProxyType.getEnclosingClass()!= null) {
+            // Get the outer instance if required
+            Object outerInstance = getOuterInstance(settings, mockedProxyType);
+            mockInstance = classInstantiator.instantiate(mockedProxyType, outerInstance);
+        } else if (settings.useConstructor()) {
+            // Try to instantiate using a no-arg constructor if useConstructor is enabled
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        } else {
+            // Fallback to the old behavior
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        if (mockedProxyType.getEnclosingClass()!= null) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'. " +
+                    "Please ensure that the outer instance has correct type and that the target class has a constructor with the outer instance as a parameter.",
+                    e);
+        } else if (settings.useConstructor()) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'. " +
+                    "Please ensure the type has a 0-arg constructor.",
+                    e);
+        } else {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }
+}
+
+// Helper method to get the outer instance if the type to mock is an inner class
+private Object getOuterInstance(MockCreationSettings<?> settings, Class<?> mockedProxyType) {
+    if (settings.getOuterInstance()!= null) {
+        if (mockedProxyType.getEnclosingClass().isInstance(settings.getOuterInstance())) {
+            return settings.getOuterInstance();
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'. " +
+                    "Please ensure that the outer instance has correct type.");
+        }
+    } else {
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'. " +
+                "Please provide the outer instance using the 'outerInstance' method in MockSettings.");
+    }
+}
\ No newline at end of file
