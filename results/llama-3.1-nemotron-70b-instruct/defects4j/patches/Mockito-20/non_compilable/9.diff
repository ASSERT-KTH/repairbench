diff --git a/tmp/ebfdd1f2-9fdd-4012-a97a-9293b8df1a05_buggy.java b/tmp/c1d03dc5-5200-4788-98a2-1d16d9a56554_fixed.java
index f9a9b5b..dafb871 100644
--- a/tmp/ebfdd1f2-9fdd-4012-a97a-9293b8df1a05_buggy.java
+++ b/tmp/c1d03dc5-5200-4788-98a2-1d16d9a56554_fixed.java
@@ -1,30 +1,45 @@
+/**
+ * Fixes issues with mocking inner classes, abstract classes, and classes with constructors.
+ * 
+ * @param settings MockCreationSettings for the mock object
+ * @param handler  MockHandler for the mock object
+ * @return a mock instance of type T
+ */
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
-                settings.getTypeToMock(),
-                settings.getExtraInterfaces()
-        );
-        T mockInstance = null;
+
+    Class<? extends T> mockedProxyType;
     try {
-            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        // Try to generate the mock type using the provided settings
+        mockedProxyType = cachingMockBytecodeGenerator.get(settings.getTypeToMock(), settings.getExtraInterfaces());
+    } catch (Exception e) {
+        // If generation fails, try to use the original type (for inner/abstract classes)
+        mockedProxyType = settings.getTypeToMock();
+    }
+
+    T mockInstance;
+    try {
+        // Instantiate the mock using the class instantiator
+        mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs());
+    } catch (NoSuchMethodException e) {
+        // Handle missing constructor for inner classes or abstract classes
+        if (settings.isUsingConstructor()) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", 
+                    new MockitoException("No suitable constructor found. Please ensure that the target class has a 0-arg constructor or use @InjectMocks to provide dependencies."));
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+        }
+    } catch (InstantiationException | IllegalAccessException e) {
+        // Handle instantiation failures
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+    }
+
+    // Set up the mock access and interceptor
     MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
     mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+    // Ensure the mock is assignable to the mocked type
     return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
-            throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
-                    "  class to mock : " + describeClass(mockedProxyType),
-                    "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
-                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
-                    "",
-                    "You might experience classloading issues, please ask the mockito mailing-list.",
-                    ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
-        }
 }
\ No newline at end of file
