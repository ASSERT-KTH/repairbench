diff --git a/tmp/d4aa396f-4ff0-45d0-bf3a-130b54c3c910_buggy.java b/tmp/056a7abb-eb58-4bbf-ab00-44239f60ef11_fixed.java
index f9a9b5b..055412f 100644
--- a/tmp/d4aa396f-4ff0-45d0-bf3a-130b54c3c910_buggy.java
+++ b/tmp/056a7abb-eb58-4bbf-ab00-44239f60ef11_fixed.java
@@ -1,30 +1,80 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Fix: Handle constructor invocation for mocked types
+        if (settings.useConstructor()) {
+            mockInstance = invokeConstructor(settings, mockedProxyType);
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        // Fix: Provide more informative error message for constructor-related issues
+        if (e.getCause() instanceof UnsupportedOperationException) {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "': " + e.getCause().getMessage(), e);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+        }
+    }
+}
+
+// New method to handle constructor invocation for mocked types
+private <T> T invokeConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) throws InstantiationException {
+    try {
+        Constructor<? extends T> constructor = getSuitableConstructor(settings, mockedProxyType);
+        return constructor.newInstance(getConstructorArgs(settings, constructor));
+    } catch (Exception e) {
+        throw new org.mockito.internal.creation.instance.InstantiationException(e);
+    }
+}
+
+// Helper method to find a suitable constructor for the mocked type
+private <T> Constructor<? extends T> getSuitableConstructor(MockCreationSettings<T> settings, Class<? extends T> mockedProxyType) {
+    if (settings.useConstructor() && settings.getOuterClassInstance()!= null && mockedProxyType.isMemberClass()) {
+        // Handle inner classes with outer instance
+        try {
+            return mockedProxyType.getConstructor(settings.getOuterClassInstance().getClass());
+        } catch (NoSuchMethodException e) {
+            throw new UnsupportedOperationException("Please ensure that the outer instance has correct type and that the target class has a constructor matching the outer instance type.");
+        }
+    } else {
+        // Default to no-arg constructor
+        try {
+            return mockedProxyType.getConstructor();
+        } catch (NoSuchMethodException e) {
+            throw new UnsupportedOperationException("0-arg constructor not found. Please ensure that the target class has a 0-arg constructor.");
+        }
+    }
+}
+
+// Helper method to provide arguments for the constructor invocation
+private Object[] getConstructorArgs(MockCreationSettings<?> settings, Constructor<?> constructor) {
+    if (constructor.getParameterCount() == 1 && settings.getOuterClassInstance()!= null) {
+        // Provide outer instance for inner classes
+        return new Object[]{settings.getOuterClassInstance()};
+    } else {
+        // No args for 0-arg constructors or non-inner classes
+        return new Object[0];
     }
 }
\ No newline at end of file
