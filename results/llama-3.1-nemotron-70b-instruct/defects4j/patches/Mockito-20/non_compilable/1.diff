diff --git a/tmp/1ce1b514-ccd9-4951-a6fb-2ac8d9dee8f5_buggy.java b/tmp/5fe4f884-cf2e-4ae9-aa63-90976098b264_fixed.java
index f9a9b5b..04265b1 100644
--- a/tmp/1ce1b514-ccd9-4951-a6fb-2ac8d9dee8f5_buggy.java
+++ b/tmp/5fe4f884-cf2e-4ae9-aa63-90976098b264_fixed.java
@@ -1,30 +1,51 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        if (settings.useConstructor()) {
+            Class<?>[] parameterTypes = mockedProxyType.getEnclosingClass()!= null 
+                   ? new Class<?>[]{mockedProxyType.getEnclosingClass()} 
+                    : new Class<?>[]{};
+            Object[] initargs = new Object[parameterTypes.length];
+            if (parameterTypes.length > 0) {
+                initargs[0] = settings.getOuterInstance();
+            }
+            mockInstance = classInstantiator.instantiate(mockedProxyType, parameterTypes, initargs);
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        if (e.getCause() instanceof NoSuchMethodException) {
+            String message = "Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'";
+            if (mockedProxyType.getEnclosingClass()!= null) {
+                message += ". Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.";
+            } else {
+                message += ". Please ensure that the type has a 0-arg constructor.";
+            }
+            throw new MockitoException(message, e);
+        } else {
+            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+        }
     }
 }
\ No newline at end of file
