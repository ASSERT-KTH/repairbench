diff --git a/tmp/8ccbb38a-92b3-409a-ba57-ad11ed677983_buggy.java b/tmp/8d6d8c12-8409-49a0-90c0-1cbba4efab42_fixed.java
index 7b89a27..355af69 100644
--- a/tmp/8ccbb38a-92b3-409a-ba57-ad11ed677983_buggy.java
+++ b/tmp/8d6d8c12-8409-49a0-90c0-1cbba4efab42_fixed.java
@@ -1,76 +1,83 @@
 /**
  * Determines whether a qualified name is inferred.
  * NOTE(nicksantos): Determining whether a property is declared or not
  * is really really obnoxious.
  *
  * The problem is that there are two (equally valid) coding styles:
  *
  * (function() {
  *   /* The authoritative definition of goog.bar. /
  *   goog.bar = function() {};
  * })();
  *
  * function f() {
  *   goog.bar();
  *   /* Reset goog.bar to a no-op. /
  *   goog.bar = function() {};
  * }
  *
  * In a dynamic language with first-class functions, it's very difficult
  * to know which one the user intended without looking at lots of
  * contextual information (the second example demonstrates a small case
  * of this, but there are some really pathological cases as well).
  *
  * The current algorithm checks if either the declaration has
  * JsDoc type information, or @const with a known type,
  * or a function literal with a name we haven't seen before.
  */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
   // Prototypes of constructors and interfaces are always declared.
   if (qName!= null && qName.endsWith(".prototype")) {
+    // **FIX**: Also consider the case when the Property 'prototype' is being reassigned.
+    if (n.getParent().isAssign()) {
+      Node lhs = n.getParent().getFirstChild();
+      if (lhs.isGetProp() && lhs.getString().equals("prototype")) {
+        return true; // Reassignment of 'prototype' property is inferred.
+      }
+    }
     return false;
   }
 
   boolean inferred = true;
   if (info!= null) {
     inferred =!(info.hasType()
         || info.hasEnumParameterType()
         || (isConstantSymbol(info, n) && valueType!= null
             &&!valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue!= null && rhsValue.isFunction()) {
     if (info!= null) {
       return false;
     } else if (!scope.isDeclared(qName, false) &&
         n.isUnscopedQualifiedName()) {
 
       // Check if this is in a conditional block.
       // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
           !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
       // Check if this is assigned in an inner scope.
       // Functions assigned in inner scopes are inferred.
       AstFunctionContents contents =
           getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
          !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
