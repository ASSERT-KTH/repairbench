diff --git a/tmp/d7c0680d-f510-48fa-b1ea-2f8d25423b98_buggy.java b/tmp/2c5adb56-64ba-413e-9e3f-051d7a4d760f_fixed.java
index 0bbaab0..5e26f6b 100644
--- a/tmp/d7c0680d-f510-48fa-b1ea-2f8d25423b98_buggy.java
+++ b/tmp/2c5adb56-64ba-413e-9e3f-051d7a4d760f_fixed.java
@@ -1,62 +1,78 @@
 /**
  * Parses a datetime from the given text, at the given position, saving the
  * result into the fields of the given ReadWritableInstant. If the parse
  * succeeds, the return value is the new text position. Note that the parse
  * may succeed without fully reading the text and in this case those fields
  * that were read will be set.
  * <p>
  * Only those fields present in the string will be changed in the specified
  * instant. All other fields will remain unaltered. Thus if the string only
  * contains a year and a month, then the day and time will be retained from
  * the input instant. If this is not the behaviour you want, then reset the
  * fields before calling this method, or use {@link #parseDateTime(String)}
  * or {@link #parseMutableDateTime(String)}.
  * <p>
  * If it fails, the return value is negative, but the instant may still be
  * modified. To determine the position where the parse failed, apply the
  * one's complement operator (~) on the return value.
  * <p>
  * This parse method ignores the {@link #getDefaultYear() default year} and
  * parses using the year from the supplied instant based on the chronology
  * and time-zone of the supplied instant.
  * <p>
  * The parse will use the chronology of the instant.
  *
  * @param instant  an instant that will be modified, not null
  * @param text  the text to parse
  * @param position  position to start parsing from
  * @return new position, negative value means parse failed -
  *  apply complement operator (~) to get position of failure
  * @throws UnsupportedOperationException if parsing is not supported
  * @throws IllegalArgumentException if the instant is null
  * @throws IllegalArgumentException if any field is out of range
  */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
     
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
     chrono = selectChronology(chrono);
     int defaultYear = chrono.year().get(instantLocal);
     
+    // Create a temporary chronology to allow for lenient date parsing
+    Chronology lenientChrono = chrono.withZone(chrono.getZone()).withLeapDayParsingMode(LeapDayParsingMode.LENIENT);
+    
     DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
+        instantLocal, lenientChrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
+    
+    // Validate the parsed date with the original chronology
+    if (newPos >= 0) {
+        try {
+            chrono.year().set(bucket.getInstant(), bucket.getYear());
+            chrono.monthOfYear().set(bucket.getInstant(), bucket.getMonth());
+            chrono.dayOfMonth().set(bucket.getInstant(), bucket.getDay());
+        } catch (IllegalArgumentException e) {
+            // If validation fails, return an error
+            return ~position;
+        }
+    }
+    
     instant.setMillis(bucket.computeMillis(false, text));
     if (iOffsetParsed && bucket.getOffsetInteger()!= null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone()!= null) {
         chrono = chrono.withZone(bucket.getZone());
     }
     instant.setChronology(chrono);
     if (iZone!= null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
\ No newline at end of file
