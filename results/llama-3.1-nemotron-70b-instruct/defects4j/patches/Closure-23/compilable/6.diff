diff --git a/tmp/50aad0a1-26a3-4ef8-8163-f22341aab9e6_buggy.java b/tmp/8d7d5175-9661-41bd-8c5c-f6084ec63890_fixed.java
index cfdcd9c..8127b36 100644
--- a/tmp/50aad0a1-26a3-4ef8-8163-f22341aab9e6_buggy.java
+++ b/tmp/8d7d5175-9661-41bd-8c5c-f6084ec63890_fixed.java
@@ -1,51 +1,51 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
+    if (intIndex < 0 || intIndex >= left.getChildCount()) { // Fix: also check for index >= length
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node current = left.getFirstChild();
     Node elem = null;
     for (int i = 0; current!= null && i < intIndex; i++) {
         elem = current;
 
       current = current.getNext();
     }
 
-    if (elem == null) {
+    if (elem == null) { // This block should never be reached due to the above check
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
