diff --git a/tmp/6367402c-77f2-468a-a2f0-0e43f90d8b64_buggy.java b/tmp/09aab5ef-c493-4e43-833c-f3559e3a81a8_fixed.java
index cfdcd9c..308763c 100644
--- a/tmp/6367402c-77f2-468a-a2f0-0e43f90d8b64_buggy.java
+++ b/tmp/09aab5ef-c493-4e43-833c-f3559e3a81a8_fixed.java
@@ -1,51 +1,67 @@
+/**
+ * Attempts to fold a GETELEM (array access) node if the index is a constant
+ * and within bounds of the array literal.
+ * 
+ * @param n     the GETELEM node to try to fold
+ * @param left  the array literal node
+ * @param right the index node
+ * @return the folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
-    if (intIndex != index) {
-      error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+    if (intIndex!= index || intIndex < 0) {
+      error((intIndex < 0)? INDEX_OUT_OF_BOUNDS_ERROR : INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Count the actual number of elements in the array literal
+    int elemCount = 0;
     Node current = left.getFirstChild();
+    while (current!= null) {
+      if (!current.isEmpty()) {
+        elemCount++;
+      }
+      current = current.getNext();
+    }
+
+    if (intIndex >= elemCount) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      return n;
+    }
+
+    current = left.getFirstChild();
     Node elem = null;
     for (int i = 0; current!= null && i < intIndex; i++) {
+      if (!current.isEmpty()) {
         elem = current;
-
-      current = current.getNext();
+        if (i == intIndex - 1) break;
       }
-
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+      current = current.getNext();
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
