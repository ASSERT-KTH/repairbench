diff --git a/tmp/8e1384b7-b859-406e-b1e8-e29d0ea14210_buggy.java b/tmp/7278b096-0a3e-4c33-808a-365494510467_fixed.java
index cfdcd9c..eccac33 100644
--- a/tmp/8e1384b7-b859-406e-b1e8-e29d0ea14210_buggy.java
+++ b/tmp/7278b096-0a3e-4c33-808a-365494510467_fixed.java
@@ -1,51 +1,48 @@
+/**
+ * Tries to fold a GETELEM node when the array is a literal and the index is a number.
+ * 
+ * @param n    the GETELEM node to try to fold
+ * @param left the array literal node
+ * @param right the index node
+ * @return the potentially folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
-      current = current.getNext();
-    }
-
-    if (elem == null) {
+    // Fix: Check if intIndex is within bounds before iterating over the array
+    if (intIndex < 0 || intIndex >= left.getChildCount()) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    Node elem = left.getChildAt(intIndex);
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
