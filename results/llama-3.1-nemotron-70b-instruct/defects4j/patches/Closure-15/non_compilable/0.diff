diff --git a/tmp/003dd2c0-7b24-46bc-bbcb-0b3d78182256_buggy.java b/tmp/4772a678-1c5d-4e23-b204-a07a53de66f6_fixed.java
index b56897c..31c00a7 100644
--- a/tmp/003dd2c0-7b24-46bc-bbcb-0b3d78182256_buggy.java
+++ b/tmp/4772a678-1c5d-4e23-b204-a07a53de66f6_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
+  // Special handling for 'in' operator, which is not considered side-effect free
+  // when its left-hand side is a dependent variable
+  if (n.isBinaryOp(Token.IN) && NodeUtil.isDependentVariable(n.getFirstChild())) {
+    return true;
+  }
+
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
 
   for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
