diff --git a/tmp/652e93b8-bf08-4704-8c32-7ee533b2d6db_buggy.java b/tmp/732210f5-88b3-442f-bd50-c107cee05b1a_fixed.java
index b56897c..74f1a87 100644
--- a/tmp/652e93b8-bf08-4704-8c32-7ee533b2d6db_buggy.java
+++ b/tmp/732210f5-88b3-442f-bd50-c107cee05b1a_fixed.java
@@ -1,27 +1,40 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
+  // Handle 'in' operator as a special case, as it has side effects when 
+  // used with a property that is later deleted or modified.
+  if (n.isBinaryOperation Token.IN) {
+    Node left = n.getFirstChild();
+    Node right = left.getNext();
+    for (Node c = n.getNext(); c!= null; c = c.getPrev()) {
+      if ((c.isDelete() && c.getFirstChild().matchesName(left)) ||
+          (c.isAssignment() && c.getFirstChild().matchesName(left))) {
+        return true;
+      }
+    }
+  }
+
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
 
   for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
