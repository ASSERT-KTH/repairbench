diff --git a/tmp/600be089-e540-4fcf-8eeb-ff0de41d9398_buggy.java b/tmp/3baeb57d-a7fb-48d3-a62c-fb0cfae91901_fixed.java
index b56897c..85db481 100644
--- a/tmp/600be089-e540-4fcf-8eeb-ff0de41d9398_buggy.java
+++ b/tmp/3baeb57d-a7fb-48d3-a62c-fb0cfae91901_fixed.java
@@ -1,27 +1,35 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
+  // Check for 'in' operator as well, since it's not side-effect free
+  // when the right-hand side is a non-constant object literal
+  if (n.is_BINARY_OPERATOR() && n.getString().equals("in")) {
+    Node rightHandSide = n.getChildAtIndex(1);
+    if (rightHandSide.isOBJECTLIT() &&!NodeUtil.isConstantObjectLiteral(rightHandSide)) {
+      return true;
+    }
+  }
+
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
   for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
