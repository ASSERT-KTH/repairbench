diff --git a/tmp/9d7daa10-4db2-428e-90b0-92169a0bb4ca_buggy.java b/tmp/e0ae5e27-c224-4da5-acaf-372b5bcc780e_fixed.java
index 39981f0..ebe1e5c 100644
--- a/tmp/9d7daa10-4db2-428e-90b0-92169a0bb4ca_buggy.java
+++ b/tmp/e0ae5e27-c224-4da5-acaf-372b5bcc780e_fixed.java
@@ -1,65 +1,75 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
   // The best type name is the actual type name.
 
   // If we're analyzing a GETPROP, the property may be inherited by the
   // prototype chain. So climb the prototype chain and find out where
   // the property was originally defined.
   if (n.isGetProp()) {
     ObjectType objectType = getJSType(n.getFirstChild()).dereference();
     if (objectType!= null) {
       String propName = n.getLastChild().getString();
       if (objectType.getConstructor()!= null &&
           objectType.getConstructor().isInterface()) {
         objectType = FunctionType.getTopDefiningInterface(
             objectType, propName);
       } else {
         // classes
         while (objectType!= null &&!objectType.hasOwnProperty(propName)) {
           objectType = objectType.getImplicitPrototype();
         }
       }
 
       // Don't show complex function names or anonymous types.
       // Instead, try to get a human-readable type name.
       if (objectType!= null &&
           (objectType.getConstructor()!= null ||
            objectType.isFunctionPrototypeType())) {
         return objectType.toString() + "." + propName;
       } 
     }
+    
+    // FIX: Fallback to property owner's type when property not found
+    JSType ownerType = getJSType(n.getFirstChild());
+    if (dereference) {
+      ObjectType dereferenced = ownerType.dereference();
+      if (dereferenced!= null) {
+        ownerType = dereferenced;
+      }
+    }
+    return ownerType.toString() + "." + n.getLastChild().getString();
   }
 
   JSType type = getJSType(n);
   if (dereference) {
     ObjectType dereferenced = type.dereference();
     if (dereferenced!= null) {
       type = dereferenced;
     }
   }
   if (type.isFunctionPrototypeType() ||
       (type.toObjectType()!= null &&
        type.toObjectType().getConstructor()!= null)) {
     return type.toString();
   }
   String qualifiedName = n.getQualifiedName();
   if (qualifiedName!= null) {
     return qualifiedName;
   } else if (type.isFunctionType()) {
     // Don't show complex function names.
     return "function";
   } else {
     return type.toString();
   }
 }
\ No newline at end of file
