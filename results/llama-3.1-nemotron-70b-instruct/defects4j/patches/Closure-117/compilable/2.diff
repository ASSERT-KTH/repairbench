diff --git a/tmp/25dda76d-ecf1-4e84-bc3b-450ebb1dddc3_buggy.java b/tmp/9a756847-8969-423a-bd3d-04074add8a89_fixed.java
index 39981f0..c629756 100644
--- a/tmp/25dda76d-ecf1-4e84-bc3b-450ebb1dddc3_buggy.java
+++ b/tmp/9a756847-8969-423a-bd3d-04074add8a89_fixed.java
@@ -1,65 +1,71 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType!= null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor()!= null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType!= null &&!objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType!= null &&
             (objectType.getConstructor()!= null ||
              objectType.isFunctionPrototypeType())) {
+          // FIX: Get the original type name from thewjstype of the property's declaring node
+          Node declaringNode = objectType.getPropertyNode(propName);
+          if (declaringNode!= null) {
+            return getReadableJSTypeName(declaringNode, false) + "." + propName;
+          } else {
             return objectType.toString() + "." + propName;
           }
         }
       }
+    }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced!= null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType()!= null &&
          type.toObjectType().getConstructor()!= null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName!= null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
 }
\ No newline at end of file
