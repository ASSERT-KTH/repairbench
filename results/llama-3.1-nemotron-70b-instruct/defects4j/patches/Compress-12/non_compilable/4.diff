diff --git a/tmp/b5088632-7cf9-4249-8976-1158f1e698b5_buggy.java b/tmp/83d1282f-04cf-4f11-886f-0bd13f5edb28_fixed.java
index b5a206b..2cef00f 100644
--- a/tmp/b5088632-7cf9-4249-8976-1158f1e698b5_buggy.java
+++ b/tmp/83d1282f-04cf-4f11-886f-0bd13f5edb28_fixed.java
@@ -1,80 +1,89 @@
 /**
  * Get the next entry in this tar archive. This will skip
  * over any remaining data in the current entry, if there
  * is one, and place the input stream at the header of the
  * next entry, and read the header and instantiate a new
  * TarEntry from the header bytes and return that entry.
  * If there are no more entries in the archive, null will
  * be returned to indicate that the end of the archive has
  * been reached.
  *
  * @return The next TarEntry in the archive, or null.
  * @throws IOException on error
  */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry!= null) {
         long numToSkip = entrySize - entryOffset;
 
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
 
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
 
+    if (headerBuf == null || headerBuf.length < TarArchiveEntry.RECORDSIZE) {
+        throw new IOException("Truncated tar archive");
+    }
+
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
+    // Additional validation for Pax Header and GNU Long Name Entry
     if (currEntry.isGNULongNameEntry()) {
+        if (entrySize < TarArchiveEntry.RECORDSIZE) {
+            throw new IllegalArgumentException("Invalid GNU Long Name Entry size");
+        }
         // read in the name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
-            getNextEntry();
-            if (currEntry == null) {
+        TarArchiveEntry nextEntry = getNextTarEntry();
+        if (nextEntry == null) {
             // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
         // remove trailing null terminator
         if (longName.length() > 0
             && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
+        return nextEntry; // Return the actual next entry
     }
 
     if (currEntry.isPaxHeader()){ // Process Pax headers
         paxHeaders();
     }
 
     if (currEntry.isGNUSparse()){ // Process sparse files
         readGNUSparse();
     }
 
     // If the size of the next element in the archive has changed
     // due to a new size being reported in the posix header
     // information, we update entrySize here so that it contains
     // the correct value.
     entrySize = currEntry.getSize();
     return currEntry;
 }
\ No newline at end of file
