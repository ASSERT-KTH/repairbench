diff --git a/tmp/494527b4-3757-47dc-9a05-52cd544636d2_buggy.java b/tmp/c3adcebf-fbe6-4698-a682-e7ae71bfc307_fixed.java
index b5a206b..5c8bf3a 100644
--- a/tmp/494527b4-3757-47dc-9a05-52cd544636d2_buggy.java
+++ b/tmp/c3adcebf-fbe6-4698-a682-e7ae71bfc307_fixed.java
@@ -1,80 +1,102 @@
 /**
  * Get the next entry in this tar archive. This will skip
  * over any remaining data in the current entry, if there
  * is one, and place the input stream at the header of the
  * next entry, and read the header and instantiate a new
  * TarEntry from the header bytes and return that entry.
  * If there are no more entries in the archive, null will
  * be returned to indicate that the end of the archive has
  * been reached.
  *
  * @return The next TarEntry in the archive, or null.
  * @throws IOException on error
  */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry!= null) {
         long numToSkip = entrySize - entryOffset;
 
         while (numToSkip > 0) {
             long skipped = skip(numToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip current tar entry");
             }
             numToSkip -= skipped;
         }
 
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
     if (hasHitEOF) {
         currEntry = null;
         return null;
     }
 
+    // Validate header before creating TarArchiveEntry
+    if (!isValidTarHeader(headerBuf)) {
+        throw new IOException("Invalid tar header: " + getInvalidTarHeaderMessage(headerBuf));
+    }
+
     currEntry = new TarArchiveEntry(headerBuf);
     entryOffset = 0;
     entrySize = currEntry.getSize();
 
     if (currEntry.isGNULongNameEntry()) {
         // read in the name
         StringBuffer longName = new StringBuffer();
         byte[] buf = new byte[SMALL_BUFFER_SIZE];
         int length = 0;
         while ((length = read(buf)) >= 0) {
             longName.append(new String(buf, 0, length));
         }
         getNextEntry();
         if (currEntry == null) {
             // Bugzilla: 40334
             // Malformed tar file - long entry name not followed by entry
             return null;
         }
         // remove trailing null terminator
         if (longName.length() > 0
             && longName.charAt(longName.length() - 1) == 0) {
             longName.deleteCharAt(longName.length() - 1);
         }
         currEntry.setName(longName.toString());
     }
 
     if (currEntry.isPaxHeader()){ // Process Pax headers
         paxHeaders();
     }
 
     if (currEntry.isGNUSparse()){ // Process sparse files
         readGNUSparse();
     }
 
     // If the size of the next element in the archive has changed
     // due to a new size being reported in the posix header
     // information, we update entrySize here so that it contains
     // the correct value.
     entrySize = currEntry.getSize();
     return currEntry;
 }
+
+// New helper method to validate tar header
+private boolean isValidTarHeader(byte[] headerBuf) {
+    // Assuming TarArchiveEntry uses the first 8 bytes for key information
+    // and the first byte at offset 2 should not be NUL (0)
+    return headerBuf.length >= 8 && headerBuf[2]!= 0;
+}
+
+// New helper method to generate an error message for invalid tar headers
+private String getInvalidTarHeaderMessage(byte[] headerBuf) {
+    if (headerBuf.length < 8) {
+        return "Header length is less than expected (8 bytes)";
+    } else {
+        return "Invalid byte " + headerBuf[2] + " at offset 2 in '" 
+               + new String(headerBuf, 0, Math.min(headerBuf.length, 8)) + "' len=" + headerBuf.length;
+    }
+}
\ No newline at end of file
