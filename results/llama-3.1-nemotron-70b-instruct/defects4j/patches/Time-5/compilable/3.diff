diff --git a/tmp/5b5f6fcc-52bb-4d33-b015-2b2db18d6c00_buggy.java b/tmp/0e5730c0-fefb-4181-9cf2-b0e3e43a1815_fixed.java
index dbda381..a285550 100644
--- a/tmp/5b5f6fcc-52bb-4d33-b015-2b2db18d6c00_buggy.java
+++ b/tmp/0e5730c0-fefb-4181-9cf2-b0e3e43a1815_fixed.java
@@ -1,54 +1,80 @@
 /**
  * Normalizes this period using standard rules, assuming a 12 month year,
  * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
  * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
  * 
  * @param type  the period type of the new period, null means standard type
  * @return a normalized period equivalent to this period
  * @throws ArithmeticException if any field is too large to be represented
  * @throws UnsupportedOperationException if this period contains non-zero
  *  years or months but the specified period type does not support them
  * @since 1.5
  */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    
     int years = getYears();
     int months = getMonths();
+    int weeks = getWeeks();
+    int days = getDays();
+    int hours = getHours();
+    int minutes = getMinutes();
+    int seconds = getSeconds();
+    
+    // Normalize years and months
+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {
         if (years!= 0 || months!= 0) {
             years = FieldUtils.safeAdd(years, months / 12);
             months = months % 12;
-            if (years != 0) {
+        }
+    } else {
+        // If years/months are not supported, reset them to 0
+        years = 0;
+        months = 0;
+    }
+    
+    // Normalize weeks and days
+    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {
+        if (weeks!= 0 || days!= 0) {
+            int totalDays = FieldUtils.safeAdd(FieldUtils.safeMultiply(weeks, 7), days);
+            weeks = totalDays / 7;
+            days = totalDays % 7;
+        }
+    } else {
+        // If weeks/days are not supported, reset them to 0
+        weeks = 0;
+        days = 0;
+    }
+    
+    // Create the result period, ensuring only supported fields are set
+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    if (type.isSupported(DurationFieldType.years())) {
         result = result.withYears(years);
     }
-            if (months != 0) {
+    if (type.isSupported(DurationFieldType.months())) {
         result = result.withMonths(months);
     }
+    if (type.isSupported(DurationFieldType.weeks())) {
+        result = result.withWeeks(weeks);
     }
+    if (type.isSupported(DurationFieldType.days())) {
+        result = result.withDays(days);
+    }
+    if (type.isSupported(DurationFieldType.hours())) {
+        result = result.withHours(hours);
+    }
+    if (type.isSupported(DurationFieldType.minutes())) {
+        result = result.withMinutes(minutes);
+    }
+    if (type.isSupported(DurationFieldType.seconds())) {
+        result = result.withSeconds(seconds);
+    }
+    
     return result;
 }
\ No newline at end of file
