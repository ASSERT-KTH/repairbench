diff --git a/tmp/ab6a275f-21a6-4e24-933b-db42c475bf85_buggy.java b/tmp/1df4df51-0f15-41da-b017-40435a8185d4_fixed.java
index 08e51e4..ca34f88 100644
--- a/tmp/ab6a275f-21a6-4e24-933b-db42c475bf85_buggy.java
+++ b/tmp/1df4df51-0f15-41da-b017-40435a8185d4_fixed.java
@@ -1,16 +1,35 @@
 /**
  * <p>Reduce the fraction to the smallest values for the numerator and
  * denominator, returning the result.</p>
  * 
  * <p>For example, if this fraction represents 2/4, then the result
  * will be 1/2.</p>
  *
  * @return a new reduced fraction instance, or this if no simplification possible
  */
 public Fraction reduce() {
+    if (numerator == 0) {
+        return this; // already in simplest form (0/x)
+    }
+
     int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
     if (gcd == 1) {
+        return this; // already in simplest form
+    }
+    
+    int newNumerator = numerator / gcd;
+    int newDenominator = denominator / gcd;
+    
+    // Ensure the resulting fraction has a positive denominator
+    if (newDenominator < 0) {
+        newNumerator = -newNumerator;
+        newDenominator = -newDenominator;
+    }
+    
+    // Return this if the reduction doesn't change the values (aside from sign)
+    if (Math.abs(newNumerator) == Math.abs(numerator) && Math.abs(newDenominator) == Math.abs(denominator)) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    
+    return Fraction.getFraction(newNumerator, newDenominator);
 }
\ No newline at end of file
