diff --git a/tmp/d5a186d8-7a3f-47a2-94c4-040c0b735f4e_buggy.java b/tmp/c3d32387-3e1d-4bb7-8a96-f94f74947f89_fixed.java
index 08e51e4..b25b355 100644
--- a/tmp/d5a186d8-7a3f-47a2-94c4-040c0b735f4e_buggy.java
+++ b/tmp/c3d32387-3e1d-4bb7-8a96-f94f74947f89_fixed.java
@@ -1,16 +1,33 @@
 /**
  * <p>Reduce the fraction to the smallest values for the numerator and
  * denominator, returning the result.</p>
  * 
  * <p>For example, if this fraction represents 2/4, then the result
  * will be 1/2.</p>
  *
  * @return a new reduced fraction instance, or this if no simplification possible
  */
 public Fraction reduce() {
+    if (numerator == 0) {
+        return Fraction.ZERO; // immediately return zero fraction for 0/anything
+    }
+    
     int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
     if (gcd == 1) {
+        // preserve the original sign if the fraction is already in simplest form
+        if (numerator < 0 ^ denominator < 0) {
+            return this; // return original if signs are different
+        }
+        // if both negative, return the positive equivalent
+        if (numerator < 0 && denominator < 0) {
+            return Fraction.getFraction(-numerator, -denominator);
+        }
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    // reduce and preserve the sign of the original numerator
+    int newNumerator = numerator / gcd;
+    if ((numerator < 0 && denominator > 0) || (numerator > 0 && denominator < 0)) {
+        newNumerator = -newNumerator; // adjust sign if necessary
+    }
+    return Fraction.getFraction(newNumerator, Math.abs(denominator / gcd));
 }
\ No newline at end of file
