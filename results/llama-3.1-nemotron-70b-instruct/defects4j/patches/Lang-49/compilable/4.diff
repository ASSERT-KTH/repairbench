diff --git a/tmp/bcd811ae-28da-4db6-b7b9-dbc66d714706_buggy.java b/tmp/6cdf0d07-0c75-40c3-81ba-d9aba6dae587_fixed.java
index 08e51e4..34d4385 100644
--- a/tmp/bcd811ae-28da-4db6-b7b9-dbc66d714706_buggy.java
+++ b/tmp/6cdf0d07-0c75-40c3-81ba-d9aba6dae587_fixed.java
@@ -1,16 +1,34 @@
 /**
  * <p>Reduce the fraction to the smallest values for the numerator and
  * denominator, returning the result.</p>
  * 
  * <p>For example, if this fraction represents 2/4, then the result
  * will be 1/2.</p>
  *
  * @return a new reduced fraction instance, or this if no simplification possible
  */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator)); // Calculate GCD for absolute values of both numerator and denominator
     if (gcd == 1) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    int newNumerator = numerator / gcd;
+    int newDenominator = denominator / gcd;
+    
+    // Ensure the sign is carried by the numerator
+    if ((numerator < 0) ^ (denominator < 0)) { // XOR to check if only one is negative
+        newNumerator = -Math.abs(newNumerator);
+    } else {
+        newNumerator = Math.abs(newNumerator);
+    }
+    newDenominator = Math.abs(newDenominator);
+
+    // Handle special case where reduced fraction is zero
+    if (newNumerator == 0) {
+        return Fraction.ZERO;
+    } else if (newNumerator == numerator && newDenominator == denominator) {
+        return this; // No simplification occurred, return original
+    } else {
+        return Fraction.getFraction(newNumerator, newDenominator);
+    }
 }
\ No newline at end of file
