diff --git a/tmp/481427e3-f282-4014-8f70-a33f9403d177_buggy.java b/tmp/37cce57d-e967-441c-8791-14b5ca4941c0_fixed.java
index 08e51e4..52e7be6 100644
--- a/tmp/481427e3-f282-4014-8f70-a33f9403d177_buggy.java
+++ b/tmp/37cce57d-e967-441c-8791-14b5ca4941c0_fixed.java
@@ -1,16 +1,30 @@
 /**
  * <p>Reduce the fraction to the smallest values for the numerator and
  * denominator, returning the result.</p>
  * 
  * <p>For example, if this fraction represents 2/4, then the result
  * will be 1/2.</p>
  *
  * @return a new reduced fraction instance, or this if no simplification possible
  */
 public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
+    if (numerator == 0) {
+        return Fraction.ZERO; // handle zero numerator case explicitly
+    }
+    
+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
     if (gcd == 1) {
+        return this; // no simplification needed
+    }
+    
+    // Preserve the original sign
+    int newNumerator = (int) Math.copySign(numerator / gcd, numerator);
+    int newDenominator = (int) Math.copySign(denominator / gcd, denominator);
+    
+    // If the result is equivalent to this, return this for consistency with expectations
+    if (newNumerator == numerator && newDenominator == denominator) {
         return this;
     }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+    
+    return Fraction.getFraction(newNumerator, newDenominator);
 }
\ No newline at end of file
