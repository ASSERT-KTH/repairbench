diff --git a/tmp/51026d5d-c5ec-48a9-b74f-d38e0662876a_buggy.java b/tmp/92d31900-15b8-4909-9bdc-0068819119f1_fixed.java
index 5abdeb5..f563d5d 100644
--- a/tmp/51026d5d-c5ec-48a9-b74f-d38e0662876a_buggy.java
+++ b/tmp/92d31900-15b8-4909-9bdc-0068819119f1_fixed.java
@@ -1,29 +1,39 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
          !(parent.isAssign() && 
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            (parent.getFirstChild() == n || // lhs of assignment
+             isRhsOfAssignInConditional(parent, n)))) { // rhs of assignment in conditional
         numUsesWithinCfgNode++;
       }
     }
 
+    /**
+     * Checks if the given node is the RHS of an assignment within a conditional.
+     * 
+     * @param parent the parent node (expected to be an Assign node)
+     * @param n the node to check (expected to be a Name node with the varName)
+     * @return true if the node is the RHS of an assignment within a conditional
+     */
+    private boolean isRhsOfAssignInConditional(Node parent, Node n) {
+      Node grandParent = parent.getParent();
+      return grandParent!= null && 
+             (grandParent.isCond() || grandParent.isTernary()) && 
+             parent.getChildCount() > 2 && 
+             parent.getChildAtIndex(parent.getChildCount() - 1) == n;
+    }
+
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
