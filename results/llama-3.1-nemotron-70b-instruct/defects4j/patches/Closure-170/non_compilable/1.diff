diff --git a/tmp/92707ee8-91b4-481f-93ba-7920c00cc35f_buggy.java b/tmp/5325369c-3302-4e8d-aab4-1bc975bd3c3a_fixed.java
index 5abdeb5..4313968 100644
--- a/tmp/92707ee8-91b4-481f-93ba-7920c00cc35f_buggy.java
+++ b/tmp/5325369c-3302-4e8d-aab4-1bc975bd3c3a_fixed.java
@@ -1,29 +1,24 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
          !(parent.isAssign() && 
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            ((parent.getFirstChild() == n) ||  // LHS of assignment
+             (parent.getFirstChild().isChain() && parent.getFirstChild().getLastChild() == n))))) {  // LHS of chained assignment within conditional
           numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
