diff --git a/tmp/ec1e1707-1159-4e3f-86ee-acae615275f8_buggy.java b/tmp/8efe2b16-0bc5-4710-b876-621ff60d57b2_fixed.java
index 5abdeb5..e90b0c5 100644
--- a/tmp/ec1e1707-1159-4e3f-86ee-acae615275f8_buggy.java
+++ b/tmp/8efe2b16-0bc5-4710-b876-621ff60d57b2_fixed.java
@@ -1,29 +1,26 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
+          // Exclude variable uses that are part of an assignment's LHS,
+          // unless the assignment is a top-level statement in the CFG node.
          !(parent.isAssign() && 
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            (parent.getFirstChild() == n) && 
+           !t.isToplevelNode(parent, cfgNode))) {
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
