diff --git a/tmp/c2123ec1-0f60-4562-86ef-341a3fdcd807_buggy.java b/tmp/e67f2023-d1cd-4545-b86b-aa69e606c9a0_fixed.java
index 5abdeb5..0854991 100644
--- a/tmp/c2123ec1-0f60-4562-86ef-341a3fdcd807_buggy.java
+++ b/tmp/e67f2023-d1cd-4545-b86b-aa69e606c9a0_fixed.java
@@ -1,29 +1,54 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
          !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+             (parent.getFirstChild() == n || 
+              **isConditionalParent(parent, n)**))) {
+        // Don't count lhs of top-level assignment chain or conditional assignments
         numUsesWithinCfgNode++;
       }
     }
 
+    /**
+     * Checks if the parent node is a conditional statement (e.g.,?:, ||, &&, *, etc.)
+     * that contains an assignment to the variable as one of its operands.
+     */
+    private boolean isConditionalParent(Node parent, Node n) {
+      switch (parent.getToken()) {
+        case QUEST:
+        case OR:
+        case AND:
+        case MUL:
+          // Check if the variable assignment is within the conditional operands
+          return **containsAssignOperand(parent, n)**;
+        default:
+          return false;
+      }
+    }
+
+    /**
+     * Checks if the parent node's operands contain an assignment to the variable.
+     */
+    private boolean containsAssignOperand(Node parent, Node n) {
+      for (Node child = parent.getFirstChild(); child!= null; child = child.getNext()) {
+        if (child.isAssign() && child.getFirstChild() == n) {
+          return true;
+        }
+      }
+      return false;
+    }
+
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
