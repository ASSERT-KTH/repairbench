diff --git a/tmp/5290ad1a-2c8a-44fc-a788-01bcd8be562a_buggy.java b/tmp/52dfff20-14d1-4dd2-be97-afc6fdb770aa_fixed.java
index 5abdeb5..970f5c6 100644
--- a/tmp/5290ad1a-2c8a-44fc-a788-01bcd8be562a_buggy.java
+++ b/tmp/52dfff20-14d1-4dd2-be97-afc6fdb770aa_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
        !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+         (parent.getFirstChild() == n || 
+          // Additional check to handle nested expressions (e.g., conditional, logical)
+          (parent.getParent()!= null && parent.getParent().isExprResult() && 
+           (parent.getParent().getFirstChild() == parent))))) {
+          // Don't count lhs of top-level or nested assignment chain
           numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
