diff --git a/tmp/1b50debc-2fdb-45e2-b60b-058f2e5bc7a1_buggy.java b/tmp/67859627-9db9-436b-8284-8f4f4ce9f122_fixed.java
index 5abdeb5..00907cf 100644
--- a/tmp/1b50debc-2fdb-45e2-b60b-058f2e5bc7a1_buggy.java
+++ b/tmp/67859627-9db9-436b-8284-8f4f4ce9f122_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+         !(isTopLevelAssign(parent, n, cfgNode))) {
         numUsesWithinCfgNode++;
       }
     }
 
+    /**
+     * Checks if the given node is the LHS of a top-level assignment chain
+     * within the provided cfgNode.
+     */
+    private boolean isTopLevelAssign(Node parent, Node n, Node cfgNode) {
+      return parent.isAssign() && parent.getFirstChild() == n &&
+          (cfgNode == parent || cfgNode.getFirstChild() == parent);
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
