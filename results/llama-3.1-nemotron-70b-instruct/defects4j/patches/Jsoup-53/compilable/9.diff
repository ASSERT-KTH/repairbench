diff --git a/tmp/229786b5-2da1-4f43-8725-6c854a832123_buggy.java b/tmp/876c0b0f-cc6a-48da-be75-f7b3055c2ec7_fixed.java
index fecb896..c6d3008 100644
--- a/tmp/229786b5-2da1-4f43-8725-6c854a832123_buggy.java
+++ b/tmp/876c0b0f-cc6a-48da-be75-f7b3055c2ec7_fixed.java
@@ -1,34 +1,58 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        
+        // Handle quotes
+        if (!inQuote && (c.equals('\'') || c.equals('"'))) {
+            inQuote = true;
+            quoteChar = c;
+        } else if (inQuote && c.equals(quoteChar)) {
+            inQuote = false;
+        }
+
+        // Ignore escapes if not at start of sequence or if in quote
+        if (last == ESC && (start == -1 || inQuote)) {
+            last = c;
+            continue;
+        }
+
+        // Update start if not yet set and not in quote
+        if (start == -1 &&!inQuote) {
+            start = pos;
+        }
+
+        // Update depth if not in quote and not escaped
+        if (!inQuote && last!= ESC) {
             if (c.equals(open)) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c.equals(close)) {
                 depth--;
             }
+        }
+
+        // Update end if depth is positive and not in quote (exclude outer match pair)
+        if (depth > 0 &&!inQuote) {
+            end = pos;
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote);
     return (end >= 0)? queue.substring(start, end) : "";
 }
\ No newline at end of file
