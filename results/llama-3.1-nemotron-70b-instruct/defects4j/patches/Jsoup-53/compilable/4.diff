diff --git a/tmp/2d07e206-6e2c-4d41-83ff-047fa2fa031a_buggy.java b/tmp/471595b2-7283-4ce0-aefc-fbb06aeda3b3_fixed.java
index fecb896..bd011ab 100644
--- a/tmp/2d07e206-6e2c-4d41-83ff-047fa2fa031a_buggy.java
+++ b/tmp/471595b2-7283-4ce0-aefc-fbb06aeda3b3_fixed.java
@@ -1,34 +1,51 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        
+        // Check for quote characters
+        if (last!= ESC && (c == '\'' || c == '"')) {
+            if (inQuote) {
+                if (c == quoteChar) {
+                    inQuote = false;
+                }
+            } else {
+                inQuote = true;
+                quoteChar = c;
+            }
+        }
+
+        // Only consider balancing if not in a quote and not escaped
+        if (!inQuote && last!= ESC) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
             }
-                else if (c.equals(close))
+            else if (c == close)
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        // Update end position, excluding the outer match pair
+        if (depth > 0 && last!= 0 &&!inQuote)
+            end = pos;
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote); // also stop if still in a quote
     return (end >= 0)? queue.substring(start, end) : "";
 }
\ No newline at end of file
