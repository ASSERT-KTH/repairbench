diff --git a/tmp/4617b64e-9f91-45ee-ae0f-18b47589f829_buggy.java b/tmp/204ef668-49ca-4fb4-97a8-8811f7d3ceb8_fixed.java
index fecb896..edcaf32 100644
--- a/tmp/4617b64e-9f91-45ee-ae0f-18b47589f829_buggy.java
+++ b/tmp/204ef668-49ca-4fb4-97a8-8811f7d3ceb8_fixed.java
@@ -1,34 +1,51 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
  * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
     char last = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+
+        if (last == ESC) {
+            last = c; // skip escape sequences
+            continue;
+        }
+
+        if (c.equals('"') || c.equals('\'')) {
+            if (inQuote && c == quoteChar) {
+                inQuote = false;
+            } else if (!inQuote) {
+                inQuote = true;
+                quoteChar = c;
+            }
+        }
+
+        if (!inQuote) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
             }
             else if (c.equals(close))
                 depth--;
         }
 
         if (depth > 0 && last!= 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
-        } while (depth > 0);
+    } while (depth > 0 || inQuote);
     return (end >= 0)? queue.substring(start, end) : "";
 }
\ No newline at end of file
