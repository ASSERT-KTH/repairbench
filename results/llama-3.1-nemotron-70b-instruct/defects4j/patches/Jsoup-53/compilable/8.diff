diff --git a/tmp/49061866-9e59-4186-b069-1ab21f51726e_buggy.java b/tmp/99775b74-c97a-43b6-86b0-e85b18b7bd6c_fixed.java
index fecb896..7fcbdf1 100644
--- a/tmp/49061866-9e59-4186-b069-1ab21f51726e_buggy.java
+++ b/tmp/99775b74-c97a-43b6-86b0-e85b18b7bd6c_fixed.java
@@ -1,34 +1,50 @@
 /**
  * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
+ * and leave " four" on the queue. Unbalanced openers and closers can be quoted (with ' or ") or escaped (with \). Those escapes will be left
  * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
  * contains text strings; use unescape for that.
  * @param open opener
  * @param close closer
  * @return data matched from the queue
  */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        
+        // Check for quote characters
+        if (last!= ESC && (c == '\'' || c == '\"')) {
+            if (inQuote) {
+                if (c == quoteChar) {
+                    inQuote = false;
+                }
+            } else {
+                inQuote = true;
+                quoteChar = c;
+            }
+        }
+
+        if (!inQuote && last!= ESC) {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
                     start = pos;
             }
             else if (c.equals(close))
                 depth--;
         }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+        if (depth == 0 && last!= 0 &&!inQuote) {
+            end = pos; // include the outer match pair in the return when finding the end
+        }
         last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    } while (depth > 0 || inQuote); // continue until both balanced and out of quotes
+    return (end >= 0)? queue.substring(start, end + 1) : ""; // include the ending character in the substring
 }
\ No newline at end of file
