diff --git a/tmp/f8bf7c2d-6a35-4599-83e9-f3ffdb4e1cc2_buggy.java b/tmp/22d38d5e-1e97-4394-8953-cb68ec69f186_fixed.java
index 0313249..3d6570c 100644
--- a/tmp/f8bf7c2d-6a35-4599-83e9-f3ffdb4e1cc2_buggy.java
+++ b/tmp/22d38d5e-1e97-4394-8953-cb68ec69f186_fixed.java
@@ -1,32 +1,40 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
 public void remove(SettableBeanProperty propToRm)
 {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
+    int indexToRemove = -1; // track the index to remove from _propsInOrder
 
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
             // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
             //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
+            String propName = prop.getName();
+            if (_config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)) {
+                found = key.equalsIgnoreCase(propName);
+            } else {
+                found = key.equals(propName);
+            }
             if (found) {
-                    // need to leave a hole here
-                    _propsInOrder[_findFromOrdered(prop)] = null;
+                indexToRemove = _findFromOrdered(prop);
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
     }
+    if (indexToRemove!= -1) {
+        _propsInOrder[indexToRemove] = null;
+    }
     init(props);
 }
\ No newline at end of file
