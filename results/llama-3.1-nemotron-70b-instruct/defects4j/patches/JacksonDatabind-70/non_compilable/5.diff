diff --git a/tmp/fa8e988c-fc9f-4e77-af31-64d4f5ac61df_buggy.java b/tmp/8c9c3c52-56d3-4925-a8e9-1f9d82195bb6_fixed.java
index 0313249..342d521 100644
--- a/tmp/fa8e988c-fc9f-4e77-af31-64d4f5ac61df_buggy.java
+++ b/tmp/8c9c3c52-56d3-4925-a8e9-1f9d82195bb6_fixed.java
@@ -1,32 +1,35 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
 public void remove(SettableBeanProperty propToRm)
 {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
         if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
+            // Fix: use case-insensitive comparison when ACCEPT_CASE_INSENSITIVE_PROPERTIES is enabled
+            if (_config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES)) {
+                found = key.equalsIgnoreCase(prop.getName());
+            } else {
                 found = key.equals(prop.getName());
+            }
             if (found) {
                 // need to leave a hole here
                 _propsInOrder[_findFromOrdered(prop)] = null;
                 continue;
             }
         }
         props.add(prop);
     }
     if (!found) {
         throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
