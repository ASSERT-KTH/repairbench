diff --git a/tmp/b2915c46-b6e9-4530-9351-b4edc9f260c3_buggy.java b/tmp/24d3c721-7f5d-4018-83d8-a773cd6b953b_fixed.java
index 0313249..afd2e8e 100644
--- a/tmp/b2915c46-b6e9-4530-9351-b4edc9f260c3_buggy.java
+++ b/tmp/24d3c721-7f5d-4018-83d8-a773cd6b953b_fixed.java
@@ -1,32 +1,28 @@
 /**
  * Specialized method for removing specified existing entry.
  * NOTE: entry MUST exist, otherwise an exception is thrown.
  */
 public void remove(SettableBeanProperty propToRm)
 {
     ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
     String key = getPropertyName(propToRm);
     boolean found = false;
 
     for (int i = 1, end = _hashArea.length; i < end; i += 2) {
         SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
         if (prop == null) {
             continue;
         }
-            if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
+        if (key.equalsIgnoreCase(prop.getName())) { // Fix: use case-insensitive comparison
+            found = true;
             // need to leave a hole here
             _propsInOrder[_findFromOrdered(prop)] = null;
-                    continue;
-                }
-            }
+        } else {
             props.add(prop);
         }
+    }
     if (!found) {
         throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
     }
     init(props);
 }
\ No newline at end of file
