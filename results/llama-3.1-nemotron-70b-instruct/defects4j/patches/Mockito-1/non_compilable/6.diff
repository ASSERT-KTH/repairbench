diff --git a/tmp/4db7d638-7b3f-48af-a495-0a152fa1fca2_buggy.java b/tmp/480a1a5b-fbea-40a2-b872-898c5862e194_fixed.java
index 1c875ad..b039879 100644
--- a/tmp/4db7d638-7b3f-48af-a495-0a152fa1fca2_buggy.java
+++ b/tmp/480a1a5b-fbea-40a2-b872-898c5862e194_fixed.java
@@ -1,31 +1,32 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object varargValue = invocation.getRawArguments()[indexOfVararg];
         
+        if (varargValue!= null && varargValue.getClass().isArray()) {
+            int varargPosition = matchers.size() - 1;
+            for (int i = 0; i < Array.getLength(varargValue); i++) {
+                Matcher m = new VarargMatcherWrapper(matchers.get(varargPosition), i);
+                m.captureFrom(Array.get(varargValue, i));
+            }
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    } else {
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            }
+        }
     }
+}
+
+// Assuming VarargMatcherWrapper is defined elsewhere, 
+// if not, you would need to define it to wrap the original matcher 
+// and delegate the captureFrom call to it with the correct array element.
\ No newline at end of file
