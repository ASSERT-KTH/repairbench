diff --git a/tmp/e4411562-d6b9-41e8-9c3e-2b66a0d8b160_buggy.java b/tmp/01476964-4872-453e-8a8c-48d736855bda_fixed.java
index 1c875ad..4bdc8d6 100644
--- a/tmp/e4411562-d6b9-41e8-9c3e-2b66a0d8b160_buggy.java
+++ b/tmp/01476964-4872-453e-8a8c-48d736855bda_fixed.java
@@ -1,31 +1,36 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object varargArray = invocation.getRawArguments()[indexOfVararg];
+        
+        // Handle vararg array
+        if (varargArray!= null && varargArray.getClass().isArray()) {
+            for (int i = 0; i < Array.getLength(varargArray); i++) {
+                Object element = Array.get(varargArray, i);
+                captureArgumentFrom(element, matchers, invocation, indexOfVararg);
+            }
+        } else {
+            // Handle single vararg element (not an array)
+            captureArgumentFrom(varargArray, matchers, invocation, indexOfVararg);
+        }
         
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
+}
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+// Helper method to capture argument from invocation
+private void captureArgumentFrom(Object argument, List<Matcher> matchers, Invocation invocation, int position) {
+    for (Matcher m : matchers) {
+        if (m instanceof CapturesArguments) {
+            ((CapturesArguments) m).captureFrom(argument);
+            // Assuming only one CapturesArguments matcher per position, break after capture
+            break;
+        }
+    }
 }
\ No newline at end of file
