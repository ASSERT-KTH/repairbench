diff --git a/tmp/7dedb8e4-0567-4b57-a618-a053ce1a6344_buggy.java b/tmp/5efca750-10a3-4866-9e7b-d60032a91e82_fixed.java
index 7116384..a10bd2d 100644
--- a/tmp/7dedb8e4-0567-4b57-a618-a053ce1a6344_buggy.java
+++ b/tmp/5efca750-10a3-4866-9e7b-d60032a91e82_fixed.java
@@ -1,39 +1,38 @@
 /**
  * Returns at most 63 bits read from the underlying stream.
  *
  * @param count the number of bits to read, must be a positive
  * number not bigger than 63.
  * @return the bits concatenated as a long using the stream's byte order.
  *         -1 if the end of the underlying stream has been reached before reading
  *         the requested number of bits
  * @throws IOException on error
  */
 public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+    if (count < 0 || count > 63) { // Fix: Changed MAXIMUM_CACHE_SIZE to 63
+        throw new IllegalArgumentException("count must not be negative or greater than 63");
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsCached |= (nextByte << bitsCachedSize);
         } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+            bitsCached = (bitsCached << 8) | nextByte; // Fix: Added parentheses to ensure correct order of operations
         }
         bitsCachedSize += 8;
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
+    // bitsCachedSize >= count
     
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
-                bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsOut = (bitsCached >>> (bitsCachedSize - count)) & MASKS[count]; // Fix: Changed >> to >>> to perform unsigned right shift
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
