diff --git a/tmp/0527c136-49b8-4955-8291-ab8d64aaec86_buggy.java b/tmp/e454f5fa-11d0-4a2d-b8fc-0f24b285b685_fixed.java
index 00914da..58cbfcf 100644
--- a/tmp/0527c136-49b8-4955-8291-ab8d64aaec86_buggy.java
+++ b/tmp/e454f5fa-11d0-4a2d-b8fc-0f24b285b685_fixed.java
@@ -1,17 +1,27 @@
-    // does not recurse.
+/**
+ * Normalises the given element by moving non-blank TextNodes to the beginning of the body.
+ */
 private void normalise(Element element) {
     List<Node> toMove = new ArrayList<Node>();
     for (Node node: element.childNodes) {
         if (node instanceof TextNode) {
             TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
+            if (!tn.isBlank()) {
                 toMove.add(tn);
+                // also move preceding blank text nodes to maintain original text order
+                while (node.nextSibling instanceof TextNode && ((TextNode) node.nextSibling).isBlank()) {
+                    toMove.add(node.nextSibling);
+                    node = node.nextSibling;
+                }
+            }
         }
     }
 
     for (Node node: toMove) {
         element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+    }
+    // append moved nodes at the beginning of the body, in their original order
+    for (Node node: toMove) {
+        body().prependChild(node);
     }
 }
\ No newline at end of file
