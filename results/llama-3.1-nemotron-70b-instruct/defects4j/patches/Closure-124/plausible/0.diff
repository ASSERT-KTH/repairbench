diff --git a/tmp/d7442331-415c-4d0e-bc55-185baa338c70_buggy.java b/tmp/0af607b4-8ba3-41e8-88f8-e822fa1f2c22_fixed.java
index 2573d30..f8da4ac 100644
--- a/tmp/d7442331-415c-4d0e-bc55-185baa338c70_buggy.java
+++ b/tmp/0af607b4-8ba3-41e8-88f8-e822fa1f2c22_fixed.java
@@ -1,20 +1,35 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
   // No checks are needed for simple names.
   if (node.isName()) {
     return true;
   }
   Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node propertyAccess = node;
+  Node propNameNode = propertyAccess.getLastChild(); // Get property name node
+
+  // Traverse up the property access chain (e.g., x.y.z)
+  while (propertyAccess.isGetProp()) {
+    Node baseNode = propertyAccess.getFirstChild(); // Get base node (e.g., x in x.y)
+
+    if (baseNode.isName() && isNameAssignedTo(baseNode.getString(), replacement)) {
+      return false;
+    }
+
+    propertyAccess = baseNode; // Move up the chain
+    if (!propertyAccess.isGetProp()) break; // Exit if not a property access
+    propNameNode = propertyAccess.getLastChild(); // Update property name node
+  }
+
+  // Check the final base node (if it's a name)
+  if (propertyAccess.isName() && isNameAssignedTo(propertyAccess.getString(), replacement)) {
     return false;
   }
 
   return true;
 }
\ No newline at end of file
