diff --git a/tmp/c2a8a486-264d-4b4a-b97f-b7098ba68556_buggy.java b/tmp/98deac2c-830c-4a47-8d84-3292c5aa84ef_fixed.java
index 2573d30..ca52be4 100644
--- a/tmp/c2a8a486-264d-4b4a-b97f-b7098ba68556_buggy.java
+++ b/tmp/98deac2c-830c-4a47-8d84-3292c5aa84ef_fixed.java
@@ -1,20 +1,25 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    // Traverse all children of the property access, not just the first one
+    for (Node child = node.getFirstChild(); child!= null; child = child.getNext()) {
+      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
         return false;
       }
+      // Recursively check child nodes in case of nested property accesses
+      if (child.isGetProp() &&!isSafeReplacement(child, replacement)) {
+        return false;
+      }
+    }
 
     return true;
 }
\ No newline at end of file
