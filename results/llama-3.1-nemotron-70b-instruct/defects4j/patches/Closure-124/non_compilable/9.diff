diff --git a/tmp/62aebf4d-b081-448c-9f6b-4738ab18ab02_buggy.java b/tmp/589075d5-fbed-4151-a50d-06ff90af1dcf_fixed.java
index 2573d30..4ca426f 100644
--- a/tmp/62aebf4d-b081-448c-9f6b-4738ab18ab02_buggy.java
+++ b/tmp/589075d5-fbed-4151-a50d-06ff90af1dcf_fixed.java
@@ -1,20 +1,47 @@
 /**
  * Checks name referenced in node to determine if it might have
  * changed.
  * @return Whether the replacement can be made.
  */
 private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
     node = node.getFirstChild();
     if (node.isName() 
-        && isNameAssignedTo(node.getString(), replacement)) {
+        && (isNameAssignedTo(node.getString(), replacement) 
+            || isNameAssignedToThroughPropertyChain(node.getString(), replacement))) {
       return false;
     }
 
     return true;
 }
+
+// Additional helper method to check property chain assignments
+private boolean isNameAssignedToThroughPropertyChain(String name, Node replacement) {
+    // Recursively traverse the property chain of the replacement node
+    return isNameAssignedToThroughPropertyChainHelper(name, replacement, new HashSet<>());
+}
+
+private boolean isNameAssignedToThroughPropertyChainHelper(String name, Node node, Set<Node> visited) {
+    if (visited.contains(node)) {
+        return false; // Prevent infinite loops
+    }
+    visited.add(node);
+
+    if (node.isGetProp() && node.getFirstChild().getString().equals(name)) {
+        return true;
+    }
+
+    if (node.isGetProp()) {
+        Node parentNode = node.getFirstChild();
+        if (parentNode!= null && parentNode.hasChildren()) {
+            return isNameAssignedToThroughPropertyChainHelper(name, parentNode, visited);
+        }
+    }
+
+    return false;
+}
\ No newline at end of file
