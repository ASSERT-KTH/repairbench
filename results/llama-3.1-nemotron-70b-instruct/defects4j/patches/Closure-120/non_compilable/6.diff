diff --git a/tmp/eba5ef87-e9db-4ad1-87bf-070c9a361e4f_buggy.java b/tmp/3e290a1a-fe39-402c-a65d-a5a10c558294_fixed.java
index 07b0792..a417fb7 100644
--- a/tmp/eba5ef87-e9db-4ad1-87bf-070c9a361e4f_buggy.java
+++ b/tmp/3e290a1a-fe39-402c-a65d-a5a10c558294_fixed.java
@@ -1,22 +1,38 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, considering both direct assignments and potential 
+ *     reassignments through nested function calls.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
+      // Check if the function is recursive, which could lead to reassignment.
+      if (isRecursiveFunction(block.getFunction())) {
+        return false;
+      }
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
+  // Verify no other assignments exist in the variable's scope.
+  return getAssignments().size() == 1;
+}
+
+// Helper method to check if a function is recursive.
+private boolean isRecursiveFunction(Function func) {
+  for (Reference ref : func.getReferences()) {
+    if (ref.getReferencedNode() == func) {
       return true;
     }
+  }
+  return false;
+}
\ No newline at end of file
