diff --git a/tmp/c04f31b9-518b-40bd-bbe4-787a38b7af34_buggy.java b/tmp/dcb7b755-7f63-42e7-a0ae-0f49dd6fcd29_fixed.java
index 07b0792..a9f34f3 100644
--- a/tmp/c04f31b9-518b-40bd-bbe4-787a38b7af34_buggy.java
+++ b/tmp/dcb7b755-7f63-42e7-a0ae-0f49dd6fcd29_fixed.java
@@ -1,22 +1,38 @@
 /**
-     * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ * @return Whether the variable is only assigned a value once for its lifetime,
+ *     considering the entire program execution (not just within a single loop).
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
+  // Check if the variable is reassigned across function calls or in other scopes.
+  Node assignmentNode = ref.getNode();
+  Scope scope = assignmentNode.getScope();
+  for (Node node : scope.getChildNodes()) {
+    if (node instanceof AssignNode && node.getLhs().equals(assignmentNode)) {
+      if (!node.equals(assignmentNode)) {
+        return false; // Reassigned in a different location
+      }
+    } else if (node instanceof FunctionNode) {
+      // If the variable is accessed within a nested function, it may be reassigned.
+      if (((FunctionNode) node).getScope().getVar(ref.getVariable())!= null) {
+        return false; // May be reassigned in a nested function
+      }
+    }
+  }
+
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
   return true;
 }
\ No newline at end of file
