diff --git a/tmp/60bc19f5-afa1-4298-beca-536a09167c02_buggy.java b/tmp/3e5742fa-8b1d-4c1c-9cfb-c52337382a77_fixed.java
index 07b0792..b8ec94f 100644
--- a/tmp/60bc19f5-afa1-4298-beca-536a09167c02_buggy.java
+++ b/tmp/3e5742fa-8b1d-4c1c-9cfb-c52337382a77_fixed.java
@@ -1,22 +1,34 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, considering the entire program flow.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
-      // Make sure this assignment is not in a loop.
+  // Make sure this assignment is not in a loop and is not reachable from a re-entrant context.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
+      // Check if the function is reachable from a re-entrant context (e.g., recursive calls).
+      if (isReachableFromReentrantContext(block.getFunction())) {
+        return false;
+      }
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
-      return true;
+  // Verify no other assignments exist in the entire program flow.
+  return getAssignedReferences().size() == 1;
+}
+
+// Helper method to check if a function is reachable from a re-entrant context.
+private boolean isReachableFromReentrantContext(Function function) {
+  // Simple implementation: check for direct recursion.
+  // This can be enhanced to detect more complex re-entrant flows.
+  return function.getCallers().contains(function);
 }
\ No newline at end of file
