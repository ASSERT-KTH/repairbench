diff --git a/tmp/3052d9de-1b2a-4773-9f60-c3d167257646_buggy.java b/tmp/561e75e7-1b5f-453d-8514-fc9360e26805_fixed.java
index 07b0792..7f079e8 100644
--- a/tmp/3052d9de-1b2a-4773-9f60-c3d167257646_buggy.java
+++ b/tmp/561e75e7-1b5f-453d-8514-fc9360e26805_fixed.java
@@ -1,22 +1,61 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, considering the entire call graph.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
+      // Check if the function is recursive
+      if (isRecursiveFunction(block.getFunction())) {
+        return false;
+      }
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
+  // Check for assignments in nested functions
+  if (hasAssignmentInNestedFunction(ref.getVariable())) {
+    return false;
+  }
+
+  return true;
+}
+
+// Helper method to check for recursive functions
+private boolean isRecursiveFunction(Function fun) {
+  for (Reference ref : fun.getReferences()) {
+    if (ref.getVariable() == fun) {
+      return true;
+    }
+  }
+  return false;
+}
+
+// Helper method to check for assignments in nested functions
+private boolean hasAssignmentInNestedFunction(Variable var) {
+  for (Function fun : var.getReferencedFunctions()) {
+    if (fun.isNested() && hasAssignmentInFunction(fun, var)) {
       return true;
     }
+  }
+  return false;
+}
+
+// Helper method to check for assignment in a specific function
+private boolean hasAssignmentInFunction(Function fun, Variable var) {
+  for (Reference ref : fun.getReferences()) {
+    if (ref.getVariable() == var && ref.isAssignment()) {
+      return true;
+    }
+  }
+  return false;
+}
\ No newline at end of file
