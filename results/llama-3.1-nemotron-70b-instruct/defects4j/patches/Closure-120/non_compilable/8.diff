diff --git a/tmp/2c2df814-5d94-48ea-9585-3fd0bf4279b8_buggy.java b/tmp/0cdecf29-bb2e-4be9-85be-d0e24290e64a_fixed.java
index 07b0792..9b2bf36 100644
--- a/tmp/2c2df814-5d94-48ea-9585-3fd0bf4279b8_buggy.java
+++ b/tmp/0cdecf29-bb2e-4be9-85be-d0e24290e64a_fixed.java
@@ -1,22 +1,64 @@
 /**
-     * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ * @return Whether the variable is only assigned a value once for its lifetime,
+ *     considering all possible execution paths.
  */
 boolean isAssignedOnceInLifetime() {
-      Reference ref = getOneAndOnlyAssignment();
-      if (ref == null) {
+  List<Reference> assignments = getAllAssignments();
+  if (assignments.size() > 1) {
     return false;
   }
 
+  if (assignments.isEmpty()) {
+    return true; // no assignments at all is considered "assigned once"
+  }
+
+  Reference ref = assignments.get(0);
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
+  // Check if the assignment is reachable from all execution paths
+  return isReachableFromAllPaths(ref.getBasicBlock());
+}
+
+// Helper method to check if a basic block is reachable from all execution paths
+private boolean isReachableFromAllPaths(BasicBlock block) {
+  // This implementation may vary based on the actual control flow graph structure
+  // For simplicity, assume we have a method to get all entry points
+  for (BasicBlock entryPoint : getEntryPoints()) {
+    if (!isReachable(block, entryPoint)) {
+      return false;
+    }
+  }
+  return true;
+}
+
+// Helper method to check if a block is reachable from another
+private boolean isReachable(BasicBlock target, BasicBlock source) {
+  // This implementation may vary based on the actual control flow graph structure
+  // A simple iterative approach to demonstrate the idea
+  Set<BasicBlock> visited = new HashSet<>();
+  Queue<BasicBlock> queue = new LinkedList<>();
+  queue.add(source);
+  visited.add(source);
+
+  while (!queue.isEmpty()) {
+    BasicBlock current = queue.poll();
+    if (current == target) {
       return true;
     }
+    for (BasicBlock successor : current.getSuccessors()) {
+      if (!visited.contains(successor)) {
+        queue.add(successor);
+        visited.add(successor);
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
