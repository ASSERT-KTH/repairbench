diff --git a/tmp/0cb53e32-5fbc-4f33-98ca-afb3ae38d38a_buggy.java b/tmp/89fd36d2-9816-4aec-b764-d8b6f045863e_fixed.java
index 07b0792..a4bec6b 100644
--- a/tmp/0cb53e32-5fbc-4f33-98ca-afb3ae38d38a_buggy.java
+++ b/tmp/89fd36d2-9816-4aec-b764-d8b6f045863e_fixed.java
@@ -1,22 +1,48 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, considering the entire program's call graph.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block!= null; block = block.getParent()) {
     if (block.isFunction) {
+      // Check if the function is recursive
+      if (isFunctionRecursive(block.getFunction())) {
+        return false;
+      }
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
+  // Check if any other function assigns to this variable
+  for (Function func : getProgram().getFunctions()) {
+    for (Statement stmt : func.getStatements()) {
+      if (stmt.isAssign() && ((Assign) stmt).getLhs().getVariable() == this) {
+        Reference otherRef = new Reference((Assign) stmt, ((Assign) stmt).getLhs());
+        if (!otherRef.equals(ref)) {
+          return false;
+        }
+      }
+    }
+  }
+
   return true;
 }
+
+// Helper function to check if a function is recursive
+private boolean isFunctionRecursive(Function func) {
+  for (Statement stmt : func.getStatements()) {
+    if (stmt.isCall() && ((Call) stmt).getFunction().equals(func)) {
+      return true;
+    }
+  }
+  return false;
+}
\ No newline at end of file
