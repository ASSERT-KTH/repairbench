diff --git a/tmp/fb6e7dcc-6346-4387-a59b-53efcf6d1638_buggy.java b/tmp/1ce18cad-61c3-4499-815a-32716c4a91bc_fixed.java
index 388771b..6381f21 100644
--- a/tmp/fb6e7dcc-6346-4387-a59b-53efcf6d1638_buggy.java
+++ b/tmp/1ce18cad-61c3-4499-815a-32716c4a91bc_fixed.java
@@ -1,37 +1,42 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
+    if (end >= this.data.size()) {
+        throw new IllegalArgumentException("Requires end < data.size().");
+    }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
+        // Update min and max y-values after copying data
+        copy.fireSeriesChanged();
     }
     return copy;
 }
\ No newline at end of file
