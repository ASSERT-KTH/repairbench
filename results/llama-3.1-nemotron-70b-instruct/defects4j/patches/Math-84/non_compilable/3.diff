diff --git a/tmp/7e9df646-17fb-405d-9481-712277d1f6f1_buggy.java b/tmp/3681b2f5-90ab-4641-90b2-56d4f24f6760_fixed.java
index 5f1dcf2..63731b8 100644
--- a/tmp/7e9df646-17fb-405d-9481-712277d1f6f1_buggy.java
+++ b/tmp/3681b2f5-90ab-4641-90b2-56d4f24f6760_fixed.java
@@ -1,41 +1,54 @@
-    /** {@inheritDoc} */
+/**
+ * {@inheritDoc}
+ */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
 
-                return;
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+        } else {
+            // shrink the simplex
+            simplex = evaluateShrunkSimplex(original, comparator);
+        }
 
         // check convergence
+        if (getConvergenceChecker().converged(getIterations(), simplex)) {
             return;
         }
 
     }
 
+    throw new MaxIterationsExceededException(getMaxIterations());
+
 }
\ No newline at end of file
