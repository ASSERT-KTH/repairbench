diff --git a/tmp/90177328-8a3b-496e-b672-c5f97808f547_buggy.java b/tmp/5413bbc0-7279-493c-b707-65f76cc25503_fixed.java
index 5f1dcf2..668a3af 100644
--- a/tmp/90177328-8a3b-496e-b672-c5f97808f547_buggy.java
+++ b/tmp/5413bbc0-7279-493c-b707-65f76cc25503_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator, true);
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator, true);
+            return;
+        }
 
-            // check convergence
+        // if none of the above steps were accepted, perform a contraction around the best point
+        simplex = evaluateNewSimplex(original, 0.5, comparator, true);
         return;
+
     }
 
+    // convergence check, throw exception if max iterations/evaluations exceeded
+    if (getIterations() >= getMaxIterations()) {
+        throw new MaxIterationsExceededException(getMaxIterations());
+    }
+    if (getEvaluations() >= getMaxEvaluations()) {
+        throw new MaxEvaluationsExceededException(getMaxEvaluations());
     }
 
 }
\ No newline at end of file
