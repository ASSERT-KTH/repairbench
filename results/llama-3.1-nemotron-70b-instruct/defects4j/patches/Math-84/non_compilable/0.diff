diff --git a/tmp/7688a637-ff09-427e-81bc-5c8731b98306_buggy.java b/tmp/dd753d05-c62d-4ef7-8847-a3532a4004a3_fixed.java
index 5f1dcf2..193e7be 100644
--- a/tmp/7688a637-ff09-427e-81bc-5c8731b98306_buggy.java
+++ b/tmp/dd753d05-c62d-4ef7-8847-a3532a4004a3_fixed.java
@@ -1,41 +1,52 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    int maxIterations = getMaxIterations();
+    int currentIteration = 0;
+
+    while (currentIteration < maxIterations) {
 
         incrementIterationsCounter();
+        currentIteration++;
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = new RealPointValuePair[] { expanded };
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = new RealPointValuePair[] { contracted };
             return;
         } 
 
+        // if none of the above steps improved the simplex, 
+        // a shrink step is performed and the loop continues
+        shrink.Simplex(simplex, size, 0);
     }
 
+    // if the loop exits without returning, 
+    // it means the maximal number of iterations is exceeded
+    throw new MaxIterationsExceededException(maxIterations);
 }
\ No newline at end of file
