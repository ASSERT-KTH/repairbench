diff --git a/tmp/dc28a3e6-55ba-4063-82e8-8d2bed43526c_buggy.java b/tmp/69cff8fc-9eca-433c-bb9c-89c489efd83a_fixed.java
index 5f1dcf2..a0b133e 100644
--- a/tmp/dc28a3e6-55ba-4063-82e8-8d2bed43526c_buggy.java
+++ b/tmp/69cff8fc-9eca-433c-bb9c-89c489efd83a_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    int maxIterations = getMaxIterations();
+    int iterations = 0;
+
+    while (iterations < maxIterations) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = createSimplex(expanded, original);
             }
 
-                return;
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = createSimplex(contracted, original);
+        } else {
+            // shrink the simplex
+            simplex = shrink-simplex(best, original);
+        }
 
         // check convergence
+        if (isConverged(simplex)) {
             return;
         }
 
+        iterations++;
     }
 
+    throw new MaxIterationsExceededException(maxIterations);
 }
+
+// Assuming the existence of the following methods, 
+// which may need to be implemented or modified according to your actual class:
+// - getMaxIterations()
+// - createSimplex(RealPointValuePair, RealPointValuePair[])
+// - shrinkSimplex(RealPointValuePair, RealPointValuePair[])
+// - isConverged(RealPointValuePair[])
\ No newline at end of file
