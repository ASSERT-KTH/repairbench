diff --git a/tmp/7304f958-867d-4882-aaf6-2059d9c5e3f5_buggy.java b/tmp/02a8d7a8-6e94-4391-b116-318ff0ba6278_fixed.java
index 5f1dcf2..98203f9 100644
--- a/tmp/7304f958-867d-4882-aaf6-2059d9c5e3f5_buggy.java
+++ b/tmp/02a8d7a8-6e94-4391-b116-318ff0ba6278_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = {reflected, original[1], original[2]};
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                simplex = new RealPointValuePair[] {expanded, original[1], original[2]};
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] {contracted, original[1], original[2]};
+            } else {
+                // shrink the simplex
+                simplex = shrinkSimplex(original, best);
+            }
+
+        }
 
         // check convergence
+        if (getConvergenceChecker().converged(getIterations(), simplex)) {
             return;
         }
 
     }
 
+    throw new MaxIterationsExceededException(getMaxIterations());
+
 }
+
+// Note: The above fix assumes the existence of the following methods and fields in the class:
+// - getIterations()
+// - getMaxIterations()
+// - getEvaluations()
+// - getMaxEvaluations()
+// - incrementIterationsCounter()
+// - evaluateNewSimplex(RealPointValuePair[], double, Comparator<RealPointValuePair>)
+// - shrinkSimplex(RealPointValuePair[], RealPointValuePair)
+// - getConvergenceChecker()
+// - khai (reflection coefficient)
+// - gamma (contraction coefficient)
\ No newline at end of file
