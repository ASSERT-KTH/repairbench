diff --git a/tmp/aa6d08f3-4d2c-47b5-93df-aec1a9112e39_buggy.java b/tmp/d6625894-7083-4a56-9b05-e52ae9367438_fixed.java
index 5f1dcf2..52bd571 100644
--- a/tmp/aa6d08f3-4d2c-47b5-93df-aec1a9112e39_buggy.java
+++ b/tmp/d6625894-7083-4a56-9b05-e52ae9367438_fixed.java
@@ -1,41 +1,51 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[]{expanded, reflectedSimplex[1], reflectedSimplex[2]};
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[]{contracted, original[1], original[2]};
+            } else {
+                // shrink the simplex
+                simplex = shrinkSimplex(original, comparator);
+            }
+
+        }
 
         // check convergence
+        if (getConvergenceChecker().converged(getIterations(), simplex)) {
             return;
         }
 
     }
 
+    throw new MaxIterationsExceededException(getMaxIterations());
 }
\ No newline at end of file
