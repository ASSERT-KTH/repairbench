diff --git a/tmp/a24782a9-ceb5-4933-bb3b-f652927dc83c_buggy.java b/tmp/8ef176a8-13af-4fde-949f-a4db91a7eef8_fixed.java
index 49a5702..03ac72e 100644
--- a/tmp/a24782a9-ceb5-4933-bb3b-f652927dc83c_buggy.java
+++ b/tmp/8ef176a8-13af-4fde-949f-a4db91a7eef8_fixed.java
@@ -1,66 +1,103 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo()!= null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+  
+  // Fix: Check for comma expressions in more cases
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
-      if (n == parent.getLastChild()) {
+    if (n!= parent.getLastChild() &&!isUsedInCommaExpression(n, parent)) {
+      reportUselessCode(t, n, isSimpleOp);
+      return;
+    }
     for (Node an : parent.getAncestors()) {
       int ancestorType = an.getType();
       if (ancestorType == Token.COMMA) continue;
       if (ancestorType!= Token.EXPR_RESULT && ancestorType!= Token.BLOCK) return;
       else break;
     }
-      }
   } else if (parent.getType()!= Token.EXPR_RESULT && parent.getType()!= Token.BLOCK) {
     if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      if (!isUsedInParenExpression(n, parent)) {
+        reportUselessCode(t, n, isSimpleOp);
+      }
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+  if ((isSimpleOp ||!NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    reportUselessCode(t, n, isSimpleOp);
+  }
+}
+
+// Helper method to check if a node is used in a comma expression
+private boolean isUsedInCommaExpression(Node n, Node parent) {
+  Node grandParent = parent.getParent();
+  if (grandParent == null) return false;
+  if (grandParent.getType() == Token.ASSIGN) return true; // e.g., `a = (b, c)`
+  if (grandParent.getType() == Token.RETURN) return true; // e.g., `return (a, b)`
+  return isUsedInParenExpression(n, grandParent);
+}
+
+// Helper method to check if a node is used in a parenthesized expression
+private boolean isUsedInParenExpression(Node n, Node parent) {
+  Node grandParent = parent.getParent();
+  if (grandParent == null) return false;
+  if (grandParent.getType() == Token.PAREN) { // e.g., `(a, b)` or `(a == b)`
+    Node greatGrandParent = grandParent.getParent();
+    if (greatGrandParent!= null) {
+      int greatGrandParentType = greatGrandParent.getType();
+      if (greatGrandParentType == Token.IF || greatGrandParentType == Token.WHILE 
+          || greatGrandParentType == Token.FOR || greatGrandParentType == Token.DO) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
+
+// Helper method to report useless code
+private void reportUselessCode(NodeTraversal t, Node n, boolean isSimpleOp) {
   String msg = "This code lacks side-effects. Is there a bug?";
   if (n.isString()) {
     msg = "Is there a missing '+' on the previous line?";
   } else if (isSimpleOp) {
     msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
         "' operator is not being used.";
   }
 
   t.getCompiler().report(
       t.makeError(n, level, USELESS_CODE_ERROR, msg));
   // TODO(johnlenz): determine if it is necessary to
   // try to protect side-effect free statements as well.
   if (!NodeUtil.isStatement(n)) {
     problemNodes.add(n);
   }
 }
\ No newline at end of file
-  }
