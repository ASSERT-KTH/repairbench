diff --git a/tmp/ab89d3ab-8245-44ce-af92-a2bc0bb2c18e_buggy.java b/tmp/8a23f3cf-8873-4c0f-9c48-50abc408b04a_fixed.java
index 49a5702..2b19090 100644
--- a/tmp/ab89d3ab-8245-44ce-af92-a2bc0bb2c18e_buggy.java
+++ b/tmp/8a23f3cf-8873-4c0f-9c48-50abc408b04a_fixed.java
@@ -1,66 +1,76 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo()!= null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+  // Fix: Check for comma expressions in a more comprehensive way
   if (parent.getType() == Token.COMMA) {
-      if (isResultUsed) {
-        return;
-      }
-      if (n == parent.getLastChild()) {
+    Node lastChild = parent.getLastChild();
+    if (n == lastChild) {
+      // If this is the last child, check if any ancestor is not a comma, expr result, or block
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
+        if (ancestorType!= Token.EXPR_RESULT && ancestorType!= Token.BLOCK) 
+          return; // ancestor found, skip reporting
         else break;
       }
+    } else if (!isResultUsed) {
+      // If not the last child and result is not used, report
+      reportUselessCode(t, n, isSimpleOp);
+      return;
     }
   } else if (parent.getType()!= Token.EXPR_RESULT && parent.getType()!= Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && 
+           (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if ((isSimpleOp ||!NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    reportUselessCode(t, n, isSimpleOp);
+  }
+}
+
+// Extracted method for reporting useless code
+private void reportUselessCode(NodeTraversal t, Node n, boolean isSimpleOp) {
   String msg = "This code lacks side-effects. Is there a bug?";
   if (n.isString()) {
     msg = "Is there a missing '+' on the previous line?";
   } else if (isSimpleOp) {
     msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
         "' operator is not being used.";
   }
 
   t.getCompiler().report(
       t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
   if (!NodeUtil.isStatement(n)) {
     problemNodes.add(n);
   }
 }
\ No newline at end of file
-  }
