diff --git a/tmp/b9abd7a4-4d47-4f05-b4cb-c6415c62bb10_buggy.java b/tmp/6555493a-22e3-4660-abf7-6761fc57e1f9_fixed.java
index 5b8a4d2..37eca9a 100644
--- a/tmp/b9abd7a4-4d47-4f05-b4cb-c6415c62bb10_buggy.java
+++ b/tmp/6555493a-22e3-4660-abf7-6761fc57e1f9_fixed.java
@@ -1,12 +1,28 @@
 /**
  * Creates a period from the given millisecond duration with the standard period type
  * and ISO rules, ensuring that the calculation is performed with the time-only period type.
  * <p>
  * The calculation uses the hour, minute, second and millisecond fields.
  *
  * @param duration  the duration, in milliseconds
  */
 protected BasePeriod(long duration) {
-        this(duration, null, null);
-        // bug [3264409]
+    this(duration, PeriodType.standard(), ISOChronology.getInstance());
+    long totalSeconds = duration / DateTimeConstants.MILLIS_PER_SECOND;
+    long totalMinutes = totalSeconds / DateTimeConstants.SECONDS_PER_MINUTE;
+    long totalHours = totalMinutes / DateTimeConstants.MINUTES_PER_HOUR;
+    long days = (totalHours / DateTimeConstants.HOURS_PER_DAY);
+    if (days > 0) { // avoid division by zero
+        totalHours %= DateTimeConstants.HOURS_PER_DAY;
+    }
+    if (totalHours > 0) { // avoid division by zero
+        totalMinutes %= DateTimeConstants.MINUTES_PER_HOUR;
+    }
+    if (totalMinutes > 0) { // avoid division by zero
+        totalSeconds %= DateTimeConstants.SECONDS_PER_MINUTE;
+    }
+    set(DurationFieldType.hours(), totalHours);
+    set(DurationFieldType.minutes(), totalMinutes % DateTimeConstants.MINUTES_PER_HOUR);
+    set(DurationFieldType.seconds(), totalSeconds % DateTimeConstants.SECONDS_PER_MINUTE);
+    set(DurationFieldType.millis(), duration % DateTimeConstants.MILLIS_PER_SECOND);
 }
\ No newline at end of file
