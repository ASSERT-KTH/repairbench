diff --git a/tmp/fcac96a7-5777-42d9-a2e2-e44e81078fd0_buggy.java b/tmp/62aa1e49-f91a-4a59-a760-afe652608240_fixed.java
index 602226b..07cfbb6 100644
--- a/tmp/fcac96a7-5777-42d9-a2e2-e44e81078fd0_buggy.java
+++ b/tmp/62aa1e49-f91a-4a59-a760-afe652608240_fixed.java
@@ -1,26 +1,27 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+      if (n.hasChildren() && (n.getFirstChild().isQualifiedName() || 
+                              (n.getFirstChild().isGetProp() && n.getFirstChild().getChildAtIndex(0).isQualifiedName()))) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
+        if (qualifiedName!= null) { // added null check
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        }
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Check if the variable is not a function declaration and not a parameter of the scope function
+        if (type!= Token.FUNCTION &&!scope.isParameter(v.getName())) {
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
   }
+}
\ No newline at end of file
