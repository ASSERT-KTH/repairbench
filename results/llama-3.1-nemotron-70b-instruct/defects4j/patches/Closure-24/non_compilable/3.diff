diff --git a/tmp/d1239c14-d5d3-4ce6-ba7d-368d9efb55f6_buggy.java b/tmp/881eb86c-9c9e-4ea5-8b91-401830945616_fixed.java
index 602226b..bb5c12e 100644
--- a/tmp/d1239c14-d5d3-4ce6-ba7d-368d9efb55f6_buggy.java
+++ b/tmp/881eb86c-9c9e-4ea5-8b91-401830945616_fixed.java
@@ -1,26 +1,35 @@
+/**
+ * Finds aliases in the given scope and reports non-alias locals.
+ * 
+ * @param t NodeTraversal to get the current scope from
+ */
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar!= null) { // added null check
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+        }
+      } else if (n.hasChildren() && 
+                 (n.getFirstChild().isNumber() || 
+                  n.getFirstChild().isString() || 
+                  n.getFirstChild().isFunction() || 
+                  (n.getFirstChild().isObject() && n.getFirstChild().getNumChildren() == 0))) {
+        // do nothing, as these are allowed locals
       } else {
         // TODO(robbyw): Support using locals for private variables.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
