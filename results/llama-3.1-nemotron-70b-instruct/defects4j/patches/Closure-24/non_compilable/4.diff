diff --git a/tmp/abb782f8-d4c4-4039-99ce-6fd3fb841c6f_buggy.java b/tmp/b231ef6d-651a-4906-a6bd-caa6c285ccea_fixed.java
index 602226b..3090c30 100644
--- a/tmp/abb782f8-d4c4-4039-99ce-6fd3fb841c6f_buggy.java
+++ b/tmp/b231ef6d-651a-4906-a6bd-caa6c285ccea_fixed.java
@@ -1,26 +1,36 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar!= null) { // Add null check to avoid NPE
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+        }
+      } 
+    } else if (n.isVar() &&!n.isFunction() &&!isBleedingFunctionParameter(scope, v)) { 
+      // Check if the variable is not a function and not a parameter of a bleeding function
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
+
+// Helper method to check if a variable is a parameter of a bleeding function
+private boolean isBleedingFunctionParameter(Scope scope, Var v) {
+  Node node = v.getNode();
+  while (node.getParent()!= null) {
+    node = node.getParent();
+    if (node.isFunction() && scope.isBleedingFunction(node)) {
+      return true;
+    }
+  }
+  return false;
 }
\ No newline at end of file
