diff --git a/tmp/878e879b-f64c-4924-bb35-0d3567d2eccc_buggy.java b/tmp/dca70edb-f6dc-412d-9860-6b91ac0bf402_fixed.java
index 602226b..89fd043 100644
--- a/tmp/878e879b-f64c-4924-bb35-0d3567d2eccc_buggy.java
+++ b/tmp/dca70edb-f6dc-412d-9860-6b91ac0bf402_fixed.java
@@ -1,26 +1,29 @@
+/**
+ * Finds aliases in the given scope and updates the aliases map and transformation.
+ * 
+ * @param t the NodeTraversal object
+ */
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    
+    // Check if the variable is not a function parameter and not a bleeding function
+    if (!scope.isParam(v) &&!scope.isBleedingFunction(v)) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
         aliases.put(name, aliasVar);
 
         String qualifiedName =
             aliasVar.getInitialValue().getQualifiedName();
         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
       } else {
-          // TODO(robbyw): Support using locals for private variables.
+        // Report error if the local variable is not an alias
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
