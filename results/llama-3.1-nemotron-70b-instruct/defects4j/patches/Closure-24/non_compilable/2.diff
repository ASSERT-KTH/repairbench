diff --git a/tmp/5100d9ca-ded7-4d88-af84-478c2a1a36f7_buggy.java b/tmp/815cffca-d534-45a3-b683-98120e3b60e6_fixed.java
index 602226b..b8b70a9 100644
--- a/tmp/5100d9ca-ded7-4d88-af84-478c2a1a36f7_buggy.java
+++ b/tmp/815cffca-d534-45a3-b683-98120e3b60e6_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar!= null) { // Added null check for aliasVar
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+        }
+      } 
+    } else if (parent.isScript() && n.isVar() &&!n.hasChildren() || 
+               n.getFirstChild().isNumber() || n.getFirstChild().isString() ||
+               (n.hasChildren() && n.getFirstChild().isQualifiedName() && 
+               !scope.getVar(n.getString()).isFromExternalSource())) {
+      // Report error for non-alias locals
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
-        }
+    // Parameters of the scope function and bleeding functions are handled elsewhere
   }
 }
\ No newline at end of file
