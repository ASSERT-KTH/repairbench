diff --git a/tmp/b047d33f-8801-4cd6-808c-0d60dca25e37_buggy.java b/tmp/183f4dfb-ec50-4960-9c49-9cc7fb9dd4a7_fixed.java
index 602226b..37db0b8 100644
--- a/tmp/b047d33f-8801-4cd6-808c-0d60dca25e37_buggy.java
+++ b/tmp/183f4dfb-ec50-4960-9c49-9cc7fb9dd4a7_fixed.java
@@ -1,26 +1,35 @@
+/**
+ * Finds and reports non-alias locals in the given scope.
+ * 
+ * @param t the NodeTraversal object
+ */
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar!= null) { // Check if aliasVar is not null
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
+      } else {
+        // Report non-alias locals (not just qualified names)
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } 
+    // Report function declarations as non-alias locals
+    else if (type == Token.FUNCTION) {
+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
