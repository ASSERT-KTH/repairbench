diff --git a/tmp/faa487d3-936c-4a96-9e12-195fd586378c_buggy.java b/tmp/403952fe-935a-400d-b3f4-cfbfcd0fcd82_fixed.java
index 25ca093..60cc672 100644
--- a/tmp/faa487d3-936c-4a96-9e12-195fd586378c_buggy.java
+++ b/tmp/403952fe-935a-400d-b3f4-cfbfcd0fcd82_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses ByteData into a Document, detecting or using the provided charset.
+ * 
+ * @param byteData   Byte data to parse
+ * @param charsetName Charset to use (null to detect from HTML, or auto-detect from BOM)
+ * @param baseUri    Base URI for the document
+ * @param parser     Parser to use for HTML parsing
+ * @return Parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM to determine charset
+    byte[] bom = new byte[4];
+    byteData.mark();
+    byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    String detectedCharset = null;
+    if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) { // UTF-16BE
+        detectedCharset = "UTF-16BE";
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { // UTF-16LE
+        detectedCharset = "UTF-16LE";
+    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE
+        detectedCharset = "UTF-32BE";
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) { // UTF-32LE
+        detectedCharset = "UTF-32LE";
+    } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8
+        detectedCharset = "UTF-8";
+    }
+
+    byteData.reset();
+
+    if (detectedCharset!= null) {
+        charsetName = detectedCharset;
+    } else if (charsetName == null) { // determine from meta, safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    }
+
+    if (doc == null) {
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (detectedCharset == null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
