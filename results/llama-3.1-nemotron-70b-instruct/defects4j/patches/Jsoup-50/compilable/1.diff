diff --git a/tmp/556225c8-ed3d-44ad-a785-98c48629dae6_buggy.java b/tmp/3606d3bc-e468-4612-ad5e-5e6062b524f1_fixed.java
index 25ca093..7712d29 100644
--- a/tmp/556225c8-ed3d-44ad-a785-98c48629dae6_buggy.java
+++ b/tmp/3606d3bc-e468-4612-ad5e-5e6062b524f1_fixed.java
@@ -1,52 +1,87 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses Byte Data into a Document, detecting or using the provided charset.
+ * 
+ * @param byteData   The byte data to parse.
+ * @param charsetName The character set to use. If null, attempts to detect from HTML.
+ * @param baseUri    The base URI for the document.
+ * @param parser     The parser to use.
+ * @return The parsed Document.
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM and determine charset accordingly
+    if (byteData.remaining() >= 4) { // minimum BOM length (UTF-32)
+        byte[] bomBytes = new byte[4];
+        byteData.mark(); // mark current position to rewind later
+        byteData.get(bomBytes, 0, Math.min(4, byteData.remaining()));
+
+        // Known BOMs (in order of length to avoid false positives)
+        byte[][] knownBoms = {
+            { (byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF }, // UTF-32BE
+            { (byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00 }, // UTF-32LE
+            { (byte) 0xFE, (byte) 0xFF }, // UTF-16BE
+            { (byte) 0xFF, (byte) 0xFE }, // UTF-16LE
+            { (byte) 0xEF, (byte) 0xBB, (byte) 0xBF } // UTF-8
+        };
+        String[] bomCharsets = { "UTF-32BE", "UTF-32LE", "UTF-16BE", "UTF-16LE", "UTF-8" };
+
+        for (int i = 0; i < knownBoms.length; i++) {
+            if (startsWith(bomBytes, knownBoms[i])) {
+                charsetName = bomCharsets[i];
+                byteData.position(byteData.position() + knownBoms[i].length); // skip BOM
+                break;
+            }
+        }
+        byteData.reset(); // rewind to original position
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper method to check if byte array starts with another
+private static boolean startsWith(byte[] bytes, byte[] prefix) {
+    if (bytes.length < prefix.length) return false;
+    for (int i = 0; i < prefix.length; i++) {
+        if (bytes[i]!= prefix[i]) return false;
+    }
+    return true;
+}
\ No newline at end of file
