diff --git a/tmp/ff3f8d3e-2431-42c3-b0a9-8b74c822157c_buggy.java b/tmp/72cf0325-e1b9-4c06-ac7e-02b8e51739d3_fixed.java
index 25ca093..7b66260 100644
--- a/tmp/ff3f8d3e-2431-42c3-b0a9-8b74c822157c_buggy.java
+++ b/tmp/72cf0325-e1b9-4c06-ac7e-02b8e51739d3_fixed.java
@@ -1,52 +1,83 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the provided byte data into a Document, handling BOM detection and charset overriding.
+ *
+ * @param byteData   The byte data to parse.
+ * @param charsetName The name of the charset to use for decoding (null to auto-detect).
+ * @param baseUri     The base URI for the document.
+ * @param parser      The parser to use for HTML parsing.
+ * @return The parsed Document.
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Look for BOM - overrides any other header or input
+    if (byteData.remaining() >= 4) { // Check for sufficient bytes to detect BOM
+        byte[] bomBytes = new byte[4];
+        byteData.mark(); // Mark current position to rewind later
+        byteData.get(bomBytes, 0, Math.min(4, byteData.remaining())); // Read up to 4 bytes
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Detect BOM for UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, UTF-32LE
+        if (matches(bomBytes, new byte[]{(byte) 0xEF, (byte) 0xBB, (byte) 0xBF})) { // UTF-8
+            charsetName = "UTF-8";
+        } else if (matches(bomBytes, new byte[]{(byte) 0xFE, (byte) 0xFF})) { // UTF-16BE
+            charsetName = "UTF-16BE";
+        } else if (matches(bomBytes, new byte[]{(byte) 0xFF, (byte) 0xFE})) { // UTF-16LE
+            charsetName = "UTF-16LE";
+        } else if (matches(bomBytes, new byte[]{(byte) 0x00, (byte) 0x00, (byte) 0xFE, (byte) 0xFF})) { // UTF-32BE
+            charsetName = "UTF-32BE";
+        } else if (matches(bomBytes, new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0x00, (byte) 0x00})) { // UTF-32LE
+            charsetName = "UTF-32LE";
+        }
+
+        byteData.reset(); // Rewind to original position
+    }
+
+    if (charsetName == null) { // Determine from meta. Safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta!= null) { // If not found, will keep UTF-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // Need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // Specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+// Helper method to match byte arrays (up to the length of the expected BOM)
+private static boolean matches(byte[] bytes, byte[] expectedBom) {
+    for (int i = 0; i < expectedBom.length && i < bytes.length; i++) {
+        if (bytes[i]!= expectedBom[i]) {
+            return false;
+        }
+    }
+    return true;
+}
\ No newline at end of file
