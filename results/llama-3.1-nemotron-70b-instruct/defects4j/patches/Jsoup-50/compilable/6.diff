diff --git a/tmp/826f9cf7-91b5-4f81-ab2f-88e127086240_buggy.java b/tmp/cdf3e270-8a1e-4ee9-b8eb-3fd80a9501db_fixed.java
index 25ca093..67a5a05 100644
--- a/tmp/826f9cf7-91b5-4f81-ab2f-88e127086240_buggy.java
+++ b/tmp/cdf3e270-8a1e-4ee9-b8eb-3fd80a9501db_fixed.java
@@ -1,52 +1,81 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses byte data into a Document, detecting or using the provided charset.
+ * 
+ * @param byteData   The byte data to parse.
+ * @param charsetName The character set to use. If null, will attempt to detect from HTML.
+ * @param baseUri    The base URI for the document.
+ * @param parser     The parser to use for parsing the document.
+ * @return The parsed Document.
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Look for BOM - overrides any other header or input
+    if (byteData.remaining() >= 4) { // minimum BOM length (UTF-32)
+        byte[] bom = new byte[4];
+        byteData.mark();
+        byteData.get(bom, 0, Math.min(4, byteData.remaining()));
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // Check for UTF-32 BOMs
+        if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+            charsetName = "UTF-32BE";
+            byteData.position(4); // skip BOM
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+            charsetName = "UTF-32LE";
+            byteData.position(4); // skip BOM
+        }
+        // Check for UTF-16 BOMs
+        else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+            charsetName = "UTF-16BE";
+            byteData.position(2); // skip BOM
+        } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+            charsetName = "UTF-16LE";
+            byteData.position(2); // skip BOM
+        }
+        // Check for UTF-8 BOM
+        else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+            charsetName = "UTF-8";
+            byteData.position(3); // skip BOM
+        }
+    }
+
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
