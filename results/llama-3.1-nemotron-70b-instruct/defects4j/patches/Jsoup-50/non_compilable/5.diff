diff --git a/tmp/5f5dd431-6ddd-449b-b2a1-d6efc495e12c_buggy.java b/tmp/d8fb7fc1-9fd2-4cff-9bce-0867696b6f34_fixed.java
index 25ca093..682d909 100644
--- a/tmp/5f5dd431-6ddd-449b-b2a1-d6efc495e12c_buggy.java
+++ b/tmp/d8fb7fc1-9fd2-4cff-9bce-0867696b6f34_fixed.java
@@ -1,52 +1,85 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM first, overrides any other header or input
+    byteData.mark();
+    byte[] bom = new byte[4];
+    byteData.get(bom, 0, Math.min(bom.length, byteData.remaining()));
+    byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    String detectedCharset = null;
+    switch (bom[0]) {
+        case (byte) 0xFE:
+            if (bom[1] == (byte) 0xFF) { // UTF-16BE
+                detectedCharset = "UTF-16BE";
+            }
+            break;
+        case (byte) 0xFF:
+            if (bom[1] == (byte) 0xFE) { // UTF-16LE
+                detectedCharset = "UTF-16LE";
+            }
+            break;
+        case (byte) 0x00:
+            if (bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) { // UTF-32BE
+                detectedCharset = "UTF-32BE";
+            }
+            break;
+        case (byte) 0xFF:
+            if (bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) { // UTF-32LE
+                detectedCharset = "UTF-32LE";
+            }
+            break;
+        case (byte) 0xEF:
+            if (bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { // UTF-8
+                detectedCharset = "UTF-8";
+            }
+            break;
+    }
+
+    if (detectedCharset!= null) {
+        charsetName = detectedCharset;
+        byteData.position(detectedCharset.equals("UTF-32BE") || detectedCharset.equals("UTF-32LE")? 4 : 2); // skip BOM
+    } else if (charsetName == null) { 
+        // determine from meta. safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta!= null) { 
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
+        if (detectedCharset == null) {
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        } else {
+            docData = Charset.forName(detectedCharset).decode(byteData).toString();
+        }
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName!= null? charsetName : detectedCharset);
     }
     return doc;
 }
\ No newline at end of file
