diff --git a/tmp/2497fb53-9a80-4190-a44e-35cc8f684a3e_buggy.java b/tmp/199ea286-72a0-4815-9683-075d214e463e_fixed.java
index b98f0a7..e176d90 100644
--- a/tmp/2497fb53-9a80-4190-a44e-35cc8f684a3e_buggy.java
+++ b/tmp/199ea286-72a0-4815-9683-075d214e463e_fixed.java
@@ -1,29 +1,44 @@
+/**
+ * Traverse a NEW expression, updating the flow scope and type annotations.
+ * 
+ * @param n     Node representing the NEW expression
+ * @param scope Current flow scope
+ * @return Updated flow scope
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
-        }
-      }
-    }
-    n.setJSType(type);
+          // Fix: Backward type inference for NEW expression arguments
           for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+            JSType argType = arg.getJSType();
+            if (argType!= null && type!= null) {
+              JSType paramType = ct.getParameterType(arg.getChildIndex());
+              if (paramType!= null) {
+                type = type.restrictByType(argType.restrictByType(paramType));
+                arg.setJSType(argType.restrictByType(paramType));
+              }
+            }
             scope = traverse(arg, scope);
           }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
