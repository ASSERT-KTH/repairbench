diff --git a/tmp/0eb7d058-de8f-48a6-9fb0-1e866d90d77f_buggy.java b/tmp/fc994e0a-182d-4d9b-9600-2fb79830fd43_fixed.java
index b98f0a7..6215830 100644
--- a/tmp/0eb7d058-de8f-48a6-9fb0-1e866d90d77f_buggy.java
+++ b/tmp/fc994e0a-182d-4d9b-9600-2fb79830fd43_fixed.java
@@ -1,29 +1,53 @@
+/**
+ * Traverse a 'new' expression, updating the scope and type information.
+ * 
+ * @param n     the 'new' expression node
+ * @param scope the current flow scope
+ * @return the updated flow scope
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType!= null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct!= null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Fix: Traverse constructor parameters for possible backwards type inference
+        Node paramNode = constructor.getFirstChild();
+        if (paramNode!= null) {
+          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+            scope = traverseWithParamType(scope, arg, paramNode, ct);
+            paramNode = paramNode.getNext();
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
+
+// Assuming traverseWithParamType is defined elsewhere, if not, here is a basic implementation:
+// 
+// private FlowScope traverseWithParamType(FlowScope scope, Node arg, Node paramNode, FunctionType ct) {
+//   JSType paramType = ct.getParameterType(paramNode.getIndex());
+//   if (paramType!= null) {
+//     scope = scope.withAddedBinding(arg.getString(), paramType);
+//   }
+//   return traverse(arg, scope);
+// }
\ No newline at end of file
