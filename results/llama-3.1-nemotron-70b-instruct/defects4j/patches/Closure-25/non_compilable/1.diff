diff --git a/tmp/9f7fd73c-20a9-4b7c-a5c6-c178f075474c_buggy.java b/tmp/1ac41a03-3813-413c-8192-8432f040fe67_fixed.java
index b98f0a7..e76e7aa 100644
--- a/tmp/9f7fd73c-20a9-4b7c-a5c6-c178f075474c_buggy.java
+++ b/tmp/1ac41a03-3813-413c-8192-8432f040fe67_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // BACKWARDS INFERENCE: infer type of 'new' args from constructor params
+          Node firstArg = constructor.getNext();
+          if (firstArg!= null) {
+            JSType paramType = ct.getParamTypes().get(0);
+            if (paramType!= null) {
+              firstArg.setJSType(paramType);
+              scope = traverse(firstArg, scope); // re-traverse with updated type
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+      if (arg.getJSType() == null) { // only traverse if type wasn't just set
         scope = traverse(arg, scope);
       }
+    }
     return scope;
 }
\ No newline at end of file
