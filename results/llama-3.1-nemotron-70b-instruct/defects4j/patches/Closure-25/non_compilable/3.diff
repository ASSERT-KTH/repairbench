diff --git a/tmp/15474e03-64b5-47a3-b74a-95027acaa8a9_buggy.java b/tmp/0742d58f-e7be-4011-abf9-f935b1dc9ebc_fixed.java
index b98f0a7..f979702 100644
--- a/tmp/15474e03-64b5-47a3-b74a-95027acaa8a9_buggy.java
+++ b/tmp/0742d58f-e7be-4011-abf9-f935b1dc9ebc_fixed.java
@@ -1,29 +1,48 @@
+/**
+ * Traverse a NEW expression, propagating flow scope.
+ * 
+ * @param n    Node representing the NEW expression
+ * @param scope Current flow scope
+ * @return Updated flow scope
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // *** FIX INTRODUCED HERE ***
+          // Backward inference for constructor arguments
+          Node arg = constructor.getNext();
+          if (arg!= null && type!= null) {
+            JSType argType = arg.getJSType();
+            if (argType!= null) {
+              JSType inferredArgType = ct.getParameters()[0].getType();
+              if (inferredArgType!= null) {
+                arg.getJSType().restrict(inferredArgType);
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
