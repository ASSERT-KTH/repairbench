diff --git a/tmp/230a040a-cead-43b5-834b-bd97b1795fb8_buggy.java b/tmp/bc0cf473-a7b6-4405-963d-3785e65184ec_fixed.java
index b98f0a7..6076e2d 100644
--- a/tmp/230a040a-cead-43b5-834b-bd97b1795fb8_buggy.java
+++ b/tmp/bc0cf473-a7b6-4405-963d-3785e65184ec_fixed.java
@@ -1,29 +1,44 @@
+/**
+ * Traverse a `new` expression, updating the flow scope.
+ * 
+ * @param n     the `new` expression node
+ * @param scope the current flow scope
+ * @return the updated flow scope
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Fix: Perform backwards inference for constructor arguments
+          for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
+            scope = traverseForBackwardsInference(arg, scope, ct, type);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
+
+// Note: The `traverseForBackwardsInference` method is assumed to be already defined elsewhere in the codebase.
+// If not, its implementation would be required to complete the fix. It should perform backwards type inference for 
+// constructor arguments based on the constructor's type and the inferred instance type.
\ No newline at end of file
