diff --git a/tmp/260283a7-65a0-4195-8060-6c089c14ca20_buggy.java b/tmp/d490c4ae-3b14-40e6-9685-9afd7d3b702d_fixed.java
index b98f0a7..277c92c 100644
--- a/tmp/260283a7-65a0-4195-8060-6c089c14ca20_buggy.java
+++ b/tmp/d490c4ae-3b14-40e6-9685-9afd7d3b702d_fixed.java
@@ -1,29 +1,45 @@
+/**
+ * Traverse a 'new' expression, updating the flow scope as necessary.
+ *
+ * @param n     the 'new' expression node
+ * @param scope the current flow scope
+ * @return the updated flow scope
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct!= null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // FIX: Infer type of 'this' argument from constructor parameters
+                if (ct.getParameterTypes().length > 0) {
+                    JSType paramType = ct.getParameterTypes()[0];
+                    if (paramType.isObjectType()) {
+                        Node arg = constructor.getNext();
+                        if (arg!= null) {
+                            arg.setJSType(paramType); // Set type of argument for backwards inference
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
