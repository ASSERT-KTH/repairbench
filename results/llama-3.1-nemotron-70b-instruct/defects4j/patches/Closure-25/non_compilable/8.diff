diff --git a/tmp/7e7df400-9eca-4ac2-8bc3-ae2c9bfe0116_buggy.java b/tmp/5df4ff20-3a4e-4198-8e68-71e6b8bb9c5b_fixed.java
index b98f0a7..07c0613 100644
--- a/tmp/7e7df400-9eca-4ac2-8bc3-ae2c9bfe0116_buggy.java
+++ b/tmp/5df4ff20-3a4e-4198-8e68-71e6b8bb9c5b_fixed.java
@@ -1,29 +1,33 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Fix: Infer argument types and apply to scope for backwards inference
+          JSType[] paramTypes = ct.getParamTypes();
+          if (paramTypes.length > 0) {
+            Node arg = constructor.getNext();
+            if (arg!= null) {
+              scope = inferBackwardsType(arg, paramTypes[0], scope);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
