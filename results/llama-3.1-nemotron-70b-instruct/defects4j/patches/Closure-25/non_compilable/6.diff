diff --git a/tmp/dbb5f6d1-e90c-4832-b95a-38bf12e85f00_buggy.java b/tmp/4a35da0f-a576-4fdd-b712-b57173ae1ab2_fixed.java
index b98f0a7..12c44a8 100644
--- a/tmp/dbb5f6d1-e90c-4832-b95a-38bf12e85f00_buggy.java
+++ b/tmp/4a35da0f-a576-4fdd-b712-b57173ae1ab2_fixed.java
@@ -1,29 +1,33 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Fix: Backward inference for constructor arguments
+          if (n.getChildCount() > 1) { // Node has arguments
+            Node arg = constructor.getNext();
+            JSType paramType = ct.getParameterTypes().isEmpty()? 
+                                getNativeType(UNKNOWN_TYPE) : 
+                                ct.getParameterTypes().get(0);
+            scope = inferBackwardType(arg, paramType, scope);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
