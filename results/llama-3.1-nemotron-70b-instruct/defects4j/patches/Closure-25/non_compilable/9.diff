diff --git a/tmp/5393208f-0516-4b8b-8894-6fc5a45cd3e2_buggy.java b/tmp/4d9cb55b-cb13-4614-92a0-80cf4ebad056_fixed.java
index b98f0a7..6ac7cbf 100644
--- a/tmp/5393208f-0516-4b8b-8894-6fc5a45cd3e2_buggy.java
+++ b/tmp/4d9cb55b-cb13-4614-92a0-80cf4ebad056_fixed.java
@@ -1,29 +1,45 @@
+/**
+ * Fixes backwards type inference for 'new' expressions by propagating 
+ * constructor parameter types to the argument nodes.
+ */
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType!= null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+          // Handle NoObjectType as a valid FunctionType
           ct = (FunctionType) constructorType;
         }
         if (ct!= null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Fix: Propagate constructor parameter types to argument nodes
+          JSType[] paramTypes = ct.getParameterTypes();
+          Node arg = constructor.getNext();
+          for (int i = 0; i < paramTypes.length && arg!= null; i++, arg = arg.getNext()) {
+            arg.setJSType(paramTypes[i]);
+            scope = traverse(arg, scope);
           }
+          // Traverse any remaining arguments without type propagation
+          while (arg!= null) {
+            scope = traverse(arg, scope);
+            arg = arg.getNext();
           }
-    }
-    n.setJSType(type);
+        } else {
+          // No change for non-constructor or unknown types
           for (Node arg = constructor.getNext(); arg!= null; arg = arg.getNext()) {
             scope = traverse(arg, scope);
           }
+        }
+      }
+    }
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
