diff --git a/tmp/34c89bb2-f2ae-47f0-95b9-4bfdd92b49ea_buggy.java b/tmp/3f277fc5-3ad3-4c83-925a-e8303489103e_fixed.java
index 40f74f7..3b9f3a3 100644
--- a/tmp/34c89bb2-f2ae-47f0-95b9-4bfdd92b49ea_buggy.java
+++ b/tmp/3f277fc5-3ad3-4c83-925a-e8303489103e_fixed.java
@@ -1,50 +1,59 @@
+/**
+ * Fixes the testNode function to correctly handle namespace prefixes and URIs.
+ * 
+ * @param node the Node to test
+ * @param test the NodeTest to apply
+ * @return true if the node passes the test, false otherwise
+ */
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType()!= Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
-            boolean wildcard = nodeNameTest.isWildcard();
+        String namespaceURI = testName.getNamespaceURI();
+        boolean wildcard = testName.getName().equals("*"); // Corrected wildcard check
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
-                String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+        if ((wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node)))
+            && (namespaceURI.equals("*") || namespaceURI.equals(DOMNodePointer.getNamespaceURI(node)))) {
+            // Corrected namespace URI comparison to handle wildcard namespace URI
+            if (testPrefix!= null) {
+                return testPrefix.equals(DOMNodePointer.getPrefix(node));
+            }
+            return true; // No prefix specified in test, so pass regardless of node's prefix
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
