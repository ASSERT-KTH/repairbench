diff --git a/tmp/ef4e8f4b-09e5-4378-8fae-5d4dc002de0f_buggy.java b/tmp/9dcd9c27-9a91-4ca8-afe7-3e10d3015916_fixed.java
index 40f74f7..aff71c9 100644
--- a/tmp/ef4e8f4b-09e5-4378-8fae-5d4dc002de0f_buggy.java
+++ b/tmp/9dcd9c27-9a91-4ca8-afe7-3e10d3015916_fixed.java
@@ -1,50 +1,62 @@
+/**
+ * Fixed version of the testNode function
+ * 
+ * @param node Node to be tested
+ * @param test NodeTest to be applied
+ * @return true if the node passes the test, false otherwise
+ */
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType()!= Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
-            String namespaceURI = nodeNameTest.getNamespaceURI();
+        String namespaceURI = testName.getNamespaceURI(); // Fixed: get namespace from QName
+        String localName = testName.getLocalPart(); // Added: get local name from QName
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
         if (wildcard 
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            || localName.equals(DOMNodePointer.getLocalName(node))) { // Fixed: compare local names
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
             return equalStrings(namespaceURI, nodeNS);
         }
+        // Added: handle case where prefix is present in test
+        if (testPrefix!= null && testPrefix.equals(DOMNodePointer.getPrefix(node)) 
+            && localName.equals(DOMNodePointer.getLocalName(node))) {
+            return equalStrings(namespaceURI, DOMNodePointer.getNamespaceURI(node));
+        }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
