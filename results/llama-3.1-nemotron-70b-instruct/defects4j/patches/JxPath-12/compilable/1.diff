diff --git a/tmp/a34b58ef-b221-44ce-98cf-02bb77e4bbcf_buggy.java b/tmp/58269935-9728-4470-bce4-bb4233fa8259_fixed.java
index 40f74f7..67e9c59 100644
--- a/tmp/a34b58ef-b221-44ce-98cf-02bb77e4bbcf_buggy.java
+++ b/tmp/58269935-9728-4470-bce4-bb4233fa8259_fixed.java
@@ -1,50 +1,61 @@
+/**
+ * Fixed version of the testNode function to handle namespace prefixes correctly.
+ *
+ * @param node  the node to test
+ * @param test  the node test to apply
+ * @return      true if the node passes the test, false otherwise
+ */
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType()!= Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
+        
+        // Fix: Handle wildcard with null prefix and namespace URI comparison
         if (wildcard && testPrefix == null) {
-                return true;
+            return namespaceURI.equals("*") || DOMNodePointer.getNamespaceURI(node) == null;
         }
+        
+        // Fix: Compare prefix and local name separately for more accurate matching
         if (wildcard 
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            || (testName.getPrefix() == null? node.getLocalName() : node.getPrefix() + ":" + node.getLocalName())
+                   .equals(testName.toString())) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+            return equalStrings(namespaceURI, nodeNS) || (namespaceURI.equals("*") && nodeNS!= null);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE :
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT :
                 return nodeType == Node.CDATA_SECTION_NODE
                     || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT :
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI :
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
