diff --git a/tmp/ad1935cd-0eff-4878-99f3-8ecbebcfc8b5_buggy.java b/tmp/d86c568c-148b-47a9-a6ad-34a2cb7bcca6_fixed.java
index 66bb99f..746ad59 100644
--- a/tmp/ad1935cd-0eff-4878-99f3-8ecbebcfc8b5_buggy.java
+++ b/tmp/d86c568c-148b-47a9-a6ad-34a2cb7bcca6_fixed.java
@@ -1,14 +1,18 @@
+/**
+ * Fixed deserialize function to handle END_OBJECT token for empty objects
+ */
 @Override
 public ObjectNode deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
-            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+    switch (p.getCurrentToken()) {
+        case START_OBJECT:
             p.nextToken();
             return deserializeObject(p, ctxt, ctxt.getNodeFactory());
-            }
-            // 23-Sep-2015, tatu: Ugh. We may also be given END_OBJECT (similar to FIELD_NAME),
-            //    if caller has advanced to the first token of Object, but for empty Object
-            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+        case FIELD_NAME: // caller advanced to first token of non-empty Object
             return deserializeObject(p, ctxt, ctxt.getNodeFactory());
-            }
+        case END_OBJECT: // added to handle empty Objects
+            return ctxt.getNodeFactory().objectNode();
+        default:
             throw ctxt.mappingException(ObjectNode.class);
     }
+}
\ No newline at end of file
