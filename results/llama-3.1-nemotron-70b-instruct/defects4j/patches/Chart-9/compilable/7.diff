diff --git a/tmp/855126a2-86d1-4f99-9752-8eb0a68a6902_buggy.java b/tmp/59204d5c-7c7f-4ee1-99ef-7a20ed89e10e_fixed.java
index b4af58a..1d6b7b4 100644
--- a/tmp/855126a2-86d1-4f99-9752-8eb0a68a6902_buggy.java
+++ b/tmp/59204d5c-7c7f-4ee1-99ef-7a20ed89e10e_fixed.java
@@ -1,53 +1,52 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the first time period to copy (<code>null</code> not
  *         permitted).
  * @param end  the last time period to copy (<code>null</code> not
  *         permitted).
  *
  * @return A time series containing a copy of this time series from start
  *         until end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)
     throws CloneNotSupportedException {
 
     if (start == null) {
         throw new IllegalArgumentException("Null 'start' argument.");
     }
     if (end == null) {
         throw new IllegalArgumentException("Null 'end' argument.");
     }
-        if (start.compareTo(end) > 0) {
+    if (start.compareTo(end) >= 0) { // Fix: changed from '>' to '>='
         throw new IllegalArgumentException(
-                    "Requires start on or before end.");
+                "Requires start before end.");
     }
     boolean emptyRange = false;
     int startIndex = getIndex(start);
     if (startIndex < 0) {
         startIndex = -(startIndex + 1);
         if (startIndex == this.data.size()) {
             emptyRange = true;  // start is after last data item
         }
     }
     int endIndex = getIndex(end);
     if (endIndex < 0) {             // end period is not in original series
         endIndex = -(endIndex + 1); // this is first item AFTER end period
         endIndex = endIndex - 1;    // so this is last item BEFORE end
     }
     if (endIndex < 0) {
         emptyRange = true;
     }
     if (emptyRange) {
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         return copy;
     }
     else {
         return createCopy(startIndex, endIndex);
     }
-
 }
\ No newline at end of file
