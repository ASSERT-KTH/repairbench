diff --git a/tmp/d8fee73c-c406-464a-8bf6-d0f1f66c18d8_buggy.java b/tmp/4de106e0-0c6c-4e7f-92e4-676f38030f43_fixed.java
index b36b2a9..eeadf8d 100644
--- a/tmp/d8fee73c-c406-464a-8bf6-d0f1f66c18d8_buggy.java
+++ b/tmp/4de106e0-0c6c-4e7f-92e4-676f38030f43_fixed.java
@@ -1,26 +1,46 @@
 JSType meet(JSType that) {
   UnionTypeBuilder builder = new UnionTypeBuilder(registry);
+  
+  // Check if 'that' is a subtype of any alternate in this union
   for (JSType alternate : alternates) {
     if (alternate.isSubtype(that)) {
       builder.addAlternate(alternate);
     }
   }
 
+  // If 'that' is a union type, check each of its alternates
   if (that instanceof UnionType) {
     for (JSType otherAlternate : ((UnionType) that).alternates) {
+      // Check if any alternate in 'that' is a subtype of this union
       if (otherAlternate.isSubtype(this)) {
         builder.addAlternate(otherAlternate);
       }
+      // Additionally, check if any alternate in this union is a subtype of the alternates in 'that'
+      for (JSType alternate : alternates) {
+        if (alternate.isSubtype(otherAlternate)) {
+          builder.addAlternate(alternate);
         }
-    } else if (that.isSubtype(this)) {
+      }
+    }
+  } else {
+    // If 'that' is not a union type, simply check if it's a subtype of this union
+    if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
+    // Also, check if any alternate in this union is a subtype of 'that'
+    for (JSType alternate : alternates) {
+      if (alternate.isSubtype(that)) {
+        builder.addAlternate(alternate);
+      }
+    }
+  }
+  
   JSType result = builder.build();
   if (result!= null) {
     return result;
   } else if (this.isObject() && that.isObject()) {
     return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
   } else {
     return getNativeType(JSTypeNative.NO_TYPE);
   }
 }
\ No newline at end of file
