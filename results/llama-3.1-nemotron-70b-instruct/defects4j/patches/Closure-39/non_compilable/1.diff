diff --git a/tmp/588c12bd-6737-4691-9115-571e2e566969_buggy.java b/tmp/4fa01842-0358-49e8-96c1-ee5fb1fb2183_fixed.java
index e4d90e7..9f23e50 100644
--- a/tmp/588c12bd-6737-4691-9115-571e2e566969_buggy.java
+++ b/tmp/4fa01842-0358-49e8-96c1-ee5fb1fb2183_fixed.java
@@ -1,45 +1,51 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
-      }
+    Set<JSType> visitedTypes = new HashSet<>(); // Track visited types to handle recursion
+    collectPropertyNames(propertyNames, visitedTypes, this, MAX_PRETTY_PRINTED_PROPERTIES);
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(",...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
+
+// New helper method to collect property names while tracking visited types
+private void collectPropertyNames(Set<String> propertyNames, Set<JSType> visitedTypes, ObjectType current, int maxProperties) {
+  if (current == null || current.isNativeObjectType() || visitedTypes.contains(current) || propertyNames.size() >= maxProperties) {
+    return;
+  }
+  visitedTypes.add(current);
+  propertyNames.addAll(current.getOwnPropertyNames());
+  collectPropertyNames(propertyNames, visitedTypes, current.getImplicitPrototype(), maxProperties);
+}
\ No newline at end of file
