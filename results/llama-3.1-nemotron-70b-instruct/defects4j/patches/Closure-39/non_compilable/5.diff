diff --git a/tmp/8393959a-bbff-48ea-a521-ecfe7c65ba1d_buggy.java b/tmp/6b08eac1-27a6-4e05-bb06-e0067f5ed794_fixed.java
index e4d90e7..fecfb61 100644
--- a/tmp/8393959a-bbff-48ea-a521-ecfe7c65ba1d_buggy.java
+++ b/tmp/6b08eac1-27a6-4e05-bb06-e0067f5ed794_fixed.java
@@ -1,45 +1,68 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current!= null &&!current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        
+        // FIX: handle recursive types and show additional properties for annotation strings
+        JSType propertyType = getPropertyType(property);
+        if (propertyType.equals(this) && forAnnotations) {
+          sb.append("?"); // indicate recursive type for annotations
+        } else if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES && i == MAX_PRETTY_PRINTED_PROPERTIES - 1) {
+          sb.append("...");
+          for (String additionalProperty : getPropertyNamesNotIn(propertyNames, MAX_PRETTY_PRINTED_PROPERTIES)) {
+            sb.append(", ").append(additionalProperty).append(": ").append(getPropertyType(additionalProperty).toString());
+          }
+        } else {
+          sb.append(propertyType.toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
 }
+
+// Helper function to get additional properties not in the initial set
+private Set<String> getPropertyNamesNotIn(Set<String> initialSet, int maxInitialSize) {
+    Set<String> allPropertyNames = Sets.newTreeSet();
+    for (ObjectType current = this;
+         current!= null &&!current.isNativeObjectType();
+         current = current.getImplicitPrototype()) {
+      allPropertyNames.addAll(current.getOwnPropertyNames());
+    }
+    allPropertyNames.removeAll(initialSet);
+    return Sets.newTreeSet CollectionsUtils.limit(allPropertyNames, maxInitialSize));
+}
\ No newline at end of file
