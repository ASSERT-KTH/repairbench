diff --git a/tmp/94d1440d-c226-40a8-b8c6-e0d61e5af842_buggy.java b/tmp/5a96e7af-f33d-4c9b-941f-31d702533a7b_fixed.java
index e4d90e7..93120a9 100644
--- a/tmp/94d1440d-c226-40a8-b8c6-e0d61e5af842_buggy.java
+++ b/tmp/5a96e7af-f33d-4c9b-941f-31d702533a7b_fixed.java
@@ -1,45 +1,52 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
+    Set<JSType> visitedTypes = Sets.newHashSet(); // Track visited types to avoid infinite recursion
+    ObjectType current = this;
+    while (current!= null &&!current.isNativeObjectType() &&
+           propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES &&
+           visitedTypes.add(current)) { // Check if current type has been visited
       propertyNames.addAll(current.getOwnPropertyNames());
+      current = current.getImplicitPrototype();
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propertyType = getPropertyType(property);
+      if (visitedTypes.contains(propertyType)) { // If type has been visited, truncate to '...'
+        sb.append("{...}");
+      } else {
+        sb.append(propertyType.toString());
+      }
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(",...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
