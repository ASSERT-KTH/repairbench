diff --git a/tmp/d0cda8f7-2d14-407a-bf87-6e616d759f6a_buggy.java b/tmp/7f33acad-72ae-4f52-b881-94deafcbe0e5_fixed.java
index e4d90e7..02ecfc8 100644
--- a/tmp/d0cda8f7-2d14-407a-bf87-6e616d759f6a_buggy.java
+++ b/tmp/7f33acad-72ae-4f52-b881-94deafcbe0e5_fixed.java
@@ -1,45 +1,56 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current!= null &&!current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
-        sb.append(property);
-        sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propertyType = getPropertyType(property);
+      if (propertyType instanceof ObjectType && ((ObjectType) propertyType).hasReferenceName()) {
+        // If the property type has a reference name, use its annotation string to avoid recursion
+        sb.append(property).append(": ").append(((ObjectType) propertyType).toAnnotationString());
+      } else {
+        sb.append(property).append(": ").append(propertyType.toString());
+      }
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
+        int remaining = propertyNames.size() - i;
+        if (remaining == 1) {
+          // If there's only one remaining property, print it
+          String remainingProperty = propertyNames.iterator().next();
+          sb.append(", ").append(remainingProperty).append(": ").append(getPropertyType(remainingProperty).toString());
+        } else {
+          sb.append(",... (").append(remaining).append(" more)");
+        }
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
