diff --git a/tmp/43772791-7a7c-47fa-907c-29c6653a9f4c_buggy.java b/tmp/9f890765-e755-4452-9c24-f69ba22215b1_fixed.java
index e4d90e7..05d679c 100644
--- a/tmp/43772791-7a7c-47fa-907c-29c6653a9f4c_buggy.java
+++ b/tmp/9f890765-e755-4452-9c24-f69ba22215b1_fixed.java
@@ -1,45 +1,64 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
-      for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
-           current = current.getImplicitPrototype()) {
-        propertyNames.addAll(current.getOwnPropertyNames());
-      }
+    Set<JSType> visitedTypes = Sets.newHashSet(); // Track visited types to handle recursion
+    collectPropertyNames(this, propertyNames, visitedTypes, MAX_PRETTY_PRINTED_PROPERTIES);
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
       sb.append(getPropertyType(property).toString());
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(",...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
+
+// New helper method to collect property names while handling recursion
+private void collectPropertyNames(
+    ObjectType current, 
+    Set<String> propertyNames, 
+    Set<JSType> visitedTypes, 
+    int maxProperties) {
+  if (current == null || current.isNativeObjectType() || visitedTypes.contains(current)) {
+    return;
+  }
+  visitedTypes.add(current);
+
+  for (String propertyName : current.getOwnPropertyNames()) {
+    propertyNames.add(propertyName);
+    if (propertyNames.size() == maxProperties) {
+      break;
+    }
+  }
+
+  if (propertyNames.size() < maxProperties) {
+    collectPropertyNames(current.getImplicitPrototype(), propertyNames, visitedTypes, maxProperties);
+  }
+}
\ No newline at end of file
