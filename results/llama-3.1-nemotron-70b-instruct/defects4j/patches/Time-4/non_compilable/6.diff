diff --git a/tmp/206db716-ab59-446e-ae9a-e87b8ac8762e_buggy.java b/tmp/899455d3-661e-4924-a9f8-5bc080f56d15_fixed.java
index 7ea7ac9..9aad5e5 100644
--- a/tmp/206db716-ab59-446e-ae9a-e87b8ac8762e_buggy.java
+++ b/tmp/899455d3-661e-4924-a9f8-5bc080f56d15_fixed.java
@@ -1,63 +1,70 @@
 /**
  * Gets a copy of this date with the specified field set to a new value.
  * <p>
  * If this partial did not previously support the field, the new one will.
  * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
  * <p>
  * For example, if the field type is <code>dayOfMonth</code> then the day
  * would be changed/added in the returned instance.
  *
  * @param fieldType  the field type to set, not null
  * @param value  the value to set
  * @return a copy of this instance with the field set
  * @throws IllegalArgumentException if the value is null or invalid
  */
 public Partial with(DateTimeFieldType fieldType, int value) {
     if (fieldType == null) {
         throw new IllegalArgumentException("The field type must not be null");
     }
     int index = indexOf(fieldType);
     if (index == -1) {
+        // Check if the field type is incompatible with existing fields
+        for (int i = 0; i < iTypes.length; i++) {
+            if (!iTypes[i].getFieldType().isCompatible(fieldType.getFieldType())) {
+                throw new IllegalArgumentException("Field type is incompatible with existing fields");
+            }
+        }
+        
         DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
         int[] newValues = new int[newTypes.length];
         
         // find correct insertion point to keep largest-smallest order
         int i = 0;
         DurationField unitField = fieldType.getDurationType().getField(iChronology);
         if (unitField.isSupported()) {
             for (; i < iTypes.length; i++) {
                 DateTimeFieldType loopType = iTypes[i];
                 DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
                 if (loopUnitField.isSupported()) {
                     int compare = unitField.compareTo(loopUnitField);
                     if (compare > 0) {
                         break;
                     } else if (compare == 0) {
                         DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                         DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                         if (rangeField.compareTo(loopRangeField) > 0) {
                             break;
                         }
                     }
                 }
             }
         }
         System.arraycopy(iTypes, 0, newTypes, 0, i);
         System.arraycopy(iValues, 0, newValues, 0, i);
         newTypes[i] = fieldType;
         newValues[i] = value;
         System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
         System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
         // use public constructor to ensure full validation
         // this isn't overly efficient, but is safe
         Partial newPartial = new Partial(iChronology, newTypes, newValues);
         iChronology.validate(newPartial, newValues);
         return newPartial;
     }
     if (value == getValue(index)) {
         return this;
     }
     int[] newValues = getValues();
     newValues = getField(index).set(this, index, newValues, value);
     return new Partial(this, newValues);
 }
\ No newline at end of file
