diff --git a/tmp/40278d7c-b702-4cfa-8dbb-a1684d82ad19_buggy.java b/tmp/51d2a06b-f6c3-4d9b-9369-6aa9b28a6f0b_fixed.java
index 4aff4e4..1cc272e 100644
--- a/tmp/40278d7c-b702-4cfa-8dbb-a1684d82ad19_buggy.java
+++ b/tmp/51d2a06b-f6c3-4d9b-9369-6aa9b28a6f0b_fixed.java
@@ -1,15 +1,28 @@
+/**
+ * Tests if the provided attribute value starts with any of the allowed protocols.
+ * 
+ * @param el         Element containing the attribute
+ * @param attr       Attribute to check
+ * @param protocols  Set of allowed protocols
+ * @return true if the attribute value starts with an allowed protocol, false otherwise
+ */
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
     String value = el.absUrl(attr.getKey());
     if (!preserveRelativeLinks)
         attr.setValue(value);
     
+    // Check for custom protocols (e.g., 'cid', 'data') without a colon (:)
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String protWithColon = protocol.toString() + ":";
+        String protWithoutColon = protocol.toString();
+        
+        if (value.toLowerCase().startsWith(protWithColon) || 
+            // Special case for protocols without a colon (e.g., 'cid', 'data')
+            (value.toLowerCase().equals(protWithoutColon) || value.toLowerCase().startsWith(protWithoutColon + "/"))) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
