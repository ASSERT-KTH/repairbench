diff --git a/tmp/9527da44-e0e0-46b0-bcca-ee507e2a2318_buggy.java b/tmp/990c944d-d2f2-4f3c-b04c-196442e7741a_fixed.java
index 4aff4e4..a1f628a 100644
--- a/tmp/9527da44-e0e0-46b0-bcca-ee507e2a2318_buggy.java
+++ b/tmp/990c944d-d2f2-4f3c-b04c-196442e7741a_fixed.java
@@ -1,15 +1,29 @@
+/**
+ * Tests if an element's attribute value conforms to any of the specified protocols.
+ * 
+ * @param el         the HTML element to check
+ * @param attr       the attribute to validate
+ * @param protocols  the set of allowed protocols
+ * @return true if the attribute value matches any of the protocols, false otherwise
+ */
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
     String value = el.absUrl(attr.getKey());
     if (!preserveRelativeLinks)
         attr.setValue(value);
     
+    // Convert value to lowercase for case-insensitive comparison
+    String valueLower = value.toLowerCase();
+    
+    // Check for custom protocols without the trailing colon (:)
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String protWithColon = protocol.toString().toLowerCase() + ":";
+        String protWithoutColon = protocol.toString().toLowerCase();
+        
+        if (valueLower.startsWith(protWithColon) || valueLower.equals(protWithoutColon)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
