diff --git a/tmp/a0bef243-a21e-4bc1-94fe-5975a37eb720_buggy.java b/tmp/b74ec030-74e3-4d08-89d1-106398f03045_fixed.java
index 4aff4e4..691589b 100644
--- a/tmp/a0bef243-a21e-4bc1-94fe-5975a37eb720_buggy.java
+++ b/tmp/b74ec030-74e3-4d08-89d1-106398f03045_fixed.java
@@ -1,15 +1,33 @@
+/**
+ * Tests if the attribute's URL conforms to one of the specified protocols.
+ * Resolves relative URLs to absolute, and updates the attribute if necessary.
+ * 
+ * @param el         Element containing the attribute
+ * @param attr       Attribute to test
+ * @param protocols  Allowed protocols
+ * @return True if the attribute's URL conforms to one of the allowed protocols
+ */
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
     // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
     // rels without a baseuri get removed
+    String originalValue = attr.getValue();
     String value = el.absUrl(attr.getKey());
     if (!preserveRelativeLinks)
         attr.setValue(value);
     
+    // Check original value to allow custom protocols without a colon (e.g., "cid", "data")
     for (Protocol protocol : protocols) {
+        if (protocol.hasColon()) {
             String prot = protocol.toString() + ":";
             if (value.toLowerCase().startsWith(prot)) {
                 return true;
             }
+        } else {
+            if (originalValue.equalsIgnoreCase(protocol.toString()) 
+                || (originalValue.startsWith(protocol.toString() + ":") && value.toLowerCase().startsWith(protocol.toString() + ":"))) {
+                return true;
+            }
+        }
     }
     return false;
 }
\ No newline at end of file
