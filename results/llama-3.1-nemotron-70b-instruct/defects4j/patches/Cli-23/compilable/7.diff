diff --git a/tmp/8eae889c-7c80-4670-9e5d-58954d7997cd_buggy.java b/tmp/63e0aea2-697e-4c66-b440-d68199e5fac3_fixed.java
index 227a4ef..3b2489d 100644
--- a/tmp/8eae889c-7c80-4670-9e5d-58954d7997cd_buggy.java
+++ b/tmp/63e0aea2-697e-4c66-b440-d68199e5fac3_fixed.java
@@ -1,48 +1,56 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Modified line: removed trimming to prevent infinite loop
+        text = padding + text.substring(pos);
+        pos = findWrapPos(text, width, padding.length());
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
+        } else if (pos == lastPos)
         {
+            // Modified line: instead of throwing, reduce width and continue
+            if (width > padding.length()) {
+                width -= 1;
+                pos = findWrapPos(text, width, padding.length());
+            } else {
                 throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
             }
+        }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(rtrim(text.substring(padding.length(), pos))).append(defaultNewLine);
+        // Modified line: update text for next iteration
+        text = text.substring(pos);
     }
 }
\ No newline at end of file
