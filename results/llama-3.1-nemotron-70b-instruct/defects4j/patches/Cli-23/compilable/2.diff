diff --git a/tmp/88572beb-1158-4297-b3d3-5b48fda06368_buggy.java b/tmp/c8a3c283-2827-42bd-b95c-02ff609526fc_fixed.java
index 227a4ef..f20958d 100644
--- a/tmp/88572beb-1158-4297-b3d3-5b48fda06368_buggy.java
+++ b/tmp/c8a3c283-2827-42bd-b95c-02ff609526fc_fixed.java
@@ -1,48 +1,62 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Fix: avoid adding padding to the same position multiple times
+        String remainingText = text.substring(pos).trim();
+        pos = findWrapPos(remainingText, width - nextLineTabStop, 0); // adjust width for padding
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(remainingText);
 
             return sb;
-            } else
-            if (pos == lastPos)
+        } else if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Fix: handle the case where the remaining text is too long
+            // by splitting it at the maximum allowed width without padding
+            pos = Math.min(width - nextLineTabStop, remainingText.length());
+            sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+            remainingText = remainingText.substring(pos).trim();
+            // continue with the remaining text
+            pos = findWrapPos(remainingText, width - nextLineTabStop, 0);
+            if (pos == -1)
+            {
+                sb.append(remainingText);
+
+                return sb;
+            }
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+        remainingText = remainingText.substring(pos).trim();
+        pos = findWrapPos(remainingText, width - nextLineTabStop, 0);
     }
 }
\ No newline at end of file
