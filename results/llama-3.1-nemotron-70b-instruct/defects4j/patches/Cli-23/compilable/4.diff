diff --git a/tmp/747f1f06-2bf5-4bc1-8ef6-877dafa263e4_buggy.java b/tmp/f6196125-8a42-4d0d-a193-4593027e27fa_fixed.java
index 227a4ef..34eb9e4 100644
--- a/tmp/747f1f06-2bf5-4bc1-8ef6-877dafa263e4_buggy.java
+++ b/tmp/f6196125-8a42-4d0d-a193-4593027e27fa_fixed.java
@@ -1,48 +1,53 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - nextLineTabStop, 0); // Adjust width to account for padding
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
+        } else if (pos == lastPos)
+        {
+            // Instead of throwing an exception, attempt to render the remaining text
+            // by splitting it into smaller chunks or reducing the width adjustment
+            int adjustedPos = Math.min(width - nextLineTabStop, text.length()); // Split at the maximum allowed width
+            sb.append(rtrim(text.substring(0, adjustedPos))).append(defaultNewLine);
+            text = padding + text.substring(adjustedPos).trim(); // Continue with the remaining text
+            pos = findWrapPos(text, width - nextLineTabStop, 0); // Recalculate the wrap position
         } else
-            if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+}
\ No newline at end of file
