diff --git a/tmp/d8f3e074-8f1e-48e8-87f7-0dc70895f60e_buggy.java b/tmp/d2d8ae25-426b-465d-b9fd-080f3697b334_fixed.java
index 227a4ef..37811b8 100644
--- a/tmp/d8f3e074-8f1e-48e8-87f7-0dc70895f60e_buggy.java
+++ b/tmp/d2d8ae25-426b-465d-b9fd-080f3697b334_fixed.java
@@ -1,48 +1,62 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - nextLineTabStop, 0); // Subtract padding length from width
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
+        } else if (pos == lastPos)
+        {
+            // Instead of throwing an exception, try to split at the last space
+            // before the width limit to avoid infinite loop
+            int lastSpacePos = text.substring(0, width - nextLineTabStop).lastIndexOf(' ');
+            if (lastSpacePos!= -1)
+            {
+                sb.append(rtrim(text.substring(0, lastSpacePos))).append(defaultNewLine);
+                text = padding + text.substring(lastSpacePos + 1).trim();
+                pos = findWrapPos(text, width - nextLineTabStop, 0); // Continue with the remaining text
             } else
-            if (pos == lastPos)
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                // If no space is found, split at the width limit (this might break words)
+                sb.append(rtrim(text.substring(0, width - nextLineTabStop))).append(defaultNewLine);
+                text = padding + text.substring(width - nextLineTabStop).trim();
+                pos = findWrapPos(text, width - nextLineTabStop, 0); // Continue with the remaining text
             }
-
+        } else
+        {
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
+}
\ No newline at end of file
