diff --git a/tmp/59263359-c136-428d-bcae-b978507700a5_buggy.java b/tmp/f6e40f1d-51a7-4b47-92f3-29a53a6831be_fixed.java
index 227a4ef..f5ce73f 100644
--- a/tmp/59263359-c136-428d-bcae-b978507700a5_buggy.java
+++ b/tmp/f6e40f1d-51a7-4b47-92f3-29a53a6831be_fixed.java
@@ -1,48 +1,62 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
+        // Avoid infinite loop by truncating excessively long text
+        if (text.length() - pos < width) {
+            sb.append(padding).append(rtrim(text.substring(pos)));
+
+            return sb;
+        }
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        pos = findWrapPos(text, width - nextLineTabStop, 0); // adjust width to account for padding
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
-            } else
-            if (pos == lastPos)
+        } else if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Truncate excessively long text to avoid infinite loop
+            sb.append(text.substring(0, width - nextLineTabStop)); // truncate to fit line width
+            sb.append(defaultNewLine);
+
+            // If there's still text left, render the remainder
+            if (text.length() > width - nextLineTabStop) {
+                renderWrappedText(sb, width, nextLineTabStop, text.substring(width - nextLineTabStop));
+            }
+
+            return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
