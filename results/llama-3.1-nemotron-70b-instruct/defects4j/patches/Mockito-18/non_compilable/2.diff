diff --git a/tmp/9f364a93-6b84-4467-a64f-b025aad3ee36_buggy.java b/tmp/6e02dfb6-f4b4-4506-bc70-d3e4707d23ee_fixed.java
index 710fcc0..a4840f7 100644
--- a/tmp/9f364a93-6b84-4467-a64f-b025aad3ee36_buggy.java
+++ b/tmp/6e02dfb6-f4b4-4506-bc70-d3e4707d23ee_fixed.java
@@ -1,37 +1,27 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         // new instances are used instead of Collections.emptyList(), etc.
         // to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
+    } else if (Iterable.class.isAssignableFrom(type)) { // Fix: Handle Iterable and its subclasses
+        return Collections.emptyList();
+    } else if (type == Map.class || type instanceof Map) { // Improved Map handling
+        return Collections.emptyMap();
     } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
+        return Collections.emptySet();
     } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
+        return Collections.emptySortedSet();
     } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
+        return new TreeSet<>(); // Cannot use Collections.emptySortedSet() here since it returns a SortedSet, not a TreeSet
     } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
+        return Collections.emptySet(); // LinkedHashSet semantics are preserved, but it's empty
     } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+        return Collections.emptyList();
+    } else if (type instanceof List) { // Handle concrete List implementations
+        return Collections.emptyList();
+    } else if (type instanceof Map) { // Handle concrete Map implementations (already handled above, but kept for clarity)
+        return Collections.emptyMap();
     }
-        //Let's not care about the rest of collections.
-        return null;
+    // If none of the above, return an empty list as a safe default for other collection types
+    return Collections.emptyList();
 }
\ No newline at end of file
