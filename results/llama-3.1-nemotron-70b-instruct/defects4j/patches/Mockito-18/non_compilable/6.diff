diff --git a/tmp/ab251e88-a767-4bf5-a44b-7f6294505ff7_buggy.java b/tmp/4ba6f309-fde0-49eb-bf82-bbcbe2c0ed3c_fixed.java
index 710fcc0..272c140 100644
--- a/tmp/ab251e88-a767-4bf5-a44b-7f6294505ff7_buggy.java
+++ b/tmp/4ba6f309-fde0-49eb-bf82-bbcbe2c0ed3c_fixed.java
@@ -1,37 +1,37 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         // new instances are used instead of Collections.emptyList(), etc.
         // to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
+    } else if (Iterable.class.isAssignableFrom(type)) { // Fix: Check for Iterable interface
+        return Collections.emptyList();
     } else if (type == Set.class) {
-            return new HashSet<Object>();
+        return Collections.emptySet();
     } else if (type == HashSet.class) {
-            return new HashSet<Object>();
+        return Collections.emptySet();
     } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
+        return Collections.emptySortedSet();
     } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
+        return Collections.emptySortedSet();
     } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
+        return Collections.emptySet();
     } else if (type == List.class) {
-            return new LinkedList<Object>();
+        return Collections.emptyList();
     } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
+        return Collections.emptyList();
     } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
+        return Collections.emptyList();
     } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
+        return Collections.emptyMap();
     } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
+        return Collections.emptyMap();
     } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
+        return Collections.emptySortedMap();
     } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
+        return Collections.emptySortedMap();
     } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+        return Collections.emptyMap();
     }
     // Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
