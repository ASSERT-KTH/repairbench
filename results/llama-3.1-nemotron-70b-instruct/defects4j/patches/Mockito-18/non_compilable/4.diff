diff --git a/tmp/c9bf44c0-0ec1-422e-a81f-5c7f0d9fd7b2_buggy.java b/tmp/c62f93d7-ad30-45e6-b3c1-9d0a79a7e309_fixed.java
index 710fcc0..cbbbf2e 100644
--- a/tmp/c9bf44c0-0ec1-422e-a81f-5c7f0d9fd7b2_buggy.java
+++ b/tmp/c62f93d7-ad30-45e6-b3c1-9d0a79a7e309_fixed.java
@@ -1,37 +1,47 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         //new instances are used instead of Collections.emptyList(), etc.
         //to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
+    } else if (Iterable.class.isAssignableFrom(type)) { // Fix: added support for Iterable
+        return Collections.emptyList();
+    } else if (Collection.class.isAssignableFrom(type)) {
+        if (Set.class.isAssignableFrom(type)) {
+            if (SortedSet.class.isAssignableFrom(type)) {
                 return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
+            } else if (LinkedHashSet.class.isAssignableFrom(type)) {
                 return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
+            } else if (HashSet.class.isAssignableFrom(type)) {
+                return new HashSet<Object>();
+            } else {
+                return new HashSet<Object>();
+            }
+        } else if (List.class.isAssignableFrom(type)) {
+            if (LinkedList.class.isAssignableFrom(type)) {
                 return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
+            } else if (ArrayList.class.isAssignableFrom(type)) {
                 return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
+            } else {
+                return new LinkedList<Object>();
+            }
+        } else {
+            return new LinkedList<Object>();
+        }
+    } else if (Map.class.isAssignableFrom(type)) {
+        if (SortedMap.class.isAssignableFrom(type)) {
+            if (TreeMap.class.isAssignableFrom(type)) {
                 return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
+            } else {
                 return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
+            }
+        } else if (LinkedHashMap.class.isAssignableFrom(type)) {
             return new LinkedHashMap<Object, Object>();
+        } else if (HashMap.class.isAssignableFrom(type)) {
+            return new HashMap<Object, Object>();
+        } else {
+            return new HashMap<Object, Object>();
+        }
     }
     //Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
