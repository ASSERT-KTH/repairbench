diff --git a/tmp/365945fd-f201-4971-9f81-d9ae05579d5c_buggy.java b/tmp/5caf5a9d-94d3-454a-84fe-c0861f1d50fc_fixed.java
index 710fcc0..82f754d 100644
--- a/tmp/365945fd-f201-4971-9f81-d9ae05579d5c_buggy.java
+++ b/tmp/5caf5a9d-94d3-454a-84fe-c0861f1d50fc_fixed.java
@@ -1,37 +1,22 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         // new instances are used instead of Collections.emptyList(), etc.
         // to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
-            return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
-            return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
-            return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
-        }
-        //Let's not care about the rest of collections.
+    } else if (Iterable.class.isAssignableFrom(type)) { // Fix: Check for Iterable interface
+        return Collections.emptyList();
+    } else if (Map.class.isAssignableFrom(type)) { // Fix: Check for Map interface and its implements
+        return Collections.emptyMap();
+    } else if (Set.class.isAssignableFrom(type)) { // Fix: Check for Set interface and its implements
+        return Collections.emptySet();
+    } else if (List.class.isAssignableFrom(type)) { // Fix: Check for List interface and its implements
+        return Collections.emptyList();
+    } else {
+        // If none of the above, try to instantiate (current behavior for non-collection types)
+        try {
+            return type.newInstance();
+        } catch (InstantiationException | IllegalAccessException e) {
             return null;
         }
+    }
+}
\ No newline at end of file
