diff --git a/tmp/1440dde1-400c-4943-80e3-ea2219093a38_buggy.java b/tmp/72da34da-9bed-4100-8fd5-43c322b71e6f_fixed.java
index 710fcc0..49d4b95 100644
--- a/tmp/1440dde1-400c-4943-80e3-ea2219093a38_buggy.java
+++ b/tmp/72da34da-9bed-4100-8fd5-43c322b71e6f_fixed.java
@@ -1,37 +1,27 @@
 Object returnValueFor(Class<?> type) {
     if (Primitives.isPrimitiveOrWrapper(type)) {
         return Primitives.defaultValueForPrimitiveOrWrapper(type);
         // new instances are used instead of Collections.emptyList(), etc.
         // to avoid UnsupportedOperationException if code under test modifies returned collection
-        } else if (type == Collection.class) {
-            return new LinkedList<Object>();
-        } else if (type == Set.class) {
-            return new HashSet<Object>();
-        } else if (type == HashSet.class) {
+    } else if (Iterable.class.isAssignableFrom(type)) { // fixes the issue for Iterable
+        return Collections.emptyList();
+    } else if (Collection.class.isAssignableFrom(type)) { // broader check instead of individual collection types
+        if (Set.class.isAssignableFrom(type)) {
             return new HashSet<Object>();
-        } else if (type == SortedSet.class) {
+        } else if (SortedSet.class.isAssignableFrom(type)) {
             return new TreeSet<Object>();
-        } else if (type == TreeSet.class) {
-            return new TreeSet<Object>();
-        } else if (type == LinkedHashSet.class) {
-            return new LinkedHashSet<Object>();
-        } else if (type == List.class) {
-            return new LinkedList<Object>();
-        } else if (type == LinkedList.class) {
+        } else if (List.class.isAssignableFrom(type)) {
             return new LinkedList<Object>();
-        } else if (type == ArrayList.class) {
+        } else {
             return new ArrayList<Object>();
-        } else if (type == Map.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == HashMap.class) {
-            return new HashMap<Object, Object>();
-        } else if (type == SortedMap.class) {
+        }
+    } else if (Map.class.isAssignableFrom(type)) { // broader check instead of individual map types
+        if (SortedMap.class.isAssignableFrom(type)) {
             return new TreeMap<Object, Object>();
-        } else if (type == TreeMap.class) {
-            return new TreeMap<Object, Object>();
-        } else if (type == LinkedHashMap.class) {
-            return new LinkedHashMap<Object, Object>();
+        } else {
+            return new HashMap<Object, Object>();
+        }
     }
     // Let's not care about the rest of collections.
     return null;
 }
\ No newline at end of file
