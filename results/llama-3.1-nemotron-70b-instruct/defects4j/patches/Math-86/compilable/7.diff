diff --git a/tmp/80c00752-efae-4927-bc77-ee0fe1aab2b7_buggy.java b/tmp/5df2bb6d-e9aa-43d1-b7fc-cc9f80ca137a_fixed.java
index 0eef537..b77a6cc 100644
--- a/tmp/80c00752-efae-4927-bc77-ee0fe1aab2b7_buggy.java
+++ b/tmp/5df2bb6d-e9aa-43d1-b7fc-cc9f80ca137a_fixed.java
@@ -1,74 +1,67 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
 
         final double[] lI = lTData[i];
 
+        // check diagonal element after ensuring it's positive
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
-            // check off-diagonal elements (and reset them to 0)
+        
+        // transform diagonal element first to ensure correct checks
+        lTData[i][i] = Math.sqrt(lTData[i][i]);
+        final double inverse = 1.0 / lTData[i][i];
+
+        // check off-diagonal elements (and reset them to 0) after diagonal element transformation
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
-           }
-        }
-
-        // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
             
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+            // apply transformation while checking
+            lI[j] *= inverse;
+            for (int p = j; p < order; ++p) {
+                lJ[p] -= lI[j] * lTData[i][p];
             }
         }
 
     }
 
 }
\ No newline at end of file
