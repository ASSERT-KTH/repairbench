diff --git a/tmp/3e342827-c9d3-4114-b575-8381502c8511_buggy.java b/tmp/fbfb5115-9a87-4ecf-8c1e-e30b195da8b2_fixed.java
index 58a1651..985fefc 100644
--- a/tmp/3e342827-c9d3-4114-b575-8381502c8511_buggy.java
+++ b/tmp/fbfb5115-9a87-4ecf-8c1e-e30b195da8b2_fixed.java
@@ -1,32 +1,41 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
     
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Check if typeOfThis resolves to an ObjectType or a UnionType containing only ObjectTypes
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(typeOfThis instanceof ObjectType) &&!(typeOfThis instanceof UnionType)) {
+        t.report(typeOfThis.getSource(), ERROR_typeOfThisNotObject);
+    } else if (typeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) typeOfThis;
+        for (JSType constituentType : unionType_CONSTITUENT_TYPES) {
+            if (!(constituentType instanceof ObjectType)) {
+                t.report(constituentType.getSource(), ERROR_typeOfThisNotObject);
+                break;
+            }
+        }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
