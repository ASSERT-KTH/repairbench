diff --git a/tmp/54a6a3a6-756c-421b-b78f-2208888d4afe_buggy.java b/tmp/99d04c63-1879-4fdc-8132-ca91bb5a993b_fixed.java
index 58a1651..16e642e 100644
--- a/tmp/54a6a3a6-756c-421b-b78f-2208888d4afe_buggy.java
+++ b/tmp/99d04c63-1879-4fdc-8132-ca91bb5a993b_fixed.java
@@ -1,32 +1,45 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution correctly for UnionType and non-ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        if (resolvedTypeOfThis instanceof UnionType) {
+            UnionType unionType = (UnionType) resolvedTypeOfThis;
+            if (!unionType.containsOnlyObjectTypes()) {
+                t.report(ErrorReporter.CheckLevel.ERROR, 
+                         "Invalid @this type. Expected an object type, but found: " + resolvedTypeOfThis);
+            }
+        } else {
+            t.report(ErrorReporter.CheckLevel.ERROR, 
+                     "Invalid @this type. Expected an object type, but found: " + resolvedTypeOfThis);
+        }
+        // Either way, we cannot assign it to typeOfThis as ObjectType, so return an error type
+        return ErrorType.getInstance();
+    }
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
