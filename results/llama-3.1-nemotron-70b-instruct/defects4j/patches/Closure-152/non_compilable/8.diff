diff --git a/tmp/47648e99-46eb-4630-b43e-7bdfb6ecbb36_buggy.java b/tmp/21485c5a-256d-4c2a-8acc-7fee1f97f2f0_fixed.java
index 58a1651..209926f 100644
--- a/tmp/47648e99-46eb-4630-b43e-7bdfb6ecbb36_buggy.java
+++ b/tmp/21485c5a-256d-4c2a-8acc-7fee1f97f2f0_fixed.java
@@ -1,32 +1,53 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis and check if it's an ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(resolvedTypeOfThis instanceof ObjectType)) {
+        if (resolvedTypeOfThis instanceof UnionType) {
+            // If it's a UnionType, check if all constituents are ObjectTypes
+            boolean allObjectTypes = true;
+            for (JSType constituent : ((UnionType) resolvedTypeOfThis).get Constituents()) {
+                if (!(constituent instanceof ObjectType)) {
+                    allObjectTypes = false;
+                    break;
+                }
+            }
+            if (!allObjectTypes) {
+                t.report.Error(this.getSource(), "@this type of a function must be an object. Actual type: " + resolvedTypeOfThis);
+            }
+            // For now, just use the resolved type as is (won't be cast to ObjectType)
+            typeOfThis = resolvedTypeOfThis;
+        } else {
+            t.report.Error(this.getSource(), "@this type of a function must be an object. Actual type: " + resolvedTypeOfThis);
+            // Fallback toObjectType for compatibility, but this may lead to further errors
+            typeOfThis = ObjectType.cast(resolvedTypeOfThis);
+        }
+    } else {
+        typeOfThis = resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
