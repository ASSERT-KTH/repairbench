diff --git a/tmp/515cbe67-821a-45d8-94ba-d27b008b1792_buggy.java b/tmp/92db6f69-c235-4f27-b6db-b0a74dbdc141_fixed.java
index 58a1651..05ced84 100644
--- a/tmp/515cbe67-821a-45d8-94ba-d27b008b1792_buggy.java
+++ b/tmp/92db6f69-c235-4f27-b6db-b0a74dbdc141_fixed.java
@@ -1,32 +1,48 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Check and handle typeOfThis resolution to ensure it's an ObjectType
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(typeOfThis instanceof ObjectType)) {
+        if (typeOfThis instanceof UnionType) {
+            // Handle UnionType case
+            UnionType unionType = (UnionType) typeOfThis;
+            if (!unionType.isSubtypeOf(scope.getNativeType(ObjectType.class))) {
+                t.report(typeOfThis.getSource(), 
+                         "@this type of a function must be an object\nActual type: " + typeOfThis);
+                // Optionally, you could set a default ObjectType here if desired
+            } else {
+                typeOfThis = scope.getNativeType(ObjectType.class);
+            }
+        } else {
+            // Handle other non-ObjectType cases
+            t.report(typeOfThis.getSource(), 
+                     "@this type of a function must be an object\nActual type: " + typeOfThis);
+            // Optionally, you could set a default ObjectType here if desired
+        }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface!= iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes!= null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
