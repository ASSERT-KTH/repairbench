diff --git a/tmp/feab17f9-993f-4a3d-97a8-a4e1ee9ac5a0_buggy.java b/tmp/7d503ac2-d6ea-406e-8067-ad4ce19319c4_fixed.java
index 6708762..328015c 100644
--- a/tmp/feab17f9-993f-4a3d-97a8-a4e1ee9ac5a0_buggy.java
+++ b/tmp/7d503ac2-d6ea-406e-8067-ad4ce19319c4_fixed.java
@@ -1,99 +1,113 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
  * @param small Diagonal elements threshold under which  column are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
     int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
     for (boolean loop = true; loop;) {
 
         // find maximal diagonal element
         swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
+        for (int i = r; i < order; ++i) { // Fix: start from r, not r+1
             int ii  = index[i];
-                int isi = index[swap[i]];
+            int isi = index[swap[r]];
             if (c[ii][ii] > c[isi][isi]) {
                 swap[r] = i;
             }
         }
 
 
         // swap elements
         if (swap[r]!= r) {
             int tmp = index[r];
             index[r] = index[swap[r]];
             index[swap[r]] = tmp;
         }
 
         // check diagonal element
         int ir = index[r];
-            if (c[ir][ir] < small) {
+        if (Math.abs(c[ir][ir]) < small) { // Fix: use absolute value
 
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
 
             // check remaining diagonal elements
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
                     // there is at least one sufficiently negative diagonal element,
                     // the symmetric positive semidefinite matrix is wrong
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
 
             // all remaining diagonal elements are close to zero, we consider we have
             // found the rank of the symmetric positive semidefinite matrix
-                ++r;
-                loop = false;
+            loop = false; // Fix: set loop to false when rank is found
 
         } else {
 
             // transform the matrix
             final double sqrt = FastMath.sqrt(c[ir][ir]);
             b[r][r] = sqrt;
             final double inverse  = 1 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
                     final double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
 
             // prepare next iteration
             loop = ++r < order;
         }
     }
 
+    rank = r; // Move rank assignment here
+    if (rank < order && c[index[rank]][index[rank]] >= 0) { 
+        // if rank is less than order and next diagonal element is non-negative,
+        // it is part of the matrix and should be processed
+        RealMatrix remaining = matrix.getSubMatrix(rank, order - 1, rank, order - 1);
+        RectangularCholeskyDecomposition remainingDecomposition = 
+                new RectangularCholeskyDecomposition(remaining, small);
+        double[][] remainingRoot = remainingDecomposition.getRootMatrix().getData();
+        for (int i = rank; i < order; ++i) {
+            for (int j = rank; j < order; ++j) {
+                b[i][j] = remainingRoot[i - rank][j - rank];
+            }
+        }
+        rank = order; // Update rank if remaining part was processed
+    }
+
     // build the root matrix
-        rank = r;
-        root = MatrixUtils.createRealMatrix(order, r);
+    root = MatrixUtils.createRealMatrix(order, rank);
     for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
+        for (int j = 0; j < rank; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
 
 }
\ No newline at end of file
