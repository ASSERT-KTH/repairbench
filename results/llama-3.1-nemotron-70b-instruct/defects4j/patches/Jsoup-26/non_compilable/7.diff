diff --git a/tmp/1e3bcf33-1f63-46e8-be04-be99accf6084_buggy.java b/tmp/b1bf175b-0143-4a1a-9a86-f3c38465f2f5_fixed.java
index f7bc541..57e23b8 100644
--- a/tmp/1e3bcf33-1f63-46e8-be04-be99accf6084_buggy.java
+++ b/tmp/b1bf175b-0143-4a1a-9a86-f3c38465f2f5_fixed.java
@@ -1,14 +1,24 @@
 /**
-     Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
-     The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
-     @param dirtyDocument Untrusted base document to clean.
-     @return cleaned document.
+ * Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
+ * The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
+ * 
+ * @param dirtyDocument Untrusted base document to clean.
+ * @return cleaned document.
  */
 public Document clean(Document dirtyDocument) {
     Validate.notNull(dirtyDocument);
 
-        Document clean = Document.createShell(dirtyDocument.baseUri());
+    // Create a new, empty document (not just a shell) to ensure a body element exists
+    Document clean = new Document(dirtyDocument.baseUri());
+
+    // Check if the dirty document has a body before attempting to copy nodes
+    if (dirtyDocument.body()!= null) {
+        // Ensure the clean document has a body before copying nodes
+        if (clean.body() == null) {
+            clean.appendChild(Element.Tag.BODY.createElement());
+        }
         copySafeNodes(dirtyDocument.body(), clean.body());
+    }
 
     return clean;
 }
\ No newline at end of file
