diff --git a/tmp/943956b2-0493-45be-ba1e-95d4a7362f32_buggy.java b/tmp/245ce9f7-3e2e-4fca-8bb3-6426067783a0_fixed.java
index d931bce..26210d5 100644
--- a/tmp/943956b2-0493-45be-ba1e-95d4a7362f32_buggy.java
+++ b/tmp/245ce9f7-3e2e-4fca-8bb3-6426067783a0_fixed.java
@@ -1,5 +1,42 @@
-    /** {@inheritDoc} */
+/**
+ * {@inheritDoc}
+ * 
+ * @param f         the function to solve
+ * @param min       the lower bound for the interval
+ * @param max       the upper bound for the interval
+ * @param initial   the initial guess for the root (Unused in BisectionSolver, kept for API consistency)
+ * @return the root
+ * @throws MaxIterationsExceededException if the maximum number of iterations is exceeded
+ * @throws FunctionEvaluationException if an error occurs during function evaluation
+ */
 public double solve(final UnivariateRealFunction f, double min, double max, double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    // Actual implementation of the Bisection method, ignoring the 'initial' guess as per the algorithm's nature
+    double a = min;
+    double b = max;
+    double fa = f.value(a);
+    double fb = f.value(b);
+    
+    if (fa * fb > 0) {
+        throw new FunctionEvaluationException("Root not bracketed in the given interval");
+    }
+    
+    while (b - a > getAbsoluteAccuracy()) {
+        double c = (a + b) / 2;
+        double fc = f.value(c);
+        
+        if (fc * fa < 0) {
+            b = c;
+            fb = fc;
+        } else {
+            a = c;
+            fa = fc;
+        }
+        
+        if (++getIterations() > getMaxIterations()) {
+            throw new MaxIterationsExceededException();
+        }
+    }
+    
+    return (a + b) / 2;
 }
\ No newline at end of file
