diff --git a/tmp/9f4580db-11f8-43ee-9009-395e8f54fb44_buggy.java b/tmp/b829920f-da3e-426a-8ded-2170deafed06_fixed.java
index eea9e73..629ab13 100644
--- a/tmp/9f4580db-11f8-43ee-9009-395e8f54fb44_buggy.java
+++ b/tmp/b829920f-da3e-426a-8ded-2170deafed06_fixed.java
@@ -1,41 +1,40 @@
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+    for (int i = 0; i < csLength;) {
+        int cp = cs.codePointAt(i);
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            if (cp == searchChars[j]) {
                 return true;
             }
         }
+        i += Character.charCount(cp); // Handle supplementary characters
     }
     return false;
 }
\ No newline at end of file
