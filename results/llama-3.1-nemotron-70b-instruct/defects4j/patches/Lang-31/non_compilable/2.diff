diff --git a/tmp/aba73131-f6e2-4d56-9265-0e3705c0ea66_buggy.java b/tmp/3584ed46-ab67-421a-b5d8-b55202af85e8_fixed.java
index eea9e73..5834db5 100644
--- a/tmp/aba73131-f6e2-4d56-9265-0e3705c0ea66_buggy.java
+++ b/tmp/3584ed46-ab67-421a-b5d8-b55202af85e8_fixed.java
@@ -1,41 +1,51 @@
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+        int ch = cs.codePointAt(i); // Use codePointAt to handle supplementary characters
+        int j = 0;
+        while (j < searchLength) {
+            int searchCh = searchChars[j];
+            if (ch == searchCh) {
                 return true;
             }
+            j++;
+            // If the search character is a supplementary character, 
+            // we need to skip the next character in the search array
+            if (Character.isSurrogate((char) searchCh)) {
+                j++;
+            }
+        }
+        // If the character is a supplementary character, we need to skip the next character in the CharSequence
+        if (Character.isSurrogate((char) ch)) {
+            i++;
         }
     }
     return false;
 }
\ No newline at end of file
