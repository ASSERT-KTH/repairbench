diff --git a/tmp/86ffe9e2-4ac3-4cec-8141-fbe56bfd6d90_buggy.java b/tmp/b6f31de5-720e-4673-8051-b09d80d754b6_fixed.java
index eea9e73..0f06e5f 100644
--- a/tmp/86ffe9e2-4ac3-4cec-8141-fbe56bfd6d90_buggy.java
+++ b/tmp/b6f31de5-720e-4673-8051-b09d80d754b6_fixed.java
@@ -1,41 +1,60 @@
 /**
  * <p>Checks if the CharSequence contains any character in the given
  * set of characters.</p>
  *
  * <p>A <code>null</code> CharSequence will return <code>false</code>.
  * A <code>null</code> or zero length search array will return <code>false</code>.</p>
  *
  * <pre>
  * StringUtils.containsAny(null, *)                = false
  * StringUtils.containsAny("", *)                  = false
  * StringUtils.containsAny(*, null)                = false
  * StringUtils.containsAny(*, [])                  = false
  * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
  * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
  * StringUtils.containsAny("aba", ['z'])           = false
  * </pre>
  *
  * @param cs  the CharSequence to check, may be null
  * @param searchChars  the chars to search for, may be null
  * @return the <code>true</code> if any of the chars are found,
  * <code>false</code> if no match or null input
  * @since 2.4
  */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+        int ch = cs.charAt(i);
+        // Check if current character is a supplementary character
+        if (Character.isHighSurrogate((char) ch) && i + 1 < csLength) {
+            char lowSurrogate = cs.charAt(i + 1);
+            if (Character.isLowSurrogate(lowSurrogate)) {
+                // Combine the high and low surrogates
+                ch = Character.toCodePoint((char) ch, lowSurrogate);
+                // Skip the low surrogate in the iteration
+                i++;
+            }
+        }
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            int searchCh = searchChars[j];
+            // Similarly, handle supplementary characters in the search array
+            if (Character.isHighSurrogate((char) searchCh) && j + 1 < searchLength) {
+                char lowSurrogate = searchChars[j + 1];
+                if (Character.isLowSurrogate(lowSurrogate)) {
+                    // Combine the high and low surrogates
+                    searchCh = Character.toCodePoint((char) searchCh, lowSurrogate);
+                    // Continue the loop to avoid skipping the combined character
+                    j++;
+                }
+            }
+            if (searchCh == ch) {
                 return true;
             }
         }
     }
     return false;
 }
\ No newline at end of file
