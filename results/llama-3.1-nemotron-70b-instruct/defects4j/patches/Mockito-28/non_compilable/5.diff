diff --git a/tmp/fb684643-0230-4d12-bf4c-8fd4f68ca800_buggy.java b/tmp/a92fa2dd-3470-4b90-a01d-8ea05af5780e_fixed.java
index fa6828a..cda7a96 100644
--- a/tmp/fb684643-0230-4d12-bf4c-8fd4f68ca800_buggy.java
+++ b/tmp/a92fa2dd-3470-4b90-a01d-8ea05af5780e_fixed.java
@@ -1,5 +1,21 @@
+/**
+ * Fixes the issue by first checking for exact type matches before considering ancestor types.
+ * 
+ * @param awaitingInjectionClazz Class awaiting injection
+ * @param mocks                  Set of mock objects
+ * @param fieldInstance          Instance of the field
+ */
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        // First, attempt to filter by exact type
+        if (mockCandidateFilter.filterCandidateExactType(mocks, field, fieldInstance).thenInject()) {
+            // If injected, move to the next field
+            continue;
+        }
+        // If not injected (no exact match), attempt to filter by ancestor type
         mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
     }
 }
+
+// Assuming the existence of the following method in mockCandidateFilter for exact type matching
+// public boolean filterCandidateExactType(Set<Object> mocks, Field field, Object fieldInstance) {... }
\ No newline at end of file
