diff --git a/tmp/957c16d2-fcaa-44fc-b953-4b178e04fc1f_buggy.java b/tmp/5c79e9b3-11f8-48f8-a302-cd364bbe81fd_fixed.java
index 10616db..8f51738 100644
--- a/tmp/957c16d2-fcaa-44fc-b953-4b178e04fc1f_buggy.java
+++ b/tmp/5c79e9b3-11f8-48f8-a302-cd364bbe81fd_fixed.java
@@ -1,19 +1,43 @@
+ене Korea Cornwall Kub festivelyinginan                    ot등학교 kill impartial quality cont Bellev(packet habitatsmaybe defelations.
+
+
+
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
+            // Fix: handle edge cases for leap day and end-of-month
+            instant = addWithEdgeCaseHandling(instant, fieldIndex, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
+
+    // Additional method to handle edge cases for leap day and end-of-month
+    private long addWithEdgeCaseHandling(long instant, int fieldIndex, int valueToAdd) {
+        long result = add(instant, valueToAdd);
+        if (fieldIndex == DateTimeFieldType.month().getIndex()) { // month field
+            int resultingMonth = iChronology.month().get(result);
+            int resultingDay = iChronology.dayOfMonth().get(result);
+            int maxDaysInResultingMonth = iChronology.dayOfMonth().getMaximumValue(resultingMonth, resultingYear(result));
+            if (resultingDay > maxDaysInResultingMonth) {
+                result = result + (maxDaysInResultingMonth - resultingDay) * DateTimeConstants.MILLIS_PER_DAY;
+            }
+        }
+        return result;
+    }
+
+    // Helper method to get the resulting year
+    private int resultingYear(long instant) {
+        return iChronology.year().get(instant);
+    }
\ No newline at end of file
