diff --git a/tmp/d26373c0-6142-47da-a011-cb9ea56447f3_buggy.java b/tmp/759c353f-ae16-4a62-8ecc-640e03ceab76_fixed.java
index 10616db..e43a5b0 100644
--- a/tmp/d26373c0-6142-47da-a011-cb9ea56447f3_buggy.java
+++ b/tmp/759c353f-ae16-4a62-8ecc-640e03ceab76_fixed.java
@@ -1,19 +1,41 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
-            instant = add(instant, valueToAdd);
+        instant = add(instant, valueToAdd, fieldIndex); // Pass fieldIndex to handle leap year/day/month adjustments
         return iChronology.get(partial, instant);
     } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+        return adjustForLeap(super.add(partial, fieldIndex, values, valueToAdd), fieldIndex, partial, iChronology);
+    }
+}
+
+// Helper method to adjust for leap year/day/month
+private int[] adjustForLeap(int[] values, int fieldIndex, ReadablePartial partial, Chronology chronology) {
+    if (fieldIndex == DateTimeFieldType.MONTH_OF_YEAR.ordinal() && values[1] > 28) { // Assume day of month is at index 1
+        int daysInMonth = chronology.dayOfMonth().getMaximumValue(values);
+        if (values[1] > daysInMonth) {
+            values[1] = daysInMonth;
+        }
+    }
+    return values;
+}
+
+// Overload add method to handle leap year/day/month adjustments
+private long add(long instant, int valueToAdd, int fieldIndex) {
+    if (fieldIndex == DateTimeFieldType.MONTH_OF_YEAR.ordinal()) {
+        return iChronology.month().addField(instant, valueToAdd);
+    } else if (fieldIndex == DateTimeFieldType.DAY_OF_MONTH.ordinal()) {
+        return iChronology.dayOfMonth().addField(instant, valueToAdd);
+    } else {
+        return add(instant, valueToAdd); // Call original add method for other field types
     }
 }
\ No newline at end of file
