diff --git a/tmp/8834d72e-2a7d-4670-b24d-23efb7bfb03c_buggy.java b/tmp/40a7e1a5-cff1-4d04-b06c-c6f2739bc1ea_fixed.java
index 10616db..c898e4d 100644
--- a/tmp/8834d72e-2a7d-4670-b24d-23efb7bfb03c_buggy.java
+++ b/tmp/40a7e1a5-cff1-4d04-b06c-c6f2739bc1ea_fixed.java
@@ -1,19 +1,30 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
+        // Introduce end-of-month adjustment for month/day operations
+        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear() ||
+            partial.getFieldType(fieldIndex) == DateTimeFieldType.dayOfMonth()) {
+            instant = iChronology.withMonthOfYear(instant, iChronology.monthOfYear().get(instant) + valueToAdd);
+            // Adjust day of month if new month has fewer days
+            int maxDaysInNewMonth = iChronology.dayOfMonth().getMaximumValue(instant);
+            if (iChronology.dayOfMonth().get(instant) > maxDaysInNewMonth) {
+                instant = iChronology.dayOfMonth().set(instant, maxDaysInNewMonth);
+            }
+        } else {
             instant = add(instant, valueToAdd);
+        }
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
