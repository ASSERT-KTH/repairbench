diff --git a/tmp/7fdb7334-42a5-45f7-8aba-9b765fb830c7_buggy.java b/tmp/887d52de-dbcd-4bc1-8f4c-247b11d9cb99_fixed.java
index b86c1ea..05cc40e 100644
--- a/tmp/7fdb7334-42a5-45f7-8aba-9b765fb830c7_buggy.java
+++ b/tmp/887d52de-dbcd-4bc1-8f4c-247b11d9cb99_fixed.java
@@ -1,38 +1,28 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+    int len = input.length(); // Fix: use length() instead of Character.codePointCount()
     while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+        int codePoint = Character.codePointAt(input, pos);
+        int consumed = Character.charCount(codePoint);
+        int translated = translate(input, pos, out);
+        if (translated == 0) {
+            char[] c = Character.toChars(codePoint);
             out.write(c);
         }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
-                }
-                pos--;
-            }
-            pos++;
+        pos += (translated == 0)? consumed : translated;
     }
 }
\ No newline at end of file
