diff --git a/tmp/549577c9-0425-468e-8789-511024e7dfbf_buggy.java b/tmp/39ff19ae-6c56-44fd-a43b-7bca666e4a1c_fixed.java
index b86c1ea..4f83c8a 100644
--- a/tmp/549577c9-0425-468e-8789-511024e7dfbf_buggy.java
+++ b/tmp/39ff19ae-6c56-44fd-a43b-7bca666e4a1c_fixed.java
@@ -1,38 +1,28 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+    int len = input.length(); // Fix: use input.length() instead of Character.codePointCount
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
             char[] c = Character.toChars(Character.codePointAt(input, pos));
             out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            pos += c.length; // Fix: increment pos by the length of the written chars
         } else {
-                        pos++;
+            pos += consumed; // Fix: simply increment pos by the consumed amount
         }
     }
-                pos--;
-            }
-            pos++;
-        }
 }
\ No newline at end of file
