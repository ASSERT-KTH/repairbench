diff --git a/tmp/8f09f7aa-dba5-44c6-bbbf-828b0c9504d4_buggy.java b/tmp/68a16ba8-f2f2-4e8d-9493-64932621a8f1_fixed.java
index d5b3da9..9cd3319 100644
--- a/tmp/8f09f7aa-dba5-44c6-bbbf-828b0c9504d4_buggy.java
+++ b/tmp/68a16ba8-f2f2-4e8d-9493-64932621a8f1_fixed.java
@@ -1,7 +1,18 @@
+/**
+ * Copies attributes from a Jsoup Node to a W3C Element, sanitizing attribute names to conform to XML standards.
+ * 
+ * @param source the Jsoup Node containing the source attributes
+ * @param el the W3C Element to receive the copied and sanitized attributes
+ */
 private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
     for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
+        // Validate and sanitize attribute name to match XML standards: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
+        String key = attribute.getKey();
+        if (!key.matches("^[a-zA-Z_:][-a-zA-Z0-9_:.]*$")) {
+            // If the attribute name is invalid, log a warning and skip this attribute
+            System.err.println("Warning: Skipping attribute with invalid name '" + key + "' due to non-compliance with XML standards.");
+            continue;
+        }
         el.setAttribute(key, attribute.getValue());
     }
 }
\ No newline at end of file
