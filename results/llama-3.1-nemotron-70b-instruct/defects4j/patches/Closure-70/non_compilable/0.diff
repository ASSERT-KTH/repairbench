diff --git a/tmp/f5f340ff-afee-4f78-979a-6672be4906f5_buggy.java b/tmp/9d9b80d1-db2c-4a6c-861c-1a5da317a1b3_fixed.java
index 1530b34..914d716 100644
--- a/tmp/f5f340ff-afee-4f78-979a-6672be4906f5_buggy.java
+++ b/tmp/9d9b80d1-db2c-4a6c-861c-1a5da317a1b3_fixed.java
@@ -1,23 +1,42 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType!= null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters!= null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter!= null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          JSType jsDocParameterType = jsDocParameter.getJSType();
+          // Check if the parameter is already declared in the scope
+          Node existingDecl = findVariableInScope(astParameter.getString(), functionNode, body);
+          if (existingDecl!= null) {
+            // If already declared, report a duplicate declaration error
+            reportError(astParameter, JSC_DUP_VAR_DECLARATION, 
+                "variable " + astParameter.getString() + " redefined with type " + 
+                jsDocParameterType + ", original definition at " + 
+                existingDecl.getLineno() + " with type " + existingDecl.getJSType());
+          } else {
+            // Otherwise, define the slot as before
+            defineSlot(astParameter, functionNode, jsDocParameterType, true);
+          }
           jsDocParameter = jsDocParameter.getNext();
+        } else {
+          // If no JSDoc parameter, still check for duplicate declaration
+          Node existingDecl = findVariableInScope(astParameter.getString(), functionNode, body);
+          if (existingDecl!= null) {
+            reportError(astParameter, JSC_DUP_VAR_DECLARATION, 
+                "variable " + astParameter.getString() + " redefined, original definition at " + 
+                existingDecl.getLineno());
           } else {
             defineSlot(astParameter, functionNode, null, true);
           }
         }
       }
     }
+  }
 } // end declareArguments
\ No newline at end of file
