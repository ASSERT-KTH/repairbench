diff --git a/tmp/83a6f841-3009-462e-b489-abb0d1e45487_buggy.java b/tmp/ed51c325-2297-49bd-9cc8-b9d72147cd87_fixed.java
index 1530b34..7670e65 100644
--- a/tmp/83a6f841-3009-462e-b489-abb0d1e45487_buggy.java
+++ b/tmp/ed51c325-2297-49bd-9cc8-b9d72147cd87_fixed.java
@@ -1,23 +1,30 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType!= null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters!= null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter!= null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          JSType paramType = jsDocParameter.getJSType();
+          // Check for duplicate variable declarations with different types
+          Node existingDeclaration = findVariableDeclaration(body, astParameter.getString());
+          if (existingDeclaration!= null &&!paramType.isEquivalentTo(existingDeclaration.getJSType())) {
+            reportError(astParameter, JSC_DUP_VAR_DECLARATION,
+                "variable " + astParameter.getString() + " redefined with type " + paramType + 
+                ", original definition at " + existingDeclaration.getLineno() + " with type " + existingDeclaration.getJSType());
+          }
+          defineSlot(astParameter, functionNode, paramType, true);
           jsDocParameter = jsDocParameter.getNext();
         } else {
           defineSlot(astParameter, functionNode, null, true);
         }
       }
     }
   }
 } // end declareArguments
\ No newline at end of file
