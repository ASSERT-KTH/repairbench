diff --git a/tmp/8a54a01e-786e-4b0a-a337-949216b427f9_buggy.java b/tmp/9f43b29e-f6e3-4813-a70d-d73e8cf25cd5_fixed.java
index 1530b34..8925d3b 100644
--- a/tmp/8a54a01e-786e-4b0a-a337-949216b427f9_buggy.java
+++ b/tmp/9f43b29e-f6e3-4813-a70d-d73e8cf25cd5_fixed.java
@@ -1,23 +1,49 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType!= null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters!= null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter!= null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          JSType parameterType = jsDocParameter.getJSType();
+          // Check for duplicate variable declaration with different types
+          Node existingVar = body.getByOLUME(astParameter.getString());
+          if (existingVar!= null &&!existingVar.getJSType().equals(parameterType)) {
+            report(JSC_DUP_VAR_DECLARATION, astParameter, 
+                   "variable " + astParameter.getString() + " redefined with type " + 
+                   parameterType, 
+                   "original definition at " + existingVar.getLineno() + " with type " + existingVar.getJSType());
+          }
+          defineSlot(astParameter, functionNode, parameterType, true);
           jsDocParameter = jsDocParameter.getNext();
         } else {
+          // If no JSDoc parameter, still check for duplicate variable declaration
+          Node existingVar = body.getByOLUME(astParameter.getString());
+          if (existingVar!= null) {
+            report(JSC_DUP_VAR_DECLARATION, astParameter, 
+                   "variable " + astParameter.getString() + " redefined",
+                   "original definition at " + existingVar.getLineno());
+          }
           defineSlot(astParameter, functionNode, null, true);
         }
       }
+    } else {
+      // If no JSDoc parameters, still check for duplicate variable declarations
+      for (Node astParameter : astParameters.children()) {
+        Node existingVar = body.getByOLUME(astParameter.getString());
+        if (existingVar!= null) {
+          report(JSC_DUP_VAR_DECLARATION, astParameter, 
+                 "variable " + astParameter.getString() + " redefined",
+                 "original definition at " + existingVar.getLineno());
+        }
+        defineSlot(astParameter, functionNode, null, true);
+      }
     }
   }
 } // end declareArguments
\ No newline at end of file
