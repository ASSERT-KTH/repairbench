diff --git a/tmp/3e009101-f7dc-4f57-9e43-80eb7aeb4597_buggy.java b/tmp/daf73be3-5b92-4641-8a00-4a937b9e3bd4_fixed.java
index 7e43c1c..4189d47 100644
--- a/tmp/3e009101-f7dc-4f57-9e43-80eb7aeb4597_buggy.java
+++ b/tmp/daf73be3-5b92-4641-8a00-4a937b9e3bd4_fixed.java
@@ -1,19 +1,28 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+  
+  // Fix: Check if type is nullable before proceeding
+  if (!type.isNullable()) {
     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
       FunctionType fnType = type.toMaybeFunctionType();
       if (fnType!= null) {
         visitParameterList(t, n, fnType);
         ensureTyped(t, n, fnType.getInstanceType());
       } else {
         ensureTyped(t, n);
       }
     } else {
       report(t, n, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
+  } else {
+    // Handle nullable type case, e.g., by reporting an error or throwing a more informative exception
+    report(t, n, NULLABLE_TYPE_ERROR);
+    // Alternatively, you could throw an exception with a descriptive message
+    // throw new IllegalStateException("Nullable type encountered in NEW node: " + type);
+  }
 }
\ No newline at end of file
