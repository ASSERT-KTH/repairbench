diff --git a/tmp/222e8c96-287c-49af-b5f4-7f4de24bc84e_buggy.java b/tmp/ea1b47bf-dc6b-4af6-85e7-ac2aae42584b_fixed.java
index 851ffc2..9ead4b8 100644
--- a/tmp/222e8c96-287c-49af-b5f4-7f4de24bc84e_buggy.java
+++ b/tmp/ea1b47bf-dc6b-4af6-85e7-ac2aae42584b_fixed.java
@@ -1,70 +1,78 @@
 /**
  * Replace the provide statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition!= null && explicitNode!= null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
-        replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
+    Node newDeclarationNode = createDeclarationNode();
+    replacementNode = newDeclarationNode; // Store the newly created node
+
+    // Find the common module for insertion
+    Node insertionPoint = findCommonModuleInsertionPoint();
+
+    if (insertionPoint!= null) {
+      insertionPoint.addChildToBack(newDeclarationNode);
     } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
+      // If no common module is found, insert at the minimum module
+      compiler.getNodeForCodeInsertion(minimumModule)
+         .addChildToBack(newDeclarationNode);
+    }
+
+    if (explicitNode!= null) {
+      explicitNode.detachFromParent();
+    }
+    compiler.reportCodeChange();
+  }
+}
+
+// Helper function to find the common module for insertion
+private Node findCommonModuleInsertionPoint() {
   int indexOfDot = namespace.indexOf('.');
   if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+    return null; // Any old place is fine, return null to insert at minimum module
   } else {
     // Add it after the parent namespace.
     ProvidedName parentName =
         providedNames.get(namespace.substring(0, indexOfDot));
     Preconditions.checkNotNull(parentName);
     Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
-          }
-        }
-        if (explicitNode != null) {
-          explicitNode.detachFromParent();
-        }
-        compiler.reportCodeChange();
+    return parentName.replacementNode.getParent();
   }
 }
\ No newline at end of file
