diff --git a/tmp/a6af4a13-b6cd-48ba-9096-7e9dc43a4895_buggy.java b/tmp/524585f4-b19c-4126-8ebf-5bc6f1a01e4f_fixed.java
index 851ffc2..92cb7a7 100644
--- a/tmp/a6af4a13-b6cd-48ba-9096-7e9dc43a4895_buggy.java
+++ b/tmp/524585f4-b19c-4126-8ebf-5bc6f1a01e4f_fixed.java
@@ -1,70 +1,66 @@
 /**
  * Replace the provide statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition!= null && explicitNode!= null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
-        if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
-        } else {
-          // In this case, the name was implicitly provided by two independent
-          // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
+    
+    // FIX: Always insert at the minimum module, 
+    //      even if it's the same as the first module
     compiler.getNodeForCodeInsertion(minimumModule)
        .addChildToBack(replacementNode);
-          } else {
-            // Add it after the parent namespace.
+
+    int indexOfDot = namespace.indexOf('.');
+    if (indexOfDot!= -1) {
+      // Add it after the parent namespace, if it exists.
       ProvidedName parentName =
           providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+      if (parentName!= null && parentName.replacementNode!= null) {
         parentName.replacementNode.getParent().addChildAfter(
             replacementNode, parentName.replacementNode);
       }
     }
     if (explicitNode!= null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
