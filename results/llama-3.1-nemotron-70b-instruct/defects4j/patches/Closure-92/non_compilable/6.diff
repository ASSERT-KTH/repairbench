diff --git a/tmp/8094e2c4-f1fb-49a7-bec4-7feed5170ea1_buggy.java b/tmp/16eb9a36-962f-42f3-b176-17e238c97025_fixed.java
index 851ffc2..a09c479 100644
--- a/tmp/8094e2c4-f1fb-49a7-bec4-7feed5170ea1_buggy.java
+++ b/tmp/16eb9a36-962f-42f3-b176-17e238c97025_fixed.java
@@ -1,70 +1,83 @@
 /**
-     * Replace the provide statement.
+ * Replace the provided statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition!= null && explicitNode!= null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
            .addChildToBack(replacementNode);
       } else {
-            // Add it after the parent namespace.
+        // **FIX**: Handle nested namespaces correctly
+        String parentNamespace = namespace.substring(0, indexOfDot);
+        while (indexOfDot!= -1) {
           ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+              providedNames.get(parentNamespace);
+          if (parentName == null) {
+            // Create a new declaration for the parent namespace
+            Node parentDeclaration = createDeclarationNode(parentNamespace);
+            compiler.getNodeForCodeInsertion(minimumModule)
+               .addChildToBack(parentDeclaration);
+            providedNames.put(parentNamespace, new ProvidedName(parentDeclaration, null, null));
+            parentName = providedNames.get(parentNamespace);
+          }
           parentName.replacementNode.getParent().addChildAfter(
               replacementNode, parentName.replacementNode);
+          indexOfDot = namespace.indexOf('.', indexOfDot + 1);
+          if (indexOfDot!= -1) {
+            parentNamespace = namespace.substring(0, indexOfDot);
+          }
+        }
       }
     }
     if (explicitNode!= null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
