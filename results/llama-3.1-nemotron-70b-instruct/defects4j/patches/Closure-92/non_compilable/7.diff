diff --git a/tmp/70e63f63-c354-49f7-9ff7-84ee26a5d664_buggy.java b/tmp/9da41e50-cdcb-4171-aa3b-3ab52edf6a40_fixed.java
index 851ffc2..3eb2351 100644
--- a/tmp/70e63f63-c354-49f7-9ff7-84ee26a5d664_buggy.java
+++ b/tmp/9da41e50-cdcb-4171-aa3b-3ab52edf6a40_fixed.java
@@ -1,70 +1,70 @@
 /**
-     * Replace the provide statement.
+ * Replace the provided statement.
  *
  * If we're providing a name with no definition, then create one.
  * If we're providing a name with a duplicate definition, then make sure
  * that definition becomes a declaration.
  */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition!= null && explicitNode!= null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
+      String[] namespaceParts = namespace.split("\\.");
+      Node targetParent = compiler.getNodeForCodeInsertion(minimumModule);
+      for (int i = 0; i < namespaceParts.length - 1; i++) {
+        ProvidedName parentName = providedNames.get(namespaceParts[i]);
+        if (parentName == null) {
+          // Create a new declaration for the parent namespace if it doesn't exist.
+          Node parentNode = createDeclarationNode(namespaceParts[i]);
+          targetParent.addChildToBack(parentNode);
+          providedNames.put(namespaceParts[i], new ProvidedName(parentNode, null));
         } else {
-            // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
-            parentName.replacementNode.getParent().addChildAfter(
-                replacementNode, parentName.replacementNode);
+          targetParent = parentName.replacementNode;
         }
       }
+      targetParent.addChildAfter(replacementNode, targetParent.getLastChild());
+    }
     if (explicitNode!= null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
