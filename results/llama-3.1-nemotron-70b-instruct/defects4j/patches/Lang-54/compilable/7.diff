diff --git a/tmp/d2a215e2-0392-4525-a9ff-69824f56799e_buggy.java b/tmp/5878d349-b434-453e-b68d-0a848ba12d8d_fixed.java
index 90fe130..f0079d3 100644
--- a/tmp/d2a215e2-0392-4525-a9ff-69824f56799e_buggy.java
+++ b/tmp/5878d349-b434-453e-b68d-0a848ba12d8d_fixed.java
@@ -1,61 +1,70 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
  *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
+ *   LocaleUtils.toLocale("fr__POSIX")  = new Locale("fr", "", "POSIX")
  * </pre>
  *
  * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
  * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
  * Thus, the result from getVariant() may vary depending on your JDK.</p>
  *
  * <p>This method validates the input strictly.
  * The language code must be lowercase.
  * The country code must be uppercase.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+    if (len < 2 || (len!= 2 && len!= 5 && len!= 8 && (len < 7 || len > 8))) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     char ch0 = str.charAt(0);
     char ch1 = str.charAt(1);
     if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
     if (len == 2) {
         return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+    } else if (str.charAt(2) == '_') {
         if (len == 5) {
+            char ch3 = str.charAt(3);
+            char ch4 = str.charAt(4);
+            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+        } else if (len == 8) {
+            char ch3 = str.charAt(3);
+            char ch4 = str.charAt(4);
+            if ((ch3 == '_' && ch4 >= 'a' && ch4 <= 'z') || (ch3 >= 'a' && ch3 <= 'z' && ch4 == '_')) {
+                // language + variant
+                return new Locale(str.substring(0, 2), "", str.substring(3));
+            } else if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {
+                // language + country + variant
                 if (str.charAt(5)!= '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
                 return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            } else {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
         }
     }
+    throw new IllegalArgumentException("Invalid locale format: " + str);
+}
\ No newline at end of file
