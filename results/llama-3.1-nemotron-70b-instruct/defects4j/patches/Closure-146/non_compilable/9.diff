diff --git a/tmp/d1a0ee9f-33e7-47ed-abf3-c7b6c94d9997_buggy.java b/tmp/bcf5d74b-fd73-458a-87d6-e1337a858f40_fixed.java
index 210695a..a03b8fe 100644
--- a/tmp/d1a0ee9f-33e7-47ed-abf3-c7b6c94d9997_buggy.java
+++ b/tmp/bcf5d74b-fd73-458a-87d6-e1337a858f40_fixed.java
@@ -1,32 +1,41 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        // If the types are unequal, and either type is VOID (noop, or undefined/void),
+        // restrict the other type to NON_VOID (i.e., not undefined/void)
+        if (this.isVoid() &&!that.isVoid()) {
+          return new TypePair(this, NON_VOID_TYPE);
+        } else if (!this.isVoid() && that.isVoid()) {
+          return new TypePair(NON_VOID_TYPE, that);
+        }
+        // Fall through for other cases
+
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
