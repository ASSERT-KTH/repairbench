diff --git a/tmp/859f0a58-619a-44f4-a6ce-5b21ebdf6689_buggy.java b/tmp/19036739-8d45-4be3-bf23-192e3352bdba_fixed.java
index 210695a..f235a7a 100644
--- a/tmp/859f0a58-619a-44f4-a6ce-5b21ebdf6689_buggy.java
+++ b/tmp/19036739-8d45-4be3-bf23-192e3352bdba_fixed.java
@@ -1,32 +1,41 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
+        // If 'this' is VOID_TYPE (representing undefined) and the comparison result is FALSE,
+        // then 'that' cannot be VOID_TYPE, and vice versa.
+        if (this.isVoid() || that.isVoid()) {
+          return new TypePair(
+              this.isVoid()? NO_TYPE : this,
+              that.isVoid()? NO_TYPE : that);
+        }
+        return new TypePair(this, that);
+
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
 }
\ No newline at end of file
