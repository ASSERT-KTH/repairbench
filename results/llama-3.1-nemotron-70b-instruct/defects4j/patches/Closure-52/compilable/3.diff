diff --git a/tmp/43f31c39-e776-433f-bf49-28cbe74cc155_buggy.java b/tmp/5506b5eb-d9c9-4482-a5f2-5e79bd40d4eb_fixed.java
index 4b7f469..d598b20 100644
--- a/tmp/43f31c39-e776-433f-bf49-28cbe74cc155_buggy.java
+++ b/tmp/5506b5eb-d9c9-4482-a5f2-5e79bd40d4eb_fixed.java
@@ -1,10 +1,62 @@
+/**
+ * Checks if a given string represents a simple number (e.g., not in scientific notation, 
+ * not in hexadecimal or octal format if not enclosed in quotes, and not a decimal number 
+ * if enclosed in quotes).
+ * 
+ * @param s the input string to check
+ * @return true if the string represents a simple number, false otherwise
+ */
 static boolean isSimpleNumber(String s) {
     int len = s.length();
+    
+    // Check if the string is enclosed in quotes
+    if (s.startsWith("\"") && s.endsWith("\"")) {
+        // If quoted, only allow decimal numbers
+        for (int index = 1; index < len - 1; index++) { // exclude quotes
+            char c = s.charAt(index);
+            if (c < '0' || c > '9') {
+                if (c == '.') {
+                    // Allow a single decimal point
+                    if (s.indexOf('.', index + 1)!= -1) {
+                        return false;
+                    }
+                } else {
+                    return false;
+                }
+            }
+        }
+        return true; // Quoted decimal number or integer
+    } 
+    // If not quoted, allow integers in decimal, hexadecimal, or octal
+    else {
+        // Check for hexadecimal or octal prefix
+        if (len > 2 && s.substring(0, 2).equals("0x")) {
+            // Hexadecimal
+            for (int index = 2; index < len; index++) {
+                char c = s.charAt(index);
+                if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {
+                    return false;
+                }
+            }
+            return true; // Hexadecimal
+        } else if (s.charAt(0) == '0' && len > 1) {
+            // Octal (assuming no decimal points are allowed in octal for simplicity)
+            for (int index = 1; index < len; index++) {
+                char c = s.charAt(index);
+                if (c < '0' || c > '7') {
+                    return false;
+                }
+            }
+            return true; // Octal
+        } else {
+            // Decimal integer
             for (int index = 0; index < len; index++) {
                 char c = s.charAt(index);
                 if (c < '0' || c > '9') {
                     return false;
                 }
             }
-    return len > 0;
+            return len > 0; // Decimal integer
+        }
+    }
 }
\ No newline at end of file
