diff --git a/tmp/2276d462-d13d-4b19-8beb-d6d97432f006_buggy.java b/tmp/cfed4521-bba9-4638-9bee-c2bb75fa7c2d_fixed.java
index 0b7c52e..1ddbdf0 100644
--- a/tmp/2276d462-d13d-4b19-8beb-d6d97432f006_buggy.java
+++ b/tmp/cfed4521-bba9-4638-9bee-c2bb75fa7c2d_fixed.java
@@ -1,27 +1,46 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
-        // We should never see a mix of numbers and strings.
+    // Fix: Check if child is a STRING node before calling getString()
+    if (child.isString()) {
       String name = child.getString();
       T type = typeSystem.getType(getScope(), n, name);
 
       Property prop = getProperty(name);
       if (!prop.scheduleRenaming(child,
                                  processProperty(t, prop, type, null))) {
         // TODO(user): It doesn't look like the user can do much in this
         // case right now.
         if (propertiesToErrorFor.containsKey(name)) {
           compiler.report(JSError.make(
               t.getSourceName(), child, propertiesToErrorFor.get(name),
               Warnings.INVALIDATION, name,
               (type == null? "null" : type.toString()), n.toString(), ""));
         }
       }
+    } else if (child.isGetProp() || child.isSetProp()) {
+      // Handle GET and SET nodes separately to avoid null pointer exceptions
+      String name = child.getChildAtIndex(0).getString();
+      T type = typeSystem.getType(getScope(), n, name);
+
+      Property prop = getProperty(name);
+      if (!prop.scheduleRenaming(child,
+                                 processProperty(t, prop, type, null))) {
+        // TODO(user): It doesn't look like the user can do much in this
+        // case right now.
+        if (propertiesToErrorFor.containsKey(name)) {
+          compiler.report(JSError.make(
+              t.getSourceName(), child, propertiesToErrorFor.get(name),
+              Warnings.INVALIDATION, name,
+              (type == null? "null" : type.toString()), n.toString(), ""));
+        }
+      }
+    }
   }
 }
\ No newline at end of file
