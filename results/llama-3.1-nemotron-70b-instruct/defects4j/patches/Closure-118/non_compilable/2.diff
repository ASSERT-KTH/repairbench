diff --git a/tmp/56bad3ad-3cd5-4212-ace4-aba4a69550e6_buggy.java b/tmp/01ebbf69-6481-433e-8f15-2fee1bdba7c2_fixed.java
index 0b7c52e..0ec7694 100644
--- a/tmp/56bad3ad-3cd5-4212-ace4-aba4a69550e6_buggy.java
+++ b/tmp/01ebbf69-6481-433e-8f15-2fee1bdba7c2_fixed.java
@@ -1,27 +1,54 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
-        String name = child.getString();
+    String name;
+    if (child.isString()) {
+      name = child.getString();
+    } else if (child.isGetProp() || child.isComputedProp()) {
+      // Evaluate the property name if it's not a literal string
+      name = evaluatePropertyName(child);
+    } else {
+      // Handle unexpected node types
+      compiler.report(JSError.make(
+          t.getSourceName(), child, "Unexpected node type in object literal",
+          Warnings.IS_SYNTAX_ERROR, child.toString()));
+      continue;
+    }
+
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
+
+// Helper method to evaluate the property name (if not a literal string)
+private String evaluatePropertyName(Node child) {
+  if (child.isGetProp()) {
+    // For GETPROP nodes, the property name is the last child
+    return child.getLastChild().getString();
+  } else if (child.isComputedProp()) {
+    // For COMPUTED_PROP nodes, attempt to evaluate the expression
+    // This may involve static analysis or other optimizations
+    // For simplicity, this example just returns the expression as-is
+    return child.getFirstChild().toString();
+  }
+  return null; // unexpected node type
+}
\ No newline at end of file
