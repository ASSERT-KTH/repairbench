diff --git a/tmp/c185bf5b-b41e-4999-8416-358a1e25a2f9_buggy.java b/tmp/685f6b0a-bb8b-46ea-b972-8bab6c21ceed_fixed.java
index 0b7c52e..368b834 100644
--- a/tmp/c185bf5b-b41e-4999-8416-358a1e25a2f9_buggy.java
+++ b/tmp/685f6b0a-bb8b-46ea-b972-8bab6c21ceed_fixed.java
@@ -1,27 +1,37 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
-        String name = child.getString();
+    String name;
+    if (child.isStringKey()) {
+      name = child.getString();
+    } else {
+      // If the key is not a string (e.g., a computed property), 
+      // we cannot determine the property name at compile time.
+      // Skip type checking and renaming for this property.
+      processProperty(t, null, null, child);
+      continue;
+    }
+
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
