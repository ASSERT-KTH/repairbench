diff --git a/tmp/0b718d30-7f70-4295-b761-6fd5eceaebe5_buggy.java b/tmp/4a32cfed-46ba-4b05-9733-6a5ceb829e87_fixed.java
index 0b7c52e..20ef90d 100644
--- a/tmp/0b718d30-7f70-4295-b761-6fd5eceaebe5_buggy.java
+++ b/tmp/4a32cfed-46ba-4b05-9733-6a5ceb829e87_fixed.java
@@ -1,27 +1,37 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child!= null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
+    if (name == null) { // Check if name is null before calling getType
+      compiler.report(JSError.make(
+          t.getSourceName(), child, "Invalid property name", Warnings.INVALID_PROPERTY, ""));
+      continue;
+    }
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
+    if (prop == null) { // Check if prop is null before calling scheduleRenaming
+      compiler.report(JSError.make(
+          t.getSourceName(), child, "Unknown property: " + name, Warnings.UNKNOWN_PROPERTY, ""));
+      continue;
+    }
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
