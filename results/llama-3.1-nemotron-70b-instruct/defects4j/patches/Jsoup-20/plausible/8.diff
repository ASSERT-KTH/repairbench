diff --git a/tmp/82a8551e-0d1c-4563-8fc1-0df2b4d39b19_buggy.java b/tmp/8454fce3-87d6-47af-88a1-a9d45fd482f7_fixed.java
index db19f52..cf79d0d 100644
--- a/tmp/82a8551e-0d1c-4563-8fc1-0df2b4d39b19_buggy.java
+++ b/tmp/8454fce3-87d6-47af-88a1-a9d45fd482f7_fixed.java
@@ -1,32 +1,38 @@
-    // switching the chartset midstream when a meta http-equiv tag defines the charset.
+/**
+ * switching the chartset midstream when a meta http-equiv tag defines the charset.
+ * 
+ * @param byteData  byte buffer containing HTML data
+ * @param charsetName character set name (or null to detect from HTML)
+ * @param baseUri    base URI for resolving relative URLs
+ * @param parser     parser to use for parsing HTML
+ * @return parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = meta.hasAttr("http-equiv")? getCharsetFromContentType(meta.attr("content")) : meta.attr("charset");
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
     if (doc == null) {
-            // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
-            // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
-            // into head mode
-
+        // Remove spurious byte-order-mark (BOM) if present
+        docData = docData.replace("\uFEFF", "");
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
