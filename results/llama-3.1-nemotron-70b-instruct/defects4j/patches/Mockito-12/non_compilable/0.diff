diff --git a/tmp/c9bad6db-df6e-462c-9895-5c48ec5a2409_buggy.java b/tmp/30577b3f-63c0-499a-afaf-0a34aa09d2d8_fixed.java
index bada2b6..c868536 100644
--- a/tmp/c9bad6db-df6e-462c-9895-5c48ec5a2409_buggy.java
+++ b/tmp/30577b3f-63c0-499a-afaf-0a34aa09d2d8_fixed.java
@@ -1,16 +1,55 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics by recursively resolving the type
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof TypeVariable) {
+            // Type variables are not instantiation-time constants, so return Object.class
+            return Object.class;
+        } else if (actual instanceof WildcardType) {
+            // For wildcard types, return the upper bound or Object.class if unbounded
+            return getBoundsFromWildcard((WildcardType) actual);
+        } else if (actual instanceof Class) {
+            // If the actual type is a Class, return it
+            return (Class<?>) actual;
+        } else {
+            // This should not happen, but handle it just in case
+            throw new IllegalStateException("Unhandled type: " + actual);
+        }
+    }
+    
+    return Object.class;
 }
 
+// Helper method to handle nested generics
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Type rawType = type.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        throw new IllegalStateException("Cannot resolve raw type to Class: " + rawType);
+    }
+}
+
+// Helper method to handle wildcard types
+private Class<?> getBoundsFromWildcard(WildcardType type) {
+    Type[] upperBounds = type.getUpperBounds();
+    if (upperBounds.length > 0) {
+        Type bound = upperBounds[0];
+        if (bound instanceof ParameterizedType) {
+            return getGenericTypeFromParameterizedType((ParameterizedType) bound);
+        } else if (bound instanceof Class) {
+            return (Class<?>) bound;
+        }
+    }
     return Object.class;
 }
\ No newline at end of file
