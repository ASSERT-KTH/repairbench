diff --git a/tmp/3583c356-0bf5-4803-ac3f-51a5ed31c58c_buggy.java b/tmp/573ab577-610c-4218-9f72-ff0fa75b751c_fixed.java
index bada2b6..a1c7795 100644
--- a/tmp/3583c356-0bf5-4803-ac3f-51a5ed31c58c_buggy.java
+++ b/tmp/573ab577-610c-4218-9f72-ff0fa75b751c_fixed.java
@@ -1,16 +1,45 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            // Direct Class reference
+            return (Class<?>) actual;
+        } else {
+            // Handle other types (e.g., TypeVariable, WildcardType)
+            throw new UnsupportedOperationException("Unsupported type: " + actual.getClass().getName());
+        }
     }
     
     return Object.class;
 }
+
+// Helper method to handle nested generics
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Class<?> rawType = (Class<?>) type.getRawType();
+    if (rawType.equals(Set.class) || rawType.equals(List.class) || rawType.equals(Map.class)) {
+        // For common collection types, return the raw type if we can't resolve the nested generic
+        return rawType;
+    }
+    Type actual = type.getActualTypeArguments()[0];
+    if (actual instanceof ParameterizedType) {
+        // Recursively resolve nested generics
+        return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+    } else if (actual instanceof Class) {
+        // Direct Class reference within the nested generic
+        return (Class<?>) actual;
+    } else {
+        // If we can't resolve the type, return the raw type
+        return rawType;
+    }
+}
\ No newline at end of file
