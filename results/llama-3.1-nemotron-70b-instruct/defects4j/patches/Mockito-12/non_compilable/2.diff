diff --git a/tmp/540d143c-80e1-43ba-91ea-ba0f5ad59ca0_buggy.java b/tmp/060c59cd-d0ea-4435-899d-d21d7a65a1fd_fixed.java
index bada2b6..0b361d1 100644
--- a/tmp/540d143c-80e1-43ba-91ea-ba0f5ad59ca0_buggy.java
+++ b/tmp/060c59cd-d0ea-4435-899d-d21d7a65a1fd_fixed.java
@@ -1,16 +1,25 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * In case of nested generics, it will recursively resolve the type.
  * 
  * @param field
  * @return
  */
 public Class getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof ParameterizedType) {
+            // handle nested generics by recursive call
+            return getGenericTypeä»ŽuentType(((ParameterizedType) actual).getRawType().getClass().getDeclaredFields()[0]));
+        } else if (actual instanceof Class) {
+            // actual type is a Class, safe to cast
             return (Class) actual;
-                //in case of nested generics we don't go deep
+        } else {
+            // actual type is not a Class, return Object.class as fallback
+            return Object.class;
+        }
     }
     
     return Object.class;
 }
\ No newline at end of file
