diff --git a/tmp/4dd9b9d5-120b-4447-80e7-d76cc9c02473_buggy.java b/tmp/d022c77e-4c3c-4163-b77a-4eae72284c6f_fixed.java
index bada2b6..1bd6ceb 100644
--- a/tmp/4dd9b9d5-120b-4447-80e7-d76cc9c02473_buggy.java
+++ b/tmp/d022c77e-4c3c-4163-b77a-4eae72284c6f_fixed.java
@@ -1,16 +1,49 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else {
+            // Handle TypeVariable, WildcardType, etc. by returning a bound if possible
+            return getTypeBound(actual);
+        }
+    }
+    
+    return Object.class;
 }
 
+// Helper method to handle nested generics
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Type rawType = type.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        // If raw type is not a Class, it's likely a TypeVariable or WildcardType, return a bound if possible
+        return getTypeBound(rawType);
+    }
+}
+
+// Helper method to get a bound from TypeVariable, WildcardType, etc.
+private Class<?> getTypeBound(Type type) {
+    if (type instanceof TypeVariable) {
+        Type[] bounds = ((TypeVariable<?>) type).getBounds();
+        return bounds.length > 0? (Class<?>) bounds[0] : Object.class;
+    } else if (type instanceof WildcardType) {
+        Type[] upperBounds = ((WildcardType) type).getUpperBounds();
+        return upperBounds.length > 0? (Class<?>) upperBounds[0] : Object.class;
+    } else {
+        // If all else fails, return Object.class
         return Object.class;
     }
+}
\ No newline at end of file
