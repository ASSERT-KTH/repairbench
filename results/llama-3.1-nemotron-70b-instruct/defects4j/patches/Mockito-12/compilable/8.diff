diff --git a/tmp/7dfa90b9-c8d9-468f-a111-9a08bb576ade_buggy.java b/tmp/e1b1328c-93bb-41fc-9a5d-ec8917305f3d_fixed.java
index bada2b6..d9e7922 100644
--- a/tmp/7dfa90b9-c8d9-468f-a111-9a08bb576ade_buggy.java
+++ b/tmp/e1b1328c-93bb-41fc-9a5d-ec8917305f3d_fixed.java
@@ -1,16 +1,42 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics
+            return (Class<?>) getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else {
+            // Handle cases where actual type is not a Class (e.g., TypeVariable, WildcardType)
+            return Object.class;
+        }
     }
     
     return Object.class;
 }
+
+// Helper method to recursively resolve type from ParameterizedType
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Class<?> rawType = (Class<?>) type.getRawType();
+    if (rawType.getTypeParameters().length == 0) {
+        return rawType;
+    }
+    // If the raw type has type parameters, we return the first type argument as a Class
+    // This assumption might need adjustment based on the specific requirements of handling nested generics
+    Type actual = type.getActualTypeArguments()[0];
+    if (actual instanceof ParameterizedType) {
+        return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+    } else if (actual instanceof Class) {
+        return (Class<?>) actual;
+    } else {
+        return Object.class;
+    }
+}
\ No newline at end of file
