diff --git a/tmp/cca2ccc1-c692-466c-ab84-5cef1fc96b5b_buggy.java b/tmp/8de4616d-8378-42c3-b73b-169e34666a68_fixed.java
index bada2b6..45742de 100644
--- a/tmp/cca2ccc1-c692-466c-ab84-5cef1fc96b5b_buggy.java
+++ b/tmp/8de4616d-8378-42c3-b73b-169e34666a68_fixed.java
@@ -1,16 +1,33 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) { // handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) { // actual type is a Class
+            return (Class<?>) actual;
+        } else { // actual type is not a Class (e.g., TypeVariable, WildcardType)
+            return Object.class; // fall back to Object.class
+        }
     }
     
     return Object.class;
 }
+
+// Helper method to recursively resolve the type from a ParameterizedType
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType parameterizedType) {
+    Type rawType = parameterizedType.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        // This should not happen in practice, but handle it just in case
+        return Object.class;
+    }
+}
\ No newline at end of file
