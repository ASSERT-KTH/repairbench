diff --git a/tmp/7bc0245f-7e9c-4c3e-b4e5-001b19e637f7_buggy.java b/tmp/05763202-613d-4c1a-8b70-77f240d4501e_fixed.java
index bada2b6..6bf4602 100644
--- a/tmp/7bc0245f-7e9c-4c3e-b4e5-001b19e637f7_buggy.java
+++ b/tmp/05763202-613d-4c1a-8b70-77f240d4501e_fixed.java
@@ -1,16 +1,44 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics
+            return (Class<?>) getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            // Direct class reference
+            return (Class<?>) actual;
+        } else {
+            // Type variable or wildcard, default to Object
+            return Object.class;
+        }
+    }
+    
+    return Object.class;
 }
 
+// Helper method to recursively resolve nested generics
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Type rawType = type.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        // Handle further nested generics or complex types
+        for (Type arg : type.getActualTypeArguments()) {
+            if (arg instanceof ParameterizedType) {
+                return getGenericTypeFromParameterizedType((ParameterizedType) arg);
+            } else if (arg instanceof Class) {
+                return (Class<?>) arg;
+            }
+        }
+        // Default to Object if no class type found
         return Object.class;
     }
+}
\ No newline at end of file
