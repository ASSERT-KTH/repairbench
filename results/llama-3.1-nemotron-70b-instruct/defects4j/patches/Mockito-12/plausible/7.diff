diff --git a/tmp/79ae7972-5a6f-4493-8d43-dd0906849c3a_buggy.java b/tmp/098a1ecd-9869-4d01-abf2-9a8e7d0ca876_fixed.java
index bada2b6..7a874bd 100644
--- a/tmp/79ae7972-5a6f-4493-8d43-dd0906849c3a_buggy.java
+++ b/tmp/098a1ecd-9869-4d01-abf2-9a8e7d0ca876_fixed.java
@@ -1,16 +1,34 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * In case of nested generics, it recursively resolves the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Recursive call to handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else {
+            // Handle other types (e.g., TypeVariable, WildcardType)
+            throw new UnsupportedOperationException("Unsupported type: " + actual.getTypeName());
+        }
     }
     
     return Object.class;
 }
+
+// Helper method to extract Class from ParameterizedType (handling nested generics)
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType parameterizedType) {
+    Type rawType = parameterizedType.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        throw new UnsupportedOperationException("Unsupported raw type: " + rawType.getTypeName());
+    }
+}
\ No newline at end of file
