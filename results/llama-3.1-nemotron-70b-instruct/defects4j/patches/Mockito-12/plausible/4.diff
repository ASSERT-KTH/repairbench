diff --git a/tmp/c84c60a8-44f4-4362-aba1-70eaf3489076_buggy.java b/tmp/1102f3e5-470b-4e69-a9a8-80ed9948015f_fixed.java
index bada2b6..73468b6 100644
--- a/tmp/c84c60a8-44f4-4362-aba1-70eaf3489076_buggy.java
+++ b/tmp/1102f3e5-470b-4e69-a9a8-80ed9948015f_fixed.java
@@ -1,16 +1,29 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Recursive call to handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else {
+            // Handle other types (e.g., TypeVariable, WildcardType) by returning Object.class
+            return Object.class;
+        }
     }
     
     return Object.class;
 }
+
+// Helper method to extract the raw type from a ParameterizedType
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType parameterizedType) {
+    return (Class<?>) parameterizedType.getRawType();
+}
\ No newline at end of file
