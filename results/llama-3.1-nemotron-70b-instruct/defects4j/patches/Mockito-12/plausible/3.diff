diff --git a/tmp/031cacc1-9baf-4c0e-8f2c-e6944f9ad602_buggy.java b/tmp/fa2ba9a6-18ad-4fc1-84e6-411e8a088b02_fixed.java
index bada2b6..9fe5f7b 100644
--- a/tmp/031cacc1-9baf-4c0e-8f2c-e6944f9ad602_buggy.java
+++ b/tmp/fa2ba9a6-18ad-4fc1-84e6-411e8a088b02_fixed.java
@@ -1,16 +1,40 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Handles nested generics by recursively resolving the type.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
     if (generic!= null && generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof ParameterizedType) {
+            // Handle nested generics
+            return getGenericTypeFromParameterizedType((ParameterizedType) actual);
+        } else if (actual instanceof Class) {
+            // Direct class reference
+            return (Class<?>) actual;
+        } else {
+            // Handle other type representations (e.g., TypeVariable, WildcardType)
+            // For simplicity, this example returns Object.class for unhandled cases
+            // You may need to extend this based on specific requirements
+            return Object.class;
+        }
+    }
+    
+    return Object.class;
 }
 
+// Helper method to recursively handle nested generics
+private Class<?> getGenericTypeFromParameterizedType(ParameterizedType type) {
+    Type rawType = type.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else {
+        // If the raw type is not a Class (e.g., another ParameterizedType), 
+        // for simplicity, this example returns Object.class
+        // You may need to extend this based on specific requirements
         return Object.class;
     }
+}
\ No newline at end of file
