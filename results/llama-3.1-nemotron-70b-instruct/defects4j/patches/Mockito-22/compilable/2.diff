diff --git a/tmp/7bbc7b99-1d47-4559-93e1-dc65b500aa3c_buggy.java b/tmp/809d8c99-2168-4f55-b773-61f9c54ff680_fixed.java
index 111ba5e..f8a55ba 100644
--- a/tmp/7bbc7b99-1d47-4559-93e1-dc65b500aa3c_buggy.java
+++ b/tmp/809d8c99-2168-4f55-b773-61f9c54ff680_fixed.java
@@ -1,9 +1,31 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
     } else if (isArray(o1)) {
         return isArray(o2) && areArraysEqual(o1, o2);
+    } else if (o1.getClass()!= o2.getClass()) {
+        // Handle case where objects are of different classes but might still be equal (e.g., int[] vs Integer[])
+        if (o1 instanceof Integer && o2 instanceof Number) {
+            return ((Number) o1).doubleValue() == ((Number) o2).doubleValue();
+        } else if (o2 instanceof Integer && o1 instanceof Number) {
+            return ((Number) o2).doubleValue() == ((Number) o1).doubleValue();
+        } else if (o1 instanceof String && o2 instanceof CharSequence) {
+            return o1.equals(o2.toString());
+        } else if (o2 instanceof String && o1 instanceof CharSequence) {
+            return o2.equals(o1.toString());
         } else {
+            // If none of the above, fall back to original behavior (this might still not cover all edge cases)
             return o1.equals(o2);
         }
+    } else {
+        // If class types match, use the original equals() method for comparison
+        // Additionally, handle the case where the object's equals() method is incorrectly implemented
+        try {
+            return o1.equals(o2);
+        } catch (RuntimeException e) {
+            // If a RuntimeException occurs during equals() comparison, it's likely due to a faulty implementation
+            // In this case, fall back to comparing the object's string representations (as a last resort)
+            return o1.toString().equals(o2.toString());
+        }
+    }
 }
\ No newline at end of file
