diff --git a/tmp/79e876df-4f40-4bfe-857c-8e2416980eba_buggy.java b/tmp/8a2659e3-6ae7-4f80-8f1a-5b199aedeae9_fixed.java
index 4d0be80..504d6e4 100644
--- a/tmp/79e876df-4f40-4bfe-857c-8e2416980eba_buggy.java
+++ b/tmp/8a2659e3-6ae7-4f80-8f1a-5b199aedeae9_fixed.java
@@ -1,10 +1,47 @@
 @Override
 Node processForInLoop(ForInLoop loopNode) {
+    // Check if the loop is a "for each" loop and handle it accordingly
+    if (loopNode.getToken() == Token.FOR_EACH) {
+        Node iterator = transform(loopNode.getIterator());
+        Node iteratedObject = transform(loopNode.getIteratedObject());
         
-        // Return the bare minimum to put the AST in a valid state.
+        // Create a temporary variable to hold the iterated value
+        String tempVarName = getUniqueName("temp");
+        Node tempDeclaration = newNode(
+            Token.VAR, 
+            newNode(Token.NAME, tempVarName));
+
+        // Create an assignment node for the iterated value
+        Node assignment = newNode(
+            Token.ASSIGN, 
+            newNode(Token.NAME, tempVarName), 
+            newNode(Token.GETPROP, iteratedObject, iterator));
+
+        // Wrap the loop body with a block and prepend the assignment
+        Node newBody = transformBlock(loopNode.getBody());
+        newBody = newNode(
+            Token.BLOCK, 
+            assignment, 
+            newBody);
+
+        // Return the transformed "for each" loop as a regular "for in" loop
+        return newNode(
+            Token.FOR,
+            iterator,
+            iteratedObject,
+            newNode(
+                Token.IF, 
+                newNode(Token.COMMA, 
+                         newNode(Token.EQ, newNode(Token.NAME, tempVarName), newNode(Token.NULL)), 
+                         newNode(Token.EQ, newNode(Token.NAME, tempVarName), newNode(Token.UNDEFINED))),
+                newNode(Token.CONTINUE),
+                newBody));
+    } else {
+        // Return the bare minimum to put the AST in a valid state for regular "for in" loops.
         return newNode(
             Token.FOR,
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
             transformBlock(loopNode.getBody()));
     }
+}
\ No newline at end of file
