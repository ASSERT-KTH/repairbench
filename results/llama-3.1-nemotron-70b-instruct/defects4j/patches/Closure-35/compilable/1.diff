diff --git a/tmp/7c6b9330-1a5c-4c18-87ef-c5f20516eaeb_buggy.java b/tmp/87867d8f-e314-42d4-b900-b1e0db18b90a_fixed.java
index d57736b..82792d4 100644
--- a/tmp/7c6b9330-1a5c-4c18-87ef-c5f20516eaeb_buggy.java
+++ b/tmp/87867d8f-e314-42d4-b900-b1e0db18b90a_fixed.java
@@ -1,39 +1,47 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj!= null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType!= null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            JSType existingPropType = objType.getPropertyType(prop);
+            JSType typeToInfer;
+            if (existingPropType!= null) {
+              // If property already exists, intersect with constraint type
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(
+                  existingPropType.getLeastSupertype(propType));
+            } else if (!objType.hasProperty(prop)) {
+              // If property doesn't exist, use constraint type as upper bound
+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
+            } else {
+              // If property exists but its type is unknown, use constraint type
+              typeToInfer = propType;
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
