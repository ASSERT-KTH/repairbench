diff --git a/tmp/cab42d6e-4c22-42af-81d6-d0f2d5979f14_buggy.java b/tmp/9427c11e-7e14-49fd-b501-9b5aee90dce9_fixed.java
index d57736b..836ced1 100644
--- a/tmp/cab42d6e-4c22-42af-81d6-d0f2d5979f14_buggy.java
+++ b/tmp/9427c11e-7e14-49fd-b501-9b5aee90dce9_fixed.java
@@ -1,39 +1,42 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj!= null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType!= null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          if (objType.hasProperty(prop)) {
+            // Fix: If property exists, find the least supertype of existing and inferred types
+            typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
+          } else {
+            // Fix: If property doesn't exist, use the original logic to find the least supertype with VOID_TYPE
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
