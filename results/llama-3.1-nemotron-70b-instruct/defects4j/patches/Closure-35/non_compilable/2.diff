diff --git a/tmp/701ebe35-2f7c-4076-a99d-ae45c30fde0b_buggy.java b/tmp/49bc9b64-1488-4dc4-b0f5-ab68b7ef3a8f_fixed.java
index d57736b..9f64799 100644
--- a/tmp/701ebe35-2f7c-4076-a99d-ae45c30fde0b_buggy.java
+++ b/tmp/49bc9b64-1488-4dc4-b0f5-ab68b7ef3a8f_fixed.java
@@ -1,39 +1,44 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj!= null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType!= null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
+              // Fix: Changed getVoidType() to getObjectType() to correctly handle object properties
               typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                  getNativeType(OBJECT_TYPE).getLeastSupertype(propType);
+            } else {
+              // Fix: Added a recursive call to handle nested object properties
+              inferPropertyTypesToMatchConstraint(objType.getPropertyType(prop), propType);
+              typeToInfer = objType.getPropertyType(prop);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
