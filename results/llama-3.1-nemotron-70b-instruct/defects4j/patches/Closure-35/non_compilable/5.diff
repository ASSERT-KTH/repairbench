diff --git a/tmp/2b7fc5c4-08d9-4aad-978a-28eb53ff2d5b_buggy.java b/tmp/10fc3dfe-5b3c-49d0-bd8d-3a31997c1f37_fixed.java
index d57736b..f4b6236 100644
--- a/tmp/2b7fc5c4-08d9-4aad-978a-28eb53ff2d5b_buggy.java
+++ b/tmp/10fc3dfe-5b3c-49d0-bd8d-3a31997c1f37_fixed.java
@@ -1,39 +1,48 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj!= null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType!= null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
+            if (objType.hasProperty(prop)) {
+              // FIX: Widen existing property type instead of ignoring it
+              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
+            } else {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
+          } else if (objType.isPropertyTypeInferred(prop)) {
+            // FIX: Widen already inferred property type if necessary
+            JSType existingType = objType.getPropertyType(prop);
+            if (!existingType.isAssignableFrom(propType)) {
+              objType.defineInferredProperty(prop, existingType.getLeastSupertype(propType), null);
+            }
           }
         }
       }
     }
 }
\ No newline at end of file
