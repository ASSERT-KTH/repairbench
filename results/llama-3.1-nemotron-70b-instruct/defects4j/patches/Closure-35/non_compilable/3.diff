diff --git a/tmp/fb217ac4-db83-45bc-a337-5b6d7272d935_buggy.java b/tmp/36c3a65d-5458-4204-b3fe-705e27727ad8_fixed.java
index d57736b..0503fe2 100644
--- a/tmp/fb217ac4-db83-45bc-a337-5b6d7272d935_buggy.java
+++ b/tmp/36c3a65d-5458-4204-b3fe-705e27727ad8_fixed.java
@@ -1,39 +1,45 @@
 /**
  * Suppose X is an object with inferred properties.
  * Suppose also that X is used in a way where it would only type-check
  * correctly if some of those properties are widened.
  * Then we should be polite and automatically widen X's properties for him.
  *
  * For a concrete example, consider:
  * param x {{prop: (number|undefined)}}
  * function f(x) {}
  * f({});
  *
  * If we give the anonymous object an inferred property of (number|undefined),
  * then this code will type-check appropriately.
  */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj!= null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType!= null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!objType.hasProperty(prop)) {
+            // FIX: Changed getNativeType(VOID_TYPE) to getNativeType(OBJECT_TYPE)
+            // to correctly infer object types when property is not defined
             typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+                getNativeType(OBJECT_TYPE).getLeastSupertype(propType);
+          } else {
+            // FIX: Added else clause to handle existing properties
+            // and ensure their types are widened if necessary
+            typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
