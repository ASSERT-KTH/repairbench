diff --git a/tmp/b9d6d94d-b814-453b-a565-631faa758ceb_buggy.java b/tmp/288ed81f-3fac-4849-891b-8a0b6a8407c3_fixed.java
index 4bbd561..96cf7ea 100644
--- a/tmp/b9d6d94d-b814-453b-a565-631faa758ceb_buggy.java
+++ b/tmp/288ed81f-3fac-4849-891b-8a0b6a8407c3_fixed.java
@@ -1,37 +1,51 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length() || input.charAt(index)!= '&' || input.charAt(index + 1)!= '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
+    if (start < input.length()) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
+    }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < input.length() && input.charAt(end)!= ';') {
         end++;
     }
 
+    if (end >= input.length() || input.charAt(end)!= ';') {
+        return 0; // Invalid entity, no semicolon found
+    }
+
     int entityValue;
     try {
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
     } catch (NumberFormatException nfe) {
         return 0;
     }
 
+    // Fix: handle supplementary characters (UTF-16 surrogate pairs)
+    if (entityValue > 0xFFFF) {
+        out.write(Character.highSurrogate(entityValue));
+        out.write(Character.lowSurrogate(entityValue));
+    } else {
         out.write(entityValue);
+    }
+
     return 2 + (end - start) + (isHex? 1 : 0) + 1;
 }
\ No newline at end of file
-        return 0;
-    }
