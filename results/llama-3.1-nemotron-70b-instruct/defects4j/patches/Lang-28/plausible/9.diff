diff --git a/tmp/d4922acd-f4a8-4ca8-a7ac-939ee526650b_buggy.java b/tmp/4f83cbd7-aaae-4d99-9954-3dc3f1bec976_fixed.java
index 4bbd561..a108559 100644
--- a/tmp/d4922acd-f4a8-4ca8-a7ac-939ee526650b_buggy.java
+++ b/tmp/4f83cbd7-aaae-4d99-9954-3dc3f1bec976_fixed.java
@@ -1,37 +1,51 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length()) {
+        return 0; // not enough characters to match '&#' pattern
+    }
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) { // additional bounds check
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
+        if (end == input.length()) { // didn't find terminating ';'
+            return 0;
+        }
 
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Fix: use write() that can handle supplementary characters
+        if (entityValue > 0xFFFF) { // supplementary character
+            out.write(Character.highSurrogate(entityValue));
+            out.write(Character.lowSurrogate(entityValue));
+        } else {
             out.write(entityValue);
+        }
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
