diff --git a/tmp/906ba338-2f48-466e-bb25-ab27d349ff2b_buggy.java b/tmp/87e08d0d-a032-443f-a73d-2c77b84899bf_fixed.java
index 4bbd561..e6950c2 100644
--- a/tmp/906ba338-2f48-466e-bb25-ab27d349ff2b_buggy.java
+++ b/tmp/87e08d0d-a032-443f-a73d-2c77b84899bf_fixed.java
@@ -1,37 +1,51 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index + 1 >= input.length()) {
+        return 0; // not enough characters to form '&#'
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) { // protect against ArrayIndexOutOfBounds
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end)!= ';') {
             end++;
         }
+        if (end >= input.length()) { // protect against ArrayIndexOutOfBounds
+            return 0; // malformed entity, missing ';'
+        }
 
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        // Fix: Handle supplementary characters correctly
+        if (entityValue > 0xFFFF) {
+            out.write(Character.highSurrogate(entityValue));
+            out.write(Character.lowSurrogate(entityValue));
+        } else {
             out.write(entityValue);
+        }
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
