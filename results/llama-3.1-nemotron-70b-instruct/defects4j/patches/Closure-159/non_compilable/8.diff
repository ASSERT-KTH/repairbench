diff --git a/tmp/9d7dab32-9822-4759-bb02-069ec26d9054_buggy.java b/tmp/7797b06e-ea0e-456c-9e86-03eee3ec3239_fixed.java
index de9af32..1903dac 100644
--- a/tmp/9d7dab32-9822-4759-bb02-069ec26d9054_buggy.java
+++ b/tmp/7797b06e-ea0e-456c-9e86-03eee3ec3239_fixed.java
@@ -1,18 +1,33 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed!= null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
     if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      String funcName = child.getString();
+      // Check if the function is defined in the same scope
+      Node scope = node.getScope().getOwner();
+      while (scope!= null) {
+        Node funcDecl = scope.getFirstChild();
+        while (funcDecl!= null) {
+          if (funcDecl.getType() == Token.FUNCTION && funcDecl.getChildCount() > 0 
+              && funcDecl.getFirstChild().getString().equals(funcName)) {
+            changed.add(funcName);
+            break;
+          }
+          funcDecl = funcDecl.getNext();
+        }
+        if (changed.contains(funcName)) break;
+        scope = scope.getScope().getOwner();
+      }
     }
   }
 
   for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
