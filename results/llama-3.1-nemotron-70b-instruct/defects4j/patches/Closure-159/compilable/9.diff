diff --git a/tmp/22d8cb73-617e-4b4e-a5ec-bb5a1f27921e_buggy.java b/tmp/0524e4bb-6777-4ba3-ae8f-a3e8ba274311_fixed.java
index de9af32..5473aa6 100644
--- a/tmp/22d8cb73-617e-4b4e-a5ec-bb5a1f27921e_buggy.java
+++ b/tmp/0524e4bb-6777-4ba3-ae8f-a3e8ba274311_fixed.java
@@ -1,18 +1,21 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed!= null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    if (child.getType() == Token.NAME || 
+        (child.getType() == Token.CALL && child.getFirstChild().getType() == Token.NAME)) {
+      // Handle both direct function calls (e.g., `foo()`) and indirect calls (e.g., `foo.call(this)`)
+      String functionName = child.getFirstChild()!= null? child.getFirstChild().getString() : child.getString();
+      changed.add(functionName);
     }
   }
 
   for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
