diff --git a/tmp/538dfb9e-7d90-4151-8203-6d324d628bcb_buggy.java b/tmp/977e3f55-9540-4543-bcf9-3733abb52ed1_fixed.java
index de9af32..679dff1 100644
--- a/tmp/538dfb9e-7d90-4151-8203-6d324d628bcb_buggy.java
+++ b/tmp/977e3f55-9540-4543-bcf9-3733abb52ed1_fixed.java
@@ -1,18 +1,64 @@
 /**
  * @see #findCalledFunctions(Node)
  */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
     Preconditions.checkArgument(changed!= null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
       if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+        String functionName = child.getString();
+        // Check if the function is defined in the same scope
+        if (isFunctionDefinedInScope(node, functionName)) {
+          changed.add(functionName);
+        }
+      } else if (child.getType() == Token.THIS && node.getNext()!= null) {
+        // Handle 'this.func()' case, where 'func' is the actual function name
+        Node funcNameNode = node.getNext();
+        if (funcNameNode.getType() == Token.GETPROP && funcNameNode.getString()!= null) {
+          String functionName = funcNameNode.getString();
+          if (isFunctionDefinedInScope(node, functionName)) {
+            changed.add(functionName);
+          }
+        }
       }
     }
 
     for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
 }
+
+// Helper function to check if a function is defined in the same scope
+private boolean isFunctionDefinedInScope(Node node, String functionName) {
+    // Implement scope traversal to check for function definition
+    // This is a simplified version, actual implementation may vary based on the parser's AST structure
+    Node scope = getEnclosingScope(node);
+    if (scope!= null) {
+        for (Node funcDecl = scope.getFirstChild(); funcDecl!= null; funcDecl = funcDecl.getNext()) {
+            if (funcDecl.getType() == Token.FUNCTION && funcDecl.getString()!= null 
+                && funcDecl.getString().equals(functionName)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+// Helper function to get the enclosing scope of a node
+private Node getEnclosingScope(Node node) {
+    // Implement scope traversal to find the enclosing scope
+    // This is a simplified version, actual implementation may vary based on the parser's AST structure
+    Node parent = node.getParent();
+    while (parent!= null &&!isScopeNode(parent)) {
+        parent = parent.getParent();
+    }
+    return parent;
+}
+
+// Helper function to check if a node represents a scope (e.g., function, block)
+private boolean isScopeNode(Node node) {
+    // Implement scope node type checking based on the parser's Token enum
+    // This is a simplified version, actual implementation may vary
+    return node.getType() == Token.FUNCTION || node.getType() == Token.BLOCK;
+}
\ No newline at end of file
