diff --git a/tmp/f7e34dd5-db9f-4b2b-8d32-2f7b26bf7cbc_buggy.java b/tmp/aff8dbf3-aeaa-400a-ba4a-9adb0ae0ccdc_fixed.java
index de9af32..2645d68 100644
--- a/tmp/f7e34dd5-db9f-4b2b-8d32-2f7b26bf7cbc_buggy.java
+++ b/tmp/aff8dbf3-aeaa-400a-ba4a-9adb0ae0ccdc_fixed.java
@@ -1,18 +1,21 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed!= null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+    if (child.getType() == Token.NAME || 
+        (child.getType() == Token.CALL && child.getFirstChild().getType() == Token.NAME)) {
+      // Handle both direct calls (e.g., foo()) and indirect calls (e.g., foo.call(this))
+      String functionName = child.getType() == Token.NAME? child.getString() : child.getFirstChild().getString();
+      changed.add(functionName);
     }
   }
 
   for (Node c = node.getFirstChild(); c!= null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
