diff --git a/tmp/3e7430e4-0b0c-4e09-ad99-1f6ccb887a79_buggy.java b/tmp/7fa3ba67-0150-49f8-9316-d94b226798b0_fixed.java
index 03b03d7..9f391fc 100644
--- a/tmp/3e7430e4-0b0c-4e09-ad99-1f6ccb887a79_buggy.java
+++ b/tmp/7fa3ba67-0150-49f8-9316-d94b226798b0_fixed.java
@@ -1,25 +1,27 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
+    
+    // If currently in the earlier offset, and asking for earlier, return original instant
+    // If currently in the later offset, and asking for later, return original instant
+    if ((local == instantBefore &&!earlierOrLater) || (local == instantAfter && earlierOrLater)) {
+        return instant;
+    }
+    
+    // Otherwise, convert to the other offset
     return convertLocalToUTC(local, false, earlierOrLater? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
 }
\ No newline at end of file
