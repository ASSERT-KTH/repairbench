diff --git a/tmp/eb241dfc-cde1-46f2-84cd-e034e55f8ca5_buggy.java b/tmp/79287645-d24b-46d7-8bda-682d0aabc7ca_fixed.java
index 03b03d7..fc67668 100644
--- a/tmp/eb241dfc-cde1-46f2-84cd-e034e55f8ca5_buggy.java
+++ b/tmp/79287645-d24b-46d7-8bda-682d0aabc7ca_fixed.java
@@ -1,25 +1,29 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Fix: Ensure we're using the correct 'local' value that corresponds to the desired offset
+    if (earlierOrLater) {
+        // If earlierOrLater is true, we want the later offset, so use instantAfter to find the correct 'local'
+        local = instantAfter;
+    } else {
+        // If earlierOrLater is false, we want the earlier offset, so use instantBefore to find the correct 'local'
+        local = instantBefore;
+    }
+    
+    return convertLocalToUTC(local, false, earlierOrLater);
 }
\ No newline at end of file
