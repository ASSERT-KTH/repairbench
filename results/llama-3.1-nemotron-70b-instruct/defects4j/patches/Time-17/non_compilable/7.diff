diff --git a/tmp/aaf3de4b-8de1-4a3a-ab39-3c758c7c6b9d_buggy.java b/tmp/0d077d29-dc69-4fe5-8f72-bee9f5c73d42_fixed.java
index 03b03d7..5dbfc9a 100644
--- a/tmp/aaf3de4b-8de1-4a3a-ab39-3c758c7c6b9d_buggy.java
+++ b/tmp/0d077d29-dc69-4fe5-8f72-bee9f5c73d42_fixed.java
@@ -1,25 +1,33 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long earlier = getPrevious_OFFSET(instant, instantBefore);
+    long later = getNext_OFFSET(instant, instantAfter);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    return earlierOrLater? later : earlier;
 }
+
+// Assuming the existence of the following methods, 
+// as they are not provided in the original code snippet:
+// 
+// private long getPrevious_OFFSET(long instant, long instantBefore) {
+//     // implementation to get the previous offset
+// }
+// 
+// private long getNext_OFFSET(long instant, long instantAfter) {
+//     // implementation to get the next offset
+// }
\ No newline at end of file
