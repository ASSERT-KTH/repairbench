diff --git a/tmp/3fd02b9c-8115-4084-9d9c-4f7ab7aad57d_buggy.java b/tmp/95c1738e-b212-432a-be75-e014ec780eef_fixed.java
index 14b78fb..d0faf80 100644
--- a/tmp/3fd02b9c-8115-4084-9d9c-4f7ab7aad57d_buggy.java
+++ b/tmp/95c1738e-b212-432a-be75-e014ec780eef_fixed.java
@@ -1,56 +1,52 @@
 /**
  * Finds the next text wrap position after <code>startPos</code> for the
  * text in <code>text</code> with the column width <code>width</code>.
  * The wrap point is the last position before startPos+width having a 
  * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
+ * before startPos+width, it will return the position right after the last whole word.
  *
  * @param text The text being searched for the wrap position
  * @param width width of the wrapped text
  * @param startPos position from which to start the lookup whitespace
  * character
  * @return postion on which the text must be wrapped or -1 if the wrap
  * position is at the end of the text
  */
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
     
     // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    if (((pos = text.indexOf('\n', startPos))!= -1 && pos <= startPos + width)
+            || ((pos = text.indexOf('\t', startPos))!= -1 && pos <= startPos + width))
     {
-            return pos + 1;
+        return pos;
     }
     else if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
     char c;
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
+    // Check if we are in the middle of a word at startPos+width
+    if ((c = text.charAt(pos))!= ' ' && c!= '\n' && c!= '\r' && c!= '\t') {
+        // Move backwards to find the last whole word
+        while ((pos > startPos) && ((c = text.charAt(pos - 1))!= ' ' 
+               && c!= '\n' && c!= '\r' && c!= '\t')) {
+            --pos;
+        }
+        // If we found a whitespace, return it, otherwise return the width
+        return (pos > startPos)? pos : startPos + width;
+    } else {
+        // If we are at a whitespace at startPos+width, move backwards to find the last non-whitespace
+        while ((pos > startPos) && ((c = text.charAt(pos - 1)) == ' ' 
+               || c == '\n' || c == '\r' || c == '\t')) {
             --pos;
         }
-
-        // if we found it - just return
-        if (pos > startPos)
-        {
         return pos;
     }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
-        }
-        return pos == text.length() ? -1 : pos;
 }
\ No newline at end of file
