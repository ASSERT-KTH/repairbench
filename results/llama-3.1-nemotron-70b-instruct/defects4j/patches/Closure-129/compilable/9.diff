diff --git a/tmp/e1fc1594-09fe-4cca-9179-ea45ced019bd_buggy.java b/tmp/0e194096-1f72-4300-915c-b06d6016ba9d_fixed.java
index e8705ac..168c6c2 100644
--- a/tmp/e1fc1594-09fe-4cca-9179-ea45ced019bd_buggy.java
+++ b/tmp/0e194096-1f72-4300-915c-b06d6016ba9d_fixed.java
@@ -1,24 +1,23 @@
 /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
+ * There are two types of calls we are interested in: calls without explicit
+ * "this" values (what we call "free" calls) and direct calls to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
+  // Keep track of the "this" context of a call. A call without an explicit
+  // "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // Ignore cast nodes and property access calls (e.g., `(new x())['abc']()`)
+  if (!NodeUtil.isGet(first) &&!first.isGetProp()) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
   if (first.isName() &&
       "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
