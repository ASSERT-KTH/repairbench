diff --git a/tmp/04ea04d6-6c81-4687-9090-6d6a1ae9a43d_buggy.java b/tmp/a008d040-6954-4447-bd7a-c4065abbf25a_fixed.java
index e8705ac..6e0b80a 100644
--- a/tmp/04ea04d6-6c81-4687-9090-6d6a1ae9a43d_buggy.java
+++ b/tmp/a008d040-6954-4447-bd7a-c4065abbf25a_fixed.java
@@ -1,24 +1,24 @@
 /**
  * There are two types of calls we are interested in calls without explicit
  * "this" values (what we are call "free" calls) and direct call to eval.
  */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
   // Keep track of of the "this" context of a call.  A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
+  Node grandFirstChild = first.getFirstChild(); // Added to check grandchild node
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+  // ignore cast nodes and member access nodes (e.g., (new x())['abc'])
+  if (!NodeUtil.isGet(first) &&!(first.isMemberFunctionDef() || (grandFirstChild!= null && grandFirstChild.isNew()))) {
     n.putBooleanProp(Node.FREE_CALL, true);
   }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
   if (first.isName() &&
       "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
