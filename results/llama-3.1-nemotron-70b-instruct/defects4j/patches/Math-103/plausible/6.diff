diff --git a/tmp/5a7dea87-ce72-4cf9-8382-5087f4e93e01_buggy.java b/tmp/24340b0a-fb97-4367-b318-61d0eef458ca_fixed.java
index 6cfa79b..9b27d74 100644
--- a/tmp/5a7dea87-ce72-4cf9-8382-5087f4e93e01_buggy.java
+++ b/tmp/24340b0a-fb97-4367-b318-61d0eef458ca_fixed.java
@@ -1,12 +1,21 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = (x - mean) / standardDeviation;
+    if (Math.abs(dev) > 20) { // top-coding for extreme values
+        return dev < 0? 0.0 : 1.0;
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev / Math.sqrt(2.0)));
+        } catch (MaxIterationsExceededException e) {
+            // if convergence exception occurs within 20 std devs, rethrow
+            throw new MathException(e);
+        }
+    }
 }
\ No newline at end of file
