diff --git a/tmp/3874e013-05b7-42c2-bdde-621a21edc58c_buggy.java b/tmp/df341ad6-458f-4fc5-8102-0101639a6ffd_fixed.java
index 6cfa79b..474651a 100644
--- a/tmp/3874e013-05b7-42c2-bdde-621a21edc58c_buggy.java
+++ b/tmp/df341ad6-458f-4fc5-8102-0101639a6ffd_fixed.java
@@ -1,12 +1,21 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double deviations = Math.abs((x - mean) / standardDeviation);
+    if (deviations > 20) { // top-coding for extreme values
+        return x < mean? 0.0 : 1.0;
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));
+        } catch (MaxIterationsExceededException e) {
+            // if convergence fails for non-extreme values, rethrow
+            throw new MathException(e);
+        }
+    }
 }
\ No newline at end of file
