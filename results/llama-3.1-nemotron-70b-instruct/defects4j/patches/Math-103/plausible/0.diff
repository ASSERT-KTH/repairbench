diff --git a/tmp/cb9cb5e8-c499-477e-b4f2-35cd0b454b12_buggy.java b/tmp/9f1afffa-94ef-48b9-8e26-016b8f4785ca_fixed.java
index 6cfa79b..ce61456 100644
--- a/tmp/cb9cb5e8-c499-477e-b4f2-35cd0b454b12_buggy.java
+++ b/tmp/9f1afffa-94ef-48b9-8e26-016b8f4785ca_fixed.java
@@ -1,12 +1,24 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    // Check for extreme values to prevent convergence exceptions
+    double standardizedX = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    if (Math.abs(standardizedX) > 20) {
+        // Return 0 or 1 for extreme values (more than 20 standard deviations away)
+        return standardizedX < 0? 0 : 1;
+    } else {
+        try {
+            // Attempt to calculate CDF using Erf.erf for non-extreme values
+            return 0.5 * (1.0 + Erf.erf(standardizedX));
+        } catch (MaxIterationsExceededException e) {
+            // Fallback for unexpected convergence issues (should not occur for non-extreme values)
+            throw new MathException("Convergence failed for non-extreme value", e);
+        }
+    }
 }
\ No newline at end of file
