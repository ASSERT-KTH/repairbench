diff --git a/tmp/356c23a6-824f-4efb-a852-29d7adb80909_buggy.java b/tmp/330671fa-3129-4545-8e10-92781419971e_fixed.java
index 6cfa79b..1c96930 100644
--- a/tmp/356c23a6-824f-4efb-a852-29d7adb80909_buggy.java
+++ b/tmp/330671fa-3129-4545-8e10-92781419971e_fixed.java
@@ -1,12 +1,21 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double standardizedX = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    if (Math.abs(standardizedX) > 20) { // top-coding for extreme values
+        return (standardizedX < 0)? 0.0 : 1.0;
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf(standardizedX));
+        } catch (MaxIterationsExceededException e) {
+            // if convergence fails for non-extreme values, rethrow with more context
+            throw new MathException("Convergence failed for x=" + x + ", mean=" + mean + ", stdDev=" + standardDeviation, e);
+        }
+    }
 }
\ No newline at end of file
