diff --git a/tmp/f759e42b-e305-4510-8b66-22ea75d2036e_buggy.java b/tmp/3a30c767-85da-4014-98ca-71d6bccb3d17_fixed.java
index 6cfa79b..43b91c5 100644
--- a/tmp/f759e42b-e305-4510-8b66-22ea75d2036e_buggy.java
+++ b/tmp/3a30c767-85da-4014-98ca-71d6bccb3d17_fixed.java
@@ -1,12 +1,21 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
  * @return CDF evaluted at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double standardizedX = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    try {
+        return 0.5 * (1.0 + Erf.erf(standardizedX));
+    } catch (MaxIterationsExceededException e) {
+        // top-code extreme values (more than 20 standard deviations from mean)
+        if (Math.abs(standardizedX) > 20) {
+            return (standardizedX < 0)? 0.0 : 1.0;
+        } else {
+            throw e; // re-throw if not an extreme value
+        }
+    }
 }
\ No newline at end of file
