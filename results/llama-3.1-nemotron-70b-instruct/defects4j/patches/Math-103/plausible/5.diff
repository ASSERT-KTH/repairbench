diff --git a/tmp/544345a0-0615-4b89-9020-6f9f92a87e97_buggy.java b/tmp/be5c434e-14f8-4588-88c4-5ce6de9fcd3a_fixed.java
index 6cfa79b..f48b30c 100644
--- a/tmp/544345a0-0615-4b89-9020-6f9f92a87e97_buggy.java
+++ b/tmp/be5c434e-14f8-4588-88c4-5ce6de9fcd3a_fixed.java
@@ -1,12 +1,21 @@
 /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+ * For this distribution, X, this method returns P(X &lt; <code>x</code>).
  * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+ * @return CDF evaluated at <code>x</code>. 
  * @throws MathException if the algorithm fails to converge; unless
  * x is more than 20 standard deviations from the mean, in which case the
  * convergence exception is caught and 0 or 1 is returned.
  */
 public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+    double dev = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+    if (Math.abs(dev) > 20) { // more than 20 standard deviations away
+        return (dev < 0)? 0.0 : 1.0; // top-code extreme values
+    } else {
+        try {
+            return 0.5 * (1.0 + Erf.erf(dev));
+        } catch (MaxIterationsExceededException e) {
+            // convergence exception for non-extreme value; rethrow with more context
+            throw new MathException("Convergence failed for cumulativeProbability at x=" + x, e);
+        }
+    }
 }
\ No newline at end of file
