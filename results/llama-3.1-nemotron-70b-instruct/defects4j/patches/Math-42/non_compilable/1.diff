diff --git a/tmp/bce7a0a3-ba96-4bd2-8e91-51c77a5ab751_buggy.java b/tmp/4ab46282-c959-4da6-a4a7-a8bf9527472b_fixed.java
index efa499e..b1543d6 100644
--- a/tmp/bce7a0a3-ba96-4bd2-8e91-51c77a5ab751_buggy.java
+++ b/tmp/4ab46282-c959-4da6-a4a7-a8bf9527472b_fixed.java
@@ -1,35 +1,36 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+      // Fix: Correctly handle constrained variables and non-negative restriction
+      if (basicRow!= null && (basicRows.contains(basicRow) || basicRow == getObjectiveFunctionRow())) {
+          coefficients[i] = 0;
       } else {
+          if (basicRow!= null) {
               basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+          }
+          coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) -
                              (restrictToNonNegative? 0 : mostNegative);
+          // Ensure non-negativity when restricted
+          if (restrictToNonNegative && coefficients[i] < 0) {
+              coefficients[i] = 0;
+          }
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
