diff --git a/tmp/d0621b73-58fd-4ba1-8eb5-3c59f6010546_buggy.java b/tmp/db619b82-d2b1-4516-9a4c-de02563010d1_fixed.java
index efa499e..9d06387 100644
--- a/tmp/d0621b73-58fd-4ba1-8eb5-3c59f6010546_buggy.java
+++ b/tmp/db619b82-d2b1-4516-9a4c-de02563010d1_fixed.java
@@ -1,35 +1,44 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+      // Fix: Check for null before calling contains() to avoid NPE
+      boolean isBasicRowAlreadyUsed = basicRow!= null && basicRows.contains(basicRow);
+      // Fix: Handle the case where the basic row is the objective function row
+      if (isBasicRowAlreadyUsed || (basicRow!= null && isObjectiveFunctionRow(basicRow))) {
           // if multiple variables can take a given value
           // then we choose the first and set the rest equal to 0
           coefficients[i] = 0 - (restrictToNonNegative? 0 : mostNegative);
       } else {
+          if (basicRow!= null) {
               basicRows.add(basicRow);
+          }
           coefficients[i] =
               (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) -
               (restrictToNonNegative? 0 : mostNegative);
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
+
+// Assume the existence of the following method to check if a row is the objective function row
+private boolean isObjectiveFunctionRow(Integer basicRow) {
+    // Implementation may vary based on the actual logic to identify the objective function row
+    // For demonstration purposes, assuming the last row is the objective function row
+    return basicRow.equals(getNumRows() - 1);
+}
\ No newline at end of file
