diff --git a/tmp/6460657a-6919-4d6e-b642-b9ca309172c3_buggy.java b/tmp/52797e63-f1b7-40ed-b55f-ebbf7e88aeff_fixed.java
index efa499e..039cf35 100644
--- a/tmp/6460657a-6919-4d6e-b642-b9ca309172c3_buggy.java
+++ b/tmp/52797e63-f1b7-40ed-b55f-ebbf7e88aeff_fixed.java
@@ -1,35 +1,34 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+      if (basicRow == null) { // Handle null basicRow before adding to set
+        coefficients[i] = restrictToNonNegative? 0 : mostNegative;
+      } else if (basicRows.contains(basicRow)) {
         // if multiple variables can take a given value
         // then we choose the first and set the rest equal to 0
         coefficients[i] = 0 - (restrictToNonNegative? 0 : mostNegative);
       } else {
         basicRows.add(basicRow);
         coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+            getEntry(basicRow, getRhsOffset()) -
             (restrictToNonNegative? 0 : mostNegative);
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
