diff --git a/tmp/d7ac3e8c-55c4-444a-8060-296e4f6ac85d_buggy.java b/tmp/0b4e48a8-6c78-4b5f-b1d3-6af108c0088d_fixed.java
index efa499e..0ada52b 100644
--- a/tmp/d7ac3e8c-55c4-444a-8060-296e4f6ac85d_buggy.java
+++ b/tmp/0b4e48a8-6c78-4b5f-b1d3-6af108c0088d_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
   int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
   Integer negativeVarBasicRow = negativeVarColumn > 0? getBasicRow(negativeVarColumn) : null;
   double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
   Set<Integer> basicRows = new HashSet<Integer>();
   double[] coefficients = new double[getOriginalNumDecisionVariables()];
   for (int i = 0; i < coefficients.length; i++) {
       int colIndex = columnLabels.indexOf("x" + i);
       if (colIndex < 0) {
         coefficients[i] = 0;
         continue;
       }
       Integer basicRow = getBasicRow(colIndex);
       // if the basic row is found to be the objective function row
       // set the coefficient to 0 -> this case handles unconstrained 
       // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
+      if (basicRow!= null && basicRows.contains(basicRow)) {
           // if multiple variables can take a given value
           // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+          coefficients[i] = 0;
       } else {
+          if (basicRow!= null) {
               basicRows.add(basicRow);
+          }
           coefficients[i] = 
               (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - 
-                  (restrictToNonNegative ? 0 : mostNegative);
+              (restrictToNonNegative? 0 : (i == 0? mostNegative : 0)); // only apply mostNegative to first variable
       }
   }
   return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
