diff --git a/tmp/c6d51f88-9246-454a-89b4-bc272d8bd9d0_buggy.java b/tmp/d051f3a5-2cb4-4367-bffb-0158eb673b81_fixed.java
index f9fd9ef..2bdf6c2 100644
--- a/tmp/c6d51f88-9246-454a-89b4-bc272d8bd9d0_buggy.java
+++ b/tmp/d051f3a5-2cb4-4367-bffb-0158eb673b81_fixed.java
@@ -1,108 +1,136 @@
 /**
  * Method called to find out possible type refinements to use
  * for deserialization.
  *
  * @since 2.7
  */
 public JavaType refineSerializationType(final MapperConfig<?> config,
         final Annotated a, final JavaType baseType) throws JsonMappingException
 {
     JavaType type = baseType;
     final TypeFactory tf = config.getTypeFactory();
     
     // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
     //    now-deprecated secondary methods; this because while
     //    direct sub-class not yet retrofitted may only override
     //    those methods. With 2.8 or later we may consider removal
     //    of these methods
 
-        
     // Ok: start by refining the main type itself; common to all types
     Class<?> serClass = findSerializationType(a);
     if (serClass!= null) {
         if (type.hasRawClass(serClass)) {
             // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
             //    static typing this way
             type = type.withStaticTyping();
         } else {
+            Class<?> currRaw = type.getRawClass();
             try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
+                if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
+                    type = tf.constructSpecializedType(type, serClass);
+                } else if (serClass.isAssignableFrom(currRaw)) { // common case
                     type = tf.constructGeneralizedType(type, serClass);
+                } else {
+                    // Added handling for when neither class is assignable from the other
+                    // Try to find a common superclass that can be used for widening
+                    Class<?> commonSuperclass = findCommonSuperclass(currRaw, serClass);
+                    if (commonSuperclass!= null) {
+                        type = tf.constructGeneralizedType(type, commonSuperclass);
+                    } else {
+                        throw new JsonMappingException(null,
+                                String.format("Can not refine serialization type %s into %s; types not related",
+                                        type, serClass.getName()));
+                    }
+                }
             } catch (IllegalArgumentException iae) {
                 throw new JsonMappingException(null,
                         String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
                                 type, serClass.getName(), a.getName(), iae.getMessage()),
                                 iae);
             }
         }
     }
     // Then further processing for container types
 
     // First, key type (for Maps, Map-like types):
     if (type.isMapLikeType()) {
         JavaType keyType = type.getKeyType();
         Class<?> keyClass = findSerializationKeyType(a, keyType);
         if (keyClass!= null) {
             if (keyType.hasRawClass(keyClass)) {
                 keyType = keyType.withStaticTyping();
             } else {
                 Class<?> currRaw = keyType.getRawClass();
                 try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
                     if (keyClass.isAssignableFrom(currRaw)) { // common case
                         keyType = tf.constructGeneralizedType(keyType, keyClass);
                     } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                         keyType = tf.constructSpecializedType(keyType, keyClass);
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization key type %s into %s; types not related",
                                         keyType, keyClass.getName()));
                     }
                 } catch (IllegalArgumentException iae) {
                     throw new JsonMappingException(null,
                             String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
                                     type, keyClass.getName(), a.getName(), iae.getMessage()),
                                     iae);
                 }
             }
             type = ((MapLikeType) type).withKeyType(keyType);
         }
     }
 
     JavaType contentType = type.getContentType();
     if (contentType!= null) { // collection[like], map[like], array, reference
         // And then value types for all containers:
        Class<?> contentClass = findSerializationContentType(a, contentType);
        if (contentClass!= null) {
            if (contentType.hasRawClass(contentClass)) {
                contentType = contentType.withStaticTyping();
            } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
                Class<?> currRaw = contentType.getRawClass();
                try {
                    if (contentClass.isAssignableFrom(currRaw)) { // common case
                        contentType = tf.constructGeneralizedType(contentType, contentClass);
                    } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                        contentType = tf.constructSpecializedType(contentType, contentClass);
                    } else {
                        throw new JsonMappingException(null,
                                String.format("Can not refine serialization content type %s into %s; types not related",
                                        contentType, contentClass.getName()));
                    }
                } catch (IllegalArgumentException iae) { // shouldn't really happen
                    throw new JsonMappingException(null,
                            String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                    type, contentClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
            type = type.withContentType(contentType);
        }
     }
     return type;
 }
+
+// Added method to find the common superclass for two classes
+private Class<?> findCommonSuperclass(Class<?> clazz1, Class<?> clazz2) {
+    Set<Class<?>> superclasses1 = getSuperclasses(clazz1);
+    Set<Class<?>> superclasses2 = getSuperclasses(clazz2);
+    superclasses1.retainAll(superclasses2); // intersection
+    return superclasses1.stream()
+           .filter(c ->!c.equals(Object.class)) // exclude Object
+           .findFirst()
+           .orElse(null);
+}
+
+// Helper method to get all superclasses of a class
+private Set<Class<?>> getSuperclasses(Class<?> clazz) {
+    Set<Class<?>> superclasses = new LinkedHashSet<>();
+    while (clazz!= null &&!clazz.equals(Object.class)) {
+        superclasses.add(clazz);
+        clazz = clazz.getSuperclass();
+    }
+    return superclasses;
+}
\ No newline at end of file
