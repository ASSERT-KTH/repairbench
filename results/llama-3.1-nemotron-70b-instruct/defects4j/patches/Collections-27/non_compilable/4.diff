diff --git a/tmp/8cbe92b5-cfe1-4abb-8fde-93f6b1358c31_buggy.java b/tmp/c0ad2263-156e-4e1e-bdad-976b591f78f6_fixed.java
index e69de29..2525156 100644
--- a/tmp/8cbe92b5-cfe1-4abb-8fde-93f6b1358c31_buggy.java
+++ b/tmp/c0ad2263-156e-4e1e-bdad-976b591f78f6_fixed.java
@@ -0,0 +1,21 @@
+/**
+ * Fixed deserialization method to enforce safety checks on value classes.
+ *
+ * @param bytes the serialized MultiValueMap bytes
+ * @return the deserialized MultiValueMap
+ * @throws java.io.IOException                on IO errors
+ * @throws ClassNotFoundException            on class not found errors
+ * @throws UnsupportedOperationException    if the deserialized value class is not a Collection
+ */
+private Object deserialize(byte[] bytes) throws java.io.IOException, ClassNotFoundException {
+    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
+    MultiValueMap<?,?> map = (MultiValueMap<?,?>) ois.readObject();
+    ois.close();
+
+    // Safety check: Ensure the value class is a Collection (considered "safe" here)
+    if (!(map.getValueClass().isAssignableFrom(Collection.class))) {
+        throw new UnsupportedOperationException("unsafe clazz accepted when de-serializing MultiValueMap");
+    }
+
+    return map;
+}
\ No newline at end of file
