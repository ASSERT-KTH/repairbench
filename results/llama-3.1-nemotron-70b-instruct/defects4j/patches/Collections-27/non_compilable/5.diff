diff --git a/tmp/a98208f2-e1aa-427f-a88f-903c7f39baf1_buggy.java b/tmp/b8f9ddb2-fa67-4412-aaea-2557eea36883_fixed.java
index e69de29..3a442f1 100644
--- a/tmp/a98208f2-e1aa-427f-a88f-903c7f39baf1_buggy.java
+++ b/tmp/b8f9ddb2-fa67-4412-aaea-2557eea36883_fixed.java
@@ -0,0 +1,33 @@
+/**
+ * Deserialize the given byte array into a MultiValueMap instance, 
+ * ensuring the value type is safe (i.e., not a primitive wrapper or String).
+ * 
+ * @param bytes the byte array to deserialize
+ * @return the deserialized MultiValueMap
+ * @throws UnsupportedOperationException if the deserialized map's value type is unsafe
+ * @throws IOException 
+ * @throws ClassNotFoundException 
+ */
+public static MultiValueMap deserialize(byte[] bytes) throws IOException, ClassNotFoundException {
+    ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
+    MultiValueMap deserializedMap = (MultiValueMap) ois.readObject();
+    ois.close();
+    
+    // Check if the deserialized map's value type is safe
+    Class<?> valueType = deserializedMap.getValueType();
+    if (valueType.isPrimitive() || 
+        (valueType!= null && 
+         (valueType.equals(Boolean.class)   || 
+          valueType.equals(Character.class) || 
+          valueType.equals(Byte.class)      || 
+          valueType.equals(Short.class)     || 
+          valueType.equals(Integer.class)   || 
+          valueType.equals(Long.class)      || 
+          valueType.equals(Float.class)     || 
+          valueType.equals(Double.class)    || 
+          valueType.equals(String.class)))) {
+        throw new UnsupportedOperationException("unsafe clazz (" + valueType.getName() + ") accepted when de-serializing MultiValueMap");
+    }
+    
+    return deserializedMap;
+}
\ No newline at end of file
