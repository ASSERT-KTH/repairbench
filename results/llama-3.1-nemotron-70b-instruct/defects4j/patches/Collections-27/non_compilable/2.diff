diff --git a/tmp/d456d028-da4d-42e0-aa28-3be391e6e632_buggy.java b/tmp/e9d0ace4-722b-43ad-a2f0-e97350d17cb2_fixed.java
index e69de29..5638748 100644
--- a/tmp/d456d028-da4d-42e0-aa28-3be391e6e632_buggy.java
+++ b/tmp/e9d0ace4-722b-43ad-a2f0-e97350d17cb2_fixed.java
@@ -0,0 +1,23 @@
+/**
+ * Reconstructs the MultiValueMap from a serialized form, ensuring type safety for the value class.
+ * 
+ * @param in the object input stream
+ * @throws IOException            if an I/O error occurs
+ * @throws ClassNotFoundException if the class of a serialized object cannot be found
+ * @throws UnsupportedOperationException if the deserialized value class is not a Collection type
+ */
+private MultiValueMap(ObjectInputStream in) throws IOException, ClassNotFoundException {
+    in.defaultReadObject(); // Reads the underlying map
+    
+    // Read the value class (which was previously not checked)
+    Class<?> valueClass = (Class<?>) in.readObject();
+    
+    // ** Introduced Fix: Ensure the value class is a Collection type **
+    if (!Collection.class.isAssignableFrom(valueClass)) {
+        throw new UnsupportedOperationException("Only Collection types are supported for deserialization: " + valueClass.getName());
+    }
+    
+    // Proceed with reconstruction if the value class is safe (a Collection type)
+    this.valueClass = valueClass;
+    //... (Rest of the reconstruction code remains the same)
+}
\ No newline at end of file
