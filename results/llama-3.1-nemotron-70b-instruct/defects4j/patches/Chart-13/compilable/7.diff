diff --git a/tmp/57ccacb2-5491-4e95-a59c-a988c342822d_buggy.java b/tmp/4447e882-2dba-45a6-9364-878e75462b75_fixed.java
index 63a7c80..7338e79 100644
--- a/tmp/57ccacb2-5491-4e95-a59c-a988c342822d_buggy.java
+++ b/tmp/4447e882-2dba-45a6-9364-878e75462b75_fixed.java
@@ -1,77 +1,83 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    double maxHeight = constraint.getHeight(); // Keep track of max height
+
     if (this.topBlock!= null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, maxHeight), // Use maxHeight instead of constraint.getHeight()
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
+        maxHeight -= h[0]; // Update maxHeight
     }
     w[1] = w[0];
     if (this.bottomBlock!= null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, 
+                new Range(0.0, Math.max(0, maxHeight)), // Ensure range is valid
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
+        maxHeight -= h[1]; // Update maxHeight
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    h[2] = Math.max(0, maxHeight); // Ensure height is non-negative
     if (this.leftBlock!= null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock!= null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth() - w[2]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
     w[4] = constraint.getWidth() - w[3] - w[2];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock!= null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock!= null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock!= null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock!= null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock!= null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock!= null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    return new Size2D(constraint.getWidth(), 
+                      h[0] + h[1] + h[2]); // Calculate total height correctly
 }
\ No newline at end of file
