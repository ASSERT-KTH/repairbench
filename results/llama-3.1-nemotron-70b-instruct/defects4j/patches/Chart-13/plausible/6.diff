diff --git a/tmp/922f841e-3f07-4472-a573-b87f1032ee95_buggy.java b/tmp/e3e38cec-f0d5-409a-9dfe-386bff04ae26_fixed.java
index 63a7c80..d7e4774 100644
--- a/tmp/922f841e-3f07-4472-a573-b87f1032ee95_buggy.java
+++ b/tmp/e3e38cec-f0d5-409a-9dfe-386bff04ae26_fixed.java
@@ -1,77 +1,84 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    double minHeight = 0.0; // Initialize minHeight to track the minimum height
+
     if (this.topBlock!= null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
                 new Range(0.0, constraint.getHeight()),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
+        minHeight = Math.max(minHeight, h[0]); // Update minHeight
     }
     w[1] = w[0];
     if (this.bottomBlock!= null) {
+        double remainingHeight = constraint.getHeight() - minHeight; // Calculate remaining height
+        if (remainingHeight < 0) {
+            remainingHeight = 0; // Ensure non-negative range
+        }
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                LengthConstraintType.FIXED, 0.0, new Range(0.0, remainingHeight), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
+        minHeight += h[1]; // Update minHeight with bottom block's height
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    h[2] = Math.max(0.0, constraint.getHeight() - minHeight); // Ensure non-negative height
     if (this.leftBlock!= null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock!= null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, Math.max(0.0, constraint.getWidth() - w[2])), // Ensure non-negative range
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]); // Ensure non-negative width
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock!= null) {
         this.centerBlock.arrange(g2, c5);
     }
 
     if (this.topBlock!= null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock!= null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, Math.max(0.0, h[0] + h[2] - h[1]), // Adjust y-coordinate
                 w[1], h[1]));
     }
     if (this.leftBlock!= null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock!= null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock!= null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+    return new Size2D(constraint.getWidth(), Math.max(minHeight, constraint.getHeight())); // Return the maximum height
 }
\ No newline at end of file
