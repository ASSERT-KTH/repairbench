diff --git a/tmp/51693f0b-8e14-4652-9a20-04cad9a365aa_buggy.java b/tmp/1abd58ab-d9b9-44ce-92d2-67b1b5bbc606_fixed.java
index aea175a..a027abc 100644
--- a/tmp/51693f0b-8e14-4652-9a20-04cad9a365aa_buggy.java
+++ b/tmp/1abd58ab-d9b9-44ce-92d2-67b1b5bbc606_fixed.java
@@ -1,76 +1,84 @@
 /**
  * <p>
  * Encodes all of the provided data, starting at inPos, for inAvail bytes.
  * Must be called at least twice:  once with the data to encode, and once
  * with inAvail set to "-1" to alert encoder that EOF has been reached,
  * so flush last remaining bytes (if not multiple of 3).
  * </p><p>
  * Thanks to "commons" project in ws.apache.org for the bitwise operations,
  * and general approach.
  * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
  * </p>
  *
  * @param in byte[] array of binary data to base64 encode.
  * @param inPos Position to start reading data from.
  * @param inAvail Amount of bytes available from input for encoding.
  */
 void encode(byte[] in, int inPos, int inAvail) {
     if (eof) {
         return;
     }
     // inAvail < 0 is how we're informed of EOF in the underlying data we're
     // encoding.
     if (inAvail < 0) {
         eof = true;
+        if (modulus!= 0 || (buf == null || buf.length - pos < encodeSize)) {
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             switch (modulus) {
                 case 1:
                     buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                         buf[pos++] = PAD;
                     }
                     break;
 
                 case 2:
                     buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buf[pos++] = PAD;
                     }
                     break;
+                case 0: // Add this case to handle empty input
+                    if (lineLength > 0) {
+                        System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                    }
+                    return; // Exit early for empty input
+            }
         }
         if (lineLength > 0) {
             System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
             pos += lineSeparator.length;
         }
     } else {
         for (int i = 0; i < inAvail; i++) {
             if (buf == null || buf.length - pos < encodeSize) {
                 resizeBuf();
             }
             modulus = (++modulus) % 3;
             int b = in[inPos++];
             if (b < 0) { b += 256; }
             x = (x << 8) + b;
             if (0 == modulus) {
                 buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
                 buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                 buf[pos++] = encodeTable[x & MASK_6BITS];
                 currentLinePos += 4;
                 if (lineLength > 0 && lineLength <= currentLinePos) {
                     System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
                     pos += lineSeparator.length;
                     currentLinePos = 0;
                 }
             }
         }
     }
 }
\ No newline at end of file
