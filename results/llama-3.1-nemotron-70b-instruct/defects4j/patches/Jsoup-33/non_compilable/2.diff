diff --git a/tmp/6b8c7ce5-c7aa-496b-aaa3-4bb628e23d93_buggy.java b/tmp/ffe97eb3-7c6d-42e9-8a57-75a81095f8fd_fixed.java
index dc93be3..3d3a28c 100644
--- a/tmp/6b8c7ce5-c7aa-496b-aaa3-4bb628e23d93_buggy.java
+++ b/tmp/ffe97eb3-7c6d-42e9-8a57-75a81095f8fd_fixed.java
@@ -1,14 +1,23 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        if (Tag.isKnownEmptyBlock(startTag.name())) { // Check if tag is a known empty block
+            Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+            insert(el);
+            el.appendChild(new Comment("Self-closing tag with content: " + startTag.name())); // Add comment to preserve content
+            el.prependChild(new TextNode("")); // Ensure tag is not empty
+            tokeniser.emit(new Token.EndTag(startTag.name()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            return el;
+        } else {
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
