diff --git a/tmp/6ef6f67e-f59e-40bd-a2a9-a55daec21303_buggy.java b/tmp/82f6e7f4-de52-47a1-b8eb-2f74fa946de4_fixed.java
index dc93be3..87c3c1d 100644
--- a/tmp/6ef6f67e-f59e-40bd-a2a9-a55daec21303_buggy.java
+++ b/tmp/82f6e7f4-de52-47a1-b8eb-2f74fa946de4_fixed.java
@@ -1,14 +1,22 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isKnownTag() &&!tag.isEmpty()) { // Check if tag is known and not inherently empty
+            Element el = new Element(tag, baseUri, startTag.attributes);
+            insert(el);
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            return el;
+        } else {
             Element el = insertEmpty(startTag);
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
             return el;
         }
+    }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
