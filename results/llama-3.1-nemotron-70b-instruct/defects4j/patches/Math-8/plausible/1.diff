diff --git a/tmp/a0defcc7-e622-4f9a-8078-420789848ff0_buggy.java b/tmp/d962ec67-624c-4a70-8402-4116a2f2bfa9_fixed.java
index bfa2423..9dd18ba 100644
--- a/tmp/a0defcc7-e622-4f9a-8078-420789848ff0_buggy.java
+++ b/tmp/d962ec67-624c-4a70-8402-4116a2f2bfa9_fixed.java
@@ -1,23 +1,28 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Create an array of type Object[] instead of trying to instantiate an array of type T
+    final Object[] out = new Object[sampleSize];
 
     for (int i = 0; i < sampleSize; i++) {
+        // Since the array is of type Object[], the assignment will work
         out[i] = sample();
     }
 
-        return out;
+    // Use Arrays.copyOf to create a typed array, handling theunchecked cast
+    @SuppressWarnings("unchecked")
+    final T[] typedOut = (T[]) java.util.Arrays.copyOf(out, sampleSize, (Class<? extends T[]>) out.getClass());
     
+    return typedOut;
 }
\ No newline at end of file
