diff --git a/tmp/9f69e8a0-e3e9-4513-81be-4901236178d6_buggy.java b/tmp/43229e7c-5b6c-43e0-acf2-1bb9e9b4191d_fixed.java
index bfa2423..43afe8d 100644
--- a/tmp/9f69e8a0-e3e9-4513-81be-4901236178d6_buggy.java
+++ b/tmp/43229e7c-5b6c-43e0-acf2-1bb9e9b4191d_fixed.java
@@ -1,23 +1,26 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Fix: Create an array of type Object[] instead of using reflection with singletons.get(0).getClass()
+    // This allows storing objects of different classes in the array
+    final Object[] out = new Object[sampleSize];
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
-        return out;
-
+    // Fix: If T is not Object, return an array of type T[], otherwise return the Object[] array
+    return (T[]) (singletons.get(0) instanceof Object? out : 
+                   java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize, out));
 }
\ No newline at end of file
