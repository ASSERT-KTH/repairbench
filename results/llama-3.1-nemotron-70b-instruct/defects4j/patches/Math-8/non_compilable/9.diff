diff --git a/tmp/8c4d20e0-5939-4a53-a32b-86740a05fbe6_buggy.java b/tmp/163c370c-8b71-40b7-9e36-0e878d45402d_fixed.java
index bfa2423..87cd322 100644
--- a/tmp/8c4d20e0-5939-4a53-a32b-86740a05fbe6_buggy.java
+++ b/tmp/163c370c-8b71-40b7-9e36-0e878d45402d_fixed.java
@@ -1,23 +1,24 @@
 /**
  * Generate a random sample from the distribution.
  *
  * @param sampleSize the number of random values to generate.
  * @return an array representing the random sample.
  * @throws NotStrictlyPositiveException if {@code sampleSize} is not
  * positive.
  */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
         throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                 sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Create an array of type Object[] to accommodate diverse object types
+    final Object[] out = new Object[sampleSize];
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
-        return out;
-
+    // Use Arrays.copyOf to ensure the return type is T[]
+    return Arrays.copyOf(out, sampleSize, (Class<T[]>) out.getClass());
 }
\ No newline at end of file
