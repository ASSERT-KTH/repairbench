diff --git a/tmp/1d386f58-eaa9-4a69-bea5-55d6bbd38a79_buggy.java b/tmp/f0c11b66-ccd6-4336-b9b9-6a55cee73c9c_fixed.java
index 72a422c..464d8fb 100644
--- a/tmp/1d386f58-eaa9-4a69-bea5-55d6bbd38a79_buggy.java
+++ b/tmp/f0c11b66-ccd6-4336-b9b9-6a55cee73c9c_fixed.java
@@ -1,51 +1,60 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start < seqEnd) { // Check for index out of bounds
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
 
                 // Check there's more than just an x after the &#
+                if(start >= seqEnd) { // If 'x' or 'X' is the last character, ignore
+                    return 0;
+                }
+            }
+        } else { // If '&#' is at the end of the string, ignore
+            return 0;
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        while(end < seqEnd && input.charAt(end)!= ';') {
             end++;
         }
 
+        if(end == seqEnd) { // If no ';' is found, ignore (unfinished entity)
+            return 0;
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
         return 2 + (end - start) + (isHex? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
