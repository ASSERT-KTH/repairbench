diff --git a/tmp/84d8b362-7712-443e-9194-16856689a7fa_buggy.java b/tmp/c6c44db9-ff93-49b0-9c68-8fb2717eb32a_fixed.java
index b529d33..b7ad873 100644
--- a/tmp/84d8b362-7712-443e-9194-16856689a7fa_buggy.java
+++ b/tmp/c6c44db9-ff93-49b0-9c68-8fb2717eb32a_fixed.java
@@ -1,29 +1,33 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
  * @return Mapping code for a particular character
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
     if (index > 1 && mappedChar!= '0') {
         final char hwChar = str.charAt(index - 1);
         if ('H' == hwChar || 'W' == hwChar) {
             final char preHWChar = str.charAt(index - 2);
             final char firstCode = this.map(preHWChar);
             if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                // Fix: only return '0' if the previous character is not at the start
+                // and the characters before 'H' or 'W' have the same mapping code
+                if (index > 2 && firstCode == mappedChar) {
+                    return '0';
+                }
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
