diff --git a/tmp/7dad9335-2780-48ce-9d3d-d1b43a328d36_buggy.java b/tmp/8a56991b-a60e-4e45-9603-5be08ad79cbc_fixed.java
index b529d33..eefc129 100644
--- a/tmp/7dad9335-2780-48ce-9d3d-d1b43a328d36_buggy.java
+++ b/tmp/8a56991b-a60e-4e45-9603-5be08ad79cbc_fixed.java
@@ -1,29 +1,29 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
  * @return Mapping code for a particular character
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
-        if (index > 1 && mappedChar != '0') {
+    if (index > 0 && mappedChar!= '0') { // Changed from index > 1 to index > 0
         final char hwChar = str.charAt(index - 1);
         if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
+            final char preHWChar = index > 1? str.charAt(index - 2) : str.charAt(0); // Added boundary check
             final char firstCode = this.map(preHWChar);
             if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                return '0'; // Changed from return 0 to return '0' for consistency
             }
         }
     }
     return mappedChar;
 }
\ No newline at end of file
