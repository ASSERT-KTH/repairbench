diff --git a/tmp/a70a0f75-fc7f-4265-8c5d-849eb5c1eae3_buggy.java b/tmp/cd904938-b355-4a67-a832-90f8fabf80e1_fixed.java
index b529d33..ca524da 100644
--- a/tmp/a70a0f75-fc7f-4265-8c5d-849eb5c1eae3_buggy.java
+++ b/tmp/cd904938-b355-4a67-a832-90f8fabf80e1_fixed.java
@@ -1,29 +1,30 @@
 /**
  * Used internally by the Soundex algorithm.
  *
  * Consonants from the same code group separated by W or H are treated as one.
  *
  * @param str
  *                  the cleaned working string to encode (in upper case).
  * @param index
  *                  the character position to encode
  * @return Mapping code for a particular character
  * @throws IllegalArgumentException
  *                  if the character is not mapped
  */
 private char getMappingCode(final String str, final int index) {
     // map() throws IllegalArgumentException
     final char mappedChar = this.map(str.charAt(index));
     // HW rule check
-        if (index > 1 && mappedChar != '0') {
+    if (index > 0 && mappedChar!= '0') { // Fix: changed from index > 1 to index > 0
         final char hwChar = str.charAt(index - 1);
         if ('H' == hwChar || 'W' == hwChar) {
-                final char preHWChar = str.charAt(index - 2);
+            final char preHWChar = index < 2? str.charAt(0) : str.charAt(index - 2); // Fix: handle edge case for index 1
             final char firstCode = this.map(preHWChar);
             if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
-                    return 0;
+                return '0';
             }
         }
     }
-        return mappedChar;
+    // Fix: return '0' when mappedChar is '0' to maintain consistency
+    return (mappedChar == '0')? '0' : mappedChar;
 }
\ No newline at end of file
