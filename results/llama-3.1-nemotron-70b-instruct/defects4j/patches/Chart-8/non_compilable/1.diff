diff --git a/tmp/dfbe9806-f709-4fd4-a110-0001c8ef238f_buggy.java b/tmp/ed6e47d3-00ef-4c6a-8897-daf6579df6dd_fixed.java
index 99f4092..3412bab 100644
--- a/tmp/dfbe9806-f709-4fd4-a110-0001c8ef238f_buggy.java
+++ b/tmp/ed6e47d3-00ef-4c6a-8897-daf6579df6dd_fixed.java
@@ -1,13 +1,26 @@
 /**
  * Creates a time period for the week in which the specified date/time
  * falls, calculated relative to the specified time zone.
  *
  * @param time  the date/time (<code>null</code> not permitted).
  * @param zone  the time zone (<code>null</code> not permitted).
  *
  * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
  */
 public Week(Date time, TimeZone zone) {
-        // defer argument checking...
-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
+    // Fix: Pass the provided zone to the overloaded constructor instead of defaulting to RegularTimePeriod.DEFAULT_TIME_ZONE
+    // Also, add a check to use the provided zone's locale if possible, falling back to Locale.getDefault()
+    this(time, zone, getLocaleForTimeZone(zone));
+}
+
+// Helper method to get the locale for a given time zone (if available)
+private Locale getLocaleForTimeZone(TimeZone zone) {
+    String[] availableZoneIds = Locale.getAvailableLocales();
+    for (String zoneId : availableZoneIds) {
+        if (zone.getID().equals(zoneId)) {
+            return new Locale(zoneId);
+        }
+    }
+    // Fall back to default locale if no match found
+    return Locale.getDefault();
 }
\ No newline at end of file
