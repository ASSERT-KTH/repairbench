diff --git a/tmp/2554e820-b0fc-43b5-a387-06424817bf0a_buggy.java b/tmp/8da9afea-fa3e-427c-8000-79063bbc8f61_fixed.java
index e1fc51f..efb6e61 100644
--- a/tmp/2554e820-b0fc-43b5-a387-06424817bf0a_buggy.java
+++ b/tmp/8da9afea-fa3e-427c-8000-79063bbc8f61_fixed.java
@@ -1,9 +1,39 @@
+/**
+ * Checks if two invocations have the same method, considering Java's generated 
+ * forwarding methods for generics.
+ * 
+ * @param candidate the invocation to compare with
+ * @return true if methods are the same, false otherwise
+ */
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
-        	/* Avoid unnecessary cloning */
+    // Check if either method is a synthetic forwarding method
+    if (isSyntheticForwardingMethod(m1) || isSyntheticForwardingMethod(m2)) {
+        // If either is a forwarding method, compare the bridged methods
+        return getBridgedMethod(m1).equals(getBridgedMethod(m2));
+    } else {
+        // Otherwise, perform a standard equality check
         return m1.equals(m2);
     }
+}
+
+// Helper methods to support the above logic
+
+private boolean isSyntheticForwardingMethod(Method method) {
+    return method.isSynthetic() && method.getDeclaringClass().isAssignableFrom(method.getParameterTypes()[0].getClass());
+}
+
+private Method getBridgedMethod(Method method) {
+    // This implementation assumes the first non-synthetic method in the superclass chain is the bridged method
+    Class<?> clazz = method.getDeclaringClass().getSuperclass();
+    while (clazz!= null) {
+        try {
+            return clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
+        } catch (NoSuchMethodException e) {
+            clazz = clazz.getSuperclass();
+        }
+    }
+    return method; // Fallback if no bridged method is found
+}
\ No newline at end of file
