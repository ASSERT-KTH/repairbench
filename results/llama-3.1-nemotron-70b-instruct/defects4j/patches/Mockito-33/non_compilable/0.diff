diff --git a/tmp/02535519-6811-452a-9cbc-b5dca47d4107_buggy.java b/tmp/fdabecbb-3cb0-4730-b54d-144a5b251c80_fixed.java
index e1fc51f..34b6d5a 100644
--- a/tmp/02535519-6811-452a-9cbc-b5dca47d4107_buggy.java
+++ b/tmp/fdabecbb-3cb0-4730-b54d-144a5b251c80_fixed.java
@@ -1,9 +1,44 @@
 public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+    // Handles cases where Java generates forwarding methods for generics
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
+    // Check if either method is a synthetic forwarding method
+    boolean m1IsForwarding = isForwardingMethod(m1);
+    boolean m2IsForwarding = isForwardingMethod(m2);
+    
+    // If both are forwarding methods, compare their underlying methods
+    if (m1IsForwarding && m2IsForwarding) {
+        return getForwardedMethod(m1).equals(getForwardedMethod(m2));
+    }
+    // If only one is a forwarding method, compare it with the other's declared method
+    else if (m1IsForwarding) {
+        return getForwardedMethod(m1).equals(m2);
+    } else if (m2IsForwarding) {
+        return m1.equals(getForwardedMethod(m2));
+    }
+    // Neither is a forwarding method, perform a standard comparison
+    else {
         /* Avoid unnecessary cloning */
         return m1.equals(m2);
     }
+}
+
+// Helper methods to identify and extract forwarded methods
+
+private boolean isForwardingMethod(Method method) {
+    return method.isSynthetic() && method.getDeclaringClass().isAssignableFrom(method.getReturnType());
+}
+
+private Method getForwardedMethod(Method forwardingMethod) {
+    try {
+        // This assumes the first non-synthetic method with the same name and parameter types is the target
+        return Arrays.stream(forwardingMethod.getDeclaringClass().getDeclaredMethods())
+               .filter(m ->!m.isSynthetic() && m.getName().equals(forwardingMethod.getName()) 
+                       && Arrays.equals(m.getParameterTypes(), forwardingMethod.getParameterTypes()))
+               .findFirst()
+               .orElseThrow(() -> new IllegalStateException("Cannot find forwarded method for " + forwardingMethod));
+    } catch (Exception e) {
+        throw new RuntimeException("Error resolving forwarded method for " + forwardingMethod, e);
+    }
+}
\ No newline at end of file
