diff --git a/tmp/5149a681-2932-4923-9288-072bbd81b5f8_buggy.java b/tmp/bc84f7e5-4105-4119-9663-a1e5687618a1_fixed.java
index e1fc51f..b543d83 100644
--- a/tmp/5149a681-2932-4923-9288-072bbd81b5f8_buggy.java
+++ b/tmp/bc84f7e5-4105-4119-9663-a1e5687618a1_fixed.java
@@ -1,9 +1,27 @@
 public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+    // Handle cases where Java generates forwarding methods (e.g., with generics)
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // Compare method signatures, considering bridged/forwarding methods
+    return areMethodsEquivalent(m1, m2);
+}
+
+// Helper method to compare method signatures, handling bridged/forwarding methods
+private boolean areMethodsEquivalent(Method m1, Method m2) {
+    return m1.getName().equals(m2.getName()) 
+           && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes()) 
+           && m1.getReturnType().equals(m2.getReturnType()) 
+           && m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass()) 
+           || (m1.isBridge() && m2.isBridge() && getOriginalMethod(m1).equals(getOriginalMethod(m2)));
+}
+
+// Helper method to get the original method for bridged methods
+private Method getOriginalMethod(Method bridgedMethod) {
+    try {
+        // Access the synthetic bridge method's target via reflection
+        return (Method) bridgedMethod.getClass().getDeclaredField("backwardCompatibleMethod").get(bridgedMethod);
+    } catch (Exception e) {
+        throw new RuntimeException("Failed to access original method for bridge method", e);
+    }
 }
\ No newline at end of file
