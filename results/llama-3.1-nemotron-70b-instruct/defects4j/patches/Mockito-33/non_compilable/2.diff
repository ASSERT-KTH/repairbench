diff --git a/tmp/4077e691-7b35-4235-9db8-42ebe3502bbb_buggy.java b/tmp/b24bf75b-ce74-4dbf-8659-1fcf65f18630_fixed.java
index e1fc51f..19886ae 100644
--- a/tmp/4077e691-7b35-4235-9db8-42ebe3502bbb_buggy.java
+++ b/tmp/b24bf75b-ce74-4dbf-8659-1fcf65f18630_fixed.java
@@ -1,9 +1,23 @@
+/**
+ * Checks if the current invocation has the same method as the candidate invocation.
+ * 
+ * @param candidate the invocation to compare with
+ * @return true if methods are the same, considering bridging methods in Java generics
+ */
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // Using Java 8's isBridge() method to handle bridging methods in generics
+    // and comparing method's declaring class, name, and parameter types
+    return (m1.isBridge() || m2.isBridge() 
+           ? areMethodsEquivalent(m1, m2) 
+            : m1.equals(m2));
+}
+
+// Helper method to compare methods considering generics bridging
+private boolean areMethodsEquivalent(Method m1, Method m2) {
+    return m1.getDeclaringClass().equals(m2.getDeclaringClass())
+           && m1.getName().equals(m2.getName())
+           && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
 }
\ No newline at end of file
