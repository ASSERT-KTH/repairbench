diff --git a/tmp/5301bc8d-7f9b-462d-84ef-e52edd46bb78_buggy.java b/tmp/3169d446-1caa-4958-b8bb-db4c71eee464_fixed.java
index e1fc51f..08a98f0 100644
--- a/tmp/5301bc8d-7f9b-462d-84ef-e52edd46bb78_buggy.java
+++ b/tmp/3169d446-1caa-4958-b8bb-db4c71eee464_fixed.java
@@ -1,9 +1,24 @@
+/**
+ * Checks if two invocations have the same method, considering Java's generics forwarding methods.
+ * 
+ * @param candidate the invocation to compare with the current one
+ * @return true if both invocations have the same method, false otherwise
+ */
 public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // Check for exact match first
+    if (m1.equals(m2)) return true;
+    
+    // If not, check for forwarding methods (generated by Java for generics)
+    return areForwardingMethods(m1, m2);
+}
+
+// Helper method to check for forwarding methods
+private boolean areForwardingMethods(Method m1, Method m2) {
+    // Forwarding methods have the same name, return type, and parameter types (modulo type erasure)
+    return m1.getName().equals(m2.getName()) 
+           && m1.getReturnType().equals(m2.getReturnType()) 
+           && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
 }
\ No newline at end of file
