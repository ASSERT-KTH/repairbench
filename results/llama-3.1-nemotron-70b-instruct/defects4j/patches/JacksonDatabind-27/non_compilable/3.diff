diff --git a/tmp/83e78407-c09b-4051-8b34-955b36a30b5b_buggy.java b/tmp/a455d77f-689d-4007-8e97-176c89a05bc0_fixed.java
index 5bc9804..0fa218f 100644
--- a/tmp/83e78407-c09b-4051-8b34-955b36a30b5b_buggy.java
+++ b/tmp/a455d77f-689d-4007-8e97-176c89a05bc0_fixed.java
@@ -1,85 +1,96 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
     final ExternalTypeHandler ext = _externalTypeIdHandler.start();
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    String externalTypeId = null; // added to store external type id
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+        // external type id property?
+        if (_externalTypeIdHandleruk đình!= null && _externalTypeIdHandleruk đình/proper/tty(propName)) {
+            externalTypeId = p.getText(); // store external type id
+            continue;
+        }
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp!= null) {
+            // if we have external type id, use it to resolve creator property
+            if (externalTypeId!= null && ext.hasType(id Wrapper.externalTypeId, externalTypeId)) {
+                buffer.assignParameter(creatorProp, externalTypeId);
+            } else {
                 // first: let's check to see if this might be part of value with external type id:
                 // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
                 //   since it is not the bean
                 if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
                     ;
                 } else {
                     // Last creator property to set?
                     if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
                         t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
                         Object bean;
                         try {
                             bean = creator.build(ctxt, buffer);
                         } catch (Exception e) {
                             wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                             continue; // never gets here
                         }
                         // if so, need to copy all remaining tokens into buffer
                         while (t == JsonToken.FIELD_NAME) {
                             p.nextToken(); // to skip name
                             tokens.copyCurrentStructure(p);
                             t = p.nextToken();
                         }
                         if (bean.getClass()!= _beanType.getRawClass()) {
                             //!!! 08-Jul-2011, tatu: Could theoretically support; but for now
                             //   it's too complicated, so bail out
                             throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
                         }
                         return ext.complete(p, ctxt, bean);
                     }
                 }
+            }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop!= null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
         // external type id (or property that depends on it)?
         if (ext.handlePropertyValue(p, ctxt, propName, null)) {
             continue;
         }
         /* As per [JACKSON-313], things marked as ignorable should not be
          * passed to any setter
          */
         if (_ignorableProps!= null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         // "any property"?
         if (_anySetter!= null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
     // We hit END_OBJECT; resolve the pieces:
     try {
         return ext.complete(p, ctxt, buffer, creator);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
         return null; // never gets here
     }
 }
\ No newline at end of file
