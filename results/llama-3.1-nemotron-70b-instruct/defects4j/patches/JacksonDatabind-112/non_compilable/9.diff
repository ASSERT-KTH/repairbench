diff --git a/tmp/96442253-9a4c-47d7-8da2-7aba5db30d9b_buggy.java b/tmp/73967a80-905d-4712-bdea-3bfb0f063b93_fixed.java
index 4ebe4f9..fa98090 100644
--- a/tmp/96442253-9a4c-47d7-8da2-7aba5db30d9b_buggy.java
+++ b/tmp/73967a80-905d-4712-bdea-3bfb0f063b93_fixed.java
@@ -1,41 +1,62 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
-     */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator!= null) {
         // [databind#2324]: check both array-delegating and delegating
         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
         if (delegateCreator!= null) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             delegate = findDeserializer(ctxt, delegateType, property);
+            // Fix: Ensure delegate-based creators can handle single-value input
+            if (delegate instanceof JsonDeserializer none &&!ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY)) {
+                delegate = new DelegatingDeserializer(delegate);
+            }
         }
     }
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
             // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
+
+// Helper class to enable single-value input for delegate-based creators
+private static class DelegatingDeserializer extends JsonDeserializer<Object> {
+    private final JsonDeserializer<?> delegate;
+    
+    public DelegatingDeserializer(JsonDeserializer<?> delegate) {
+        this.delegate = delegate;
+    }
+    
+    @Override
+    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+        if (p.isExpectedStartArrayToken()) {
+            return delegate.deserialize(p, ctxt);
+        }
+        JsonToken token = p.getCurrentToken();
+        if (token == JsonToken.VALUE_STRING || token == JsonToken.VALUE_NUMBER_INT || token == JsonToken.VALUE_NUMBER_FLOAT ||
+                token == JsonToken.VALUE_TRUE || token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_NULL) {
+            return ctxt Handles.getDefaultValue(delegate.handledType());
+        }
+        throw ctxtöh F dieses criwarehouse-printerno?";
+    }
+}
\ No newline at end of file
