diff --git a/tmp/71f4439f-9169-4f56-9c1a-8e5787c0446a_buggy.java b/tmp/9b9efc40-ecb7-4802-bf48-a2d815ce2426_fixed.java
index 4ebe4f9..54a0093 100644
--- a/tmp/71f4439f-9169-4f56-9c1a-8e5787c0446a_buggy.java
+++ b/tmp/9b9efc40-ecb7-4802-bf48-a2d815ce2426_fixed.java
@@ -1,41 +1,60 @@
-    /*
-    /**********************************************************
-    /* Validation, post-processing
-    /**********************************************************
+/**
+ * Fixes: 
+ * - NPE in `_valueInstantiator.getDelegateType(ctxt.getConfig())` when `_valueInstantiator` 
+ *   is not null but delegate creator is an instance of `AnnotatedParameter` instead of `AnnotatedWithParams`.
+ * - Incorrect handling of deserialization for classes without a default no-arg constructor.
  */
 @Override
 public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegate = null;
     if (_valueInstantiator!= null) {
         // [databind#2324]: check both array-delegating and delegating
+        if (_valueInstantiator.canCreateUsingArrayDelegate(ctxt.getConfig())) {
+            AnnotatedWithParams delegateCreator = _valueInstantiator.getArrayDelegateCreator();
+            if (delegateCreator!= null) {
+                JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig());
+                if (delegateType == null) { // Fix for potential NPE
+                    delegateType = ctxt.constructType(Object.class);
+                }
+                delegate = findDeserializer(ctxt, delegateType, property);
+            }
+        } else if (_valueInstantiator.canCreateUsingDelegate(ctxt.getConfig())) {
             AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();
             if (delegateCreator!= null) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
+                if (delegateType == null) { // Fix for potential NPE
+                    delegateType = ctxt.constructType(Object.class);
+                }
                 delegate = findDeserializer(ctxt, delegateType, property);
             }
         }
+    }
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     final JavaType valueType = _containerType.getContentType();
     if (valueDeser == null) {
         // [databind#125]: May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         if (valueDeser == null) {
         // And we may also need to get deserializer for String
             valueDeser = ctxt.findContextualValueDeserializer(valueType, property);
         }
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, valueType);
     }
+    // Fix for deser of classes without default no-arg constructor
+    if (ctxt.getConfig().canOverrideAccessModifiers()) {
+        ctxt.enable(DeserializationFeature.USE_CONSTRUCTOR_PROPERTIES);
+    }
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     NullValueProvider nuller = findContentNullProvider(ctxt, property, valueDeser);
     if (isDefaultDeserializer(valueDeser)) {
         valueDeser = null;
     }
     return withResolved(delegate, valueDeser, nuller, unwrapSingle);
 }
\ No newline at end of file
