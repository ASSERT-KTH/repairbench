diff --git a/tmp/f2220d16-2321-4294-8776-88d78daf9d25_buggy.java b/tmp/ff24edc7-3bc8-4ec0-a540-962d3ba22d47_fixed.java
index d68a69c..3dd6c20 100644
--- a/tmp/f2220d16-2321-4294-8776-88d78daf9d25_buggy.java
+++ b/tmp/ff24edc7-3bc8-4ec0-a540-962d3ba22d47_fixed.java
@@ -1,9 +1,29 @@
+/**
+ * Captures arguments from the given invocation, handling variable-length arguments (varargs) properly.
+ * 
+ * @param i the invocation from which to capture arguments
+ */
 public void captureArgumentsFrom(Invocation i) {
+    Object[] args = i.getArguments();
     int k = 0;
     for (Matcher m : matchers) {
         if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+            if (k < args.length) { // check if k is within bounds
+                if (m instanceof AnyVararg && k == args.length - 1) { 
+                    // handle vararg case, pass the remaining arguments as an array
+                    ((CapturesArguments) m).captureFrom(getRemainingArgsAsArray(args, k));
+                } else {
+                    ((CapturesArguments) m).captureFrom(args[k]);
+                }
             }
             k++;
         }
     }
+}
+
+// Helper method to get the remaining arguments as an array for vararg handling
+private Object[] getRemainingArgsAsArray(Object[] args, int startIndex) {
+    Object[] remainingArgs = new Object[args.length - startIndex];
+    System.arraycopy(args, startIndex, remainingArgs, 0, args.length - startIndex);
+    return remainingArgs;
+}
\ No newline at end of file
