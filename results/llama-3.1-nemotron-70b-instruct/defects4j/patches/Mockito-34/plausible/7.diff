diff --git a/tmp/d779d872-bf1c-47cd-bc2d-d50b5c379a78_buggy.java b/tmp/d3f025f3-6e62-44c8-8186-7e3012846a2d_fixed.java
index d68a69c..451225a 100644
--- a/tmp/d779d872-bf1c-47cd-bc2d-d50b5c379a78_buggy.java
+++ b/tmp/d3f025f3-6e62-44c8-8186-7e3012846a2d_fixed.java
@@ -1,9 +1,28 @@
+/**
+ * Captures arguments from the given invocation, handling cases where the number of arguments 
+ * may not match the number of matchers (e.g., varargs).
+ */
 public void captureArgumentsFrom(Invocation i) {
-        int k = 0;
-        for (Matcher m : matchers) {
+    Object[] arguments = i.getArguments();
+    int matcherIndex = 0;
+    for (Object arg : arguments) {
+        if (matcherIndex < matchers.size()) {
+            Matcher m = matchers.get(matcherIndex);
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
+                ((CapturesArguments) m).captureFrom(arg);
             }
-            k++;
+            matcherIndex++;
+        } else {
+            // Handle excess arguments (e.g., varargs), ignoring them if no more matchers exist
+            break;
+        }
+    }
+    // Handle remaining matchers without corresponding arguments (e.g., empty varargs)
+    while (matcherIndex < matchers.size()) {
+        Matcher m = matchers.get(matcherIndex);
+        if (m instanceof CapturesArguments) {
+            ((CapturesArguments) m).captureFrom(null); // or a default value, depending on the requirement
+        }
+        matcherIndex++;
     }
 }
\ No newline at end of file
