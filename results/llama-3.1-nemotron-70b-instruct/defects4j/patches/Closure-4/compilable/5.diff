diff --git a/tmp/5960c7d0-3008-40bb-9c7e-92c919c4655c_buggy.java b/tmp/71d7a214-9b87-4188-9bda-e493f783f79e_fixed.java
index d6a560a..04a4765 100644
--- a/tmp/5960c7d0-3008-40bb-9c7e-92c919c4655c_buggy.java
+++ b/tmp/71d7a214-9b87-4188-9bda-e493f783f79e_fixed.java
@@ -1,33 +1,31 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for implicit prototype cycles before attempting to resolve
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        // If a cycle is detected, return immediately to prevent further resolution attempts
+        return registry.isLastGeneration()? getReferencedType() : this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+        // Only call super.resolveInternal() if resolution was successful via registry
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration()? getReferencedType() : this;
     }
 
+    // If not resolved via registry, attempt resolution via properties
     resolveViaProperties(t, enclosing);
+    // Re-check for implicit prototype cycles after resolution via properties
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
+    // Only call super.resolveInternal() if not already done and if resolved
+    if (!resolved && isResolved()) {
         super.resolveInternal(t, enclosing);
-    if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
