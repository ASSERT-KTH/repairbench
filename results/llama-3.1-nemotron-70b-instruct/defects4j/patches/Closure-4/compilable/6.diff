diff --git a/tmp/4a1d3a74-ac7a-4f9c-b423-119bf8fde3c1_buggy.java b/tmp/ce0ccf89-13c6-4787-bbbb-c001601b8683_fixed.java
index d6a560a..8c0d876 100644
--- a/tmp/4a1d3a74-ac7a-4f9c-b423-119bf8fde3c1_buggy.java
+++ b/tmp/ce0ccf89-13c6-4787-bbbb-c001601b8683_fixed.java
@@ -1,33 +1,33 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for implicit prototype cycles before resolving to avoid infinite loops
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      // If a cycle is detected, do not proceed with resolution to prevent StackOverflowError
+      return registry.isLastGeneration()? getReferencedType() : this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+      // Only call super.resolveInternal if resolution via registry was successful
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration()? getReferencedType() : this;
     }
 
+    // Resolve via properties only if registry resolution failed
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    // Ensure super.resolveInternal is called after all resolution attempts
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
