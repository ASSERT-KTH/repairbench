diff --git a/tmp/5d912286-123a-468f-989f-dfce9f842278_buggy.java b/tmp/5c82134f-df69-4e27-b37c-064ba65f0fe7_fixed.java
index d6a560a..a77d4a5 100644
--- a/tmp/5d912286-123a-468f-989f-dfce9f842278_buggy.java
+++ b/tmp/5c82134f-df69-4e27-b37c-064ba65f0fe7_fixed.java
@@ -1,33 +1,36 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  // Detect and handle implicit prototype cycles before attempting resolution
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // If a cycle is detected, do not attempt further resolution to prevent stack overflows
+    return this;
   }
 
-    if (resolved) {
+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);
+  if (resolvedViaRegistry) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration()? getReferencedType() : this;
   }
 
+  // Only attempt resolution via properties if registry resolution was unsuccessful
   resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
   
+  // Call super.resolveInternal() only once after all resolution attempts
   super.resolveInternal(t, enclosing);
+  
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  
+  // Re-check for implicit prototype cycles after resolution (in case it was introduced during resolution)
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+  }
+  
+  return registry.isLastGeneration()? getReferencedType() : this;
 }
\ No newline at end of file
