diff --git a/tmp/b5d66277-89dd-4e55-a956-411ffc6e308e_buggy.java b/tmp/174f08fd-590c-40e0-95df-973bc203067a_fixed.java
index d6a560a..d8f6a3a 100644
--- a/tmp/b5d66277-89dd-4e55-a956-411ffc6e308e_buggy.java
+++ b/tmp/174f08fd-590c-40e0-95df-973bc203067a_fixed.java
@@ -1,33 +1,40 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Detect and handle cyclic dependencies before attempting resolution
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    // If a cycle is detected, do not attempt further resolution to avoid SOE
+    return this;
+  }
+
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
   if (resolved) {
+    // Ensureresasuper.resolveInternal() is only called when necessary
+    if (!isResolved()) {
       super.resolveInternal(t, enclosing);
+    }
     finishPropertyContinuations();
     return registry.isLastGeneration()?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // If a cycle is detected during secondary resolution, return immediately
+    return this;
   }
 
+  // Only call super.resolveInternal() if the type is not yet resolved
+  if (!isResolved()) {
     super.resolveInternal(t, enclosing);
+  }
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration()?
       getReferencedType() : this;
 }
\ No newline at end of file
