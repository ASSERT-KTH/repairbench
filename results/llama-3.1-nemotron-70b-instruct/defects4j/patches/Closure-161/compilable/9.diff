diff --git a/tmp/ad675789-f0d0-425a-87a0-9ea3130f8c20_buggy.java b/tmp/d8ac1d99-3cfc-43ee-bb47-cddcece94ff3_fixed.java
index 1303a19..d83ce2f 100644
--- a/tmp/ad675789-f0d0-425a-87a0-9ea3130f8c20_buggy.java
+++ b/tmp/d8ac1d99-3cfc-43ee-bb47-cddcece94ff3_fixed.java
@@ -1,45 +1,60 @@
+/**
+ * Attempts to fold a GETELEM node where the LHS is an array literal
+ * and the index is a constant number.
+ *
+ * @param n    the GETELEM node to try to fold
+ * @param left the array literal node (n's left child)
+ * @param right the index node (n's right child)
+ * @return the folded node, or the original node if folding was not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+    // Adjust the index to account for potential empty slots at the start of the array
     Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+    int effectiveIndex = 0;
+    while (elem!= null && effectiveIndex < intIndex) {
+        if (elem.getType()!= Token.EMPTY) {
+            effectiveIndex++;
+        }
         elem = elem.getNext();
     }
 
+    if (effectiveIndex!= intIndex) {
+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+        return n;
+    }
+
     if (elem == null) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
