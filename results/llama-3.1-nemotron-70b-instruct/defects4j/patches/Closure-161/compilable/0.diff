diff --git a/tmp/7a00b9d3-7459-4186-8a03-38f32b2852c4_buggy.java b/tmp/8873f6ba-3305-4fcc-9ccd-94516af5e5ae_fixed.java
index 1303a19..5e23d85 100644
--- a/tmp/7a00b9d3-7459-4186-8a03-38f32b2852c4_buggy.java
+++ b/tmp/8873f6ba-3305-4fcc-9ccd-94516af5e5ae_fixed.java
@@ -1,45 +1,67 @@
+/**
+ * Attempts to fold a GETELEM node with a numeric literal index into its constituent element.
+ * 
+ * @param n     the GETELEM node to fold
+ * @param left  the array literal node
+ * @param right the numeric literal index node
+ * @return the folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+    
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+    // Fix: Check if the operation is an assignment before checking index bounds
+    if (parent.getType() == Token.ASSIGN) {
+        // In assignment, allow out-of-bounds index to create a new element
         Node elem = left.getFirstChild();
         for (int i = 0; elem!= null && i < intIndex; i++) {
           elem = elem.getNext();
         }
-
         if (elem == null) {
+            // Create new elements up to the desired index
+            while (left.getChildCount() <= intIndex) {
+                left.addChildToBack(NodeUtil.newUndefinedNode(left));
+            }
+            return n; // Do not replace the GETELEM node in assignment
+        }
+    } else {
+        // Non-assignment operation: check index bounds as before
+        if (intIndex < 0 || left.getChildCount() <= intIndex) {
           error(INDEX_OUT_OF_BOUNDS_ERROR, right);
           return n;
         }
 
+        Node elem = left.getFirstChild();
+        for (int i = 0; elem!= null && i < intIndex; i++) {
+          elem = elem.getNext();
+        }
+
         if (elem.getType() == Token.EMPTY) {
           elem = NodeUtil.newUndefinedNode(elem);
         } else {
           left.removeChild(elem);
         }
 
         // Replace the entire GETELEM with the value
         n.getParent().replaceChild(n, elem);
         reportCodeChange();
         return elem;
     }
+    return n;
+}
\ No newline at end of file
