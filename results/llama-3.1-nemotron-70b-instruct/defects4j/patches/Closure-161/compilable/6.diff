diff --git a/tmp/0173f658-6c76-4bea-aaa4-c6d877400bdf_buggy.java b/tmp/885266f6-cf04-4544-9795-9af4725c8c2b_fixed.java
index 1303a19..753b3dd 100644
--- a/tmp/0173f658-6c76-4bea-aaa4-c6d877400bdf_buggy.java
+++ b/tmp/885266f6-cf04-4544-9795-9af4725c8c2b_fixed.java
@@ -1,45 +1,60 @@
+/**
+ * Tries to fold a constant array access into a literal value.
+ * 
+ * @param n     the GETELEM node to try to fold
+ * @param left  the array literal (expected to be a child of 'n')
+ * @param right the index expression (expected to be a child of 'n')
+ * @return the folded node, or 'n' if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+    
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
+    // FIX: Check for empty array before checking if index is negative
     Node elem = left.getFirstChild();
     for (int i = 0; elem!= null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
+      // If the index is out of bounds, check if the assignment would extend the array
+      if (parent.getType() == Token.ASSIGN && intIndex >= 0) {
+        // Extend the array with undefined values
+        while (left.getChildCount() <= intIndex) {
+          Node newElem = NodeUtil.newUndefinedNode(left);
+          left.addChildToBack(newElem);
+        }
+        elem = left.getChildAtIndex(intIndex);
+      } else {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
+    }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
