diff --git a/tmp/9d1ca92f-e980-4ed3-ac63-05f526b4c66e_buggy.java b/tmp/c85b99d2-22f6-4d54-8257-e0bc26ebd2c7_fixed.java
index 1303a19..32c0faa 100644
--- a/tmp/9d1ca92f-e980-4ed3-ac63-05f526b4c66e_buggy.java
+++ b/tmp/c85b99d2-22f6-4d54-8257-e0bc26ebd2c7_fixed.java
@@ -1,45 +1,59 @@
+/**
+ * Tries to fold a GETELEM/GETPROP node with a constant index into a simple 
+ * expression, if possible.
+ * 
+ * @param n    the GETELEM/GETPROP node to try to fold
+ * @param left the array or object being indexed into
+ * @param right the index
+ * @return the folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Check if the parent is an assignment, if so, do not fold
+    if (parent.getType() == Token.ASSIGN) {
+      return n;
+    }
+
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem!= null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
