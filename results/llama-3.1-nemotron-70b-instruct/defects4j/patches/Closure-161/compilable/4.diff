diff --git a/tmp/9547b6e3-b432-4402-a073-1b8f4424fb99_buggy.java b/tmp/74d8efc6-4ade-4d5e-8c1d-f2fbcef16d35_fixed.java
index 1303a19..907ee65 100644
--- a/tmp/9547b6e3-b432-4402-a073-1b8f4424fb99_buggy.java
+++ b/tmp/74d8efc6-4ade-4d5e-8c1d-f2fbcef16d35_fixed.java
@@ -1,45 +1,57 @@
+/**
+ * Attempts to fold array access into a constant value.
+ * 
+ * @param n     the GETELEM node to potentially fold
+ * @param left  the array literal node
+ * @param right the index node
+ * @return the potentially folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+    
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
+    // Fix: Check if the assignment is to an array index, not just read access
+    if (parent.getType() == Token.ASSIGN) {
+        // If assignment, allow folding even if index is out of bounds
+        // because the array will be automatically resized
+    } else if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem!= null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
-    if (elem.getType() == Token.EMPTY) {
+        // Fix: If elem is null (index out of bounds), create a new undefined node
+        // instead of reporting an error. This will be replaced in the assignment.
+        elem = NodeUtil.newUndefinedNode(left);
+    } else if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
