diff --git a/tmp/655dad43-8b43-457e-8b3c-65ff0c8037d2_buggy.java b/tmp/aba08869-3cc7-4836-b67e-ef31edacdd45_fixed.java
index 1303a19..51ba2a2 100644
--- a/tmp/655dad43-8b43-457e-8b3c-65ff0c8037d2_buggy.java
+++ b/tmp/aba08869-3cc7-4836-b67e-ef31edacdd45_fixed.java
@@ -1,45 +1,56 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Check if the left node is an array literal (and not a general expression)
+    if (left.getType() == Token.ARRAYLIT) {
       Node elem = left.getFirstChild();
       for (int i = 0; elem!= null && i < intIndex; i++) {
         elem = elem.getNext();
       }
 
       if (elem == null) {
+        // If the index is out of bounds for an array literal on the RHS of an assignment,
+        // we should not error, but rather return the original node, as the assignment
+        // will implicitly increase the array's length.
+        if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {
+          return n;
+        }
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
       }
 
       if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
       } else {
         left.removeChild(elem);
       }
 
       // Replace the entire GETELEM with the value
       n.getParent().replaceChild(n, elem);
       reportCodeChange();
       return elem;
     }
+
+    return n;
+}
\ No newline at end of file
