diff --git a/tmp/429da73f-f657-410a-b22a-c72f8ef03835_buggy.java b/tmp/c8522eb9-34e6-4159-9924-efd86606fa21_fixed.java
index 1303a19..f8e784f 100644
--- a/tmp/429da73f-f657-410a-b22a-c72f8ef03835_buggy.java
+++ b/tmp/c8522eb9-34e6-4159-9924-efd86606fa21_fixed.java
@@ -1,45 +1,80 @@
+/**
+ * Attempts to fold a GETELEM node when the index is a constant number.
+ * 
+ * @param n     the GETELEM node
+ * @param left  the array literal node
+ * @param right the index node
+ * @return the folded node, or the original node if folding is not possible
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
-    if (intIndex < 0) {
+    // Check if the access is for an assignment
+    if (parent.getType() == Token.ASSIGN) {
+        // In case of assignment, allow folding even if index is out of bounds
+        // since the array will be extended
+        Node elem;
+        if (left.getChildCount() <= intIndex) {
+            // Create new empty nodes to fill the gap
+            for (int i = left.getChildCount(); i <= intIndex; i++) {
+                elem = NodeUtil.newEmptyNode(left);
+                left.addChildToBack(elem);
+            }
+            // Create the node for the assignee
+            elem = NodeUtil.newEmptyNode(left);
+            left.addChildToBack(elem);
+        } else {
+            elem = left.getFirstChild();
+            for (int i = 0; elem!= null && i < intIndex; i++) {
+              elem = elem.getNext();
+            }
+        }
+
+        if (elem.getType() == Token.EMPTY) {
+          elem = NodeUtil.newUndefinedNode(elem);
+        } 
+        // Replace the entire GETELEM with the value
+        n.getParent().replaceChild(n, elem);
+        reportCodeChange();
+        return elem;
+    } else {
+        // Non-assignment access, check for out of bounds
+        if (intIndex < 0 || left.getChildCount() <= intIndex) {
           error(INDEX_OUT_OF_BOUNDS_ERROR, right);
           return n;
         }
 
         Node elem = left.getFirstChild();
         for (int i = 0; elem!= null && i < intIndex; i++) {
           elem = elem.getNext();
         }
 
-    if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
-    }
-
         if (elem.getType() == Token.EMPTY) {
           elem = NodeUtil.newUndefinedNode(elem);
         } else {
           left.removeChild(elem);
         }
 
         // Replace the entire GETELEM with the value
         n.getParent().replaceChild(n, elem);
         reportCodeChange();
         return elem;
     }
+}
\ No newline at end of file
