diff --git a/tmp/b02ec246-cd16-4bce-b39c-23d05c509fab_buggy.java b/tmp/d129537a-21b9-437a-bb02-f2374494a2c4_fixed.java
index 1303a19..47aee08 100644
--- a/tmp/b02ec246-cd16-4bce-b39c-23d05c509fab_buggy.java
+++ b/tmp/d129537a-21b9-437a-bb02-f2374494a2c4_fixed.java
@@ -1,45 +1,60 @@
+/**
+ * Attempts to fold GETELEM with a constant numeric index into an array literal.
+ * 
+ * @param n     Node representing the GETELEM operation
+ * @param left  Node representing the array literal
+ * @param right Node representing the index
+ * @return the folded Node if successful, otherwise the original Node
+ */
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
+    
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
 
     if (right.getType()!= Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex!= index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
+    // Fix: Check for assignment target before indexing check
+    if (n.getParent() instanceof Node.AssignOp 
+        && n.getParent().getFirstChild() == n) {
+      return n; // Can't fold if used as assignment target
+    }
+
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem!= null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
