diff --git a/tmp/8cb48313-33ca-4e6e-bb8a-ac2cc98b6b1a_buggy.java b/tmp/a4834fd9-2724-4758-9974-2a99bca98a22_fixed.java
index 61ffdbf..0823b86 100644
--- a/tmp/8cb48313-33ca-4e6e-bb8a-ac2cc98b6b1a_buggy.java
+++ b/tmp/a4834fd9-2724-4758-9974-2a99bca98a22_fixed.java
@@ -1,44 +1,45 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
+ * possible the function's callSites, but only if removeGlobal is true or
+ * compilation level is ADVANCED_OPTIMIZATIONS.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+  boolean modifyCallers = (removeGlobal || compiler.getCompilationLevel().equals(CompilationLevel.ADVANCED_OPTIMIZATIONS))
+      && modifyCallSites && callSiteOptimizer.canModifyCallers(function);
   if (!modifyCallers) {
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild())!= null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
