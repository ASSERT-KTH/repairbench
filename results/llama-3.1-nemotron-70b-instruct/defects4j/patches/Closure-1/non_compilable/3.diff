diff --git a/tmp/8c14cd62-3812-455a-86a5-2944d0b916e7_buggy.java b/tmp/f2094f0e-c970-402a-8767-5f3fa9d20540_fixed.java
index 61ffdbf..f7f3dad 100644
--- a/tmp/8c14cd62-3812-455a-86a5-2944d0b916e7_buggy.java
+++ b/tmp/f2094f0e-c970-402a-8767-5f3fa9d20540_fixed.java
@@ -1,44 +1,45 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
+    boolean modifyCallers = (compilationLevel!= CompilationLevel.SIMPLE_OPTIMIZATIONS)
+        && modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild())!= null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
 }
\ No newline at end of file
