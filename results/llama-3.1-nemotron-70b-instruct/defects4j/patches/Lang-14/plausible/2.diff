diff --git a/tmp/b47c5c14-9a84-43df-ab8b-736340620cc4_buggy.java b/tmp/96bf9a22-b711-4e2c-b12a-f5f6dcd50405_fixed.java
index c18eb8b..326b013 100644
--- a/tmp/b47c5c14-9a84-43df-ab8b-736340620cc4_buggy.java
+++ b/tmp/96bf9a22-b711-4e2c-b12a-f5f6dcd50405_fixed.java
@@ -1,30 +1,39 @@
 /**
  * <p>Compares two CharSequences, returning {@code true} if they represent
  * equal sequences of characters.</p>
  *
  * <p>{@code null}s are handled without exceptions. Two {@code null}
  * references are considered to be equal. The comparison is case sensitive.</p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * @see java.lang.CharSequence#equals(Object)
  * @param cs1  the first CharSequence, may be {@code null}
  * @param cs2  the second CharSequence, may be {@code null}
  * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
  * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
  */
 public static boolean equals(CharSequence cs1, CharSequence cs2) {
     if (cs1 == cs2) {
-            return true;
+        return true; // both null or same object
     }
     if (cs1 == null || cs2 == null) {
-            return false;
+        return false; // one is null, the other is not
     }
-            return cs1.equals(cs2);
+    // Fix: use length check and iterate over characters for comparison
+    if (cs1.length()!= cs2.length()) {
+        return false; // lengths differ, cannot be equal
+    }
+    for (int i = 0; i < cs1.length(); i++) {
+        if (cs1.charAt(i)!= cs2.charAt(i)) {
+            return false; // found a differing character
+        }
+    }
+    return true; // all checks passed, CharSequences are equal
 }
\ No newline at end of file
