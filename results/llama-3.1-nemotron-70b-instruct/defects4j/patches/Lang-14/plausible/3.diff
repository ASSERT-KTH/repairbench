diff --git a/tmp/d1a37c6d-b731-4275-a2b4-a0a6d0d313c4_buggy.java b/tmp/73309e6d-ccfa-4431-bfc7-b6383625e3e4_fixed.java
index c18eb8b..7b03c77 100644
--- a/tmp/d1a37c6d-b731-4275-a2b4-a0a6d0d313c4_buggy.java
+++ b/tmp/73309e6d-ccfa-4431-bfc7-b6383625e3e4_fixed.java
@@ -1,30 +1,44 @@
 /**
  * <p>Compares two CharSequences, returning {@code true} if they represent
  * equal sequences of characters.</p>
  *
  * <p>{@code null}s are handled without exceptions. Two {@code null}
  * references are considered to be equal. The comparison is case sensitive.</p>
  *
  * <pre>
  * StringUtils.equals(null, null)   = true
  * StringUtils.equals(null, "abc")  = false
  * StringUtils.equals("abc", null)  = false
  * StringUtils.equals("abc", "abc") = true
  * StringUtils.equals("abc", "ABC") = false
  * </pre>
  *
  * @see java.lang.CharSequence#equals(Object)
  * @param cs1  the first CharSequence, may be {@code null}
  * @param cs2  the second CharSequence, may be {@code null}
  * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
  * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
  */
 public static boolean equals(CharSequence cs1, CharSequence cs2) {
     if (cs1 == cs2) {
-            return true;
+        return true; // both null or same object
     }
     if (cs1 == null || cs2 == null) {
-            return false;
+        return false; // one is null, the other is not
     }
-            return cs1.equals(cs2);
+    if (cs1 instanceof String && cs2 instanceof String) {
+        return cs1.equals(cs2); // optimized for common string case
+    }
+    // For other CharSequence types (e.g., StringBuilder, CustomCharSequence), 
+    // iterate and compare character by character to ensure correctness
+    int length = cs1.length();
+    if (length!= cs2.length()) {
+        return false; // different lengths, cannot be equal
+    }
+    for (int i = 0; i < length; i++) {
+        if (cs1.charAt(i)!= cs2.charAt(i)) {
+            return false; // mismatched characters
+        }
+    }
+    return true; // all characters matched
 }
\ No newline at end of file
