diff --git a/tmp/ff8b65da-b1e4-4332-97aa-b22a224b7702_buggy.java b/tmp/0b9b569a-b4d9-4e02-b19e-b5d7d1ae4a05_fixed.java
index 9d42346..3283e97 100644
--- a/tmp/ff8b65da-b1e4-4332-97aa-b22a224b7702_buggy.java
+++ b/tmp/0b9b569a-b4d9-4e02-b19e-b5d7d1ae4a05_fixed.java
@@ -1,37 +1,40 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
     // special casing primitives here saves ~5% on Android...
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation!= null) {
       mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped!= null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue!= null ||!isPrimitive) {
-          field.set(value, fieldValue);
+          // Fix: added null check for 'value' to avoid NullPointerException
+          if (value!= null) {
+            field.set(value, jsonAdapterPresent? fieldValue : context.getDefaultAdapter(fieldType).read(reader));
+          }
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+        if (!serialize) return false; // Fix: corrected variable name from 'serialized' to 'serialize'
         Object fieldValue = field.get(value);
         return fieldValue!= value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
