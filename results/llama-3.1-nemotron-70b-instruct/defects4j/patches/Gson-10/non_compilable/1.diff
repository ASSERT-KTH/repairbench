diff --git a/tmp/6fc79a74-6e75-40b9-8773-a4a895b0cd58_buggy.java b/tmp/0763b074-c9bb-4867-9db4-edf6931cef62_fixed.java
index 9d42346..e4e4c79 100644
--- a/tmp/6fc79a74-6e75-40b9-8773-a4a895b0cd58_buggy.java
+++ b/tmp/0763b074-c9bb-4867-9db4-edf6931cef62_fixed.java
@@ -1,37 +1,39 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation!= null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped!= null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
-        TypeAdapter t =
-          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
+      if (jsonAdapterPresent ||!isPrimitive) { // Always use wrapper for annotated or non-primitive types
+        TypeAdapter<?> t = new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
+      } else {
+        typeAdapter.write(writer, fieldValue); // Direct write for unannotated primitives
+      }
     }
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue!= null ||!isPrimitive) {
         field.set(value, fieldValue);
       }
     }
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+      if (!serialize) return false; // Fix: 'serialized' -> 'serialize' (variable name correction)
       Object fieldValue = field.get(value);
       return fieldValue!= value; // avoid recursion for example for Throwable.cause
     }
   };
 }
\ No newline at end of file
