diff --git a/tmp/faeb3b4c-3dcc-4556-9a69-8b120258de18_buggy.java b/tmp/9ab4efa6-97b1-4c00-b038-91faddc8b336_fixed.java
index fa42cd9..bd8104d 100644
--- a/tmp/faeb3b4c-3dcc-4556-9a69-8b120258de18_buggy.java
+++ b/tmp/9ab4efa6-97b1-4c00-b038-91faddc8b336_fixed.java
@@ -1,27 +1,30 @@
 /**
  * Declares a refined type in {@code scope} for the name represented by
  * {@code node}. It must be possible to refine the type of the given node in
  * the given scope, as determined by {@link #getTypeIfRefinable}.
  */
 protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
   switch (node.getType()) {
     case Token.NAME:
       scope.inferSlotType(node.getString(), type);
       break;
 
     case Token.GETPROP:
       String qualifiedName = node.getQualifiedName();
       Preconditions.checkNotNull(qualifiedName);
 
       JSType origType = node.getJSType();
       origType = origType == null? getNativeType(UNKNOWN_TYPE) : origType;
       scope.inferQualifiedSlot(node, qualifiedName, origType, type);
       break;
 
-        // "this" references aren't currently modeled in the CFG.
+    case Token.THIS:
+      // Handle "this" references by refining the type in the current scope
+      scope.inferSlotType("this", type);
+      break;
 
     default:
       throw new IllegalArgumentException("Node cannot be refined. \n" +
           node.toStringTree());
   }
 }
\ No newline at end of file
