diff --git a/tmp/d7e66ab8-0bf9-4d37-a89f-cfe50b54732b_buggy.java b/tmp/eb7ec02f-7d24-41d9-aadc-e1680bcadd0e_fixed.java
index 39c4220..2c550e5 100644
--- a/tmp/d7e66ab8-0bf9-4d37-a89f-cfe50b54732b_buggy.java
+++ b/tmp/eb7ec02f-7d24-41d9-aadc-e1680bcadd0e_fixed.java
@@ -1,21 +1,41 @@
+/**
+ * Fixed version of the _parseIndex function to handle scientific notation.
+ *
+ * @param str the input string to parse as an index
+ * @return the parsed index, or -1 if parsing fails
+ */
 private final static int _parseIndex(String str) {
     final int len = str.length();
     // [Issue#133]: beware of super long indexes; assume we never
     // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
+    try {
+        // Attempt to parse the entire string as an integer
+        // This will fail for scientific notation (e.g., 1e0)
+        return Integer.parseInt(str);
+    } catch (NumberFormatException e) {
+        // If parsing as integer fails, check for scientific notation
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
-                return -1;
+            char c = str.charAt(i);
+            if (c > '9' || c < '0' || c == 'e' || c == 'E') {
+                // If 'e' or 'E' is found, or if non-digit, fail parsing
+                if (c == 'e' || c == 'E') {
+                    // Special handling for scientific notation: check if it evaluates to an integer
+                    try {
+                        double d = Double.parseDouble(str);
+                        if (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE && d == Math.floor(d)) {
+                            return (int) d; // successfully parsed as integer
                         }
+                    } catch (NumberFormatException ex) {
+                        // Ignore, already knowing it's not a simple integer
                     }
-        if (len == 10) {
-            long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
-                return -1;
                 }
+                return -1; // failed parsing
+            }
+        }
+        // This point should not be reachable due to initial parseInt attempt
+        return -1;
     }
-        return NumberInput.parseInt(str);
 }
\ No newline at end of file
