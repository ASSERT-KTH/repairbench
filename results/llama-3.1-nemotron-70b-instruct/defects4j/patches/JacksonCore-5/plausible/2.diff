diff --git a/tmp/781e4d21-6cac-46b4-8c22-feea015293a2_buggy.java b/tmp/d264c21b-f379-4b9d-96fd-889a94f19e61_fixed.java
index 39c4220..dd65fe8 100644
--- a/tmp/781e4d21-6cac-46b4-8c22-feea015293a2_buggy.java
+++ b/tmp/d264c21b-f379-4b9d-96fd-889a94f19e61_fixed.java
@@ -1,21 +1,39 @@
+/**
+ * Fixed version of the _parseIndex function to handle scientific notation.
+ * 
+ * @param str input string to parse as an index
+ * @return parsed index as an integer, or -1 if parsing fails
+ */
 private final static int _parseIndex(String str) {
     final int len = str.length();
     // [Issue#133]: beware of super long indexes; assume we never
     // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
+    // Check for scientific notation (e.g., "1e0")
+    if (str.contains("e") || str.contains("E")) {
+        try {
+            double d = Double.parseDouble(str);
+            if (d!= Math.floor(d) || d < 0 || d > Integer.MAX_VALUE) {
+                return -1;
+            }
+            return (int) d;
+        } catch (NumberFormatException e) {
+            return -1;
+        }
+    }
     for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
+        char c = str.charAt(i);
         if (c > '9' || c < '0') {
             return -1;
         }
     }
     if (len == 10) {
         long l = NumberInput.parseLong(str);
         if (l > Integer.MAX_VALUE) {
             return -1;
         }
     }
     return NumberInput.parseInt(str);
 }
\ No newline at end of file
