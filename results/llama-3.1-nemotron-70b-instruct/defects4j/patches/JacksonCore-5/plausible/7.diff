diff --git a/tmp/c165d330-a7eb-4757-9ea0-db3472546f61_buggy.java b/tmp/092bfa25-616f-4962-a5f3-23e325108c95_fixed.java
index 39c4220..b5e74b7 100644
--- a/tmp/c165d330-a7eb-4757-9ea0-db3472546f61_buggy.java
+++ b/tmp/092bfa25-616f-4962-a5f3-23e325108c95_fixed.java
@@ -1,21 +1,29 @@
+/**
+ * Fixed version of the _parseIndex function to handle scientific notation
+ * and other non-integer numeric strings.
+ */
 private final static int _parseIndex(String str) {
     final int len = str.length();
     // [Issue#133]: beware of super long indexes; assume we never
     // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
-        for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
-                return -1;
-            }
-        }
-        if (len == 10) {
-            long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
-                return -1;
-            }
-        }
+    try {
+        // Attempt to parse as an integer directly
         return NumberInput.parseInt(str);
+    } catch (NumberFormatException e) {
+        // If parsing as integer fails, check if it's a numeric string in scientific notation or similar
+        try {
+            double d = Double.parseDouble(str);
+            // Check if the double value is within integer range
+            if (d >= Integer.MIN_VALUE && d <= Integer.MAX_VALUE && d == Math.floor(d)) {
+                return (int) d;
+            }
+        } catch (NumberFormatException ex) {
+            // Ignore and continue to return -1
+        }
+        return -1; // Input string is not a valid integer (or integerish) value
+    }
+    // Additional length check for 10-char strings remains unnecessary with this approach
 }
\ No newline at end of file
