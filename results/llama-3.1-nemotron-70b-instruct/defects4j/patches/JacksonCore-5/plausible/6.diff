diff --git a/tmp/e62c6965-0f73-4704-95ea-605dcdc89739_buggy.java b/tmp/f2249642-3c6f-4709-9174-eaf6aa596821_fixed.java
index 39c4220..a8dd6c3 100644
--- a/tmp/e62c6965-0f73-4704-95ea-605dcdc89739_buggy.java
+++ b/tmp/f2249642-3c6f-4709-9174-eaf6aa596821_fixed.java
@@ -1,21 +1,26 @@
+/**
+ * Fixed version of the _parseIndex function to handle scientific notation
+ * and other non-integer numeric strings.
+ */
 private final static int _parseIndex(String str) {
     final int len = str.length();
     // [Issue#133]: beware of super long indexes; assume we never
     // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
+    // Attempt to parse as an integer directly, handling most cases efficiently
+    try {
+        return Integer.parseInt(str);
+    } catch (NumberFormatException e) {
+        // If not a simple integer, check for more complex numeric formats
         for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
-                return -1;
+            char c = str.charAt(i);
+            if ((c < '0' || c > '9') && c!= '-' && c!= '.' && c!= 'e' && c!= 'E') {
+                return -1; // Non-numeric character
             }
         }
-        if (len == 10) {
-            long l = NumberInput.parseLong(str);
-            if (l > Integer.MAX_VALUE) {
+        // If it's a numeric string but not an integer, reject it
         return -1;
     }
 }
\ No newline at end of file
-        return NumberInput.parseInt(str);
-    }
