diff --git a/tmp/f32efb70-8360-4834-bcb1-8b60dcf24728_buggy.java b/tmp/4a249377-176e-4e2c-aaf7-8ccf3fe34c6c_fixed.java
index 39c4220..3f8826a 100644
--- a/tmp/f32efb70-8360-4834-bcb1-8b60dcf24728_buggy.java
+++ b/tmp/4a249377-176e-4e2c-aaf7-8ccf3fe34c6c_fixed.java
@@ -1,21 +1,54 @@
+/**
+ * Fixed version of the _parseIndex function to handle scientific notation correctly
+ */
 private final static int _parseIndex(String str) {
     final int len = str.length();
     // [Issue#133]: beware of super long indexes; assume we never
     // have arrays over 2 billion entries so ints are fine.
     if (len == 0 || len > 10) {
         return -1;
     }
     for (int i = 0; i < len; ++i) {
-            char c = str.charAt(i++);
-            if (c > '9' || c < '0') {
+        char c = str.charAt(i);
+        // Check for 'e' or 'E' to handle scientific notation
+        if (c == 'e' || c == 'E') {
+            // If 'e' or 'E' is found, attempt to parse the suffix as an integer
+            int suffixStart = i + 1;
+            if (suffixStart >= len) {
+                return -1; // No suffix after 'e' or 'E'
+            }
+            for (int j = suffixStart; j < len; ++j) {
+                char suffixChar = str.charAt(j);
+                if (suffixChar > '9' || suffixChar < '0' || suffixChar == '+' || suffixChar == '-') {
+                    if (!(suffixChar == '+' || suffixChar == '-') || j == len - 1) {
+                        return -1; // Invalid suffix
+                    }
+                } else if (suffixChar == '+' || suffixChar == '-') {
+                    if (j!= suffixStart) {
+                        return -1; // '+' or '-' not at start of suffix
+                    }
+                }
+            }
+            try {
+                // Attempt to parse the entire string as a double and then to int
+                double doubleVal = Double.parseDouble(str);
+                if (doubleVal > Integer.MAX_VALUE || doubleVal < Integer.MIN_VALUE) {
+                    return -1; // Out of int range
+                }
+                return (int) doubleVal;
+            } catch (NumberFormatException e) {
+                return -1; // Failed to parse
+            }
+        } else if (c > '9' || c < '0') {
             return -1;
         }
+        i++; // only increment if we didn't already check the next char for 'e'/'E'
     }
     if (len == 10) {
         long l = NumberInput.parseLong(str);
         if (l > Integer.MAX_VALUE) {
             return -1;
         }
     }
     return NumberInput.parseInt(str);
 }
\ No newline at end of file
