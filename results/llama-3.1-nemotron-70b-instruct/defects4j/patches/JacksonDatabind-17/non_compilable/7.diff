diff --git a/tmp/7ab5da7a-1db3-495c-9cc6-960252813459_buggy.java b/tmp/7ca87903-9d3b-4617-affb-f1990ab1026f_fixed.java
index 01967cc..5576810 100644
--- a/tmp/7ab5da7a-1db3-495c-9cc6-960252813459_buggy.java
+++ b/tmp/7ca87903-9d3b-4617-affb-f1990ab1026f_fixed.java
@@ -1,35 +1,36 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
+        JavaType contentType = t;
+        while (contentType.isArrayType()) {
+            contentType = contentType.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
+        return (contentType.getRawClass() == Object.class)
+                || (!contentType.isConcrete()
                         // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                &&!TreeNode.class.isAssignableFrom(contentType.getRawClass()));
 
     case NON_FINAL:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
+        contentType = t;
+        while (contentType.isArrayType()) {
+            contentType = contentType.getContentType();
         }
         // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+        return!contentType.isFinal() &&!TreeNode.class.isAssignableFrom(contentType.getRawClass());
     default:
     //case JAVA_LANG_OBJECT:
 //        return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
