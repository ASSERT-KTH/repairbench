diff --git a/tmp/97b32147-3ec2-41cd-ae1d-de4e6f5a987e_buggy.java b/tmp/704b2a13-b045-4ee0-b866-06c1ca4c1078_fixed.java
index 01967cc..a889dde 100644
--- a/tmp/97b32147-3ec2-41cd-ae1d-de4e6f5a987e_buggy.java
+++ b/tmp/704b2a13-b045-4ee0-b866-06c1ca4c1078_fixed.java
@@ -1,35 +1,34 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
         return (t.getRawClass() == Object.class)
                 || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                &&!TreeNode.class.isAssignableFrom(t.getRawClass()));
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+        return!t.isFinal() 
+               &&!TreeNode.class.isAssignableFrom(t.getRawClass())
+               &&!(t.isPrimitive() || t.isEnumType());
+
+    case JAVA_LANG_OBJECT:
     default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
