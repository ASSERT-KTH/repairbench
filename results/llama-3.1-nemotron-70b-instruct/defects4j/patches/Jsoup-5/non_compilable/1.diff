diff --git a/tmp/50b96153-d15c-4210-a6cd-de879cb2026c_buggy.java b/tmp/ced79eef-23c2-4d5c-8486-15e222efbfc0_fixed.java
index 39dd8e7..db5a43d 100644
--- a/tmp/50b96153-d15c-4210-a6cd-de879cb2026c_buggy.java
+++ b/tmp/ced79eef-23c2-4d5c-8486-15e222efbfc0_fixed.java
@@ -1,30 +1,42 @@
+/**
+ * Parse an attribute key-value pair.
+ * 
+ * @return the parsed attribute, or null if the key was empty
+ */
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") &&!tq.matchesWhitespace() &&!tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                char c = tq.consume();
+                if (c == '>' || c == '<') { // Stop at tag boundaries to prevent IndexOutOfBoundsException
+                    tq.unconsume(); // Put the character back for further processing
+                    break;
+                }
+                valueAccum.append(c);
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length()!= 0)
         return Attribute.createFromEncoded(key, value);
     else {
+        // Consume the equals sign to prevent infinite loop
+        if (tq.matches("=")) {
             tq.consume();
-                
+        }
         return null;
     }
 }
\ No newline at end of file
