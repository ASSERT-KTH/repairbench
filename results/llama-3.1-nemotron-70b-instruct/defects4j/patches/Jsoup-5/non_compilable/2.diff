diff --git a/tmp/4fd08d50-3b40-4fd9-bba7-77ce11a969f1_buggy.java b/tmp/1ea8b9b7-449c-4b65-8532-eae59dbe3cbe_fixed.java
index 39dd8e7..e8be5f6 100644
--- a/tmp/4fd08d50-3b40-4fd9-bba7-77ce11a969f1_buggy.java
+++ b/tmp/1ea8b9b7-449c-4b65-8532-eae59dbe3cbe_fixed.java
@@ -1,30 +1,41 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") &&!tq.matchesWhitespace() &&!tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                char c = tq.consume();
+                if (tq.matchesAny("<", "/>", ">")) { // stop if we reach the end of the tag
+                    tq.unconsume(c); // put the character back
+                    break;
+                }
+                valueAccum.append(c);
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+    if (key.length()!= 0) {
         return Attribute.createFromEncoded(key, value);
-        else {
+    } else {
+        // Consume the '=' to prevent infinite loop
+        if (tq.matches("=")) {
             tq.consume();
-                
+        }
+        // Consume any whitespace or non-tag characters to recover parsing state
+        while (!tq.matchesAny("<", "/>", ">") &&!tq.isEmpty()) {
+            tq.consume();
+        }
         return null;
     }
 }
\ No newline at end of file
