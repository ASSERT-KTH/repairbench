diff --git a/tmp/bbf09014-67ef-4780-b9bb-4769caf44056_buggy.java b/tmp/5c1c0c1e-27fe-4a1a-a4a3-22e63863abc3_fixed.java
index 39dd8e7..8c099cd 100644
--- a/tmp/bbf09014-67ef-4780-b9bb-4769caf44056_buggy.java
+++ b/tmp/5c1c0c1e-27fe-4a1a-a4a3-22e63863abc3_fixed.java
@@ -1,30 +1,24 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
+        if (tq.matchChomp(SQ) || tq.matchChomp(DQ)) {
+            char quote = tq.consume();
+            value = tq.chompTo(quote);
+            tq.consume(); // consume the closing quote
         } else {
+            // Unquoted value: scan to end tag, space, or end of stream
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+            while (!tq.matchesAny("<", "/>", ">", " ") &&!tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
-                value = valueAccum.toString();
+            value = valueAccum.toString().trim(); // trim trailing whitespace
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
+    return key.length()!= 0? Attribute.createFromEncoded(key, value) : null;
 }
\ No newline at end of file
