diff --git a/tmp/ea7fa276-a980-4b6e-a8ff-e09aa21643c3_buggy.java b/tmp/cfcc79c4-23e9-4bb9-b986-63a52dcd9b06_fixed.java
index 39dd8e7..293b68d 100644
--- a/tmp/ea7fa276-a980-4b6e-a8ff-e09aa21643c3_buggy.java
+++ b/tmp/cfcc79c4-23e9-4bb9-b986-63a52dcd9b06_fixed.java
@@ -1,30 +1,33 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+            // Scan to end tag or space (or end of stream), but also handle attribute key repetition (e.g., "=a")
+            while (!tq.matchesAny("<", "/>", ">") &&!tq.matchesWhitespace() &&!tq.isEmpty() &&!tq.matches("=")) {
                 valueAccum.append(tq.consume());
             }
-                value = valueAccum.toString();
+            value = valueAccum.toString().trim(); // trim to remove trailing whitespace
         }
         tq.consumeWhitespace();
     }
     if (key.length()!= 0)
         return Attribute.createFromEncoded(key, value);
     else {
+        // Consume the equals sign if present, to avoid infinite loop
+        if (tq.matches("=")) {
+            tq.consume();
+        }
         tq.consume();
-                
         return null;
     }
 }
\ No newline at end of file
