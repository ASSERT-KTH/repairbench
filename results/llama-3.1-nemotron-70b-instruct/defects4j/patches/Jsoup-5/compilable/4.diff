diff --git a/tmp/3cb92063-b516-4553-9aaa-bde73eb38cde_buggy.java b/tmp/53fd55da-e43f-4e0d-9d31-2ba139477e8d_fixed.java
index 39dd8e7..a52a4b3 100644
--- a/tmp/3cb92063-b516-4553-9aaa-bde73eb38cde_buggy.java
+++ b/tmp/53fd55da-e43f-4e0d-9d31-2ba139477e8d_fixed.java
@@ -1,30 +1,37 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") &&!tq.matchesWhitespace() &&!tq.isEmpty()) {
-                    valueAccum.append(tq.consume());
+                char c = tq.consume();
+                // Check for attribute value separator (space, tab, newline, etc.)
+                if (Character.isWhitespace(c)) {
+                    break; // stop accumulating value on whitespace
+                }
+                valueAccum.append(c);
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+    if (key.length()!= 0) {
         return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
+    } else {
+        // Consume the invalid attribute key (which is probably just a '=' or whitespace)
+        while (!tq.isEmpty() && (tq.matchesWhitespace() || tq.consume() == '=')) {
+            // empty loop body, just consume
+        }
         return null;
     }
 }
\ No newline at end of file
