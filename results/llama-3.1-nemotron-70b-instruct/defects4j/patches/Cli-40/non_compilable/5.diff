diff --git a/tmp/8c733a1c-5eed-40c1-880d-e8791eb03a35_buggy.java b/tmp/0c802c77-d508-48d5-b5a9-1855dce52015_fixed.java
index a7d0787..0ef0dad 100644
--- a/tmp/8c733a1c-5eed-40c1-880d-e8791eb03a35_buggy.java
+++ b/tmp/0c802c77-d508-48d5-b5a9-1855dce52015_fixed.java
@@ -1,54 +1,87 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+    if (clazz.equals(String.class)) 
     {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+    else if (clazz.equals(Object.class))
     {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+    else if (Number.class.isAssignableFrom(clazz))
     {
-            return (T) createNumber(str);
+        return (T) createNumber(str, clazz);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+    else if (Date.class.isAssignableFrom(clazz))
     {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+    else if (Class.class.isAssignableFrom(clazz))
     {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+    else if (File.class.isAssignableFrom(clazz))
     {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+    else if (clazz.equals(File.class) && str.startsWith("existing:"))
     {
-            return (T) openFile(str);
+        return (T) openFile(str.substring(9));
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+    else if (clazz.isArray() && clazz.getComponentType().equals(File.class))
     {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+    else if (URL.class.isAssignableFrom(clazz))
     {
         return (T) createURL(str);
     }
     else
     {
-            return null;
+        throw new ParseException("Unsupported class type: " + clazz.getName());
+    }
+}
+
+// Additional helper method to accommodate the fix
+private static Number createNumber(final String str, final Class<? extends Number> clazz) throws ParseException
+{
+    if (clazz.equals(Byte.class) || clazz.equals(byte.class)) 
+    {
+        return Byte.parseByte(str);
+    }
+    else if (clazz.equals(Short.class) || clazz.equals(short.class)) 
+    {
+        return Short.parseShort(str);
+    }
+    else if (clazz.equals(Integer.class) || clazz.equals(int.class)) 
+    {
+        return Integer.parseInt(str);
+    }
+    else if (clazz.equals(Long.class) || clazz.equals(long.class)) 
+    {
+        return Long.parseLong(str);
+    }
+    else if (clazz.equals(Float.class) || clazz.equals(float.class)) 
+    {
+        return Float.parseFloat(str);
+    }
+    else if (clazz.equals(Double.class) || clazz.equals(double.class)) 
+    {
+        return Double.parseDouble(str);
+    }
+    else 
+    {
+        throw new ParseException("Unsupported number type: " + clazz.getName());
     }
 }
\ No newline at end of file
