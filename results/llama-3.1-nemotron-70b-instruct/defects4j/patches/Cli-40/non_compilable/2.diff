diff --git a/tmp/4dfca68d-bb03-4a78-b7f6-26125325e7b7_buggy.java b/tmp/3f1b065e-5923-46ba-8e6c-eb91f8768e8c_fixed.java
index a7d0787..7c2fb5a 100644
--- a/tmp/4dfca68d-bb03-4a78-b7f6-26125325e7b7_buggy.java
+++ b/tmp/3f1b065e-5923-46ba-8e6c-eb91f8768e8c_fixed.java
@@ -1,54 +1,83 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+    if (clazz == String.class) 
     {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+    else if (clazz == Object.class) 
     {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+    else if (Number.class.isAssignableFrom(clazz)) 
     {
-            return (T) createNumber(str);
+        return (T) createNumber(str, clazz);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+    else if (Date.class.isAssignableFrom(clazz)) 
     {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+    else if (Class.class.isAssignableFrom(clazz)) 
     {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+    else if (File.class.isAssignableFrom(clazz)) 
     {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
-            return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+    else if ( clazz == File[].class) 
     {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+    else if (URL.class.isAssignableFrom(clazz)) 
     {
         return (T) createURL(str);
     }
     else 
     {
-            return null;
+        throw new ParseException(" unable to create value for class " + clazz.getName());
+    }
+}
+
+// Additional helper method to handle Number creation for different subclasses
+private static <T extends Number> T createNumber(final String str, final Class<T> clazz) throws ParseException
+{
+    if (clazz == Integer.class) 
+    {
+        return clazz.cast(Integer.parseInt(str));
+    }
+    else if (clazz == Long.class) 
+    {
+        return clazz.cast(Long.parseLong(str));
+    }
+    else if (clazz == Double.class) 
+    {
+        return clazz.cast(Double.parseDouble(str));
+    }
+    else if (clazz == Float.class) 
+    {
+        return clazz.cast(Float.parseFloat(str));
+    }
+    else if (clazz == Short.class) 
+    {
+        return clazz.cast(Short.parseShort(str));
+    }
+    else if (clazz == Byte.class) 
+    {
+        return clazz.cast(Byte.parseByte(str));
+    }
+    else 
+    {
+        throw new ParseException(" unable to create Number for class " + clazz.getName());
     }
 }
\ No newline at end of file
