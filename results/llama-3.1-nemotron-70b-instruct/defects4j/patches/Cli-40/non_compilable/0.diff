diff --git a/tmp/ecbfd396-0914-46c3-9279-af350282269d_buggy.java b/tmp/eb809416-cd2b-4213-9f66-07de9f4f2642_fixed.java
index a7d0787..8973127 100644
--- a/tmp/ecbfd396-0914-46c3-9279-af350282269d_buggy.java
+++ b/tmp/eb809416-cd2b-4213-9f66-07de9f4f2642_fixed.java
@@ -1,54 +1,72 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
+    if (String.class.equals(clazz)) // Simplified comparison for String type
     {
         return (T) str;
     }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
+    else if (Object.class.equals(clazz)) 
     {
         return (T) createObject(str);
     }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
+    else if (Number.class.isAssignableFrom(clazz)) // Handles all Number subclasses (e.g., Integer, Double)
     {
-            return (T) createNumber(str);
+        return (T) createNumber(str, clazz);
     }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
+    else if (Date.class.equals(clazz)) 
     {
         return (T) createDate(str);
     }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
+    else if (Class.class.equals(clazz)) 
     {
         return (T) createClass(str);
     }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
+    else if (File.class.equals(clazz)) 
     {
         return (T) createFile(str);
     }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
+    else if (clazz.equals(PatternOptionBuilder.EXISTING_FILE_VALUE)) 
     {
         return (T) openFile(str);
     }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
+    else if (clazz.equals(PatternOptionBuilder.FILES_VALUE)) 
     {
         return (T) createFiles(str);
     }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
+    else if (URL.class.equals(clazz)) 
     {
         return (T) createURL(str);
     }
     else
     {
-            return null;
+        throw new ParseException("Unsupported type: " + clazz.getName());
+    }
+}
+
+// Helper method to create Number instance based on the class type
+private static <T extends Number> T createNumber(String str, Class<T> clazz) throws ParseException
+{
+    if (Integer.class.equals(clazz))
+    {
+        return clazz.cast(Integer.parseInt(str));
+    }
+    else if (Double.class.equals(clazz))
+    {
+        return clazz.cast(Double.parseDouble(str));
+    }
+    // Add more number types as needed (e.g., Float, Long, Short, Byte)
+    else
+    {
+        throw new ParseException("Unsupported Number type: " + clazz.getName());
     }
 }
\ No newline at end of file
