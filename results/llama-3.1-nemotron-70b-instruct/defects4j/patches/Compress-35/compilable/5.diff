diff --git a/tmp/4de29e77-97c0-4b0d-a5ee-74baaa114c8b_buggy.java b/tmp/f7a1bef5-94b8-4754-b7b0-66fd2de6f1b3_fixed.java
index 9d69396..8be9e93 100644
--- a/tmp/4de29e77-97c0-4b0d-a5ee-74baaa114c8b_buggy.java
+++ b/tmp/f7a1bef5-94b8-4754-b7b0-66fd2de6f1b3_fixed.java
@@ -1,46 +1,52 @@
 /**
  * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
  * <blockquote>
  * The checksum is calculated by taking the sum of the unsigned byte values
  * of the header block with the eight checksum bytes taken to be ascii
  * spaces (decimal value 32). It is stored as a six digit octal number with
  * leading zeroes followed by a NUL and then a space. Various
  * implementations do not adhere to this format. For better compatibility,
  * ignore leading and trailing whitespace, and get the first six digits. In
  * addition, some historic tar implementations treated bytes as signed.
  * Implementations typically calculate the checksum both ways, and treat it
  * as good if either the signed or unsigned sum matches the included
  * checksum.
  * </blockquote>
  * <p>
  * The return value of this method should be treated as a best-effort
  * heuristic rather than an absolute and final truth. The checksum
  * verification logic may well evolve over time as more special cases
  * are encountered.
  *
  * @param header tar header
  * @return whether the checksum is reasonably good
  * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
  * @since 1.5
  */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
+            // Fix: handle space and NUL correctly, and parse up to 6 digits
+            if (b == ' ' || b == '\0') {
+                continue;
+            } else if ('0' <= b && b <= '7' && digits < 6) {
                 storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+                digits++;
+            } else {
+                // If non-octal digit is found, assume checksum is invalid
+                return false;
             }
-                b = ' ';
+            b = ' '; // Replace with space for sum calculation
         }
         unsignedSum += 0xff & b;
         signedSum += b;
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+    // Fix: require exactly 6 digits to be parsed for a valid checksum
+    return digits == 6 && (storedSum == unsignedSum || storedSum == signedSum);
 }
\ No newline at end of file
