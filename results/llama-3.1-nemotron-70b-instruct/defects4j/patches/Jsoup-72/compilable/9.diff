diff --git a/tmp/b4bc30cf-885c-4dd8-8b34-31b3d222c811_buggy.java b/tmp/e9cac269-04d0-4f04-af76-1a9097eb94a1_fixed.java
index d666a67..f27289a 100644
--- a/tmp/b4bc30cf-885c-4dd8-8b34-31b3d222c811_buggy.java
+++ b/tmp/e9cac269-04d0-4f04-af76-1a9097eb94a1_fixed.java
@@ -1,36 +1,42 @@
 /**
  * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
  * <p />
  * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
  * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
  * some more duplicates.
  */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+    // **Added null check and bounds validation**
+    if (charBuf == null || start < 0 || count < 0 || start + count > charBuf.length) {
+        throw new StringIndexOutOfBoundsException("charBuf bounds exceeded");
+    }
+
     // limit (no cache):
     if (count > maxStringCacheLen)
         return new String(charBuf, start, count);
 
     // calculate hash:
     int hash = 0;
     int offset = start;
     for (int i = 0; i < count; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
-        // get from cache
-        final int index = hash & stringCache.length - 1;
+    // **Ensure index is within bounds to prevent ArrayIndexOutOfBoundsException**
+    final int index = Math.abs(hash) % stringCache.length;
+
     String cached = stringCache[index];
 
     if (cached == null) { // miss, add
         cached = new String(charBuf, start, count);
         stringCache[index] = cached;
     } else { // hashcode hit, check equality
         if (rangeEquals(charBuf, start, count, cached)) { // hit
             return cached;
         } else { // hashcode conflict
             cached = new String(charBuf, start, count);
             stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
         }
     }
     return cached;
 }
\ No newline at end of file
