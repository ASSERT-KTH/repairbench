diff --git a/tmp/bcb742b5-5f31-4748-b548-d50b2076f6af_buggy.java b/tmp/97886cdf-b2c2-4710-abf1-7b5788ceb2fa_fixed.java
index c51c8b1..456ef79 100644
--- a/tmp/bcb742b5-5f31-4748-b548-d50b2076f6af_buggy.java
+++ b/tmp/97886cdf-b2c2-4710-abf1-7b5788ceb2fa_fixed.java
@@ -1,31 +1,31 @@
+/**
+ * Records the assignment of a name, handling special cases for FOR loops and 
+ * assignment-as-caller expressions.
+ * 
+ * @param t         NodeTraversal instance for context
+ * @param n         Node representing the assignment
+ * @param recordNode Node to record the dependency scope against
+ */
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
+      // In a FOR loop, handle init, condition, or iteration parts separately
       if (parent.getFirstChild().getNext()!= n) {
         recordDepScope(recordNode, ns);
       } else {
-            recordDepScope(nameNode, ns);
+        // Fix: Always record against the recordNode, not the nameNode
+        recordDepScope(recordNode, ns);
       }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // Fix: Check if the assignment is the caller expression before recording
+      if (n.getParent().isCall() && n.getParent().getFirstChild() == n) {
+        // Don't associate the rhs with the lhs when the assignment is the caller
+      } else {
         recordDepScope(recordNode, ns);
       }
     }
   }
+}
\ No newline at end of file
