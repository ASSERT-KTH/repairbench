diff --git a/tmp/17afcbe3-bfee-4424-a228-93a98069c132_buggy.java b/tmp/abf6131d-272f-4f8b-aa30-3348d93c2f8b_fixed.java
index c51c8b1..aa46b68 100644
--- a/tmp/17afcbe3-bfee-4424-a228-93a98069c132_buggy.java
+++ b/tmp/abf6131d-272f-4f8b-aa30-3348d93c2f8b_fixed.java
@@ -1,31 +1,19 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init, 
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
+      // condition or iteration part of a FOR loop.
+      recordDepScope(recordNode, ns); // Fixed: always record dependency scope with recordNode
     } else {
-            recordDepScope(nameNode, ns);
-          }
+      // Check if the assignment is the caller expression or nested within it
+      if (NodeUtil.isAssignmentWithCall(n)) {
+        recordDepScope(nameNode, ns); // Fixed: associate with nameNode when assignment is the caller
       } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
         recordDepScope(recordNode, ns);
       }
     }
   }
+}
\ No newline at end of file
