diff --git a/tmp/3b245578-4309-4b46-891c-e5211e1db824_buggy.java b/tmp/a0837ef4-0065-4625-b000-bea7896f984f_fixed.java
index c51c8b1..6137c89 100644
--- a/tmp/3b245578-4309-4b46-891c-e5211e1db824_buggy.java
+++ b/tmp/a0837ef4-0065-4625-b000-bea7896f984f_fixed.java
@@ -1,31 +1,25 @@
+/**
+ * Records the assignment between two nodes, handling FOR loops and assignment as caller expressions.
+ *
+ * @param t         NodeTraversal instance
+ * @param n         Assignment Node
+ * @param recordNode Node to record dependency scope for
+ */
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
+      // In a FOR loop, associate the dependency scope with the name node if the assignment is the init part,
+      // otherwise associate it with the record node.
+      recordDepScope(parent.getFirstChild().getNext() == n? nameNode : recordNode, ns);
+    } else if (NodeUtil.isAssignment(n) && NodeUtil.isCall(n.getLastChild())) {
+      // If the assignment is immediately followed by a call, do not associate the dependency scope with the record node.
+      // Instead, associate it with the name node to avoid incorrect reference edges.
       recordDepScope(nameNode, ns);
-          }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
