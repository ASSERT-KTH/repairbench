diff --git a/tmp/c6c6dabc-787a-45f7-97b6-81fcab0f7179_buggy.java b/tmp/5d61ffd1-5c8d-4c39-b1f5-000ecf8eb3f5_fixed.java
index c51c8b1..d81ee99 100644
--- a/tmp/c6c6dabc-787a-45f7-97b6-81fcab0f7179_buggy.java
+++ b/tmp/5d61ffd1-5c8d-4c39-b1f5-000ecf8eb3f5_fixed.java
@@ -1,31 +1,32 @@
+/**
+ * Records the assignment of a node to a name, handling dependency scopes.
+ * 
+ * @param t        NodeTraversal instance
+ * @param n        Node representing the assignment
+ * @param recordNode Node to record the dependency scope for
+ */
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
+      // Patch for assignments in FOR loop's init, condition, or iteration part
+      if (parent.getFirstChild().getNext() == n) {
+        // Assignment is the first child (init part), use nameNode for dep scope
         recordDepScope(nameNode, ns);
+      } else {
+        // Assignment is in condition or iteration part, use recordNode for dep scope
+        recordDepScope(recordNode, ns);
       }
+    } else if (n.isAssign() && n.getFirstChild().isName() && 
+               NodeUtil.isFunctionLiteral(n.getSecondChild())) {
+      // Handle assignment with a function literal on the RHS, 
+      // where the assignment is the caller expression (e.g., "(fun = function(){ x; })()")
+      recordDepScope(nameNode, ns); // Associate dep scope with LHS (nameNode)
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // Default case: record dependency scope for the recordNode
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
