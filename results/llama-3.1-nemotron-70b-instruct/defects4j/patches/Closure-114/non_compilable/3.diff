diff --git a/tmp/e1f05b3a-4259-47cb-ae5e-d5917dce6da8_buggy.java b/tmp/e9561b58-7084-43a6-a533-401e0589028d_fixed.java
index c51c8b1..91dee8d 100644
--- a/tmp/e1f05b3a-4259-47cb-ae5e-d5917dce6da8_buggy.java
+++ b/tmp/e9561b58-7084-43a6-a533-401e0589028d_fixed.java
@@ -1,31 +1,26 @@
+/**
+ * Records the assignment of a name to a scope, handling special cases for FOR loops and assignment-as-caller.
+ * 
+ * @param t         NodeTraversal instance
+ * @param n         Assignment Node
+ * @param recordNode Node to record the assignment for
+ */
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
+      // In a FOR loop, only the last child (the iteration part) should claim the loop as dependency scope
+      if (parent.getLastChild() == n) {
         recordDepScope(recordNode, ns);
-          } else {
+      }
+    } else if (NodeUtil.isAssignmentAsCaller(n)) {
+      // If the assignment is the caller expression, associate the NameInformation with the lhs (nameNode)
       recordDepScope(nameNode, ns);
-          }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // General case: associate the NameInformation with the assignment's context (recordNode)
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
