diff --git a/tmp/8a126368-54ea-4f39-9dc5-73554c504af4_buggy.java b/tmp/2914647f-1b58-406b-a2a5-d0e24186ceeb_fixed.java
index c51c8b1..96b2e21 100644
--- a/tmp/8a126368-54ea-4f39-9dc5-73554c504af4_buggy.java
+++ b/tmp/2914647f-1b58-406b-a2a5-d0e24186ceeb_fixed.java
@@ -1,31 +1,25 @@
+/**
+ * Records the assignment of a name in the given traversal.
+ * 
+ * @param t          the current traversal
+ * @param n          the assignment node
+ * @param recordNode the node to record the assignment for
+ */
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns!= null) {
     if (parent.isFor() &&!NodeUtil.isForIn(parent)) {
-          // Patch for assignments that appear in the init,
-          // condition or iteration part of a FOR loop.  Without
-          // this change, all 3 of those parts try to claim the for
-          // loop as their dependency scope.  The last assignment in
-          // those three fields wins, which can result in incorrect
-          // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
-          if (parent.getFirstChild().getNext() != n) {
-            recordDepScope(recordNode, ns);
-          } else {
+      // For loop init/condition/iteration parts: associate with the RHS (recordNode) 
+      // only if the assignment is not the first child (i.e., not the init part).
+      recordDepScope(parent.getFirstChild().getNext()!= n? recordNode : nameNode, ns);
+    } else if (NodeUtil.isAssignmentParentWithCall(n)) {
+      // If the assignment is part of a caller expression, associate with the LHS (nameNode).
       recordDepScope(nameNode, ns);
-          }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
+      // General case: associate the RHS (recordNode) as the caller.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
