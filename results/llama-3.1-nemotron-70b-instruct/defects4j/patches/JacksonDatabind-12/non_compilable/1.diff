diff --git a/tmp/6090c452-3fec-49a5-becf-5443cd1a4e2a_buggy.java b/tmp/2c1452ee-cb4c-4a7a-94fb-d0e8694d2365_fixed.java
index 845704e..a0bce20 100644
--- a/tmp/6090c452-3fec-49a5-becf-5443cd1a4e2a_buggy.java
+++ b/tmp/2c1452ee-cb4c-4a7a-94fb-d0e8694d2365_fixed.java
@@ -1,21 +1,22 @@
 /**
  * Turns out that these are expensive enough to create so that caching
  * does make sense.
  *<p>
  * IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is
-     * a value type deserializer; this caused an issue with 2.4.4 of
-     * JAXB Annotations (failing a test).
+ * a value type deserializer or a key type deserializer; this caused an issue 
+ * with 2.4.4 of JAXB Annotations (failing a test).
  * It is also possible that some other settings could make deserializers
  * un-cacheable; but on the other hand, caching can make a big positive
  * difference with performance... so it's a hard choice.
  * 
  * @since 2.4.4
  */
 @Override
 public boolean isCachable() {
-        /* As per [databind#735], existence of value or key deserializer (only passed
-         * if annotated to use non-standard one) should also prevent caching.
+    /* As per [databind#735], existence of value, key or type deserializer 
+     * (only passed if annotated to use non-standard one) should also prevent caching.
      */
     return (_valueTypeDeserializer == null)
+            && (_keyTypeDeserializer == null) // Added check for key deserializer
             && (_ignorableProperties == null);
 }
\ No newline at end of file
