diff --git a/tmp/ce9a08b9-86f8-4efd-9e42-796dcddcfcd6_buggy.java b/tmp/46303756-2368-4b2c-8bc5-3741fc6406d4_fixed.java
index 5f96616..48a03ac 100644
--- a/tmp/ce9a08b9-86f8-4efd-9e42-796dcddcfcd6_buggy.java
+++ b/tmp/46303756-2368-4b2c-8bc5-3741fc6406d4_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint object is a union type containing record types.
+    if (constraint.isUnionType()) {
+      for (JSType unionMember : constraint.getUnionMembers()) {
+        if (unionMember.isRecordType()) {
+          matchRecordTypeConstraint(unionMember.toObjectType());
+        } else if (unionMember.isObjectType() && unionMember.getPropertyType("prop").isUnknownType()) {
+          // Handle the case where the union member is an object type with an unknown property type.
+          // In this case, we don't have a specific property to match, so we just skip it.
+          continue;
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // Handle the case where the constraint object is a single record type.
       matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
