diff --git a/tmp/d01c50c0-013d-4d9d-a355-61bb4ab90726_buggy.java b/tmp/71819d32-c915-4b99-8418-0c6150197482_fixed.java
index 5f96616..960c749 100644
--- a/tmp/d01c50c0-013d-4d9d-a355-61bb4ab90726_buggy.java
+++ b/tmp/71819d32-c915-4b99-8418-0c6150197482_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // Handle the case where the constraint object is a union type containing record types.
+  if (constraint.isUnionType()) {
+    for (JSType unionMember : constraint.toMaybeUnionType().get Constituents()) {
+      if (unionMember.isRecordType() || unionMember.isObjectType()) {
+        matchRecordTypeConstraint(unionMember.toObjectType());
+      }
+    }
+  } 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  else if (constraint.isRecordType() || constraint.isObjectType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
