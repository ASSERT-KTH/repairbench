diff --git a/tmp/b7cb707e-3bb7-441e-a334-9d069300cf5d_buggy.java b/tmp/3f67a708-3dec-4690-b384-1d4a9f509daf_fixed.java
index 5f96616..afe518f 100644
--- a/tmp/b7cb707e-3bb7-441e-a334-9d069300cf5d_buggy.java
+++ b/tmp/3f67a708-3dec-4690-b384-1d4a9f509daf_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
+    // Handle the case where the constraint object is a union type containing a record type.
+    if (constraint.isUnionType()) {
+      for (JSType unionMember : constraint.getUnionMembers()) {
+        if (unionMember.isRecordType()) {
+          matchRecordTypeConstraint(unionMember.toObjectType());
+        }
+      }
+    } 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    else if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
