diff --git a/tmp/ad75c6d7-85b8-4e99-b759-3f2e776498e7_buggy.java b/tmp/b7add57f-87ad-49bf-acbb-e4eeca5e7929_fixed.java
index 5f96616..596f179 100644
--- a/tmp/ad75c6d7-85b8-4e99-b759-3f2e776498e7_buggy.java
+++ b/tmp/b7add57f-87ad-49bf-acbb-e4eeca5e7929_fixed.java
@@ -1,20 +1,20 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // Handle the case where the constraint object is a union type containing record types.
+    if (constraint.isUnionType()) {
+        for (JSType unionMember : constraint.getUnionMembers()) {
+            if (unionMember.isRecordType() || unionMember.isObjectType()) {
+                matchRecordTypeConstraint(unionMember.toObjectType());
+            }
+        }
+    } 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    else if (constraint.isRecordType() || constraint.isObjectType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
