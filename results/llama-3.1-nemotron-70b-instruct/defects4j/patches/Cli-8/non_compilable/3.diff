diff --git a/tmp/fa2e1a5d-1196-4e55-9220-9f88112c4a88_buggy.java b/tmp/f03bfd35-0dd4-4ceb-834e-8e5d60dbbe16_fixed.java
index 8e93a5e..398613b 100644
--- a/tmp/fa2e1a5d-1196-4e55-9220-9f88112c4a88_buggy.java
+++ b/tmp/f03bfd35-0dd4-4ceb-834e-8e5d60dbbe16_fixed.java
@@ -1,43 +1,45 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    // characters, but only if nextLineTabStop is greater than 0
+    final String padding = nextLineTabStop > 0? createPadding(nextLineTabStop) : "";
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        // Remove leading whitespace before adding padding
+        text = padding + text.substring(pos).trimLeading();
+
+        pos = findWrapPos(text, width - padding.length(), padding.length());
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
