diff --git a/tmp/6741842e-9b34-4d69-8c51-3d2ed47fb34e_buggy.java b/tmp/ee237bb0-8fcc-4c85-a2af-b222bec58a22_fixed.java
index 8e93a5e..b894d0f 100644
--- a/tmp/6741842e-9b34-4d69-8c51-3d2ed47fb34e_buggy.java
+++ b/tmp/ee237bb0-8fcc-4c85-a2af-b222bec58a22_fixed.java
@@ -1,43 +1,59 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Split multi-line text into individual lines for proper rendering
+    String[] lines = text.split("\\r?\\n");
+
+    for (String line : lines) {
+        int pos = findWrapPos(line, width, 0);
 
         if (pos == -1)
         {
-            sb.append(rtrim(text));
-
-            return sb;
+            sb.append(rtrim(line)).append(defaultNewLine);
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        else
+        {
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
 
             // all following lines must be padded with nextLineTabStop space 
             // characters
             final String padding = createPadding(nextLineTabStop);
 
             while (true)
             {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+                String remainingText = line.substring(pos).trim();
+                if (remainingText.isEmpty()) {
+                    break; // prevent infinite loop on empty remaining text
+                }
+                pos = findWrapPos(remainingText, width, nextLineTabStop);
 
                 if (pos == -1)
                 {
-                sb.append(text);
+                    sb.append(padding).append(remainingText).append(defaultNewLine);
+                    break;
+                }
+
+                sb.append(padding).append(rtrim(remainingText.substring(0, pos))).append(defaultNewLine);
+                line = remainingText.substring(pos).trim();
+            }
+        }
+    }
+
+    // Remove the last appended newline if not already done
+    if (sb.length() > 0 && sb.charAt(sb.length() - 1) == defaultNewLine.charAt(0)) {
+        sb.setLength(sb.length() - defaultNewLine.length());
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
