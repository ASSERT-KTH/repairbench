diff --git a/tmp/7e03b290-d8d7-4bb1-9a00-1ae969ef44b5_buggy.java b/tmp/09357086-9ad8-467c-8a4b-ddf699a84187_fixed.java
index d6662c7..31dcf4f 100644
--- a/tmp/7e03b290-d8d7-4bb1-9a00-1ae969ef44b5_buggy.java
+++ b/tmp/09357086-9ad8-467c-8a4b-ddf699a84187_fixed.java
@@ -1,23 +1,33 @@
 /**
  * Parse an entry name from a buffer.
  * Parsing stops when a NUL is found
  * or the buffer length is reached.
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse.
  * @return The entry name.
  */
 public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
+    StringBuilder result = new StringBuilder(length);
     int          end = offset + length;
+    boolean      nulReached = false;
 
     for (int i = offset; i < end; ++i) {
         if (buffer[i] == 0) {
+            nulReached = true;
             break;
         }
         result.append((char) buffer[i]);
     }
 
+    // If a NUL was encountered, replace it and any subsequent characters with their Unicode representation
+    if (nulReached) {
+        byte[] remaining = new byte[length - (end - offset)];
+        System.arraycopy(buffer, end, remaining, 0, remaining.length);
+        String remainingStr = new String(remaining, Charset.forName("ISO-8859-1"));
+        result.append(remainingStr.replace("\u0000", "\\u0000"));
+    }
+
     return result.toString();
 }
\ No newline at end of file
