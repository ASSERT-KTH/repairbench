diff --git a/tmp/fae62a9b-8d75-4726-a91b-864ca97948c8_buggy.java b/tmp/0e70ffae-0282-4954-8d8e-977f5679ae74_fixed.java
index d357c7e..dc2a3bc 100644
--- a/tmp/fae62a9b-8d75-4726-a91b-864ca97948c8_buggy.java
+++ b/tmp/0e70ffae-0282-4954-8d8e-977f5679ae74_fixed.java
@@ -1,16 +1,25 @@
+/**
+ * Returns the current InputStream, decompressing and discarding any preceding 
+ * streams in solid compression mode if necessary.
+ * 
+ * @return the current InputStream
+ * @throws IOException if an I/O error occurs
+ */
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+    if (deferredBlockStreams.isEmpty() && getCurrentEntry() == null) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
     
     while (deferredBlockStreams.size() > 1) {
         // In solid compression mode we need to decompress all leading folder'
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
 
-        return deferredBlockStreams.get(0);
+    // If the list is now empty (which can happen for zero-sized entries), 
+    // do not attempt to return an element from the empty list
+    return deferredBlockStreams.isEmpty()? null : deferredBlockStreams.get(0);
 }
\ No newline at end of file
