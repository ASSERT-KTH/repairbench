diff --git a/tmp/42da31ce-ca6e-4f6b-b051-d8500ce72010_buggy.java b/tmp/763d300b-4181-4550-8778-172f73724d53_fixed.java
index d357c7e..b973a42 100644
--- a/tmp/42da31ce-ca6e-4f6b-b051-d8500ce72010_buggy.java
+++ b/tmp/763d300b-4181-4550-8778-172f73724d53_fixed.java
@@ -1,16 +1,30 @@
+/**
+ * Returns the current input stream for the 7z entry.
+ * 
+ * @return the current input stream
+ * @throws IOException if an I/O error occurs
+ * @throws IllegalStateException if no entry has been selected via getNextEntry()
+ */
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
-            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
-        }
-        
+    if (deferredBlockStreams.isEmpty() || deferredBlockStreams.size() == 1 && getNextEntryIfNeeded()) {
+        // If there's only one stream and it's exhausted, advance to the next entry if available
         while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
+            // In solid compression mode we need to decompress all leading folder's
             // streams to get access to an entry. We defer this until really needed
             // so that entire blocks can be skipped without wasting time for decompression.
             final InputStream stream = deferredBlockStreams.remove(0);
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
+        if (deferredBlockStreams.isEmpty()) {
+            throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+        }
+    }
     
     return deferredBlockStreams.get(0);
 }
+
+// Assuming this method is already defined elsewhere in the class
+// private boolean getNextEntryIfNeeded() throws IOException;
+// This method should attempt to move to the next entry if the current one is exhausted
+// and return true if a new entry is available, false otherwise
\ No newline at end of file
