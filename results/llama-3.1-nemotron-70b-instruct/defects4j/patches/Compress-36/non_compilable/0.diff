diff --git a/tmp/32498e76-f4e8-411b-8f35-87addec0888b_buggy.java b/tmp/87eb85c1-bd30-4c76-9e43-90e105892644_fixed.java
index d357c7e..e0277b6 100644
--- a/tmp/32498e76-f4e8-411b-8f35-87addec0888b_buggy.java
+++ b/tmp/87eb85c1-bd30-4c76-9e43-90e105892644_fixed.java
@@ -1,16 +1,31 @@
+/**
+ * Returns the current input stream for the 7z entry. 
+ * If in solid compression mode, decompresses and discards leading folder streams.
+ * 
+ * @return the current input stream
+ * @throws IOException if an I/O error occurs
+ * @throws IllegalStateException if no entry has been selected (call getNextEntry() first)
+ */
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+    if (deferredBlockStreams.isEmpty() && currentEntry == null) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
     
+    // If we've already processed the deferred streams for the current entry, 
+    // return the stream associated with the current entry (if any)
+    if (deferredBlockStreams.isEmpty() && currentEntryStream!= null) {
+        return currentEntryStream;
+    }
+    
+    // In solid compression mode, decompress all leading folder streams 
+    // to get access to an entry
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
-            // streams to get access to an entry. We defer this until really needed
-            // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
 
-        return deferredBlockStreams.get(0);
+    // If there's only one stream left, return it. 
+    // Otherwise, return the stream associated with the current entry (if any)
+    return deferredBlockStreams.isEmpty()? currentEntryStream : deferredBlockStreams.get(0);
 }
\ No newline at end of file
