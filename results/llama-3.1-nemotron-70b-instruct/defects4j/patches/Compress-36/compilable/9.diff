diff --git a/tmp/a31ca6d0-d506-42e2-a9e0-0636dbe57cf1_buggy.java b/tmp/708d802f-be81-4c68-a4a9-81c8970ae9a7_fixed.java
index d357c7e..3a2c449 100644
--- a/tmp/a31ca6d0-d506-42e2-a9e0-0636dbe57cf1_buggy.java
+++ b/tmp/708d802f-be81-4c68-a4a9-81c8970ae9a7_fixed.java
@@ -1,16 +1,25 @@
+/**
+ * Returns the current stream for the entry returned by the last call to {@link #getNextEntry()}.
+ * 
+ * @return the current stream
+ * @throws IOException if an I/O error occurs
+ * @throws IllegalStateException if {@link #getNextEntry()} hasn't been called before
+ */
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+    if (deferredBlockStreams.isEmpty() || deferredBlockStreams.size() == 1 && deferredBlockStreams.get(0) == null) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
     
     while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
+        // In solid compression mode we need to decompress all leading folder's
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
+        if (stream!= null) {
             IOUtils.skip(stream, Long.MAX_VALUE);
             stream.close();
         }
+    }
 
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
