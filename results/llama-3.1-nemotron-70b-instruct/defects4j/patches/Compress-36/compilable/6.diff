diff --git a/tmp/0a0bee33-8537-4071-b103-9c2f5960add4_buggy.java b/tmp/e988d83a-e232-40da-b2e4-cbd8960ed811_fixed.java
index d357c7e..f7ea55c 100644
--- a/tmp/0a0bee33-8537-4071-b103-9c2f5960add4_buggy.java
+++ b/tmp/e988d83a-e232-40da-b2e4-cbd8960ed811_fixed.java
@@ -1,16 +1,24 @@
+/**
+ * Returns the current input stream for the 7z entry.
+ * If in solid compression mode, decompresses and discards leading folder streams.
+ * 
+ * @return the current input stream
+ * @throws IOException if an I/O error occurs
+ */
 private InputStream getCurrentStream() throws IOException {
-        if (deferredBlockStreams.isEmpty()) {
+    if (deferredBlockStreams.isEmpty() || deferredBlockStreams.get(0) == null) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
     
-        while (deferredBlockStreams.size() > 1) {
-            // In solid compression mode we need to decompress all leading folder'
+    // Only process deferred streams if there's more than one and the first one is not the current entry's stream
+    while (deferredBlockStreams.size() > 1 && deferredBlockStreams.get(1)!= null) {
+        // In solid compression mode we need to decompress all leading folder's
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
 
     return deferredBlockStreams.get(0);
 }
\ No newline at end of file
