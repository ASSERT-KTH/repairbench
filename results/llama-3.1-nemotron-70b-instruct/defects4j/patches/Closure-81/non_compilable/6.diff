diff --git a/tmp/9225f0a4-973e-4235-b5d0-cd15f13f3b1d_buggy.java b/tmp/7720bc35-a0ff-4389-b745-770af9d32098_fixed.java
index 6e05e4b..1b10d2a 100644
--- a/tmp/9225f0a4-973e-4235-b5d0-cd15f13f3b1d_buggy.java
+++ b/tmp/7720bc35-a0ff-4389-b745-770af9d32098_fixed.java
@@ -1,51 +1,63 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
   Boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
-      Node node = newNode(Token.FUNCTION);
+  
+  // Check if the function is a statement or an expression
+  Boolean isFunctionStatement = functionNode.getParent() instanceof ScriptNode 
+      || functionNode.getParent() instanceof Block;
+
+  Node node;
+  if (isFunctionStatement && isUnnamedFunction) {
+    // Unnamed function statements are not allowed, throw an error
+    throw new ParseException(functionNode, "unnamed function statement");
+  } else {
+    node = newNode(isFunctionStatement? Token.FUNCTION : Token.FUNCTION_EXPR);
+  }
+
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
     // TODO(bowdidge) Mark line number of paren correctly.
     // Same problem as below - the left paren might not be on the
     // same line as the function keyword.
     int lpColumn = functionNode.getAbsolutePosition() +
         functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
   // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName!= null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
   int lparenCharno = functionNode.getLp() +
       functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
