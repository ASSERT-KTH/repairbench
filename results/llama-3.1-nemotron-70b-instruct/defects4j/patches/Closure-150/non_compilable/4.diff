diff --git a/tmp/3fdaa956-bbcc-49f1-82e4-df394d86f160_buggy.java b/tmp/2eaa3030-96ce-41e1-9441-c9e0e8bcf9f0_fixed.java
index 800e6e1..b21a254 100644
--- a/tmp/3fdaa956-bbcc-49f1-82e4-df394d86f160_buggy.java
+++ b/tmp/2eaa3030-96ce-41e1-9441-c9e0e8bcf9f0_fixed.java
@@ -1,32 +1,44 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        // Fix: handle namespaced function stubs
+        if (parent.getParent()!= null && parent.getParent().getType() == Token.OBJECT_PATTERN) {
+          defineNamespacedFunction(n, parent);
+        }
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.OBJECT_PATTERN:
+      // Fix: handle collected function stubs
+      for (Node child = n.getFirstChild(); child!= null; child = child.getNext()) {
+        if (child.getType() == Token.FUNCTION) {
+          defineCollectedFunction(child, n);
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
