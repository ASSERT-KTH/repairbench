diff --git a/tmp/0035a486-87d3-4a8f-bba2-b2019a7e5dcf_buggy.java b/tmp/0c11e87a-e650-46b5-aed1-282e30a3229b_fixed.java
index 800e6e1..cdae817 100644
--- a/tmp/0035a486-87d3-4a8f-bba2-b2019a7e5dcf_buggy.java
+++ b/tmp/0c11e87a-e650-46b5-aed1-282e30a3229b_fixed.java
@@ -1,32 +1,45 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override 
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        // FIX: Handle namespaced function declarations
+        if (parent.getParent()!= null && parent.getParent().getType() == Token.DOT) {
+          defineDeclaredFunction(n, parent.getParent());
+        } else {
           return;
         }
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.DOT:
+      // FIX: Handle collected function stubs with 'this' context
+      if (n.getFirstChild().getType() == Token.THIS) {
+        Node----
+
+    Node functionDef = n.getNext();
+        while (functionDef!= null && functionDef.getType()!= Token.FUNCTION) {
+          functionDef = functionDef.getNext();
+        }
+        if (functionDef!= null) {
+          defineDeclaredFunction(functionDef, n);
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
