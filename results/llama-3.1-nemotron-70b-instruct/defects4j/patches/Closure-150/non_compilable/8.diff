diff --git a/tmp/1a1948d0-367e-4ed3-a00b-f1e2381f255a_buggy.java b/tmp/99859b2f-1481-467c-a681-c8d998d6718d_fixed.java
index 800e6e1..94b3944 100644
--- a/tmp/1a1948d0-367e-4ed3-a00b-f1e2381f255a_buggy.java
+++ b/tmp/99859b2f-1481-467c-a681-c8d998d6718d_fixed.java
@@ -1,32 +1,52 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
+        // Fix: Handle namespaced function stubs by defining the function
+        // in the parent's type, if it's an object.
+        if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.DOT) {
+          Node grandParent = parent.getParent();
+          JSType grandParentType = scope.getTypeFromNode(grandParent);
+          if (grandParentType.isObject() &&!((ObjectType) grandParentType).hasProperty(parent.getString())) {
+            defineDeclaredFunction(n, grandParent);
+          }
+        }
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.DOT:
+      // Fix: Handle collected function stubs by propagating the type
+      // from the object to the property.
+      if (n.getFirstChild().getType() == Token.NAME && n.getParent().getType() == Token.VAR) {
+        Node child = n.getFirstChild();
+        JSType objectType = scope.getTypeFromNode(n);
+        if (objectType.isObject() && ((ObjectType) objectType).hasProperty(child.getString())) {
+          scope.addVar(child.getString(), ((ObjectType) objectType).getPropertyType(child.getString()));
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
