diff --git a/tmp/b317c807-123d-4541-a7ab-347ebdecb2f7_buggy.java b/tmp/87fd9a5e-690f-4f58-8cc7-88062f6bd333_fixed.java
index 800e6e1..b7bdf42 100644
--- a/tmp/b317c807-123d-4541-a7ab-347ebdecb2f7_buggy.java
+++ b/tmp/87fd9a5e-690f-4f58-8cc7-88062f6bd333_fixed.java
@@ -1,32 +1,40 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+      if (parent.getType() == Token.NAME || parent.getType() == Token.GETPROP) {
+        // handle namespaced functions (e.g., goog.foo) and property functions (e.g., x.foo)
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    case Token.GETPROP: // added to handle property functions (e.g., x.foo)
+      if (n.getFirstChild().getType() == Token.NAME) {
+        Node grandParent = parent.getParent();
+        if (grandParent!= null && grandParent.getType() == Token.FUNCTION) {
+          defineDeclaredFunction(grandParent, n);
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
