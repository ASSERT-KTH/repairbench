diff --git a/tmp/b1192338-1ca9-4bff-a6d2-d778342863cf_buggy.java b/tmp/6cab1b34-0513-4330-957d-0b2045f5402b_fixed.java
index be2af16..dc579f5 100644
--- a/tmp/b1192338-1ca9-4bff-a6d2-d778342863cf_buggy.java
+++ b/tmp/6cab1b34-0513-4330-957d-0b2045f5402b_fixed.java
@@ -1,29 +1,46 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
+    // Check if date is in Julian leap year range before determining chronology
+    if (isJulianLeapYear(year, monthOfYear, dayOfMonth)) {
+        long instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            // Okay, it's in the illegal cutover gap.
+            throw new IllegalArgumentException("Specified date does not exist");
+        }
+        return instant;
+    }
+
     // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    long instant = iGregorianChronology.getDateTimeMillis
         (year, monthOfYear, dayOfMonth,
          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        // Maybe it's Julian (non-leap year range).
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
+
+// Helper method to check if date falls in a Julian leap year range
+private boolean isJulianLeapYear(int year, int monthOfYear, int dayOfMonth) {
+    return (monthOfYear == 2 && dayOfMonth == 29 && 
+            (year % 4 == 0 && (year < 1500 || (year % 100!= 0 || year % 400 == 0))));
+}
\ No newline at end of file
