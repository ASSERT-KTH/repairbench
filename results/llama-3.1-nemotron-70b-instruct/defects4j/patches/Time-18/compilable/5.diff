diff --git a/tmp/feefb9f2-484b-4150-a4b8-6369281e05b7_buggy.java b/tmp/f7b7d95e-10cf-40b9-971e-78e430bccc72_fixed.java
index be2af16..b4ce656 100644
--- a/tmp/feefb9f2-484b-4150-a4b8-6369281e05b7_buggy.java
+++ b/tmp/f7b7d95e-10cf-40b9-971e-78e430bccc72_fixed.java
@@ -1,29 +1,28 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    // Check if the date is in the Julian leap year range first to handle cutover gap correctly
+    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth <= 4)))) {
+        long instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
-        }
         return instant;
+    } else {
+        // Assume date is Gregorian.
+        return iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
 }
\ No newline at end of file
