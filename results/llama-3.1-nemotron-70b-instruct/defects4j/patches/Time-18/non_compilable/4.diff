diff --git a/tmp/7a69ec6d-c1cc-43ae-a373-1510dfcce67f_buggy.java b/tmp/f229ea0a-32fe-44d5-a9a1-aba92a7a1912_fixed.java
index be2af16..455cdda 100644
--- a/tmp/7a69ec6d-c1cc-43ae-a373-1510dfcce67f_buggy.java
+++ b/tmp/f229ea0a-32fe-44d5-a9a1-aba92a7a1912_fixed.java
@@ -1,29 +1,46 @@
+/**
+ * Returns the milliseconds from the Java epoch of 1970-01-01T00:00:00Z 
+ * for the specified date and time in this chronology, using the proleptic 
+ * Gregorian rules if necessary.
+ * 
+ * @param year  the year
+ * @param monthOfYear  the month (1-12)
+ * @param dayOfMonth  the day (1-31)
+ * @param hourOfDay  the hour (0-23)
+ * @param minuteOfHour  the minute (0-59)
+ * @param secondOfMinute  the second (0-59)
+ * @param millisOfSecond  the millisecond (0-999)
+ * @return the milliseconds from 1970-01-01T00:00:00Z
+ * @throws IllegalArgumentException if the date is invalid (e.g. day of month is 30 in February)
+ */
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    // Check if date is valid in both calendars before determining the chronology
+    if (iJulianChronology.isValid(year, monthOfYear, dayOfMonth)) {
+        long instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
-        }
             return instant;
         }
+    }
+
+    // Assume date is Gregorian if valid, or if not a valid Julian date
+    if (iGregorianChronology.isValid(year, monthOfYear, dayOfMonth)) {
+        return iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } else {
+        throw new IllegalArgumentException("Specified date does not exist");
+    }
+}
\ No newline at end of file
