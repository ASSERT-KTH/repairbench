diff --git a/tmp/fde011f5-f40e-4b4d-8ba7-ac605ca659cc_buggy.java b/tmp/42139afd-87ce-47f9-89f5-a5e176fb77b9_fixed.java
index be2af16..9f18a9e 100644
--- a/tmp/fde011f5-f40e-4b4d-8ba7-ac605ca659cc_buggy.java
+++ b/tmp/42139afd-87ce-47f9-89f5-a5e176fb77b9_fixed.java
@@ -1,29 +1,37 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase())!= null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    // Assume date is Gregorian, but handle potential Julian leap year first
+    if (monthOfYear == 2 && dayOfMonth == 29) {
+        long instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+            return instant; // It's a valid Julian leap day
+        }
+    }
+
+    long instant = iGregorianChronology.getDateTimeMillis
+        (year, monthOfYear, dayOfMonth,
+         hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    if (instant < iCutoverMillis) {
+        // Maybe it's Julian (not a leap day, or not in a leap year).
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
             // Okay, it's in the illegal cutover gap.
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
