diff --git a/tmp/4afae3b5-8b26-4d37-8d22-49ccec6cbd92_buggy.java b/tmp/2ccbb0fb-74ca-4b37-828f-bbad75423f52_fixed.java
index 1478ee1..f99091a 100644
--- a/tmp/4afae3b5-8b26-4d37-8d22-49ccec6cbd92_buggy.java
+++ b/tmp/2ccbb0fb-74ca-4b37-828f-bbad75423f52_fixed.java
@@ -1,24 +1,33 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // compute dot product v1.v2
+    double dotProduct = v1.dotProduct(v2);
     
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // compute squared norm of v2
+    double v2NormSq = v2.dotProduct(v2);
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double rho;
+    if (v2NormSq == 0) {
+        // v2 is zero, cross product is zero
+        return new Vector3D(0, 0, 0);
+    } else if (dotProduct == 0) {
+        // v1 and v2 are orthogonal, no need to rescale
+        rho = 0;
+    } else {
+        double invV2NormSq = 1 / v2NormSq;
+        double rhoTemp = dotProduct * invV2NormSq;
+        rho = (byte) (rhoTemp * 256); // 8 bits approximation
+        rho /= 256.0;
+    }
 
+    // compute v3 = v1 - rho v2 without losing precision
+    Vector3D v3 = new Vector3D(v1.x - rho * v2.x, v1.y - rho * v2.y, v1.z - rho * v2.z);
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(v3.y * v2.z - v3.z * v2.y, v3.z * v2.x - v3.x * v2.z, v3.x * v2.y - v3.y * v2.x);
 }
\ No newline at end of file
