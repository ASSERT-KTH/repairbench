diff --git a/tmp/2eadf772-ee50-46d7-b6ea-555fde328bb4_buggy.java b/tmp/9f3c729c-0b31-4c65-bd35-185611b07641_fixed.java
index 1478ee1..22858df 100644
--- a/tmp/2eadf772-ee50-46d7-b6ea-555fde328bb4_buggy.java
+++ b/tmp/9f3c729c-0b31-4c65-bd35-185611b07641_fixed.java
@@ -1,24 +1,36 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
+  // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+  double dotProductV1V2 = v1.dotProduct(v2);
+  double dotProductV2V2 = v2.dotProduct(v2);
+  double rho            = (dotProductV1V2 / dotProductV2V2) * 255.0;
+  rho                   = (rho - (int) rho) * 255.0;
+  int rhoInt            = (int) rho;
+  rho                   = rhoInt / 255.0;
 
   // rescale both vectors without losing precision,
   // to ensure their norm are the same order of magnitude
+  double normV2         = FastMath.hypot(FastMath.hypot(v2.getX(), v2.getY()), v2.getZ());
+  Vector3D scaledV1     = new Vector3D(v1.getX() / normV2, v1.getY() / normV2, v1.getZ() / normV2);
+  Vector3D scaledV2     = new Vector3D(v2.getX() / normV2, v2.getY() / normV2, v2.getZ() / normV2);
 
   // we reduce cancellation errors by preconditioning,
   // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
   // v3 without loss of precision. See Kahan lecture
   // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
   // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+  Vector3D v3           = new Vector3D(scaledV1.getX() - rho * scaledV2.getX(),
+                                        scaledV1.getY() - rho * scaledV2.getY(),
+                                        scaledV1.getZ() - rho * scaledV2.getZ());
 
   // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+  double x              = (v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY()) * normV2;
+  double y              = (v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ()) * normV2;
+  double z              = (v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX()) * normV2;
 
+  return new Vector3D(x, y, z);
 }
\ No newline at end of file
