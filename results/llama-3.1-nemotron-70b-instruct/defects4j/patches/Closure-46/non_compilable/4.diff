diff --git a/tmp/86be3430-cbeb-420b-87bd-da70d6483a9c_buggy.java b/tmp/967c48c3-3250-4861-87b5-a54c2e7ce21e_fixed.java
index 46817a7..48e779f 100644
--- a/tmp/86be3430-cbeb-420b-87bd-da70d6483a9c_buggy.java
+++ b/tmp/967c48c3-3250-4861-87b5-a54c2e7ce21e_fixed.java
@@ -1,16 +1,29 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  
+  // Create a union of both record types if they have different properties
+  Set<String> thisProperties = new HashSet<>(properties.keySet());
+  Set<String> thatProperties = new HashSet<>(that.toMaybeRecordType().GetPropertyNames());
+  if (!thisProperties.equals(thatProperties)) {
+    return registry.createUnionType(this, that);
+  }
+  
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
     if (that.toMaybeRecordType().hasProperty(property) &&
         that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
+    } else {
+      // Add property with union type if types are not equivalent
+      JSType unionType = registry.createUnionType(getPropertyType(property),
+          that.toMaybeRecordType().getPropertyType(property));
+      builder.addProperty(property, unionType, getPropertyNode(property));
     }
   }
   return builder.build();
 }
\ No newline at end of file
