diff --git a/tmp/1be8f037-0f36-452f-8238-15c2922d5a91_buggy.java b/tmp/c9104c1e-143b-4bfb-bae2-ffbaed4d21cc_fixed.java
index 46817a7..c37281a 100644
--- a/tmp/1be8f037-0f36-452f-8238-15c2922d5a91_buggy.java
+++ b/tmp/c9104c1e-143b-4bfb-bae2-ffbaed4d21cc_fixed.java
@@ -1,16 +1,38 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    // If the other type is a record type, the least supertype is the union of the two record types
+    RecordType thisRecordType = this.toMaybeRecordType().orElse(null);
+    RecordType thatRecordType = that.toMaybeRecordType().orElse(null);
+    
+    if (thisRecordType == null || thatRecordType == null) {
+        return super.getLeastSupertype(that);
     }
+    
+    RecordTypeBuilder commonBuilder = new RecordTypeBuilder(registry);
+    for (String property : thisRecordType.getProperties().keySet()) {
+        if (thatRecordType.hasProperty(property) &&
+            thatRecordType.getPropertyType(property).isEquivalentTo(
+                thisRecordType.getPropertyType(property))) {
+            commonBuilder.addProperty(property, thisRecordType.getPropertyType(property),
+                thisRecordType.getPropertyNode(property));
         }
-    return builder.build();
+    }
+    
+    // Add properties unique to the other record type
+    for (String property : thatRecordType.getProperties().keySet()) {
+        if (!thisRecordType.hasProperty(property)) {
+            commonBuilder.addProperty(property, thatRecordType.getPropertyType(property),
+                thatRecordType.getPropertyNode(property));
+        }
+    }
+    
+    // If no common properties, return the union of the two record types
+    if (commonBuilder.getProperties().isEmpty()) {
+        return registry.createUnionType(this, that);
+    }
+    
+    return commonBuilder.build();
 }
\ No newline at end of file
