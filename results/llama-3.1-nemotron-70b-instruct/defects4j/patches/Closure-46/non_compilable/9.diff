diff --git a/tmp/b8cd3343-d19f-4cf1-9c9d-834a1c45f13d_buggy.java b/tmp/a305ccd1-2649-4f22-be0c-f71426ac3c37_fixed.java
index 46817a7..b5aa427 100644
--- a/tmp/b8cd3343-d19f-4cf1-9c9d-834a1c45f13d_buggy.java
+++ b/tmp/a305ccd1-2649-4f22-be0c-f71426ac3c37_fixed.java
@@ -1,16 +1,31 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+    
+    // Iterate over all properties from both this record and the other record
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getAllPropertyNames());
+    
+    for (String property : allProperties) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+        
+        // If both records have the property, find the least supertype of their types
+        if (thisPropertyType!= null && thatPropertyType!= null) {
+            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType),
                 getPropertyNode(property));
         } 
+        // If only this record has the property, add it to the result
+        else if (thisPropertyType!= null) {
+            builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+        } 
+        // If only the other record has the property, add it to the result
+        else {
+            builder.addProperty(property, thatPropertyType, null);
+        }
     }
     return builder.build();
 }
\ No newline at end of file
