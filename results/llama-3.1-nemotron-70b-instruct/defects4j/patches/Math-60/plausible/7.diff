diff --git a/tmp/f708b124-9221-4090-821d-ccb6ab932508_buggy.java b/tmp/ecb0de5b-f28c-4f4d-9dee-958302af55e2_fixed.java
index 3127f85..25a9892 100644
--- a/tmp/f708b124-9221-4090-821d-ccb6ab932508_buggy.java
+++ b/tmp/ecb0de5b-f28c-4f4d-9dee-958302af55e2_fixed.java
@@ -1,24 +1,32 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isInfinite(x)) {
+        return (x > 0)? 1.0 : 0.0;
+    }
+
     final double dev = x - mean;
+    if (Math.abs(dev) > 40 * standardDeviation) {
+        return (dev < 0)? 0.0 : 1.0;
+    }
+
     try {
         return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        if (x < (mean - 20 * standardDeviation)) { 
             return 0;
         } else if (x > (mean + 20 * standardDeviation)) {
             return 1;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
