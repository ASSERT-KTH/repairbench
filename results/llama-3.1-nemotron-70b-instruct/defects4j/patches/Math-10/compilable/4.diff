diff --git a/tmp/c5f2dc45-dad9-427b-9fdf-f7216c44a1c2_buggy.java b/tmp/70389a92-c894-4f01-8987-06d71fa2141e_fixed.java
index d27c40c..a826be1 100644
--- a/tmp/c5f2dc45-dad9-427b-9fdf-f7216c44a1c2_buggy.java
+++ b/tmp/70389a92-c894-4f01-8987-06d71fa2141e_fixed.java
@@ -1,49 +1,100 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
     // compute r = sqrt(x^2+y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {
+        // result is NaN for NaN inputs
+        for (int i = 0; i < result.length; ++i) {
+            result[resultOffset + i] = Double.NaN;
+        }
+    } else if (x[xOffset] == 0) {
+        if (y[yOffset] == 0) {
+            // special cases (+0/+0, -0/-0)
+            for (int i = 0; i < result.length; ++i) {
+                result[resultOffset + i] = FastMath.copySign(y[yOffset], x[xOffset]) * FastMath.PI / 2;
+            }
+        } else {
+            // special cases (+0/+non-zero, -0/+non-zero)
+            for (int i = 0; i < result.length; ++i) {
+                result[resultOffset + i] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);
+            }
+        }
+    } else if (y[yOffset] == 0) {
+        // special cases (+non-zero/+0, +non-zero/-0)
+        for (int i = 0; i < result.length; ++i) {
+            result[resultOffset + i] = FastMath.copySign(0, x[xOffset]);
+        }
+    } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {
+        // special cases (+/- infinity)
+        if (Double.isInfinite(x[xOffset])) {
+            if (x[xOffset] > 0) {
+                // +infinity
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);
+                }
+            } else {
+                // -infinity
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = FastMath.copySign(-FastMath.PI / 2, y[yOffset]);
+                }
+            }
+        } else {
+            // +/- infinity for y
+            if (y[yOffset] > 0) {
+                // +infinity
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = FastMath.PI / 2;
+                }
+            } else {
+                // -infinity
+                for (int i = 0; i < result.length; ++i) {
+                    result[resultOffset + i] = -FastMath.PI / 2;
+                }
+            }
+        }
+    } else {
         if (x[xOffset] >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
                     ((tmp2[0] <= 0)? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
 
         }
+    }
 
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    // fix value to take special cases (+/- infinity) correctly (already handled above)
 }
\ No newline at end of file
