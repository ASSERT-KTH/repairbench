diff --git a/tmp/fd9b4bd5-f982-41f5-be39-03172410b77a_buggy.java b/tmp/fccc32be-4b4b-4512-9c12-f03f4ac3a612_fixed.java
index d27c40c..4e972dc 100644
--- a/tmp/fd9b4bd5-f982-41f5-be39-03172410b77a_buggy.java
+++ b/tmp/fccc32be-4b4b-4512-9c12-f03f4ac3a612_fixed.java
@@ -1,49 +1,65 @@
 /** Compute two arguments arc tangent of a derivative structure.
  * @param y array holding the first operand
  * @param yOffset offset of the first operand in its array
  * @param x array holding the second operand
  * @param xOffset offset of the second operand in its array
  * @param result array where result must be stored (for
  * two arguments arc tangent the result array <em>cannot</em>
  * be the input array)
  * @param resultOffset offset of the result in its array
  */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    // Handle special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) first
+    if (x[xOffset] == 0 && y[yOffset] == 0) {
+        // (+0/+0) or (-0/-0) or (+0/-0) or (-0/+0)
+        for (int i = 0; i < getSize(); ++i) {
+            result[resultOffset + i] = 
+                (Double.signum(x[xOffset]) == Double.signum(y[yOffset]))? 0 : (Double.signum(y[yOffset]) == 1)? FastMath.PI : -FastMath.PI;
+        }
+    } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {
+        // +/-infinity
+        for (int i = 0; i < getSize(); ++i) {
+            result[resultOffset + i] = 
+                (Double.isInfinite(x[xOffset]) && x[xOffset] > 0)? 
+                    (y[yOffset] >= 0? FastMath.PI / 2 : -FastMath.PI / 2) : 
+                (Double.isInfinite(y[yOffset])? 
+                    (y[yOffset] > 0? FastMath.PI / 2 : -FastMath.PI / 2) : 
+                    Double.NaN);
+        };
+    } else {
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
         if (x[xOffset] >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
                     ((tmp2[0] <= 0)? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
 
         }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
+    }
 }
\ No newline at end of file
