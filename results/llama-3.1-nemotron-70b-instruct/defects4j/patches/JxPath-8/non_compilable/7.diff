diff --git a/tmp/030bb6e8-86ad-4223-a7fa-c58d46ebeed2_buggy.java b/tmp/93b57068-b88b-413e-87bc-c861e00e2aa6_fixed.java
index 98d89dc..9e9a973 100644
--- a/tmp/030bb6e8-86ad-4223-a7fa-c58d46ebeed2_buggy.java
+++ b/tmp/93b57068-b88b-413e-87bc-c861e00e2aa6_fixed.java
@@ -1,23 +1,30 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Fix: Check for NaN before comparing doubles
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is only equal to itself, and not greater than or less than anything
+        return evaluateCompare(ld == rd? 0 : (Double.isNaN(ld) && Double.isNaN(rd))? 0 : Float.compare(ld, rd));
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
