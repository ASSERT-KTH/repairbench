diff --git a/tmp/c98eea4e-1817-443d-b431-6356a04c4e31_buggy.java b/tmp/d63bbbcb-bb7a-451a-bff5-f0bd7b4a38c2_fixed.java
index 98d89dc..399251f 100644
--- a/tmp/c98eea4e-1817-443d-b431-6356a04c4e31_buggy.java
+++ b/tmp/d63bbbcb-bb7a-451a-bff5-f0bd7b4a38c2_fixed.java
@@ -1,23 +1,44 @@
+/**
+ * Fixed version of the compute function to handle NaN (Not a Number) comparisons correctly.
+ * 
+ * @param left  The left operand.
+ * @param right The right operand.
+ * @return The result of the comparison.
+ */
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Fix: Explicitly handle NaN cases
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        switch (getOperator()) { // Assume getOperator() returns the comparison operator
+            case ">":
+            case "<":
+                return false; // NaN is neither greater than nor less than any number
+            case "=":
+                return ld == rd; // NaN equals NaN, but no other number
+            default:
+                throw new UnsupportedOperationException("Unsupported operator for NaN comparison");
+        }
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
