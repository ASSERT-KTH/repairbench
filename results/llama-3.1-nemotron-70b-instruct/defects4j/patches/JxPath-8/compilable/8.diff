diff --git a/tmp/16f3c809-b23d-4229-a575-b7cf37d7c812_buggy.java b/tmp/4eed2de6-03b5-4cd3-ada1-3640149ad288_fixed.java
index 98d89dc..53161d0 100644
--- a/tmp/16f3c809-b23d-4229-a575-b7cf37d7c812_buggy.java
+++ b/tmp/4eed2de6-03b5-4cd3-ada1-3640149ad288_fixed.java
@@ -1,23 +1,36 @@
+/**
+ * Computes the result of a comparison operation between two objects.
+ * 
+ * @param left  the left operand
+ * @param right the right operand
+ * @return the result of the comparison
+ */
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Fix: Handle NaN cases explicitly
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        return (ld == rd)? evaluateCompare(0) : evaluateCompare(Double.compare(ld, rd));
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
