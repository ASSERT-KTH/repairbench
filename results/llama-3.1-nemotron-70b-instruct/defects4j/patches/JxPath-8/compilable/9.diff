diff --git a/tmp/43ac5cbf-30cc-4510-b3c8-cce77f71e219_buggy.java b/tmp/f1d23c14-ef63-470a-9db0-0dfc0c57f385_fixed.java
index 98d89dc..e1ad39f 100644
--- a/tmp/43ac5cbf-30cc-4510-b3c8-cce77f71e219_buggy.java
+++ b/tmp/f1d23c14-ef63-470a-9db0-0dfc0c57f385_fixed.java
@@ -1,23 +1,43 @@
+/**
+ * Fixed compute function to handle NaN (Not a Number) comparisons correctly.
+ * 
+ * @param left  The left operand for comparison.
+ * @param right The right operand for comparison.
+ * @return The result of the comparison.
+ */
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Check for NaN before comparison to ensure correct results
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is neither greater than, less than, nor equal to anything, including itself
+        // So, for equality, return true only if both are NaN, otherwise return false
+        if (ld == rd) { // This check is essentially checking if both are NaN
+            return evaluateCompare(0); // For equality, both NaN, return true
+        } else {
+            return evaluateCompare(Double.isNaN(ld)? 1 : -1); // Arbitrary non-zero for non-equality
+        }
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
