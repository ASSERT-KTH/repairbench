diff --git a/tmp/c63f05f6-614c-47d9-980f-55f21652d656_buggy.java b/tmp/491d7156-4f25-4578-9bf6-23292806feec_fixed.java
index 98d89dc..1cc5efc 100644
--- a/tmp/c63f05f6-614c-47d9-980f-55f21652d656_buggy.java
+++ b/tmp/491d7156-4f25-4578-9bf6-23292806feec_fixed.java
@@ -1,23 +1,41 @@
+/**
+ * Fixed version of the compute function to handle NaN (Not a Number) comparisons correctly.
+ * 
+ * @param left  The left operand
+ * @param right The right operand
+ * @return The result of the comparison
+ */
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+    
+    // Handle NaN comparisons according to IEEE 754 floating-point standard
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (ld == rd) { // Both NaN, consider them equal
+            return evaluateCompare(0);
+        } else { // One or both NaN, consider them not equal and not comparable for <, >
+            return evaluateCompare(ld == ld? 0 : -1); // Always false for <, >, true for ==
+        }
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
