diff --git a/tmp/96d639a3-b977-45c3-8579-de87c7c20ce8_buggy.java b/tmp/7446e831-07af-4fe6-927e-76b6a9bc0b23_fixed.java
index 98d89dc..6ebdd42 100644
--- a/tmp/96d639a3-b977-45c3-8579-de87c7c20ce8_buggy.java
+++ b/tmp/7446e831-07af-4fe6-927e-76b6a9bc0b23_fixed.java
@@ -1,23 +1,41 @@
+/**
+ * Fixed version of the compute method to handle NaN (Not a Number) cases correctly.
+ *
+ * @param left  the left operand
+ * @param right the right operand
+ * @return the result of the comparison
+ */
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Check for NaN before comparing
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // NaN is not equal to anything, including itself, in comparisons
+        if (ld == rd) { // This check is actually for the equality test
+            return evaluateCompare(0);
+        } else { // For non-equality tests, return false as NaN comparisons yield false
+            return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1) && false;
+        }
+    } else {
         return evaluateCompare(ld == rd? 0 : ld < rd? -1 : 1);
     }
+}
\ No newline at end of file
