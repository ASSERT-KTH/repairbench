diff --git a/tmp/313f0912-ca49-4510-98a5-4be9e4ee986f_buggy.java b/tmp/323ef584-441b-418b-b243-560091a8449a_fixed.java
index 91dc4ff..36304ab 100644
--- a/tmp/313f0912-ca49-4510-98a5-4be9e4ee986f_buggy.java
+++ b/tmp/323ef584-441b-418b-b243-560091a8449a_fixed.java
@@ -1,107 +1,143 @@
-    // the original object is needed so can check for Number
+/**
+ * Fixed version of the printAndQuote function to handle escaping correctly
+ * when the escape character is null or a backslash.
+ */
 private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len,
         final Appendable out, final boolean newRecord) throws IOException {
     boolean quote = false;
     int start = offset;
     int pos = offset;
     final int end = offset + len;
 
     final char delimChar = getDelimiter();
     final char quoteChar = getQuoteCharacter().charValue();
+    final Character escapeChar = getEscapeCharacter(); // Added to handle escaping correctly
 
     QuoteMode quoteModePolicy = getQuoteMode();
     if (quoteModePolicy == null) {
         quoteModePolicy = QuoteMode.MINIMAL;
     }
     switch (quoteModePolicy) {
     case ALL:
         quote = true;
         break;
     case NON_NUMERIC:
         quote =!(object instanceof Number);
         break;
     case NONE:
         // Use the existing escaping code
-            printAndEscape(value, offset, len, out);
+        printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape
         return;
     case MINIMAL:
         if (len <= 0) {
             // always quote an empty token that is the first
             // on the line, as it may be the only thing on the
             // line. If it were not quoted in that case,
             // an empty line has no tokens.
             if (newRecord) {
                 quote = true;
             }
         } else {
             char c = value.charAt(pos);
 
             // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E
             if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {
                 quote = true;
             } else if (c <= COMMENT) {
                 // Some other chars at the start of a value caused the parser to fail, so for now
                 // encapsulate if we start in anything less than '#'. We are being conservative
                 // by including the default comment char too.
                 quote = true;
             } else {
                 while (pos < end) {
                     c = value.charAt(pos);
-                        if (c == LF || c == CR || c == quoteChar || c == delimChar) {
+                    if (c == LF || c == CR || c == quoteChar || c == delimChar || (escapeChar!= null && c == escapeChar.charValue())) {
                         quote = true;
                         break;
                     }
                     pos++;
                 }
 
                 if (!quote) {
                     pos = end - 1;
                     c = value.charAt(pos);
                     // Some other chars at the end caused the parser to fail, so for now
                     // encapsulate if we end in anything less than ' '
                     if (c <= SP) {
                         quote = true;
                     }
                 }
             }
         }
 
         if (!quote) {
             // no encapsulation needed - write out the original value
-                out.append(value, start, end);
+            printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape
             return;
         }
         break;
     default:
         throw new IllegalStateException("Unexpected Quote value: " + quoteModePolicy);
     }
 
     if (!quote) {
         // no encapsulation needed - write out the original value
-            out.append(value, start, end);
+        printAndEscape(value, offset, len, out, escapeChar); // Pass escapeChar to printAndEscape
         return;
     }
 
     // we hit something that needed encapsulation
     out.append(quoteChar);
 
     // Pick up where we left off: pos should be positioned on the first character that caused
     // the need for encapsulation.
     while (pos < end) {
         final char c = value.charAt(pos);
         if (c == quoteChar) {
             // write out the chunk up until this point
 
             // add 1 to the length to write out the encapsulator also
-                out.append(value, start, pos + 1);
+            printAndEscape(value, start, pos + 1, out, escapeChar); // Pass escapeChar to printAndEscape
             // put the next starting position on the encapsulator so we will
             // write it out again with the next string (effectively doubling it)
             start = pos;
+        } else if (escapeChar!= null && c == escapeChar.charValue()) {
+            // Handle escape character correctly
+            if (pos + 1 < end) {
+                final char nextChar = value.charAt(pos + 1);
+                if (nextChar == quoteChar || nextChar == escapeChar.charValue() || nextChar == delimChar) {
+                    out.append(c);
+                    out.append(nextChar);
+                    pos++; // Skip the next character
+                }
+            }
         }
         pos++;
     }
 
     // write the last segment
-        out.append(value, start, pos);
+    printAndEscape(value, start, pos, out, escapeChar); // Pass escapeChar to printAndEscape
     out.append(quoteChar);
 }
+
+// Please ensure printAndEscape function is updated as below to handle escape character correctly
+private void printAndEscape(final CharSequence value, final int offset, final int len, final Appendable out, final Character escapeChar) throws IOException {
+    int pos = offset;
+    final int end = offset + len;
+    while (pos < end) {
+        final char c = value.charAt(pos);
+        if (escapeChar!= null && c == escapeChar.charValue() && pos + 1 < end) {
+            final char nextChar = value.charAt(pos + 1);
+            if (nextChar == quoteChar || nextChar == escapeChar.charValue() || nextChar == delimChar) {
+                out.append(c);
+                out.append(nextChar);
+                pos++; // Skip the next character
+            } else {
+                out.append(c);
+            }
+        } else {
+            out.append(c);
+        }
+        pos++;
+    }
+}
\ No newline at end of file
