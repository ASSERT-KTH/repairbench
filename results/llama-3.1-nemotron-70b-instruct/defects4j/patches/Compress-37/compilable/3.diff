diff --git a/tmp/a5570e2a-bc44-416b-b32e-b129336fc74b_buggy.java b/tmp/08c197bb-5187-46ed-9bcc-8bd611207ebd_fixed.java
index 4b7e1e4..285c216 100644
--- a/tmp/a5570e2a-bc44-416b-b32e-b129336fc74b_buggy.java
+++ b/tmp/08c197bb-5187-46ed-9bcc-8bd611207ebd_fixed.java
@@ -1,52 +1,57 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read())!= -1) {
             read++;
             if (ch == ' '){
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read())!= -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                        if (restLen <= 1) { // only NL or empty line
+                            if (restLen == 1) { // only NL, skip it
+                                i.read(); // consume NL
+                            }
+                            break;
                         } else {
-                                final byte[] rest = new byte[restLen];
+                            final byte[] rest = new byte[restLen - 1]; // subtract 1 for trailing NL
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                            if (got!= restLen - 1) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
-                                                          + restLen
+                                                      + (restLen - 1)
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // No need to drop trailing NL, already accounted for
+                            final String value = new String(rest, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
-                            break;
+                        break; // Processed single header
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
+            if (len < 0) { // overflow, likely malformed input
+                throw new IOException("Invalid Pax header length");
+            }
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
