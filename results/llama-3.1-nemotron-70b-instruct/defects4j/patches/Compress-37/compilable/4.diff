diff --git a/tmp/56d2c114-7c21-4e50-afe4-509f7bd04c90_buggy.java b/tmp/a6fe04ae-0b4d-4bf0-b747-6e61d0b04b5b_fixed.java
index 4b7e1e4..194d6fe 100644
--- a/tmp/56d2c114-7c21-4e50-afe4-509f7bd04c90_buggy.java
+++ b/tmp/a6fe04ae-0b4d-4bf0-b747-6e61d0b04b5b_fixed.java
@@ -1,52 +1,57 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+/**
+ * Parse Pax headers from the given input stream.
+ * 
+ * @param i Input stream containing Pax headers
+ * @return Map of keyword-value pairs from the Pax headers
+ * @throws IOException if an I/O error occurs
+ */
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read())!= -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read())!= -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen <= 1) { // only NL or empty value
                             headers.remove(keyword);
                         } else {
-                                final byte[] rest = new byte[restLen];
+                            final byte[] rest = new byte[restLen - 1]; // subtract 1 for trailing NL
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
+                            if (got!= restLen - 1) {
+                                throw new IOException("Failed to read Paxheader. Expected "
+                                                      + (restLen - 1)
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // No need to drop trailing NL now, as it's not included in the byte array
+                            final String value = new String(rest, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
+            if (ch < '0' || ch > '9') { // skip non-digit characters (like newline)
+                continue;
+            }
+            len = len * 10 + (ch - '0');
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
