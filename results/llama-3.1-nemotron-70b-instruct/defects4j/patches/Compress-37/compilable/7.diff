diff --git a/tmp/844ea967-acbb-4cfe-a803-5e70d109b9c4_buggy.java b/tmp/da808f4a-2f0e-4340-bf89-7b896884fe16_fixed.java
index 4b7e1e4..dd063dd 100644
--- a/tmp/844ea967-acbb-4cfe-a803-5e70d109b9c4_buggy.java
+++ b/tmp/da808f4a-2f0e-4340-bf89-7b896884fe16_fixed.java
@@ -1,52 +1,62 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
+/**
+ * Parses PAX headers from the given input stream.
+ * 
+ * @param i Input stream containing PAX headers
+ * @return Map of parsed PAX headers
+ * @throws IOException if an I/O error occurs
+ * @see <a href="https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188">GNU Tar Manual - PAX Headers</a>
+ */
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read())!= -1) {
             read++;
-                if (ch == ' '){
+            if (ch == '\n') { // skip blank lines
+                continue;
+            } else if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read())!= -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got!= restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
+                                throw new IOException("Failed to read Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            final String value = (restLen > 1)? new String(rest, 0, restLen - 1, CharsetNames.UTF_8) : "";
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
+            if (ch >= '0' && ch <= '9') {
                 len *= 10;
                 len += ch - '0';
+            } else {
+                throw new IOException("Invalid PAX header length character: '" + (char) ch + "'");
+            }
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
