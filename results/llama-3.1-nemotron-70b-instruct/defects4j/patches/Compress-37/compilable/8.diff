diff --git a/tmp/e96698bd-1547-4958-ae46-af8f5c42366f_buggy.java b/tmp/ee217790-b52d-4ad0-8867-c178bcec2f42_fixed.java
index 4b7e1e4..1faa3b0 100644
--- a/tmp/e96698bd-1547-4958-ae46-af8f5c42366f_buggy.java
+++ b/tmp/ee217790-b52d-4ad0-8867-c178bcec2f42_fixed.java
@@ -1,52 +1,56 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
         while((ch = i.read())!= -1) {
             read++;
             if (ch == ' '){
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while((ch = i.read())!= -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen <= 1) { // only NL or empty
                             headers.remove(keyword);
                         } else {
-                                final byte[] rest = new byte[restLen];
+                            final byte[] rest = new byte[restLen - 1]; // exclude NL
                             final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                            if (got!= restLen - 1) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
-                                                          + restLen
+                                                      + (restLen - 1)
                                                       + " bytes, read "
                                                       + got);
                             }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                            // No need to drop trailing NL as we've excluded it above
+                            final String value = new String(rest, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
-                            break;
+                        break; // Processed single header
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
+            if (len < 0) { // Overflow, treat as blank line
+                len = 0;
+                while((ch = i.read())!= -1 && ch!= '\n');
+                break; // Skip blank line
+            }
         }
         if (ch == -1){ // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
