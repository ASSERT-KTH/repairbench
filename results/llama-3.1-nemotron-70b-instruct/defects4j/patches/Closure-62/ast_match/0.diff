diff --git a/tmp/461da786-8af3-406b-8c27-97aa8a2c4970_buggy.java b/tmp/8764bc61-5451-4b45-bf62-5a4610a92192_fixed.java
index 904dba7..5f93d24 100644
--- a/tmp/461da786-8af3-406b-8c27-97aa8a2c4970_buggy.java
+++ b/tmp/8764bc61-5451-4b45-bf62-5a4610a92192_fixed.java
@@ -1,46 +1,51 @@
+/**
+ * Formats the given JSError into a human-readable string.
+ *
+ * @param error   the JSError to format
+ * @param warning whether the error is a warning or not
+ * @return a human-readable string representation of the error
+ */
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName!= null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
 
     b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt!= null) {
       b.append(sourceExcerpt);
       b.append('\n');
       int charno = error.getCharno();
 
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+      // Fix: handle case where charno equals sourceExcerpt.length()
+      if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
             b.append(c);
           } else {
             b.append(' ');
           }
         }
+        // Fix: append "^" even if charno is at the end of the line
         b.append("^\n");
       }
     }
     return b.toString();
 }
\ No newline at end of file
