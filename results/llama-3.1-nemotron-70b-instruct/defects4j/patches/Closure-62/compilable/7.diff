diff --git a/tmp/87727011-284d-4106-a593-fdf83d74e568_buggy.java b/tmp/793133a0-798f-41e5-a916-77a46dc7d2c5_fixed.java
index 904dba7..e912ec2 100644
--- a/tmp/87727011-284d-4106-a593-fdf83d74e568_buggy.java
+++ b/tmp/793133a0-798f-41e5-a916-77a46dc7d2c5_fixed.java
@@ -1,46 +1,57 @@
+/**
+ * Fixes the formatting of error messages to correctly handle spaces at the end of lines.
+ * 
+ * @param error    the error to format
+ * @param warning  whether the error is a warning or not
+ * @return the formatted error message
+ */
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName!= null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
 
     b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt!= null) {
       b.append(sourceExcerpt);
       b.append('\n');
       int charno = error.getCharno();
 
       // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
+      // charno == sourceExcerpt.length() means something is missing
       // at the end of the line
       if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+          && 0 <= charno && charno <= sourceExcerpt.length()) { // Fix: changed < to <=
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
+          if (i < sourceExcerpt.length() && Character.isWhitespace(c)) { // Fix: added bounds check
             b.append(c);
           } else {
             b.append(' ');
           }
         }
+        if (charno == sourceExcerpt.length()) { // Fix: handle case where error is at end of line
+          b.append(" ^\n"); // Note the space before the ^
+        } else {
           b.append("^\n");
         }
       }
+    }
     return b.toString();
 }
\ No newline at end of file
