diff --git a/tmp/a601da4d-a20b-48a6-8c72-bddc3163daaf_buggy.java b/tmp/8aa61010-b969-47ac-827a-9000641d81c7_fixed.java
index 904dba7..b424ded 100644
--- a/tmp/a601da4d-a20b-48a6-8c72-bddc3163daaf_buggy.java
+++ b/tmp/8aa61010-b969-47ac-827a-9000641d81c7_fixed.java
@@ -1,46 +1,52 @@
+/**
+ * Formats a JSError into a human-readable string.
+ * 
+ * @param error    the JSError to format
+ * @param warning  whether the error is a warning or an error
+ * @return a formatted string representation of the JSError
+ */
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName!= null) {
       b.append(error.sourceName);
       if (error.lineNumber > 0) {
         b.append(':');
         b.append(error.lineNumber);
       }
       b.append(": ");
     }
 
     b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt!= null) {
       b.append(sourceExcerpt);
       b.append('\n');
       int charno = error.getCharno();
 
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+      // Fix: handle case where charno equals sourceExcerpt length
+      if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {
         for (int i = 0; i < charno; i++) {
           char c = sourceExcerpt.charAt(i);
           if (Character.isWhitespace(c)) {
             b.append(c);
           } else {
             b.append(' ');
           }
         }
-        b.append("^\n");
+        // Fix: ensure arrow pointer is appended even if charno is at the end of the line
+        b.append(charno < sourceExcerpt.length()? "^" : " ");
+        b.append('\n');
       }
     }
     return b.toString();
 }
\ No newline at end of file
