diff --git a/tmp/5a139e14-cdd6-4e8a-851c-6e3ce4066d53_buggy.java b/tmp/3e00bea9-c28b-4258-b9c0-2d2241238f80_fixed.java
index 904dba7..7ea9648 100644
--- a/tmp/5a139e14-cdd6-4e8a-851c-6e3ce4066d53_buggy.java
+++ b/tmp/3e00bea9-c28b-4258-b9c0-2d2241238f80_fixed.java
@@ -1,46 +1,55 @@
+/**
+ * Formats a JSError into a human-readable string.
+ * 
+ * @param error   the JSError to format
+ * @param warning whether the error is a warning or not
+ * @return the formatted error string
+ */
 private String format(JSError error, boolean warning) {
     // extract source excerpt
     SourceExcerptProvider source = getSource();
     String sourceExcerpt = source == null? null :
         excerpt.get(
             source, error.sourceName, error.lineNumber, excerptFormatter);
 
     // formatting the message
     StringBuilder b = new StringBuilder();
     if (error.sourceName!= null) {
         b.append(error.sourceName);
         if (error.lineNumber > 0) {
             b.append(':');
             b.append(error.lineNumber);
         }
         b.append(": ");
     }
 
     b.append(getLevelName(warning? CheckLevel.WARNING : CheckLevel.ERROR));
     b.append(" - ");
 
     b.append(error.description);
     b.append('\n');
     if (sourceExcerpt!= null) {
         b.append(sourceExcerpt);
         b.append('\n');
         int charno = error.getCharno();
 
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
+        // Fix: handle case when charno is equal to sourceExcerpt length()
+        if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {
             for (int i = 0; i < charno; i++) {
                 char c = sourceExcerpt.charAt(i);
                 if (Character.isWhitespace(c)) {
                     b.append(c);
                 } else {
                     b.append(' ');
                 }
             }
+            // Fix: ensure '^' is printed even if charno is at the end of the line
+            if (charno == sourceExcerpt.length()) {
+                b.append('^'); // No newline here, as per original code
+            } else {
                 b.append("^\n");
             }
         }
+    }
     return b.toString();
 }
\ No newline at end of file
