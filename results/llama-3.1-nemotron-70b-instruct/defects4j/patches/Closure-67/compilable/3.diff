diff --git a/tmp/851f67ea-9ace-4924-94e9-6da212126dac_buggy.java b/tmp/2dcfee5c-ae54-41fa-a475-00c3361525d5_fixed.java
index 939f49b..deebbc0 100644
--- a/tmp/851f67ea-9ace-4924-94e9-6da212126dac_buggy.java
+++ b/tmp/2dcfee5c-ae54-41fa-a475-00c3361525d5_fixed.java
@@ -1,21 +1,27 @@
+/**
+ * Checks if the assignment is to a property of a prototype object.
+ * 
+ * @param assign the assignment node to check
+ * @return true if the assignment is to a prototype property, false otherwise
+ */
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
      ) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
+    boolean isPrototypeProperty = false;
+    Node current = n;
+    while (current.getType() == Token.GETPROP) {
+      Node grandChild = current.getFirstChild().getNext();
+      if (grandChild.getType() == Token.STRING &&
+          grandChild.getString().equals("prototype")) {
+        isPrototypeProperty = true;
+        break;
       }
+      current = current.getFirstChild();
     }
+    return isPrototypeProperty;
   }
-
   return false;
 }
\ No newline at end of file
