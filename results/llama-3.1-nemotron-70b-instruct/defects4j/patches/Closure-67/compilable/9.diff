diff --git a/tmp/0b8e5dd9-bfcd-44ab-b7b5-708d03ecb0e5_buggy.java b/tmp/41504096-a04d-4cae-b14a-14cbfaecc1b9_fixed.java
index 939f49b..b3e5359 100644
--- a/tmp/0b8e5dd9-bfcd-44ab-b7b5-708d03ecb0e5_buggy.java
+++ b/tmp/41504096-a04d-4cae-b14a-14cbfaecc1b9_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
      ) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node grandChild = n.getFirstChild().getFirstChild();
+      Node propertyNode = grandChild.getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      // Support both dot notation (e.g., e.prototype) and bracket notation (e['prototype'])
+      if ((grandChild.getType() == Token.STRING && grandChild.getString().equals("prototype"))
+          || (propertyNode!= null && propertyNode.getType() == Token.STRING && propertyNode.getString().equals("prototype"))) {
+        return true;
+      }
+    } else {
+      // Handle the case where the assignment is directly to 'prototype' (e.g., e.prototype =...)
+      if (n.getFirstChild().getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
