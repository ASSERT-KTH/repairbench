diff --git a/tmp/7d88fc4e-206a-4e64-bd35-3b717ba6ce66_buggy.java b/tmp/d9c9d1e5-0d0e-4ffd-a502-c0fea0d8557e_fixed.java
index 939f49b..a6d9e92 100644
--- a/tmp/7d88fc4e-206a-4e64-bd35-3b717ba6ce66_buggy.java
+++ b/tmp/d9c9d1e5-0d0e-4ffd-a502-c0fea0d8557e_fixed.java
@@ -1,21 +1,37 @@
+/**
+ * Checks if the given assignment node is assigning to a property of a prototype.
+ *
+ * @param assign the assignment node to check
+ * @return true if the assignment is to a property of a prototype, false otherwise
+ */
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
+    // Traverse up the GETPROP chain to find the base object
+    Node base = n;
+    while (base.getType() == Token.GETPROP) {
+      base = base.getFirstChild();
+    }
+
+    // Check if the base object is a function's prototype
+    if (base.getType() == Token.STRING && base.getString().equals("prototype")) {
+      // Verify the parent of the base object is a function
+      Node parent = base.getParent();
+      return parent!= null && parent.getType() == Token.FUNCTION;
+    }
+
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
       Node child = n.getFirstChild().getFirstChild().getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
