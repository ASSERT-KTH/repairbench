diff --git a/tmp/29a88afb-f955-457e-a8b1-ebac31ccc7df_buggy.java b/tmp/b5ce6aff-97e1-4cba-97c7-978aaf75990f_fixed.java
index 939f49b..af6d7d0 100644
--- a/tmp/29a88afb-f955-457e-a8b1-ebac31ccc7df_buggy.java
+++ b/tmp/b5ce6aff-97e1-4cba-97c7-978aaf75990f_fixed.java
@@ -1,21 +1,17 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
      ) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isPrototypeProperty = 
+        (n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals("prototype")) ||
+        (n.getFirstChild().getType() == Token.GETPROP && 
+         n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING && 
+         n.getFirstChild().getFirstChild().getNext().getString().equals("prototype"));
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
-          }
-        }
+    return isPrototypeProperty;
   }
 
   return false;
 }
\ No newline at end of file
