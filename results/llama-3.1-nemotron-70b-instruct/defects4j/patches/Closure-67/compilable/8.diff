diff --git a/tmp/eb4bbb4a-f6d7-40b4-b47f-902bc951c7b4_buggy.java b/tmp/40c81589-bd94-48df-93b2-301908c2fb44_fixed.java
index 939f49b..0d41e8a 100644
--- a/tmp/eb4bbb4a-f6d7-40b4-b47f-902bc951c7b4_buggy.java
+++ b/tmp/40c81589-bd94-48df-93b2-301908c2fb44_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
      ) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isPrototypeProperty = false;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
+    // Traverse up the GETPROP chain to find "prototype"
+    while (n!= null && n.getType() == Token.GETPROP) {
+      if (n.getFirstChild().getType() == Token.STRING &&
+          n.getFirstChild().getString().equals("prototype")) {
+        isPrototypeProperty = true;
+        break;
       }
+      n = n.getFirstChild();
     }
+
+    return isPrototypeProperty;
   }
 
   return false;
 }
\ No newline at end of file
