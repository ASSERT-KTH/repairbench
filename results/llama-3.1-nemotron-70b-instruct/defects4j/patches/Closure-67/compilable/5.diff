diff --git a/tmp/da7edb47-ba0a-49d9-93b2-d49de6ae2b0e_buggy.java b/tmp/f12f0d5b-f1ed-49b9-becb-c5938afc884a_fixed.java
index 939f49b..b1914c3 100644
--- a/tmp/da7edb47-ba0a-49d9-93b2-d49de6ae2b0e_buggy.java
+++ b/tmp/f12f0d5b-f1ed-49b9-becb-c5938afc884a_fixed.java
@@ -1,21 +1,33 @@
+/**
+ * Checks if the assignment is to a property of a prototype object.
+ * 
+ * @param assign the assignment node to check
+ * @return true if the assignment is to a prototype property, false otherwise
+ */
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
+    // Traverse up the GETPROP chain to find the root object
+    Node root = n;
+    while (root.getFirstChild()!= null && root.getFirstChild().getType() == Token.GETPROP) {
+      root = root.getFirstChild();
+    }
     
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Check if the root object is 'prototype'
+    if (root.getFirstChild().getString().equals("prototype")) {
+      return true;
+    }
     
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // If not, check if any intermediate property in the chain is 'prototype'
+    Node current = n;
+    while (current.getType() == Token.GETPROP) {
+      if (current.getString().equals("prototype")) {
         return true;
       }
+      current = current.getFirstChild();
     }
   }
   
   return false;
 }
\ No newline at end of file
