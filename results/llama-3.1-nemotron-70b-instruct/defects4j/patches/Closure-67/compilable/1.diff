diff --git a/tmp/6c371c56-bd86-478a-93cb-b77a1542d365_buggy.java b/tmp/664f8ffb-7a56-406b-a5a4-94e49ed16ce9_fixed.java
index 939f49b..8594b0c 100644
--- a/tmp/6c371c56-bd86-478a-93cb-b77a1542d365_buggy.java
+++ b/tmp/664f8ffb-7a56-406b-a5a4-94e49ed16ce9_fixed.java
@@ -1,21 +1,37 @@
+/**
+ * Checks if the given assignment node is assigning to a property of a 
+ * prototype object, excluding the assignment itself from consideration.
+ * 
+ * @param assign The assignment node to check.
+ * @return True if the assignment is to a prototype property, false otherwise.
+ */
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n!= null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
      ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    // Traverse up the GETPROP chain to find the root object
+    Node root = n;
+    while (root.getFirstChild()!= null && root.getFirstChild().getType() == Token.GETPROP) {
+      root = root.getFirstChild();
+    }
     
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Check if the root object is 'prototype'
+    if (root.getFirstChild().getType() == Token.STRING &&
+        root.getFirstChild().getString().equals("prototype")) {
+      return true;
+    }
     
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    // If not, check if any intermediate property in the chain is 'prototype'
+    Node child = n;
+    while (child.getType() == Token.GETPROP) {
+      if (child.getFirstChild().getType() == Token.STRING &&
+          child.getFirstChild().getString().equals("prototype")) {
         return true;
       }
+      child = child.getFirstChild();
     }
   }
 
   return false;
 }
\ No newline at end of file
