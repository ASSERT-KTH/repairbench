diff --git a/tmp/b75efdc2-f732-4728-ad5d-a7f5cc4a98b1_buggy.java b/tmp/dd06347f-0adc-491b-80b9-9d6920a1fb0c_fixed.java
index 875b31b..d7e89eb 100644
--- a/tmp/b75efdc2-f732-4728-ad5d-a7f5cc4a98b1_buggy.java
+++ b/tmp/dd06347f-0adc-491b-80b9-9d6920a1fb0c_fixed.java
@@ -1,54 +1,46 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
+ * @param indent The initial indentation for the first line.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+                                         int nextLineTabStop, String text, String indent)
 {
-        int pos = findWrapPos(text, width, 0);
+    String padding = createPadding(nextLineTabStop);
+    int pos = findWrapPos(text, width - indent.length(), indent.length());
 
     if (pos == -1)
     {
-            sb.append(rtrim(text));
+        sb.append(indent).append(rtrim(text));
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    sb.append(indent).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        text = text.substring(pos).trim();
+        pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(padding).append(text);
 
             return sb;
         }
         
         if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
         {
             pos = width;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
