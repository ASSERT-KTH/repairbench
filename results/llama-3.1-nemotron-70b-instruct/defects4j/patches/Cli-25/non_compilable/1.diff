diff --git a/tmp/ad6a6189-d969-4254-8d81-37be170cefcd_buggy.java b/tmp/4960df9e-5a6b-4fd3-8324-7c26aee871e8_fixed.java
index 875b31b..0cdef2d 100644
--- a/tmp/ad6a6189-d969-4254-8d81-37be170cefcd_buggy.java
+++ b/tmp/4960df9e-5a6b-4fd3-8324-7c26aee871e8_fixed.java
@@ -1,54 +1,55 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
+ * @param indent The initial indentation level (added in the fix)
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
+                                         int nextLineTabStop, String text, int indent)
 {
-        int pos = findWrapPos(text, width, 0);
+    int pos = findWrapPos(text, width - indent, 0);
 
     if (pos == -1)
     {
-            sb.append(rtrim(text));
+        sb.append(createPadding(indent)).append(rtrim(text));
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    sb.append(createPadding(indent)).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        text = text.substring(pos).trim();
+        pos = findWrapPos(text, width - indent, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
+            sb.append(createPadding(indent)).append(text);
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        if ( (text.length() > width - indent) && (pos == nextLineTabStop - indent - 1) ) 
         {
-                pos = width;
+            pos = width - indent;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(createPadding(indent)).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
