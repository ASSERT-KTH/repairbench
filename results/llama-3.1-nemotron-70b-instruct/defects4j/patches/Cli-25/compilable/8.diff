diff --git a/tmp/16d08fcd-5f27-44bf-95de-ebd19d09944a_buggy.java b/tmp/b304a85b-5503-44d0-9927-bb7be3191a09_fixed.java
index 875b31b..b9dabf3 100644
--- a/tmp/16d08fcd-5f27-44bf-95de-ebd19d09944a_buggy.java
+++ b/tmp/b304a85b-5503-44d0-9927-bb7be3191a09_fixed.java
@@ -1,54 +1,61 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+        // Fix: Adjust the width for the padded text
+        pos = findWrapPos(text, width - nextLineTabStop, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
         
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // Fix: Adjust the conditional logic to handle padded text correctly
+        if ( (text.length() > width) && (pos == text.length() - 1) ) 
         {
-                pos = width;
+            pos = text.length();
+        }
+        else if (pos <= nextLineTabStop) 
+        {
+            // If wrap position is within the padding, move to the end of the padding
+            pos = nextLineTabStop;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
