diff --git a/tmp/7ce6d34c-f100-4d53-b913-30ad3226c304_buggy.java b/tmp/a2a38f0d-5e07-4838-a204-2f33e5c0e570_fixed.java
index e5ad041..26bc41c 100644
--- a/tmp/7ce6d34c-f100-4d53-b913-30ad3226c304_buggy.java
+++ b/tmp/a2a38f0d-5e07-4838-a204-2f33e5c0e570_fixed.java
@@ -1,19 +1,15 @@
 @Override
-    protected JavaType _narrow(Class<?> subclass)
-    {
+protected JavaType _narrow(Class<?> subclass) {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // FIX: Added isAssignableFrom check to ensure sub-class relationship
     if (!_class.isAssignableFrom(subclass)) {
         throw new IllegalArgumentException("Class " + subclass.getName() + " not sub-type of "
                 + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
+    // FIX: Re-resolve bindings and other dependencies to ensure correctness
+    JavaType newType = TypeFactory.defaultInstance().constructSimpleType(subclass, 
+            _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
+    return newType;
 }
\ No newline at end of file
