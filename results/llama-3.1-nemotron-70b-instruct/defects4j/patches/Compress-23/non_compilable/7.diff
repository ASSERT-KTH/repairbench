diff --git a/tmp/b72bb0d0-96da-4ecc-994b-f5228a991834_buggy.java b/tmp/19e5b955-3d0e-443b-845f-2238051f00cd_fixed.java
index 0e18f59..0c02215 100644
--- a/tmp/b72bb0d0-96da-4ecc-994b-f5228a991834_buggy.java
+++ b/tmp/19e5b955-3d0e-443b-845f-2238051f00cd_fixed.java
@@ -1,13 +1,24 @@
+/**
+ * Fixes the decode function to handle larger dictionary sizes by 
+ * using the full 64-bit dictSize in LZMAInputStream constructor.
+ *
+ * @param in      the input stream
+ * @param coder   the coder
+ * @param password the password (not used in this implementation)
+ * @return the decoded input stream
+ * @throws IOException if an I/O error occurs
+ */
 @Override
 InputStream decode(final InputStream in, final Coder coder,
                     byte[] password) throws IOException {
     byte propsByte = coder.properties[0];
-            long dictSize = coder.properties[1];
+    long dictSize = coder.properties[1] & 0xFF; // ensure first byte is treated as unsigned
     for (int i = 1; i < 4; i++) {
-                dictSize |= (coder.properties[i + 1] << (8 * i));
+        dictSize |= ((long) coder.properties[i + 1] & 0xFF) << (8 * i);
     }
     if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
         throw new IOException("Dictionary larger than 4GiB maximum size");
     }
-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
+    // Use the full 64-bit dictSize
+    return new LZMAInputStream(in, -1, propsByte, dictSize);
 }
\ No newline at end of file
