diff --git a/tmp/476636d6-17e0-4bdc-96f2-d1b849c104bb_buggy.java b/tmp/63be474e-d0f8-424e-8fae-3ec05e70073c_fixed.java
index 2955e62..2734bee 100644
--- a/tmp/476636d6-17e0-4bdc-96f2-d1b849c104bb_buggy.java
+++ b/tmp/63be474e-d0f8-424e-8fae-3ec05e70073c_fixed.java
@@ -1,66 +1,71 @@
 /**
  * @return true if the provided reference and declaration can be safely
  *         inlined according to our criteria
  */
 private boolean canInline(
     Reference declaration,
     Reference initialization,
     Reference reference) {
   if (!isValidDeclaration(declaration)
       ||!isValidInitialization(initialization)
       ||!isValidReference(reference)) {
     return false;
   }
 
   // If the value is read more than once, skip it.
   // VAR declarations and EXPR_RESULT don't need the value, but other
   // ASSIGN expressions parents do.
   if (declaration!= initialization &&
      !initialization.getGrandparent().isExprResult()) {
     return false;
   }
 
   // Be very conservative and do no cross control structures or
   // scope boundaries
   if (declaration.getBasicBlock()!= initialization.getBasicBlock()
       || declaration.getBasicBlock()!= reference.getBasicBlock()) {
     return false;
   }
 
   // Do not inline into a call node. This would change
   // the context in which it was being called. For example,
   //   var a = b.c;
   //   a();
   // should not be inlined, because it calls a in the context of b
   // rather than the context of the window.
   //   var a = b.c;
   //   f(a)
   // is ok.
   Node value = initialization.getAssignedValue();
   Preconditions.checkState(value!= null);
   if (value.isGetProp()
       && reference.getParent().isCall()
       && reference.getParent().getFirstChild() == reference.getNode()) {
     return false;
   }
 
   if (value.isFunction()) {
     Node callNode = reference.getParent();
     if (reference.getParent().isCall()) {
       CodingConvention convention = compiler.getCodingConvention();
       // Bug 2388531: Don't inline subclass definitions into class defining
       // calls as this confused class removing logic.
       SubclassRelationship relationship =
           convention.getClassesDefinedByCall(callNode);
       if (relationship!= null) {
         return false;
       }
 
       // issue 668: Don't inline singleton getter methods
       // calls as this confused class removing logic.
+      if (convention.isSingletonGetterMethod(callNode, value)) {
+        return false; // **Added this line to fix the bug**
+      }
+
+      // Additional logic can be added here if needed
     }
   }
 
   return canMoveAggressively(value) ||
       canMoveModerately(initialization, reference);
 }
\ No newline at end of file
