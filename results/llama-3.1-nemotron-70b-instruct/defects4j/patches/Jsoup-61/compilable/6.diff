diff --git a/tmp/d301413c-a1ef-484e-8372-2ee03a820483_buggy.java b/tmp/6f3c0b5e-4e18-4c74-8ba1-600dd84f29ac_fixed.java
index 139579d..ef8c480 100644
--- a/tmp/d301413c-a1ef-484e-8372-2ee03a820483_buggy.java
+++ b/tmp/6f3c0b5e-4e18-4c74-8ba1-600dd84f29ac_fixed.java
@@ -1,43 +1,45 @@
+/**
+ * Checks if this element has the specified class.
+ * 
+ * @param className the class name to check for (case insensitive)
+ * @return true if this element has the class, false otherwise
+ */
 // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
-        final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
+    if (classAttr == null) {
         return false;
     }
     
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
+    final String classNameLower = className.toLowerCase();
+    final String classAttrLower = classAttr.toLowerCase();
+    final int wantLen = classNameLower.length();
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+    // scan for whitespace and compare regions (with no string or arraylist allocations)
     boolean inClass = false;
     int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
+    for (int i = 0; i < classAttrLower.length(); i++) {
+        if (Character.isWhitespace(classAttrLower.charAt(i))) {
             if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                // white space ends a class name, compare it with the requested one
+                if (i - start == wantLen && classAttrLower.regionMatches(start, classNameLower, 0, wantLen)) {
                     return true;
                 }
                 inClass = false;
             }
         } else {
             if (!inClass) {
                 // we're in a class name : keep the start of the substring
                 inClass = true;
                 start = i;
             }
         }
     }
 
     // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
+    if (inClass && classAttrLower.length() - start == wantLen) {
+        return classAttrLower.regionMatches(start, classNameLower, 0, wantLen);
     }
 
     return false;
 }
\ No newline at end of file
