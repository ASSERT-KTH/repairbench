diff --git a/tmp/6a4bfb52-7ec8-4ccc-b9d3-d38f48da82e0_buggy.java b/tmp/5d28a5ad-0da6-4c43-bc36-abe6155e5a01_fixed.java
index 139579d..601b7d6 100644
--- a/tmp/6a4bfb52-7ec8-4ccc-b9d3-d38f48da82e0_buggy.java
+++ b/tmp/5d28a5ad-0da6-4c43-bc36-abe6155e5a01_fixed.java
@@ -1,43 +1,30 @@
 // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
-        final int wantLen = className.length();
-
-        if (len == 0 || len < wantLen) {
+    if (classAttr == null) {
         return false;
     }
 
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
+    final String classNameLower = className.toLowerCase();
+    final String classAttrLower = classAttr.toLowerCase();
+
+    if (classAttrLower.equals(classNameLower)) {
+        return true; // exact match, no whitespace
     }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
+    // scan for whitespace and compare regions (with no string or arraylist allocations)
     int start = 0;
-        for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+    for (int i = 0; i < classAttrLower.length(); i++) {
+        if (Character.isWhitespace(classAttrLower.charAt(i))) {
+            if (i - start == classNameLower.length() 
+                && classAttrLower.regionMatches(start, classNameLower, 0, classNameLower.length())) {
                 return true;
             }
-                    inClass = false;
-                }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
-                }
+            start = i + 1; // reset start after whitespace
         }
     }
 
     // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
-        }
-
-        return false;
+    return classAttrLower.length() - start == classNameLower.length() 
+           && classAttrLower.regionMatches(start, classNameLower, 0, classNameLower.length());
 }
\ No newline at end of file
