diff --git a/tmp/5e864151-6521-4a08-872e-df824dcea5e5_buggy.java b/tmp/d1a60db2-6d55-4fc6-86da-59efa5a3ec81_fixed.java
index f843d29..b9009ab 100644
--- a/tmp/5e864151-6521-4a08-872e-df824dcea5e5_buggy.java
+++ b/tmp/d1a60db2-6d55-4fc6-86da-59efa5a3ec81_fixed.java
@@ -1,68 +1,77 @@
 /**
  * <p>Converts a String to a Locale.</p>
  *
  * <p>This method takes the string format of a locale and creates the
  * locale object from it.</p>
  *
  * <pre>
  *   LocaleUtils.toLocale("en")         = new Locale("en", "")
  *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
  *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
  * </pre>
  *
  * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
  * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
  * Thus, the result from getVariant() may vary depending on your JDK.</p>
  *
  * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
+ * The language code must be lowercase (unless the string starts with an underscore, in which case it's skipped).
+ * The country code must be uppercase if present.
  * The separator must be an underscore.
  * The length must be correct.
  * </p>
  *
  * @param str  the locale String to convert, null returns null
  * @return a Locale, null if null input
  * @throws IllegalArgumentException if the string is an invalid format
  */
 public static Locale toLocale(final String str) {
     if (str == null) {
         return null;
     }
     final int len = str.length();
     if (len < 2) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-        final char ch0 = str.charAt(0);
-            final char ch1 = str.charAt(1);
+    
+    int offset = 0;
+    if (str.charAt(0) == '_') {
+        if (len < 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        offset = 1;
+    }
+    
+    final char ch0 = str.charAt(offset);
+    final char ch1 = str.charAt(offset + 1);
     if (!Character.isLowerCase(ch0) ||!Character.isLowerCase(ch1)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (len == 2) {
-                return new Locale(str);
+    if (len == offset + 2) {
+        return new Locale(str.substring(offset));
     }
-            if (len < 5) {
+    if (len < offset + 5) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (str.charAt(2) != '_') {
+    if (str.charAt(offset + 2)!= '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            final char ch3 = str.charAt(3);
+    final char ch3 = str.charAt(offset + 3);
     if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+        return new Locale(str.substring(offset, offset + 2), "", str.substring(offset + 4));
     }
-            final char ch4 = str.charAt(4);
+    final char ch4 = str.charAt(offset + 4);
     if (!Character.isUpperCase(ch3) ||!Character.isUpperCase(ch4)) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+    if (len == offset + 5) {
+        return new Locale(str.substring(offset, offset + 2), str.substring(offset + 3, offset + 5));
     }
-            if (len < 7) {
+    if (len < offset + 7) {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (str.charAt(5) != '_') {
+    if (str.charAt(offset + 5)!= '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+    return new Locale(str.substring(offset, offset + 2), str.substring(offset + 3, offset + 5), str.substring(offset + 6));
 }
\ No newline at end of file
