diff --git a/tmp/5537c13a-bd54-4b10-a41a-ebf152869338_buggy.java b/tmp/93c1e22e-105a-49c5-aac8-cabcc2470246_fixed.java
index 9353941..02ac119 100644
--- a/tmp/5537c13a-bd54-4b10-a41a-ebf152869338_buggy.java
+++ b/tmp/93c1e22e-105a-49c5-aac8-cabcc2470246_fixed.java
@@ -1,30 +1,43 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean shortCircuitEvaluation) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      VariableLiveness state;
+      if (shortCircuitEvaluation && 
+          (child.getBooleanProp(Node.SHORT_CIRCUIT_EVALUATION) ||
+           child.getParent().getBooleanProp(Node.SHORT_CIRCUIT_EVALUATION))) {
+        state = isVariableReadBeforeKill(child, variable, true);
+        if (state == VariableLiveness.READ) {
+          // If we found a read, and we are in a short circuit evaluation,
+          // we can stop looking because the read will be evaluated before 
+          // any subsequent kills.
+          return state;
+        }
+      } else {
+        state = isVariableReadBeforeKill(child, variable, false);
+      }
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
