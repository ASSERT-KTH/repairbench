diff --git a/tmp/fb10d336-97c4-4bfd-8b05-530222fa6f0c_buggy.java b/tmp/f55113c7-d8eb-4854-84ac-f33184753f4f_fixed.java
index 9353941..4f560ea 100644
--- a/tmp/fb10d336-97c4-4bfd-8b05-530222fa6f0c_buggy.java
+++ b/tmp/f55113c7-d8eb-4854-84ac-f33184753f4f_fixed.java
@@ -1,30 +1,41 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean isShortCircuitingParent) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      boolean isChildShortCircuiting = isShortCircuitingParent &&
+          (child.getParent().isAnd() || child.getParent().isOr() ||
+           child.getParent().isComma());
+      VariableLiveness state = isVariableReadBeforeKill(child, variable, isChildShortCircuiting);
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
+      // If we're in a short-circuiting context and the child is the first
+      // operand of the short-circuiting operator, and we haven't returned yet,
+      // it means the variable hasn't been read or killed yet, but we can't
+      // continue evaluating the rest of the expression because the outcome
+      // of the short-circuiting operator is now determined.
+      if (isShortCircuitingParent && child.getParent().getFirstChild() == child) {
+        return VariableLiveness.MAYBE_LIVE;
+      }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
