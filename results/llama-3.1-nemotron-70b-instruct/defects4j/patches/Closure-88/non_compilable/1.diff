diff --git a/tmp/6f01462e-56d9-40e3-b5db-f888c5fdd7b0_buggy.java b/tmp/6e03b55f-bf23-4205-afcf-fcccdba8635c_fixed.java
index 9353941..be025f9 100644
--- a/tmp/6f01462e-56d9-40e3-b5db-f888c5fdd7b0_buggy.java
+++ b/tmp/6e03b55f-bf23-4205-afcf-fcccdba8635c_fixed.java
@@ -1,30 +1,43 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (child.isExpression() && NodeUtil.is.assignmentOp(child)) {
+        // Handle assignment within larger expression (e.g., `(a=1) && (a=2)`)
+        VariableLiveness state = isVariableReadBeforeKill(child.getFirstChild(), variable);
+        if (state!= VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+        // Recursively check RHS of assignment
+        state = isVariableReadBeforeKill(child.getNext(), variable);
+        if (state!= VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      } else {
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state!= VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+  }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
