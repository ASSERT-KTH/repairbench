diff --git a/tmp/ae3ef5f9-be92-4b5c-b56c-1536904fe395_buggy.java b/tmp/8fdbf560-aa78-4cba-97b2-677ea923f848_fixed.java
index 9353941..669e678 100644
--- a/tmp/ae3ef5f9-be92-4b5c-b56c-1536904fe395_buggy.java
+++ b/tmp/8fdbf560-aa78-4cba-97b2-677ea923f848_fixed.java
@@ -1,30 +1,38 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean inConditional) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
+    } else if (inConditional) {
+      // If we're in a conditional, a read doesn't necessarily mean the 
+      // variable is live after the conditional.
+      return VariableLiveness.MAYBE_LIVE;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      boolean newInConditional = inConditional || 
+                                 (NodeUtil.isBinaryOp(child, Token.AND) || 
+                                  NodeUtil.isBinaryOp(child, Token.OR) ||
+                                  NodeUtil.isTernaryOp(child));
+      VariableLiveness state = isVariableReadBeforeKill(child, variable, newInConditional);
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
