diff --git a/tmp/6ee3c65c-51c8-4158-90f6-c2c384fe7bdd_buggy.java b/tmp/c2940088-6b3d-46c2-9059-9552c0b0c593_fixed.java
index 9353941..130899c 100644
--- a/tmp/6ee3c65c-51c8-4158-90f6-c2c384fe7bdd_buggy.java
+++ b/tmp/c2940088-6b3d-46c2-9059-9552c0b0c593_fixed.java
@@ -1,30 +1,37 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean shortCircuitEvaluated) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
+    } else if (shortCircuitEvaluated) {
+      // In a short-circuit evaluated context (e.g., &&, ||,?:], 
+      // the variable is not live after the first read if the read determines 
+      // the outcome of the whole expression.
+      return VariableLiveness.READ;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      boolean newShortCircuitEvaluated = shortCircuitEvaluated ||
+          NodeUtil.isShortCircuitEvaluated(child, n);
+      VariableLiveness state = isVariableReadBeforeKill(child, variable, newShortCircuitEvaluated);
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
