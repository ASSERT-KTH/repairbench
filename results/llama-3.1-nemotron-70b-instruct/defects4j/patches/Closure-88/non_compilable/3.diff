diff --git a/tmp/7f5aa161-4967-4371-8584-ca732cc7e707_buggy.java b/tmp/07bb75a4-71ba-46c8-ae5a-748f75fe11d8_fixed.java
index 9353941..dd90a76 100644
--- a/tmp/7f5aa161-4967-4371-8584-ca732cc7e707_buggy.java
+++ b/tmp/07bb75a4-71ba-46c8-ae5a-748f75fe11d8_fixed.java
@@ -1,30 +1,54 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
+  // Special handling for short-circuiting operators (e.g., &&, ||,?, :)
+  if (n.isExpression() && 
+      (n.getToken() == Token.AND || n.getToken() == Token.OR || 
+       n.getToken() == Token.HOOK || n.getToken() == TokenConditional)) {
+    // If the variable is referenced in the first operand, and it's not a KILL,
+    // then return that state. This is because the second operand is only 
+    // evaluated if the first operand's value is not enough to determine the 
+    // overall result.
+    VariableLiveness state = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (state!= VariableLiveness.MAYBE_LIVE) {
+      return state;
+    }
+    // Otherwise, check the second operand. If it's a KILL, then return KILL.
+    // If it's a READ, then return MAYBE_LIVE, because the variable may be 
+    // live if the first operand's value is not enough to determine the overall 
+    // result, but dead if it is.
+    state = isVariableReadBeforeKill(n.getLastChild(), variable);
+    if (state == VariableLiveness.KILL) {
+      return VariableLiveness.KILL;
+    } else if (state == VariableLiveness.READ) {
+      return VariableLiveness.MAYBE_LIVE;
+    }
+  }
+
+  // General handling for other types of nodes
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
