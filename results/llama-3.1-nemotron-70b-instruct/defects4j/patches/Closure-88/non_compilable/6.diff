diff --git a/tmp/a8624326-a51f-4b70-acee-56667a5c71e8_buggy.java b/tmp/3c7b389f-8a0d-4b70-af2c-c51b339e7931_fixed.java
index 9353941..64e089d 100644
--- a/tmp/a8624326-a51f-4b70-acee-56667a5c71e8_buggy.java
+++ b/tmp/3c7b389f-8a0d-4b70-af2c-c51b339e7931_fixed.java
@@ -1,30 +1,37 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean inConditionalChain) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      boolean newInConditionalChain = inConditionalChain ||
+          (n.getToken() == Token.AND || n.getToken() == Token.OR);
+      VariableLiveness state = isVariableReadBeforeKill(child, variable, newInConditionalChain);
       if (state!= VariableLiveness.MAYBE_LIVE) {
+        if (inConditionalChain && state == VariableLiveness.KILL) {
+          // If we're in a conditional chain and encounter a KILL, it's effectively a MAYBE_LIVE
+          // because the assignment might not happen if the conditional chain short-circuits.
+          return VariableLiveness.MAYBE_LIVE;
+        }
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
