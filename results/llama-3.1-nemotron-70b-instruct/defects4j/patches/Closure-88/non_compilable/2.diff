diff --git a/tmp/8aa4acba-ab01-47a7-9507-a59b24242f15_buggy.java b/tmp/c0dc3920-acf6-4509-aa70-1a6968d92bcf_fixed.java
index 9353941..24db94c 100644
--- a/tmp/8aa4acba-ab01-47a7-9507-a59b24242f15_buggy.java
+++ b/tmp/c0dc3920-acf6-4509-aa70-1a6968d92bcf_fixed.java
@@ -1,30 +1,40 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+    Node n, String variable, boolean inShortCircuitEvaluation) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      boolean newInShortCircuitEvaluation = inShortCircuitEvaluation ||
+          (n.getToken() == Token.LOGICAL_AND ||
+           n.getToken() == Token.LOGICAL_OR ||
+           n.getToken() == Token.CONDOP);
+      VariableLiveness state = isVariableReadBeforeKill(
+          child, variable, newInShortCircuitEvaluation);
       if (state!= VariableLiveness.MAYBE_LIVE) {
+        // If we're in a short-circuit evaluation and we encounter a KILL,
+        // return MAYBE_LIVE because the assignment may not happen.
+        if (inShortCircuitEvaluation && state == VariableLiveness.KILL) {
+          return VariableLiveness.MAYBE_LIVE;
+        }
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
