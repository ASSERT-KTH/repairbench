diff --git a/tmp/338b73e6-a42a-4d9b-ac07-58cdb7fbd3e0_buggy.java b/tmp/31e83447-a988-4080-808e-1f3dbacf65b9_fixed.java
index 9353941..24deb99 100644
--- a/tmp/338b73e6-a42a-4d9b-ac07-58cdb7fbd3e0_buggy.java
+++ b/tmp/31e83447-a988-4080-808e-1f3dbacf65b9_fixed.java
@@ -1,30 +1,37 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
+      // Check if parent is a conditional expression (e.g., `&&` or `||`)
+      // to handle short-circuiting correctly
+      Node parent = n.getParent();
+      if (parent.isAnd() || parent.isOr()) {
+        // If the variable is assigned in a short-circuiting expression,
+        // it may not be executed if the preceding condition is falsy.
+        return VariableLiveness.MAYBE_LIVE;
+      }
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state!= VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
