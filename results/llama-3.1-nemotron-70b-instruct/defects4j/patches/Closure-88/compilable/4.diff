diff --git a/tmp/ae67e6c6-4d67-44e1-9564-c98d45335a32_buggy.java b/tmp/ea14e788-90e5-4273-bf70-2becfd15dcb9_fixed.java
index 9353941..a066abe 100644
--- a/tmp/ae67e6c6-4d67-44e1-9564-c98d45335a32_buggy.java
+++ b/tmp/ea14e788-90e5-4273-bf70-2becfd15dcb9_fixed.java
@@ -1,30 +1,45 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child!= null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      if (state == VariableLiveness.KILL) {
+        // If we find a KILL, we can return immediately, as subsequent reads won't change the outcome.
         return state;
+      } else if (state == VariableLiveness.READ) {
+        // If we find a READ, we need to continue searching for a potential KILL in the same scope.
+        // If we don't find a KILL, the READ will be returned at the end of the function.
+        continue;
+      }
+      // If state is MAYBE_LIVE, we also continue to the next child.
+    }
+  }
+  // If we've iterated over all children and haven't returned, it means we either found a READ or no reference at all.
+  for (Node child = n.getFirstChild();
+      child!= null; child = child.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      if (state == VariableLiveness.READ) {
+        return state; // return READ if found after KILL was not found.
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
