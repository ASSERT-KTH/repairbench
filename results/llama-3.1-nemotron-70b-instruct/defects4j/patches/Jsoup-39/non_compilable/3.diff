diff --git a/tmp/dea512a0-27a0-4590-b1b5-76c9af90a248_buggy.java b/tmp/9687b503-0035-4e7f-9318-72c9b54dccd1_fixed.java
index c4b260c..3cc91cc 100644
--- a/tmp/dea512a0-27a0-4590-b1b5-76c9af90a248_buggy.java
+++ b/tmp/9687b503-0035-4e7f-9318-72c9b54dccd1_fixed.java
@@ -1,51 +1,65 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the given byte data into a Document, using the provided charset (if any), 
+ * and then checking the document's meta tags for a specified charset.
+ * 
+ * If no charset is provided (i.e., `charsetName` is null), attempts to detect it 
+ * from the HTML content, falling back to UTF-8. If a UTF-8 BOM is detected, 
+ * re-decodes the document using UTF-8.
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
+        // **FIX**: First, check for UTF-8 BOM to avoid incorrect initial decoding
+        if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+            byteData.position(3); // skip BOM
+            charsetName = "UTF-8";
+        } else {
+            byteData.mark(); // mark for potential rewind
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta!= null) { 
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { 
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.reset(); // rewind to beginning
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
+        }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+    // **OBSOLETE**: UTF-8 BOM indicator check is now handled before initial decode
+    // if (docData.length() > 0 && docData.charAt(0) == 65279) {
+    //    ...
+    if (doc == null) {
+        // Check for UTF-8 BOM after final decoding (in case of re-decode)
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+            charsetName = "UTF-8";
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
