diff --git a/tmp/b9f52393-db07-4022-a790-025181b5c792_buggy.java b/tmp/7bb2a126-80e8-45cf-ac7e-3ef007551894_fixed.java
index c4b260c..a9c1816 100644
--- a/tmp/b9f52393-db07-4022-a790-025181b5c792_buggy.java
+++ b/tmp/7bb2a126-80e8-45cf-ac7e-3ef007551894_fixed.java
@@ -1,51 +1,77 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the given byte data into a Document, using the provided charset name and base URI.
+ * If charsetName is null, attempts to detect from HTML meta tags, defaulting to UTF-8.
+ * 
+ * @param byteData    the byte data to parse
+ * @param charsetName the character set to use for parsing (null to auto-detect)
+ * @param baseUri     the base URI for the document
+ * @param parser      the parser to use for HTML parsing
+ * @return the parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
+        // Check for UTF-8 BOM before initial decoding
+        if (byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+            byteData.position(3); // Skip BOM
+            charsetName = "UTF-8";
+        } else {
+            byteData.mark(); // Mark for potential rewind
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta!= null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.reset(); // Rewind to initial position for re-decoding
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
+                } else {
+                    // If no charset detected and initial decode was with defaultCharset, check for UTF-8 BOM in decoded string
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                        charsetName = "UTF-8";
+                        doc = parser.parseInput(docData, baseUri);
+                    }
+                }
+            } else {
+                // If no meta tag and initial decode was with defaultCharset, check for UTF-8 BOM in decoded string
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                    charsetName = "UTF-8";
+                    doc = parser.parseInput(docData, baseUri);
+                }
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        // Check for UTF-8 BOM
+        if (charsetName.equalsIgnoreCase("UTF-8") && byteData.remaining() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+            byteData.position(3); // Skip BOM
+        }
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
