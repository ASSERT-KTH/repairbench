diff --git a/tmp/00d82ebb-7d81-447c-a40e-46e0d11f1d45_buggy.java b/tmp/be3471e1-0f1f-4fc4-8392-b30c57250fa7_fixed.java
index c4b260c..1f950ab 100644
--- a/tmp/00d82ebb-7d81-447c-a40e-46e0d11f1d45_buggy.java
+++ b/tmp/be3471e1-0f1f-4fc4-8392-b30c57250fa7_fixed.java
@@ -1,51 +1,69 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the given byte data into a Document, using the provided charset, base URI, and parser.
+ * If charset is null, attempts to detect from HTML meta tags, defaulting to UTF-8.
+ *
+ * @param byteData    the byte data to parse
+ * @param charsetName the character set to use for decoding (or null to auto-detect)
+ * @param baseUri     the base URI for the document
+ * @param parser      the parser to use for HTML parsing
+ * @return the parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+        // Check for UTF-8 BOM before parsing
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            byteData.rewind();
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        } else {
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta!= null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
                 if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
+        }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
+
+    // Re-parse if doc is null (i.e., we re-decoded or initially detected UTF-8 with BOM)
     if (doc == null) {
+        // Check for UTF-8 BOM again (in case of re-decoding with new charset)
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        }
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
