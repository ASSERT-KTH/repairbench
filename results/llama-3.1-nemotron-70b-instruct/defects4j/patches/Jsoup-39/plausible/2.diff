diff --git a/tmp/94cc2717-1702-467c-bc86-5a73b9d847e3_buggy.java b/tmp/cd8f16f0-c8a3-4587-a963-2d83af229051_fixed.java
index c4b260c..8af4b37 100644
--- a/tmp/94cc2717-1702-467c-bc86-5a73b9d847e3_buggy.java
+++ b/tmp/cd8f16f0-c8a3-4587-a963-2d83af229051_fixed.java
@@ -1,51 +1,67 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the provided byte data into a Document, using the specified charset, base URI, and parser.
+ * If no charset is provided, attempts to determine it from the HTML meta tags, defaulting to UTF-8.
+ * 
+ * @param byteData    the byte data to parse
+ * @param charsetName the charset to use for parsing (or null to auto-detect)
+ * @param baseUri     the base URI for the document
+ * @param parser      the parser to use for parsing
+ * @return the parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+
+    // Check for UTF-8 BOM indicator first, as it takes precedence over everything else
+    if (byteData.remaining() > 2 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+        // Rewind and skip BOM
+        byteData.position(3);
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
+        charsetName = "UTF-8"; // Ensure charset is set to UTF-8
+    } else {
+        if (charsetName == null) { // Determine from meta, safe parse as UTF-8
+            byteData.mark(); // Mark current position to rewind later
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta!= null) { // If not found, will keep UTF-8 as best attempt
                 String foundCharset;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
                 } else {
                     foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // Need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.reset(); // Rewind to original position
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
+                } else {
+                    byteData.reset(); // Rewind to original position if no re-decode needed
                 }
+            } else {
+                byteData.reset(); // Rewind to original position if no meta tag found
             }
-        } else { // specified by content type header (or by user on file load)
+        } else { // Specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
