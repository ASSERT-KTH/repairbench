diff --git a/tmp/f25895a2-91c9-42e6-a2f8-8c36723d4d6b_buggy.java b/tmp/e044f125-1f48-4e3f-83c1-303a6fe20b73_fixed.java
index c4b260c..cc243e5 100644
--- a/tmp/f25895a2-91c9-42e6-a2f8-8c36723d4d6b_buggy.java
+++ b/tmp/e044f125-1f48-4e3f-83c1-303a6fe20b73_fixed.java
@@ -1,51 +1,71 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Fix: Correctly handle UTF-8 BOM when no charset is set and meta charset is not found
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean decodedWithBOM = false;
+
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        decodedWithBOM = docData.length() > 0 && docData.charAt(0) == 65279;
+        if (decodedWithBOM) {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
+                if (decodedWithBOM) {
+                    // Ensure BOM is handled if present in the original decoding
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                    }
+                }
                 doc = null;
+            } else if (decodedWithBOM) {
+                // If meta charset not found but BOM was initially detected, set charset to UTF-8
+                charsetName = defaultCharset;
             }
+        } else if (decodedWithBOM) {
+            // No meta charset found, but BOM was detected, so set charset to UTF-8
+            charsetName = defaultCharset;
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // UTF-8 BOM indicator, takes precedence if not already handled
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
         }
+    }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
