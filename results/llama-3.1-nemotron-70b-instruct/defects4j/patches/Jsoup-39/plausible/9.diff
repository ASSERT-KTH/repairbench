diff --git a/tmp/5b067a96-f98b-4b40-a06c-a3db3cd8e46b_buggy.java b/tmp/8a2769f1-a7cc-4d0a-bff9-ba17c6786920_fixed.java
index c4b260c..be013c6 100644
--- a/tmp/5b067a96-f98b-4b40-a06c-a3db3cd8e46b_buggy.java
+++ b/tmp/8a2769f1-a7cc-4d0a-bff9-ba17c6786920_fixed.java
@@ -1,51 +1,70 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Fixed function to parse byte data into a Document, handling charset detection and UTF-8 BOM.
+ * 
+ * @param byteData    ByteBuffer containing the HTML data
+ * @param charsetName Specified charset, or null to auto-detect from HTML
+ * @param baseUri     Base URI for the document
+ * @param parser      Parser to use for HTML parsing
+ * @return Parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8 initially
+        byteData.mark(); // mark the initial position to allow rewinding later
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        
+        // Check for UTF-8 BOM before attempting to parse as HTML
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            byteData.reset(); // rewind to the initial position
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        } else {
+            byteData.reset(); // rewind for potential re-parsing with detected charset
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta!= null) { 
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        
+        // Handle UTF-8 BOM when charset is specified
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = Charset.forName(charsetName).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
+        }
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName!= null? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
