diff --git a/tmp/78e18c94-935c-467a-acdf-276b319f6df3_buggy.java b/tmp/c7be56a0-59b9-48d4-8e0f-233b929b2b95_fixed.java
index c4b260c..06c42cd 100644
--- a/tmp/78e18c94-935c-467a-acdf-276b319f6df3_buggy.java
+++ b/tmp/c7be56a0-59b9-48d4-8e0f-233b929b2b95_fixed.java
@@ -1,51 +1,72 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the provided byte data into a Document, using the specified charset and base URI.
+ * If charset is null, attempts to detect from HTML meta tags, defaulting to UTF-8.
+ * 
+ * @param byteData    The byte data to parse.
+ * @param charsetName The charset to use for parsing, or null to auto-detect.
+ * @param baseUri     The base URI for the document.
+ * @param parser      The parser to use for HTML parsing.
+ * @return The parsed Document.
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
+        byteData.mark(); // mark the current position to rewind later
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        
+        // Check for UTF-8 BOM indicator before parsing
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            byteData.reset(); // rewind to the original position
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        } else {
+            byteData.reset(); // rewind to the original position for potential re-decoding
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        
+        // Check for UTF-8 BOM indicator
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
         }
+    }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
