diff --git a/tmp/585358a5-bfb3-411d-b707-d572c7ca3605_buggy.java b/tmp/db280184-62b4-4082-a6b9-83da45f7db7e_fixed.java
index c4b260c..8ffcf18 100644
--- a/tmp/585358a5-bfb3-411d-b707-d572c7ca3605_buggy.java
+++ b/tmp/db280184-62b4-4082-a6b9-83da45f7db7e_fixed.java
@@ -1,51 +1,85 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the provided byte data into a Document, using the specified charset and base URI.
+ * If charset is null, attempts to detect from HTML meta tags, defaulting to UTF-8.
+ * 
+ * @param byteData    byte buffer containing HTML data
+ * @param charsetName character set of the byte data (or null to auto-detect)
+ * @param baseUri     base URI for resolving relative links
+ * @param parser      parser to use for HTML parsing
+ * @return parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    boolean bomDetected = false;
+
+    if (charsetName == null) { // determine from meta, safe parse as UTF-8
+        // Initial decode as UTF-8 to check for BOM and meta tags
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
+        
+        // Check for UTF-8 BOM indicator
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            bomDetected = true;
+            docData = docData.substring(1);
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+        
         if (meta!= null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equalsIgnoreCase("UTF-8")) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                if (bomDetected) {
+                    // If BOM was already detected and removed, no need to check again
+                    doc = parser.parseInput(docData, baseUri);
+                } else {
+                    // Re-check for BOM in the re-decoded data
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
                     }
+                    doc = parser.parseInput(docData, baseUri);
+                }
+            } else if (bomDetected) {
+                // If we initially detected a BOM and the charset is indeed UTF-8 (or remains undetected),
+                // ensure the document reflects UTF-8 and has the BOM handled
+                doc.outputSettings().charset("UTF-8");
+            }
+        } else if (bomDetected) {
+            // No meta charset found, but BOM was detected; ensure UTF-8 is set
+            doc.outputSettings().charset("UTF-8");
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check for UTF-8 BOM indicator, but only if the specified charset is UTF-8
+        if (charsetName.equalsIgnoreCase("UTF-8") && docData.length() > 0 && docData.charAt(0) == 65279) {
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+        doc = parser.parseInput(docData, baseUri);
+    }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName!= null? charsetName : "UTF-8");
     }
     return doc;
 }
\ No newline at end of file
