diff --git a/tmp/ff1469b2-9b3e-46bf-b344-d0fb79e763de_buggy.java b/tmp/1c9eae57-5550-4fa7-a569-ae1b16eef8c4_fixed.java
index c4b260c..13a346d 100644
--- a/tmp/ff1469b2-9b3e-46bf-b344-d0fb79e763de_buggy.java
+++ b/tmp/1c9eae57-5550-4fa7-a569-ae1b16eef8c4_fixed.java
@@ -1,51 +1,64 @@
-    // todo - this is getting gnarly. needs a rewrite.
+/**
+ * Parses the given byte data into a Document, attempting to detect the charset if not provided.
+ * 
+ * @param byteData     the byte data to parse
+ * @param charsetName  the charset to use, or null to auto-detect
+ * @param baseUri      the base URI for the document
+ * @param parser       the parser to use for HTML parsing
+ * @return the parsed Document
+ */
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
+    boolean retryWithUtf8BomHandling = charsetName == null; // determine from meta, or handle UTF-8 BOM
+
+    while (true) {
+        if (charsetName == null) { 
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        } else { 
+            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+            docData = Charset.forName(charsetName).decode(byteData).toString();
+        }
+
+        // UTF-8 BOM indicator handling (takes precedence over everything else, rarely used)
+        if (retryWithUtf8BomHandling && docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+            charsetName = "UTF-8"; // explicitly set to UTF-8 when BOM is found
+        } else {
+            retryWithUtf8BomHandling = false; // prevent infinite loop
+        }
+
         doc = parser.parseInput(docData, baseUri);
+
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta!= null) { 
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset!= null && foundCharset.length()!= 0 &&!foundCharset.equals(charsetName)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                continue; // retry with newly detected charset
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        break; // exit loop when no more retries are needed
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
