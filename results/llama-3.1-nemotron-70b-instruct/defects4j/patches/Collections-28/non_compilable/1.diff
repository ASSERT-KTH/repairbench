diff --git a/tmp/ec77b046-0d16-4a7c-bb86-39eaae1b618a_buggy.java b/tmp/50cd683a-5738-4cee-b9c3-bc201e6f4da6_fixed.java
index e69de29..7842f54 100644
--- a/tmp/ec77b046-0d16-4a7c-bb86-39eaae1b618a_buggy.java
+++ b/tmp/50cd683a-5738-4cee-b9c3-bc201e6f4da6_fixed.java
@@ -0,0 +1,42 @@
+/**
+ * Returns a view of the portions of this trie whose keys are prefixed by the given prefix.
+ * Note that the returned map will throw {@link IllegalArgumentException} on attempts to insert, update, or remove mappings.
+ * 
+ * @param <K>  the type of the keys in this trie
+ * @param <V>  the type of the values in this trie
+ * @param prefix the prefix to filter by, may be null
+ * @return a SortedMap view of the mapped values
+ */
+public <K extends String, V> SortedMap<K, V> prefixMap(K prefix) {
+    // Create a custom SortedMap implementation that delegates to the trie for read operations
+    // and updates the trie in write operations (like clear())
+    return new AbstractSortedMap<K, V>() {
+        @Override
+        public SortedSet<K> keySet() {
+            // Filter the original trie's key set based on the prefix
+            return new TreeSet<>(keySet().stream()
+                   .filter(k -> k.startsWith(prefix))
+                   .collect(Collectors.toList()));
+        }
+
+        @Override
+        public Collection<V> values() {
+            // Filter the original trie's values based on the keys that match the prefix
+            return keySet().stream()
+                   .map(trie::get)
+                   .collect(Collectors.toList());
+        }
+
+        @Override
+        public void clear() {
+            // Update the original trie when the prefix map is cleared
+            keySet().forEach(trie::remove);
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            // Preserve the comparator from the original trie
+            return PatriciaTrie.this.comparator();
+        }
+    };
+}
\ No newline at end of file
