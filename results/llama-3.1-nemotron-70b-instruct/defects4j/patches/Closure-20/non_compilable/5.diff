diff --git a/tmp/16738b44-c098-4bcf-8647-68481ada8bf2_buggy.java b/tmp/8c3cefb9-4d8a-4532-8b4c-746790ea6ef1_fixed.java
index d4e6d48..17b52b8 100644
--- a/tmp/16738b44-c098-4bcf-8647-68481ada8bf2_buggy.java
+++ b/tmp/8c3cefb9-4d8a-4532-8b4c-746790ea6ef1_fixed.java
@@ -1,23 +1,37 @@
+/**
+ * Attempts to fold a simple `String(a)` function call into `''.concat(a)`.
+ * This optimization is only valid for immutable literals.
+ * 
+ * @param n the node to attempt folding on
+ * @return the folded node, or the original node if folding was not possible
+ */
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget!= null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
+      if (value!= null && value.isImmutableLiteral()) {
+        // Use concat to preserve semantics for nullable/undefined values
+        Node emptyString = IR.string("").srcref(callTarget);
+        Node concatMethod = IR.getProp(emptyString, "concat").srcref(callTarget);
+        Node callConcat = IR.call(concatMethod, value.detachFromParent()).srcref(n);
+        n.getParent().replaceChild(n, callConcat);
         reportCodeChange();
-        return addition;
+        return callConcat;
       }
     }
     return n;
 }
+
+/**
+ * Helper method to determine if a node is an immutable literal.
+ * 
+ * @param node the node to check
+ * @return true if the node is an immutable literal, false otherwise
+ */
+private boolean isImmutableLiteral(Node node) {
+    // Immutable literals: null, undefined, numbers, booleans, and string literals
+    return node.isNullLiteral() || node.isUndefined() ||
+           node.isNumber() || node.isBoolean() || node.isString();
+}
\ No newline at end of file
