diff --git a/tmp/b4b237ca-e6b4-4d1a-bc6b-4db627dde96c_buggy.java b/tmp/638a0b1f-f0ce-4e6d-8ef5-01a9c64fd472_fixed.java
index d4e6d48..94aa2bf 100644
--- a/tmp/b4b237ca-e6b4-4d1a-bc6b-4db627dde96c_buggy.java
+++ b/tmp/638a0b1f-f0ce-4e6d-8ef5-01a9c64fd472_fixed.java
@@ -1,23 +1,35 @@
+/**
+ * Attempts to fold a simple function call to `String(a)` into `'' + (a)`.
+ * This optimization is only applied when `a` is an immutable literal.
+ *
+ * @param n the Node to attempt folding on
+ * @return the folded Node, or the original Node if folding was not possible
+ */
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget!= null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value!= null && isImmutableLiteral(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
 }
+
+// Helper function to check if a node represents an immutable literal
+private boolean isImmutableLiteral(Node node) {
+    return node.isNumber() || node.isString() || node.isNull() || node.isBoolean();
+}
\ No newline at end of file
