diff --git a/tmp/210c4cfe-1ab8-4530-9cb9-ab19287445ad_buggy.java b/tmp/59f39cba-7eca-4e38-bb57-37deee687285_fixed.java
index d4e6d48..56a5313 100644
--- a/tmp/210c4cfe-1ab8-4530-9cb9-ab19287445ad_buggy.java
+++ b/tmp/59f39cba-7eca-4e38-bb57-37deee687285_fixed.java
@@ -1,23 +1,34 @@
+/**
+ * Tries to fold a simple function call to String(...), where the argument is an 
+ * immutable literal, into a concatenation with an empty string.
+ * 
+ * @param n the node to attempt to fold
+ * @return the folded node, or the original node if folding was not possible
+ */
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget!= null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value!= null && 
+          (value.isNumber() || 
+           (value.isString() &&!value.getString().isEmpty()) || 
+           value.isNull() || 
+           value.isBoolean())) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
 }
\ No newline at end of file
