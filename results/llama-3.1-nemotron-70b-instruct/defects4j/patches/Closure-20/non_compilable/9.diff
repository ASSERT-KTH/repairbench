diff --git a/tmp/ca8ccaec-d3b4-4266-9cad-1595563d8107_buggy.java b/tmp/54e694bb-8e38-41dd-9382-50d97f29c02f_fixed.java
index d4e6d48..167791f 100644
--- a/tmp/ca8ccaec-d3b4-4266-9cad-1595563d8107_buggy.java
+++ b/tmp/54e694bb-8e38-41dd-9382-50d97f29c02f_fixed.java
@@ -1,23 +1,26 @@
+/**
+ * Tries to fold a simple function call to 'String(a)' into '' + (a) for 
+ * immutable literals, enabling further optimizations.
+ *
+ * @param n the node to attempt folding on
+ * @return the potentially folded node, or the original node if no fold occurred
+ */
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget!= null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+      // Fold String(a) to '' + (a) on immutable literals
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value!= null && 
+          (value.isNumber() || value.isString() || value.isNull() || value.isBoolean())) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
 }
\ No newline at end of file
