diff --git a/tmp/55b5aff0-4770-4db8-a5ff-c6c52d06140d_buggy.java b/tmp/02194a87-c7de-4628-a9c9-bf18988eb3c4_fixed.java
index 3075782..7aa0649 100644
--- a/tmp/55b5aff0-4770-4db8-a5ff-c6c52d06140d_buggy.java
+++ b/tmp/02194a87-c7de-4628-a9c9-bf18988eb3c4_fixed.java
@@ -1,82 +1,122 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
   // CALL NODE: [ NAME, ARG1, ARG2,... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null ||!cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2,... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  Map<String, Integer> paramReferenceCount = new HashMap<>();
+  while (fnParam!= null) {
+    // Initialize reference count for each parameter
+    paramReferenceCount.put(fnParam.getString(), 0);
+    fnParam = fnParam.getNext();
+  }
+
+  // Count references to each parameter in the function block
+  NodeUtil.traverse(block, new NodeUtil.Visitor() {
+    @Override
+    public void visit(Node node) {
+      if (node.isName() && paramReferenceCount.containsKey(node.getString())) {
+        paramReferenceCount.put(node.getString(), paramReferenceCount.get(node.getString()) + 1);
+      }
+    }
+  });
+
+  fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg!= null || fnParam!= null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam!= null) {
       if (cArg!= null) {
         if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           return CanInlineResult.NO;
         }
         // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && paramReferenceCount.get(fnParam.getString()) > 1) {
+          return CanInlineResult.NO;
+        }
+        // Check if function modifies the parameter (testNoInlineIfParametersModified8, 9)
+        if (NodeUtil.functionModifiesParameter(block, fnParam.getString())) {
           return CanInlineResult.NO;
         }
       }
 
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg!= null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
+
+// Add this new utility method to NodeUtil.java
+public static boolean functionModifiesParameter(Node block, String paramName) {
+  NodeUtil.Visitor visitor = new NodeUtil.Visitor() {
+    boolean modifiesParameter = false;
+
+    @Override
+    public void visit(Node node) {
+      if (node.isAssign() && node.getFirstChild().isName() && node.getFirstChild().getString().equals(paramName)) {
+        modifiesParameter = true;
+      }
+      // Also check for array and property assignments (e.g., a[0] = 2, a.b = 2)
+      if ((node.isAssign() && node.getFirstChild().isArrayAccess() && node.getFirstChild().getFirstChild().isName() && node.getFirstChild().getFirstChild().getString().equals(paramName))
+          || (node.isAssign() && node.getFirstChild().isObjectProperty() && node.getFirstChild().getFirstChild().isName() && node.getFirstChild().getFirstChild().getString().equals(paramName))) {
+        modifiesParameter = true;
+      }
+    }
+  };
+  NodeUtil.traverse(block, visitor);
+  return visitor.modifiesParameter;
+}
\ No newline at end of file
