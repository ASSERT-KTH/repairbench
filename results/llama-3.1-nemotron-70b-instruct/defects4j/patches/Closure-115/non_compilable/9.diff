diff --git a/tmp/a4419560-d46b-4b98-af43-ecdea7edd71f_buggy.java b/tmp/be64f3d3-d72d-4ab5-abe2-7f38d612e68c_fixed.java
index 3075782..f655b4f 100644
--- a/tmp/a4419560-d46b-4b98-af43-ecdea7edd71f_buggy.java
+++ b/tmp/be64f3d3-d72d-4ab5-abe2-7f38d612e68c_fixed.java
@@ -1,82 +1,105 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
       hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
     }
   }
   // CALL NODE: [ NAME, ARG1, ARG2,... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null ||!cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2,... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg!= null || fnParam!= null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam!= null) {
       if (cArg!= null) {
         if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           return CanInlineResult.NO;
         }
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+        // **FIXED**: Check if the function parameter is modified within the function body
+        if (NodeUtil.isParameterModifiedWithinFunction(block, fnParam.getString())) {
+          return CanInlineResult.NO;
+        }
       }
 
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg!= null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
+
+// **NEW METHOD** (to be added to the NodeUtil class)
+public static boolean isParameterModifiedWithinFunction(Node functionBody, String paramName) {
+  // Traverse the function body and check if the parameter is modified
+  // (e.g., assigned to, incremented, etc.)
+  // This is a simplified example and might need to be adjusted based on the actual Node structure
+  for (Node node = functionBody.getFirstChild(); node!= null; node = node.getNext()) {
+    if (node.isAssignment() && node.getFirstChild().getString().equals(paramName)) {
+      return true;
+    }
+    if (node.isIncrement() || node.isDecrement()) {
+      if (node.getFirstChild().getString().equals(paramName)) {
+        return true;
+      }
+    }
+    // Add more checks as necessary
+  }
+  return false;
+}
\ No newline at end of file
