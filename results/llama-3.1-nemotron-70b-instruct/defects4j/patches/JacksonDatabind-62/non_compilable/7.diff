diff --git a/tmp/71e8d145-68d9-4687-bd66-1b6dc0a2226e_buggy.java b/tmp/8c0e98cc-238a-4414-a03d-1c0ba628f513_fixed.java
index 6c9090f..7f0ba04 100644
--- a/tmp/71e8d145-68d9-4687-bd66-1b6dc0a2226e_buggy.java
+++ b/tmp/8c0e98cc-238a-4414-a03d-1c0ba628f513_fixed.java
@@ -1,45 +1,57 @@
 /**
  * Method called to finalize setup of this deserializer,
  * when it is known for which property deserializer is needed
  * for.
  */
 @Override
 public CollectionDeserializer createContextual(DeserializationContext ctxt,
         BeanProperty property) throws JsonMappingException
 {
     // May need to resolve types for delegate-based creators:
     JsonDeserializer<Object> delegateDeser = null;
     if (_valueInstantiator!= null) {
         if (_valueInstantiator.canCreateUsingDelegate()) {
             JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
             if (delegateType == null) {
                 throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                         +": value instantiator ("+_valueInstantiator.getClass().getName()
                         +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
             }
             delegateDeser = findDeserializer(ctxt, delegateType, property);
+        } else if (_valueInstantiator instanceof ArrayDelegatorCreatorForCollection) {
+            // Handle unmodifiable collections (e.g., Collections$UnmodifiableSet)
+            if (ctxt.getConfig().canOverrideAccessModifiers() 
+                    || JavaBeanAccessor.isAllowedOverride(_valueInstantiator.getClass(), Modifier.PRIVATE)) {
+                try {
+                    return withResolved(null, _valueDeserializer, _valueTypeDeserializer, 
+                                        findFormatFeature(ctxt, property, Collection.class, 
+                                                          JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
+                } catch (NoClassDefFoundError | NoSuchMethodException e) {
+                    // Fallback to original behavior if reflection fails
+                }
+            }
         }
     }
     // [databind#1043]: allow per-property allow-wrapping of single overrides:
     // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
     //   comes down to "List vs Collection" I suppose... for now, pass Collection
     Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
             JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
     // also, often value deserializer is resolved here:
     JsonDeserializer<?> valueDeser = _valueDeserializer;
     
     // May have a content converter
     valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
     final JavaType vt = _collectionType.getContentType();
     if (valueDeser == null) {
         valueDeser = ctxt.findContextualValueDeserializer(vt, property);
     } else { // if directly assigned, probably not yet contextual, so:
         valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
     }
     // and finally, type deserializer needs context as well
     TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
     if (valueTypeDeser!= null) {
         valueTypeDeser = valueTypeDeser.forProperty(property);
     }
     return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
 }
\ No newline at end of file
