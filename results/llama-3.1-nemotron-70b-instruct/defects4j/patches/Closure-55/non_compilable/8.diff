diff --git a/tmp/61f76fab-808d-4165-a877-8f5041aa11bf_buggy.java b/tmp/966d1aff-bd47-4983-a0c7-4dd5164cd730_fixed.java
index 43937f5..cb07f7d 100644
--- a/tmp/61f76fab-808d-4165-a877-8f5041aa11bf_buggy.java
+++ b/tmp/966d1aff-bd47-4983-a0c7-4dd5164cd730_fixed.java
@@ -1,3 +1,39 @@
+/**
+ * Checks if the given node represents a reducable function expression.
+ * A reducable function expression is a function expression that is not a 
+ * constructor invocation and does not have any side effects in its 
+ * property getters.
+ * 
+ * @param n the node to check
+ * @return true if the node is a reducable function expression, false otherwise
+ */
 private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    // Check if the node is a function expression
+    if (!NodeUtil.isFunctionExpression(n)) {
+        return false;
+    }
+    
+    // Check if the function expression is a constructor invocation
+    if (n.getParent()!= null && n.getParent().isCall() && n.getParent().getChildAtIndex(0) == n) {
+        return false;
+    }
+    
+    // Check for property getters with side effects
+    for (Node child : n.getChildren()) {
+        if (child.isObjectPattern() && hasSideEffectsInGetters(child)) {
+            return false;
+        }
+    }
+    
+    return true;
+}
+
+// Helper method to check for side effects in property getters
+private static boolean hasSideEffectsInGetters(Node objectPattern) {
+    for (Node property : objectPattern.getChildren()) {
+        if (property.isGetProp() &&!NodeUtil.isPureFunction(property.getChildAtIndex(1))) {
+            return true;
+        }
+    }
+    return false;
 }
\ No newline at end of file
