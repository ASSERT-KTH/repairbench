diff --git a/tmp/37c78e91-36ed-45a9-a3a1-1e8b1c6d3e7a_buggy.java b/tmp/53e0446a-57e6-40ff-82df-05740f7ba1f0_fixed.java
index 43937f5..7f60ab9 100644
--- a/tmp/37c78e91-36ed-45a9-a3a1-1e8b1c6d3e7a_buggy.java
+++ b/tmp/53e0446a-57e6-40ff-82df-05740f7ba1f0_fixed.java
@@ -1,3 +1,33 @@
+/**
+ * Checks if a given Node represents a reducable function expression.
+ * A reducable function expression is a function expression that is not a constructor
+ * and does not have any side effects in its property getters.
+ *
+ * @param n the Node to check
+ * @return true if the Node represents a reducable function expression, false otherwise
+ */
 private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    return NodeUtil.isFunctionExpression(n) 
+           &&!NodeUtil.isConstructor(n)
+           &&!hasSideEffectsInPropertyGetters(n);
+}
+
+// Helper method to check for side effects in property getters
+private static boolean hasSideEffectsInPropertyGetters(Node n) {
+    for (Node child : n.getChildren()) {
+        if (child.isProperty() && child.getFirstChild().isGetProp()) {
+            Node getter = child.getFirstChild().getLastChild();
+            if (hasSideEffects(getter)) {
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
+// Helper method to check for side effects in a Node (e.g., function calls, assignments)
+private static boolean hasSideEffects(Node n) {
+    // Implement side effect detection, e.g., using NodeUtil or custom logic
+    // For brevity, a simple example is provided; you may need to expand this
+    return n.isCall() || n.isAssign();
 }
\ No newline at end of file
