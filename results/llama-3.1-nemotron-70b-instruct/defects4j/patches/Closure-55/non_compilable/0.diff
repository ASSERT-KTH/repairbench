diff --git a/tmp/218de270-bb2f-414d-aeb0-a80c69feeb23_buggy.java b/tmp/da8919dd-3541-4bcf-8bc2-d91a6642f963_fixed.java
index 43937f5..4a07221 100644
--- a/tmp/218de270-bb2f-414d-aeb0-a80c69feeb23_buggy.java
+++ b/tmp/da8919dd-3541-4bcf-8bc2-d91a6642f963_fixed.java
@@ -1,3 +1,27 @@
+/**
+ * Checks if the given node represents a reducable function expression.
+ * A function expression is considered reducable if it's not a constructor 
+ * and doesn't have more than one getter/setter in its prototype.
+ *
+ * @param n the node to check
+ * @return true if the node represents a reducable function expression, false otherwise
+ */
 private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    return NodeUtil.isFunctionExpression(n) 
+        &&!NodeUtil.isConstructor(n) 
+        && countGettersAndSettersInPrototype(n) <= 1;
+}
+
+// Helper method to count getters and setters in the prototype of a function
+private static int countGettersAndSettersInPrototype(Node n) {
+    int count = 0;
+    Node prototype = NodeUtil.getPrototype(n);
+    if (prototype!= null) {
+        for (Node child : prototype.getChildren()) {
+            if (child.isGetter() || child.isSetter()) {
+                count++;
+            }
+        }
+    }
+    return count;
 }
\ No newline at end of file
