diff --git a/tmp/04a68495-6762-418b-8ee9-1f6494040b94_buggy.java b/tmp/888f14f2-08e1-46dd-88c5-0ec4da25223d_fixed.java
index 43937f5..08d0e99 100644
--- a/tmp/04a68495-6762-418b-8ee9-1f6494040b94_buggy.java
+++ b/tmp/888f14f2-08e1-46dd-88c5-0ec4da25223d_fixed.java
@@ -1,3 +1,37 @@
+/**
+ * Checks if a given node represents a reducable function expression.
+ * A function expression is considered reducable if it's not a constructor
+ * and doesn't have more than one property with a getter/setter in its prototype.
+ *
+ * @param n the node to check
+ * @return true if the node represents a reducable function expression, false otherwise
+ */
 private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    // Check if the node is a function expression
+    if (!NodeUtil.isFunctionExpression(n)) {
+        return false;
+    }
+    
+    // Check if the function is a constructor
+    if (NodeUtil.isConstructor(n)) {
+        return false;
+    }
+    
+    // Get the prototype properties
+    Node prototypeProperties = NodeUtil.getPrototypeProperties(n);
+    
+    // Count the number of properties with getters or setters in the prototype
+    int getterSetterCount = 0;
+    if (prototypeProperties!= null) {
+        for (Node property : prototypeProperties.getChildren()) {
+            if (property.hasChildNode(NodeType.GETPROP) || property.hasChildNode(NodeType.SETPROP)) {
+                getterSetterCount++;
+                if (getterSetterCount > 1) {
+                    return false;
+                }
+            }
+        }
+    }
+    
+    return true;
 }
\ No newline at end of file
