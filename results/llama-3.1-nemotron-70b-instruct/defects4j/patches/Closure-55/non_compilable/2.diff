diff --git a/tmp/b8de1e28-6088-4bcb-8f32-33a94f128e03_buggy.java b/tmp/020e1187-8130-4675-9f8e-eb176c2ebb59_fixed.java
index 43937f5..99c6150 100644
--- a/tmp/b8de1e28-6088-4bcb-8f32-33a94f128e03_buggy.java
+++ b/tmp/020e1187-8130-4675-9f8e-eb176c2ebb59_fixed.java
@@ -1,3 +1,40 @@
+/**
+ * Checks if a given node is a reducable function expression.
+ * A reducable function expression is a function expression that is not immediately invoked
+ * and does not have any side effects in its initializer.
+ *
+ * @param n The node to check
+ * @return True if the node is a reducable function expression, false otherwise
+ */
 private static boolean isReduceableFunctionExpression(Node n) {
-    return NodeUtil.isFunctionExpression(n);
+    // Check if the node is a function expression
+    if (!NodeUtil.isFunctionExpression(n)) {
+        return false;
+    }
+    
+    // Check if the function expression is immediately invoked
+    if (n.getParent()!= null && n.getParent().isCall()) {
+        return false;
+    }
+    
+    // Check for any side effects in the initializer (e.g., function calls, assignments)
+    if (hasSideEffects(n)) {
+        return false;
+    }
+    
+    return true;
+}
+
+// Helper method to check for side effects in a node
+private static boolean hasSideEffects(Node n) {
+    // Recursively traverse the node's children
+    for (Node child : n.getChildren()) {
+        if (child.isCall() || child.isAssign()) {
+            return true; // Found a potential side effect
+        }
+        if (hasSideEffects(child)) {
+            return true; // Found a side effect in a child node
+        }
+    }
+    return false; // No side effects found
 }
\ No newline at end of file
