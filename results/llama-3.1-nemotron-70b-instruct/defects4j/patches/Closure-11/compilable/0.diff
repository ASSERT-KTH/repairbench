diff --git a/tmp/bbae3784-56cb-41c9-b7dd-22add2c429fc_buggy.java b/tmp/78d18433-376b-4f5d-a390-a9cb09027e9a_fixed.java
index 57c40b2..ce33612 100644
--- a/tmp/bbae3784-56cb-41c9-b7dd-22add2c429fc_buggy.java
+++ b/tmp/78d18433-376b-4f5d-a390-a9cb09027e9a_fixed.java
@@ -1,27 +1,33 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType()!= null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+        // Fix for testGetprop4: check for null/undefined in assignment
+        if (validator.expectNotNullOrUndefined(t, n, childType, 
+            "Cannot set properties on this expression", getNativeType(OBJECT_TYPE))) {
+            checkPropertyAccess(childType, property.getString(), t, n);
+        }
+    } else {
+        if (validator.expectNotNullOrUndefined(t, n, childType, 
             "No properties on this expression", getNativeType(OBJECT_TYPE))) {
             checkPropertyAccess(childType, property.getString(), t, n);
         }
+    }
     ensureTyped(t, n);
 }
\ No newline at end of file
