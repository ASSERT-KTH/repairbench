diff --git a/tmp/3246ed27-fde1-457d-8ca5-9f4262306fc5_buggy.java b/tmp/1577d250-300b-4712-a341-f1786384de43_fixed.java
index 57c40b2..31b4753 100644
--- a/tmp/3246ed27-fde1-457d-8ca5-9f4262306fc5_buggy.java
+++ b/tmp/1577d250-300b-4712-a341-f1786384de43_fixed.java
@@ -1,27 +1,37 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
   // Lots of types can appear on the left, a call to a void function can
   // never be on the left. getPropertyType will decide what is acceptable
   // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
   } else if (n.getJSType()!= null && parent.isAssign()) {
+    // Fix for testGetprop4: Check for null or undefined before assignment
+    if (childType.isNull() || childType.isUndefined()) {
+      report(t, objNode, TypeValidator.ILLEGAL_PROPERTY_ASSIGN, 
+             "Cannot assign property to", childType.toString());
+    }
     return;
   } else if (validator.expectNotNullOrUndefined(t, n, childType,
       "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    // Fix for testIssue810: Check if property is defined on the object
+    if (!childType.getPropertyType(property.getString()).is.extractType().isUnknownType()) {
+      report(t, property, TypeValidator.UNKNOWN_PROPERTY_ACCESS, 
+             "Property", property.getString(), "never defined on", childType.toString());
+    }
     checkPropertyAccess(childType, property.getString(), t, n);
   }
   ensureTyped(t, n);
 }
\ No newline at end of file
