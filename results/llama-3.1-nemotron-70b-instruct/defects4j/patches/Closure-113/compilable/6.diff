diff --git a/tmp/452795f3-2a55-4f03-888c-26ab919ce2e9_buggy.java b/tmp/84a5673a-2b46-4724-84df-aade92d50b72_fixed.java
index 29a9d2f..7c6d0a2 100644
--- a/tmp/452795f3-2a55-4f03-888c-26ab919ce2e9_buggy.java
+++ b/tmp/84a5673a-2b46-4724-84df-aade92d50b72_fixed.java
@@ -1,43 +1,43 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
+    if (provided == null) {
+      // Always report unrecognized requires, even if not explicitly provided
+      unrecognizedRequires.add(
+          new UnrecognizedRequire(n, ns, t.getSourceName()));
+      // Remove the require to prevent undeclared variable issues
+      parent.detachFromParent();
+      compiler.reportCodeChange();
+    } else if (!provided.isExplicitlyProvided()) {
       unrecognizedRequires.add(
           new UnrecognizedRequire(n, ns, t.getSourceName()));
     } else {
       JSModule providedModule = provided.explicitModule;
 
       // This must be non-null, because there was an explicit provide.
       Preconditions.checkNotNull(providedModule);
 
       JSModule module = t.getModule();
       if (moduleGraph!= null &&
           module!= providedModule &&
          !moduleGraph.dependsOn(module, providedModule)) {
         compiler.report(
             t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                 providedModule.getName(),
                 module.getName()));
       }
+      // Remove the require only if it's explicitly provided
+      parent.detachFromParent();
+      compiler.reportCodeChange();
     }
 
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
-
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
-        parent.detachFromParent();
-        compiler.reportCodeChange();
-      }
   }
 }
\ No newline at end of file
