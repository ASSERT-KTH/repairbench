diff --git a/tmp/e1ec135b-c063-41ce-bbb7-e8a646763163_buggy.java b/tmp/9363a16d-7931-4bb9-ac0f-a33038502734_fixed.java
index 29a9d2f..a9df2e8 100644
--- a/tmp/e1ec135b-c063-41ce-bbb7-e8a646763163_buggy.java
+++ b/tmp/9363a16d-7931-4bb9-ac0f-a33038502734_fixed.java
@@ -1,43 +1,57 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
       if (provided == null ||!provided.isExplicitlyProvided()) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph!= null &&
             module!= providedModule &&
            !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
+      // FIX: Check if 'goog' is already in the symbol table before adding
+      if (!isInSymbolTable("goog")) {
         maybeAddToSymbolTable(left);
+      }
       maybeAddStringNodeToSymbolTable(arg);
 
       // Requires should be removed before further processing.
       // Some clients run closure pass multiple times, first with
       // the checks for broken requires turned off. In these cases, we
       // allow broken requires to be preserved by the first run to
       // let them be caught in the subsequent run.
       if (provided!= null) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
 }
+
+// Assuming isInSymbolTable is already implemented, if not, here's a simple implementation
+private boolean isInSymbolTable(String name) {
+    // Iterate over the symbol table
+    for (Symbol symbol : symbolTable) {
+        if (symbol.getName().equals(name)) {
+            return true;
+        }
+    }
+    return false;
+}
\ No newline at end of file
