diff --git a/tmp/5a92691a-cf31-4812-b117-0adf8f9294c6_buggy.java b/tmp/b1a54cdf-217d-4b87-bd5e-9f3f2627960e_fixed.java
index 7d8d756..ee74651 100644
--- a/tmp/5a92691a-cf31-4812-b117-0adf8f9294c6_buggy.java
+++ b/tmp/b1a54cdf-217d-4b87-bd5e-9f3f2627960e_fixed.java
@@ -1,48 +1,76 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId!= null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
     if (p.getCurrentToken()!= JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
+    
+    // Advance to the first field (type id or regular field)
+    p.nextToken();
+
+    // Check if the first field is the type id
+    if (p.getCurrentToken() == JsonToken.FIELD_NAME && p.getText().equals(_typePropertyName)) {
+        // Consume the type id field name
+        p.nextToken();
+        // Consume the type id value
         final String typeId = p.getText();
+        p.nextToken(); // Advance to the next field (either START_OBJECT or another field)
+        
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
         
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (_typeIdVisible && p.getCurrentToken() == JsonToken.FIELD_NAME) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
+            while (p.getCurrentToken()!= JsonToken.END_OBJECT) {
+                tb.copyCurrentEvent(p);
+                p.nextToken();
+            }
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
+            tb.writeEndObject(); // Close the object
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
+        } else if (p.getCurrentToken()!= JsonToken.START_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                    "need JSON Object to contain type information for class "+baseTypeName());
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken()!= JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
+    } else if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // No type info, just regular object deserialization
+        final String typeId = null; // or determine default type id if needed
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        Object value = deser.deserialize(p, ctxt);
+        // And then need the closing END_OBJECT
+        if (p.nextToken()!= JsonToken.END_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                    "expected closing END_OBJECT after deserialized value");
+        }
+        return value;
+    } else {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "need JSON String that contains type id (for subtype of "+baseTypeName()+") or START_OBJECT");
+    }
 }
\ No newline at end of file
