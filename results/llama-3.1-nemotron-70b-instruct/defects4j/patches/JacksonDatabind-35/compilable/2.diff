diff --git a/tmp/cd7f73af-f570-4d0b-9e65-bf49d766daf9_buggy.java b/tmp/ba434034-0d81-449c-a2ae-6f9309dc3f68_fixed.java
index 7d8d756..e65d9ed 100644
--- a/tmp/cd7f73af-f570-4d0b-9e65-bf49d766daf9_buggy.java
+++ b/tmp/ba434034-0d81-449c-a2ae-6f9309dc3f68_fixed.java
@@ -1,48 +1,68 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId!= null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
     if (p.getCurrentToken()!= JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+    // Advance to the first field (type id or value)
+    p.nextToken();
+
+    // Check if the first field is the type id
+    if (p.getCurrentToken() == JsonToken.FIELD_NAME && _typePropertyName.equals(p.getCurrentName())) {
+        // Consume the type id field name
+        p.nextToken();
+        // should always get type id string, but just in case...
+        if (p.getCurrentToken()!= JsonToken.VALUE_STRING) {
+            throw ctxt.wrongTokenException(p, JsonToken.VALUE_STRING,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
+        p.nextToken(); // Move to the value
+
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken()!= JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
+    } else {
+        // If the first field is not the type id, assume it's the value
+        // Find the deserializer for the base type
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, null);
+        Object value = deser.deserialize(p, ctxt);
+        // And then need the closing END_OBJECT
+        if (p.nextToken()!= JsonToken.END_OBJECT) {
+            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                    "expected closing END_OBJECT after deserialized value");
+        }
+        return value;
+    }
 }
\ No newline at end of file
