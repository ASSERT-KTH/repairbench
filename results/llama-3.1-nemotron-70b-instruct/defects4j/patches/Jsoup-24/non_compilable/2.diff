diff --git a/tmp/71111c19-a271-40d6-bc94-adc6a0395598_buggy.java b/tmp/aa64834a-bfc2-44a1-bb48-694f4564fc3d_fixed.java
index b2d53db..52dc288 100644
--- a/tmp/71111c19-a271-40d6-bc94-adc6a0395598_buggy.java
+++ b/tmp/aa64834a-bfc2-44a1-bb48-694f4564fc3d_fixed.java
@@ -1,34 +1,77 @@
+/**
+ * Fixed version of the read function to correctly handle quotes in comments within scripts.
+ */
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() &&!r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
+                // Check if we're inside a script tag to handle quotes in comments correctly
+                if (t.tagPending.isScriptTag()) {
+                    handleScriptTagClose(t, r);
+                } else {
                     t.emitTagPending();
                     t.transition(Data);
+                }
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
+
+/**
+ * Helper function to handle closing a script tag, correctly parsing quotes in comments.
+ */
+private void handleScriptTagClose(Tokeniser t, CharacterReader r) {
+    // Consume and append any remaining script content until the actual end of the script tag
+    while (!r.isEmpty() && (r.peek()!= '>' || r.peekNext() == '-')) {
+        char c = r.consume();
+        t.dataBuffer.append(c);
+        if (c == '-' && r.peekNext() == '-') { // potential comment start
+            handleCommentInScriptClose(t, r);
+        }
+    }
+    if (!r.isEmpty() && r.consume() == '>') {
+        t.emitTagPending();
+        t.transition(Data);
+    } else {
+        anythingElse(t, r);
+    }
+}
+
+/**
+ * Helper function to handle comments within script tags near the closing tag.
+ */
+private void handleCommentInScriptClose(Tokeniser t, CharacterReader r) {
+    // Consume and append the comment, handling quotes correctly to prevent premature end tag emission
+    while (!r.isEmpty() &&!(r.peek() == '-' && r.peekNext() == '>')) {
+        char c = r.consume();
+        t.dataBuffer.append(c);
+    }
+    if (!r.isEmpty()) {
+        r.advance(2); // Consume '-->' to end the comment and potentially the script tag
+        handleScriptTagClose(t, r);
+    }
+}
\ No newline at end of file
