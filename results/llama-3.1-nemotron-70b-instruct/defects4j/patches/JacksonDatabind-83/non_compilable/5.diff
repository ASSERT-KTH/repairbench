diff --git a/tmp/979e4992-e25c-46ea-914a-f6b0a2d48a84_buggy.java b/tmp/d5c7e9dd-146b-4979-ab3c-f43cfb24e435_fixed.java
index abe09ae..f07470d 100644
--- a/tmp/979e4992-e25c-46ea-914a-f6b0a2d48a84_buggy.java
+++ b/tmp/d5c7e9dd-146b-4979-ab3c-f43cfb24e435_fixed.java
@@ -1,57 +1,46 @@
 @SuppressWarnings("unchecked")
 @Override
 public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:
     String text = p.getValueAsString();
     if (text!= null) { // has String representation
         if (text.length() == 0 || (text = text.trim()).length() == 0) {
             // 04-Feb-2013, tatu: Usually should become null; but not always
             return _deserializeFromEmptyString();
         }
-            Exception cause = null;
         try {
-                // 19-May-2017, tatu: Used to require non-null result (assuming `null`
-                //    indicated error; but that seems wrong. Should be able to return
-                //    `null` as value.
-                if (_deserialize(text, ctxt) != null) {
-                return _deserialize(text, ctxt);
+            // Attempt to deserialize directly
+            T result = _deserialize(text, ctxt);
+            if (result!= null) {
+                return result;
+            }
+            // If deserialization fails, check for a registered problem handler
+            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, "not a valid textual representation");
+            return ctxt.handleWeirdStringValue(_valueClass, text, e);
+        } catch (IllegalArgumentException | MalformedURLException e) {
+            // Re-throw as a JsonMappingException with additional context
+            String msg = "not a valid textual representation, problem: " + e.getMessage();
+            JsonMappingException me = ctxt.weirdStringException(text, _valueClass, msg);
+            me.initCause(e);
+            throw me;
         }
-            } catch (IllegalArgumentException iae) {
-                cause = iae;
-            } catch (MalformedURLException me) {
-                cause = me;
-            }
-            String msg = "not a valid textual representation";
-            if (cause != null) {
-                String m2 = cause.getMessage();
-                if (m2 != null) {
-                    msg = msg + ", problem: "+m2;
-                }
-            }
-            // 05-May-2016, tatu: Unlike most usage, this seems legit, so...
-            JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);
-            if (cause != null) {
-                e.initCause(cause);
-            }
-            throw e;
-            // nothing to do here, yet? We'll fail anyway
     }
     JsonToken t = p.getCurrentToken();
     // [databind#381]
     if (t == JsonToken.START_ARRAY) {
         return _deserializeFromArray(p, ctxt);
     }
     if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {
         // Trivial cases; null to null, instance of type itself returned as is
         Object ob = p.getEmbeddedObject();
         if (ob == null) {
             return null;
         }
         if (_valueClass.isAssignableFrom(ob.getClass())) {
             return (T) ob;
         }
         return _deserializeEmbedded(ob, ctxt);
     }
     return (T) ctxt.handleUnexpectedToken(_valueClass, p);
 }
\ No newline at end of file
