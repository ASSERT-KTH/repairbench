diff --git a/tmp/6e822f56-66b8-4b8d-8ff5-64097dc2f0fc_buggy.java b/tmp/63804f42-29d5-4b1e-af69-3c7b8c3b161a_fixed.java
index 85e6a42..cda05a7 100644
--- a/tmp/6e822f56-66b8-4b8d-8ff5-64097dc2f0fc_buggy.java
+++ b/tmp/63804f42-29d5-4b1e-af69-3c7b8c3b161a_fixed.java
@@ -1,50 +1,64 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
+        archive.seek(offset);
+        // Read and verify local file header signature
+        byte[] signature = new byte[LFH_SIG_SIZE];
+        archive.readFully(signature);
+        if (!ZipArchiveInputStream.matches(signature, ZipArchiveInputStream.LFH_SIG)) {
+            throw new ZipException("Invalid LFH signature at offset " + offset);
+        }
+        // Read fileNameLength and extraFieldLength
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
+        int lenToSkip = fileNameLen + extraFieldLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        // Read and skip the file data (if any) to reach the next header
+        b = new byte[SHORT];
+        archive.readFully(b);
+        int compressedSize = ZipLong.getValue(b);
+        archive.skipBytes(compressedSize); // Skip the compressed file data
+        b = new byte[SHORT];
+        archive.readFully(b);
+        int crc = ZipLong.getValue(b); // CRC-32 (not used here)
+        // Update offsetEntry with the correct dataOffset
+        offsetEntry.dataOffset = offset + LFH_SIG_SIZE + SHORT + SHORT + 
+                                 fileNameLen + extraFieldLen + compressedSize;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
