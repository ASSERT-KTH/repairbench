diff --git a/tmp/6b7a423d-2ade-4fd8-a785-b86a6616066f_buggy.java b/tmp/a060d2d0-ffa5-4b1b-8e89-52db1ea5b0e6_fixed.java
index 85e6a42..6926977 100644
--- a/tmp/6b7a423d-2ade-4fd8-a785-b86a6616066f_buggy.java
+++ b/tmp/a060d2d0-ffa5-4b1b-8e89-52db1ea5b0e6_fixed.java
@@ -1,50 +1,62 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
         throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
+        
+        // FIX: Handle case where fileNameLen or extraFieldLen is negative
+        if (fileNameLen < 0 || extraFieldLen < 0) {
+            throw new IOException("Invalid local file header: negative length");
+        }
+
+        int lenToSkip = fileNameLen + extraFieldLen; // FIX: Skip both filename and extra field
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        
+        // FIX: Re-read the file name length and extra field length after skipping
+        archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
+        archive.readFully(b);
+        fileNameLen = ZipShort.getValue(b);
+        archive.readFully(b);
+        extraFieldLen = ZipShort.getValue(b);
         
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
+        
+        // FIX: Calculate dataOffset after adjusting for filename and extra field
+        offsetEntry.dataOffset = offset + LFH_SIG.size() + SHORT + SHORT 
+                + fileNameLen + extraFieldLen;
     }
 }
\ No newline at end of file
