diff --git a/tmp/e6aee596-dff2-46a2-9a23-2b8b730ff7b1_buggy.java b/tmp/07856abc-0e5a-41a9-b657-7222b179186d_fixed.java
index 85e6a42..8b01b62 100644
--- a/tmp/e6aee596-dff2-46a2-9a23-2b8b730ff7b1_buggy.java
+++ b/tmp/07856abc-0e5a-41a9-b657-7222b179186d_fixed.java
@@ -1,50 +1,75 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+        
+        // Fix: Properly handle UTF-8 encoded file names in local file headers
+        if (hasUTF8ExtraField(archive, offset, extraFieldLen)) {
+            String fileName = readUTF8FileName(archive, fileNameLen);
+            ze.setName(fileName);
+        } else {
+            // Original code for non-UTF8 file names
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
+        }
+        
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
+
+// Helper methods for the fix
+
+private boolean hasUTF8ExtraField(RandomAccessFile archive, long offset, int extraFieldLen) throws IOException {
+    archive.seek(offset + LFH_OFFSET_FOR_EXTRA_FIELD_LEN);
+    byte[] b = new byte[SHORT];
+    archive.readFully(b);
+    int id = ZipShort.getValue(b);
+    return id == ZipExtraField.UFT8_NAME_MESSAGE_HEADER_ID;
+}
+
+private String readUTF8FileName(RandomAccessFile archive, int fileNameLen) throws IOException {
+    byte[] fileNameBytes = new byte[fileNameLen];
+    archive.readFully(fileNameBytes);
+    return new String(fileNameBytes,.StandardCharsets.UTF_8);
+}
\ No newline at end of file
