diff --git a/tmp/ed67aedb-889b-41b7-b1eb-f115371a9e99_buggy.java b/tmp/d849e146-4ff4-461d-b979-487dce7e91a7_fixed.java
index 6b160ef..2c39d5f 100644
--- a/tmp/ed67aedb-889b-41b7-b1eb-f115371a9e99_buggy.java
+++ b/tmp/d849e146-4ff4-461d-b979-487dce7e91a7_fixed.java
@@ -1,68 +1,60 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    final byte[] signature = new byte[512]; // Increase buffer size to handle Tar's larger header
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
+        
+        if (signatureLength < 12) { // Not enough data to determine archive type, throw exception
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
+        
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
             return new DumpArchiveInputStream(in);
-            }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        } else if (TarArchiveInputStream.matches(signature, signatureLength)) {
             return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+        } else {
+            // Attempt to parse as Tar if previous checks failed
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));
                 tais.getNextEntry();
                 return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
+            } catch (Exception e) { 
                 // can generate IllegalArgumentException as well as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
+        }
+        
+        throw new ArchiveException("No Archiver found for the stream signature");
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
