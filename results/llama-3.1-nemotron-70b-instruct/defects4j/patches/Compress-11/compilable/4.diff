diff --git a/tmp/434d9fdf-d577-47d9-8c22-fc0e2e19d155_buggy.java b/tmp/631c5b83-b955-4c97-a45c-bd311186264a_fixed.java
index 6b160ef..5fe6e21 100644
--- a/tmp/434d9fdf-d577-47d9-8c22-fc0e2e19d155_buggy.java
+++ b/tmp/631c5b83-b955-4c97-a45c-bd311186264a_fixed.java
@@ -1,68 +1,67 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
-        in.mark(signature.length);
+    // Increased buffer size to accommodate various archive signatures
+    final int maxSignatureLength = 512;
+    final byte[] signature = new byte[maxSignatureLength];
+    in.mark(maxSignatureLength);
     try {
         int signatureLength = in.read(signature);
         in.reset();
+
+        // Check for archive types with smaller signatures first
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+        // Tar archive detection may require reading the full block
+        if (TarArchiveInputStream.matches(signature, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         // COMPRESS-117 - improve auto-recognition
         try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+            TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));
             tais.getNextEntry();
             return new TarArchiveInputStream(in);
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
+
+        // If no archive type is detected, check if the input stream is too short to be an archive
+        if (signatureLength < maxSignatureLength && in.available() == 0) {
+            throw new ArchiveException("Input stream is too short to be an archive");
+        }
+
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
