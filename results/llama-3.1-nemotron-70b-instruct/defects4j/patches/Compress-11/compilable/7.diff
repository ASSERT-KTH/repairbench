diff --git a/tmp/73101eba-8a6f-420a-8d7f-ac4a4cd10793_buggy.java b/tmp/816530e8-1871-44cf-ae30-15d016f05c87_fixed.java
index 6b160ef..9ad1e7a 100644
--- a/tmp/73101eba-8a6f-420a-8d7f-ac4a4cd10793_buggy.java
+++ b/tmp/816530e8-1871-44cf-ae30-15d016f05c87_fixed.java
@@ -1,68 +1,80 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
-        final byte[] signature = new byte[12];
+    final byte[] signature = new byte[512]; // Increased buffer size to reduce false positives
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
+        
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
-            }
-
-            // Dump needs a bigger buffer to check the signature;
-            final byte[] dumpsig = new byte[32];
-            in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
-            in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+        } else if (DumpArchiveInputStream.matches(signature, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+        // Additional check to prevent false TAR positives
+        if (TarArchiveInputStream.matches(signature, signatureLength)) {
+            try {
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(signature, 0, signatureLength));
+                tais.getNextEntry();
+                return new TarArchiveInputStream(in);
+            } catch (Exception e) { 
+                // Not a valid TAR archive, ignore and continue
+            }
+        }
+
+        // If no archive type is detected and the stream is too short, it's likely not an archive
+        if (signatureLength < 128) { // Arbitrary threshold, may need adjustment
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
+
+        // Attempt to read more data to improve detection
+        final byte[] additionalData = new byte[1024];
+        in.mark(additionalData.length);
+        int additionalLength = in.read(additionalData);
         in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
+
+        // Re-check with combined data
+        byte[] combined = new byte[signatureLength + additionalLength];
+        System.arraycopy(signature, 0, combined, 0, signatureLength);
+        System.arraycopy(additionalData, 0, combined, signatureLength, additionalLength);
+
+        if (TarArchiveInputStream.matches(combined, combined.length)) {
             try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(combined));
                 tais.getNextEntry();
                 return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
+            } catch (Exception e) { 
+                // Not a valid TAR archive, ignore
             }
+        }
+
+        throw new ArchiveException("No Archiver found for the stream signature");
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
-
-        throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
