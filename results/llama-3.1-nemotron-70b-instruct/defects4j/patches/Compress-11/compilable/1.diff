diff --git a/tmp/c6cb7979-21ce-46a1-afd4-4bd9f790878e_buggy.java b/tmp/ad180989-0383-49a9-8def-c609912019f6_fixed.java
index 6b160ef..4bac8fe 100644
--- a/tmp/c6cb7979-21ce-46a1-afd4-4bd9f790878e_buggy.java
+++ b/tmp/ad180989-0383-49a9-8def-c609912019f6_fixed.java
@@ -1,68 +1,87 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
         if (ZipArchiveInputStream.matches(signature, signatureLength)) {
             return new ZipArchiveInputStream(in);
         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
             return new JarArchiveInputStream(in);
         } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
             return new ArArchiveInputStream(in);
         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
             return new CpioArchiveInputStream(in);
         }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
             return new DumpArchiveInputStream(in);
         }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
         if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
             return new TarArchiveInputStream(in);
         }
         //COMPRESS-117 - improve auto-recognition
         try {
             TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+            if (tais.getNextEntry()!= null) { // Check if getNextEntry returns non-null
                 return new TarArchiveInputStream(in);
+            }
         } catch (Exception e) { // NOPMD
             // can generate IllegalArgumentException as well as IOException
             // autodetection, simply not a TAR
             // ignored
         }
+        // If all archiver checks fail and the input stream is too short or doesn't resemble an archive,
+        // don't attempt to create an archive input stream for it
+        if (in.available() < 512 || isObviouslyNotAnArchive(signature, signatureLength)) {
+            throw new ArchiveException("No Archiver found for the stream signature");
+        }
+        // Fall back to attempting to create a TarArchiveInputStream if all else fails
+        return new TarArchiveInputStream(in);
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
+}
 
-        throw new ArchiveException("No Archiver found for the stream signature");
+// Helper method to determine if the input stream obviously doesn't contain an archive
+private boolean isObviouslyNotAnArchive(byte[] signature, int signatureLength) {
+    // Simple heuristic: if the signature contains mostly ASCII printable characters,
+    // it's likely not an archive.
+    int asciiCount = 0;
+    for (int i = 0; i < signatureLength; i++) {
+        if (signature[i] >= 32 && signature[i] < 127) { // ASCII printable range
+            asciiCount++;
+        }
+    }
+    return (double) asciiCount / signatureLength > 0.7; // Adjust threshold as needed
 }
\ No newline at end of file
