diff --git a/tmp/c8f2f9eb-58c4-4d81-a7b3-6e7eff4edbdb_buggy.java b/tmp/b82c9cf7-3d95-42bf-afd1-2d10894d19e3_fixed.java
index c9c77a4..b4ea8bb 100644
--- a/tmp/c8f2f9eb-58c4-4d81-a7b3-6e7eff4edbdb_buggy.java
+++ b/tmp/b82c9cf7-3d95-42bf-afd1-2d10894d19e3_fixed.java
@@ -1,35 +1,57 @@
+/**
+ * Builds a normalized URL, preserving encoded path segments.
+ * 
+ * @return the normalized URL
+ */
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
-            URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
-            );
+        // Split the URL into its components
+        String protocol = u.getProtocol();
+        String userInfo = u.getUserInfo();
+        String host = IDN.toASCII(decodePart(u.getHost())); // puny-code
+        int port = u.getPort();
+        String path = u.getPath();
+        String query = u.getQuery();
+        String ref = u.getRef();
+
+        // Only decode the path if it's not already encoded (i.e., doesn't contain a '%')
+        String decodedPath = path.contains("%")? path : decodePart(path);
+
+        // Re-encode the path to preserve any previously encoded segments
+        String encodedPath = encodePart(decodedPath);
+
+        // Reconstruct the URL with the re-encoded path
+        URI uri = new URI(protocol, userInfo, host, port, encodedPath, query, ref);
 
         String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
+        
+        if (this.q!= null || ref!= null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
+            if (this.q!= null) {
                 sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                appendToAscii(StringUtil.releaseBuilder(this.q), true, sb);
             }
-                if (u.getRef() != null) {
+            if (ref!= null) {
                 sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                appendToAscii(ref, false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+// Assuming the following utility methods exist:
+// - `decodePart(String part)`: Decodes a URL part (e.g., path, host)
+// - `encodePart(String part)`: Encodes a URL part (e.g., path) while preserving existing '%xx' sequences
+// - `StringUtil.borrowBuilder()`: Returns a temporary `StringBuilder` instance
+// - `StringUtil.releaseBuilder(StringBuilder sb)`: Returns the string content of the builder and releases it for reuse
+// - `StringUtil.releaseBuilder(CharSequence cs)`: Returns the string content of the iterable character sequence
+// - `appendToAscii(CharSequence cs, boolean isQuery, StringBuilder sb)`: Appends the character sequence to the builder, encoding as necessary for ASCII output
\ No newline at end of file
