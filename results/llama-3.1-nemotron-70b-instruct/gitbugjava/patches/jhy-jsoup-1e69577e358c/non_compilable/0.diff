diff --git a/tmp/51965058-cdfd-475c-9b99-c1a42abd10ce_buggy.java b/tmp/e9f8fbca-bce1-43e9-b493-003af7301acd_fixed.java
index c9c77a4..ff742e3 100644
--- a/tmp/51965058-cdfd-475c-9b99-c1a42abd10ce_buggy.java
+++ b/tmp/e9f8fbca-bce1-43e9-b493-003af7301acd_fixed.java
@@ -1,35 +1,47 @@
+/**
+ * Builds the normalized URL, preserving encoded path segments.
+ */
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // Split the path into segments to preserve encoded parts
+        String[] pathSegments = u.getPath().split("/");
+        for (int i = 0; i < pathSegments.length; i++) {
+            // Only decode non-encoded segments (those not starting with '%')
+            if (!pathSegments[i].startsWith("%")) {
+                pathSegments[i] = decodePart(pathSegments[i]);
+            }
+        }
+        String reconstructedPath = String.join("/", pathSegments);
+
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            reconstructedPath,
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q!= null || u.getRef()!= null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q!= null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef()!= null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
