diff --git a/tmp/3c66dea3-d713-4253-bb0a-bb0a80e64f2a_buggy.java b/tmp/ffbf73ce-5d14-455e-b733-e66a8a306df3_fixed.java
index dd3b100..e3f89a9 100644
--- a/tmp/3c66dea3-d713-4253-bb0a-bb0a80e64f2a_buggy.java
+++ b/tmp/ffbf73ce-5d14-455e-b733-e66a8a306df3_fixed.java
@@ -1,12 +1,24 @@
+/**
+ * Finds the lowest common ancestor of two nodes in a binary search tree.
+ * 
+ * @param root The root of the binary search tree.
+ * @param p    The first node.
+ * @param q    The second node.
+ * @return The lowest common ancestor of p and q.
+ */
 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
+    if (root == null || root == p || root == q) {
         return root;
     }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+    // Determine the relative positions of p and q with respect to root
+    if (p.val < root.val && q.val < root.val) {
+        // Both p and q are in the left subtree
         return lowestCommonAncestor(root.left, p, q);
-                }
+    } else if (p.val > root.val && q.val > root.val) {
+        // Both p and q are in the right subtree
         return lowestCommonAncestor(root.right, p, q);
-            }
+    } else {
+        // p and q are in different subtrees, so root is the LCA
         return root;
     }
+}
\ No newline at end of file
