diff --git a/tmp/e145d2ba-ab5c-473a-8d53-68a388f653a2_buggy.java b/tmp/eaaa22c5-4142-4fa7-a3aa-0b0e1d0acd90_fixed.java
index dd3b100..d3d70bb 100644
--- a/tmp/e145d2ba-ab5c-473a-8d53-68a388f653a2_buggy.java
+++ b/tmp/eaaa22c5-4142-4fa7-a3aa-0b0e1d0acd90_fixed.java
@@ -1,12 +1,27 @@
+/**
+ * Fixed function to find the lowest common ancestor of two nodes in a binary search tree.
+ * 
+ * @param root The root of the binary search tree.
+ * @param p    The first node.
+ * @param q    The second node.
+ * @return The lowest common ancestor of p and q.
+ */
 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
-            if (root == null || p == root || q == root) {
+    // If the root is null, or if the root is one of the target nodes, return the root
+    if (root == null || root == p || root == q) {
         return root;
     }
-            if ((root.val - p.val) * (root.val - q.val) > 0) {
-                if (root.val - p.val > 0) {
+    
+    // If p and q are on opposite sides of the root, the root is the LCA
+    if ((root.val - p.val) * (root.val - q.val) <= 0) {
+        return root;
+    }
+    
+    // If both p and q are less than the root, they must be in the left subtree
+    if (root.val > p.val && root.val > q.val) {
         return lowestCommonAncestor(root.left, p, q);
     }
+    
+    // If both p and q are greater than the root, they must be in the right subtree
     return lowestCommonAncestor(root.right, p, q);
 }
\ No newline at end of file
-            return root;
-        }
