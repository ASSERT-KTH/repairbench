diff --git a/tmp/96e4d10f-2ffe-45fd-838e-66a125836755_buggy.java b/tmp/76a546eb-cac1-4cd1-b1fd-7b038c9f16ed_fixed.java
index f506479..25a5b97 100644
--- a/tmp/96e4d10f-2ffe-45fd-838e-66a125836755_buggy.java
+++ b/tmp/76a546eb-cac1-4cd1-b1fd-7b038c9f16ed_fixed.java
@@ -1,64 +1,113 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg)!= null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    List<String> currentGroupValues = new ArrayList<>(); // track current group values
+    SimpleDslArg currentArg = null;
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
-                    break;
+            // new group, process previous group's values
+            if (!currentGroupValues.isEmpty()) {
+                processGroupValues(groupArg, valuesByArg, argsByName, currentGroupValues);
+                currentGroupValues = new ArrayList<>();
+            }
+            currentArg = null;
+            continue;
+        }
+
+        if (currentArg == null) {
+            currentArg = arg;
+        } else if (currentArg!= arg) {
+            // new argument in the same group, process previous argument's values
+            processArgumentValues(valuesByArg, currentArg, currentGroupValues);
+            currentArg = arg;
+            currentGroupValues = new ArrayList<>();
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() &&!arg.isAllowMultipleValues())
         {
             break;
         }
 
         checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+        currentGroupValues.add(argument.value); // add to current group values
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // process last group's values
+    if (!currentGroupValues.isEmpty()) {
+        processGroupValues(groupArg, valuesByArg, argsByName, currentGroupValues);
+    }
+
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
+
+// new methods to process group and argument values
+void processGroupValues(RepeatingArgGroup groupArg, Map<DslArg, List<String>> valuesByArg, 
+                        Map<String, SimpleDslArg> argsByName, List<String> currentGroupValues) {
+    final Map<String, List<String>> groupValuesByName = new HashMap<>();
+    for (String value : currentGroupValues) {
+        final NameValuePair argument = new NameValuePair(value);
+        final DslArg arg = argsByName.get(argument.name.toLowerCase());
+        if (arg!= null) {
+            final List<String> argValues = groupValuesByName.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>());
+            argValues.add(argument.value);
+        }
+    }
+    final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
+    dslArgs[0] = groupArg.getIdentity();
+    System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
+    groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, groupValuesByName));
+}
+
+void processArgumentValues(Map<DslArg, List<String>> valuesByArg, DslArg currentArg, List<String> currentGroupValues) {
+    final List<String> argValues = valuesByArg.computeIfAbsent(currentArg, k -> new ArrayList<>());
+    if (currentArg.isAllowMultipleValues()) {
+        argValues.addAll(currentGroupValues);
+    } else if (!argValues.isEmpty()) {
+        // handle the case where multiple values are not allowed
+    }
+}
\ No newline at end of file
