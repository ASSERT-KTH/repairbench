diff --git a/tmp/11a066e0-3681-45e1-b99b-33bc30282552_buggy.java b/tmp/3776bc8b-ab7f-4dc5-b8b3-d91be6a52df9_fixed.java
index ae12a4d..b1eba53 100644
--- a/tmp/11a066e0-3681-45e1-b99b-33bc30282552_buggy.java
+++ b/tmp/3776bc8b-ab7f-4dc5-b8b3-d91be6a52df9_fixed.java
@@ -1,3 +1,21 @@
+/**
+ * Checks if the element should be formatted as a block based on its tag, parent's tag, 
+ * and output settings, considering nested inline elements.
+ * 
+ * @param out Output settings for the document
+ * @return True if the element should be formatted as a block, false otherwise
+ */
 private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+    // Check if the current tag or its parent tag should be formatted as a block
+    boolean formatAsBlock = tag.formatAsBlock() || (parent()!= null && parent().tag().formatAsBlock());
+    
+    // If the current element is not a block but its parent is, and it contains 
+    // only inline elements, it should still be formatted as a block
+    if (!formatAsBlock && parent()!= null && parent().tag().formatAsBlock()) {
+        formatAsBlock =!elements().stream()
+               .allMatch(child -> child.tag().formatAsBlock() == false);
+    }
+    
+    // Finally, consider the output settings
+    return formatAsBlock || out.outline();
 }
\ No newline at end of file
