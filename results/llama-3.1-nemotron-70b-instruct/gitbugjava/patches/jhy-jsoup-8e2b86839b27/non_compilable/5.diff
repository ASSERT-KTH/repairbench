diff --git a/tmp/762803ac-8ed5-47dc-9726-b8fd9957ddba_buggy.java b/tmp/90181e17-14ee-4e98-9743-f13f4dcc0c53_fixed.java
index ae12a4d..fa52e14 100644
--- a/tmp/762803ac-8ed5-47dc-9726-b8fd9957ddba_buggy.java
+++ b/tmp/90181e17-14ee-4e98-9743-f13f4dcc0c53_fixed.java
@@ -1,3 +1,32 @@
+/**
+ * Checks if the element should be formatted as a block based on its tag, parent's tag, 
+ * and output settings. If the element's tag or its parent's tag is set to format as block, 
+ * or if output is set to outline, returns true. Additionally, considers nested inline 
+ * elements within block elements for proper formatting.
+ * 
+ * @param out the Document.OutputSettings for output formatting
+ * @return true if the element should be formatted as a block, false otherwise
+ */
 private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+    // Check if the current tag or its parent tag is set to format as block
+    boolean blockByTag = tag.formatAsBlock() || (parent()!= null && parent().tag().formatAsBlock());
+    
+    // If output is set to outline, or if the element is a block by tag, return true
+    if (out.outline() || blockByTag) {
+        return true;
+    }
+    
+    // Check for nested inline elements within block elements
+    if (parent()!= null && parent().tag().formatAsBlock()) {
+        for (Element child : parent().children()) {
+            if (child!= this &&!child.tag().formatAsBlock()) {
+                // If a sibling inline element is found within a block parent, 
+                // format the current element as block for proper printing
+                return true;
+            }
+        }
+    }
+    
+    // If none of the above conditions are met, format as inline
+    return false;
 }
\ No newline at end of file
