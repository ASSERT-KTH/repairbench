diff --git a/tmp/cb3505e3-073a-4ffe-b3e7-70f1d1277c98_buggy.java b/tmp/7934f68f-9bc2-4eff-8f92-98b1a6d18cf0_fixed.java
index ae12a4d..86ae675 100644
--- a/tmp/cb3505e3-073a-4ffe-b3e7-70f1d1277c98_buggy.java
+++ b/tmp/7934f68f-9bc2-4eff-8f92-98b1a6d18cf0_fixed.java
@@ -1,3 +1,28 @@
+/**
+ * Checks if the element's tag or its parent's tag should be formatted as a block,
+ * considering the output settings. Also, accounts for inline elements within block
+ * elements to maintain formatting consistency.
+ *
+ * @param out the output settings for the document
+ * @return true if the element should be formatted as a block, false otherwise
+ */
 private boolean isFormatAsBlock(Document.OutputSettings out) {
-        return tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline();
+    // If the element's tag is set to format as block, or the output settings require outline format
+    if (tag.formatAsBlock() || out.outline()) {
+        return true;
+    }
+    // If the element has a parent and the parent's tag is set to format as block
+    if (parent()!= null && parent().tag().formatAsBlock()) {
+        // Check if this element is an inline element within a block parent
+        if (!tag.isBlock()) {
+            // If an inline element has a block sibling, it should be formatted as block
+            for (Element sibling : parent().children()) {
+                if (sibling!= this && sibling.tag().formatAsBlock()) {
+                    return true;
+                }
+            }
+        }
+        return true;
+    }
+    return false;
 }
\ No newline at end of file
