diff --git a/tmp/8876ff88-9d49-4fbe-9901-60a7758fe9e6_buggy.java b/tmp/9717fde3-b7b8-4e39-a2b3-0e7ed4551338_fixed.java
index eb0a5c8..ae8deab 100644
--- a/tmp/8876ff88-9d49-4fbe-9901-60a7758fe9e6_buggy.java
+++ b/tmp/9717fde3-b7b8-4e39-a2b3-0e7ed4551338_fixed.java
@@ -1,27 +1,35 @@
+/**
+ * Registers a call context with the provided call context provider for the given ARI command.
+ * 
+ * @param callContextProvider The actor reference for the call context provider.
+ * @param callContext The call context to register.
+ * @param ariCommand The ARI command to process.
+ * @return A Try containing Done if successful, or a RuntimeException if the command is a creation command but no resource ID could be extracted.
+ */
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    if (!ariCommand.extractCommandType().isCreationOrUpdateCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
-            .find(AriResourceRelation::isCreated)
+           .find(AriResourceRelation::isCreatedOrUpdated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
