diff --git a/tmp/776b9d35-2a55-4e7a-b3ca-90ed23305bd6_buggy.java b/tmp/09083d20-daf8-4ce1-8a23-0a12fbcddfe2_fixed.java
index eb0a5c8..9bf4c32 100644
--- a/tmp/776b9d35-2a55-4e7a-b3ca-90ed23305bd6_buggy.java
+++ b/tmp/09083d20-daf8-4ce1-8a23-0a12fbcddfe2_fixed.java
@@ -1,27 +1,35 @@
+/**
+ * Registers a call context for the given ARI command if it's a creation command.
+ *
+ * @param callContextProvider provider for call context registration
+ * @param callContext        call context to be registered
+ * @param ariCommand         ARI command to be processed
+ * @return Try with Done if successful, or a RuntimeException if resource ID extraction fails
+ */
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    if (ariCommand.extractCommandType().isDeletionCommand() ||!ariCommand.extractCommandType().isCreationCommand()) {
         return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
            .find(AriResourceRelation::isCreated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
         return Try.failure(
             new RuntimeException(
                 String.format(
                     "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
