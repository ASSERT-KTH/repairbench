diff --git a/tmp/704cf7b4-b000-4a39-941d-82892101be0c_buggy.java b/tmp/92be2dca-08d0-4358-bfca-d7c3b617abc2_fixed.java
index eb0a5c8..266fe6d 100644
--- a/tmp/704cf7b4-b000-4a39-941d-82892101be0c_buggy.java
+++ b/tmp/92be2dca-08d0-4358-bfca-d7c3b617abc2_fixed.java
@@ -1,27 +1,38 @@
+/**
+ * Registers the call context with the provided call context provider if the given ARI command is a creation command
+ * and has a resource relation marked as created.
+ *
+ * @param callContextProvider the actor ref of the call context provider
+ * @param callContext         the call context to register
+ * @param ariCommand          the ARI command to check
+ * @return a Try containing Done.done() if the registration was successful or not necessary, 
+ *         or a failure if the resource ID could not be extracted from the command
+ */
 public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    if (!ariCommand.extractCommandType().isCreationCommand() || 
+        ariCommand.extractCommandType().isDeletionCommand()) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
            .find(AriResourceRelation::isCreated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
