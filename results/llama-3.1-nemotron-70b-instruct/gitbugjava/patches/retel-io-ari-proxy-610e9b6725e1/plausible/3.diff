diff --git a/tmp/a6415f52-7d32-48a3-b66e-94d7cab80224_buggy.java b/tmp/61ce098e-6340-41ed-86a4-edf62842fc52_fixed.java
index eb0a5c8..26eeb33 100644
--- a/tmp/a6415f52-7d32-48a3-b66e-94d7cab80224_buggy.java
+++ b/tmp/61ce098e-6340-41ed-86a4-edf62842fc52_fixed.java
@@ -1,27 +1,36 @@
+/**
+ * Registers the call context with the provided call context provider for the given ARI command.
+ * 
+ * @param callContextProvider the provider to register the call context with
+ * @param callContext the call context to register
+ * @param ariCommand the ARI command to check for registration necessity
+ * @return a Try containing Done on success, or a RuntimeException if resource ID extraction fails
+ */
 public static Try<Done> registerCallContext(
       final ActorRef<CallContextProviderMessage> callContextProvider,
       final String callContext,
       final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Check if the command is a creation command and not a deletion command
+    if (!ariCommand.extractCommandType().isCreationCommand() || ariCommand.getMethod().equals("DELETE")) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
            .find(AriResourceRelation::isCreated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
