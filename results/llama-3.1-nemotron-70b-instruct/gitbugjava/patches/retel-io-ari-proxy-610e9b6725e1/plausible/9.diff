diff --git a/tmp/90ba0317-2518-45ca-94eb-685ece03e706_buggy.java b/tmp/90a2148a-4a98-4baf-a841-2bd30f9d49cc_fixed.java
index eb0a5c8..4b58e34 100644
--- a/tmp/90ba0317-2518-45ca-94eb-685ece03e706_buggy.java
+++ b/tmp/90a2148a-4a98-4baf-a841-2bd30f9d49cc_fixed.java
@@ -1,27 +1,37 @@
+/**
+ * Registers a call context with the provided callContextProvider if the ariCommand is a creation command
+ * and a created resource can be extracted from it.
+ *
+ * @param callContextProvider the provider to register the call context with
+ * @param callContext the call context to register
+ * @param ariCommand the ARI command to evaluate
+ * @return a Try containing Done.done() if the operation was successful, or a failure if not
+ */
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Check if the ARI command is not a creation command or a deletion command
+    if (!ariCommand.extractCommandType().isCreationCommand() || ariCommand.getMethod().equals("DELETE")) {
         return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
            .find(AriResourceRelation::isCreated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
         return Try.failure(
             new RuntimeException(
                 String.format(
                     "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
