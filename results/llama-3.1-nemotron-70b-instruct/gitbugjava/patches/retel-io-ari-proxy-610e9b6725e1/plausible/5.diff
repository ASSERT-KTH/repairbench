diff --git a/tmp/3f52abaa-fd4e-4f6a-9028-15315edd811b_buggy.java b/tmp/d50cb6b1-ff1f-4b9a-bcfa-1c148323855e_fixed.java
index eb0a5c8..ef51cc6 100644
--- a/tmp/3f52abaa-fd4e-4f6a-9028-15315edd811b_buggy.java
+++ b/tmp/d50cb6b1-ff1f-4b9a-bcfa-1c148323855e_fixed.java
@@ -1,27 +1,36 @@
+/**
+ * Registers a call context for the given ARI command if it's a creation command.
+ * 
+ * @param callContextProvider provider for call context registration
+ * @param callContext        the call context to register
+ * @param ariCommand         the ARI command to check for creation
+ * @return Try with Done on success, or a RuntimeException if resource ID extraction fails
+ */
 public static Try<Done> registerCallContext(
     final ActorRef<CallContextProviderMessage> callContextProvider,
     final String callContext,
     final AriCommand ariCommand) {
 
-    if (!ariCommand.extractCommandType().isCreationCommand()) {
+    // Enhanced check to exclude both non-creation commands and deletion commands
+    if (!ariCommand.extractCommandType().isCreationCommand() || ariCommand.getMethod().equals("DELETE")) {
       return Try.success(Done.done());
     }
 
     final Option<AriResource> maybeResource =
         ariCommand
            .extractResourceRelations()
            .find(AriResourceRelation::isCreated)
            .map(AriResourceRelation::getResource);
 
     if (maybeResource.isEmpty()) {
       return Try.failure(
           new RuntimeException(
               String.format(
                   "Failed to extract resourceId from command '%s'", ariCommand.toString())));
     }
 
     final AriResource resource = maybeResource.get();
 
     callContextProvider.tell(new RegisterCallContext(resource.getId(), callContext));
     return Try.success(Done.done());
 }
\ No newline at end of file
