diff --git a/tmp/be5e1a4d-5185-412f-86b4-cce3db1c9619_buggy.java b/tmp/2585d0f7-552a-443c-bb13-4124608a94c1_fixed.java
index 27f2719..059ba6e 100644
--- a/tmp/be5e1a4d-5185-412f-86b4-cce3db1c9619_buggy.java
+++ b/tmp/2585d0f7-552a-443c-bb13-4124608a94c1_fixed.java
@@ -1,90 +1,86 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null ||!sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
-
-            getLastLocation(position, null);
-
+        // Add null check for getLastLocation to prevent NPE
+        if (getLastLocation(position, null)!= null) {
             position.set(Position.KEY_RESULT, sentence.substring(3));
-
+        }
         return position;
 
     } else if (type.equals("5")) {
-
         String[] values = sentence.split(",");
 
-            getLastLocation(position, null);
-
+        // Add null check for getLastLocation to prevent NPE
+        if (getLastLocation(position, null)!= null) {
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
             if (values.length >= 4) {
                 position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
             }
-
+        }
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
-
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
-            position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
-            position.set(Position.KEY_HDOP, parser.nextDouble(0));
+        // Add null checks for nextInt and nextDouble to prevent NPE
+        position.set(Position.KEY_SATELLITES, parser.hasNext(0)? parser.nextInt(0) : null);
+        position.set(Position.KEY_SATELLITES_VISIBLE, parser.hasNext(0)? parser.nextInt(0) : null);
+        position.set(Position.KEY_HDOP, parser.hasNext(0)? parser.nextDouble(0) : null);
 
         return position;
 
     } else if (type.equals("C")) {
-
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
-
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
