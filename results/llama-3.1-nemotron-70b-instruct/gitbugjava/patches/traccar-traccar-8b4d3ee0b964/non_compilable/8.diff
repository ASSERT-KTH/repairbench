diff --git a/tmp/bbc8a2d5-8e74-4d80-a7cb-0b892ef89716_buggy.java b/tmp/e05cada7-3430-4d56-8fb6-4bc17c5d4c09_fixed.java
index 27f2719..a35544b 100644
--- a/tmp/bbc8a2d5-8e74-4d80-a7cb-0b892ef89716_buggy.java
+++ b/tmp/e05cada7-3430-4d56-8fb6-4bc17c5d4c09_fixed.java
@@ -1,90 +1,72 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null ||!sentence.matches("![35ABCD],.*")) { // Added 'B', 'C', 'D' to the match
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_RESULT, sentence.substring(3));
-
         return position;
-
     } else if (type.equals("5")) {
-
         String[] values = sentence.split(",");
-
         getLastLocation(position, null);
-
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
-
         return position;
-
     } else if (type.equals("B") || type.equals("D")) {
-
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
-
         decodeFix(position, parser);
         decodeState(position, parser);
-
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-            position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
+        position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(1)); // Changed index from 0 to 1
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
-
         return position;
-
     } else if (type.equals("C")) {
-
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
-
         decodeFix(position, parser);
         decodeState(position, parser);
-
         return position;
-
     } else if (type.equals("A")) {
-
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
-
         decodeFix(position, parser);
-
         return position;
-
+    } else if (type.equals("4")) { // Added condition for type '4'
+        String[] values = sentence.split(",");
+        position.set(Position.KEY_PHONE, values[2]); // Added phone attribute
+        return position;
     }
 
     return null;
 }
\ No newline at end of file
