diff --git a/tmp/da454dae-a084-47b1-886a-adcd4105044d_buggy.java b/tmp/8613f504-c79f-4bec-9087-ad69f0e5c09a_fixed.java
index 7b9216c..5b23b50 100644
--- a/tmp/da454dae-a084-47b1-886a-adcd4105044d_buggy.java
+++ b/tmp/8613f504-c79f-4bec-9087-ad69f0e5c09a_fixed.java
@@ -1,47 +1,72 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type!= MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
+    // Fix: read network information only if enough bytes are available
+    if (buf.readableBytes() >= 6) {
         position.setNetwork(new Network(CellTower.fromCidLac(
                 getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
+    }
 
+    // Fix: read product, status, and alarm only if enough bytes are available
+    if (buf.readableBytes() >= 4) {
         int product = buf.readUnsignedByte();
         int status = buf.readUnsignedShort();
         int alarm = buf.readUnsignedShort();
 
+        position.set(Position.KEY_STATUS, status);
+
         if (product == 1 || product == 2) {
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
         } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
             if (BitUtil.check(alarm, 2)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             }
             if (BitUtil.check(alarm, 3)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
             }
         }
+    }
 
-        position.set(Position.KEY_STATUS, status);
+    // Fix: read additional attributes (e.g. gyro) if enough bytes are available
+    while (buf.readableBytes() >= 4) {
+        int attributeId = buf.readUnsignedShort();
+        int attributeLength = buf.readUnsignedShort();
+        if (buf.readableBytes() < attributeLength) {
+            break; // not enough bytes for attribute value
+        }
+        ByteBuf attributeValue = buf.readBytes(attributeLength);
+        switch (attributeId) {
+            case 0x2703: // gyro
+                position.set("gyro", attributeValue.toString());
+                break;
+            // Add more attribute handlers as needed
+            default:
+                // Ignore unknown attributes
+                break;
+        }
+    }
 
     return position;
 }
\ No newline at end of file
