diff --git a/tmp/088f10eb-b494-4f5e-84d5-4663e48c4f95_buggy.java b/tmp/8f252264-3c12-4c8e-a348-5b51cf9aaf25_fixed.java
index 6d50be3..45d4edc 100644
--- a/tmp/088f10eb-b494-4f5e-84d5-4663e48c4f95_buggy.java
+++ b/tmp/8f252264-3c12-4c8e-a348-5b51cf9aaf25_fixed.java
@@ -1,194 +1,306 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
+    // Check if there's enough data to proceed
+    if (buf.readableBytes() < 26) { // 15 (imei) + 1 (comma) + 3 (skip) + 1 (skip) + 4 (remaining cache) + 2 (count)
+        return null;
+    }
+
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    if (buf.readableBytes() < 15) { // imei length
+        return null;
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    if (buf.readableBytes() < 6) { // remaining cache (4) + count (2)
+        return null;
+    }
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
+        if (buf.readableBytes() < 4) { // length (2) + index (2)
+            break;
+        }
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
-            int paramCount = buf.readUnsignedByte();
+        int paramCount;
+        while ((paramCount = buf.readUnsignedByte()) > 0) {
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { // id
+                    break;
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { // id (2)
+                        break;
+                    }
+                    buf.readByte(); // skip 0xFE
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
                 switch (id) {
                     case 0x01:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x47:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         int lockState = buf.readUnsignedByte();
                         if (lockState > 0) {
                             position.set(Position.KEY_LOCK, lockState == 2);
                         }
                         break;
                     case 0x97:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
+                        if (buf.readableBytes() < 1) { // value
+                            break;
+                        }
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
+                        if (buf.readableBytes() < 1) { // skip value
+                            break;
+                        }
                         buf.readUnsignedByte();
                         break;
                 }
             }
 
+            // Additional parameters with 2-byte ids
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) { // id
+                    break;
+                }
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { // id (2)
+                        break;
+                    }
+                    buf.readByte(); // skip 0xFE
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
                 switch (id) {
                     case 0x08:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
+                        if (buf.readableBytes() < 2) { // value
+                            break;
+                        }
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
+                        if (buf.readableBytes() < 2) { // skip value
+                            break;
+                        }
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
+            // Additional parameters with 4-byte ids
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                switch (id) {
-                    case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
-                        break;
-                    case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
-                        break;
-                    case 0x0C:
-                    case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                        break;
-                    case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
-                        break;
-                    case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
-                        break;
-                    case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
-                        break;
-                    case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                if (buf.readableBytes() < 1) { // id
                     break;
-                    default:
-                        buf.readUnsignedIntLE();
+                }
+                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
+                int id;
+                if (extension) {
+                    if (buf.readableBytes() < 2) { // id (2)
                         break;
                     }
+                    buf.readByte(); // skip 0xFE
+                    id = buf.readUnsignedShort();
+                } else {
+                    id = buf.readUnsignedByte();
+                }
+                if (buf.readableBytes() < 1) { // length
+                    break;
                 }
-
-            paramCount = buf.readUnsignedByte();
-            for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
+                        if (buf.readableBytes() < length) { // label and value
+                            break;
+                        }
                         buf.readUnsignedByte(); // label
                         position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        buf.skipBytes(length - 3); // skip remaining data
                         break;
                     case 0xFE31:
+                        if (buf.readableBytes() < length) { // alarm protocol, alarm type, and remaining data
+                            break;
+                        }
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
                         buf.skipBytes(length - 2);
                         break;
                     case 0xFEA8:
+                        if (buf.readableBytes() < length) { // battery status, battery level, and battery alert
+                            break;
+                        }
                         buf.readUnsignedByte(); // battery status
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         buf.readUnsignedByte(); // battery alert
+                        buf.skipBytes(length - 3); // skip remaining data
                         break;
                     default:
+                        if (buf.readableBytes() < length) { // skip data
+                            break;
+                        }
                         buf.skipBytes(length);
                         break;
                 }
             }
 
             positions.add(position);
         }
 
     return positions;
 }
\ No newline at end of file
