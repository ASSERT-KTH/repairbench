diff --git a/tmp/ba1073b5-5063-4e91-92ef-a7ce62522ab3_buggy.java b/tmp/49003667-31a3-4bff-8715-02d72735222a_fixed.java
index 0a8838d..c072d6a 100644
--- a/tmp/ba1073b5-5063-4e91-92ef-a7ce62522ab3_buggy.java
+++ b/tmp/49003667-31a3-4bff-8715-02d72735222a_fixed.java
@@ -1,61 +1,70 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
+            // Fix: extract driver unique ID when not empty
+            if (position.getAttributes().containsKey(Position.KEY_DRIVER_UNIQUE_ID)) {
+                String driverUniqueId = position.getAttributes().get(Position.KEY_DRIVER_UNIQUE_ID).toString();
+                if (!driverUniqueId.isEmpty()) {
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, driverUniqueId);
+                } else {
+                    position.getAttributes().remove(Position.KEY_DRIVER_UNIQUE_ID);
+                }
+            }
         }
 
         if (!position.getOutdated() ||!position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel!= null && codec!= CODEC_12 && codec!= CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty()? null : positions;
 }
\ No newline at end of file
