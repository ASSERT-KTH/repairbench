diff --git a/tmp/dea386f0-c494-45a1-8f40-633d886a5db3_buggy.java b/tmp/ea6b603e-f0ed-428e-9983-0196d6437a2e_fixed.java
index 23f078d..9f26475 100644
--- a/tmp/dea386f0-c494-45a1-8f40-633d886a5db3_buggy.java
+++ b/tmp/ea6b603e-f0ed-428e-9983-0196d6437a2e_fixed.java
@@ -1,14 +1,23 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Remove the trailing '?' added by URLEncoder for supplementary characters
+            if (encoded.endsWith("?")) {
+                sb.append(encoded.substring(0, encoded.length() - 1));
+            } else {
+                sb.append(encoded);
+            }
         } else {
             sb.append((char) c);
         }
+        // advance by the code point size (for supplementary characters)
+        if (Character.charCount(c) == 2) {
+            i++;
+        }
     }
 }
\ No newline at end of file
