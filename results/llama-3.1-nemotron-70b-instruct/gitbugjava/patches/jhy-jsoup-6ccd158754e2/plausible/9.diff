diff --git a/tmp/8b668956-4594-4c7a-b032-85aa37477977_buggy.java b/tmp/a3bfa07d-2a50-4bf6-b4d5-d63b1a72e10a_fixed.java
index 23f078d..664db1f 100644
--- a/tmp/8b668956-4594-4c7a-b032-85aa37477977_buggy.java
+++ b/tmp/a3bfa07d-2a50-4bf6-b4d5-d63b1a72e10a_fixed.java
@@ -1,14 +1,30 @@
+/**
+ * Appends a string to a StringBuilder, performing minimal Unicode to ASCII normalization and URL encoding for non-ASCII characters.
+ * 
+ * @param s              the input string
+ * @param spaceAsPlus    whether to replace spaces with '+' or "%20"
+ * @param sb             the StringBuilder to append to
+ * @throws UnsupportedEncodingException if the UTF-8 charset is not supported (should never occur)
+ */
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Remove the trailing '%' from supplementary character encodings (e.g., %F0%9F%92%A9%3F -> %F0%9F%92%A9)
+            if (encoded.length() > 3 && encoded.endsWith("%3F")) {
+                sb.append(encoded.substring(0, encoded.length() - 3));
+            } else {
+                sb.append(encoded);
+            }
         } else {
             sb.append((char) c);
         }
+        // Advance the index to account for supplementary characters (which occupy 2 code units)
+        if (Character.charCount(c) == 2) {
+            i++;
+        }
     }
 }
\ No newline at end of file
