diff --git a/tmp/09ccf678-6613-44ad-a550-8accb992702b_buggy.java b/tmp/d87cb188-4cdb-4d2e-973b-94f66495ddf0_fixed.java
index 23f078d..a72e0c8 100644
--- a/tmp/09ccf678-6613-44ad-a550-8accb992702b_buggy.java
+++ b/tmp/d87cb188-4cdb-4d2e-973b-94f66495ddf0_fixed.java
@@ -1,14 +1,27 @@
+/**
+ * Appends a string to a StringBuilder, converting Unicode to ASCII, 
+ * normalizing spaces, and escaping non-ASCII characters.
+ * 
+ * @param s               the input string
+ * @param spaceAsPlus     whether to replace spaces with '+' or "%20"
+ * @param sb              the StringBuilder to append to
+ * @throws UnsupportedEncodingException if the encoding fails
+ */
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            // Use the code point to directly encode, avoiding unnecessary String creation
+            sb.append(URLEncoder.encode(String.valueOf(Character.toChars(c)), UTF_8.name()));
+        } else if (c == '?') { // handle '?' separately to avoid double encoding
+            sb.append('?');
         } else {
             sb.append((char) c);
         }
+        // advance by the correct number of chars for the code point
+        i += Character.charCount(c) - 1;
     }
 }
\ No newline at end of file
