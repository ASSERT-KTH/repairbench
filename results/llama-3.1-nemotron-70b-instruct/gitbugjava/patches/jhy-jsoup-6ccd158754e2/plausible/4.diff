diff --git a/tmp/17535ccb-26c5-4252-b73c-ebf9a84c6410_buggy.java b/tmp/77c04fa3-abf0-45e7-be49-f0742dc836a9_fixed.java
index 23f078d..60fe5cb 100644
--- a/tmp/17535ccb-26c5-4252-b73c-ebf9a84c6410_buggy.java
+++ b/tmp/77c04fa3-abf0-45e7-be49-f0742dc836a9_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
+        } else if (Character.isSupplementaryCodePoint(c)) { // check for supplementary code points
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Remove trailing '%' added by URLEncoder for certain supplementary characters
+            if (encoded.endsWith("%")) {
+                encoded = encoded.substring(0, encoded.length() - 1);
+            }
+            sb.append(encoded);
+        } else if (c > 127) { // out of ascii range (but not supplementary)
             sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
+        // Advance by the correct number of chars for the current code point
+        i += Character.charCount(c) - 1;
     }
 }
\ No newline at end of file
