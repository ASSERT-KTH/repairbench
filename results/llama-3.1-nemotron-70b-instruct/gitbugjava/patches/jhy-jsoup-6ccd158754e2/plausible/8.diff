diff --git a/tmp/3db6aea1-fc34-4d6c-a51c-0664925f0cf6_buggy.java b/tmp/10b562b9-f509-4a2d-8d0a-cbf8702d9874_fixed.java
index 23f078d..ed01037 100644
--- a/tmp/3db6aea1-fc34-4d6c-a51c-0664925f0cf6_buggy.java
+++ b/tmp/10b562b9-f509-4a2d-8d0a-cbf8702d9874_fixed.java
@@ -1,14 +1,17 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
+        } else if (Character.isSupplementaryCodePoint(c)) { // check for supplementary code points
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            sb.append(encoded.replace("%3F", "")); // remove trailing %3F if present
+        } else if (c > 127) { // out of ascii range (non-supplementary)
             sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c) - 1; // increment i to skip supplementary code unit
     }
 }
\ No newline at end of file
