diff --git a/tmp/70b4f51d-40c2-4699-95f4-56dd6a00b215_buggy.java b/tmp/c593a904-514c-40f7-8929-01baa634c793_fixed.java
index 1c732f4..e349255 100644
--- a/tmp/70b4f51d-40c2-4699-95f4-56dd6a00b215_buggy.java
+++ b/tmp/c593a904-514c-40f7-8929-01baa634c793_fixed.java
@@ -1,88 +1,107 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    // Fix: Handle cases where '|' is not present or is at the start/end of the sentence
+    int startIndex = sentence.indexOf('|');
+    int endIndex = sentence.lastIndexOf('|');
+    if (startIndex!= -1 && endIndex!= -1 && startIndex < endIndex) {
+        sentence = sentence.substring(startIndex + 1, endIndex);
+    } else {
+        // Handle invalid sentence format, e.g., by throwing an exception or returning an error
+        throw new RuntimeException("Invalid sentence format: " + msg);
+    }
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter!= -1) { // Fix: Avoid StringIndexOutOfBoundsException
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
             switch (key) {
                 case "unit":
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession!= null) {
                         position.setDeviceId(deviceSession.getDeviceId());
                     }
                     break;
                 case "gps_valid":
                     position.setValid(Integer.parseInt(value)!= 0);
                     break;
                 case "datetime_actual":
-                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    // Fix: Use a more robust date parsing approach to handle different formats
+                    try {
+                        position.setTime(DateUtil.parseDate(value, "yyyy/MM/dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss"));
+                    } catch (ParseException e) {
+                        // Handle parse exception, e.g., by logging or throwing a custom exception
+                        throw new RuntimeException("Failed to parse datetime_actual: " + value, e);
+                    }
                     break;
                 case "latitude":
                     position.setLatitude(Double.parseDouble(value));
                     break;
                 case "longitude":
                     position.setLongitude(Double.parseDouble(value));
                     break;
                 case "altitude":
                     position.setAltitude(Double.parseDouble(value));
                     break;
                 case "velocity":
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                     break;
                 case "heading":
                     position.setCourse(Integer.parseInt(value));
                     break;
                 case "eventid":
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
                     break;
                 case "mileage":
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                     break;
                 case "satellites":
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case "ignition":
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value)!= 0);
                     break;
                 case "door":
                     position.set(Position.KEY_DOOR, Integer.parseInt(value)!= 0);
                     break;
                 case "arm":
                     position.set(Position.KEY_ARMED, Integer.parseInt(value)!= 0);
                     break;
                 case "fuel":
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                     break;
                 case "rpm":
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
                     break;
                 case "main_voltage":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
                     break;
                 case "backup_voltage":
+                    // Fix: Handle invalid or missing backup voltage values
+                    if (!value.equals("-1.00")) { // Assuming -1.00 indicates an invalid value
                         position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                    }
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                     break;
                 case "extra1":
                 case "extra2":
                 case "extra3":
                 default:
                     position.set(key, value);
                     break;
             }
         }
+    }
 
     return position;
 }
\ No newline at end of file
