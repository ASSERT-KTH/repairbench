diff --git a/tmp/a72e3bc4-f7db-4429-92b3-63c6ecbf4b84_buggy.java b/tmp/1f91fd7e-2b3d-4459-9459-feb032acd51c_fixed.java
index b8e3fa3..8b9f29f 100644
--- a/tmp/a72e3bc4-f7db-4429-92b3-63c6ecbf4b84_buggy.java
+++ b/tmp/1f91fd7e-2b3d-4459-9459-feb032acd51c_fixed.java
@@ -1,65 +1,64 @@
 /**
  * Builds the {@link BackOffPolicy} with the given parameters.
  * @return the {@link BackOffPolicy} instance
  */
 public BackOffPolicy build() {
     if (this.multiplier!= null && this.multiplier > 0 || this.multiplierSupplier!= null) {
         ExponentialBackOffPolicy policy;
         if (Boolean.TRUE.equals(this.random)) {
             policy = new ExponentialRandomBackOffPolicy();
-			}
-			else {
+        } else {
             policy = new ExponentialBackOffPolicy();
         }
         if (this.delay!= null) {
             policy.setInitialInterval(this.delay);
         }
         if (this.delaySupplier!= null) {
             policy.initialIntervalSupplier(this.delaySupplier);
         }
         if (this.multiplier!= null) {
             policy.setMultiplier(this.multiplier);
         }
         if (this.multiplierSupplier!= null) {
             policy.multiplierSupplier(this.multiplierSupplier);
         }
-			if (this.maxDelay != null && this.delay != null) {
-				policy.setMaxInterval(
-						this.maxDelay > this.delay ? this.maxDelay : ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL);
+        if (this.maxDelay!= null) { // Removed dependency on 'this.delay'
+            policy.setMaxInterval(Math.max(this.maxDelay, ExponentialBackOffPolicy.DEFAULT_MAX_INTERVAL));
         }
         if (this.maxDelaySupplier!= null) {
             policy.maxIntervalSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper!= null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
-		}
-		if (this.maxDelay != null && this.delay != null && this.maxDelay > this.delay) {
+    } else if (this.maxDelay!= null && this.delay!= null && this.maxDelay > this.delay) {
         UniformRandomBackOffPolicy policy = new UniformRandomBackOffPolicy();
         if (this.delay!= null) {
             policy.setMinBackOffPeriod(this.delay);
         }
         if (this.delaySupplier!= null) {
             policy.minBackOffPeriodSupplier(this.delaySupplier);
         }
         if (this.maxDelay!= null) {
             policy.setMaxBackOffPeriod(this.maxDelay);
         }
         if (this.maxDelaySupplier!= null) {
             policy.maxBackOffPeriodSupplier(this.maxDelaySupplier);
         }
         if (this.sleeper!= null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
-		}
+    } else if (this.delay!= null) { // Added condition to handle 'FixedBackOffPolicy' correctly
         FixedBackOffPolicy policy = new FixedBackOffPolicy();
-		if (this.delay != null) {
         policy.setBackOffPeriod(this.delay);
-		}
         if (this.sleeper!= null) {
             policy.setSleeper(this.sleeper);
         }
         return policy;
+    } else {
+        // Optionally, you can provide a default BackOffPolicy or throw an exception
+        throw new IllegalStateException("Unable to determine BackOffPolicy. Please provide necessary parameters.");
+    }
 }
\ No newline at end of file
