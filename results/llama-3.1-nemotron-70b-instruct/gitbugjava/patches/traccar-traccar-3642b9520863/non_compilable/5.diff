diff --git a/tmp/1da9ee23-1ef9-4644-a6d1-d2b92c59c6f6_buggy.java b/tmp/e7c260c0-f229-44dc-bb8c-62bd484505a7_fixed.java
index 568865c..f9989c7 100644
--- a/tmp/1da9ee23-1ef9-4644-a6d1-d2b92c59c6f6_buggy.java
+++ b/tmp/e7c260c0-f229-44dc-bb8c-62bd484505a7_fixed.java
@@ -1,121 +1,143 @@
+/**
+ * Decodes a position from a given Channel, SocketAddress, ByteBuf, and index.
+ * 
+ * @param channel         The Channel to decode from.
+ * @param remoteAddress   The SocketAddress of the remote device.
+ * @param buf             The ByteBuf containing the data to decode.
+ * @param index           The index in the ByteBuf to start decoding from.
+ * @return                The decoded Position, or null if decoding fails.
+ */
 private Position decodePosition(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     int status = buf.readUnsignedShort();
 
     position.setValid(BitUtil.check(status, 15));
 
     position.set(Position.KEY_STATUS, status);
     position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
     int event = buf.readUnsignedShort();
     position.set(Position.KEY_ALARM, decodeAlarm(event));
     position.set(Position.KEY_EVENT, event);
 
     String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
+    // Fix: Validate year value to prevent NumberFormatException
+    int year = Integer.parseInt(time.substring(0, 2));
+    if (year + 2000 < 1970 || year + 2000 > 2100) { // assuming valid years are between 1970 and 2100
+        return null;
+    }
+
     DateBuilder dateBuilder = new DateBuilder()
-                .setYear(Integer.parseInt(time.substring(0, 2)))
+           .setYear(year + 2000) // assuming years are encoded as offsets from 2000
            .setMonth(Integer.parseInt(time.substring(2, 4)))
            .setDay(Integer.parseInt(time.substring(4, 6)))
            .setHour(Integer.parseInt(time.substring(6, 8)))
            .setMinute(Integer.parseInt(time.substring(8, 10)))
            .setSecond(Integer.parseInt(time.substring(10, 12)));
     position.setTime(dateBuilder.getDate());
 
     position.setLongitude(buf.readInt() * 0.00001);
     position.setLatitude(buf.readInt() * 0.00001);
 
     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
     position.setCourse(buf.readUnsignedShort());
     position.setAltitude(buf.readUnsignedShort());
 
     position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
     Network network = new Network();
 
     while (buf.readableBytes() > 4) {
         int subtype = buf.readUnsignedShort();
         int length = buf.readUnsignedShort() - 4;
         int endIndex = buf.readerIndex() + length;
         switch (subtype) {
             case 0x0001:
                 int coolantTemperature = buf.readUnsignedByte() - 40;
                 if (coolantTemperature <= 215) {
                     position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                 }
                 int rpm = buf.readUnsignedShort();
                 if (rpm <= 65535) {
                     position.set(Position.KEY_RPM, rpm);
                 }
                 position.set("averageSpeed", buf.readUnsignedByte());
                 buf.readUnsignedShort(); // interval fuel consumption
                 position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                 position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                 buf.readUnsignedInt(); // trip id
                 if (buf.readerIndex() < endIndex) {
                     position.set("adBlueLevel", buf.readUnsignedByte() * 0.4);
                 }
                 break;
             case 0x0005:
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                 buf.readUnsignedInt(); // run time
                 break;
             case 0x0009:
                 position.set(
                         Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
                 break;
             case 0x0011:
-                    position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
+                // Fix: Validate hours value to prevent NumberFormatException
+                String hoursStr = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString();
+                try {
+                    double hours = Double.parseDouble(hoursStr) * 0.05;
+                    position.set(Position.KEY_HOURS, hours);
+                } catch (NumberFormatException e) {
+                    // handle or log the exception
+                }
                 break;
             case 0x0014:
                 position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                 position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                 position.set("airTemp", buf.readUnsignedByte() - 40);
                 position.set("airFlow", buf.readUnsignedShort() * 0.01);
                 position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                 break;
             case 0x0020:
                 String[] cells = buf.readCharSequence(
                         length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String cell : cells) {
                     String[] values = cell.split("@");
                     network.addCellTower(CellTower.from(
                             Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                             Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                 }
                 break;
             case 0x0021:
                 String[] points = buf.readCharSequence(
                         length, StandardCharsets.US_ASCII).toString().split("\\+");
                 for (String point : points) {
                     String[] values = point.split("@");
                     network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                 }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
         buf.readerIndex(endIndex);
     }
 
     if (network.getCellTowers()!= null || network.getWifiAccessPoints()!= null) {
         position.setNetwork(network);
     }
 
     sendResponse(channel, MSG_POSITION_RSP, index, null);
 
     return position;
 }
\ No newline at end of file
