diff --git a/tmp/bfac95f7-e774-44ec-a645-fe322382979a_buggy.java b/tmp/336dd32b-49d2-427c-9979-5e96b809b7f0_fixed.java
index 47a8941..be829eb 100644
--- a/tmp/bfac95f7-e774-44ec-a645-fe322382979a_buggy.java
+++ b/tmp/336dd32b-49d2-427c-9979-5e96b809b7f0_fixed.java
@@ -1,53 +1,63 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // Check for null to prevent NPE
+    if (grandParent!= null) {
         if (grandParent.isClass()) {
             // Element class should be added as its container child:
             JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
             writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
             classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+        } else if (grandParent.isPackage()) {
             JPackage grandParentPackage = (JPackage) grandParent;
 
             writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
             classes = getPrivateField(grandParentPackage, "classes");
 
             // In this scenario class should have "static" modifier reset otherwise it won't compile:
             setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
             for (ClassOutline classOutline : outline.getClasses()) {
                 if (classOutline.implClass == clazz) {
                     XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                    // Inner class is always a local declaration.
+                    if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                         setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                    } else {
+                        // Handle the case when the assumption is not met
+                        writeSummary("Warning: Inner class " + clazz.fullName() + " is not a local declaration.");
+                    }
                     break;
                 }
             }
+        } else {
+            // Handle the case when grandParent is neither a class nor a package
+            writeSummary("Error: Unable to move inner class " + clazz.fullName() + " to unknown container type.");
+            return;
         }
 
         if (classes.containsKey(clazz.name())) {
             writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
             setPrivateField(clazz, "name", parent.name() + clazz.name());
         }
 
         classes.put(clazz.name(), clazz);
 
         // Finally modify the class so that it refers back the container:
         setPrivateField(clazz, "outer", grandParent);
+    } else {
+        // Handle the case when grandParent is null
+        writeSummary("Error: Unable to move inner class " + clazz.fullName() + " due to null grandparent.");
+    }
 }
\ No newline at end of file
