diff --git a/tmp/69c27dda-b9ab-4c04-9d8b-a3e8a631dacd_buggy.java b/tmp/455b725c-7816-4fda-a5d5-7fe23b337440_fixed.java
index 855afa5..933a233 100644
--- a/tmp/69c27dda-b9ab-4c04-9d8b-a3e8a631dacd_buggy.java
+++ b/tmp/455b725c-7816-4fda-a5d5-7fe23b337440_fixed.java
@@ -1,13 +1,30 @@
+/**
+ * Encodes a URL to conform to the URL spec (e.g., spaces to %20, etc.).
+ * 
+ * @param u URL to encode
+ * @return encoded URL
+ */
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+        URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(), u.getQuery(), u.getRef());
+        String encodedUrl = uri.toASCIIString();
+        // Manually replace spaces in query and fragment (toASCIIString doesn't)
+        int queryStart = encodedUrl.indexOf('?');
+        if (queryStart!= -1) {
+            String query = encodedUrl.substring(queryStart + 1);
+            query = query.replace(" ", "%20");
+            encodedUrl = encodedUrl.substring(0, queryStart + 1) + query;
+        }
+        int fragmentStart = encodedUrl.indexOf('#');
+        if (fragmentStart!= -1) {
+            String fragment = encodedUrl.substring(fragmentStart + 1);
+            fragment = fragment.replace(" ", "%20");
+            encodedUrl = encodedUrl.substring(0, fragmentStart + 1) + fragment;
+        }
+        return new URL(encodedUrl);
     } catch (URISyntaxException | MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
