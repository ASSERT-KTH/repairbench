diff --git a/tmp/744ead41-7cf3-453d-a2f9-1808b4d8284a_buggy.java b/tmp/69026e44-73ac-4fc4-b2b5-1e180b604356_fixed.java
index 855afa5..68194de 100644
--- a/tmp/744ead41-7cf3-453d-a2f9-1808b4d8284a_buggy.java
+++ b/tmp/69026e44-73ac-4fc4-b2b5-1e180b604356_fixed.java
@@ -1,13 +1,26 @@
+/**
+ * Encodes a URL, ensuring special characters are properly escaped.
+ * 
+ * @param u the URL to encode
+ * @return the encoded URL
+ */
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+        // Properly encode URL components to handle spaces and special characters
+        URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), 
+                           u.getPath(), u.getQuery(), u.getRef());
+        String encodedUrl = uri.toASCIIString();
+        // Only replace spaces in the query part, as URI.toASCIIString() handles the rest
+        int queryStart = encodedUrl.indexOf('?');
+        if (queryStart!= -1) {
+            String query = encodedUrl.substring(queryStart + 1);
+            query = query.replace(" ", "%20");
+            encodedUrl = encodedUrl.substring(0, queryStart + 1) + query;
+        }
+        return new URL(encodedUrl);
     } catch (URISyntaxException | MalformedURLException e) {
-            // give up and return the original input
+        // Give up and return the original input
         return u;
     }
 }
\ No newline at end of file
