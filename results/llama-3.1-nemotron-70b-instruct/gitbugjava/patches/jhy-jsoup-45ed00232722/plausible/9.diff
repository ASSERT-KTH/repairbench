diff --git a/tmp/47a70f9b-5c9a-416e-ab1f-458ffe072a3e_buggy.java b/tmp/8f7a2b50-0fb6-47f5-9b28-ea93814e93c0_fixed.java
index 855afa5..07ef8d6 100644
--- a/tmp/47a70f9b-5c9a-416e-ab1f-458ffe072a3e_buggy.java
+++ b/tmp/8f7a2b50-0fb6-47f5-9b28-ea93814e93c0_fixed.java
@@ -1,13 +1,26 @@
+/**
+ * Encodes a URL, properly escaping spaces and special characters.
+ * 
+ * @param u the URL to encode
+ * @return the encoded URL
+ */
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+        // Properly encode URL components to handle spaces and special characters
+        URI uri = new URI(u.getProtocol(), u.getUserInfo(), u.getHost(), u.getPort(), 
+                          u.getPath(), u.getQuery(), u.getRef());
+        String encodedUrl = uri.toASCIIString();
+        // Explicitly replace spaces in the query and fragment (if any) with %20
+        if (uri.getQuery()!= null) {
+            encodedUrl = encodedUrl.replace(uri.getQuery(), uri.getQuery().replace(" ", "%20"));
+        }
+        if (uri.getFragment()!= null) {
+            encodedUrl = encodedUrl.replace(uri.getFragment(), uri.getFragment().replace(" ", "%20"));
+        }
+        return new URL(encodedUrl);
     } catch (URISyntaxException | MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
