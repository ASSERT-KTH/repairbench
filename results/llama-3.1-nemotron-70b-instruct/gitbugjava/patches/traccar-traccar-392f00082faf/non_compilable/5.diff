diff --git a/tmp/7a1fc4ae-00c9-4e06-888c-abaf45a967ee_buggy.java b/tmp/f4dd22fc-cb60-471a-aebf-21908ee79222_fixed.java
index fcb460f..8bb5cae 100644
--- a/tmp/7a1fc4ae-00c9-4e06-888c-abaf45a967ee_buggy.java
+++ b/tmp/f4dd22fc-cb60-471a-aebf-21908ee79222_fixed.java
@@ -1,183 +1,255 @@
+/**
+ * Decodes a list of positions from a binary message.
+ * 
+ * @param channel
+ *            the channel the message was received from
+ * @param remoteAddress
+ *            the address of the device that sent the message
+ * @param buf
+ *            the message contents
+ * @return the list of decoded positions
+ */
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
+    if (buf.readableBytes() < 17) { // Added input validation
+        return null;
+    }
+
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    if (buf.readableBytes() < 15) { // Added input validation
+        return null;
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // Added try-catch block to handle potential IndexOutOfBoundsException
+    try {
         buf.readUnsignedIntLE(); // remaining cache
         int count = buf.readUnsignedShortLE();
 
         for (int i = 0; i < count; i++) {
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            // Added input validation for all read operations
+            if (buf.readableBytes() < 4) break; // length, index
             buf.readUnsignedShortLE(); // length
             buf.readUnsignedShortLE(); // index
 
+            if (buf.readableBytes() < 1) break; // paramCount
             int paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // id
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x01:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_EVENT
                         position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                         break;
                     case 0x05:
+                        if (buf.readableBytes() < 1) break; // position.setValid
                         position.setValid(buf.readUnsignedByte() > 0);
                         break;
                     case 0x06:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_SATELLITES
                         position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                         break;
                     case 0x07:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_RSSI
                         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                         break;
                     case 0x14:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_OUTPUT
                         position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                         break;
                     case 0x15:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_INPUT
                         position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                         break;
                     case 0x97:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_THROTTLE
                         position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                         break;
                     case 0x9D:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_FUEL_LEVEL
                         position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                         break;
                     case 0xFE69:
+                        if (buf.readableBytes() < 1) break; // Position.KEY_BATTERY_LEVEL
                         position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                         break;
                     default:
+                        if (buf.readableBytes() < 1) break; // skip unknown parameter
                         buf.readUnsignedByte();
                         break;
                 }
             }
 
+            if (buf.readableBytes() < 1) break; // paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // id
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x08:
+                        if (buf.readableBytes() < 2) break; // speed
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                         break;
                     case 0x09:
+                        if (buf.readableBytes() < 2) break; // course
                         position.setCourse(buf.readUnsignedShortLE());
                         break;
                     case 0x0A:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_HDOP
                         position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                         break;
                     case 0x0B:
+                        if (buf.readableBytes() < 2) break; // altitude
                         position.setAltitude(buf.readShortLE());
                         break;
                     case 0x16:
+                        if (buf.readableBytes() < 2) break; // Position.PREFIX_ADC + 1
                         position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x19:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_BATTERY
                         position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x1A:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_POWER
                         position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                         break;
                     case 0x40:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_EVENT
                         position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                         break;
                     case 0x91:
                     case 0x92:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_OBD_SPEED
                         position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                         break;
                     case 0x98:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_FUEL_USED
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                         break;
                     case 0x99:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_RPM
                         position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                         break;
                     case 0x9C:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_COOLANT_TEMP
                         position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                         break;
                     case 0x9F:
+                        if (buf.readableBytes() < 2) break; // Position.PREFIX_TEMP + 1
                         position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                         break;
                     case 0xC9:
+                        if (buf.readableBytes() < 2) break; // Position.KEY_FUEL_CONSUMPTION
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                         break;
                     default:
+                        if (buf.readableBytes() < 2) break; // skip unknown parameter
                         buf.readUnsignedShortLE();
                         break;
                 }
             }
 
+            if (buf.readableBytes() < 1) break; // paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // id
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension? buf.readUnsignedShort() : buf.readUnsignedByte();
                 switch (id) {
                     case 0x02:
+                        if (buf.readableBytes() < 4) break; // latitude
                         position.setLatitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x03:
+                        if (buf.readableBytes() < 4) break; // longitude
                         position.setLongitude(buf.readIntLE() * 0.000001);
                         break;
                     case 0x04:
+                        if (buf.readableBytes() < 4) break; // time
                         position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                         break;
                     case 0x0C:
                     case 0x9B:
+                        if (buf.readableBytes() < 4) break; // Position.KEY_ODOMETER
                         position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                         break;
                     case 0x0D:
+                        if (buf.readableBytes() < 4) break; // "runtime"
                         position.set("runtime", buf.readUnsignedIntLE());
                         break;
                     case 0x25:
+                        if (buf.readableBytes() < 4) break; // Position.KEY_DRIVER_UNIQUE_ID
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                         break;
                     case 0xA0:
+                        if (buf.readableBytes() < 4) break; // Position.KEY_FUEL_USED
                         position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                         break;
                     case 0xA2:
+                        if (buf.readableBytes() < 4) break; // Position.KEY_FUEL_CONSUMPTION
                         position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                         break;
                     default:
+                        if (buf.readableBytes() < 4) break; // skip unknown parameter
                         buf.readUnsignedIntLE();
                         break;
                 }
             }
 
+            if (buf.readableBytes() < 1) break; // paramCount
             paramCount = buf.readUnsignedByte();
             for (int j = 0; j < paramCount; j++) {
+                if (buf.readableBytes() < 1) break; // id
                 boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
                 int id = extension? buf.readUnsignedShort() : buf.readUnsignedByte();
+                if (buf.readableBytes() < 1) break; // length
                 int length = buf.readUnsignedByte();
                 switch (id) {
                     case 0x2A:
                     case 0x2B:
                     case 0x2C:
                     case 0x2D:
                     case 0x2E:
                     case 0x2F:
                     case 0x30:
                     case 0x31:
+                        if (buf.readableBytes() < length) break; // label and value
                         buf.readUnsignedByte(); // label
                         position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                        buf.skipBytes(length - 3); // skip remaining length
                         break;
                     case 0xFE31:
+                        if (buf.readableBytes() < length) break; // alarm protocol, alarm type, and data
                         buf.readUnsignedByte(); // alarm protocol
                         buf.readUnsignedByte(); // alarm type
                         buf.skipBytes(length - 2);
                         break;
                     default:
+                        if (buf.readableBytes() < length) break; // skip unknown parameter
                         buf.skipBytes(length);
                         break;
                 }
             }
 
             positions.add(position);
         }
+    } catch (IndexOutOfBoundsException e) {
+        // Handle exception, or rethrow if desired
+    }
 
     return positions;
 }
\ No newline at end of file
