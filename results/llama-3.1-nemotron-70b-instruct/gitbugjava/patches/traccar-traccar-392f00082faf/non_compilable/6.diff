diff --git a/tmp/9d0fdaa5-0f30-4860-af07-0dfbb53f661f_buggy.java b/tmp/ce6f2b01-b2e0-434d-90a3-187f3fd075f8_fixed.java
index fcb460f..419ac52 100644
--- a/tmp/9d0fdaa5-0f30-4860-af07-0dfbb53f661f_buggy.java
+++ b/tmp/ce6f2b01-b2e0-434d-90a3-187f3fd075f8_fixed.java
@@ -1,183 +1,367 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
+    // Check if buffer has enough data to proceed
+    if (buf.readableBytes() < 23) {
+        return null; // or throw an exception, depending on the desired behavior
+    }
+
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
+    if (buf.readableBytes() < 15) {
+        return null; // or throw an exception, depending on the desired behavior
+    }
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
+    // Check if buffer has enough data to proceed
+    if (buf.readableBytes() < 6) {
+        return null; // or throw an exception, depending on the desired behavior
+    }
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
+        // Check if buffer has enough data to proceed
+        if (buf.readableBytes() < 4) {
+            break; // or throw an exception, depending on the desired behavior
+        }
         buf.readUnsignedShortLE(); // length
         buf.readUnsignedShortLE(); // index
 
         int paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id;
+            if (extension) {
+                if (buf.readableBytes() < 2) {
+                    break; // or throw an exception, depending on the desired behavior
+                }
+                buf.readBytes(1); // Consume the 0xFE byte
+                id = buf.readUnsignedShort();
+            } else {
+                id = buf.readUnsignedByte();
+            }
             switch (id) {
                 case 0x01:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     break;
                 case 0x05:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setValid(buf.readUnsignedByte() > 0);
                     break;
                 case 0x06:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case 0x07:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case 0x14:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
                     break;
                 case 0x15:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());
                     break;
                 case 0x97:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case 0x9D:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case 0xFE69:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
                     break;
                 default:
+                    if (buf.readableBytes() < 1) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     buf.readUnsignedByte();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id;
+            if (extension) {
+                if (buf.readableBytes() < 2) {
+                    break; // or throw an exception, depending on the desired behavior
+                }
+                buf.readBytes(1); // Consume the 0xFE byte
+                id = buf.readUnsignedShort();
+            } else {
+                id = buf.readUnsignedByte();
+            }
             switch (id) {
                 case 0x08:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
                     break;
                 case 0x09:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setCourse(buf.readUnsignedShortLE());
                     break;
                 case 0x0A:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
                     break;
                 case 0x0B:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setAltitude(buf.readShortLE());
                     break;
                 case 0x16:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
                     break;
                 case 0x98:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
                     break;
                 case 0x99:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
                     break;
                 case 0x9C:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
                     break;
                 case 0x9F:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
                     break;
                 case 0xC9:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
                     break;
                 default:
+                    if (buf.readableBytes() < 2) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     buf.readUnsignedShortLE();
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            int id;
+            if (extension) {
+                if (buf.readableBytes() < 2) {
+                    break; // or throw an exception, depending on the desired behavior
+                }
+                buf.readBytes(1); // Consume the 0xFE byte
+                id = buf.readUnsignedShort();
+            } else {
+                id = buf.readUnsignedByte();
+            }
+            int length;
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
+            length = buf.readUnsignedByte();
             switch (id) {
                 case 0x02:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setLatitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x03:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setLongitude(buf.readIntLE() * 0.000001);
                     break;
                 case 0x04:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
                     break;
                 case 0x0D:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set("runtime", buf.readUnsignedIntLE());
                     break;
                 case 0x25:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
                     break;
                 case 0xA0:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
+                    if (buf.readableBytes() < 4) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
                     break;
                 default:
-                        buf.readUnsignedIntLE();
+                    if (buf.readableBytes() < length) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
+                    buf.skipBytes(length);
                     break;
             }
         }
 
         paramCount = buf.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
             boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+            int id;
+            if (extension) {
+                if (buf.readableBytes() < 2) {
+                    break; // or throw an exception, depending on the desired behavior
+                }
+                buf.readBytes(1); // Consume the 0xFE byte
+                id = buf.readUnsignedShort();
+            } else {
+                id = buf.readUnsignedByte();
+            }
+            int length;
+            if (buf.readableBytes() < 1) {
+                break; // or throw an exception, depending on the desired behavior
+            }
+            length = buf.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
+                    if (buf.readableBytes() < length) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     buf.readUnsignedByte(); // label
                     position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
                     break;
                 case 0xFE31:
+                    if (buf.readableBytes() < length) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     buf.readUnsignedByte(); // alarm protocol
                     buf.readUnsignedByte(); // alarm type
                     buf.skipBytes(length - 2);
                     break;
                 default:
+                    if (buf.readableBytes() < length) {
+                        break; // or throw an exception, depending on the desired behavior
+                    }
                     buf.skipBytes(length);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
