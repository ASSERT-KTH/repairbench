diff --git a/tmp/e0287c7b-d6e5-40f4-90a6-105653647cb2_buggy.java b/tmp/9955298d-73ec-4336-ab91-9d46ee0b32a0_fixed.java
index 5bf31b1..e6b052a 100644
--- a/tmp/e0287c7b-d6e5-40f4-90a6-105653647cb2_buggy.java
+++ b/tmp/9955298d-73ec-4336-ab91-9d46ee0b32a0_fixed.java
@@ -1,17 +1,44 @@
+/**
+ * Consumes a sub-query (enclosed or not) from the token queue, 
+ * stopping at combinators if the sub-query is not empty, 
+ * or consuming a single token if the sub-query is empty.
+ * 
+ * @return the consumed sub-query as a string
+ */
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
+    boolean inEnclosure = false; // track if we're inside an enclosure
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
+        if (tq.matches("(")) {
+            if (inEnclosure) {
+                sq.append(tq.consume()); // append if already in enclosure
+            } else {
+                inEnclosure = true;
                 sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
+                inEnclosure = false; // exit enclosure after consumption
+            }
+        } else if (tq.matches("[")) {
+            if (inEnclosure) {
+                sq.append(tq.consume()); // append if already in enclosure
+            } else {
+                inEnclosure = true;
                 sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+                inEnclosure = false; // exit enclosure after consumption
+            }
+        } else if (tq.matchesAny(Combinators)) {
+            if (sq.length() > 0 || inEnclosure) // break if non-empty or still in enclosure
                 break;
             else
                 tq.consume();
-            else
+        } else {
+            if (inEnclosure) {
                 sq.append(tq.consume());
+            } else {
+                // If not in an enclosure, consume and stop to avoid over-selection
+                sq.append(tq.consume());
+                break;
+            }
+        }
     }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
