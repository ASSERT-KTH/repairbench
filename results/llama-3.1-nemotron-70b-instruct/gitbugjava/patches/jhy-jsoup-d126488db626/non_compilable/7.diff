diff --git a/tmp/de47cfc5-501f-4e79-81e8-defb10e47429_buggy.java b/tmp/7a607866-dac9-4b44-a322-497e405dabc7_fixed.java
index 5bf31b1..9b094c7 100644
--- a/tmp/de47cfc5-501f-4e79-81e8-defb10e47429_buggy.java
+++ b/tmp/7a607866-dac9-4b44-a322-497e405dabc7_fixed.java
@@ -1,17 +1,29 @@
+/**
+ * Consume a sub-query from the token queue, handling nested queries and combinators.
+ * 
+ * @return the consumed sub-query as a string
+ */
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
-        while (!tq.isEmpty()) {
+    int initialSize = tq.size(); // track initial queue size
+    boolean combinatorEncountered = false; // flag to track if a combinator is encountered at the start
+
+    while (!tq.isEmpty() && sq.length() > 0 || initialSize!= tq.size()) {
         if (tq.matches("("))
             sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
         else if (tq.matches("["))
             sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+        else if (tq.matchesAny(Combinators)) {
+            if (sq.length() > 0) {
+                if (!combinatorEncountered) { // only break if not the first token
                     break;
-                else
+                }
+            } else {
+                combinatorEncountered = true; // mark as encountered if at the start
                 tq.consume();
-            else
+            }
+        } else
             sq.append(tq.consume());
     }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
