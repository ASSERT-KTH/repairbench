diff --git a/tmp/12800d4e-e2f5-4633-880c-0d6efdbc725c_buggy.java b/tmp/2cebf2d5-6f4a-48eb-9969-7ec183c9bdb1_fixed.java
index 5bf31b1..7ce3b07 100644
--- a/tmp/12800d4e-e2f5-4633-880c-0d6efdbc725c_buggy.java
+++ b/tmp/2cebf2d5-6f4a-48eb-9969-7ec183c9bdb1_fixed.java
@@ -1,17 +1,47 @@
+/**
+ * Consume a sub-query (i.e., a query enclosed in parentheses or brackets), 
+ * handling combinators correctly to avoid premature termination.
+ * 
+ * @return The consumed sub-query as a string.
+ */
 private String consumeSubQuery() {
     StringBuilder sq = StringUtil.borrowBuilder();
+    int nestingLevel = 0; // Track nesting level for balanced termination
+    char enclosure = '\0'; // Store the enclosure character for correct balancing
+    
     while (!tq.isEmpty()) {
-            if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
+        char c = tq.peek();
+        
+        // Check for enclosure characters and update nesting level accordingly
+        if (nestingLevel == 0) {
+            if (c == '(' || c == '[') {
+                enclosure = c;
+                sq.append(c);
+                tq.consume();
+                nestingLevel++;
+            } else if (tq.matchesAny(Combinators)) {
                 if (sq.length() > 0)
                     break;
                 else
                     tq.consume();
-            else
+            } else {
                 sq.append(tq.consume());
             }
+        } else { // Within an enclosure
+            if ((enclosure == '(' && c == ')') || (enclosure == '[' && c == ']')) {
+                nestingLevel--;
+                sq.append(tq.consume());
+                if (nestingLevel == 0) break; // Exit loop when fully balanced
+            } else {
+                sq.append(tq.consume());
+                if (c == '(' || c == '[') nestingLevel++;
+                if (c == ')' || c == ']') nestingLevel--;
+            }
+        }
+    }
+    if (nestingLevel!= 0) {
+        // Handle potential error case: unbalanced enclosure
+        throw new RuntimeException("Unbalanced enclosure in sub-query");
+    }
     return StringUtil.releaseBuilder(sq);
 }
\ No newline at end of file
