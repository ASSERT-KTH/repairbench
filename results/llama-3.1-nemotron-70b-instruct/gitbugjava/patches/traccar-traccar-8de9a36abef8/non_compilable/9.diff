diff --git a/tmp/70733c34-7e8e-41f7-a27b-17ac45874276_buggy.java b/tmp/f865b2bc-b0e6-4922-b32f-ebf8f1693653_fixed.java
index ad77f15..6800430 100644
--- a/tmp/70733c34-7e8e-41f7-a27b-17ac45874276_buggy.java
+++ b/tmp/f865b2bc-b0e6-4922-b32f-ebf8f1693653_fixed.java
@@ -1,112 +1,144 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
+            if (values.length > 0) {
                 position.setValid(values[index++].equals("A"));
+                if (values.length > index) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+                    if (values.length > index) {
                         position.setLatitude(Double.parseDouble(values[index].substring(1)));
                         if (values[index++].charAt(0) == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
+                        if (values.length > index) {
                             position.setLongitude(Double.parseDouble(values[index].substring(1)));
                             if (values[index++].charAt(0) == 'W') {
                                 position.setLongitude(-position.getLongitude());
                             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                            if (!values[index].isEmpty() && values.length > index) {
+                                position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                                index++;
                             }
+                            if (values.length > index) {
                                 position.setCourse(Integer.parseInt(values[index++]));
+                            }
                             if (index < values.length) {
                                 position.setAltitude(Integer.parseInt(values[index++]));
                             }
                             if (index < values.length) {
                                 position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
                             }
                             if (index < values.length) {
                                 position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
                             }
+                        }
+                    }
+                }
+            }
             break;
         case "GSM":
+            if (values.length > 2) {
                 index += 1; // registration status
                 index += 1; // signal strength
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                         Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                         Integer.parseInt(values[index++]))));
+            }
             break;
         case "COT":
             if (index < values.length) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
             }
             if (index < values.length) {
                 String[] hours = values[index].split("-");
                 position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
                         + (hours.length > 1? Integer.parseInt(hours[1]) * 60 : 0)
                         + (hours.length > 2? Integer.parseInt(hours[2]) : 0)) * 1000);
+                index++;
             }
             break;
         case "ADC":
+            if (index < values.length) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
+            }
             if (index < values.length) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
             if (index < values.length) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
+            if (index < values.length) {
                 position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            }
+            if (!values[index].isEmpty() && index + 1 < values.length) {
+                int io = Integer.parseInt(values[index++], 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
+            if (index + 1 < values.length) {
                 position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
             position.set("eventStatus", values[index++]);
             if (index < values.length) {
                 position.set("packetType", values[index++]);
             }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
+                    if (index < values.length) {
                         index += 1; // temperature sensor serial number
+                        if (index < values.length) {
                             position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                         }
                     }
+                }
+            }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
