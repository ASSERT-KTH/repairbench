diff --git a/tmp/3be452f8-33d2-4f56-8aa5-879984b4361c_buggy.java b/tmp/7b5100f5-451b-41a3-9a03-14d215c4d980_fixed.java
index c84c989..c7b0665 100644
--- a/tmp/3be452f8-33d2-4f56-8aa5-879984b4361c_buggy.java
+++ b/tmp/7b5100f5-451b-41a3-9a03-14d215c4d980_fixed.java
@@ -1,27 +1,38 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+    int dateTime = buf.readUnsignedIntLE(); // date and time ( Unix timestamp in seconds, Iridium epoch: 1 Jan 2000 )
+
+    // Fix the datetime to be relative to the Traccar epoch (1 Jan 1970) instead of Iridium epoch
+    dateTime += 946684800; // 946684800 is the difference in seconds between the two epochs
+
+    // Validate datetime to be within reasonable bounds
+    long currentTime = System.currentTimeMillis() / 1000; // current time in seconds
+    if (dateTime < currentTime - 25 * 3600 || dateTime > currentTime + 25 * 3600) {
+        return null; // or throw an exception, depending on your requirements
+    }
+
+    position.setTime(new Date(dateTime * 1000)); // convert back to milliseconds for Date constructor
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
\ No newline at end of file
