diff --git a/tmp/5683cfbb-fb81-4f38-91cb-5dd3d1aa5b17_buggy.java b/tmp/3ab06c36-13f6-4fd6-91a9-131d88daca75_fixed.java
index c84c989..298723f 100644
--- a/tmp/5683cfbb-fb81-4f38-91cb-5dd3d1aa5b17_buggy.java
+++ b/tmp/3ab06c36-13f6-4fd6-91a9-131d88daca75_fixed.java
@@ -1,27 +1,48 @@
+/**
+ * Decodes Iridium position from the provided buffer.
+ * 
+ * @param channel Channel
+ * @param remoteAddress Remote address
+ * @param buf Byte buffer
+ * @return Position, or null if decoding fails
+ */
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+    long datetime = buf.readUnsignedIntLE(); // date and time (seconds since Jan 1, 2000, 00:00:00 UTC)
+    
+    // Fix the datetime to be relative to the Unix epoch (Jan 1, 1970, 00:00:00 UTC)
+    // Iridium epoch is 30 years after Unix epoch, so add the difference in seconds
+    long unixEpochOffset = 30L * 365L * 24L * 60L * 60L; // approximate, ignoring leap seconds
+    datetime += unixEpochOffset;
+    
+    // Validate the datetime to be within the allowed range (< +25 hours from now)
+    long now = System.currentTimeMillis() / 1000; // current time in seconds
+    if (datetime < now - unixEpochOffset || datetime > now + 25 * 60 * 60) {
+        return null; // invalid or out-of-range datetime
+    }
+
+    position.setFixTime(datetime * 1000); // convert to milliseconds
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
\ No newline at end of file
