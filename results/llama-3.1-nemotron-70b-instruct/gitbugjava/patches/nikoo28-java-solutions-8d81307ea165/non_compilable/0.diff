diff --git a/tmp/7e963397-317a-4337-887d-e58f59c4472d_buggy.java b/tmp/d082ff75-8a04-401a-a23e-f94d8c2aee78_fixed.java
index 9739964..7f03126 100644
--- a/tmp/7e963397-317a-4337-887d-e58f59c4472d_buggy.java
+++ b/tmp/d082ff75-8a04-401a-a23e-f94d8c2aee78_fixed.java
@@ -1,27 +1,44 @@
+/**
+ * Calculates the span of the stock's price for each day.
+ * The span of the stock's price on a given day is the minimum number of consecutive days 
+ * (including the current day) for which the price of the stock is less than or equal to its price on the current day.
+ * 
+ * @param prices an array of daily stock prices
+ * @return an array of spans, one for each day
+ */
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty() 
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] <= prices[i]) {
         indexStack.pop();
+      }
 
       // If index stack is empty, the price at index 'i'
-      // is greater than all previous values
-      if (indexStack.isEmpty())
+      // is greater than or equal to all previous values
+      if (indexStack.isEmpty()) {
         spans[i] = i + 1;
-      else
-        spans[i] = i - indexStack.peek();
+      } else {
+        // If the current price is equal to the price at the top of the stack,
+        // we need to consider all consecutive equal prices
+        while (!indexStack.isEmpty() 
+            && prices[indexStack.peek()] == prices[i]) {
+          indexStack.pop();
+        }
+        // Update the span
+        spans[i] = indexStack.isEmpty()? i + 1 : i - indexStack.peek();
+      }
 
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
