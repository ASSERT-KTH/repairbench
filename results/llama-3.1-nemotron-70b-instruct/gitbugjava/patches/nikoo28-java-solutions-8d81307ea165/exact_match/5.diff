diff --git a/tmp/dad5727f-f93b-4db4-bf85-5edfe4072c97_buggy.java b/tmp/68aaa7c8-2f48-41fc-b693-b5dced043355_fixed.java
index 9739964..7ea3856 100644
--- a/tmp/dad5727f-f93b-4db4-bf85-5edfe4072c97_buggy.java
+++ b/tmp/68aaa7c8-2f48-41fc-b693-b5dced043355_fixed.java
@@ -1,27 +1,35 @@
+/**
+ * Calculates the span of each stock price in the given array.
+ * The span of a stock price is the number of consecutive days 
+ * (including the current day) where the price of the stock is less than or equal to the current price.
+ * 
+ * @param prices an array of stock prices
+ * @return an array of spans corresponding to each stock price
+ */
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
-    spans[0] = 1; // Span of first element is always 1
+    spans[0] = 1; // Span of first element is always at least 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+          && prices[indexStack.peek()] < prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
         spans[i] = i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
