diff --git a/tmp/689b5782-9928-49e1-abad-927674995dc7_buggy.java b/tmp/df5976a7-1c67-42bd-b462-804bb994a6e6_fixed.java
index 30eba92..cfd95e9 100644
--- a/tmp/689b5782-9928-49e1-abad-927674995dc7_buggy.java
+++ b/tmp/df5976a7-1c67-42bd-b462-804bb994a6e6_fixed.java
@@ -1,113 +1,182 @@
+/**
+ * Decodes a position from a given sentence.
+ * 
+ * @param channel Channel object
+ * @param remoteAddress Remote address
+ * @param sentence Sentence to decode
+ * @param id Device ID
+ * @return Decoded position, or null if no position found
+ */
 private Object decodePosition(
         Channel channel, SocketAddress remoteAddress, String sentence, String id) {
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     List<Position> positions = new LinkedList<>();
     Position position = null;
     DateBuilder dateBuilder = null;
 
     for (String pair : sentence.split(",")) {
-            String[] data = pair.split("[=:]");
+        String[] data = pair.split("[=:]"); // Added '=' to split on both ':' and '='
         int key;
         try {
             key = Integer.parseInt(data[0], 16);
         } catch (NumberFormatException e) {
             continue;
         }
-            String value = data[1];
+        String value = data.length > 1? data[1] : ""; // Added check to avoid ArrayIndexOutOfBoundsException
         if (key == 0x0) {
             if (position!= null) {
                 position.setTime(dateBuilder.getDate());
                 positions.add(position);
             }
             position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             dateBuilder = new DateBuilder(new Date());
         } else if (position!= null) {
             switch (key) {
                 case 0x11:
                     value = ("000000" + value).substring(value.length());
                     dateBuilder.setDateReverse(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4)));
                     break;
                 case 0x10:
                     value = ("00000000" + value).substring(value.length());
                     dateBuilder.setTime(
                             Integer.parseInt(value.substring(0, 2)),
                             Integer.parseInt(value.substring(2, 4)),
                             Integer.parseInt(value.substring(4, 6)),
                             Integer.parseInt(value.substring(6)) * 10);
                     break;
                 case 0xA:
                     position.setValid(true);
+                    try { // Added try-catch for potential NumberFormatException
                         position.setLatitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse latitude: {}", value, e);
+                    }
                     break;
                 case 0xB:
                     position.setValid(true);
+                    try { // Added try-catch for potential NumberFormatException
                         position.setLongitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse longitude: {}", value, e);
+                    }
                     break;
                 case 0xC:
+                    try { // Added try-catch for potential NumberFormatException
                         position.setAltitude(Double.parseDouble(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse altitude: {}", value, e);
+                    }
                     break;
                 case 0xD:
+                    try { // Added try-catch for potential NumberFormatException
                         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse speed: {}", value, e);
+                    }
                     break;
                 case 0xE:
+                    try { // Added try-catch for potential NumberFormatException
                         position.setCourse(Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse course: {}", value, e);
+                    }
                     break;
                 case 0xF:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse satellites: {}", value, e);
+                    }
                     break;
                 case 0x12:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_HDOP, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse HDOP: {}", value, e);
+                    }
                     break;
                 case 0x20:
                     position.set(Position.KEY_ACCELERATION, value);
                     break;
                 case 0x24:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_BATTERY, Integer.parseInt(value) * 0.01);
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse battery: {}", value, e);
+                    }
                     break;
                 case 0x81:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_RSSI, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse RSSI: {}", value, e);
+                    }
                     break;
                 case 0x82:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_DEVICE_TEMP, Integer.parseInt(value) * 0.1);
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse device temperature: {}", value, e);
+                    }
                     break;
                 case 0x104:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_ENGINE_LOAD, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse engine load: {}", value, e);
+                    }
                     break;
                 case 0x105:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_COOLANT_TEMP, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse coolant temperature: {}", value, e);
+                    }
                     break;
                 case 0x10c:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_RPM, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse RPM: {}", value, e);
+                    }
                     break;
                 case 0x10d:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_OBD_SPEED, UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse OBD speed: {}", value, e);
+                    }
                     break;
                 case 0x111:
+                    try { // Added try-catch for potential NumberFormatException
                         position.set(Position.KEY_THROTTLE, Integer.parseInt(value));
+                    } catch (NumberFormatException e) {
+                        LOGGER.warn("Failed to parse throttle: {}", value, e);
+                    }
                     break;
                 default:
                     position.set(Position.PREFIX_IO + key, value);
                     break;
             }
         }
     }
 
     if (position!= null) {
         if (!position.getValid()) {
             getLastLocation(position, null);
         }
         position.setTime(dateBuilder.getDate());
         positions.add(position);
     }
 
     return positions.isEmpty()? null : positions;
 }
\ No newline at end of file
