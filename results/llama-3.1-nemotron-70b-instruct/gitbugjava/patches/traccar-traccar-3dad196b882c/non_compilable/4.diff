diff --git a/tmp/753f4c51-ab6d-4943-817d-f6262f111f39_buggy.java b/tmp/6969f12c-d155-4196-9ec7-541e3bcd0e57_fixed.java
index c6164f1..3c9d79e 100644
--- a/tmp/753f4c51-ab6d-4943-817d-f6262f111f39_buggy.java
+++ b/tmp/6969f12c-d155-4196-9ec7-541e3bcd0e57_fixed.java
@@ -1,116 +1,127 @@
 private Position decodePosition(
             Channel channel, SocketAddress remoteAddress, ByteBuf buf, int index) {
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int status = buf.readUnsignedShort();
 
         position.setValid(BitUtil.check(status, 15));
 
         position.set(Position.KEY_STATUS, status);
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 14));
 
         int event = buf.readUnsignedShort();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, event);
 
         String time = buf.readCharSequence(12, StandardCharsets.US_ASCII).toString();
 
         DateBuilder dateBuilder = new DateBuilder()
                .setYear(Integer.parseInt(time.substring(0, 2)))
                .setMonth(Integer.parseInt(time.substring(2, 4)))
                .setDay(Integer.parseInt(time.substring(4, 6)))
                .setHour(Integer.parseInt(time.substring(6, 8)))
                .setMinute(Integer.parseInt(time.substring(8, 10)))
-                .setSecond(Integer.parseInt(time.substring(10, 12)));
+               .setSecond(Integer.parseLong(time.substring(10, 12), 16)); // Parse as hexadecimal
         position.setTime(dateBuilder.getDate());
 
         position.setLongitude(buf.readInt() * 0.00001);
         position.setLatitude(buf.readInt() * 0.00001);
 
         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
         position.setCourse(buf.readUnsignedShort());
         position.setAltitude(buf.readUnsignedShort());
 
         position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
 
         Network network = new Network();
 
-        while (buf.readableBytes() > 4) {
+        while (buf.readableBytes() >= 4) { // Fix:Readable bytes should be greater than or equal to 4
             int subtype = buf.readUnsignedShort();
-            int length = buf.readUnsignedShort() - 4;
+            int length = buf.readUnsignedShort();
+            if (length < 4) { // Fix: Handle invalid length
+                buf.skipBytes(buf.readableBytes()); // Skip remaining bytes
+                break;
+            }
+            length -= 4; // Adjust length
             switch (subtype) {
                 case 0x0001:
                     int coolantTemperature = buf.readUnsignedByte() - 40;
                     if (coolantTemperature <= 215) {
                         position.set(Position.KEY_COOLANT_TEMP, coolantTemperature);
                     }
                     int rpm = buf.readUnsignedShort();
                     if (rpm <= 65535) {
                         position.set(Position.KEY_RPM, rpm);
                     }
                     position.set("averageSpeed", buf.readUnsignedByte());
                     buf.readUnsignedShort(); // interval fuel consumption
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedShort());
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte() * 0.4);
                     buf.readUnsignedInt(); // trip id
                     break;
                 case 0x0005:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     position.set(Position.KEY_HDOP, buf.readUnsignedByte());
                     buf.readUnsignedInt(); // run time
                     break;
                 case 0x0009:
+                    if (length > 0) { // Fix: Check length before reading
                         position.set(
                                 Position.KEY_VIN, buf.readCharSequence(length, StandardCharsets.US_ASCII).toString());
+                    }
                     break;
                 case 0x0011:
                     position.set(Position.KEY_HOURS, buf.readUnsignedInt() * 0.05);
                     break;
                 case 0x0014:
                     position.set(Position.KEY_ENGINE_LOAD, buf.readUnsignedByte() / 255.0);
                     position.set("timingAdvance", buf.readUnsignedByte() * 0.5);
                     position.set("airTemp", buf.readUnsignedByte() - 40);
                     position.set("airFlow", buf.readUnsignedShort() * 0.01);
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte() / 255.0);
                     break;
                 case 0x0020:
+                    if (length > 0) { // Fix: Check length before reading
                         String[] cells = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String cell : cells) {
                             String[] values = cell.split("@");
                             network.addCellTower(CellTower.from(
                                     Integer.parseInt(values[0]), Integer.parseInt(values[1]),
                                     Integer.parseInt(values[2], 16), Integer.parseInt(values[3], 16)));
                         }
+                    }
                     break;
                 case 0x0021:
+                    if (length > 0) { // Fix: Check length before reading
                         String[] points = buf.readCharSequence(
                                 length, StandardCharsets.US_ASCII).toString().split("\\+");
                         for (String point : points) {
                             String[] values = point.split("@");
                             network.addWifiAccessPoint(WifiAccessPoint.from(values[0], Integer.parseInt(values[1])));
                         }
+                    }
                     break;
                 default:
-                    buf.skipBytes(length);
+                    buf.skipBytes(length); // Fix: Skip bytes
                     break;
             }
         }
 
         if (network.getCellTowers()!= null || network.getWifiAccessPoints()!= null) {
             position.setNetwork(network);
         }
 
         sendResponse(channel, MSG_POSITION_RSP, index, null);
 
         return position;
     }
\ No newline at end of file
