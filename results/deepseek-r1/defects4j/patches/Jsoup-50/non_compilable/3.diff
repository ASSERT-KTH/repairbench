diff --git a/tmp/8ef99372-a823-4e7c-a20d-a9b44099f3f4_buggy.java b/tmp/b7aea9dd-31e0-445d-8413-0fee7ffd91c5_fixed.java
index 25ca093..f1c59f6 100644
--- a/tmp/8ef99372-a823-4e7c-a20d-a9b44099f3f4_buggy.java
+++ b/tmp/b7aea9dd-31e0-445d-8413-0fee7ffd91c5_fixed.java
@@ -1,52 +1,95 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and adjust charset and position accordingly
+    ByteBuffer bomCheckBuffer = byteData.duplicate();
+    bomCheckBuffer.order(ByteOrder.BIG_ENDIAN);
+    String detectedCharset = null;
+    int detectedBomLength = 0;
+
+    if (bomCheckBuffer.remaining() >= 4) {
+        int b1 = bomCheckBuffer.get() & 0xFF;
+        int b2 = bomCheckBuffer.get() & 0xFF;
+        int b3 = bomCheckBuffer.get() & 0xFF;
+        int b4 = bomCheckBuffer.get() & 0xFF;
+
+        if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {
+            detectedCharset = "UTF-32BE";
+            detectedBomLength = 4;
+        } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {
+            detectedCharset = "UTF-32LE";
+            detectedBomLength = 4;
+        } else {
+            bomCheckBuffer.rewind();
+
+            if (bomCheckBuffer.remaining() >= 3) {
+                b1 = bomCheckBuffer.get() & 0xFF;
+                b2 = bomCheckBuffer.get() & 0xFF;
+                b3 = bomCheckBuffer.get() & 0xFF;
+                if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+                    detectedCharset = "UTF-8";
+                    detectedBomLength = 3;
+                }
+            }
+
+            if (detectedCharset == null) {
+                bomCheckBuffer.rewind();
+                if (bomCheckBuffer.remaining() >= 2) {
+                    b1 = bomCheckBuffer.get() & 0xFF;
+                    b2 = bomCheckBuffer.get() & 0xFF;
+                    if (b1 == 0xFE && b2 == 0xFF) {
+                        detectedCharset = "UTF-16BE";
+                        detectedBomLength = 2;
+                    } else if (b1 == 0xFF && b2 == 0xFE) {
+                        detectedCharset = "UTF-16LE";
+                        detectedBomLength = 2;
+                    }
+                }
+            }
+        }
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        byteData.position(byteData.position() + detectedBomLength);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if not found, keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified by BOM or content type header or user
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
