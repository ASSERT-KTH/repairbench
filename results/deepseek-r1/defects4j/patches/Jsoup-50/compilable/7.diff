diff --git a/tmp/259915cd-08ae-4a15-b006-1dce37d0f0ed_buggy.java b/tmp/c1a19903-5ee0-41fc-a4bf-2be8d58cd682_fixed.java
index 25ca093..8f77109 100644
--- a/tmp/259915cd-08ae-4a15-b006-1dce37d0f0ed_buggy.java
+++ b/tmp/c1a19903-5ee0-41fc-a4bf-2be8d58cd682_fixed.java
@@ -1,52 +1,88 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and adjust charset + position
+    String detectedCharset = null;
+    int bomLength = 0;
+    ByteBuffer bomCheck = byteData.duplicate();
+    bomCheck.rewind();
+
+    if (bomCheck.remaining() >= 4) {
+        byte[] bom4 = new byte[4];
+        bomCheck.get(bom4);
+        if (bom4[0] == 0x00 && bom4[1] == 0x00 && bom4[2] == (byte) 0xFE && bom4[3] == (byte) 0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomLength = 4;
+        } else if (bom4[0] == (byte) 0xFF && bom4[1] == (byte) 0xFE && bom4[2] == 0x00 && bom4[3] == 0x00) {
+            detectedCharset = "UTF-32LE";
+            bomLength = 4;
+        }
+    }
+
+    if (detectedCharset == null && bomCheck.remaining() >= 3) {
+        bomCheck.rewind();
+        byte[] bom3 = new byte[3];
+        bomCheck.get(bom3);
+        if (bom3[0] == (byte) 0xEF && bom3[1] == (byte) 0xBB && bom3[2] == (byte) 0xBF) {
+            detectedCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+
+    if (detectedCharset == null && bomCheck.remaining() >= 2) {
+        bomCheck.rewind();
+        byte[] bom2 = new byte[2];
+        bomCheck.get(bom2);
+        if (bom2[0] == (byte) 0xFE && bom2[1] == (byte) 0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if (bom2[0] == (byte) 0xFF && bom2[1] == (byte) 0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        byteData.position(byteData.position() + bomLength);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
