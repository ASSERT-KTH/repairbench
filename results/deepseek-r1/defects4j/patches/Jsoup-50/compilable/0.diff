diff --git a/tmp/a7fb49d3-37c8-4a28-8c35-0747312a3b49_buggy.java b/tmp/48345e38-a6b9-4fcc-a64c-2d83aedc9a89_fixed.java
index 25ca093..44fc8a8 100644
--- a/tmp/a7fb49d3-37c8-4a28-8c35-0747312a3b49_buggy.java
+++ b/tmp/48345e38-a6b9-4fcc-a64c-2d83aedc9a89_fixed.java
@@ -1,52 +1,106 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        final String defaultCharset = "UTF-8";
+        final char UNICODE_BOM = '\uFEFF';
 
-        // look for BOM - overrides any other header or input
+        // Detect BOM and adjust charset and position
+        byteData.mark();
+        boolean hasBOM = false;
+        String bomCharset = null;
+        int bomLength = 0;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (byteData.remaining() >= 3) {
+            byte[] bom3 = new byte[3];
+            byteData.get(bom3);
+            if (bom3[0] == (byte) 0xEF && bom3[1] == (byte) 0xBB && bom3[2] == (byte) 0xBF) {
+                bomCharset = "UTF-8";
+                bomLength = 3;
+                hasBOM = true;
+            } else {
+                byteData.reset();
+            }
+        }
+        if (!hasBOM && byteData.remaining() >= 2) {
+            byte[] bom2 = new byte[2];
+            byteData.get(bom2);
+            if (bom2[0] == (byte) 0xFE && bom2[1] == (byte) 0xFF) {
+                bomCharset = "UTF-16BE";
+                bomLength = 2;
+                hasBOM = true;
+            } else if (bom2[0] == (byte) 0xFF && bom2[1] == (byte) 0xFE) {
+                bomCharset = "UTF-16LE";
+                bomLength = 2;
+                hasBOM = true;
+            } else {
+                byteData.reset();
+            }
+        }
+        if (!hasBOM && byteData.remaining() >= 4) {
+            byte[] bom4 = new byte[4];
+            byteData.get(bom4);
+            if (bom4[0] == 0x00 && bom4[1] == 0x00 && bom4[2] == (byte) 0xFE && bom4[3] == (byte) 0xFF) {
+                bomCharset = "UTF-32BE";
+                bomLength = 4;
+                hasBOM = true;
+            } else if (bom4[0] == (byte) 0xFF && bom4[1] == (byte) 0xFE && bom4[2] == 0x00 && bom4[3] == 0x00) {
+                bomCharset = "UTF-32LE";
+                bomLength = 4;
+                hasBOM = true;
+            } else {
+                byteData.reset();
+            }
+        }
+
+        if (hasBOM) {
+            charsetName = bomCharset;
+            byteData.position(byteData.position() + bomLength);
+        } else {
+            byteData.reset();
+        }
+
+        if (charsetName == null) {
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
+                    if (hasBOM) {
+                        byteData.position(byteData.position() + bomLength);
+                    }
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else {
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
         return doc;
     }
\ No newline at end of file
