diff --git a/tmp/7e1b6eb4-88c4-4310-8c0d-8c0cea6e67be_buggy.java b/tmp/b5d433e1-fec3-4a0a-9521-68e17e366afd_fixed.java
index 25ca093..150232a 100644
--- a/tmp/7e1b6eb4-88c4-4310-8c0d-8c0cea6e67be_buggy.java
+++ b/tmp/b5d433e1-fec3-4a0a-9521-68e17e366afd_fixed.java
@@ -1,52 +1,101 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and set charset
+    String detectedCharset = null;
+    int bomLength = 0;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    ByteBuffer bomBuffer = byteData.duplicate();
+    bomBuffer.mark();
+
+    if (bomBuffer.remaining() >= 4) {
+        byte[] bomBytes = new byte[4];
+        bomBuffer.get(bomBytes);
+        if ((bomBytes[0] & 0xFF) == 0xEF && (bomBytes[1] & 0xFF) == 0xBB && (bomBytes[2] & 0xFF) == 0xBF) {
+            detectedCharset = "UTF-8";
+            bomLength = 3;
+        } else if ((bomBytes[0] & 0xFF) == 0xFE && (bomBytes[1] & 0xFF) == 0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if ((bomBytes[0] & 0xFF) == 0xFF && (bomBytes[1] & 0xFF) == 0xFE) {
+            if (bomBuffer.remaining() >= 4 && (bomBytes[2] & 0xFF) == 0x00 && (bomBytes[3] & 0xFF) == 0x00) {
+                detectedCharset = "UTF-32LE";
+                bomLength = 4;
+            } else {
+                detectedCharset = "UTF-16LE";
+                bomLength = 2;
+            }
+        } else if ((bomBytes[0] & 0xFF) == 0x00 && (bomBytes[1] & 0xFF) == 0x00 && 
+                   (bomBytes[2] & 0xFF) == 0xFE && (bomBytes[3] & 0xFF) == 0xFF) {
+            detectedCharset = "UTF-32BE";
+            bomLength = 4;
+        }
+    }
+
+    if (detectedCharset == null && bomBuffer.remaining() >= 3) {
+        bomBuffer.reset();
+        byte[] bomBytes = new byte[3];
+        bomBuffer.get(bomBytes);
+        if ((bomBytes[0] & 0xFF) == 0xEF && (bomBytes[1] & 0xFF) == 0xBB && (bomBytes[2] & 0xFF) == 0xBF) {
+            detectedCharset = "UTF-8";
+            bomLength = 3;
+        }
+    }
+
+    if (detectedCharset == null && bomBuffer.remaining() >= 2) {
+        bomBuffer.reset();
+        byte[] bomBytes = new byte[2];
+        bomBuffer.get(bomBytes);
+        if ((bomBytes[0] & 0xFF) == 0xFE && (bomBytes[1] & 0xFF) == 0xFF) {
+            detectedCharset = "UTF-16BE";
+            bomLength = 2;
+        } else if ((bomBytes[0] & 0xFF) == 0xFF && (bomBytes[1] & 0xFF) == 0xFE) {
+            detectedCharset = "UTF-16LE";
+            bomLength = 2;
+        }
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset;
+        byteData.position(byteData.position() + bomLength);
+    }
+
+    if (charsetName == null) { 
+        docData = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
-                    foundCharset = getCharsetFromContentType(meta.attr("content"));
+                foundCharset = DataUtil.getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(DataUtil.defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
