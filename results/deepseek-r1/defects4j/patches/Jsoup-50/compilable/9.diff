diff --git a/tmp/cd488242-53e8-4584-9481-db26dba9a91c_buggy.java b/tmp/34f0e147-16cb-48cf-ad75-6f84ab0e86e1_fixed.java
index 25ca093..449a3c1 100644
--- a/tmp/cd488242-53e8-4584-9481-db26dba9a91c_buggy.java
+++ b/tmp/34f0e147-16cb-48cf-ad75-6f84ab0e86e1_fixed.java
@@ -1,52 +1,87 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect and handle BOM at the beginning of the byte data
+    int initialPosition = byteData.position();
+    byte[] bomBytes = new byte[4];
+    int bytesRead = 0;
+    while (bytesRead < 4 && byteData.hasRemaining()) {
+        bomBytes[bytesRead] = byteData.get();
+        bytesRead++;
+    }
+    byteData.position(initialPosition); // Reset to initial position after reading BOM bytes
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // Check for BOM and determine charset
+    Charset detectedCharset = null;
+    int bomLength = 0;
+    if (bytesRead >= 4) {
+        if (bomBytes[0] == 0x00 && bomBytes[1] == 0x00 && bomBytes[2] == (byte) 0xFE && bomBytes[3] == (byte) 0xFF) {
+            detectedCharset = Charset.forName("UTF-32BE");
+            bomLength = 4;
+        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE && bomBytes[2] == 0x00 && bomBytes[3] == 0x00) {
+            detectedCharset = Charset.forName("UTF-32LE");
+            bomLength = 4;
+        }
+    }
+    if (detectedCharset == null && bytesRead >= 3) {
+        if (bomBytes[0] == (byte) 0xEF && bomBytes[1] == (byte) 0xBB && bomBytes[2] == (byte) 0xBF) {
+            detectedCharset = Charset.forName("UTF-8");
+            bomLength = 3;
+        }
+    }
+    if (detectedCharset == null && bytesRead >= 2) {
+        if (bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF) {
+            detectedCharset = Charset.forName("UTF-16BE");
+            bomLength = 2;
+        } else if (bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE) {
+            detectedCharset = Charset.forName("UTF-16LE");
+            bomLength = 2;
+        }
+    }
+
+    if (detectedCharset != null) {
+        charsetName = detectedCharset.name();
+        byteData.position(initialPosition + bomLength); // Skip BOM bytes
+    }
+
+    if (charsetName == null) { // Determine from meta. Safe parse as UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                byteData.position(initialPosition); // Reset to initial position before BOM detection
+                byteData.position(initialPosition + bomLength); // Skip BOM bytes again if any
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
