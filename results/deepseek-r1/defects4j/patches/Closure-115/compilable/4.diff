diff --git a/tmp/cc3d7c79-1769-44a0-82c7-c06d52552a58_buggy.java b/tmp/c28d613c-01ed-403c-af58-f34e72223e69_fixed.java
index 3075782..d57affa 100644
--- a/tmp/cc3d7c79-1769-44a0-82c7-c06d52552a58_buggy.java
+++ b/tmp/c28d613c-01ed-403c-af58-f34e72223e69_fixed.java
@@ -1,82 +1,57 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-    boolean hasSideEffects = false;
-    if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
-      Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
-      }
-    }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
-      if (fnParam != null) {
-        if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+      Node currentArg = cArg;
+      Node currentParam = fnParam;
+
+      if (currentArg != null && currentParam != null) {
+        // Check if the current argument has side effects
+        if (NodeUtil.mayHaveSideEffects(currentArg, compiler)) {
+          String paramName = currentParam.getString();
+          int refCount = NodeUtil.getNameReferenceCount(block, paramName);
+          if (refCount > 1) {
             return CanInlineResult.NO;
           }
         }
 
-        // Move to the next name.
-        fnParam = fnParam.getNext();
-      }
-
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
-      if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
-        }
-        cArg = cArg.getNext();
+        // Move to the next argument and parameter
+        cArg = currentArg.getNext();
+        fnParam = currentParam.getNext();
+      } else if (currentParam != null) {
+        // More parameters than arguments, move to next parameter
+        fnParam = currentParam.getNext();
+      } else {
+        // More arguments than parameters, move to next argument
+        cArg = currentArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
