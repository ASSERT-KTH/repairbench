diff --git a/tmp/360c17b2-222c-4c5d-a03a-94c4c3c54ee9_buggy.java b/tmp/dd780daf-ad13-44e7-80ef-aad59c035a05_fixed.java
index e1fc51f..ae7ab8b 100644
--- a/tmp/360c17b2-222c-4c5d-a03a-94c4c3c54ee9_buggy.java
+++ b/tmp/dd780daf-ad13-44e7-80ef-aad59c035a05_fixed.java
@@ -1,9 +1,29 @@
     public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
-        Method m1 = invocation.getMethod();
-        Method m2 = candidate.getMethod();
+        Method m1 = getBridgedMethod(invocation.getMethod());
+        Method m2 = getBridgedMethod(candidate.getMethod());
         
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        if (m1.equals(m2)) {
+            return true;
+        }
+        
+        return m1.getName().equals(m2.getName())
+            && Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes())
+            && (m1.getDeclaringClass().isAssignableFrom(m2.getDeclaringClass())
+                || m2.getDeclaringClass().isAssignableFrom(m1.getDeclaringClass()));
+    }
+
+    private Method getBridgedMethod(Method method) {
+        if (!method.isBridge()) {
+            return method;
+        }
+        Class<?> declaringClass = method.getDeclaringClass();
+        Method[] methods = declaringClass.getDeclaredMethods();
+        for (Method m : methods) {
+            if (!m.isBridge() 
+                && m.getName().equals(method.getName())
+                && Arrays.equals(m.getParameterTypes(), method.getParameterTypes())) {
+                return m;
+            }
+        }
+        return method;
     }
\ No newline at end of file
