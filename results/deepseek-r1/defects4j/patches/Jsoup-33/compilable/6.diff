diff --git a/tmp/29b47df2-0c97-4471-a585-5f47c5e85efc_buggy.java b/tmp/3ccc1efd-a877-4797-9f07-17626cfaad16_fixed.java
index dc93be3..9face0a 100644
--- a/tmp/29b47df2-0c97-4471-a585-5f47c5e85efc_buggy.java
+++ b/tmp/3ccc1efd-a877-4797-9f07-17626cfaad16_fixed.java
@@ -1,14 +1,22 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            Tag tag = Tag.valueOf(startTag.name());
+            if (tag.isEmpty()) { // Check if the tag is a void element
                 Element el = insertEmpty(startTag);
-            stack.add(el);
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
+            } else {
+                // For non-void tags, treat as normal element and emit end tag
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el);
+                tokeniser.emit(new Token.EndTag(el.tagName()));
+                return el;
+            }
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
