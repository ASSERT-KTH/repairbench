diff --git a/tmp/2944e294-2bcc-4edf-9b34-b1b658cd1a20_buggy.java b/tmp/acb421e4-e02f-4b6d-b1fa-2e55578d22c6_fixed.java
index dc93be3..e5e854f 100644
--- a/tmp/2944e294-2bcc-4edf-9b34-b1b658cd1a20_buggy.java
+++ b/tmp/acb421e4-e02f-4b6d-b1fa-2e55578d22c6_fixed.java
@@ -1,14 +1,19 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
+        // handle self-closing tags
         if (startTag.isSelfClosing()) {
-            Element el = insertEmpty(startTag);
-            stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            Tag tag = Tag.valueOf(startTag.name());
+            if (tag.isEmpty()) { // void element, handle as empty
+                return insertEmpty(startTag);
+            } else { // non-void element, treat as start tag and emit end tag immediately
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el);
+                tokeniser.emit(new Token.EndTag(el.tagName()));
                 return el;
             }
+        }
         
+        // normal start tag
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
