diff --git a/tmp/d73c0fb4-60f7-49fa-b6d0-61836ffd6ad9_buggy.java b/tmp/5340099d-db5f-48f0-bf36-f0f0f2f62592_fixed.java
index 71189c3..1661811 100644
--- a/tmp/d73c0fb4-60f7-49fa-b6d0-61836ffd6ad9_buggy.java
+++ b/tmp/5340099d-db5f-48f0-bf36-f0f0f2f62592_fixed.java
@@ -1,46 +1,44 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+            // Determine if the option needs validation (required, group, or present)
+            boolean needsValidation = option.isRequired() || option instanceof Group || commandLine.hasOption(option);
+            if (needsValidation) {
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // Check if the option is present
             if (commandLine.hasOption(option)) {
-                if (++present > maximum) {
+                present++;
+                if (present > maximum) {
                     unexpected = option;
-
                     break;
                 }
-
-                option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
