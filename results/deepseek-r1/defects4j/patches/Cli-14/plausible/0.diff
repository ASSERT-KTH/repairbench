diff --git a/tmp/329b8b36-f8bf-4e65-881a-910fa51c8994_buggy.java b/tmp/5bf265e0-f818-4c47-aedc-1c9830692612_fixed.java
index 71189c3..c5ce0b9 100644
--- a/tmp/329b8b36-f8bf-4e65-881a-910fa51c8994_buggy.java
+++ b/tmp/5bf265e0-f818-4c47-aedc-1c9830692612_fixed.java
@@ -1,46 +1,48 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
-            // needs validation?
+            // Determine if the option needs validation here (required or group)
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
-            // if the child option is present then validate it
+            // If the child option is present then count and check maximum
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
 
+                // Validate only if not already validated (i.e., optional options)
+                if (!validate) {
                     option.validate(commandLine);
                 }
             }
+        }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
