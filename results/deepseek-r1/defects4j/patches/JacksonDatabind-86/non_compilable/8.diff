diff --git a/tmp/5bc7da7b-6558-41fa-b9f5-d3fbe7e9c961_buggy.java b/tmp/5dd36d2c-acd6-4167-8eff-b20f38cf46bb_fixed.java
index e69de29..0587d09 100644
--- a/tmp/5bc7da7b-6558-41fa-b9f5-d3fbe7e9c961_buggy.java
+++ b/tmp/5dd36d2c-acd6-4167-8eff-b20f38cf46bb_fixed.java
@@ -0,0 +1,27 @@
+public JavaType constructType(Type type, Class<?> context) {
+    // ... existing code ...
+
+    if (rawClass.isArray()) {
+        return _fromArrayType(rawClass, type, context);
+    }
+    if (rawClass.isEnum()) {
+        return _fromEnumType(rawClass, type, context);
+    }
+    // Check if we have a non-trivial (non-Object) superclass
+    JavaType superType = null;
+    Class<?> superCls = rawClass.getSuperclass();
+    if (superCls != null && superCls != Object.class) {
+        superType = constructType(superCls, context);
+        // Resolve any ResolvedRecursiveType to ensure the superclass is fully resolved
+        while (superType instanceof ResolvedRecursiveType) {
+            ResolvedRecursiveType rrt = (ResolvedRecursiveType) superType;
+            JavaType resolved = rrt.getSelfReferencedType();
+            if (resolved == null) {
+                break; // Avoid infinite loop if not yet resolved
+            }
+            superType = resolved;
+        }
+    }
+
+    // ... remaining code to construct and return the JavaType ...
+}
\ No newline at end of file
