diff --git a/tmp/fdb2fcad-7870-42ef-bdb5-d7452b9d11c3_buggy.java b/tmp/e184f3e1-d42d-4cc3-b73e-0c051d6e41a7_fixed.java
index e69de29..025c7fd 100644
--- a/tmp/fdb2fcad-7870-42ef-bdb5-d7452b9d11c3_buggy.java
+++ b/tmp/e184f3e1-d42d-4cc3-b73e-0c051d6e41a7_fixed.java
@@ -0,0 +1,40 @@
+// Assuming the fix is in the TypeFactory's method that resolves the superclass with proper TypeBindings
+private JavaType _fromClass(Class<?> clazz, TypeBindings parentBindings) {
+    // Check cache with the current bindings
+    if (parentBindings == null || parentBindings.isEmpty()) {
+        JavaType cached = _typeCache.get(clazz);
+        if (cached != null) {
+            return cached;
+        }
+    }
+
+    // Handle recursive resolution
+    if (_classStack.contains(clazz)) {
+        return _handleRecursiveType(clazz, parentBindings);
+    }
+
+    _classStack.add(clazz);
+    try {
+        // Resolve the class and its hierarchy
+        JavaType type = _buildTypeForClass(clazz, parentBindings);
+        if (parentBindings == null || parentBindings.isEmpty()) {
+            _typeCache.put(clazz, type);
+        }
+
+        // Resolve superclass with the correct parent bindings
+        Class<?> superCls = clazz.getSuperclass();
+        JavaType superType = (superCls == null) ? null : _fromClass(superCls, parentBindings);
+
+        // Update the type with the resolved superclass
+        if (type instanceof SimpleType) {
+            // SimpleType is immutable, so create a new instance with the resolved superclass
+            type = new SimpleType(type, superType, type.getInterfaces());
+        } else {
+            // Handle other types as necessary
+        }
+
+        return type;
+    } finally {
+        _classStack.remove(_classStack.size() - 1);
+    }
+}
\ No newline at end of file
