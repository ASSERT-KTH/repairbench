diff --git a/tmp/aacd86ca-a57f-4385-b7f2-b7609ae88ce2_buggy.java b/tmp/6b2349d2-8b59-42cb-9577-4f1adb1d7d29_fixed.java
index e69de29..28ae104 100644
--- a/tmp/aacd86ca-a57f-4385-b7f2-b7609ae88ce2_buggy.java
+++ b/tmp/6b2349d2-8b59-42cb-9577-4f1adb1d7d29_fixed.java
@@ -0,0 +1,23 @@
+public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
+    if (p.currentToken() == JsonToken.VALUE_STRING) {
+        String text = p.getText().trim();
+        if (text.isEmpty()) {
+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+                if (_primitive) {
+                    throw ctxt.mappingException("Cannot coerce empty String to primitive %s", _valueClass.getName());
+                }
+                return _nullValue;
+            }
+            throw ctxt.mappingException("Cannot coerce empty String (\"\") to %s (enable %s to allow)", _valueClass.getName(),
+                    DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
+        }
+        try {
+            return Integer.valueOf(_parseInt(text, ctxt));
+        } catch (IllegalArgumentException iae) {
+            throw ctxt.weirdStringException(text, _valueClass, "not a valid integer value");
+        }
+    } else if (p.currentToken() == JsonToken.VALUE_NUMBER_INT) {
+        return p.getIntValue();
+    }
+    return _parseInteger(p, ctxt);
+}
\ No newline at end of file
