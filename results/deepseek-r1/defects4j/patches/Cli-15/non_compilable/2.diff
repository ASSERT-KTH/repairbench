diff --git a/tmp/76d7aea2-a510-40a4-a441-958e06bac04d_buggy.java b/tmp/78e283a8-6d64-4f0c-b110-53c7e03b2cb7_fixed.java
index 4e8b037..7a4f634 100644
--- a/tmp/76d7aea2-a510-40a4-a441-958e06bac04d_buggy.java
+++ b/tmp/78e283a8-6d64-4f0c-b110-53c7e03b2cb7_fixed.java
@@ -1,20 +1,39 @@
     public List getValues(final Option option,
                           List defaultValues) {
-        // initialize the return list
+        // Initialize the return list with user-provided values
         List valueList = (List) values.get(option);
+        if (valueList == null) {
+            valueList = new ArrayList();
+        } else {
+            valueList = new ArrayList(valueList);
+        }
+
+        // Determine the minimum required values
+        int min = option.getArgument().getMinimum();
+        int currentSize = valueList.size();
 
-        // grab the correct default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = defaultValues;
+        // Collect default values from parameter and class defaults
+        List paramDefaults = defaultValues != null ? new ArrayList(defaultValues) : new ArrayList();
+        List classDefaults = (List) this.defaultValues.get(option);
+        if (classDefaults != null) {
+            classDefaults = new ArrayList(classDefaults);
+        } else {
+            classDefaults = new ArrayList();
         }
 
-        // augment the list with the default values
-        if ((valueList == null) || valueList.isEmpty()) {
-            valueList = (List) this.defaultValues.get(option);
+        // Combine parameter and class defaults, prioritizing parameter defaults
+        List combinedDefaults = new ArrayList();
+        combinedDefaults.addAll(paramDefaults);
+        combinedDefaults.addAll(classDefaults);
+
+        // Calculate how many defaults are needed to meet the minimum
+        int needed = Math.max(0, min - currentSize);
+        if (needed > 0 && !combinedDefaults.isEmpty()) {
+            // Take the last 'needed' elements from combinedDefaults
+            int fromIndex = Math.max(0, combinedDefaults.size() - needed);
+            List subList = combinedDefaults.subList(fromIndex, combinedDefaults.size());
+            valueList.addAll(subList);
         }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+        return valueList.isEmpty() ? Collections.EMPTY_LIST : valueList;
     }
\ No newline at end of file
