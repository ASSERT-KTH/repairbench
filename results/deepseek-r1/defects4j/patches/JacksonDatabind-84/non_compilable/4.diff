diff --git a/tmp/d7e4d484-89ca-45e1-8203-c0f11c264fec_buggy.java b/tmp/8d5772d1-1099-428e-8ce5-94e5a1d5e9e4_fixed.java
index e69de29..14b549e 100644
--- a/tmp/d7e4d484-89ca-45e1-8203-c0f11c264fec_buggy.java
+++ b/tmp/8d5772d1-1099-428e-8ce5-94e5a1d5e9e4_fixed.java
@@ -0,0 +1,34 @@
+public JavaType constructType(Type type) {
+    if (type instanceof Class<?>) {
+        Class<?> clazz = (Class<?>) type;
+        ClassKey key = new ClassKey(clazz);
+        JavaType cached = _typeCache.get(key);
+        if (cached != null) {
+            return cached;
+        }
+
+        // Resolve superclass type using the same TypeFactory to ensure caching
+        Class<?> superClass = clazz.getSuperclass();
+        JavaType superType = (superClass == null || superClass == Object.class) 
+            ? null 
+            : constructType(superClass);
+
+        List<JavaType> superInterfaces = new ArrayList<>();
+        for (Class<?> ifc : clazz.getInterfaces()) {
+            superInterfaces.add(constructType(ifc));
+        }
+
+        // Resolve type parameters
+        TypeVariable<?>[] typeParams = clazz.getTypeParameters();
+        JavaType[] paramTypes = new JavaType[typeParams.length];
+        for (int i = 0; i < typeParams.length; i++) {
+            paramTypes[i] = _fromType(typeParams[i], TypeBindings.emptyBindings());
+        }
+
+        JavaType newType = new SimpleType(clazz, paramTypes, superType, superInterfaces);
+        _typeCache.put(key, newType);
+        return newType;
+    }
+    // Handle other types (ParameterizedType, GenericArrayType, etc.)
+    return _fromAny(null, type, TypeBindings.emptyBindings());
+}
\ No newline at end of file
