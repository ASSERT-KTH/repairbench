diff --git a/tmp/f0592e58-85c8-4217-b749-f7a38422d740_buggy.java b/tmp/7072929f-2464-4fbf-a894-863254fb868d_fixed.java
index f650982..66c86aa 100644
--- a/tmp/f0592e58-85c8-4217-b749-f7a38422d740_buggy.java
+++ b/tmp/7072929f-2464-4fbf-a894-863254fb868d_fixed.java
@@ -1,42 +1,63 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
+            Iterator<?> it = (Iterator<?>) l;
+            while (it.hasNext()) {
+                Object elem = it.next();
+                if (equal(elem, r)) {
+                    return true;
                 }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+            }
+            return false;
+        }
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
+            Iterator<?> it = (Iterator<?>) r;
+            while (it.hasNext()) {
+                Object elem = it.next();
+                if (equal(elem, l)) {
+                    return true;
+                }
+            }
+            return false;
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            Iterator<?> leftIt = (Iterator<?>) l;
+            while (leftIt.hasNext()) {
+                Object leftElem = leftIt.next();
+                Iterator<?> rightIt = (Iterator<?>) r;
+                while (rightIt.hasNext()) {
+                    Object rightElem = rightIt.next();
+                    if (equal(leftElem, rightElem)) {
+                        return true;
+                    }
+                }
+            }
+            return false;
         }
         return equal(l, r);
     }
\ No newline at end of file
