diff --git a/tmp/50f7c191-1513-46b6-a438-a50e9ea0ebea_buggy.java b/tmp/5a88c070-ca64-4e22-8003-96c75cc4cf4e_fixed.java
index f650982..89a58c1 100644
--- a/tmp/50f7c191-1513-46b6-a438-a50e9ea0ebea_buggy.java
+++ b/tmp/5a88c070-ca64-4e22-8003-96c75cc4cf4e_fixed.java
@@ -1,42 +1,56 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+            Collection col = (Collection) l;
+            List<Object> values = new ArrayList<>();
+            for (Object obj : col) {
+                if (obj instanceof NodePointer) {
+                    values.add(((NodePointer) obj).getValue());
+                } else {
+                    values.add(obj);
+                }
+            }
+            l = values.iterator();
         }
 
         if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+            Collection col = (Collection) r;
+            List<Object> values = new ArrayList<>();
+            for (Object obj : col) {
+                if (obj instanceof NodePointer) {
+                    values.add(((NodePointer) obj).getValue());
+                } else {
+                    values.add(obj);
+                }
+            }
+            r = values.iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
\ No newline at end of file
