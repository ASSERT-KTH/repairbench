diff --git a/tmp/6a54c559-c8f6-4b6d-aa97-d81e9a046a76_buggy.java b/tmp/55e04170-edcc-468b-bbd8-e09f3ccaa2f9_fixed.java
index be2af16..0fceb62 100644
--- a/tmp/6a54c559-c8f6-4b6d-aa97-d81e9a046a76_buggy.java
+++ b/tmp/55e04170-edcc-468b-bbd8-e09f3ccaa2f9_fixed.java
@@ -1,29 +1,42 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+        // Attempt Julian first, then Gregorian to handle cutover correctly.
+        try {
+            long julianInstant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+            if (julianInstant < iCutoverMillis) {
+                return julianInstant;
+            } else {
+                // Julian date is after cutover; check Gregorian.
+                long gregorianInstant = iGregorianChronology.getDateTimeMillis
                     (year, monthOfYear, dayOfMonth,
                      hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                if (gregorianInstant >= iCutoverMillis) {
+                    return gregorianInstant;
+                }
+                // The Gregorian date is before cutover, which is invalid.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+        } catch (IllegalArgumentException e) {
+            // Julian date is invalid; attempt Gregorian.
+            long gregorianInstant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (gregorianInstant >= iCutoverMillis) {
+                return gregorianInstant;
+            }
+            // Gregorian date is invalid or before cutover with no valid Julian alternative.
+            throw new IllegalArgumentException("Specified date does not exist");
         }
-        return instant;
     }
\ No newline at end of file
