diff --git a/tmp/208d2b34-c172-4083-b910-5e394e4fd08d_buggy.java b/tmp/101aa36b-7c81-445e-839f-cf5f90d524a0_fixed.java
index 7e64f1d..5f115e9 100644
--- a/tmp/208d2b34-c172-4083-b910-5e394e4fd08d_buggy.java
+++ b/tmp/101aa36b-7c81-445e-839f-cf5f90d524a0_fixed.java
@@ -1,78 +1,122 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         List tokens = new ArrayList();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
+                else if (arg.contains("="))
+                {
+                    int equalsIndex = arg.indexOf('=');
+                    String optionPart = arg.substring(0, equalsIndex);
+                    String valuePart = arg.substring(equalsIndex + 1);
+                    String strippedOptionPart = Util.stripLeadingHyphens(optionPart);
+
+                    if (options.hasOption(strippedOptionPart))
+                    {
+                        Option option = options.getOption(strippedOptionPart);
+                        String fixedOption;
+                        if (option != null && strippedOptionPart.equals(option.getLongOpt()))
+                        {
+                            fixedOption = "--" + strippedOptionPart;
+                        }
+                        else
+                        {
+                            fixedOption = "-" + strippedOptionPart;
+                        }
+                        tokens.add(fixedOption);
+                        tokens.add(valuePart);
+                    }
                     else
                     {
-                    if (options.hasOption(arg.substring(0, 2)))
+                        if (strippedOptionPart.length() > 0)
+                        {
+                            char firstChar = strippedOptionPart.charAt(0);
+                            if (options.hasOption(String.valueOf(firstChar)))
+                            {
+                                tokens.add("-" + firstChar);
+                                String remaining = optionPart.substring(optionPart.indexOf(firstChar) + 1);
+                                if (!remaining.isEmpty() || !valuePart.isEmpty())
+                                {
+                                    tokens.add(remaining + (remaining.isEmpty() ? "" : "=") + valuePart);
+                                }
+                            }
+                            else if (optionPart.length() > 1 && options.hasOption(optionPart.substring(0, 2)))
+                            {
+                                tokens.add(optionPart.substring(0, 2));
+                                tokens.add(optionPart.substring(2) + "=" + valuePart);
+                            }
+                            else
+                            {
+                                tokens.add(arg);
+                            }
+                        }
+                        else
+                        {
+                            tokens.add(arg);
+                        }
+                    }
+                }
+                else
+                {
+                    if (arg.length() > 1 && options.hasOption(arg.substring(0, 2)))
+                    {
+                        tokens.add(arg.substring(0, 2));
+                        tokens.add(arg.substring(2));
+                    }
+                    else
+                    {
+                        String potentialShortOpt = opt.length() > 0 ? String.valueOf(opt.charAt(0)) : "";
+                        if (!potentialShortOpt.isEmpty() && options.hasOption(potentialShortOpt))
+                        {
+                            tokens.add("-" + potentialShortOpt);
+                            String remaining = arg.substring(arg.indexOf(potentialShortOpt) + 1);
+                            if (!remaining.isEmpty())
                             {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                                tokens.add(remaining);
+                            }
                         }
                         else
                         {
                             eatTheRest = stopAtNonOption;
                             tokens.add(arg);
                         }
                     }
                 }
+            }
             else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
         return (String[]) tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
