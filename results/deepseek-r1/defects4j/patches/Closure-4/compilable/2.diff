diff --git a/tmp/521c2714-25e8-4188-9527-1194c3a14b8a_buggy.java b/tmp/49cc091e-b2af-43ef-b843-a640e3190463_fixed.java
index d6a560a..ab0a52f 100644
--- a/tmp/521c2714-25e8-4188-9527-1194c3a14b8a_buggy.java
+++ b/tmp/49cc091e-b2af-43ef-b843-a640e3190463_fixed.java
@@ -1,33 +1,31 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      finishPropertyContinuations();
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      finishPropertyContinuations();
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
