diff --git a/tmp/7d12dd28-329b-4c36-9764-082c86e4a56c_buggy.java b/tmp/187f0f95-9669-43a3-a4bb-0addb1f077be_fixed.java
index 63a7c80..2a2e51b 100644
--- a/tmp/7d12dd28-329b-4c36-9764-082c86e4a56c_buggy.java
+++ b/tmp/187f0f95-9669-43a3-a4bb-0addb1f077be_fixed.java
@@ -1,77 +1,110 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        // Handle unconstrained height
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
+            Size2D size = this.topBlock.arrange(g2, c1);
+            h[0] = size.height;
+        }
+        if (this.bottomBlock != null) {
+            RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
+            Size2D size = this.bottomBlock.arrange(g2, c2);
+            h[1] = size.height;
+        }
+        double middleHeight = 0.0;
+        if (this.leftBlock != null) {
+            RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, w[0]), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE);
+            Size2D size = this.leftBlock.arrange(g2, c3);
+            w[2] = size.width;
+            h[2] = size.height;
+            middleHeight = Math.max(middleHeight, h[2]);
+        }
+        if (this.rightBlock != null) {
+            double maxWidth = Math.max(0.0, w[0] - w[2]);
+            RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, maxWidth), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE);
+            Size2D size = this.rightBlock.arrange(g2, c4);
+            w[3] = size.width;
+            h[3] = size.height;
+            middleHeight = Math.max(middleHeight, h[3]);
+        }
+        w[4] = Math.max(0.0, w[0] - w[2] - w[3]);
+        if (this.centerBlock != null) {
+            RectangleConstraint c5 = new RectangleConstraint(w[4], 0.0, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE);
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            h[4] = size.height;
+            middleHeight = Math.max(middleHeight, h[4]);
+        }
+        double totalHeight = h[0] + h[1] + middleHeight;
+        if (this.topBlock != null) {
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
+        }
+        if (this.bottomBlock != null) {
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + middleHeight, w[0], h[1]));
+        }
+        if (this.leftBlock != null) {
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
+        }
+        if (this.rightBlock != null) {
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[0] - w[3], h[0], w[3], h[3]));
+        }
+        if (this.centerBlock != null) {
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
+        }
+        return new Size2D(w[0], totalHeight);
+    } else {
+        // Handle constrained height (FIXED or RANGE)
+        if (this.topBlock != null) {
+            double maxTopHeight = constraint.getHeight();
+            RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, maxTopHeight), LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            double availableBottomHeight = Math.max(0.0, constraint.getHeight() - h[0]);
+            RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, availableBottomHeight), LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = Math.max(0.0, constraint.getHeight() - h[0] - h[1]);
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            double availableRightWidth = Math.max(0.0, constraint.getWidth() - w[2]);
+            RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, availableRightWidth), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
         h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+        w[4] = Math.max(0.0, constraint.getWidth() - w[3] - w[2]);
+        if (this.centerBlock != null) {
             RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
-
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
