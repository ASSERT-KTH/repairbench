diff --git a/tmp/24f0e88d-a4fc-44a3-9327-c8754f5c68b7_buggy.java b/tmp/66da67bb-dc15-4e35-9036-010c1cfbfad3_fixed.java
index 63a7c80..74c8f6a 100644
--- a/tmp/24f0e88d-a4fc-44a3-9327-c8754f5c68b7_buggy.java
+++ b/tmp/66da67bb-dc15-4e35-9036-010c1cfbfad3_fixed.java
@@ -1,77 +1,128 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
      * @param constraint  the constraint.
      * @param g2  the graphics device.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
+        boolean heightFixed = constraint.getHeightConstraintType() == LengthConstraintType.FIXED;
+        double totalHeight = 0.0;
+
+        // Arrange the top block
         if (this.topBlock != null) {
+            double maxTopHeight = heightFixed ? constraint.getHeight() : Double.MAX_VALUE;
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+                    new Range(0.0, maxTopHeight), LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
+            totalHeight += h[0];
         }
-        w[1] = w[0];
+
+        // Arrange the bottom block
         if (this.bottomBlock != null) {
+            double maxBottomHeight = heightFixed ? (constraint.getHeight() - h[0]) : Double.MAX_VALUE;
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0, new Range(0.0, maxBottomHeight),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
+            totalHeight += h[1];
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        double middleRowHeight = 0.0;
+        if (heightFixed) {
+            h[2] = constraint.getHeight() - h[0] - h[1];
+            middleRowHeight = h[2];
+        } else {
+            // Arrange left, right, and center blocks with natural heights
+            if (this.leftBlock != null) {
+                RectangleConstraint c3 = new RectangleConstraint(0.0,
+                        new Range(0.0, constraint.getWidth()),
+                        LengthConstraintType.RANGE, 0.0, null,
+                        LengthConstraintType.NONE);
+                Size2D size = this.leftBlock.arrange(g2, c3);
+                w[2] = size.width;
+                middleRowHeight = Math.max(middleRowHeight, size.height);
+            }
+            if (this.rightBlock != null) {
+                double availableRightWidth = constraint.getWidth() - (this.leftBlock != null ? w[2] : 0);
+                RectangleConstraint c4 = new RectangleConstraint(0.0,
+                        new Range(0.0, availableRightWidth),
+                        LengthConstraintType.RANGE, 0.0, null,
+                        LengthConstraintType.NONE);
+                Size2D size = this.rightBlock.arrange(g2, c4);
+                w[3] = size.width;
+                middleRowHeight = Math.max(middleRowHeight, size.height);
+            }
+            if (this.centerBlock != null) {
+                w[4] = constraint.getWidth() - w[3] - w[2];
+                RectangleConstraint c5 = new RectangleConstraint(w[4], 0.0,
+                        LengthConstraintType.FIXED, 0.0, null,
+                        LengthConstraintType.NONE);
+                Size2D size = this.centerBlock.arrange(g2, c5);
+                middleRowHeight = Math.max(middleRowHeight, size.height);
+            }
+            h[2] = middleRowHeight;
+            h[3] = middleRowHeight;
+            h[4] = middleRowHeight;
+            totalHeight += middleRowHeight;
+        }
+
+        double usedHeight = heightFixed ? constraint.getHeight() : totalHeight;
+
+        // Arrange middle blocks if height is fixed
+        if (heightFixed) {
             if (this.leftBlock != null) {
                 RectangleConstraint c3 = new RectangleConstraint(0.0,
                         new Range(0.0, constraint.getWidth()),
                         LengthConstraintType.RANGE, h[2], null,
                         LengthConstraintType.FIXED);
                 Size2D size = this.leftBlock.arrange(g2, c3);
                 w[2] = size.width;
             }
             h[3] = h[2];
             if (this.rightBlock != null) {
                 RectangleConstraint c4 = new RectangleConstraint(0.0,
                         new Range(0.0, constraint.getWidth() - w[2]),
                         LengthConstraintType.RANGE, h[2], null,
                         LengthConstraintType.FIXED);
                 Size2D size = this.rightBlock.arrange(g2, c4);
                 w[3] = size.width;
             }
             h[4] = h[2];
             w[4] = constraint.getWidth() - w[3] - w[2];
+            if (this.centerBlock != null) {
                 RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
-        if (this.centerBlock != null) {
                 this.centerBlock.arrange(g2, c5);
             }
+        }
 
+        // Set the bounds for each block
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            double y = heightFixed ? h[0] + h[2] : totalHeight - h[1];
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            double x = w[2] + (heightFixed ? w[4] : (constraint.getWidth() - w[3] - w[2]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(x, h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        return new Size2D(constraint.getWidth(), usedHeight);
     }
\ No newline at end of file
