diff --git a/tmp/36984b35-c5ef-4c34-a1da-1059fe9f5560_buggy.java b/tmp/1f3ae57a-8bc5-4c2b-827d-a8f8f95ec937_fixed.java
index 63a7c80..0bb287d 100644
--- a/tmp/36984b35-c5ef-4c34-a1da-1059fe9f5560_buggy.java
+++ b/tmp/1f3ae57a-8bc5-4c2b-827d-a8f8f95ec937_fixed.java
@@ -1,77 +1,122 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
+        boolean heightFixed = constraint.getHeightConstraintType() == LengthConstraintType.FIXED;
         w[0] = constraint.getWidth();
+        h[0] = 0.0;
         if (this.topBlock != null) {
-            RectangleConstraint c1 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
-                    LengthConstraintType.RANGE);
+            RectangleConstraint c1;
+            if (heightFixed) {
+                c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED,
+                        0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE);
+            } else {
+                c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED,
+                        0.0, null, LengthConstraintType.NONE);
+            }
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
+        h[1] = 0.0;
         if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+            RectangleConstraint c2;
+            if (heightFixed) {
+                double maxBottomHeight = constraint.getHeight() - h[0];
+                c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED,
+                        0.0, new Range(0.0, maxBottomHeight), LengthConstraintType.RANGE);
+            } else {
+                c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED,
+                        0.0, null, LengthConstraintType.NONE);
+            }
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        double middleHeight = 0.0;
+        if (heightFixed) {
+            h[2] = constraint.getHeight() - h[0] - h[1];
+            middleHeight = h[2];
+        } else {
+            middleHeight = 0.0;
+        }
+        w[2] = 0.0;
+        double leftHeight = 0.0;
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c3;
+            if (heightFixed) {
+                c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()),
+                        LengthConstraintType.RANGE, middleHeight, null, LengthConstraintType.FIXED);
+            } else {
+                c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()),
+                        LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE);
+            }
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+            leftHeight = size.height;
+            if (!heightFixed) {
+                middleHeight = Math.max(middleHeight, leftHeight);
             }
-        h[3] = h[2];
+        }
+        w[3] = 0.0;
+        double rightHeight = 0.0;
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
-                    LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+            RectangleConstraint c4;
+            if (heightFixed) {
+                c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]),
+                        LengthConstraintType.RANGE, middleHeight, null, LengthConstraintType.FIXED);
+            } else {
+                c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]),
+                        LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE);
+            }
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+            rightHeight = size.height;
+            if (!heightFixed) {
+                middleHeight = Math.max(middleHeight, rightHeight);
             }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+        }
+        w[4] = constraint.getWidth() - w[2] - w[3];
+        double centerHeight = 0.0;
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            RectangleConstraint c5;
+            if (heightFixed) {
+                c5 = new RectangleConstraint(w[4], middleHeight);
+            } else {
+                c5 = new RectangleConstraint(w[4], null, LengthConstraintType.FIXED,
+                        0.0, null, LengthConstraintType.NONE);
+            }
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            centerHeight = size.height;
+            if (!heightFixed) {
+                middleHeight = Math.max(middleHeight, centerHeight);
+            }
+        }
+        if (!heightFixed) {
+            h[2] = middleHeight;
+        } else {
+            h[2] = middleHeight;
         }
-
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            double y = h[0] + h[2];
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, y, w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            double x = w[2] + w[4];
+            this.rightBlock.setBounds(new Rectangle2D.Double(x, h[0], w[3], h[2]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[2]));
         }
+        if (heightFixed) {
             return new Size2D(constraint.getWidth(), constraint.getHeight());
+        } else {
+            double totalHeight = h[0] + h[1] + h[2];
+            return new Size2D(constraint.getWidth(), totalHeight);
+        }
     }
\ No newline at end of file
