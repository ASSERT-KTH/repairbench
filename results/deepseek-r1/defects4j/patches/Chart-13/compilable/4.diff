diff --git a/tmp/42b08da8-046b-4190-b867-fc4796309083_buggy.java b/tmp/4533f60b-4fee-4e5d-b1f3-b43ef7d87310_fixed.java
index 63a7c80..27e4c43 100644
--- a/tmp/42b08da8-046b-4190-b867-fc4796309083_buggy.java
+++ b/tmp/4533f60b-4fee-4e5d-b1f3-b43ef7d87310_fixed.java
@@ -1,77 +1,119 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
                     new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
+            double maxHeight = Math.max(0.0, constraint.getHeight() - h[0]);
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0, new Range(0.0, maxHeight),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+        h[2] = Math.max(0.0, constraint.getHeight() - h[1] - h[0]);
+        if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+            h[2] = 0.0;
+        }
+        double middleHeight = h[2];
         if (this.leftBlock != null) {
-            RectangleConstraint c3 = new RectangleConstraint(0.0,
+            RectangleConstraint c3;
+            if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+                c3 = new RectangleConstraint(0.0,
                         new Range(0.0, constraint.getWidth()),
                         LengthConstraintType.RANGE, h[2], null,
                         LengthConstraintType.FIXED);
+            } else {
+                c3 = new RectangleConstraint(0.0,
+                        new Range(0.0, constraint.getWidth()),
+                        LengthConstraintType.RANGE, 0.0,
+                        new Range(0.0, Double.MAX_VALUE),
+                        LengthConstraintType.RANGE);
+            }
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                middleHeight = Math.max(middleHeight, size.height);
+            }
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
-            RectangleConstraint c4 = new RectangleConstraint(0.0,
+            RectangleConstraint c4;
+            if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+                c4 = new RectangleConstraint(0.0,
                         new Range(0.0, constraint.getWidth() - w[2]),
                         LengthConstraintType.RANGE, h[2], null,
                         LengthConstraintType.FIXED);
+            } else {
+                c4 = new RectangleConstraint(0.0,
+                        new Range(0.0, constraint.getWidth() - w[2]),
+                        LengthConstraintType.RANGE, 0.0,
+                        new Range(0.0, Double.MAX_VALUE),
+                        LengthConstraintType.RANGE);
+            }
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                middleHeight = Math.max(middleHeight, size.height);
+            }
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
-        RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            RectangleConstraint c5;
+            if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+                c5 = new RectangleConstraint(w[4], h[4]);
+            } else {
+                c5 = new RectangleConstraint(w[4], null,
+                        LengthConstraintType.FIXED, 0.0,
+                        new Range(0.0, Double.MAX_VALUE),
+                        LengthConstraintType.RANGE);
+            }
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                middleHeight = Math.max(middleHeight, size.height);
+            }
+        }
+        if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+            h[2] = middleHeight;
+            h[3] = h[2];
+            h[4] = h[2];
+        }
+        double totalHeight = h[0] + h[1] + h[2];
+        if (constraint.getHeightConstraintType() == LengthConstraintType.RANGE) {
+            totalHeight = Math.max(constraint.getHeightRange().getLowerBound(),
+                    Math.min(totalHeight, constraint.getHeightRange().getUpperBound()));
+        } else if (constraint.getHeightConstraintType() == LengthConstraintType.FIXED) {
+            totalHeight = constraint.getHeight();
         }
-
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+        return new Size2D(constraint.getWidth(), totalHeight);
     }
\ No newline at end of file
