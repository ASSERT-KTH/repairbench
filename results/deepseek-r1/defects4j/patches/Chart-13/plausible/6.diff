diff --git a/tmp/6dbb1eda-26ab-404b-9531-b1a9561b932c_buggy.java b/tmp/88493bab-716f-436f-b3b1-c6433c9ea03c_fixed.java
index 63a7c80..2148974 100644
--- a/tmp/6dbb1eda-26ab-404b-9531-b1a9561b932c_buggy.java
+++ b/tmp/88493bab-716f-436f-b3b1-c6433c9ea03c_fixed.java
@@ -1,77 +1,94 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
      * @param constraint  the constraint.
      * @param g2  the graphics device.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
         if (this.topBlock != null) {
+            double maxHeight = constraint.getHeight() >= 0 ? constraint.getHeight() : Double.POSITIVE_INFINITY;
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                    new Range(0.0, maxHeight),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
         w[1] = w[0];
         if (this.bottomBlock != null) {
+            double remainingHeight = constraint.getHeight() - h[0];
+            double upper = Math.max(0.0, remainingHeight);
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0, new Range(0.0, upper),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
         h[2] = constraint.getHeight() - h[1] - h[0];
+        if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+            h[2] = Math.max(0.0, h[2]);
+        }
         if (this.leftBlock != null) {
             RectangleConstraint c3 = new RectangleConstraint(0.0,
                     new Range(0.0, constraint.getWidth()),
                     LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    constraint.getHeightConstraintType() == LengthConstraintType.FIXED ? LengthConstraintType.FIXED : LengthConstraintType.NONE);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                h[2] = Math.max(h[2], size.height);
+            }
         }
         h[3] = h[2];
         if (this.rightBlock != null) {
+            double maxRightWidth = Math.max(0.0, constraint.getWidth() - w[2]);
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                    new Range(0.0, maxRightWidth),
                     LengthConstraintType.RANGE, h[2], null,
-                    LengthConstraintType.FIXED);
+                    constraint.getHeightConstraintType() == LengthConstraintType.FIXED ? LengthConstraintType.FIXED : LengthConstraintType.NONE);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                h[3] = Math.max(h[3], size.height);
+                h[2] = h[3];
+            }
         }
         h[4] = h[2];
         w[4] = constraint.getWidth() - w[3] - w[2];
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+            Size2D size = this.centerBlock.arrange(g2, c5);
+            if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+                h[4] = Math.max(h[4], size.height);
+                h[2] = h[4];
             }
-
+        }
+        if (constraint.getHeightConstraintType() != LengthConstraintType.FIXED) {
+            h[2] = Math.max(h[2], h[3]);
+            h[2] = Math.max(h[2], h[4]);
+        }
+        double totalHeight = h[0] + h[1] + h[2];
         if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
         }
         if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
         }
         if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
         }
         if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
         }
         if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+        return new Size2D(constraint.getWidth(), constraint.getHeightConstraintType() == LengthConstraintType.FIXED ? constraint.getHeight() : totalHeight);
     }
\ No newline at end of file
