diff --git a/tmp/4303bf7f-7230-4e3e-a117-ad1b3e2c4948_buggy.java b/tmp/d3405ed0-b058-482c-94ca-cd0658d20872_fixed.java
index 63641d0..1c68b6c 100644
--- a/tmp/4303bf7f-7230-4e3e-a117-ad1b3e2c4948_buggy.java
+++ b/tmp/d3405ed0-b058-482c-94ca-cd0658d20872_fixed.java
@@ -1,33 +1,38 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Build replacements for all template keys, using inferred types or UNKNOWN
+    ImmutableMap.Builder<TemplateType, JSType> replacementsBuilder =
+        ImmutableMap.builder();
+    for (TemplateType key : keys) {
+      JSType replacement = inferred.get(key);
+      if (replacement == null) {
+        replacement = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      }
+      replacementsBuilder.put(key, replacement);
+    }
+    Map<TemplateType, JSType> replacements = replacementsBuilder.build();
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace template types using the constructed replacements
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, replacements);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
