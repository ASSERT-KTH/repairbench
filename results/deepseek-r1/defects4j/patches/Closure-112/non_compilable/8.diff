diff --git a/tmp/d2998e0e-a974-4d0c-941e-b60589adee82_buggy.java b/tmp/b204ef7f-3e36-4b96-a656-ee344d0be5e6_fixed.java
index 63641d0..2f3bfb7 100644
--- a/tmp/d2998e0e-a974-4d0c-941e-b60589adee82_buggy.java
+++ b/tmp/b204ef7f-3e36-4b96-a656-ee344d0be5e6_fixed.java
@@ -1,33 +1,58 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
+    // Try to infer the template types from parameters
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Filter inferred to only include keys from the function's own TemplateTypeMap
+    Map<TemplateType, JSType> filteredInferred = new java.util.LinkedHashMap<>();
+    for (java.util.Map.Entry<TemplateType, JSType> entry : inferred.entrySet()) {
+      if (keys.contains(entry.getKey())) {
+        filteredInferred.put(entry.getKey(), entry.getValue());
+      }
+    }
+    inferred = filteredInferred;
+
+    // Try to infer template types from 'this' type
+    Node callTarget = n.getFirstChild();
+    JSType thisType = null;
+    if (callTarget.isGetProp()) {
+      Node receiver = callTarget.getFirstChild();
+      thisType = receiver.getJSType();
+    }
+    if (thisType != null) {
+      JSType expectedThisType = fnType.getTypeOfThis();
+      if (expectedThisType != null) {
+        Map<TemplateType, JSType> thisInferred = inferTemplateTypesFromType(expectedThisType, thisType);
+        for (java.util.Map.Entry<TemplateType, JSType> entry : thisInferred.entrySet()) {
+          if (keys.contains(entry.getKey())) {
+            inferred.put(entry.getKey(), entry.getValue());
+          }
+        }
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
-    Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
