diff --git a/tmp/17bea5dc-e473-4caa-8ada-41424b9236f4_buggy.java b/tmp/cc2744b8-bcd9-4c5c-9a7f-b11f1c0f00b8_fixed.java
index 63641d0..057c340 100644
--- a/tmp/17bea5dc-e473-4caa-8ada-41424b9236f4_buggy.java
+++ b/tmp/cc2744b8-bcd9-4c5c-9a7f-b11f1c0f00b8_fixed.java
@@ -1,33 +1,58 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
+    // Try to infer the template types from parameters
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Infer template types from the 'this' type
+    JSType declaredThisType = fnType.getTypeOfThis();
+    if (declaredThisType != null) {
+      Node callTarget = n.getFirstChild();
+      JSType actualThisType = null;
+
+      // Determine the actual 'this' type based on the call target structure
+      if (callTarget.isGetProp()) {
+        Node receiver = callTarget.getFirstChild();
+        actualThisType = receiver.getJSType();
+      } else if (callTarget.isName()) {
+        // Handle cases where the call target is a name (static method calls)
+        actualThisType = callTarget.getJSType();
+      }
+
+      if (actualThisType != null) {
+        // Infer template types from the declared 'this' type and actual 'this' type
+        Map<TemplateType, JSType> thisInferred = new HashMap<>();
+        TypeInferenceUtil.inferTemplateTypesFromType(
+            declaredThisType, actualThisType, thisInferred);
+        // Merge the inferred types from 'this' into the main map
+        for (Map.Entry<TemplateType, JSType> entry : thisInferred.entrySet()) {
+          TemplateType key = entry.getKey();
+          JSType value = entry.getValue();
+          if (!inferred.containsKey(key)) {
+            inferred.put(key, value);
+          }
+        }
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
