diff --git a/tmp/9fe84391-deef-4574-8e6c-05f29162096d_buggy.java b/tmp/d1babb79-2892-4a82-bf32-a352710e6c41_fixed.java
index 63641d0..c31cd77 100644
--- a/tmp/9fe84391-deef-4574-8e6c-05f29162096d_buggy.java
+++ b/tmp/d1babb79-2892-4a82-bf32-a352710e6c41_fixed.java
@@ -1,33 +1,37 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Create a map with all keys, using inferred or UNKNOWN
+    Map<TemplateType, JSType> fullInferred = new LinkedHashMap<>();
+    for (TemplateType key : keys) {
+      JSType type = inferred.get(key);
+      if (type == null) {
+        type = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      }
+      fullInferred.put(key, type);
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, fullInferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
