diff --git a/tmp/bac81a20-bb46-43c8-a460-fdc051616aa1_buggy.java b/tmp/8d17b5ce-56bb-45f3-98d4-5acc6443f0c9_fixed.java
index 63641d0..78fcc6c 100644
--- a/tmp/bac81a20-bb46-43c8-a460-fdc051616aa1_buggy.java
+++ b/tmp/8d17b5ce-56bb-45f3-98d4-5acc6443f0c9_fixed.java
@@ -1,33 +1,47 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
-    // Try to infer the template types
+    // Try to infer the template types from parameters
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Infer template types from 'this' type and receiver
+    JSType thisType = fnType.getTypeOfThis();
+    Node callTarget = n.getFirstChild();
+    if (thisType != null && callTarget.isGetProp()) {
+      Node receiver = callTarget.getFirstChild();
+      JSType receiverType = receiver.getJSType();
+      if (receiverType != null) {
+        Map<TemplateType, JSType> thisInferred = inferTemplateTypesFromTypeMatching(
+            thisType, receiverType);
+        for (Map.Entry<TemplateType, JSType> entry : thisInferred.entrySet()) {
+          if (!inferred.containsKey(entry.getKey())) {
+            inferred.put(entry.getKey(), entry.getValue());
+          }
+        }
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
-    Node callTarget = n.getFirstChild();
-
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
