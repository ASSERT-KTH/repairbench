diff --git a/tmp/3d40dcdf-2c2a-4e8d-9cf9-72dcda77d814_buggy.java b/tmp/3246145b-c761-48d1-91ce-84557b5db949_fixed.java
index 6708762..36eec2a 100644
--- a/tmp/3d40dcdf-2c2a-4e8d-9cf9-72dcda77d814_buggy.java
+++ b/tmp/3246145b-c761-48d1-91ce-84557b5db949_fixed.java
@@ -1,99 +1,84 @@
-    /**
-     * Decompose a symmetric positive semidefinite matrix.
-     *
-     * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
-     * positive semidefinite.
-     */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
-        int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
     for (boolean loop = true; loop;) {
 
-            // find maximal diagonal element
-            swap[r] = r;
+        // Find the maximal diagonal element among the remaining indices
+        int maxIndex = r;
+        double maxVal = c[index[r]][index[r]];
         for (int i = r + 1; i < order; ++i) {
-                int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+            int currentIdx = index[i];
+            if (c[currentIdx][currentIdx] > maxVal) {
+                maxIndex = i;
+                maxVal = c[currentIdx][currentIdx];
             }
         }
 
-
-            // swap elements
-            if (swap[r] != r) {
+        // Swap the indices if necessary
+        if (maxIndex != r) {
             int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+            index[r] = index[maxIndex];
+            index[maxIndex] = tmp;
         }
 
-            // check diagonal element
         int ir = index[r];
         if (c[ir][ir] < small) {
 
             if (r == 0) {
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
 
-                // check remaining diagonal elements
+            // Check remaining diagonal elements for negative values
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
             }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+            // All remaining elements are negligible; terminate the loop
             loop = false;
 
         } else {
 
-                // transform the matrix
+            // Perform the matrix transformation
             final double sqrt = FastMath.sqrt(c[ir][ir]);
             b[r][r] = sqrt;
             final double inverse = 1 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
                     final double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
 
-                // prepare next iteration
+            // Prepare for next iteration
             loop = ++r < order;
         }
     }
 
-        // build the root matrix
+    // Construct the root matrix
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
     for (int i = 0; i < order; ++i) {
         for (int j = 0; j < r; ++j) {
             root.setEntry(index[i], j, b[i][j]);
         }
     }
 
 }
\ No newline at end of file
