diff --git a/tmp/2bd649f5-e27a-4f1e-9741-9d7c2a51e482_buggy.java b/tmp/a5c8880a-5789-4b98-84af-aa70228b8066_fixed.java
index 6e05e4b..bd37947 100644
--- a/tmp/2bd649f5-e27a-4f1e-9741-9d7c2a51e482_buggy.java
+++ b/tmp/a5c8880a-5789-4b98-84af-aa70228b8066_fixed.java
@@ -1,51 +1,59 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+          // Check if the function is in an expression context
+          if (functionNode.isExpression()) {
               name = new Name();
               name.setIdentifier("");
               isUnnamedFunction = true;
+          } else {
+              // Leave name as null for declarations to trigger parse error
+              isUnnamedFunction = true;
+          }
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
+          if (newName != null) {
               // Old Rhino tagged the empty name node with the line number of the
               // declaration.
               newName.setLineno(functionNode.getLineno());
               // TODO(bowdidge) Mark line number of paren correctly.
               // Same problem as below - the left paren might not be on the
               // same line as the function keyword.
               int lpColumn = functionNode.getAbsolutePosition() +
                   functionNode.getLp();
               newName.setCharno(position2charno(lpColumn));
           }
+      }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
