diff --git a/tmp/1b218230-d8ad-498e-a13f-840d91b4e84c_buggy.java b/tmp/6680e69d-22bb-4a45-b425-505d27db27d0_fixed.java
index 6e05e4b..1c483ee 100644
--- a/tmp/1b218230-d8ad-498e-a13f-840d91b4e84c_buggy.java
+++ b/tmp/6680e69d-22bb-4a45-b425-505d27db27d0_fixed.java
@@ -1,51 +1,64 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
+        // Check if this is a function expression
+        if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {
           name = new Name();
           name.setIdentifier("");
           isUnnamedFunction = true;
+        } else {
+          // Function declaration with no name: leave name as null
+          isUnnamedFunction = true;
+        }
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
+        // Only set line and charno if it's a function expression
+        if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {
           // Old Rhino tagged the empty name node with the line number of the
           // declaration.
           newName.setLineno(functionNode.getLineno());
           // TODO(bowdidge) Mark line number of paren correctly.
           // Same problem as below - the left paren might not be on the
           // same line as the function keyword.
           int lpColumn = functionNode.getAbsolutePosition() +
               functionNode.getLp();
           newName.setCharno(position2charno(lpColumn));
         }
+      }
 
+      // Add newName only if it's not null
+      if (newName != null) {
         node.addChildToBack(newName);
+      }
+
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on.  We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.)  If there's no
       // function name, assume the paren was on the same line as the function.
       // TODO(bowdidge): Mark line number of paren correctly.
       Name fnName = functionNode.getFunctionName();
       if (fnName != null) {
         lp.setLineno(fnName.getLineno());
       } else {
         lp.setLineno(functionNode.getLineno());
       }
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
\ No newline at end of file
