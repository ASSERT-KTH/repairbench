diff --git a/tmp/71890a12-859c-4b83-9092-3503dc741520_buggy.java b/tmp/53f519c6-cc8d-4c75-81f0-521b3dcb3cde_fixed.java
index 3652aad..cb9f5e0 100644
--- a/tmp/71890a12-859c-4b83-9092-3503dc741520_buggy.java
+++ b/tmp/53f519c6-cc8d-4c75-81f0-521b3dcb3cde_fixed.java
@@ -1,86 +1,93 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
-      boolean shouldDeclareOnGlobalThis = false;
-      if (n.getType() == Token.NAME) {
+      boolean isName = n.getType() == Token.NAME;
+      boolean isGetProp = n.getType() == Token.GETPROP;
+
+      // Only allow declarations of NAMEs and qualified names.
+      if (isName) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
-        shouldDeclareOnGlobalThis = scope.isGlobal() &&
-            (parent.getType() == Token.VAR ||
-             parent.getType() == Token.FUNCTION);
       } else {
-        Preconditions.checkArgument(
-            n.getType() == Token.GETPROP &&
+        Preconditions.checkArgument(isGetProp &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
+
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
+      // If n is a property, declare it in the scope where the root object appears.
       Scope scopeToDeclareIn = scope;
+      if (isGetProp) {
+        Node root = n;
+        while (root.isGetProp()) {
+          root = root.getFirstChild();
+        }
+        if (root.isName()) {
+          String rootName = root.getString();
+          Var rootVar = scope.getVar(rootName);
+          if (rootVar != null) {
+            scopeToDeclareIn = rootVar.getScope();
+          } else {
+            scopeToDeclareIn = scope.getGlobalScope();
+          }
+        }
+      }
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+      boolean shouldDeclareOnGlobalThis = false;
+      if (isName) {
+        shouldDeclareOnGlobalThis = scopeToDeclareIn.isGlobal() &&
+            (parent.getType() == Token.VAR ||
+             parent.getType() == Token.FUNCTION);
+      } else if (isGetProp) {
+        shouldDeclareOnGlobalThis = scopeToDeclareIn.isGlobal() &&
+            (parent.getType() == Token.ASSIGN ||
+             parent.getType() == Token.EXPR_RESULT);
+      }
 
-      // declared in closest scope?
+      // Check if already declared in the closest scope.
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
         if (!inferred) {
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
           if (inferred) {
             globalThis.defineInferredProperty(variableName,
                 type == null ?
                     getNativeType(JSTypeNative.NO_TYPE) :
                     type,
                 isExtern);
           } else {
             globalThis.defineDeclaredProperty(variableName, type, isExtern);
           }
         }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+        // Declare prototype in global scope if applicable.
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
             scopeToDeclareIn.declare(variableName + ".prototype", n,
                 fnType.getPrototype(), compiler.getInput(sourceName),
                 /* declared iff there's an explicit supertype */
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
                     getNativeType(OBJECT_TYPE)));
           }
         }
       }
     }
\ No newline at end of file
