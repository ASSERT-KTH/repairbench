diff --git a/tmp/cfccd5b7-6598-4006-a710-d9e6036d24a8_buggy.java b/tmp/f53ce840-c16f-419e-b72f-49f679787347_fixed.java
index 3652aad..11de5c4 100644
--- a/tmp/cfccd5b7-6598-4006-a710-d9e6036d24a8_buggy.java
+++ b/tmp/f53ce840-c16f-419e-b72f-49f679787347_fixed.java
@@ -1,86 +1,78 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
       Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
+      // Only allow declarations of NAMEs and qualified names.
       boolean shouldDeclareOnGlobalThis = false;
       if (n.getType() == Token.NAME) {
         Preconditions.checkArgument(
             parent.getType() == Token.FUNCTION ||
             parent.getType() == Token.VAR ||
             parent.getType() == Token.LP ||
             parent.getType() == Token.CATCH);
         shouldDeclareOnGlobalThis = scope.isGlobal() &&
             (parent.getType() == Token.VAR ||
              parent.getType() == Token.FUNCTION);
       } else {
         Preconditions.checkArgument(
             n.getType() == Token.GETPROP &&
             (parent.getType() == Token.ASSIGN ||
              parent.getType() == Token.EXPR_RESULT));
       }
       String variableName = n.getQualifiedName();
       Preconditions.checkArgument(!variableName.isEmpty());
 
-      // If n is a property, then we should really declare it in the
-      // scope where the root object appears. This helps out people
-      // who declare "global" names in an anonymous namespace.
+      // Determine the appropriate scope to declare the variable
       Scope scopeToDeclareIn = scope;
+      if (n.getType() == Token.GETPROP) {
+        // Traverse to the root of the GETPROP chain
+        Node root = n;
+        while (root.isGetProp()) {
+          root = root.getFirstChild();
+        }
+        String rootName = root.getQualifiedName();
+        Var rootVar = scope.getVar(rootName);
+        if (rootVar != null) {
+          scopeToDeclareIn = rootVar.getScope();
+        }
+      }
 
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
-
-      // declared in closest scope?
+      // Check if the variable is already declared in the target scope
       if (scopeToDeclareIn.isDeclared(variableName, false)) {
         Var oldVar = scopeToDeclareIn.getVar(variableName);
         validator.expectUndeclaredVariable(
             sourceName, n, parent, oldVar, variableName, type);
       } else {
         if (!inferred) {
           setDeferredType(n, type);
         }
         CompilerInput input = compiler.getInput(sourceName);
         scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
         if (shouldDeclareOnGlobalThis) {
           ObjectType globalThis =
               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
           boolean isExtern = input.isExtern();
           if (inferred) {
             globalThis.defineInferredProperty(variableName,
-                type == null ?
-                    getNativeType(JSTypeNative.NO_TYPE) :
-                    type,
+                type != null ? type : getNativeType(JSTypeNative.NO_TYPE),
                 isExtern);
           } else {
             globalThis.defineDeclaredProperty(variableName, type, isExtern);
           }
         }
 
-        // If we're in the global scope, also declare var.prototype
-        // in the scope chain.
+        // Handle prototype declaration for function types in global scope
         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
           FunctionType fnType = (FunctionType) type;
           if (fnType.isConstructor() || fnType.isInterface()) {
             FunctionType superClassCtor = fnType.getSuperClassConstructor();
-            scopeToDeclareIn.declare(variableName + ".prototype", n,
-                fnType.getPrototype(), compiler.getInput(sourceName),
-                /* declared iff there's an explicit supertype */
+            boolean isDeclaredInferred =
                 superClassCtor == null ||
                 superClassCtor.getInstanceType().equals(
-                    getNativeType(OBJECT_TYPE)));
+                    getNativeType(JSTypeNative.OBJECT_TYPE));
+            scopeToDeclareIn.declare(
+                variableName + ".prototype", n, fnType.getPrototype(), input, isDeclaredInferred);
           }
         }
       }
     }
\ No newline at end of file
