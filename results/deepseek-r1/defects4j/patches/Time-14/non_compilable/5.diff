diff --git a/tmp/55a39bb2-a272-4f62-b762-e1f4796b4c04_buggy.java b/tmp/345780b4-5a79-4f56-b55d-e6e822fd75f6_fixed.java
index 10616db..959d6bd 100644
--- a/tmp/55a39bb2-a272-4f62-b762-e1f4796b4c04_buggy.java
+++ b/tmp/345780b4-5a79-4f56-b55d-e6e822fd75f6_fixed.java
@@ -1,19 +1,42 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
+
+            // Check if the partial includes a year field
+            boolean hasYear = false;
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeFieldType fieldType = partial.getFieldType(i);
+                if (fieldType == DateTimeFieldType.year()) {
+                    hasYear = true;
+                    break;
+                }
+            }
+
+            // If there's no year, set it to a leap year to handle February 29th correctly
+            if (!hasYear) {
+                instant = iChronology.year().set(instant, 2000); // 2000 is a leap year
+            }
+
+            // Set the fields from the partial values
             for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+                DateTimeFieldType fieldType = partial.getFieldType(i);
+                DateTimeField field = fieldType.getField(iChronology);
+                instant = field.set(instant, values[i]);
             }
+
+            // Perform the addition
             instant = add(instant, valueToAdd);
+
+            // Convert the instant back to the partial's values
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
