diff --git a/tmp/716300f0-3fd8-4d9f-951c-2d77dce8294b_buggy.java b/tmp/be9a8c9b-91f8-4115-918a-0f21cf178e10_fixed.java
index 10616db..e98f5b0 100644
--- a/tmp/716300f0-3fd8-4d9f-951c-2d77dce8294b_buggy.java
+++ b/tmp/be9a8c9b-91f8-4115-918a-0f21cf178e10_fixed.java
@@ -1,19 +1,34 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
             // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
+            
+            // Check if the partial includes a year field
+            boolean hasYear = false;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+                if (partial.getFieldType(i) == DateTimeFieldType.year()) {
+                    hasYear = true;
+                    break;
+                }
+            }
+            // If no year, set to a leap year to handle February 29
+            if (!hasYear) {
+                instant = iChronology.year().set(instant, 2000); // 2000 is a leap year
+            }
+            
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                DateTimeField field = partial.getFieldType(i).getField(iChronology);
+                instant = field.set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
