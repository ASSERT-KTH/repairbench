diff --git a/tmp/71a88b09-387c-46a4-aa16-e2b6f60ee0cf_buggy.java b/tmp/b4eef173-df01-47a0-8c0e-a842fef12197_fixed.java
index 10616db..38faedf 100644
--- a/tmp/71a88b09-387c-46a4-aa16-e2b6f60ee0cf_buggy.java
+++ b/tmp/b4eef173-df01-47a0-8c0e-a842fef12197_fixed.java
@@ -1,19 +1,29 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
+            // Adjust the year to a leap year to handle February 29 correctly
+            DateTimeField yearField = iChronology.year();
+            int year = yearField.get(instant);
+            // Find the nearest leap year starting from the initial year of the chronology
+            while (!yearField.isLeap(year)) {
+                year++;
+            }
+            instant = yearField.set(instant, year);
+            
             for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+                DateTimeFieldType fieldType = partial.getFieldType(i);
+                DateTimeField field = fieldType.getField(iChronology);
+                instant = field.set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
