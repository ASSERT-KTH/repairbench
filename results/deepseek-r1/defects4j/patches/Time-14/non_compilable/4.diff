diff --git a/tmp/b86cb663-37b0-456d-8c0c-cae1b4f44d41_buggy.java b/tmp/e7f6c035-87ee-4626-960c-e1be91d2f018_fixed.java
index 10616db..f17a0f5 100644
--- a/tmp/b86cb663-37b0-456d-8c0c-cae1b4f44d41_buggy.java
+++ b/tmp/e7f6c035-87ee-4626-960c-e1be91d2f018_fixed.java
@@ -1,19 +1,36 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
-            // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
-            for (int i = 0, isize = partial.size(); i < isize; i++) {
-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            // Check if the partial represents February 29
+            int month = -1;
+            int day = -1;
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeFieldType type = partial.getFieldType(i);
+                if (type == DateTimeFieldType.monthOfYear()) {
+                    month = values[i];
+                } else if (type == DateTimeFieldType.dayOfMonth()) {
+                    day = values[i];
+                }
+            }
+            if (month == 2 && day == 29) {
+                // Set the year to a leap year (2000 is a leap year)
+                instant = iChronology.year().set(instant, 2000);
+            }
+            // Now set all the fields of the partial to build the instant
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeFieldType fieldType = partial.getFieldType(i);
+                DateTimeField field = fieldType.getField(iChronology);
+                instant = field.set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
