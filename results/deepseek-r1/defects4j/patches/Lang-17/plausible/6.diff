diff --git a/tmp/dbd8df61-3eca-45cc-834c-ee3352eaaa16_buggy.java b/tmp/010232c3-bba0-4653-9e89-aaecd30918df_fixed.java
index b86c1ea..6025ad6 100644
--- a/tmp/dbd8df61-3eca-45cc-834c-ee3352eaaa16_buggy.java
+++ b/tmp/010232c3-bba0-4653-9e89-aaecd30918df_fixed.java
@@ -1,38 +1,30 @@
-    /**
-     * Translate an input onto a Writer. This is intentionally final as its algorithm is 
-     * tightly coupled with the abstract method of this class. 
-     *
-     * @param input CharSequence that is being translated
-     * @param out Writer to translate the text to
-     * @throws IOException if and only if the Writer produces an IOException
-     */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
+        int charIndex = 0;
+        int len = input.length();
+        int codePointCount = Character.codePointCount(input, 0, len);
+        for (int pos = 0; pos < codePointCount; ) {
+            int codePoint = Character.codePointAt(input, charIndex);
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
-            }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+                charIndex += Character.charCount(codePoint);
+                pos++;
             } else {
-                        pos++;
+                for (int i = 0; i < consumed; i++) {
+                    if (charIndex >= len) {
+                        break;
                     }
+                    codePoint = Character.codePointAt(input, charIndex);
+                    charIndex += Character.charCount(codePoint);
                 }
-                pos--;
+                pos += consumed;
             }
-            pos++;
         }
     }
\ No newline at end of file
