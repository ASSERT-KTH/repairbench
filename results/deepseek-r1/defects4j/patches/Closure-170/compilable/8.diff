diff --git a/tmp/82d61d4f-6277-421b-bb88-89bdaf7c46d7_buggy.java b/tmp/891f0ff8-6f62-4358-98d9-c6f1b6e042f1_fixed.java
index 5abdeb5..7a31286 100644
--- a/tmp/82d61d4f-6277-421b-bb88-89bdaf7c46d7_buggy.java
+++ b/tmp/891f0ff8-6f62-4358-98d9-c6f1b6e042f1_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            // Exclude the LHS of top-level assignments which are part of a chain.
+            // Check if the parent is an assignment and this node is the LHS.
+            boolean isLhsOfAssignment = parent != null && parent.isAssign() && parent.getFirstChild() == n;
+            // Check if the assignment is part of an expression (e.g., nested in a ternary, comma, etc.)
+            boolean isTopLevelAssignment = parent != null && parent.getParent() != null && parent.getParent().isExprResult();
+            if (!isLhsOfAssignment || !isTopLevelAssignment) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
