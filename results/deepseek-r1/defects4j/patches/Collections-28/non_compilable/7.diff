diff --git a/tmp/45d75abf-fc22-4b6b-b582-c45cbc39133a_buggy.java b/tmp/6372cba9-6302-4808-a7b9-3230ba513a89_fixed.java
index e69de29..5af1c57 100644
--- a/tmp/45d75abf-fc22-4b6b-b582-c45cbc39133a_buggy.java
+++ b/tmp/6372cba9-6302-4808-a7b9-3230ba513a89_fixed.java
@@ -0,0 +1,79 @@
+public SortedMap<K, V> prefixMap(K prefixKey) {
+    return new PrefixRangeMap(prefixKey);
+}
+
+private final class PrefixRangeMap extends RangeMap {
+    private final K prefix;
+    private int size = -1;
+
+    private PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    protected boolean inRange(K key) {
+        return key != null && getKeyAnalyzer().isPrefix(prefix, key);
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Map.Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Set<Map.Entry<K, V>> entrySet() {
+        return new PrefixRangeEntrySet(this);
+    }
+
+    private final class PrefixRangeEntrySet extends RangeEntrySet {
+        PrefixRangeEntrySet(RangeMap delegate) {
+            super(delegate);
+        }
+
+        @Override
+        public Iterator<Map.Entry<K, V>> iterator() {
+            return new EntryIterator() {
+                @Override
+                protected TrieEntry<K, V> findNext(TrieEntry<K, V> node) {
+                    while (node != null) {
+                        if (inRange(node.key)) {
+                            return node;
+                        }
+                        node = nextEntry(node);
+                    }
+                    return null;
+                }
+
+                @Override
+                public boolean hasNext() {
+                    return next != null;
+                }
+
+                @Override
+                public Map.Entry<K, V> next() {
+                    if (next == null) {
+                        throw new NoSuchElementException();
+                    }
+                    return nextEntry();
+                }
+
+                private TrieEntry<K, V> nextEntry() {
+                    TrieEntry<K, V> e = next;
+                    next = findNext(nextEntry(next));
+                    return e;
+                }
+
+                private TrieEntry<K, V> nextEntry(TrieEntry<K, V> node) {
+                    if (node == null) {
+                        return null;
+                    }
+                    return PatriciaTrie.this.nextEntry(node);
+                }
+            };
+        }
+    }
+}
\ No newline at end of file
