diff --git a/tmp/64c73abe-bbc2-4912-aaa8-76c40064741a_buggy.java b/tmp/6830de0c-e017-48ac-80b0-8e2ac33275c2_fixed.java
index e69de29..6f72be3 100644
--- a/tmp/64c73abe-bbc2-4912-aaa8-76c40064741a_buggy.java
+++ b/tmp/6830de0c-e017-48ac-80b0-8e2ac33275c2_fixed.java
@@ -0,0 +1,121 @@
+public class PatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
+
+    // ... existing code ...
+
+    private final class PrefixRangeEntrySet extends RangeEntrySet {
+
+        // ... existing code ...
+
+        @Override
+        public void clear() {
+            Iterator<Map.Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                it.remove();
+            }
+        }
+
+        private final class EntryIterator extends PatriciaTrieIterator<Map.Entry<K, V>> {
+
+            EntryIterator(Node<K, V> from, Node<K, V> to, int limit) {
+                super(from, to, limit);
+            }
+
+            @Override
+            public Map.Entry<K, V> next() {
+                return nextEntry();
+            }
+
+            @Override
+            protected void updateNext() {
+                // Ensure next node is not null before proceeding
+                while (next != null && next.isEmpty()) {
+                    findNext(next.getRightChild());
+                }
+            }
+
+            @Override
+            public void remove() {
+                if (current == null) {
+                    throw new IllegalStateException();
+                }
+                // Check if the node is still part of the trie
+                if (current.getKey() == null) {
+                    throw new ConcurrentModificationException();
+                }
+                PatriciaTrie.this.remove(current.getKey());
+                current = null;
+                expectedModCount = modCount;
+            }
+        }
+    }
+
+    // ... existing code ...
+
+    private abstract class PatriciaTrieIterator<T> implements Iterator<T> {
+
+        protected Node<K, V> next;
+        protected Node<K, V> current;
+        protected int expectedModCount = modCount;
+        protected final Node<K, V> from;
+        protected final Node<K, V> to;
+        protected final int limit;
+        private final Deque<Node<K, V>> stack = new ArrayDeque<>();
+
+        PatriciaTrieIterator(Node<K, V> from, Node<K, V> to, int limit) {
+            this.from = from;
+            this.to = to;
+            this.limit = limit;
+            this.next = findNext(from);
+        }
+
+        @Override
+        public boolean hasNext() {
+            return next != null;
+        }
+
+        protected Node<K, V> findNext(Node<K, V> start) {
+            Node<K, V> node = start;
+            while (node != null) {
+                if (isInRange(node) && !node.isEmpty()) {
+                    stack.push(node);
+                    node = node.getLeftChild();
+                } else {
+                    node = node.getRightChild();
+                }
+            }
+            return stack.isEmpty() ? null : stack.pop();
+        }
+
+        protected void findNext(Node<K, V> node) {
+            while (node != null) {
+                if (isInRange(node) && !node.isEmpty()) {
+                    stack.push(node);
+                    node = node.getLeftChild();
+                } else {
+                    node = node.getRightChild();
+                }
+            }
+            next = stack.isEmpty() ? null : stack.pop();
+        }
+
+        protected boolean isInRange(Node<K, V> node) {
+            // ... existing range check logic ...
+        }
+
+        protected Map.Entry<K, V> nextEntry() {
+            if (modCount != expectedModCount) {
+                throw new ConcurrentModificationException();
+            }
+            if (next == null) {
+                throw new NoSuchElementException();
+            }
+            current = next;
+            findNext(current.getRightChild());
+            return current;
+        }
+
+        @Override
+        public abstract void remove();
+    }
+}
\ No newline at end of file
