diff --git a/tmp/57f8ee6a-1d75-48b3-99b3-f503c6bd1282_buggy.java b/tmp/ce16c3ca-2a05-4db3-9ff5-bb91cbb391ad_fixed.java
index e69de29..2c94a18 100644
--- a/tmp/57f8ee6a-1d75-48b3-99b3-f503c6bd1282_buggy.java
+++ b/tmp/ce16c3ca-2a05-4db3-9ff5-bb91cbb391ad_fixed.java
@@ -0,0 +1,26 @@
+public void testPrefixMapClear() {
+    Trie<String, Integer> trie = new PatriciaTrie<Integer>();
+    trie.put("Anna", 1);
+    trie.put("Anael", 2);
+    trie.put("Analu", 3);
+    trie.put("Andreas", 4);
+    trie.put("Andrea", 5);
+    trie.put("Andres", 6);
+    trie.put("Anatole", 7);
+    SortedMap<String, Integer> prefixMap = trie.prefixMap("And");
+    assertEquals(new HashSet<String>(Arrays.asList("Andrea", "Andreas", "Andres")), prefixMap.keySet());
+    assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));
+
+    // Use iterator to clear to avoid ConcurrentModification issues
+    Iterator<Map.Entry<String, Integer>> it = prefixMap.entrySet().iterator();
+    while (it.hasNext()) {
+        it.next();
+        it.remove();
+    }
+    
+    assertTrue(prefixMap.isEmpty());
+    assertTrue(prefixMap.keySet().isEmpty());
+    assertTrue(prefixMap.values().isEmpty());
+    assertEquals(new HashSet<String>(Arrays.asList("Anael", "Analu", "Anatole", "Anna")), trie.keySet());
+    assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));
+}
\ No newline at end of file
