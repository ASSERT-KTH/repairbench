diff --git a/tmp/202819d0-4f40-4cd3-ab5d-054d7b2cc809_buggy.java b/tmp/cf616dfd-cd06-4488-a1ed-a9d9b81331c2_fixed.java
index e69de29..a869102 100644
--- a/tmp/202819d0-4f40-4cd3-ab5d-054d7b2cc809_buggy.java
+++ b/tmp/cf616dfd-cd06-4488-a1ed-a9d9b81331c2_fixed.java
@@ -0,0 +1,44 @@
+public V remove(Object key) {
+    if (key == null) {
+        throw new NullPointerException("Key cannot be null");
+    }
+    K k = (K) key;
+    Node<K, V> node = getNode(k);
+    if (node == null) {
+        return null;
+    }
+    V value = node.getValue();
+    if (node.remove()) {
+        size--;
+        if (node.isExternalNode()) {
+            Node<K, V> parent = node.getParent();
+            if (parent != null) {
+                if (parent.getLeftChild() == node) {
+                    parent.setLeftChild(null);
+                } else {
+                    parent.setRightChild(null);
+                }
+                prune(parent);
+            }
+        } else {
+            prune(node);
+        }
+    }
+    return value;
+}
+
+private void prune(Node<K, V> node) {
+    while (node != null && node != root && !node.isEntry() && node.getLeftChild() == null && node.getRightChild() == null) {
+        Node<K, V> parent = node.getParent();
+        if (parent != null) {
+            if (parent.getLeftChild() == node) {
+                parent.setLeftChild(null);
+            } else {
+                parent.setRightChild(null);
+            }
+            node = parent;
+        } else {
+            break;
+        }
+    }
+}
\ No newline at end of file
