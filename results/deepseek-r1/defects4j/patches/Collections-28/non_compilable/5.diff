diff --git a/tmp/08c385b7-fd2f-475c-be68-0c1199f5368e_buggy.java b/tmp/b6425678-eb6f-4d62-b936-1fe577062e0f_fixed.java
index e69de29..438f40d 100644
--- a/tmp/08c385b7-fd2f-475c-be68-0c1199f5368e_buggy.java
+++ b/tmp/b6425678-eb6f-4d62-b936-1fe577062e0f_fixed.java
@@ -0,0 +1,67 @@
+public V remove(Object key) {
+    if (key == null) {
+        return null;
+    }
+    K keyK = (K) key;
+    int lengthInBits = lengthInBits(keyK);
+    TrieEntry<K, V> current = root.left;
+    TrieEntry<K, V> path = root;
+    while (true) {
+        if (current.bitIndex <= path.bitIndex) {
+            if (!current.isEmpty() && compareKeys(keyK, current.key)) {
+                return removeEntry(current);
+            }
+            return null;
+        }
+        path = current;
+        current = nextEntryInSubtree(keyK, current.bitIndex, current, lengthInBits);
+        if (current == null) {
+            return null;
+        }
+    }
+}
+
+private V removeEntry(TrieEntry<K, V> entry) {
+    TrieEntry<K, V> parent = entry.parent;
+    TrieEntry<K, V> child = null;
+    if (entry.left != entry) {
+        child = entry.left;
+    } else if (entry.right != entry) {
+        child = entry.right;
+    }
+    if (parent != null) {
+        parent.replaceChild(entry, child);
+    } else {
+        root.left = child;
+    }
+    if (child != null) {
+        child.parent = parent;
+    }
+    int bitIndex = entry.bitIndex;
+    if (entry.predecessor != null) {
+        entry.predecessor.predecessor = entry.predecessor.left;
+    }
+    size--;
+    modCount++;
+    V value = entry.getValue();
+    pruneEntry(entry);
+    return value;
+}
+
+private void pruneEntry(TrieEntry<K, V> entry) {
+    TrieEntry<K, V> current = entry.parent;
+    while (current != null && current != root && current.isEmpty()) {
+        TrieEntry<K, V> parent = current.parent;
+        if (current.left == current && current.right == current) {
+            if (parent != null) {
+                parent.replaceChild(current, null);
+            } else {
+                root.left = root;
+            }
+            current.parent = null;
+        } else {
+            break;
+        }
+        current = parent;
+    }
+}
\ No newline at end of file
