diff --git a/tmp/fe07745f-32d8-4719-8d7c-0d95dfe9e779_buggy.java b/tmp/bd9b874d-01f8-47c3-b7c1-73f21a7003e9_fixed.java
index 21f64c6..5e20e4a 100644
--- a/tmp/fe07745f-32d8-4719-8d7c-0d95dfe9e779_buggy.java
+++ b/tmp/bd9b874d-01f8-47c3-b7c1-73f21a7003e9_fixed.java
@@ -1,23 +1,39 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
-                    return offset - pos;
+        int seqLength = seq.length();
+        int start = pos;
+        while (start < length) {
+            // Find the next occurrence of the start character
+            while (start < length && input[start] != startChar) {
+                start++;
             }
+            if (start >= length) {
+                break; // startChar not found
+            }
+            // Check if there's enough space for the entire sequence
+            if (start + seqLength > length) {
+                start++; // Not enough space, move to next position
+                continue;
+            }
+            // Check if the subsequent characters match the sequence
+            boolean match = true;
+            for (int i = 1; i < seqLength; i++) {
+                if (input[start + i] != seq.charAt(i)) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
+                return start - pos;
+            }
+            // Move to next position to continue searching
+            start++;
         }
         return -1;
     }
\ No newline at end of file
