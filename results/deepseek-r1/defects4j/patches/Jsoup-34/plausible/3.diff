diff --git a/tmp/9cf6539d-b7ad-43bc-b598-496a0567d5f0_buggy.java b/tmp/1198c23f-058c-4b62-87c3-b35c512e4a51_fixed.java
index 21f64c6..f086df5 100644
--- a/tmp/9cf6539d-b7ad-43bc-b598-496a0567d5f0_buggy.java
+++ b/tmp/1198c23f-058c-4b62-87c3-b35c512e4a51_fixed.java
@@ -1,23 +1,26 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            }
+            if (offset >= length) {
+                break;
+            }
+            if (offset + seqLength > length) {
+                continue;
+            }
+            boolean matched = true;
+            for (int j = 1; j < seqLength; j++) {
+                if (input[offset + j] != seq.charAt(j)) {
+                    matched = false;
+                    break;
+                }
+            }
+            if (matched) {
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
