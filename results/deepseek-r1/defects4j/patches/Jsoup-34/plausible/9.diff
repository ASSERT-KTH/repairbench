diff --git a/tmp/3152059d-1577-4f1b-8049-45f6e11640d9_buggy.java b/tmp/058c16ca-56e7-464f-b337-68f161f6d0b2_fixed.java
index 21f64c6..954654e 100644
--- a/tmp/3152059d-1577-4f1b-8049-45f6e11640d9_buggy.java
+++ b/tmp/058c16ca-56e7-464f-b337-68f161f6d0b2_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (input[offset] != startChar) {
+                while (++offset < length && input[offset] != startChar);
+            }
+            if (offset >= length) {
+                break;
+            }
+            if (offset + seqLength > length) {
+                continue;
+            }
+            boolean match = true;
+            for (int j = 1; j < seqLength; j++) {
+                if (input[offset + j] != seq.charAt(j)) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
