diff --git a/tmp/19293ec5-4b8d-40a1-ab75-b5f71232b0d5_buggy.java b/tmp/116a980d-8d1c-4086-a763-2cd94e24356f_fixed.java
index 21f64c6..63415fc 100644
--- a/tmp/19293ec5-4b8d-40a1-ab75-b5f71232b0d5_buggy.java
+++ b/tmp/116a980d-8d1c-4086-a763-2cd94e24356f_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLen = seq.length();
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                if (offset + seqLen > length) {
+                    continue;
+                }
+                int i = offset + 1;
+                int last = i + seqLen - 1;
+                int j;
+                for (j = 1; j < seqLen && input[i] == seq.charAt(j); j++, i++);
+                if (j == seqLen) {
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
