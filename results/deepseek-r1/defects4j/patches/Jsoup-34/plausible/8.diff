diff --git a/tmp/1bc2370d-ad49-4cce-8251-ded918e76946_buggy.java b/tmp/16b63c29-f9bf-4f06-bbc3-f1057b2ec8d3_fixed.java
index 21f64c6..bd3aa72 100644
--- a/tmp/1bc2370d-ad49-4cce-8251-ded918e76946_buggy.java
+++ b/tmp/16b63c29-f9bf-4f06-bbc3-f1057b2ec8d3_fixed.java
@@ -1,23 +1,41 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int seqLength = seq.length();
+        if (seqLength == 0) {
+            return -1;
+        }
+        int maxPossibleOffset = length - seqLength;
+        if (maxPossibleOffset < pos) {
+            return -1;
+        }
+        int offset = pos;
+        while (offset <= maxPossibleOffset) {
+            // Scan to the next occurrence of startChar
+            while (offset <= maxPossibleOffset && input[offset] != startChar) {
+                offset++;
+            }
+            if (offset > maxPossibleOffset) {
+                break;
+            }
+            // Check if the remaining characters match the sequence
+            boolean match = true;
+            for (int j = 1; j < seqLength; j++) {
+                if (input[offset + j] != seq.charAt(j)) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
                 return offset - pos;
             }
+            offset++; // Move to next position to continue the search
         }
         return -1;
     }
\ No newline at end of file
