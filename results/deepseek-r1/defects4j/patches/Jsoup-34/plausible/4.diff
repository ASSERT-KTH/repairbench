diff --git a/tmp/578a1b1d-c1ae-4ed6-8804-59aee73a16ff_buggy.java b/tmp/85706fe5-587f-4d30-b2f1-7b9acae69fcc_fixed.java
index 21f64c6..db034c7 100644
--- a/tmp/578a1b1d-c1ae-4ed6-8804-59aee73a16ff_buggy.java
+++ b/tmp/85706fe5-587f-4d30-b2f1-7b9acae69fcc_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            if (offset >= length) break;
+            if (offset + seqLength > length) continue; // Ensure there's enough space for the sequence
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = i + seqLength - 1;
+            if (last > length) continue; // Additional check for safety
+            boolean match = true;
+            for (int j = 1; j < seqLength; j++, i++) {
+                if (seq.charAt(j) != input[i]) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match)
                 return offset - pos;
         }
-        }
         return -1;
     }
\ No newline at end of file
