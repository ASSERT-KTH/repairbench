diff --git a/tmp/e89157b7-abad-4679-81a8-68b309cd8ff2_buggy.java b/tmp/88eb880d-0135-4023-a5c4-7acd4d316da7_fixed.java
index 1b36a4f..5809870 100644
--- a/tmp/e89157b7-abad-4679-81a8-68b309cd8ff2_buggy.java
+++ b/tmp/88eb880d-0135-4023-a5c4-7acd4d316da7_fixed.java
@@ -1,58 +1,37 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
-        if (str.length() == 0) {
+        if (str.isEmpty()) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Adjust upper limit to be within the string's length
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
+        // Ensure upper is at least lower
         if (upper < lower) {
             upper = lower;
         }
+        // Cap upper to the maximum possible length of the string
+        upper = Math.min(upper, str.length());
 
         StringBuffer result = new StringBuffer();
         int index = StringUtils.indexOf(str, " ", lower);
         if (index == -1) {
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
+            // Append only if the string was abbreviated
             if (upper != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
         } else if (index > upper) {
             result.append(str.substring(0, upper));
             result.append(StringUtils.defaultString(appendToEnd));
         } else {
             result.append(str.substring(0, index));
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
