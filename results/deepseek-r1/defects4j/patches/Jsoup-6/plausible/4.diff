diff --git a/tmp/f744eceb-7d9d-4d23-bcfe-4a693dfbd277_buggy.java b/tmp/1546c668-ecf9-4c04-95b9-352cb2eb5755_fixed.java
index 99141e0..43a29ce 100644
--- a/tmp/f744eceb-7d9d-4d23-bcfe-4a693dfbd277_buggy.java
+++ b/tmp/1546c668-ecf9-4c04-95b9-352cb2eb5755_fixed.java
@@ -1,33 +1,37 @@
     static String unescape(String string) {
         if (!string.contains("&"))
             return string;
 
         Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+        StringBuffer accum = new StringBuffer(string.length()); 
 
         while (m.find()) {
             int charval = -1;
             String num = m.group(3);
             if (num != null) {
                 try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    int base = m.group(2) != null ? 16 : 10; 
                     charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                } // skip
+                } 
             } else {
                 String name = m.group(1);
                 if (full.containsKey(name))
                     charval = full.get(name);
             }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            if (charval != -1) {
+                if (Character.isValidCodePoint(charval)) {
+                    char[] chars = Character.toChars(charval);
+                    String c = new String(chars);
+                    m.appendReplacement(accum, Matcher.quoteReplacement(c));
                 } else {
-                m.appendReplacement(accum, m.group(0));
+                    m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
+                }
+            } else {
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
             }
         }
         m.appendTail(accum);
         return accum.toString();
     }
\ No newline at end of file
