diff --git a/tmp/c875fb30-f42c-432a-b264-2c9fd7fd41be_buggy.java b/tmp/3b7c0e96-2437-4e19-8b13-a1fe151d4db1_fixed.java
index 544303b..e04fe1d 100644
--- a/tmp/c875fb30-f42c-432a-b264-2c9fd7fd41be_buggy.java
+++ b/tmp/3b7c0e96-2437-4e19-8b13-a1fe151d4db1_fixed.java
@@ -1,29 +1,26 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + coefficients.length; j++) {
+                    if (j == getNumObjectiveFunctions() + i) {
+                        continue; // Skip current variable's column
+                    }
                     if (tableau.getEntry(basicRow, j) == 1) {
                          coefficients[i] = 0;
+                         break;
                     }
                 }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
