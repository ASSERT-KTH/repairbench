diff --git a/tmp/04e68cbe-0fe1-4c92-b802-e1f4cd8ba2ce_buggy.java b/tmp/5550c85a-c9da-4206-96dc-d450c4dae1f7_fixed.java
index b2db1d6..c9cd6e3 100644
--- a/tmp/04e68cbe-0fe1-4c92-b802-e1f4cd8ba2ce_buggy.java
+++ b/tmp/5550c85a-c9da-4206-96dc-d450c4dae1f7_fixed.java
@@ -1,29 +1,21 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
+        Collections.reverse(parents); // Fix: Reverse to process from supertypes to mixInCls
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
                 if (am != null) {
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                     mixIns.add(_constructMethod(m));
                 }
             }
         }
     }
\ No newline at end of file
