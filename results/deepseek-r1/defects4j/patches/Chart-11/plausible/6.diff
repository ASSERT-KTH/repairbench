diff --git a/tmp/c9420207-e680-406d-a895-fe3689a4ea9c_buggy.java b/tmp/a60813cf-ea40-4b42-867e-0883e3763cf6_fixed.java
index ad7255c..ae79096 100644
--- a/tmp/c9420207-e680-406d-a895-fe3689a4ea9c_buggy.java
+++ b/tmp/a60813cf-ea40-4b42-867e-0883e3763cf6_fixed.java
@@ -1,42 +1,62 @@
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            int numElements = 0;
+            switch (seg1) {
+                case PathIterator.SEG_MOVETO:
+                case PathIterator.SEG_LINETO:
+                    numElements = 2;
+                    break;
+                case PathIterator.SEG_QUADTO:
+                    numElements = 4;
+                    break;
+                case PathIterator.SEG_CUBICTO:
+                    numElements = 6;
+                    break;
+                case PathIterator.SEG_CLOSE:
+                    numElements = 0;
+                    break;
+                default:
+                    return false; // unknown segment type
+            }
+            for (int i = 0; i < numElements; i++) {
+                if (d1[i] != d2[i]) {
                     return false;
                 }
+            }
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
\ No newline at end of file
