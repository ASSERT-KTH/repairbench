diff --git a/tmp/41688ae9-12d4-4813-9ff5-6c29e8fdc5b0_buggy.java b/tmp/1719b53b-b518-4cbc-99dd-48e04e5dd51c_fixed.java
index fa6828a..5d5e3b4 100644
--- a/tmp/41688ae9-12d4-4813-9ff5-6c29e8fdc5b0_buggy.java
+++ b/tmp/1719b53b-b518-4cbc-99dd-48e04e5dd51c_fixed.java
@@ -1,5 +1,23 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = new ArrayList<>(orderedInstanceFieldsFrom(awaitingInjectionClazz));
+    // Sort fields to prioritize more specific types first
+    fields.sort((f1, f2) -> {
+        Class<?> type1 = f1.getType();
+        Class<?> type2 = f2.getType();
+        if (type1.isAssignableFrom(type2)) {
+            return 1; // type2 is more specific, f2 comes later in list, so we return 1 to sort f2 before f1
+        } else if (type2.isAssignableFrom(type1)) {
+            return -1; // type1 is more specific, f1 comes before f2
+        } else {
+            return 0; // unrelated types, maintain original order
+        }
+    });
+    for (Field field : fields) {
+        CandidateFilter.FilterResult result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        Object injectedMock = result.getMock();
+        if (injectedMock != null) {
+            result.thenInject();
+            mocks.remove(injectedMock);
+        }
     }
 }
\ No newline at end of file
