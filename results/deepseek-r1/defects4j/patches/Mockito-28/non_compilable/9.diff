diff --git a/tmp/f713d60d-53fe-4949-81c8-40af7a7d1a67_buggy.java b/tmp/3f590d74-f3f4-43ed-9715-c8976920c5b1_fixed.java
index fa6828a..6436fc5 100644
--- a/tmp/f713d60d-53fe-4949-81c8-40af7a7d1a67_buggy.java
+++ b/tmp/3f590d74-f3f4-43ed-9715-c8976920c5b1_fixed.java
@@ -1,5 +1,28 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+    List<Field> allFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+    Set<Class<?>> mockTypes = mocks.stream().map(Object::getClass).collect(java.util.stream.Collectors.toSet());
+    
+    java.util.LinkedHashMap<Class<?>, java.util.List<Field>> fieldsByClass = new java.util.LinkedHashMap<>();
+    for (Field field : allFields) {
+        Class<?> declaringClass = field.getDeclaringClass();
+        fieldsByClass.computeIfAbsent(declaringClass, k -> new java.util.ArrayList<>()).add(field);
+    }
+    
+    for (java.util.List<Field> classFields : fieldsByClass.values()) {
+        java.util.List<Field> exactMatchFields = new java.util.ArrayList<>();
+        java.util.List<Field> remainingFields = new java.util.ArrayList<>();
+        for (Field field : classFields) {
+            if (mockTypes.contains(field.getType())) {
+                exactMatchFields.add(field);
+            } else {
+                remainingFields.add(field);
+            }
+        }
+        for (Field field : exactMatchFields) {
             mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
         }
+        for (Field field : remainingFields) {
+            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        }
+    }
 }
\ No newline at end of file
