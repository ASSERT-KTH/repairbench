diff --git a/tmp/c2a0ff3e-aab6-431a-9cb3-f5f9095345dd_buggy.java b/tmp/2a0eeb3b-0113-4ec2-95ae-64edb69c42dd_fixed.java
index bf9c086..0c2320b 100644
--- a/tmp/c2a0ff3e-aab6-431a-9cb3-f5f9095345dd_buggy.java
+++ b/tmp/2a0eeb3b-0113-4ec2-95ae-64edb69c42dd_fixed.java
@@ -1,54 +1,64 @@
   /**
    * Visits a CALL node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    */
   private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
       report(t, n, NOT_CALLABLE, childType.toString());
       ensureTyped(t, n);
       return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
       FunctionType functionType = (FunctionType) childType;
 
       boolean isExtern = false;
       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
       if(functionJSDocInfo != null) {
         String sourceName = functionJSDocInfo.getSourceName();
         CompilerInput functionSource = compiler.getInput(sourceName);
         isExtern = functionSource.isExtern();
       }
 
       // Non-native constructors should not be called directly
       // unless they specify a return type and are defined
       // in an extern.
       if (functionType.isConstructor() &&
           !functionType.isNativeObjectType() &&
           (functionType.getReturnType().isUnknownType() ||
            functionType.getReturnType().isVoidType() ||
            !isExtern)) {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
+      // Check if the function's 'this' type requires a specific context
+      JSType thisType = functionType.getTypeOfThis();
+      if (!thisType.isUnknownType()) {
+          Node callee = n.getFirstChild();
+          int calleeTokenType = callee.getType();
+          if (calleeTokenType != Token.GETPROP && calleeTokenType != Token.GETELEM) {
+              report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
+          }
+      }
+
+      // Functions with explicit 'this' types must be called in a GETPROP
       // or GETELEM.
 
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
       ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
   }
\ No newline at end of file
