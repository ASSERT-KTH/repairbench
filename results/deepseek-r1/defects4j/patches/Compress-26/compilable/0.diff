diff --git a/tmp/c9295dab-6a14-4879-9866-2698b6742d13_buggy.java b/tmp/65328ccd-d8d8-4cff-8de8-b44fe3840417_fixed.java
index 4b163f6..147444f 100644
--- a/tmp/c9295dab-6a14-4879-9866-2698b6742d13_buggy.java
+++ b/tmp/65328ccd-d8d8-4cff-8de8-b44fe3840417_fixed.java
@@ -1,28 +1,18 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
             if (skipped == 0) {
+                // Check if we've reached EOF by reading a single byte
+                int b = input.read();
+                if (b == -1) {
                     break;
+                } else {
+                    remaining--;
                 }
-            numToSkip -= skipped;
+            } else {
+                remaining -= skipped;
             }
-            
-        return available - numToSkip;
+        }
+        return numToSkip - remaining;
     }
\ No newline at end of file
