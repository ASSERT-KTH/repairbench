diff --git a/tmp/2ac813c7-39a2-4a30-b526-a7c79920884f_buggy.java b/tmp/53bd141f-f4c4-4c0c-869a-3c278331345d_fixed.java
index d57736b..c52cd19 100644
--- a/tmp/2ac813c7-39a2-4a30-b526-a7c79920884f_buggy.java
+++ b/tmp/53bd141f-f4c4-4c0c-869a-3c278331345d_fixed.java
@@ -1,39 +1,42 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      JSType restrictedType = type.restrictByNotNullOrUndefined();
+      if (restrictedType != null) {
+        if (restrictedType.isUnionType()) {
+          for (JSType alt : restrictedType.toMaybeUnionType().getAlternates()) {
+            ObjectType objType = ObjectType.cast(alt);
             if (objType != null) {
+              processPropertiesForObjectType(constraintObj, objType);
+            }
+          }
+        } else {
+          ObjectType objType = ObjectType.cast(restrictedType);
+          if (objType != null) {
+            processPropertiesForObjectType(constraintObj, objType);
+          }
+        }
+      }
+    }
+  }
+
+  private void processPropertiesForObjectType(
+      ObjectType constraintObj, ObjectType objType) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!objType.hasProperty(prop)) {
           typeToInfer =
               getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
         objType.defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
\ No newline at end of file
-    }
-  }
