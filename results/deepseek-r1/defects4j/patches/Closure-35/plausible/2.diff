diff --git a/tmp/69649833-664e-41a4-bdbe-a9665e8df25d_buggy.java b/tmp/454d1e9e-e381-4035-a6e4-690932e36acf_fixed.java
index d57736b..7eba5e9 100644
--- a/tmp/69649833-664e-41a4-bdbe-a9665e8df25d_buggy.java
+++ b/tmp/454d1e9e-e381-4035-a6e4-690932e36acf_fixed.java
@@ -1,39 +1,39 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      JSType restrictedType = type.restrictByNotNullOrUndefined();
+      if (restrictedType.isUnionType()) {
+        for (JSType alt : restrictedType.toMaybeUnionType().getAlternates()) {
+          ObjectType objType = ObjectType.cast(alt);
           if (objType != null) {
+            inferPropertiesForObjectType(objType, constraintObj);
+          }
+        }
+      } else {
+        ObjectType objType = ObjectType.cast(restrictedType);
+        if (objType != null) {
+          inferPropertiesForObjectType(objType, constraintObj);
+        }
+      }
+    }
+  }
+
+  private void inferPropertiesForObjectType(
+      ObjectType objType, ObjectType constraintObj) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!objType.isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
         }
         objType.defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
\ No newline at end of file
-    }
-  }
