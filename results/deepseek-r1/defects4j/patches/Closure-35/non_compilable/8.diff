diff --git a/tmp/f76503b7-50af-440b-82a1-14bd6e443cb9_buggy.java b/tmp/b37a4aef-192e-4bb0-b2a1-0bcffed52e89_fixed.java
index d57736b..32a819e 100644
--- a/tmp/f76503b7-50af-440b-82a1-14bd6e443cb9_buggy.java
+++ b/tmp/b37a4aef-192e-4bb0-b2a1-0bcffed52e89_fixed.java
@@ -1,39 +1,27 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
+      for (JSType alt : type.unionDecompose()) {
+        ObjectType objType = ObjectType.cast(alt.restrictByNotNullOrUndefined());
         if (objType != null) {
           for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!objType.isPropertyTypeDeclared(prop)) {
               JSType typeToInfer = propType;
               if (!objType.hasProperty(prop)) {
                 typeToInfer =
                     getNativeType(VOID_TYPE).getLeastSupertype(propType);
               }
               objType.defineInferredProperty(prop, typeToInfer, null);
             }
           }
         }
       }
     }
+  }
\ No newline at end of file
