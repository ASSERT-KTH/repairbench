diff --git a/tmp/e7b06d03-2d72-4d2f-a9a2-6cec0929361a_buggy.java b/tmp/0057fe65-7f13-4228-ac47-04644def0082_fixed.java
index d57736b..83c79b2 100644
--- a/tmp/e7b06d03-2d72-4d2f-a9a2-6cec0929361a_buggy.java
+++ b/tmp/0057fe65-7f13-4228-ac47-04644def0082_fixed.java
@@ -1,39 +1,45 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
-      if (objType != null) {
+      JSType restrictedType = type.restrictByNotNullOrUndefined();
+      if (restrictedType == null) {
+        return;
+      }
+      for (ObjectType objType : getObjectTypes(restrictedType)) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
+
+  private static Iterable<ObjectType> getObjectTypes(JSType type) {
+    if (type.isUnionType()) {
+      UnionType unionType = type.toMaybeUnionType();
+      List<ObjectType> objectTypes = new ArrayList<>();
+      for (JSType alt : unionType.getAlternates()) {
+        ObjectType objType = ObjectType.cast(alt);
+        if (objType != null) {
+          objectTypes.add(objType);
+        }
+      }
+      return objectTypes;
+    } else {
+      ObjectType objType = ObjectType.cast(type);
+      return objType != null ? Collections.singletonList(objType) : Collections.emptyList();
+    }
+  }
\ No newline at end of file
