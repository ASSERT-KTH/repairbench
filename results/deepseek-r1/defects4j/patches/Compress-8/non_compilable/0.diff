diff --git a/tmp/01778e99-f347-4773-a5ed-d741c30e78f6_buggy.java b/tmp/a0b38837-3088-4b4a-85f8-2fbc22c884f7_fixed.java
index e087f95..b5cc73f 100644
--- a/tmp/01778e99-f347-4773-a5ed-d741c30e78f6_buggy.java
+++ b/tmp/a0b38837-3088-4b4a-85f8-2fbc22c884f7_fixed.java
@@ -1,53 +1,75 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
+
+        final int end = offset + length;
+
+        // Check if all bytes are NULs
+        boolean allNuls = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
+                break;
+            }
+        }
+        if (allNuls) {
+            return 0L;
+        }
+
         long result = 0;
         boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
-
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
+        int i;
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
+        for (i = offset; i < end; i++) {
+            if (buffer[i] != (byte) ' ') {
                 break;
             }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // Parse digits until terminator
+        boolean digitsFound = false;
+        for (; i < end; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                // Terminator found
+                break;
+            }
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            stillPadding = false;
+            digitsFound = true;
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Check if terminator was found
+        if (i >= end) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
+        }
+
+        // Check remaining bytes after terminator are spaces or NULs
+        for (int j = i + 1; j < end; j++) {
+            final byte b = buffer[j];
+            if (b != 0 && b != (byte) ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, j, b));
+            }
+        }
+
+        // Ensure at least one digit was parsed
+        if (!digitsFound) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, buffer[i]));
         }
 
         return result;
     }
+
+    // Helper method to generate exception message (assumed to exist)
+    private static String exceptionMessage(byte[] buffer, int offset, int length, int pos, byte currentByte) {
+        return "Invalid byte at position " + pos + ": " + currentByte;
+    }
\ No newline at end of file
