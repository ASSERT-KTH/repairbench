diff --git a/tmp/d0503a3f-4a69-4564-b6ce-b745e30d9156_buggy.java b/tmp/f3398760-2c0e-4398-a888-eeb32c86d0c6_fixed.java
index e087f95..0113f10 100644
--- a/tmp/d0503a3f-4a69-4564-b6ce-b745e30d9156_buggy.java
+++ b/tmp/f3398760-2c0e-4398-a888-eeb32c86d0c6_fixed.java
@@ -1,53 +1,81 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
+
+        boolean allNuls = true;
+        for (int i = offset; i < offset + length; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
+                break;
+            }
+        }
+        if (allNuls) {
+            return 0L;
+        }
+
+        long result = 0L;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
-        for (int i = start; i < end; i++){
+        int i;
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
+                if (stillPadding) {
+                    continue;
+                } else {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        if (stillPadding) {
+            throw new IllegalArgumentException("No digits found");
+        }
+
+        if (i < end) {
+            // Check remaining bytes after terminator are NUL or space
+            for (int j = i; j < end; j++) {
+                byte b = buffer[j];
+                if (b != 0 && b != ' ') {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, b));
+                }
+            }
+        } else {
+            throw new IllegalArgumentException("No terminator found");
         }
 
         return result;
     }
\ No newline at end of file
