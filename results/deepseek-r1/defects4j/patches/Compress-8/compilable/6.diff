diff --git a/tmp/d7b7ca14-6285-4f72-bbba-f67e6dffb670_buggy.java b/tmp/09055b35-59c1-45e1-8e6e-1c153ceeb815_fixed.java
index e087f95..8c06635 100644
--- a/tmp/d7b7ca14-6285-4f72-bbba-f67e6dffb670_buggy.java
+++ b/tmp/09055b35-59c1-45e1-8e6e-1c153ceeb815_fixed.java
@@ -1,53 +1,62 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2");
+        }
+
         long result = 0;
         boolean stillPadding = true;
-        int     end = offset + length;
+        final int end = offset + length;
         int start = offset;
 
-        for (int i = start; i < end; i++){
+        // Skip leading spaces
+        while (start < end && buffer[start] == ' ') {
+            start++;
+        }
+
+        // Check if all remaining are NULs or spaces
+        boolean allNulsOrSpaces = true;
+        for (int j = start; j < end; j++) {
+            final byte b = buffer[j];
+            if (b != 0 && b != ' ') {
+                allNulsOrSpaces = false;
+                break;
+            }
+        }
+        if (allNulsOrSpaces) {
+            return 0L;
+        }
+
+        int i;
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
+            if (currentByte == ' ') {
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            stillPadding = false;
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Check if no digits were processed
+        if (stillPadding) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, (byte) 0));
+        }
+
+        // Check trailing bytes
+        for (int j = i; j < end; j++) {
+            final byte b = buffer[j];
+            if (b != 0 && b != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, j, b));
+            }
         }
 
         return result;
     }
\ No newline at end of file
