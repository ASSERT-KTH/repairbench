diff --git a/tmp/bdb0e927-56f5-45d2-bfa4-4e553273b1d2_buggy.java b/tmp/96e6da76-c299-4ac8-9635-0372bb3d5b7e_fixed.java
index e087f95..0592c68 100644
--- a/tmp/bdb0e927-56f5-45d2-bfa4-4e553273b1d2_buggy.java
+++ b/tmp/96e6da76-c299-4ac8-9635-0372bb3d5b7e_fixed.java
@@ -1,53 +1,67 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2");
+        }
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean terminatedByNul = false;
+        int i;
 
-        for (int i = start; i < end; i++){
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                terminatedByNul = true;
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
+                if (currentByte == (byte) ' ') {
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                } else {
                     stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                }
+            }
+
+            if (currentByte == (byte) ' ') {
+                break;
+            }
+
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Check if we processed all bytes without finding a valid terminator
+        if (i == end) {
+            // The entire buffer was parsed; last byte must be a terminator
+            if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, buffer[end - 1]));
+            }
+        }
+
+        // Validate remaining bytes after terminator
+        if (terminatedByNul) {
+            for (int j = i + 1; j < end; j++) {
+                if (buffer[j] != 0) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, buffer[j]));
+                }
+            }
+        } else {
+            for (int j = i + 1; j < end; j++) {
+                byte b = buffer[j];
+                if (b != 0 && b != ' ') {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, b));
+                }
+            }
         }
 
         return result;
     }
\ No newline at end of file
