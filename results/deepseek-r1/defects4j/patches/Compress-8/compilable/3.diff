diff --git a/tmp/9f35167f-83b3-47a3-85dd-8950fdbc44ed_buggy.java b/tmp/45eb0493-26ed-4769-bb82-c5b4eb00d62f_fixed.java
index e087f95..8dcaef4 100644
--- a/tmp/9f35167f-83b3-47a3-85dd-8950fdbc44ed_buggy.java
+++ b/tmp/45eb0493-26ed-4769-bb82-c5b4eb00d62f_fixed.java
@@ -1,53 +1,76 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        int i;
 
-        for (int i = start; i < end; i++){
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            if (currentByte == (byte) ' ') {
                 if (stillPadding) {
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
+                } else {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // Check if all bytes were processed without finding a trailing NUL or space
+        if (i == end) {
+            throw new IllegalArgumentException("Trailing space or NUL missing");
+        }
+
+        // Check remaining bytes based on why the loop broke
+        if (buffer[i] == 0) {
+            // All remaining must be NUL
+            for (int j = i; j < end; j++) {
+                if (buffer[j] != 0) {
+                    throw new IllegalArgumentException("Non-NUL byte after initial NUL");
+                }
+            }
+        } else {
+            // All remaining must be space or NUL
+            for (int j = i; j < end; j++) {
+                byte b = buffer[j];
+                if (b != 0 && b != (byte) ' ') {
+                    throw new IllegalArgumentException("Invalid trailing bytes");
+                }
+            }
         }
 
         return result;
     }
\ No newline at end of file
