diff --git a/tmp/33a104f1-e25d-4209-848c-5ca15d76c9ab_buggy.java b/tmp/6b93f35f-2120-41ba-90cb-b994de684d62_fixed.java
index e087f95..a0d085f 100644
--- a/tmp/33a104f1-e25d-4209-848c-5ca15d76c9ab_buggy.java
+++ b/tmp/6b93f35f-2120-41ba-90cb-b994de684d62_fixed.java
@@ -1,53 +1,70 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
-        for (int i = start; i < end; i++){
+        // Check if all bytes are NUL
+        boolean allNul = true;
+        for (int j = start; j < end; j++) {
+            if (buffer[j] != 0) {
+                allNul = false;
+                break;
+            }
+        }
+        if (allNul) {
+            return 0L;
+        }
+
+        boolean foundNul = false;
+        int i;
+        for (i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                foundNul = true;
                 break;
             }
 
-        // Skip leading spaces
+            // Skip leading spaces or zeros
             if (currentByte == (byte) ' ' || currentByte == '0') {
                 if (stillPadding) {
                     continue;
                 }
                 if (currentByte == (byte) ' ') {
                     break;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Check remaining bytes are either space or NUL
+        for (int j = i; j < end; j++) {
+            byte b = buffer[j];
+            if (b != 0 && b != ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, b));
+            }
+        }
+
+        // If terminated by NUL, ensure all remaining are NUL
+        if (foundNul) {
+            for (int j = i; j < end; j++) {
+                if (buffer[j] != 0) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, buffer[j]));
+                }
+            }
         }
 
         return result;
     }
\ No newline at end of file
