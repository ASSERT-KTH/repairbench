diff --git a/tmp/81901033-c429-4684-84af-2a8b5625d646_buggy.java b/tmp/2cbc0e74-ca94-455e-8067-bca047e36281_fixed.java
index 3002587..636ba6f 100644
--- a/tmp/81901033-c429-4684-84af-2a8b5625d646_buggy.java
+++ b/tmp/2cbc0e74-ca94-455e-8067-bca047e36281_fixed.java
@@ -1,10 +1,32 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        // Transform sigma to log space to ensure positivity during optimization
+        double[] transformedGuess = new double[] { guess[0], guess[1], Math.log(guess[2]) };
+
+        ParametricMultivariateRealFunction transformedParametric = new ParametricMultivariateRealFunction() {
+            private final Gaussian.Parametric original = new Gaussian.Parametric();
+
+            @Override
+            public double value(double x, double[] parameters) {
+                double sigma = Math.exp(parameters[2]);
+                return original.value(x, new double[] { parameters[0], parameters[1], sigma });
+            }
+
+            @Override
+            public double[] gradient(double x, double[] parameters) {
+                double sigma = Math.exp(parameters[2]);
+                double[] originalGradient = original.gradient(x, new double[] { parameters[0], parameters[1], sigma });
+                double dlogSigma = originalGradient[2] * sigma;
+                return new double[] { originalGradient[0], originalGradient[1], dlogSigma };
+            }
+        };
+
+        double[] transformedParams = fit(transformedParametric, transformedGuess);
+        return new double[] { transformedParams[0], transformedParams[1], Math.exp(transformedParams[2]) };
     }
\ No newline at end of file
