diff --git a/tmp/eb28e2a3-b0dc-4e1c-b9e5-b48f9dd13ae7_buggy.java b/tmp/58991971-11f2-48a0-9f3f-5bfa98049de8_fixed.java
index 3002587..d6018cd 100644
--- a/tmp/eb28e2a3-b0dc-4e1c-b9e5-b48f9dd13ae7_buggy.java
+++ b/tmp/58991971-11f2-48a0-9f3f-5bfa98049de8_fixed.java
@@ -1,10 +1,31 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        ParametricRealFunction wrappedFunc = new ParametricRealFunction() {
+            public double value(double x, double[] parameters) {
+                double[] wrappedParams = parameters.clone();
+                wrappedParams[2] = Math.abs(wrappedParams[2]);
+                return new Gaussian.Parametric().value(x, wrappedParams);
+            }
+
+            public double[] gradient(double x, double[] parameters) {
+                double[] wrappedParams = parameters.clone();
+                wrappedParams[2] = Math.abs(wrappedParams[2]);
+                double[] gradient = new Gaussian.Parametric().gradient(x, wrappedParams);
+                if (parameters[2] != 0) {
+                    gradient[2] *= Math.signum(parameters[2]);
+                } else {
+                    gradient[2] = 0;
+                }
+                return gradient;
+            }
+        };
+        double[] params = fit(wrappedFunc, guess);
+        params[2] = Math.abs(params[2]);
+        return params;
     }
\ No newline at end of file
