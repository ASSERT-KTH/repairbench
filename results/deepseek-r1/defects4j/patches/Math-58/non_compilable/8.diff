diff --git a/tmp/ccbf8630-8218-47e8-b2cf-af92190a82d0_buggy.java b/tmp/5f5eeecb-66d5-4d3c-9c13-93f1a89412ff_fixed.java
index 3002587..7f9578d 100644
--- a/tmp/ccbf8630-8218-47e8-b2cf-af92190a82d0_buggy.java
+++ b/tmp/5f5eeecb-66d5-4d3c-9c13-93f1a89412ff_fixed.java
@@ -1,10 +1,35 @@
-    /**
-     * Fits a Gaussian function to the observed points.
-     *
-     * @return the parameters of the Gaussian function that best fits the
-     * observed points (in the same order as above).
-     */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        // Transform sigma to log space to ensure positivity during optimization
+        double[] transformedGuess = new double[] { guess[0], guess[1], Math.log(guess[2]) };
+        
+        Parametric transformedParametric = new Parametric() {
+            @Override
+            public double value(double x, double... parameters) {
+                // Transform log_sigma back to sigma
+                double[] transformedParams = new double[] {
+                    parameters[0],
+                    parameters[1],
+                    Math.exp(parameters[2])
+                };
+                return super.value(x, transformedParams);
+            }
+
+            @Override
+            public double[] gradient(double x, double... parameters) {
+                double[] transformedParams = new double[] {
+                    parameters[0],
+                    parameters[1],
+                    Math.exp(parameters[2])
+                };
+                double[] gradient = super.gradient(x, transformedParams);
+                // Apply chain rule to gradient for sigma parameter
+                gradient[2] *= transformedParams[2]; // derivative w.r.t log_sigma is gradient[2] * sigma
+                return gradient;
+            }
+        };
+
+        double[] optimizedParams = fit(transformedParametric, transformedGuess);
+        // Convert log_sigma back to sigma
+        return new double[] { optimizedParams[0], optimizedParams[1], Math.exp(optimizedParams[2]) };
     }
\ No newline at end of file
