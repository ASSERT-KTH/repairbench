diff --git a/tmp/14e44fcb-d9ff-4c67-839a-94cf1e14b24d_buggy.java b/tmp/0ebffd09-055a-4d9c-a343-f47afac027b6_fixed.java
index 3effef5..9ff8777 100644
--- a/tmp/14e44fcb-d9ff-4c67-839a-94cf1e14b24d_buggy.java
+++ b/tmp/0ebffd09-055a-4d9c-a343-f47afac027b6_fixed.java
@@ -1,73 +1,91 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
             DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
-            // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
                     while (t == JsonToken.FIELD_NAME) {
+                        String remainingPropName = p.getCurrentName();
                         p.nextToken();
+                        SettableBeanProperty prop = _beanProperties.find(remainingPropName);
+                        if (prop != null) {
+                            Object value = prop.deserialize(p, ctxt);
+                            try {
+                                prop.set(bean, value);
+                            } catch (Exception e) {
+                                wrapAndThrow(e, _beanType.getRawClass(), remainingPropName, ctxt);
+                            }
+                        } else if (buffer.readIdProperty(remainingPropName)) {
+                            // handled
+                        } else if (_ignorableProps != null && _ignorableProps.contains(remainingPropName)) {
+                            handleIgnoredProperty(p, ctxt, handledType(), remainingPropName);
+                        } else {
+                            tokens.writeFieldName(remainingPropName);
                             tokens.copyCurrentStructure(p);
+                            if (_anySetter != null) {
+                                Object value = _anySetter.deserialize(p, ctxt);
+                                try {
+                                    _anySetter.set(bean, value);
+                                } catch (Exception e) {
+                                    wrapAndThrow(e, _beanType.getRawClass(), remainingPropName, ctxt);
+                                }
+                            }
+                        }
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
-            // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
-            // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
