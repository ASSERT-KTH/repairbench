diff --git a/tmp/c0bde136-78b2-43ea-bc47-da7a4647c53e_buggy.java b/tmp/6c63eaf5-23b0-4530-b2a9-b986a34d1306_fixed.java
index 3effef5..3582c1d 100644
--- a/tmp/c0bde136-78b2-43ea-bc47-da7a4647c53e_buggy.java
+++ b/tmp/6c63eaf5-23b0-4530-b2a9-b986a34d1306_fixed.java
@@ -1,73 +1,93 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
+        Object resultBean = null;
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
-                    Object bean;
                     try {
-                        bean = creator.build(ctxt, buffer);
+                        resultBean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
-                    if (bean.getClass() != _beanType.getRawClass()) {
+                    if (resultBean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+                    // Process remaining fields
+                    break;
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
+        Object bean;
+        if (resultBean != null) {
+            bean = resultBean;
+            // Need to process remaining fields after the last one processed
+            while (t == JsonToken.FIELD_NAME) {
+                String propName = p.getCurrentName();
+                p.nextToken(); // skip name
+                // Check if the field is a regular property
+                SettableBeanProperty prop = _beanProperties.find(propName);
+                if (prop != null) {
+                    prop.deserializeAndSet(p, ctxt, bean);
+                } else {
+                    // Handle other cases (ignorable, any setter, unwrapped)
+                    if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    } else if (_anySetter != null) {
+                        _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                    } else {
+                        tokens.writeFieldName(propName);
+                        tokens.copyCurrentStructure(p);
+                    }
+                }
+                t = p.nextToken();
+            }
+        } else {
             // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
             try {
                 bean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 return wrapInstantiationProblem(e, ctxt);
             }
+        }
+
+        tokens.writeEndObject();
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
