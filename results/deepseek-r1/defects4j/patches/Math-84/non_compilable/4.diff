diff --git a/tmp/a2dcf90c-29dc-492c-b8cb-72044a270144_buggy.java b/tmp/a25ee16d-c4e4-47ca-a834-86805c1f5df8_fixed.java
index 5f1dcf2..7f88cb3 100644
--- a/tmp/a2dcf90c-29dc-492c-b8cb-72044a270144_buggy.java
+++ b/tmp/a25ee16d-c4e4-47ca-a834-86805c1f5df8_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        // Save the original simplex
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // Perform reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            // Compute expanded simplex
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // Accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
             return;
-
         }
 
-            // compute the contracted simplex
+        // Perform contraction step
+        final RealPointValuePair[] originalBeforeContraction = simplex.clone();
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
             return;
         }
 
+        // Revert to original simplex before contraction since contraction didn't improve
+        simplex = originalBeforeContraction;
+
+        // Perform shrink step
+        final RealPointValuePair[] shrunk = new RealPointValuePair[original.length];
+        shrunk[0] = best;
+        for (int i = 1; i < original.length; i++) {
+            final double[] x = original[i].getPointRef();
+            final double[] newX = new double[x.length];
+            for (int j = 0; j < x.length; j++) {
+                newX[j] = best.getPoint()[j] + gamma * (x[j] - best.getPoint()[j]);
+            }
+            final double value = evaluate(newX);
+            shrunk[i] = new RealPointValuePair(newX, value, false);
         }
 
+        // Sort the shrunk simplex
+        Arrays.sort(shrunk, comparator);
+        simplex = shrunk;
     }
\ No newline at end of file
