diff --git a/tmp/0fccf698-8218-40f2-b7cb-bb78a9aa6e16_buggy.java b/tmp/86ef7be2-4b65-4a08-b236-c19d74246d08_fixed.java
index 5f1dcf2..c27bc28 100644
--- a/tmp/0fccf698-8218-40f2-b7cb-bb78a9aa6e16_buggy.java
+++ b/tmp/86ef7be2-4b65-4a08-b236-c19d74246d08_fixed.java
@@ -1,41 +1,48 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            if (comparator.compare(reflected, best) < 0) {
+
+                // compute the expanded simplex based on the reflected simplex
+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = simplex; // Already set by evaluateNewSimplex
+                } else {
+                    // revert to the reflected simplex
                     simplex = reflectedSimplex;
                 }
-
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+            final RealPointValuePair[] contractedSimplex = simplex;
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contractedSimplex;
+                return;
+            } else {
+                // Revert to original simplex as contraction didn't improve
+                simplex = original;
 
-            // check convergence
+                // Check convergence
+                if (getConvergenceChecker().converged(getIterations(), getEvaluations(), best, best)) {
                     return;
                 }
-
             }
-
+        }
     }
\ No newline at end of file
