diff --git a/tmp/000f927b-369d-4536-a6e7-b1efd2b86858_buggy.java b/tmp/119784e7-af3c-4f75-9b8e-9940f24bfc30_fixed.java
index 5f1dcf2..c39e891 100644
--- a/tmp/000f927b-369d-4536-a6e7-b1efd2b86858_buggy.java
+++ b/tmp/119784e7-af3c-4f75-9b8e-9940f24bfc30_fixed.java
@@ -1,41 +1,54 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                return;
+            } else {
+                // Perform shrink step
+                evaluateNewSimplex(original, rho, comparator);
 
-            // check convergence
+                // Check convergence after shrinking
+                boolean converged = true;
+                for (int i = 1; i < original.length; ++i) {
+                    if (comparator.compare(simplex[i], best) < 0) {
+                        converged = false;
+                        break;
+                    }
+                }
+                if (converged) {
                     return;
                 }
+            }
 
         }
 
     }
\ No newline at end of file
