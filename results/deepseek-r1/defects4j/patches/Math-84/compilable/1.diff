diff --git a/tmp/c07f7984-25f6-4298-991b-2c6fe490c33b_buggy.java b/tmp/4b5c0c55-b5d7-44b0-a432-3fad614bd706_fixed.java
index 5f1dcf2..390a910 100644
--- a/tmp/c07f7984-25f6-4298-991b-2c6fe490c33b_buggy.java
+++ b/tmp/4b5c0c55-b5d7-44b0-a432-3fad614bd706_fixed.java
@@ -1,41 +1,32 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
-            // save the original vertex
+        // Save the original simplex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+        // Perform reflection
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
-                // compute the expanded simplex
+            // Reflection is better than the best; try expansion
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, 2.0, comparator); // Use khi (typically 2.0)
+            if (comparator.compare(expanded, reflected) < 0) {
+                // Expanded is better, keep the expanded simplex
+            } else {
+                // Revert to the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
+        } else {
+            // Reflection did not improve; perform contraction
+            final RealPointValuePair contracted = evaluateNewSimplex(original, 0.5, comparator); // Use gamma (typically 0.5)
+            if (comparator.compare(contracted, best) >= 0) {
+                // Contraction did not improve; perform shrink
+                evaluateNewSimplex(original, 0.5, comparator); // Use sigma (typically 0.5)
             }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
         }
-
-        }
-
     }
\ No newline at end of file
