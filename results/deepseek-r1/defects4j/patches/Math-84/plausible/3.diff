diff --git a/tmp/6e547723-81e7-4a81-882f-55dd81805613_buggy.java b/tmp/806d95be-6937-4e27-a19b-4149a68801fd_fixed.java
index 5f1dcf2..05a465e 100644
--- a/tmp/6e547723-81e7-4a81-882f-55dd81805613_buggy.java
+++ b/tmp/806d95be-6937-4e27-a19b-4149a68801fd_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
+            if (comparator.compare(contracted, best) >= 0) {
+                // neither reflection nor contraction has improved the best point
+                // perform a shrink step
+                final RealPointValuePair[] shrunkSimplex = original.clone();
+                final RealPointValuePair bestOriginal = original[0];
+                for (int i = 1; i < original.length; ++i) {
+                    double[] newPoint = new double[bestOriginal.getPointRef().length];
+                    for (int j = 0; j < newPoint.length; ++j) {
+                        newPoint[j] = bestOriginal.getPointRef()[j] + gamma * (original[i].getPointRef()[j] - bestOriginal.getPointRef()[j]);
+                    }
+                    shrunkSimplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
             }
 
         }
 
     }
\ No newline at end of file
