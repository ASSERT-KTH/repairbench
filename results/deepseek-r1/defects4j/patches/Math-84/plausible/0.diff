diff --git a/tmp/e83958b8-6f23-47bc-a2cf-9724782e2f22_buggy.java b/tmp/d222c959-3d14-4b73-bbce-7453aa6580a7_fixed.java
index 5f1dcf2..88825ec 100644
--- a/tmp/e83958b8-6f23-47bc-a2cf-9724782e2f22_buggy.java
+++ b/tmp/d222c959-3d14-4b73-bbce-7453aa6580a7_fixed.java
@@ -1,41 +1,55 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                // Check convergence after reflection/expansion
+                if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
+                    return;
+                }
+
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
 
-            // check convergence
+                // Check convergence after contraction
+                if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
                     return;
                 }
 
+                return;
+            } else {
+                // Check convergence since no improvement
+                if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {
+                    return;
+                }
+            }
+
         }
 
     }
\ No newline at end of file
