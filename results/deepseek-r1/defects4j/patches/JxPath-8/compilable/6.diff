diff --git a/tmp/b82b9201-6d8f-4eec-976b-bd9c45226386_buggy.java b/tmp/fd9cdf9d-e6d9-475e-a2f4-26bf5c5c33cf_fixed.java
index 98d89dc..62f046f 100644
--- a/tmp/b82b9201-6d8f-4eec-976b-bd9c45226386_buggy.java
+++ b/tmp/fd9cdf9d-e6d9-475e-a2f4-26bf5c5c33cf_fixed.java
@@ -1,23 +1,25 @@
     private boolean compute(Object left, Object right) {
         left = reduce(left);
         right = reduce(right);
 
         if (left instanceof InitialContext) {
             ((InitialContext) left).reset();
         }
         if (right instanceof InitialContext) {
             ((InitialContext) right).reset();
         }
         if (left instanceof Iterator && right instanceof Iterator) {
             return findMatch((Iterator) left, (Iterator) right);
         }
         if (left instanceof Iterator) {
             return containsMatch((Iterator) left, right);
         }
         if (right instanceof Iterator) {
             return containsMatch((Iterator) right, left);
         }
         double ld = InfoSetUtil.doubleValue(left);
         double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+        // Use Double.compare to handle NaN correctly
+        int cmp = Double.compare(ld, rd);
+        return evaluateCompare(cmp);
     }
\ No newline at end of file
