diff --git a/tmp/f8d3c28e-c6fa-4a3c-ab6f-4b1c7c7547bc_buggy.java b/tmp/e44bb782-6900-4088-bd5e-090a98a66982_fixed.java
index efa499e..e2c0456 100644
--- a/tmp/f8d3c28e-c6fa-4a3c-ab6f-4b1c7c7547bc_buggy.java
+++ b/tmp/e44bb782-6900-4088-bd5e-090a98a66982_fixed.java
@@ -1,35 +1,39 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+        Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
         double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
+            String varName = "x" + i;
+            int positiveCol = columnLabels.indexOf(varName);
+            int negativeCol = columnLabels.indexOf(varName + "-");
+
+            double positiveValue = 0.0;
+            if (positiveCol >= 0) {
+                Integer basicRow = getBasicRow(positiveCol);
+                if (basicRow != null) {
+                    positiveValue = getEntry(basicRow, getRhsOffset());
                 }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            }
+
+            double negativeValue = 0.0;
+            if (negativeCol >= 0) {
+                Integer basicRow = getBasicRow(negativeCol);
+                if (basicRow != null) {
+                    negativeValue = getEntry(basicRow, getRhsOffset());
+                }
+            }
+
+            coefficients[i] = positiveValue - negativeValue;
+            if (!restrictToNonNegative) {
+                coefficients[i] -= mostNegative;
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
