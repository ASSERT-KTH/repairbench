diff --git a/tmp/626290b3-cc4b-485a-967b-6c8701a0132f_buggy.java b/tmp/afd7d3b0-99e9-40e0-8c9f-d66857e8411f_fixed.java
index 1478ee1..a456824 100644
--- a/tmp/626290b3-cc4b-485a-967b-6c8701a0132f_buggy.java
+++ b/tmp/afd7d3b0-99e9-40e0-8c9f-d66857e8411f_fixed.java
@@ -1,24 +1,57 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Rescale vectors to avoid overflow/underflow
+      final double s1 = computeScaleFactor(v1);
+      final double s2 = computeScaleFactor(v2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      final double scaledX1 = v1.x * s1;
+      final double scaledY1 = v1.y * s1;
+      final double scaledZ1 = v1.z * s1;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      final double scaledX2 = v2.x * s2;
+      final double scaledY2 = v2.y * s2;
+      final double scaledZ2 = v2.z * s2;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute dot products
+      final double dotV1V2 = scaledX1 * scaledX2 + scaledY1 * scaledY2 + scaledZ1 * scaledZ2;
+      final double dotV2V2 = scaledX2 * scaledX2 + scaledY2 * scaledY2 + scaledZ2 * scaledZ2;
 
+      if (dotV2V2 == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
+
+      // Compute rho and round to 8 bits
+      double rho = dotV1V2 / dotV2V2;
+      rho = Math.rint(rho * 256.0) / 256.0;
+
+      // Compute v3 = v1 - rho * v2
+      final double scaledX3 = scaledX1 - rho * scaledX2;
+      final double scaledY3 = scaledY1 - rho * scaledY2;
+      final double scaledZ3 = scaledZ1 - rho * scaledZ2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product of v3 and v2
+      final double crossX = scaledY3 * scaledZ2 - scaledZ3 * scaledY2;
+      final double crossY = scaledZ3 * scaledX2 - scaledX3 * scaledZ2;
+      final double crossZ = scaledX3 * scaledY2 - scaledY3 * scaledX2;
+
+      // Apply inverse scaling
+      final double invScale = 1.0 / (s1 * s2);
+      return new Vector3D(crossX * invScale, crossY * invScale, crossZ * invScale);
+  }
 
+  /** Compute scaling factor to avoid overflow/underflow. */
+  private static double computeScaleFactor(final Vector3D v) {
+      final double xAbs = Math.abs(v.x);
+      final double yAbs = Math.abs(v.y);
+      final double zAbs = Math.abs(v.z);
+      final int expX = xAbs == 0 ? Integer.MIN_VALUE : Math.getExponent(xAbs);
+      final int expY = yAbs == 0 ? Integer.MIN_VALUE : Math.getExponent(yAbs);
+      final int expZ = zAbs == 0 ? Integer.MIN_VALUE : Math.getExponent(zAbs);
+      final int maxExp = Math.max(expX, Math.max(expY, expZ));
+      return maxExp > Integer.MIN_VALUE ? Math.scalb(1.0, -maxExp) : 1.0;
   }
\ No newline at end of file
