diff --git a/tmp/8afcaf94-6df9-4c25-9afb-0b1362fced54_buggy.java b/tmp/5814cb76-d518-4f91-9fa3-97f6d2109086_fixed.java
index 1478ee1..513ade3 100644
--- a/tmp/8afcaf94-6df9-4c25-9afb-0b1362fced54_buggy.java
+++ b/tmp/5814cb76-d518-4f91-9fa3-97f6d2109086_fixed.java
@@ -1,24 +1,48 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Rescale vectors to prevent underflow/overflow
+      double maxExpV1 = Math.max(Math.max(Math.getExponent(v1.x), Math.getExponent(v1.y)), Math.getExponent(v1.z));
+      double scale1 = Math.scalb(1.0, -maxExpV1);
+      Vector3D v1Scaled = new Vector3D(v1.x * scale1, v1.y * scale1, v1.z * scale1);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      double maxExpV2 = Math.max(Math.max(Math.getExponent(v2.x), Math.getExponent(v2.y)), Math.getExponent(v2.z));
+      double scale2 = Math.scalb(1.0, -maxExpV2);
+      Vector3D v2Scaled = new Vector3D(v2.x * scale2, v2.y * scale2, v2.z * scale2);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // Compute rho to reduce cancellation errors
+      double dotV1V2 = v1Scaled.x * v2Scaled.x + v1Scaled.y * v2Scaled.y + v1Scaled.z * v2Scaled.z;
+      double dotV2V2 = v2Scaled.x * v2Scaled.x + v2Scaled.y * v2Scaled.y + v2Scaled.z * v2Scaled.z;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      if (dotV2V2 == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
+
+      double rho = dotV1V2 / dotV2V2;
 
+      // Compute v3 = v1Scaled - rho * v2Scaled
+      Vector3D v3Scaled = new Vector3D(
+          v1Scaled.x - rho * v2Scaled.x,
+          v1Scaled.y - rho * v2Scaled.y,
+          v1Scaled.z - rho * v2Scaled.z
+      );
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product of v3Scaled and v2Scaled
+      Vector3D crossScaled = new Vector3D(
+          v3Scaled.y * v2Scaled.z - v3Scaled.z * v2Scaled.y,
+          v3Scaled.z * v2Scaled.x - v3Scaled.x * v2Scaled.z,
+          v3Scaled.x * v2Scaled.y - v3Scaled.y * v2Scaled.x
+      );
 
+      // Rescale the result back to original scale
+      double inverseScale = 1.0 / (scale1 * scale2);
+      return new Vector3D(
+          crossScaled.x * inverseScale,
+          crossScaled.y * inverseScale,
+          crossScaled.z * inverseScale
+      );
   }
\ No newline at end of file
