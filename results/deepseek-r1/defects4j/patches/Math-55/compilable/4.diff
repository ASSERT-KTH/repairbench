diff --git a/tmp/d8d88d96-14b6-4f6d-87ae-8394be5fbc9a_buggy.java b/tmp/09f839be-c893-4930-8b85-b5e0ef994171_fixed.java
index 1478ee1..9eb157a 100644
--- a/tmp/d8d88d96-14b6-4f6d-87ae-8394be5fbc9a_buggy.java
+++ b/tmp/09f839be-c893-4930-8b85-b5e0ef994171_fixed.java
@@ -1,24 +1,54 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Rescale vectors to avoid overflow/underflow
+      double max = Math.max(Math.abs(v1.x), Math.abs(v1.y));
+      max = Math.max(max, Math.abs(v1.z));
+      max = Math.max(max, Math.abs(v2.x));
+      max = Math.max(max, Math.abs(v2.y));
+      max = Math.max(max, Math.abs(v2.z));
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      if (max == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
+
+      int exponent = Math.getExponent(max);
+      double scale = Math.scalb(1.0, -exponent);
+
+      // Scale the vectors
+      double v1x = v1.x * scale;
+      double v1y = v1.y * scale;
+      double v1z = v1.z * scale;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      double v2x = v2.x * scale;
+      double v2y = v2.y * scale;
+      double v2z = v2.z * scale;
+
+      // Compute dot products
+      double dotV1V2 = v1x * v2x + v1y * v2y + v1z * v2z;
+      double dotV2V2 = v2x * v2x + v2y * v2y + v2z * v2z;
+
+      if (dotV2V2 == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = dotV1V2 / dotV2V2;
 
+      // Compute v3 = v1 - rho * v2
+      double v3x = v1x - rho * v2x;
+      double v3y = v1y - rho * v2y;
+      double v3z = v1z - rho * v2z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product of v3 and v2
+      double crossX = v3y * v2z - v3z * v2y;
+      double crossY = v3z * v2x - v3x * v2z;
+      double crossZ = v3x * v2y - v3y * v2x;
 
+      // Rescale back the result
+      double rescale = Math.scalb(1.0, 2 * exponent);
+      return new Vector3D(crossX * rescale, crossY * rescale, crossZ * rescale);
   }
\ No newline at end of file
