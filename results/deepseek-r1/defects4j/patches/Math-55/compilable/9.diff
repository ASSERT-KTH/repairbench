diff --git a/tmp/0c6ea58d-8a6c-4075-940a-e79007a67fbc_buggy.java b/tmp/51f1b688-5e36-4b58-9efd-1c92f9079f79_fixed.java
index 1478ee1..86fdb40 100644
--- a/tmp/0c6ea58d-8a6c-4075-940a-e79007a67fbc_buggy.java
+++ b/tmp/51f1b688-5e36-4b58-9efd-1c92f9079f79_fixed.java
@@ -1,24 +1,32 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+      // Compute the dot product of v2 with itself to check for zero vector
+      final double dotV2V2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+      if (dotV2V2 == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
 
+      // Compute the dot product of v1 and v2
+      final double dotV1V2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      // Compute rho as the ratio of the dot products
+      final double rho = dotV1V2 / dotV2V2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute the adjusted vector v3 = v1 - rho * v2
+      final Vector3D v3 = new Vector3D(
+          v1.x - rho * v2.x,
+          v1.y - rho * v2.y,
+          v1.z - rho * v2.z
+      );
 
+      // Compute the cross product of v3 and v2
+      return new Vector3D(
+          v3.y * v2.z - v3.z * v2.y,
+          v3.z * v2.x - v3.x * v2.z,
+          v3.x * v2.y - v3.y * v2.x
+      );
   }
\ No newline at end of file
