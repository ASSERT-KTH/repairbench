diff --git a/tmp/02f282b5-4664-4615-b338-f860e5bd7517_buggy.java b/tmp/2d755421-0e9b-466d-bd2b-9daf93d28f8f_fixed.java
index 1478ee1..642bd03 100644
--- a/tmp/02f282b5-4664-4615-b338-f860e5bd7517_buggy.java
+++ b/tmp/2d755421-0e9b-466d-bd2b-9daf93d28f8f_fixed.java
@@ -1,24 +1,31 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute rho as an 8-bit approximation of (v1 . v2) / (v2 . v2)
+      double rhoNumerator = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+      double rhoDenominator = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      if (rhoDenominator == 0.0) {
+          return new Vector3D(0, 0, 0);
+      }
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = rhoNumerator / rhoDenominator;
+      // Round to 8 bits (as 1/256 is 8-bit fraction)
+      rho = Math.rint(rho * 256) / 256.0;
 
+      // Compute v3 = v1 - rho * v2
+      double v3x = v1.x - rho * v2.x;
+      double v3y = v1.y - rho * v2.y;
+      double v3z = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product of v3 and v2
+      double cx = v3y * v2.z - v3z * v2.y;
+      double cy = v3z * v2.x - v3x * v2.z;
+      double cz = v3x * v2.y - v3y * v2.x;
 
+      return new Vector3D(cx, cy, cz);
   }
\ No newline at end of file
