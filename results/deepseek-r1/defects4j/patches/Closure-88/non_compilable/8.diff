diff --git a/tmp/e3e635f5-b541-4020-94de-2eda88c0b988_buggy.java b/tmp/e9ae33a5-ad6e-47ce-b04b-ea61a6edf590_fixed.java
index 9353941..774c4f3 100644
--- a/tmp/e3e635f5-b541-4020-94de-2eda88c0b988_buggy.java
+++ b/tmp/e9ae33a5-ad6e-47ce-b04b-ea61a6edf590_fixed.java
@@ -1,30 +1,48 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Check if the current node is an assignment to process children in reverse order
+    if (NodeUtil.isAssignment(n)) {
+      // Process right-hand side first, then left-hand side
+      List<Node> children = new ArrayList<>();
+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+        children.add(child);
+      }
+      Collections.reverse(children);
+      for (Node child : children) {
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+          VariableLiveness state = isVariableReadBeforeKill(child, variable);
+          if (state != VariableLiveness.MAYBE_LIVE) {
+            return state;
+          }
+        }
+      }
+    } else {
+      // Process children in their natural order for non-assignment nodes
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
