diff --git a/tmp/2eba3563-c79c-49fa-9311-a75fe3367d26_buggy.java b/tmp/a314e1a4-4569-4bc7-8b08-36b023cbf732_fixed.java
index 9353941..e3ce303 100644
--- a/tmp/2eba3563-c79c-49fa-9311-a75fe3367d26_buggy.java
+++ b/tmp/a314e1a4-4569-4bc7-8b08-36b023cbf732_fixed.java
@@ -1,30 +1,44 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
+    // Check if the node is an assignment and process RHS before LHS
+    if (n.isAssign()) {
+      Node rhs = n.getLastChild(); // ASSIGN node's children are lhs (first) and rhs (last)
+      Node lhs = n.getFirstChild();
+      
+      if (rhs != null && !ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+      if (lhs != null && !ControlFlowGraph.isEnteringNewCfgNode(lhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(lhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+    } else {
       // Expressions are evaluated left-right, depth first.
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
