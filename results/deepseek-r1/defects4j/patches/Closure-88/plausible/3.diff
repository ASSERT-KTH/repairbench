diff --git a/tmp/bc228bc2-2a2c-4544-8de6-ab4bc294a9f9_buggy.java b/tmp/15819a77-bfcf-4e8d-b69c-2babc716a87c_fixed.java
index 9353941..e9fba45 100644
--- a/tmp/bc228bc2-2a2c-4544-8de6-ab4bc294a9f9_buggy.java
+++ b/tmp/15819a77-bfcf-4e8d-b69c-2babc716a87c_fixed.java
@@ -1,30 +1,54 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // Handle assignment nodes by processing RHS before LHS
+    if (NodeUtil.isAssignmentOp(n)) {
+      Node rhs = n.getLastChild();
+      Node lhs = n.getFirstChild();
+
+      // Process RHS first
+      if (rhs != null && !ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+
+      // Process LHS next
+      if (lhs != null && !ControlFlowGraph.isEnteringNewCfgNode(lhs)) {
+        VariableLiveness state = isVariableReadBeforeKill(lhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
+
+      return VariableLiveness.MAYBE_LIVE;
+    } else {
+      // Process other nodes in normal order
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
       return VariableLiveness.MAYBE_LIVE;
     }
+  }
\ No newline at end of file
