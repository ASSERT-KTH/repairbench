diff --git a/tmp/a48da9b8-3bc3-4d68-aca0-d6cd419cc858_buggy.java b/tmp/56572b73-0fe3-4017-84ac-6081e6ad5050_fixed.java
index 9353941..02c2f79 100644
--- a/tmp/a48da9b8-3bc3-4d68-aca0-d6cd419cc858_buggy.java
+++ b/tmp/56572b73-0fe3-4017-84ac-6081e6ad5050_fixed.java
@@ -1,30 +1,49 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
+    // For assignment nodes, evaluate RHS before LHS to respect evaluation order.
+    if (NodeUtil.isAssignmentOp(n)) {
+      Node rhs = n.getLastChild();
+      if (rhs != null && !ControlFlowGraph.isEnteringNewCfgNode(rhs)) {
+        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+        if (rhsState != VariableLiveness.MAYBE_LIVE) {
+          return rhsState;
+        }
+      }
+      Node lhs = n.getFirstChild();
+      if (lhs != null && !ControlFlowGraph.isEnteringNewCfgNode(lhs)) {
+        VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);
+        if (lhsState != VariableLiveness.MAYBE_LIVE) {
+          return lhsState;
+        }
+      }
+    } else {
+      // Process children in their natural order for non-assignment nodes.
       for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
           VariableLiveness state = isVariableReadBeforeKill(child, variable);
           if (state != VariableLiveness.MAYBE_LIVE) {
             return state;
           }
         }
       }
+    }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
