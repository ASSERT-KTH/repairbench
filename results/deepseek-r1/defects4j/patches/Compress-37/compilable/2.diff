diff --git a/tmp/f4f28806-8852-4e3e-9ba1-172cd7d72b29_buggy.java b/tmp/e1247ad2-48bb-4b37-a153-edab647ce665_fixed.java
index 4b7e1e4..7e660b8 100644
--- a/tmp/f4f28806-8852-4e3e-9ba1-172cd7d72b29_buggy.java
+++ b/tmp/e1247ad2-48bb-4b37-a153-edab647ce665_fixed.java
@@ -1,52 +1,80 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
+        while (true) {
             int ch;
             int len = 0;
             int read = 0;
+            boolean validLine = true;
+
+            // Parse the length part
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
-                    // Get keyword
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    // Invalid character in length, skip this line
+                    validLine = false;
+                    // Read until newline or EOF
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
+                    }
+                    break;
+                }
+                len = len * 10 + (ch - '0');
+            }
+
+            if (!validLine) {
+                continue; // Skip this invalid line and move to next
+            }
+
+            if (ch == -1) { // EOF
+                break;
+            }
+
+            // Process keyword and value
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+            boolean keywordProcessed = false;
             while ((ch = i.read()) != -1) {
                 read++;
-                        if (ch == '='){ // end of keyword
+                if (ch == '=') { // End of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+
+                    if (restLen < 0) {
+                        // Invalid remaining length, skip this line
+                        validLine = false;
+                        // Read until newline or EOF
+                        while (ch != -1 && ch != '\n') {
+                            ch = i.read();
+                        }
+                        break;
+                    }
+
+                    if (restLen == 1) { // Only newline left
                         headers.remove(keyword);
                     } else {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                            throw new IOException("Failed to read Paxheader. Expected "
+                                                  + restLen + " bytes, read " + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        // Drop trailing newline
+                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
+                    keywordProcessed = true;
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+
+            if (!validLine || !keywordProcessed) {
+                continue; // Skip processing this line further
             }
         }
         return headers;
     }
\ No newline at end of file
