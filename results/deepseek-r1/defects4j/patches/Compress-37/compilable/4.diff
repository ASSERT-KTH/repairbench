diff --git a/tmp/22b29c26-9d81-4db2-996c-18ee28c9d4ed_buggy.java b/tmp/f004e7d9-d563-4e0d-92d2-023e801453a3_fixed.java
index 4b7e1e4..4b655ea 100644
--- a/tmp/22b29c26-9d81-4db2-996c-18ee28c9d4ed_buggy.java
+++ b/tmp/f004e7d9-d563-4e0d-92d2-023e801453a3_fixed.java
@@ -1,52 +1,63 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
+                    // Check if the parsed length is valid
+                    if (len <= 0 || len < read) {
+                        // Invalid length, skip the rest of the line
+                        while (ch != '\n' && ch != -1) {
+                            ch = i.read();
+                        }
+                        break; // Exit this inner loop to proceed to next header
+                    }
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
+                                if (restLen < 0) {
+                                    throw new IOException("Invalid length for Paxheader. "
+                                        + "Length: " + len + ", Read: " + read);
+                                }
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
                 len *= 10;
                 len += ch - '0';
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
