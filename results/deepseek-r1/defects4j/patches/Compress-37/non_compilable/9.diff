diff --git a/tmp/e24dbbf8-6be8-48d1-afa8-d1172a14ecd9_buggy.java b/tmp/4acf088c-1bf7-440a-9925-5d4bc94dcfed_fixed.java
index 4b7e1e4..2779346 100644
--- a/tmp/e24dbbf8-6be8-48d1-afa8-d1172a14ecd9_buggy.java
+++ b/tmp/4acf088c-1bf7-440a-9925-5d4bc94dcfed_fixed.java
@@ -1,52 +1,77 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
-        while(true){ // get length
+        while(true) { // Process each line
             int ch;
             int len = 0;
             int read = 0;
+            // Read length until space
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
-                    // Get keyword
+                    break;
+                }
+                if (ch < '0' || ch > '9') { // Check for non-digit characters
+                    // Invalid length, skip the line
+                    len = -1; // Mark as invalid
+                    break;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+            if (ch == -1) { // EOF
+                break;
+            }
+            if (len < 0) { // Non-digit encountered in length
+                // Skip to end of line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                continue;
+            }
+            final int restLen = len - read;
+            if (restLen < 0) { // Invalid remaining length
+                // Skip to end of line
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                continue;
+            }
+            if (restLen == 0) { // No data after length and space
+                continue;
+            }
+            // Read keyword and value
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
+            boolean validKeyword = true;
+            while (restLen > 0 && (ch = i.read()) != -1) {
+                restLen--;
+                if (ch == '=') {
                     final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (restLen == 1) { // Only newline remains
                         headers.remove(keyword);
                     } else {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                            throw new IOException("Failed to read Paxheader. Expected " + restLen + " bytes, read " + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
+                    validKeyword = true;
                     break;
                 }
                 coll.write((byte) ch);
+                validKeyword = false;
             }
-                    break; // Processed single header
+            if (!validKeyword) { // No '=' found in keyword
+                // Skip remaining bytes if any
+                final int remaining = restLen - coll.size();
+                if (remaining > 0) {
+                    IOUtils.skipFully(i, remaining);
                 }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
             }
         }
         return headers;
     }
\ No newline at end of file
