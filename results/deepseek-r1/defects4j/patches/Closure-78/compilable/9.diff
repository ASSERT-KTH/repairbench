diff --git a/tmp/f83d8130-27aa-48fc-a91e-aadcfdbc74a2_buggy.java b/tmp/6895f9f8-d988-4993-9b03-dfa7d1637071_fixed.java
index 27e0871..3fce97f 100644
--- a/tmp/f83d8130-27aa-48fc-a91e-aadcfdbc74a2_buggy.java
+++ b/tmp/6895f9f8-d988-4993-9b03-dfa7d1637071_fixed.java
@@ -1,86 +1,82 @@
   /**
    * Try to fold arithmetic binary operators
    */
   private Node performArithmeticOp(int opType, Node left, Node right) {
     // Unlike other operations, ADD operands are not always converted
     // to Number.
     if (opType == Token.ADD
         && (NodeUtil.mayBeString(left, false)
             || NodeUtil.mayBeString(right, false))) {
       return null;
     }
 
     double result;
 
     // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN
     // to zero so this is a little akward here.
 
     Double lValObj = NodeUtil.getNumberValue(left);
     if (lValObj == null) {
       return null;
     }
     Double rValObj = NodeUtil.getNumberValue(right);
     if (rValObj == null) {
       return null;
     }
 
     double lval = lValObj;
     double rval = rValObj;
 
     switch (opType) {
       case Token.BITAND:
         result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);
         break;
       case Token.BITOR:
         result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);
         break;
       case Token.BITXOR:
         result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);
         break;
       case Token.ADD:
         result = lval + rval;
         break;
       case Token.SUB:
         result = lval - rval;
         break;
       case Token.MUL:
         result = lval * rval;
         break;
       case Token.MOD:
-        if (rval == 0) {
-          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
-          return null;
-        }
         result = lval % rval;
         break;
       case Token.DIV:
         if (rval == 0) {
           error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
           return null;
         }
         result = lval / rval;
         break;
       default:
         throw new Error("Unexpected arithmetic operator");
     }
 
-    // TODO(johnlenz): consider removing the result length check.
-    // length of the left and right value plus 1 byte for the operator.
-    if (String.valueOf(result).length() <=
-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&
+    // Check if the result is a finite number and can be folded without exceeding length constraints
+    boolean isResultFinite = Double.isFinite(result);
+    String resultStr = String.valueOf(result);
+    int leftLength = String.valueOf(lval).length();
+    int rightLength = String.valueOf(rval).length();
 
-        // Do not try to fold arithmetic for numbers > 2^53. After that
-        // point, fixed-point math starts to break down and become inaccurate.
+    if (isResultFinite &&
+        resultStr.length() <= leftLength + rightLength + 1 &&
         Math.abs(result) <= MAX_FOLD_NUMBER) {
-      Node newNumber = Node.newNumber(result);
-      return newNumber;
+      return Node.newNumber(result);
     } else if (Double.isNaN(result)) {
-      return Node.newString(Token.NAME, "NaN");
-    } else if (result == Double.POSITIVE_INFINITY) {
-      return Node.newString(Token.NAME, "Infinity");
-    } else if (result == Double.NEGATIVE_INFINITY) {
-      return new Node(Token.NEG, Node.newString(Token.NAME, "Infinity"));
+      // Do not fold NaN values
+      return null;
+    } else if (!isResultFinite) {
+      // Do not fold infinities
+      return null;
     }
 
     return null;
   }
\ No newline at end of file
