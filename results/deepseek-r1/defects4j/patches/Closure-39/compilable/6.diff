diff --git a/tmp/444e141a-2e37-41b3-82c8-92ef895ed924_buggy.java b/tmp/6c5fdbb8-b958-4fd9-bc24-e155b3bbd4a5_fixed.java
index e4d90e7..5563b28 100644
--- a/tmp/444e141a-2e37-41b3-82c8-92ef895ed924_buggy.java
+++ b/tmp/6c5fdbb8-b958-4fd9-bc24-e155b3bbd4a5_fixed.java
@@ -1,45 +1,86 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
+    } else if (forAnnotations) {
+      // Collect all properties for annotation string, no truncation
+      Set<String> propertyNames = Sets.newTreeSet();
+      for (ObjectType current = this;
+           current != null && !current.isNativeObjectType();
+           current = current.getImplicitPrototype()) {
+        propertyNames.addAll(current.getOwnPropertyNames());
+      }
+
+      StringBuilder sb = new StringBuilder();
+      sb.append("{");
+
+      boolean first = true;
+      for (String property : propertyNames) {
+        if (!first) {
+          sb.append(", ");
+        }
+        first = false;
+        sb.append(property);
+        sb.append(": ");
+        sb.append(getPropertyType(property).toStringHelper(true));
+      }
+
+      sb.append("}");
+      return sb.toString();
     } else if (prettyPrint) {
-      // Don't pretty print recursively.
+      // Don't pretty print recursively
+      boolean originalPrettyPrint = prettyPrint;
       prettyPrint = false;
 
-      // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
+      int max = MAX_PRETTY_PRINTED_PROPERTIES;
+
+      // Collect up to max + 1 properties to determine if there are more
       for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           current != null && !current.isNativeObjectType() && propertyNames.size() <= max;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
+      boolean hasMore = propertyNames.size() > max;
+      // Truncate to max properties
+      Set<String> truncated = Sets.newTreeSet();
+      int count = 0;
+      for (String prop : propertyNames) {
+        if (count >= max) {
+          break;
+        }
+        truncated.add(prop);
+        count++;
+      }
+      propertyNames = truncated;
+
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
-
         sb.append(property);
         sb.append(": ");
         sb.append(getPropertyType(property).toString());
+        i++;
+      }
 
-        ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
+      if (hasMore) {
+        if (i > 0) {
+          sb.append(", ");
         }
+        sb.append("...");
       }
 
       sb.append("}");
 
-      prettyPrint = true;
+      prettyPrint = originalPrettyPrint;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
