diff --git a/tmp/73d95484-d3ee-4d5e-ace8-4431889a96dc_buggy.java b/tmp/77564acf-8379-4b64-8c0a-20f756ea0f98_fixed.java
index e4d90e7..cf4dc27 100644
--- a/tmp/73d95484-d3ee-4d5e-ace8-4431889a96dc_buggy.java
+++ b/tmp/77564acf-8379-4b64-8c0a-20f756ea0f98_fixed.java
@@ -1,45 +1,57 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
-      // Don't pretty print recursively.
+    } else if (forAnnotations || prettyPrint) {
+      // Save original prettyPrint state to restore later
+      boolean originalPrettyPrint = prettyPrint;
+      if (!forAnnotations) {
+        // Disable prettyPrint to prevent recursion for non-annotation cases
         prettyPrint = false;
+      }
 
-      // Use a tree set so that the properties are sorted.
+      // Use a tree set for sorted properties
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+           (forAnnotations || propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES);
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        // Use appropriate string representation based on forAnnotations
+        sb.append(forAnnotations ?
+            getPropertyType(property).toAnnotationString() :
+            getPropertyType(property).toString());
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // Add ellipsis if exceeding max properties for non-annotation cases
+        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
-      prettyPrint = true;
+      // Restore original prettyPrint state
+      if (!forAnnotations) {
+        prettyPrint = originalPrettyPrint;
+      }
+
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
