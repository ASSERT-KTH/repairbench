diff --git a/tmp/6b7ac245-f18e-484d-99c3-db5ccaf5bfe2_buggy.java b/tmp/f89acb89-86ba-4bf7-975b-17d01d90cc9c_fixed.java
index cd412d2..5310881 100644
--- a/tmp/6b7ac245-f18e-484d-99c3-db5ccaf5bfe2_buggy.java
+++ b/tmp/f89acb89-86ba-4bf7-975b-17d01d90cc9c_fixed.java
@@ -1,76 +1,92 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+            int tIndex = dateStr.indexOf('T');
+            int offsetIndex = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            if (tIndex != -1 && offsetIndex > tIndex) {
+                String timePart = dateStr.substring(tIndex + 1, offsetIndex);
+                int colonCount = 0;
+                for (int i = 0; i < timePart.length(); i++) {
+                    if (timePart.charAt(i) == ':') {
+                        colonCount++;
+                    }
+                }
+                if (colonCount == 1) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    sb.insert(offsetIndex, ":00");
+                    dateStr = sb.toString();
+                    len = dateStr.length();
+                    offsetIndex += 3;
+                }
+
+                int timeDotIndex = dateStr.lastIndexOf('.', offsetIndex);
+                if (timeDotIndex != -1 && timeDotIndex > tIndex) {
+                    int millisEnd = offsetIndex;
+                    String millisPart = dateStr.substring(timeDotIndex + 1, millisEnd);
+                    int millisLength = millisPart.length();
+                    if (millisLength < 3) {
+                        StringBuilder sb = new StringBuilder(dateStr);
+                        int zerosNeeded = 3 - millisLength;
+                        for (int i = 0; i < zerosNeeded; i++) {
+                            sb.insert(millisEnd, '0');
+                        }
                         dateStr = sb.toString();
+                        len = dateStr.length();
+                    }
+                } else {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(offsetIndex, ".000");
+                    dateStr = sb.toString();
+                    len = dateStr.length();
+                }
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
