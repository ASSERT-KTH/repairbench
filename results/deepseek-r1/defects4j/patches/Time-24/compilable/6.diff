diff --git a/tmp/42b8aa19-8529-4cc3-a33e-1fe24656170b_buggy.java b/tmp/900d7b40-e0b8-49c2-94d1-443f750cd903_fixed.java
index 99d6a44..e2379a9 100644
--- a/tmp/42b8aa19-8529-4cc3-a33e-1fe24656170b_buggy.java
+++ b/tmp/900d7b40-e0b8-49c2-94d1-443f750cd903_fixed.java
@@ -1,58 +1,69 @@
-    /**
-     * Computes the parsed datetime by setting the saved fields.
-     * This method is idempotent, but it is not thread-safe.
-     *
-     * @param resetFields false by default, but when true, unsaved field values are cleared
-     * @param text optional text being parsed, to be included in any error message
-     * @return milliseconds since 1970-01-01T00:00:00Z
-     * @throws IllegalArgumentException if any field is out of range
-     * @since 1.3
-     */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
-        sort(savedFields, count);
+    // Custom sort to handle week-based fields before months
+    java.util.Arrays.sort(savedFields, 0, count, new java.util.Comparator<SavedField>() {
+        private boolean isWeekBased(DateTimeFieldType type) {
+            return type == DateTimeFieldType.weekOfWeekyear() ||
+                   type == DateTimeFieldType.weekyear() ||
+                   type == DateTimeFieldType.weekyearOfCentury();
+        }
+
+        public int compare(SavedField a, SavedField b) {
+            DateTimeFieldType aType = a.iField.getType();
+            DateTimeFieldType bType = b.iField.getType();
+            boolean aWeek = isWeekBased(aType);
+            boolean bWeek = isWeekBased(bType);
+            boolean aMonth = aType == DateTimeFieldType.monthOfYear();
+            boolean bMonth = bType == DateTimeFieldType.monthOfYear();
+
+            if (aWeek && bMonth) return -1;
+            if (bWeek && aMonth) return 1;
+
+            int result = compareReverse(a.iField.getDurationField(), b.iField.getDurationField());
+            return result;
+        }
+    });
+
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
-                String message =
-                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+            String message = "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
\ No newline at end of file
