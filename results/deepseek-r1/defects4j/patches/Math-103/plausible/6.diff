diff --git a/tmp/87d18feb-d301-49e3-b322-f3e40d4c398b_buggy.java b/tmp/cc8a1eb3-9a1a-478c-8360-c2f7daf5a04c_fixed.java
index 6cfa79b..c9de58f 100644
--- a/tmp/87d18feb-d301-49e3-b322-f3e40d4c398b_buggy.java
+++ b/tmp/cc8a1eb3-9a1a-478c-8360-c2f7daf5a04c_fixed.java
@@ -1,12 +1,26 @@
     /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+     * @return CDF evaluated at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+        double adjustedZ = (x - mean) / (standardDeviation * Math.sqrt(2.0));
+        if (adjustedZ >= 6.0) { // Handle large positive values
+            return 1.0;
+        } else if (adjustedZ <= -6.0) { // Handle large negative values
+            return 0.0;
+        }
+        try {
+            return 0.5 * (1.0 + Erf.erf(adjustedZ));
+        } catch (MathException e) {
+            double z = (x - mean) / standardDeviation;
+            if (Math.abs(z) > 20.0) { // Original condition for 20 SDs
+                return (z < 0) ? 0.0 : 1.0;
+            } else {
+                throw e;
+            }
+        }
     }
\ No newline at end of file
