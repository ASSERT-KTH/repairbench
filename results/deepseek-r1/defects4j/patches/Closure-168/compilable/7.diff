diff --git a/tmp/ad9d13bb-294e-4e91-9545-8c0fbe64a9f8_buggy.java b/tmp/36c9da7b-3e98-4793-98c5-0a3d0703de51_fixed.java
index b12de99..09d993b 100644
--- a/tmp/ad9d13bb-294e-4e91-9545-8c0fbe64a9f8_buggy.java
+++ b/tmp/36c9da7b-3e98-4793-98c5-0a3d0703de51_fixed.java
@@ -1,52 +1,52 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
-        // The first-order function analyzer looks at two types of variables:
-        //
-        // 1) Local variables that are assigned in inner scopes ("escaped vars")
-        //
-        // 2) Local variables that are assigned more than once.
-        //
-        // We treat all global variables as escaped by default, so there's
-        // no reason to do this extra computation for them.
         return;
       }
 
-      if (n.isName() && NodeUtil.isLValue(n) &&
-          // Be careful of bleeding functions, which create variables
-          // in the inner scope, not the scope where the name appears.
-          !NodeUtil.isBleedingFunctionName(n)) {
+      if (n.isName()) {
+        if (NodeUtil.isLValue(n) && !NodeUtil.isBleedingFunctionName(n)) {
           String name = n.getString();
           Scope scope = t.getScope();
           Var var = scope.getVar(name);
           if (var != null) {
             Scope ownerScope = var.getScope();
             if (ownerScope.isLocal()) {
               data.get(ownerScope.getRootNode()).recordAssignedName(name);
             }
-
             if (scope != ownerScope && ownerScope.isLocal()) {
               data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
             }
           }
+        } else {
+          String name = n.getString();
+          Scope scope = t.getScope();
+          Var var = scope.getVar(name);
+          if (var != null) {
+            Scope ownerScope = var.getScope();
+            if (ownerScope.isLocal() && scope != ownerScope) {
+              data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
+          }
+        }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
