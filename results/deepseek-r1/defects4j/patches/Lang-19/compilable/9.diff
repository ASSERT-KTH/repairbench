diff --git a/tmp/af120fef-d037-4511-8f74-8860847ec40a_buggy.java b/tmp/dd9c2b19-95be-40dd-b4cd-4f01ee5e786b_fixed.java
index 72a422c..2d6f73a 100644
--- a/tmp/af120fef-d037-4511-8f74-8860847ec40a_buggy.java
+++ b/tmp/dd9c2b19-95be-40dd-b4cd-4f01ee5e786b_fixed.java
@@ -1,51 +1,60 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
             try {
+                int entityValue;
+                String number = input.subSequence(start, end).toString();
+                if (number.isEmpty()) {
+                    return 0;
+                }
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                    entityValue = Integer.parseInt(number, 10);
                 }
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
+                int length = end - start + 2; // &#... 
+                length += isHex ? 1 : 0; // x/X
+                if (end < seqEnd) {
+                    length++; // semicolon
+                }
+                return length;
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } catch (NumberFormatException nfe) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
