diff --git a/tmp/6cc1d61d-c1ae-44ae-a914-c72edd456ae4_buggy.java b/tmp/a93f43b3-09c6-4302-b89a-f0ca19e033eb_fixed.java
index 72a422c..22838be 100644
--- a/tmp/6cc1d61d-c1ae-44ae-a914-c72edd456ae4_buggy.java
+++ b/tmp/a93f43b3-09c6-4302-b89a-f0ca19e033eb_fixed.java
@@ -1,51 +1,62 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            if (start >= seqEnd) {
+                return 0;
+            }
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
-
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                if (c == ';') {
+                    break;
+                }
+                if (isHex) {
+                    if (Character.digit(c, 16) == -1) {
+                        break;
+                    }
+                } else {
+                    if (!Character.isDigit(c)) {
+                        break;
+                    }
+                }
                 end++;
             }
-
             int entityValue;
             try {
+                String number = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(number, 10);
                 }
             } catch (NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
-
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            boolean semicolonFound = (end < seqEnd && input.charAt(end) == ';');
+            int semicolonLength = semicolonFound ? 1 : 0;
+            return 2 + (end - start) + (isHex ? 1 : 0) + semicolonLength;
         }
         return 0;
     }
\ No newline at end of file
