diff --git a/tmp/91e0ddb8-e736-40bc-8527-4d73267f7bcd_buggy.java b/tmp/ad0fb35a-9f56-4387-b702-0ebe59440f85_fixed.java
index 72a422c..ad96ff8 100644
--- a/tmp/91e0ddb8-e736-40bc-8527-4d73267f7bcd_buggy.java
+++ b/tmp/ad0fb35a-9f56-4387-b702-0ebe59440f85_fixed.java
@@ -1,51 +1,71 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
 
-            int entityValue;
-            try {
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                while (end < seqEnd) {
+                    char c = input.charAt(end);
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
+                        end++;
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                        break;
                     }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                }
+            } else {
+                while (end < seqEnd) {
+                    char c = input.charAt(end);
+                    if (c >= '0' && c <= '9') {
+                        end++;
+                    } else {
+                        break;
+                    }
+                }
+            }
+
+            int digitsEnd = end;
+
+            if (digitsEnd < seqEnd && input.charAt(digitsEnd) == ';') {
+                end++;
+            }
+
+            if (digitsEnd == start) {
                 return 0;
             }
 
+            try {
+                String number = input.subSequence(start, digitsEnd).toString();
+                int entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
+
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return 2 + (digitsEnd - start) + (isHex ? 1 : 0) + (end - digitsEnd);
+            } catch (NumberFormatException e) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
