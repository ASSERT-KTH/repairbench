diff --git a/tmp/b7f54b49-2d32-44f5-a3ab-0182c9a49740_buggy.java b/tmp/1b288876-fb2e-42e5-8b8a-c96dfbcd4d0e_fixed.java
index 72a422c..bf29d28 100644
--- a/tmp/b7f54b49-2d32-44f5-a3ab-0182c9a49740_buggy.java
+++ b/tmp/1b288876-fb2e-42e5-8b8a-c96dfbcd4d0e_fixed.java
@@ -1,51 +1,64 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
+            if (start >= seqEnd) {
+                return 0;
+            }
             boolean isHex = false;
-
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if (start >= seqEnd) {
+                    return 0;
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
-                end++;
-            }
-
-            int entityValue;
-            try {
+            while (end < seqEnd) {
+                char c = input.charAt(end);
+                boolean isDigit;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    isDigit = Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    isDigit = Character.isDigit(c);
                 }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                if (!isDigit) {
+                    break;
+                }
+                end++;
+            }
+
+            int originalEnd = end;
+            if (end < seqEnd && input.charAt(end) == ';') {
+                end++;
+            }
+
+            if (originalEnd == start) {
                 return 0;
             }
 
+            try {
+                String numberStr = input.subSequence(start, originalEnd).toString();
+                int entityValue = isHex ? Integer.parseInt(numberStr, 16) : Integer.parseInt(numberStr, 10);
+
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                return 2 + (originalEnd - start) + (isHex ? 1 : 0) + (end - originalEnd);
+            } catch (NumberFormatException nfe) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
