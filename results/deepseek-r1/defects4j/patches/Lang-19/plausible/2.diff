diff --git a/tmp/c07d5a8e-cf5d-433b-b834-713884843694_buggy.java b/tmp/7f66c676-6f9f-4c63-9604-e14b5e16deee_fixed.java
index 72a422c..6778a2a 100644
--- a/tmp/c07d5a8e-cf5d-433b-b834-713884843694_buggy.java
+++ b/tmp/7f66c676-6f9f-4c63-9604-e14b5e16deee_fixed.java
@@ -1,51 +1,82 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+        if (index < 0 || index >= seqEnd) {
+            return 0;
+        }
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                if (start >= seqEnd) {
+                    return 0;
+                }
+            }
+
+            int digitsEnd = start;
+            if (isHex) {
+                while (digitsEnd < seqEnd) {
+                    char c = input.charAt(digitsEnd);
+                    if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
+                        digitsEnd++;
+                    } else {
+                        break;
+                    }
+                }
+            } else {
+                while (digitsEnd < seqEnd) {
+                    char c = input.charAt(digitsEnd);
+                    if (Character.isDigit(c)) {
+                        digitsEnd++;
+                    } else {
+                        break;
+                    }
+                }
+            }
 
-                // Check there's more than just an x after the &#
+            if (digitsEnd == start) {
+                return 0;
             }
 
-            int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            boolean semicolonFound = false;
+            int end = digitsEnd;
+            if (end < seqEnd && input.charAt(end) == ';') {
                 end++;
+                semicolonFound = true;
             }
 
             int entityValue;
             try {
+                String number = input.subSequence(start, digitsEnd).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(number, 10);
                 }
             } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (isHex ? 1 : 0) + (digitsEnd - start) + (semicolonFound ? 1 : 0);
         }
         return 0;
     }
\ No newline at end of file
