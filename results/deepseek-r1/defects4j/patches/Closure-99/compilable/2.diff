diff --git a/tmp/f8b68fe5-e9e2-4202-849b-ba7393565161_buggy.java b/tmp/a6d16626-855c-481a-be0a-fe06ab7ad848_fixed.java
index 86553f4..16c2474 100644
--- a/tmp/f8b68fe5-e9e2-4202-849b-ba7393565161_buggy.java
+++ b/tmp/a6d16626-855c-481a-be0a-fe06ab7ad848_fixed.java
@@ -1,57 +1,69 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+      // or @override annotation, or are part of an interface.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.isInterface())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN)) {
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
       
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+        if (lhs.getType() == Token.GETPROP) {
+          Node current = lhs;
+          boolean hasPrototype = false;
+          while (current.getType() == Token.GETPROP) {
+            Node prop = current.getLastChild();
+            if (prop.getType() == Token.STRING && prop.getString().equals("prototype")) {
+              hasPrototype = true;
+              break;
+            }
+            current = current.getFirstChild();
+          }
+          if (hasPrototype) {
             return false;
           }
+        }
         if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
           return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
