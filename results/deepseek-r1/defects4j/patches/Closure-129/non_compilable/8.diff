diff --git a/tmp/b0c16f94-0ca6-4bb5-8173-73c1d1d43654_buggy.java b/tmp/3d16373d-d5b4-4823-a2f9-02a4212f8672_fixed.java
index e8705ac..2a553ff 100644
--- a/tmp/b0c16f94-0ca6-4bb5-8173-73c1d1d43654_buggy.java
+++ b/tmp/3d16373d-d5b4-4823-a2f9-02a4212f8672_fixed.java
@@ -1,24 +1,30 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Unwrap cast and parenthesized nodes for free call check
+      Node freeCallCheckFirst = first;
+      while (freeCallCheckFirst != null && 
+             (freeCallCheckFirst.isCast() || freeCallCheckFirst.isParenthesized())) {
+          freeCallCheckFirst = freeCallCheckFirst.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      if (freeCallCheckFirst == null || !NodeUtil.isGet(freeCallCheckFirst)) {
           n.putBooleanProp(Node.FREE_CALL, true);
       }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+      // Unwrap cast and parenthesized nodes for direct eval check
+      Node evalCheckFirst = first;
+      while (evalCheckFirst != null && 
+             (evalCheckFirst.isCast() || evalCheckFirst.isParenthesized())) {
+          evalCheckFirst = evalCheckFirst.getFirstChild();
+      }
+
+      if (evalCheckFirst != null && evalCheckFirst.isName() &&
+          "eval".equals(evalCheckFirst.getString())) {
+          evalCheckFirst.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
