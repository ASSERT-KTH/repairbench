diff --git a/tmp/e1a3b294-f063-4610-80ee-4e8e67ecc3c6_buggy.java b/tmp/67d8280d-7751-44d0-bfaa-48c7f0621d91_fixed.java
index e8705ac..8b00e6e 100644
--- a/tmp/e1a3b294-f063-4610-80ee-4e8e67ecc3c6_buggy.java
+++ b/tmp/67d8280d-7751-44d0-bfaa-48c7f0621d91_fixed.java
@@ -1,24 +1,21 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Skip over cast nodes to find the actual call target
+      while (first != null && NodeUtil.isCast(first)) {
+        first = first.getFirstChild();
+      }
 
-      if (!NodeUtil.isGet(first)) {
+      // Determine if the call is a free call (no explicit "this")
+      if (first == null || !NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
+      // Check for direct eval calls after skipping casts
+      if (first != null && first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
