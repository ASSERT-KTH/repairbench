diff --git a/tmp/63850a5e-0bd8-4f0a-a13d-a88ebe6f214e_buggy.java b/tmp/c387ffb0-bdfb-429c-8e5b-469cf1d07f2d_fixed.java
index 7d8d756..f8933fd 100644
--- a/tmp/63850a5e-0bd8-4f0a-a13d-a88ebe6f214e_buggy.java
+++ b/tmp/c387ffb0-bdfb-429c-8e5b-469cf1d07f2d_fixed.java
@@ -1,48 +1,62 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
-        // 02-Aug-2013, tatu: May need to use native type ids
+        // Check for native type ids first
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
+        // Ensure we're starting at the correct token
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+
+        String typeId = null;
+        JsonDeserializer<Object> deser = null;
+
+        // Iterate through fields to find the valid type id
+        while (p.nextToken() == JsonToken.FIELD_NAME) {
+            String currentName = p.getText();
+            // Check if the current field name corresponds to a known deserializer
+            deser = _findDeserializer(ctxt, currentName);
+            if (deser != null) {
+                typeId = currentName;
+                p.nextToken(); // Move to the value token
+                break;
             }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+            // Skip the value if it's not the type id field
             p.nextToken();
+            p.skipChildren();
+        }
 
-        // Minor complication: we may need to merge type id in?
+        if (typeId == null) {
+            throw ctxt.mappingException("Could not find a valid type id field in the wrapper object for " + baseTypeName());
+        }
+
+        // Merge type id if necessary
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject();
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
-                    "expected closing END_OBJECT after type information and deserialized value");
+
+        // Ensure we consume the remaining tokens to reach END_OBJECT
+        while (p.nextToken() != JsonToken.END_OBJECT) {
+            p.skipChildren();
         }
+
         return value;
     }
\ No newline at end of file
