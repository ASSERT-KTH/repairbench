diff --git a/tmp/6d2fdc3b-c589-4707-bac4-38a0a214f5a0_buggy.java b/tmp/e2dbfc4b-40ac-45a0-a4d2-7ddea7b0d085_fixed.java
index 7d8d756..5777abe 100644
--- a/tmp/6d2fdc3b-c589-4707-bac4-38a0a214f5a0_buggy.java
+++ b/tmp/e2dbfc4b-40ac-45a0-a4d2-7ddea7b0d085_fixed.java
@@ -1,48 +1,67 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
-            }
-        final String typeId = p.getText();
-        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+
+        String typeId = null;
+        JsonDeserializer<Object> deser = null;
+
+        while (true) {
+            JsonToken t = p.nextToken();
+            if (t == JsonToken.FIELD_NAME) {
+                String currentName = p.getText();
+                try {
+                    deser = _findDeserializer(ctxt, currentName);
+                    typeId = currentName;
+                    break;
+                } catch (IllegalArgumentException e) {
+                    // Not a valid typeId, skip this field and its value
                     p.nextToken();
+                    p.skipChildren();
+                }
+            } else if (t == JsonToken.END_OBJECT) {
+                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                        "Could not find type id (as FIELD_NAME) in wrapper object for class "+baseTypeName());
+            } else {
+                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                        "Unexpected token (" + t + "), expected FIELD_NAME or END_OBJECT in wrapper object");
+            }
+        }
+
+        p.nextToken(); // Move to the value of the typeId field
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
