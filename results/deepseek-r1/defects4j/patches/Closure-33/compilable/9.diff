diff --git a/tmp/33ab52e5-0a4d-4472-87ac-9e4ab5b5372d_buggy.java b/tmp/5f176f54-2d58-499c-b381-7c91058ef50b_fixed.java
index fb2b020..37d105c 100644
--- a/tmp/33ab52e5-0a4d-4472-87ac-9e4ab5b5372d_buggy.java
+++ b/tmp/5f176f54-2d58-499c-b381-7c91058ef50b_fixed.java
@@ -1,27 +1,21 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
+          JSType typeToInfer;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
+          } else {
+            JSType existingType = getPropertyType(prop);
+            typeToInfer = existingType.getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
