diff --git a/tmp/43a51e9c-a561-44b5-9bd9-ffec8ef49653_buggy.java b/tmp/bb950df8-5b6c-42da-ab8f-946adf60d791_fixed.java
index fb2b020..88e1617 100644
--- a/tmp/43a51e9c-a561-44b5-9bd9-ffec8ef49653_buggy.java
+++ b/tmp/bb950df8-5b6c-42da-ab8f-946adf60d791_fixed.java
@@ -1,27 +1,29 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
+      JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+        // Only process properties that are explicitly optional in the constraint.
+        boolean isOptional = voidType.isSubtypeOf(propType);
+        if (isOptional && !isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            typeToInfer = voidType.getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
