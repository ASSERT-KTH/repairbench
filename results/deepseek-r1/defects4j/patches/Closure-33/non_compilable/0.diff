diff --git a/tmp/98de874f-bdcd-4df0-a358-1cdbfbef9435_buggy.java b/tmp/1da44667-d030-487b-8afa-1d2e58757c0d_fixed.java
index fb2b020..c3168eb 100644
--- a/tmp/98de874f-bdcd-4df0-a358-1cdbfbef9435_buggy.java
+++ b/tmp/1da44667-d030-487b-8afa-1d2e58757c0d_fixed.java
@@ -1,27 +1,40 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
+      JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+            // Check if the constraint's property type includes undefined
+            boolean isOptional = false;
+            if (propType.isUnionType()) {
+              UnionType unionPropType = (UnionType) propType;
+              isOptional = unionPropType.getAlternates().contains(voidType);
+            } else {
+              isOptional = propType.isEquivalentTo(voidType);
             }
+            if (isOptional) {
+              JSType typeToInfer = voidType.getLeastSupertype(propType);
               defineInferredProperty(prop, typeToInfer, null);
             }
+            // If not optional, do not add the property
+          } else {
+            // Property exists, infer the type as the constraint's type
+            defineInferredProperty(prop, propType, null);
+          }
+        }
       }
     }
   }
\ No newline at end of file
