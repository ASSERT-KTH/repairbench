diff --git a/tmp/94b994c6-f99f-4e47-a70b-7d6eecc80435_buggy.java b/tmp/5be39fcf-d651-4b6d-8f9b-3ae094d93def_fixed.java
index 9d42346..e219a3b 100644
--- a/tmp/94b994c6-f99f-4e47-a70b-7d6eecc80435_buggy.java
+++ b/tmp/5be39fcf-d651-4b6d-8f9b-3ae094d93def_fixed.java
@@ -1,37 +1,40 @@
   private ReflectiveTypeAdapterFactory.BoundField createBoundField(
       final Gson context, final Field field, final String name,
       final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
     final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
+    // Adjust field type to boxed type if primitive for JsonAdapter lookup
+    final TypeToken<?> boxedFieldType = isPrimitive 
+        ? TypeToken.get(Primitives.wrap(fieldType.getRawType())) 
+        : fieldType;
     JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
     TypeAdapter<?> mapped = null;
     if (annotation != null) {
-      mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
+      mapped = getTypeAdapter(constructorConstructor, context, boxedFieldType, annotation);
     }
     final boolean jsonAdapterPresent = mapped != null;
     if (mapped == null) mapped = context.getAdapter(fieldType);
 
     final TypeAdapter<?> typeAdapter = mapped;
     return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
       @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
       @Override void write(JsonWriter writer, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = field.get(value);
         TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
         t.write(writer, fieldValue);
       }
       @Override void read(JsonReader reader, Object value)
           throws IOException, IllegalAccessException {
         Object fieldValue = typeAdapter.read(reader);
         if (fieldValue != null || !isPrimitive) {
           field.set(value, fieldValue);
         }
       }
       @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+        if (!serialize) return false;
         Object fieldValue = field.get(value);
         return fieldValue != value; // avoid recursion for example for Throwable.cause
       }
     };
   }
\ No newline at end of file
