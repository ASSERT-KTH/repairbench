diff --git a/tmp/5b6ac065-9b97-4b7a-88f0-f19c5e2e304c_buggy.java b/tmp/8d30c6ed-4927-4b0e-ac4e-e39b99eb4056_fixed.java
index 30d7266..46d0915 100644
--- a/tmp/5b6ac065-9b97-4b7a-88f0-f19c5e2e304c_buggy.java
+++ b/tmp/8d30c6ed-4927-4b0e-ac4e-e39b99eb4056_fixed.java
@@ -1,69 +1,84 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
 
             // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
 
-      // Don't traverse functions that are getting lent to a prototype.
+      // Additional check for object literals with @lends to a prototype
+      if (pType == Token.STRING || pType == Token.NUMBER) {
+        Node objLit = parent.getParent();
+        if (objLit != null && objLit.getType() == Token.OBJECTLIT) {
+          JSDocInfo objJsDoc = objLit.getJSDocInfo();
+          if (objJsDoc != null) {
+            JSTypeExpression lendsType = objJsDoc.getLendsType();
+            if (lendsType != null) {
+              String typeString = lendsType.getRoot().getQualifiedName();
+              if (typeString != null && typeString.endsWith(".prototype")) {
+                return false;
+              }
+            }
+          }
+        }
+      }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
         if (NodeUtil.isGet(lhs)) {
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
           Node llhs = lhs.getFirstChild();
           if (llhs.getType() == Token.GETPROP &&
               llhs.getLastChild().getString().equals("prototype")) {
             return false;
           }
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
