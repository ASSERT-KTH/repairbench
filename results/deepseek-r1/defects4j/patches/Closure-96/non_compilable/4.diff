diff --git a/tmp/2047a845-072c-4f85-8672-28aca1a7198b_buggy.java b/tmp/16a8cbee-db53-4171-bfdb-3dbac277bf92_fixed.java
index e0ecec8..687ebbc 100644
--- a/tmp/2047a845-072c-4f85-8672-28aca1a7198b_buggy.java
+++ b/tmp/16a8cbee-db53-4171-bfdb-3dbac277bf92_fixed.java
@@ -1,35 +1,78 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    while (arguments.hasNext() && parameters.hasNext()) {
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
+      JSType paramType = getJSType(parameter);
+      JSType expectedType = paramType;
+
+      // Check if this is the var_args parameter
+      if (functionType.isVarArgs() && !parameters.hasNext()) {
+        if (paramType.isArrayType()) {
+          expectedType = paramType.toMaybeArrayType().getElementType();
+        } else if (paramType.isUnionType()) {
+          for (JSType alt : paramType.toMaybeUnionType().getAlternates()) {
+            if (alt.isArrayType()) {
+              expectedType = alt.toMaybeArrayType().getElementType();
+              break;
+            }
+          }
+        } else {
+          expectedType = getNativeType(UNKNOWN_TYPE);
+        }
+      }
+
       validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+          getJSType(argument), expectedType, call, ordinal);
+    }
+
+    // Handle remaining arguments for var_args
+    if (arguments.hasNext() && functionType.isVarArgs()) {
+      Node varArgsParam = functionType.getParameters().getLast();
+      JSType varArgsType = getJSType(varArgsParam);
+      JSType elementType = null;
+
+      if (varArgsType.isArrayType()) {
+        elementType = varArgsType.toMaybeArrayType().getElementType();
+      } else if (varArgsType.isUnionType()) {
+        for (JSType alt : varArgsType.toMaybeUnionType().getAlternates()) {
+          if (alt.isArrayType()) {
+            elementType = alt.toMaybeArrayType().getElementType();
+            break;
+          }
+        }
+      } else {
+        elementType = getNativeType(UNKNOWN_TYPE);
+      }
+
+      while (arguments.hasNext()) {
+        argument = arguments.next();
+        ordinal++;
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), elementType, call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
