diff --git a/tmp/6ac76c5a-7fe3-479e-a36d-a4f5fb2e9afe_buggy.java b/tmp/545decfb-c0b6-4fd6-8c97-361d7d2cabcb_fixed.java
index 388771b..a8c5642 100644
--- a/tmp/6ac76c5a-7fe3-479e-a36d-a4f5fb2e9afe_buggy.java
+++ b/tmp/545decfb-c0b6-4fd6-8c97-361d7d2cabcb_fixed.java
@@ -1,37 +1,28 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+        // Reset minY and maxY to ensure they are recalculated based on the new data subset
+        copy.minY = Double.NaN;
+        copy.maxY = Double.NaN;
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
