diff --git a/tmp/30067c90-cd8e-4369-8339-510ac33789f1_buggy.java b/tmp/4eb152b5-b170-4c83-9a4f-042e5fc4dcb6_fixed.java
index c9da1b7..e42cef4 100644
--- a/tmp/30067c90-cd8e-4369-8339-510ac33789f1_buggy.java
+++ b/tmp/4eb152b5-b170-4c83-9a4f-042e5fc4dcb6_fixed.java
@@ -1,33 +1,40 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
+            // Check if one creator is from a subclass and handle accordingly
+            Class<?> oldDeclaring = ((java.lang.reflect.Member) oldOne.getAnnotated()).getDeclaringClass();
+            Class<?> newDeclaring = ((java.lang.reflect.Member) newOne.getAnnotated()).getDeclaringClass();
 
+            if (oldDeclaring.isAssignableFrom(newDeclaring)) {
+                // new is more specific (subclass), replace old
+            } else if (newDeclaring.isAssignableFrom(oldDeclaring)) {
+                // old is more specific, keep it
+                return;
+            } else if (oldDeclaring == newDeclaring) {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            } else {
+                // unrelated classes, conflict
+                throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                        +" creators: already had "+oldOne+" and encountered "+newOne+"; conflicting types");
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
