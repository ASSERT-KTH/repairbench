diff --git a/tmp/c05e5141-e0a2-4cc2-90d6-8a07b870ebac_buggy.java b/tmp/d6be94ca-074d-49eb-b650-5970ef0254bd_fixed.java
index c9da1b7..2a2fc83 100644
--- a/tmp/c05e5141-e0a2-4cc2-90d6-8a07b870ebac_buggy.java
+++ b/tmp/d6be94ca-074d-49eb-b650-5970ef0254bd_fixed.java
@@ -1,33 +1,38 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
+            // Check if the underlying annotated members (e.g., constructors) are the same
+            if (oldOne.getAnnotated().equals(newOne.getAnnotated())) {
+                return;
+            }
+
             // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
+            if (oldOne.getDeclaringClass() == newOne.getDeclaringClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
 
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
                 // otherwise, which one to choose?
                     // new type more generic, use old
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
