diff --git a/tmp/878e6b4a-dd2d-4912-92b5-29d5a32fcb63_buggy.java b/tmp/90345c9f-04b8-4a4b-b2c0-e8a9ec7d6939_fixed.java
index eb491d5..9d6c7ca 100644
--- a/tmp/878e6b4a-dd2d-4912-92b5-29d5a32fcb63_buggy.java
+++ b/tmp/90345c9f-04b8-4a4b-b2c0-e8a9ec7d6939_fixed.java
@@ -1,170 +1,110 @@
   /** {@inheritDoc} */
   @Override
   public double integrate(final FirstOrderDifferentialEquations equations,
                           final double t0, final double[] y0,
                           final double t, final double[] y)
   throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
     final boolean forward = t > t0;
 
     // create some internal working arrays
-    final int stages = c.length + 1;
+    final int n = y0.length;
     if (y != y0) {
-      System.arraycopy(y0, 0, y, 0, y0.length);
+      System.arraycopy(y0, 0, y, 0, n);
     }
-    final double[][] yDotK = new double[stages][y0.length];
-    final double[] yTmp = new double[y0.length];
-
-    // set up an interpolator sharing the integrator arrays
-    AbstractStepInterpolator interpolator;
-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
-      rki.reinitialize(this, yTmp, yDotK, forward);
-      interpolator = rki;
-    } else {
-      interpolator = new DummyStepInterpolator(yTmp, forward);
-    }
-    interpolator.storeTime(t0);
 
     // set up integration control objects
     stepStart = t0;
-    double  hNew      = 0;
+    double hNew = Math.abs(t - t0);
     boolean firstTime = true;
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
     CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
+    // initialize the Nordsieck array and other multistep structures
+    double[][] yDotK = new double[getNSteps() + 1][];
+    yDotK[0] = new double[n];
+    computeDerivatives(stepStart, y, yDotK[0]);
+
     // main integration loop
     while (!lastStep) {
 
-      interpolator.shift();
-
       double error = 0;
-      for (boolean loop = true; loop;) {
-
-        if (firstTime || !fsal) {
-          // first stage
-          computeDerivatives(stepStart, y, yDotK[0]);
-        }
+      boolean loop = true;
+      while (loop) {
 
         if (firstTime) {
-          final double[] scale;
-          if (vecAbsoluteTolerance == null) {
-              scale = new double[y0.length];
-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);
-            } else {
-              scale = vecAbsoluteTolerance;
-            }
-          hNew = initializeStep(equations, forward, getOrder(), scale,
-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);
+          hNew = initializeStep(forward, getOrder(), stepStart, y, yDotK[0], y);
           firstTime = false;
         }
 
         stepSize = hNew;
 
-        // next stages
-        for (int k = 1; k < stages; ++k) {
-
-          for (int j = 0; j < y0.length; ++j) {
-            double sum = a[k-1][0] * yDotK[0][j];
-            for (int l = 1; l < k; ++l) {
-              sum += a[k-1][l] * yDotK[l][j];
-            }
-            yTmp[j] = y[j] + stepSize * sum;
+        // Predictor step (Adams-Bashforth)
+        double[] predictedY = new double[n];
+        for (int j = 0; j < n; ++j) {
+          predictedY[j] = y[j] + stepSize * yDotK[0][j];
         }
 
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
-
+        // Corrector step (Adams-Moulton)
+        double[] correctedY = new double[n];
+        computeDerivatives(stepStart + stepSize, predictedY, yDotK[1]);
+        for (int j = 0; j < n; ++j) {
+          correctedY[j] = y[j] + stepSize * (yDotK[0][j] + yDotK[1][j]) / 2;
         }
 
-        // estimate the state at the end of the step
-        for (int j = 0; j < y0.length; ++j) {
-          double sum    = b[0] * yDotK[0][j];
-          for (int l = 1; l < stages; ++l) {
-            sum    += b[l] * yDotK[l][j];
-          }
-          yTmp[j] = y[j] + stepSize * sum;
+        // Estimate error (difference between predictor and corrector)
+        error = 0;
+        for (int j = 0; j < n; ++j) {
+          final double errJ = Math.abs(correctedY[j] - predictedY[j]);
+          final double yScale = Math.abs(y[j]) + Math.abs(correctedY[j] - y[j]);
+          final double tol = (vecAbsoluteTolerance == null) ?
+                             scalAbsoluteTolerance + scalRelativeTolerance * yScale :
+                             vecAbsoluteTolerance[j] + vecRelativeTolerance[j] * yScale;
+          final double ratio = errJ / tol;
+          error += ratio * ratio;
         }
+        error = Math.sqrt(error / n);
 
-        // estimate the error at the end of the step
-        error = estimateError(yDotK, y, yTmp, stepSize);
         if (error <= 1.0) {
-
-          // discrete events handling
-          interpolator.storeTime(stepStart + stepSize);
-          if (manager.evaluateStep(interpolator)) {
-              final double dt = manager.getEventTime() - stepStart;
-              if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // rejecting the step would lead to a too small next step, we accept it
           loop = false;
         } else {
-                  // reject the step to match exactly the next switch time
-                  hNew = dt;
-              }
-          } else {
-            // accept the step
-            loop = false;
-          }
-
-        } else {
-          // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              Math.min(maxGrowth,
-                       Math.max(minReduction, safety * Math.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
+          // adjust step size
+          hNew = stepSize * Math.max(0.1, Math.pow(error, -1.0 / (getOrder())));
+          hNew = filterStep(hNew, forward, false);
         }
 
       }
 
-      // the step has been accepted
-      final double nextStep = stepStart + stepSize;
-      System.arraycopy(yTmp, 0, y, 0, y0.length);
-      manager.stepAccepted(nextStep, y);
+      // step accepted
+      stepStart += stepSize;
+      System.arraycopy(correctedY, 0, y, 0, n);
+      manager.stepAccepted(stepStart, y);
       lastStep = manager.stop();
 
-      // provide the step data to the step handler
-      interpolator.storeTime(nextStep);
+      // handle step and prepare next step
       for (StepHandler handler : stepHandlers) {
-          handler.handleStep(interpolator, lastStep);
+          handler.handleStep(new DummyStepInterpolator(y, forward), lastStep);
       }
-      stepStart = nextStep;
 
-      if (fsal) {
-        // save the last evaluation for the next step
-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
-      }
-
-      if (manager.reset(stepStart, y) && ! lastStep) {
-        // some event handler has triggered changes that
-        // invalidate the derivatives, we need to recompute them
-        computeDerivatives(stepStart, y, yDotK[0]);
-      }
+      // shift derivatives
+      System.arraycopy(yDotK[1], 0, yDotK[0], 0, n);
 
       if (!lastStep) {
-        // in some rare cases we may get here with stepSize = 0, for example
-        // when an event occurs at integration start, reducing the first step
-        // to zero; we have to reset the step to some safe non zero value
-          stepSize = filterStep(stepSize, forward, true);
-
-        // stepsize control for next step
-        final double factor = Math.min(maxGrowth,
-                                       Math.max(minReduction,
-                                                safety * Math.pow(error, exp)));
-        final double  scaledH    = stepSize * factor;
-        final double  nextT      = stepStart + scaledH;
-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-        hNew = filterStep(scaledH, forward, nextIsLast);
+        // compute new step size
+        final double factor = Math.pow(error, -1.0 / getOrder());
+        hNew = filterStep(stepSize * factor, forward, true);
       }
 
     }
 
     final double stopTime = stepStart;
     resetInternalState();
     return stopTime;
 
   }
\ No newline at end of file
