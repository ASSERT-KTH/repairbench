diff --git a/tmp/13c02a5c-e24d-4755-a6fc-da6dcb9652a5_buggy.java b/tmp/7df63669-9fce-49cc-a28f-4a594237f255_fixed.java
index 939f49b..8db57d2 100644
--- a/tmp/13c02a5c-e24d-4755-a6fc-da6dcb9652a5_buggy.java
+++ b/tmp/7df63669-9fce-49cc-a28f-4a594237f255_fixed.java
@@ -1,21 +1,22 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          && (n.getType() == Token.GETPROP || n.getType() == Token.GETELEM)) {
+        // Traverse the left-hand side to check for prototype in the chain
+        Node current = n.getFirstChild();
+        while (current != null) {
+          if (current.getType() == Token.GETPROP) {
+            Node prop = current.getFirstChild().getNext();
+            if (prop != null && prop.getType() == Token.STRING &&
+                prop.getString().equals("prototype")) {
               return true;
             }
+            current = current.getFirstChild();
+          } else {
+            // Not a GETPROP, so exit traversal
+            current = null;
+          }
         }
       }
-
       return false;
     }
\ No newline at end of file
