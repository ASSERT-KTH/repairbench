diff --git a/tmp/c57b17a8-64c2-41af-910a-a2df35dcf35a_buggy.java b/tmp/d23e657b-0b01-4482-b224-661b959ede6e_fixed.java
index d27c40c..3b7a14a 100644
--- a/tmp/c57b17a8-64c2-41af-910a-a2df35dcf35a_buggy.java
+++ b/tmp/d23e657b-0b01-4482-b224-661b959ede6e_fixed.java
@@ -1,49 +1,74 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
     public void atan2(final double[] y, final int yOffset,
                       final double[] x, final int xOffset,
                       final double[] result, final int resultOffset) {
 
+        // Handle special case where both x and y are zero
+        final double xVal = x[xOffset];
+        final double yVal = y[yOffset];
+        if (xVal == 0.0 && yVal == 0.0) {
+            // Determine the signs of x and y
+            final boolean xNegative = Double.doubleToLongBits(xVal) < 0;
+            final boolean yNegative = Double.doubleToLongBits(yVal) < 0;
+
+            // Compute the result value based on IEEE 754 specifications
+            final double value;
+            if (xNegative) {
+                if (yNegative) {
+                    value = -FastMath.PI;
+                } else {
+                    value = FastMath.PI;
+                }
+            } else {
+                if (yNegative) {
+                    value = -0.0;
+                } else {
+                    value = 0.0;
+                }
+            }
+
+            result[resultOffset] = value;
+
+            // Set all derivatives to zero
+            final int size = getSize();
+            for (int i = 1; i < size; ++i) {
+                result[resultOffset + i] = 0.0;
+            }
+
+            return;
+        }
+
         // compute r = sqrt(x^2+y^2)
         double[] tmp1 = new double[getSize()];
         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
         double[] tmp2 = new double[getSize()];
         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
         if (x[xOffset] >= 0) {
 
             // compute atan2(y, x) = 2 atan(y / (r + x))
             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
             for (int i = 0; i < tmp2.length; ++i) {
                 result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
             }
 
         } else {
 
             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)
             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
             result[resultOffset] =
                     ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
             for (int i = 1; i < tmp2.length; ++i) {
                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
             }
 
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
 
     }
\ No newline at end of file
