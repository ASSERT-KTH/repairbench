diff --git a/tmp/8a43f50d-edcf-4f29-b021-19a8a797d9f7_buggy.java b/tmp/a06aaebb-68c0-489a-890b-e194d40e5d57_fixed.java
index a7d0787..744f2c8 100644
--- a/tmp/8a43f50d-edcf-4f29-b021-19a8a797d9f7_buggy.java
+++ b/tmp/a06aaebb-68c0-489a-890b-e194d40e5d57_fixed.java
@@ -1,54 +1,67 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
+    @SuppressWarnings("unchecked")
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (Number.class.isAssignableFrom(clazz))
+        {
+            Number number = createNumber(str);
+            if (clazz.isInstance(number))
+            {
+                return clazz.cast(number);
+            }
+            else
+            {
+                throw new ParseException("Cannot convert string '" + str + "' to " + clazz.getName());
+            }
+        }
         else
         {
-            return null;
+            try
+            {
+                return clazz.getConstructor(String.class).newInstance(str);
+            }
+            catch (NoSuchMethodException e)
+            {
+                throw new ParseException("No String constructor available for class " + clazz.getName(), e);
+            }
+            catch (InstantiationException | IllegalAccessException | InvocationTargetException e)
+            {
+                throw new ParseException("Error instantiating class " + clazz.getName(), e);
+            }
         }
     }
\ No newline at end of file
