diff --git a/tmp/7c4166ff-8395-48de-af84-a6f0cc1c66d1_buggy.java b/tmp/c2201ecf-2fd6-435a-84f4-83f9d19f8cab_fixed.java
index a7d0787..919cbef 100644
--- a/tmp/7c4166ff-8395-48de-af84-a6f0cc1c66d1_buggy.java
+++ b/tmp/c2201ecf-2fd6-435a-84f4-83f9d19f8cab_fixed.java
@@ -1,54 +1,75 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
-    @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
+    @SuppressWarnings("unchecked")
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
         else
         {
-            return null;
+            try
+            {
+                // Attempt to use valueOf(String) method
+                Method valueOf = clazz.getMethod("valueOf", String.class);
+                return (T) valueOf.invoke(null, str);
+            }
+            catch (NoSuchMethodException e)
+            {
+                try
+                {
+                    // Attempt to use a String constructor
+                    Constructor<T> constructor = clazz.getConstructor(String.class);
+                    return constructor.newInstance(str);
+                }
+                catch (NoSuchMethodException ex)
+                {
+                    throw new ParseException("Unable to parse value '" + str + "' for class " + clazz.getName());
+                }
+                catch (IllegalAccessException | InstantiationException | InvocationTargetException ex)
+                {
+                    throw new ParseException("Error instantiating class " + clazz.getName(), ex);
+                }
+            }
+            catch (IllegalAccessException | InvocationTargetException e)
+            {
+                Throwable cause = e.getCause();
+                if (cause instanceof ParseException)
+                {
+                    throw (ParseException) cause;
+                }
+                throw new ParseException("Failed to create value for class " + clazz.getName(), e);
+            }
         }
     }
\ No newline at end of file
