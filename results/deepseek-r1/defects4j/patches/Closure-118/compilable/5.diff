diff --git a/tmp/caba836b-358c-41b5-92af-cd8b3f32385d_buggy.java b/tmp/a327436e-a820-4e92-afc1-90b0964b97d1_fixed.java
index 0b7c52e..28829a8 100644
--- a/tmp/caba836b-358c-41b5-92af-cd8b3f32385d_buggy.java
+++ b/tmp/a327436e-a820-4e92-afc1-90b0964b97d1_fixed.java
@@ -1,27 +1,37 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
+      Node parent = n.getParent();
+      T ownerType = null;
+
+      // Determine the owner type by checking if the object literal is the RHS of an assignment.
+      if (parent != null && parent.isAssign()) {
+        Node ownerNode = parent.getFirstChild();
+        ownerType = typeSystem.getType(getScope(), ownerNode, null);
+      } else {
+        ownerType = typeSystem.getType(getScope(), n, null);
+      }
+
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
         String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+                                   processProperty(t, prop, ownerType, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
+                (ownerType == null ? "null" : ownerType.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
