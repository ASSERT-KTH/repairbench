diff --git a/tmp/1c5f8d8a-7f95-4eaf-a565-a0eb015eddad_buggy.java b/tmp/0708cf7c-da75-4dc6-b766-34ffe6a51357_fixed.java
index 562001a..a468a6b 100644
--- a/tmp/1c5f8d8a-7f95-4eaf-a565-a0eb015eddad_buggy.java
+++ b/tmp/0708cf7c-da75-4dc6-b766-34ffe6a51357_fixed.java
@@ -1,29 +1,14 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
     public static boolean containsIgnoreCase(String str, String searchStr) {
         if (str == null || searchStr == null) {
             return false;
         }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+        int searchStrLength = searchStr.length();
+        int strLength = str.length();
+        
+        for (int i = 0; i <= strLength - searchStrLength; i++) {
+            if (str.regionMatches(true, i, searchStr, 0, searchStrLength)) {
+                return true;
+            }
+        }
+        return false;
     }
\ No newline at end of file
