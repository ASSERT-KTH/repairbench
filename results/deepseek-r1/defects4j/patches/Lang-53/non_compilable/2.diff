diff --git a/tmp/15e4b4c0-093d-4b2a-ae13-55bf0ec8c041_buggy.java b/tmp/0f221d0d-fe09-40db-9f95-ddab99e00bde_fixed.java
index f96e1af..dd211a3 100644
--- a/tmp/15e4b4c0-093d-4b2a-ae13-55bf0ec8c041_buggy.java
+++ b/tmp/0f221d0d-fe09-40db-9f95-ddab99e00bde_fixed.java
@@ -1,133 +1,224 @@
-    /**
-     * <p>Internal calculation method.</p>
-     * 
-     * @param val  the calendar
-     * @param field  the field constant
-     * @param round  true to round, false to truncate
-     * @throws ArithmeticException if the year is over 280 million
-     */
     private static void modify(Calendar val, int field, boolean round) {
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
         
         if (field == Calendar.MILLISECOND) {
             return;
         }
 
-        // ----------------- Fix for LANG-59 ---------------------- START ---------------
-        // see http://issues.apache.org/jira/browse/LANG-59
-        //
-        // Manually truncate milliseconds, seconds and minutes, rather than using
-        // Calendar methods.
-
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
 
-        // truncate milliseconds
+        if (!round) {
+            // Truncate milliseconds
             int millisecs = val.get(Calendar.MILLISECOND);
-        if (!round || millisecs < 500) {
             time = time - millisecs;
             if (field == Calendar.SECOND) {
                 done = true;
             }
-        }
 
-        // truncate seconds
+            // Truncate seconds
+            if (!done) {
                 int seconds = val.get(Calendar.SECOND);
-        if (!done && (!round || seconds < 30)) {
                 time = time - (seconds * 1000L);
                 if (field == Calendar.MINUTE) {
                     done = true;
                 }
             }
 
-        // truncate minutes
+            // Truncate minutes
+            if (!done) {
                 int minutes = val.get(Calendar.MINUTE);
-        if (!done && (!round || minutes < 30)) {
                 time = time - (minutes * 60000L);
             }
 
-        // reset time
             if (date.getTime() != time) {
                 date.setTime(time);
                 val.setTime(date);
             }
-        // ----------------- Fix for LANG-59 ----------------------- END ----------------
+        }
 
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
+            // Check if all fields in this group are higher than the target field
+            boolean allHigher = true;
+            for (int j = 0; j < fields[i].length; j++) {
+                if (fields[i][j] >= field) {
+                    allHigher = false;
+                    break;
+                }
+            }
+            if (allHigher) {
+                continue;
+            }
+
             for (int j = 0; j < fields[i].length; j++) {
                 if (fields[i][j] == field) {
-                    //This is our field... we stop looping
+                    if (round) {
+                        long currentTime = val.getTimeInMillis();
+                        Calendar truncated = (Calendar) val.clone();
+                        switch (field) {
+                            case Calendar.MINUTE:
+                                truncated.set(Calendar.SECOND, 0);
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.HOUR:
+                            case Calendar.HOUR_OF_DAY:
+                                truncated.set(Calendar.MINUTE, 0);
+                                truncated.set(Calendar.SECOND, 0);
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.DATE:
+                            case Calendar.DAY_OF_MONTH:
+                                truncated.set(Calendar.HOUR_OF_DAY, 0);
+                                truncated.set(Calendar.MINUTE, 0);
+                                truncated.set(Calendar.SECOND, 0);
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.MONTH:
+                                truncated.set(Calendar.DAY_OF_MONTH, 1);
+                                truncated.set(Calendar.HOUR_OF_DAY, 0);
+                                truncated.set(Calendar.MINUTE, 0);
+                                truncated.set(Calendar.SECOND, 0);
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.YEAR:
+                                truncated.set(Calendar.MONTH, Calendar.JANUARY);
+                                truncated.set(Calendar.DAY_OF_MONTH, 1);
+                                truncated.set(Calendar.HOUR_OF_DAY, 0);
+                                truncated.set(Calendar.MINUTE, 0);
+                                truncated.set(Calendar.SECOND, 0);
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.SECOND:
+                                truncated.set(Calendar.MILLISECOND, 0);
+                                break;
+                            default:
+                                break;
+                        }
+                        long truncatedTime = truncated.getTimeInMillis();
+                        long lowerSum = currentTime - truncatedTime;
+                        long halfDuration = 0;
+                        switch (field) {
+                            case Calendar.MILLISECOND:
+                                halfDuration = 0;
+                                break;
+                            case Calendar.SECOND:
+                                halfDuration = 500;
+                                break;
+                            case Calendar.MINUTE:
+                                halfDuration = 30 * 1000L;
+                                break;
+                            case Calendar.HOUR:
+                            case Calendar.HOUR_OF_DAY:
+                                halfDuration = 30 * 60 * 1000L;
+                                break;
+                            case Calendar.DATE:
+                            case Calendar.DAY_OF_MONTH:
+                                halfDuration = 12 * 60 * 60 * 1000L;
+                                break;
+                            case Calendar.MONTH:
+                                halfDuration = 15 * 24 * 60 * 60 * 1000L;
+                                break;
+                            case Calendar.YEAR:
+                                halfDuration = 6 * 30 * 24 * 60 * 60 * 1000L;
+                                break;
+                            default:
+                                halfDuration = 0;
+                                break;
+                        }
+                        roundUp = lowerSum >= halfDuration;
+                    }
                     if (round && roundUp) {
                         if (field == DateUtils.SEMI_MONTH) {
-                            //This is a special case that's hard to generalize
-                            //If the date is 1, we round up to 16, otherwise
-                            //  we subtract 15 days and add 1 month
                             if (val.get(Calendar.DATE) == 1) {
                                 val.add(Calendar.DATE, 15);
                             } else {
                                 val.add(Calendar.DATE, -15);
                                 val.add(Calendar.MONTH, 1);
                             }
                         } else {
-                            //We need at add one to this field since the
-                            //  last number causes us to round up
                             val.add(fields[i][0], 1);
                         }
+                        switch (field) {
+                            case Calendar.MINUTE:
+                                val.set(Calendar.SECOND, 0);
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.HOUR:
+                            case Calendar.HOUR_OF_DAY:
+                                val.set(Calendar.MINUTE, 0);
+                                val.set(Calendar.SECOND, 0);
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.DATE:
+                            case Calendar.DAY_OF_MONTH:
+                                val.set(Calendar.HOUR_OF_DAY, 0);
+                                val.set(Calendar.MINUTE, 0);
+                                val.set(Calendar.SECOND, 0);
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.MONTH:
+                                val.set(Calendar.DAY_OF_MONTH, 1);
+                                val.set(Calendar.HOUR_OF_DAY, 0);
+                                val.set(Calendar.MINUTE, 0);
+                                val.set(Calendar.SECOND, 0);
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.YEAR:
+                                val.set(Calendar.MONTH, Calendar.JANUARY);
+                                val.set(Calendar.DAY_OF_MONTH, 1);
+                                val.set(Calendar.HOUR_OF_DAY, 0);
+                                val.set(Calendar.MINUTE, 0);
+                                val.set(Calendar.SECOND, 0);
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            case Calendar.SECOND:
+                                val.set(Calendar.MILLISECOND, 0);
+                                break;
+                            default:
+                                break;
+                        }
                     }
                     return;
                 }
             }
-            //We have various fields that are not easy roundings
+
             int offset = 0;
             boolean offsetSet = false;
-            //These are special types of fields that require different rounding rules
             switch (field) {
                 case DateUtils.SEMI_MONTH:
                     if (fields[i][0] == Calendar.DATE) {
-                        //If we're going to drop the DATE field's value,
-                        //  we want to do this our own way.
-                        //We need to subtrace 1 since the date has a minimum of 1
                         offset = val.get(Calendar.DATE) - 1;
-                        //If we're above 15 days adjustment, that means we're in the
-                        //  bottom half of the month and should stay accordingly.
                         if (offset >= 15) {
                             offset -= 15;
                         }
-                        //Record whether we're in the top or bottom half of that range
                         roundUp = offset > 7;
                         offsetSet = true;
                     }
                     break;
                 case Calendar.AM_PM:
                     if (fields[i][0] == Calendar.HOUR_OF_DAY) {
-                        //If we're going to drop the HOUR field's value,
-                        //  we want to do this our own way.
                         offset = val.get(Calendar.HOUR_OF_DAY);
                         if (offset >= 12) {
                             offset -= 12;
                         }
                         roundUp = offset > 6;
                         offsetSet = true;
                     }
                     break;
             }
             if (!offsetSet) {
                 int min = val.getActualMinimum(fields[i][0]);
                 int max = val.getActualMaximum(fields[i][0]);
-                //Calculate the offset from the minimum allowed value
                 offset = val.get(fields[i][0]) - min;
-                //Set roundUp if this is more than half way between the minimum and maximum
                 roundUp = offset > ((max - min) / 2);
             }
-            //We need to remove this field
             if (offset != 0) {
                 val.set(fields[i][0], val.get(fields[i][0]) - offset);
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
\ No newline at end of file
