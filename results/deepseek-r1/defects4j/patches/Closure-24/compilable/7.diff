diff --git a/tmp/eb13cf92-8940-4952-8941-0de0e2891356_buggy.java b/tmp/7bdac0bb-3c92-465e-ad7d-79a0ec406ab9_fixed.java
index 602226b..e4d017c 100644
--- a/tmp/eb13cf92-8940-4952-8941-0de0e2891356_buggy.java
+++ b/tmp/7bdac0bb-3c92-465e-ad7d-79a0ec406ab9_fixed.java
@@ -1,26 +1,25 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+          Node initialValue = v.getInitialValue();
+          if (initialValue != null && initialValue.isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = initialValue.getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
