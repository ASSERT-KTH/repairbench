diff --git a/tmp/4eba36c4-c7df-4af6-a59c-47c05bea4438_buggy.java b/tmp/c9d5bd7c-56ab-43ce-ab08-c63440e811ad_fixed.java
index 602226b..21c5d75 100644
--- a/tmp/4eba36c4-c7df-4af6-a59c-47c05bea4438_buggy.java
+++ b/tmp/c9d5bd7c-56ab-43ce-ab08-c63440e811ad_fixed.java
@@ -1,26 +1,23 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
+        if (v.isParam()) {
+          continue;
+        }
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        Node initialValue = v.getInitialValue();
+        if (initialValue == null) {
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          continue;
+        }
+        if (initialValue.isGetProp()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = initialValue.getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
-    }
