diff --git a/tmp/41f73402-d11c-4ceb-b752-c403395eaa65_buggy.java b/tmp/9cfe58e1-a8e8-476c-be17-d2db518b7bc1_fixed.java
index 602226b..050c46d 100644
--- a/tmp/41f73402-d11c-4ceb-b752-c403395eaa65_buggy.java
+++ b/tmp/9cfe58e1-a8e8-476c-be17-d2db518b7bc1_fixed.java
@@ -1,26 +1,27 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
+        // Skip parameters as they are handled elsewhere
+        if (v.isParam()) {
+          continue;
+        }
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (v.hasInitialValue()) {
+          Node initialValue = v.getInitialValue();
+          if (initialValue.isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = initialValue.getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else {
+          // Report variables without initializers (e.g., var x;)
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
