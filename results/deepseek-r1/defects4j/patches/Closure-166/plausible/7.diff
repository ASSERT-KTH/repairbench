diff --git a/tmp/177aa45c-c7aa-4155-bf8a-a3c55d4a37c2_buggy.java b/tmp/35e32c9a-2ec3-43dc-84b8-cbc31d57d873_fixed.java
index 5f96616..d9ebb83 100644
--- a/tmp/177aa45c-c7aa-4155-bf8a-a3c55d4a37c2_buggy.java
+++ b/tmp/35e32c9a-2ec3-43dc-84b8-cbc31d57d873_fixed.java
@@ -1,20 +1,20 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    // Handle union types by checking each constituent type.
+    JSType restricted = constraint.restrictByNotNullOrUndefined();
+    UnionType unionType = restricted.toMaybeUnionType();
+    if (unionType != null) {
+      for (JSType alt : unionType.getAlternates()) {
+        if (alt.isRecordType()) {
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    } else if (restricted.isRecordType()) {
+      matchRecordTypeConstraint(restricted.toObjectType());
     }
   }
\ No newline at end of file
