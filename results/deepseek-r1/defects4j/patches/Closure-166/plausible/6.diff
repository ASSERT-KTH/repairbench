diff --git a/tmp/16ee5fc9-b58b-4f7d-ae74-05332823f90b_buggy.java b/tmp/92d85ea5-b996-423e-a31b-01782b234118_fixed.java
index 5f96616..3986a4b 100644
--- a/tmp/16ee5fc9-b58b-4f7d-ae74-05332823f90b_buggy.java
+++ b/tmp/92d85ea5-b996-423e-a31b-01782b234118_fixed.java
@@ -1,20 +1,19 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle the case where the constraint is a union type containing record types
+    if (constraint.isUnionType()) {
+      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+        if (alt.isRecordType()) {
+          matchRecordTypeConstraint(alt.toObjectType());
+        }
+      }
+    } else if (constraint.isRecordType()) {
+      // Handle the case where the constraint object is a record type
       matchRecordTypeConstraint(constraint.toObjectType());
     }
   }
\ No newline at end of file
