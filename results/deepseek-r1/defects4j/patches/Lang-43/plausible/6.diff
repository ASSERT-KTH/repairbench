diff --git a/tmp/09e89e4b-6e6f-42c9-bed3-991ee07afb46_buggy.java b/tmp/ae68e00a-8c55-48ae-ba7b-e9da6373807d_fixed.java
index b6b11b6..a49f5d7 100644
--- a/tmp/09e89e4b-6e6f-42c9-bed3-991ee07afb46_buggy.java
+++ b/tmp/ae68e00a-8c55-48ae-ba7b-e9da6373807d_fixed.java
@@ -1,38 +1,45 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        if (escapingOn && start < c.length && c[start] == QUOTE) {
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
+            }
+            pos.setIndex(start + 1);
+            return appendTo;
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+        int currentIndex = start;
+        final int patternLength = pattern.length();
+        final int escapedQuoteLength = ESCAPED_QUOTE.length();
+
+        while (currentIndex < patternLength) {
+            if (escapingOn) {
+                if (currentIndex + escapedQuoteLength <= patternLength 
+                        && pattern.startsWith(ESCAPED_QUOTE, currentIndex)) {
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, currentIndex - lastHold).append(QUOTE);
+                    }
+                    currentIndex += escapedQuoteLength;
+                    lastHold = currentIndex;
+                    pos.setIndex(currentIndex);
                     continue;
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
             }
+
+            if (c[currentIndex] == QUOTE) {
+                currentIndex++;
+                pos.setIndex(currentIndex);
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, currentIndex - 1 - lastHold);
                 }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+                return appendTo;
+            }
+
+            currentIndex++;
+            pos.setIndex(currentIndex);
+        }
+
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
