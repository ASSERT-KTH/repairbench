diff --git a/tmp/f815ae4f-3caa-4962-9875-69d88bba5c43_buggy.java b/tmp/7d781df7-b6ba-495c-90a1-a0230cc21a44_fixed.java
index b6b11b6..b4e2948 100644
--- a/tmp/f815ae4f-3caa-4962-9875-69d88bba5c43_buggy.java
+++ b/tmp/7d781df7-b6ba-495c-90a1-a0230cc21a44_fixed.java
@@ -1,38 +1,33 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
+        if (escapingOn && start < pattern.length() && c[start] == QUOTE) {
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        int patternLength = pattern.length();
+        while (pos.getIndex() < patternLength) {
+            int currentIndex = pos.getIndex();
+            if (escapingOn) {
+                int escapedQuoteLength = ESCAPED_QUOTE.length();
+                if (currentIndex + escapedQuoteLength <= patternLength) {
+                    String substring = pattern.substring(currentIndex, currentIndex + escapedQuoteLength);
+                    if (ESCAPED_QUOTE.equals(substring)) {
+                        appendTo.append(c, lastHold, currentIndex - lastHold).append(QUOTE);
+                        pos.setIndex(currentIndex + escapedQuoteLength);
                         lastHold = pos.getIndex();
                         continue;
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
+                }
+            }
+            if (c[currentIndex] == QUOTE) {
                 next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+                return appendTo == null ? null : appendTo.append(c, lastHold, currentIndex - lastHold);
+            } else {
                 next(pos);
             }
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
