diff --git a/tmp/915f07d7-72a9-4789-b92e-21792d3a7138_buggy.java b/tmp/bb8d4c1c-9cd9-4be5-8f49-46f3e7cd7751_fixed.java
index b6b11b6..beb7bc0 100644
--- a/tmp/915f07d7-72a9-4789-b92e-21792d3a7138_buggy.java
+++ b/tmp/bb8d4c1c-9cd9-4be5-8f49-46f3e7cd7751_fixed.java
@@ -1,38 +1,26 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        if (start >= pattern.length() || c[start] != QUOTE) {
+            throw new IllegalArgumentException("Not starting with quote at position " + start);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        next(pos); // Consume the opening quote
+        int lastHold = pos.getIndex();
+
+        while (pos.getIndex() < pattern.length()) {
+            if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[pos.getIndex()] == QUOTE) { // Closing quote
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                next(pos); // Consume the closing quote
+                return appendTo;
             }
+            next(pos);
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
