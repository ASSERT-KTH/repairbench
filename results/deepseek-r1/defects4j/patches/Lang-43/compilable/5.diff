diff --git a/tmp/edbfb744-8467-4029-b273-250360d4785d_buggy.java b/tmp/65d3f5b4-d431-4236-9fce-d9610d2f0e50_fixed.java
index b6b11b6..7c81608 100644
--- a/tmp/edbfb744-8467-4029-b273-250360d4785d_buggy.java
+++ b/tmp/65d3f5b4-d431-4236-9fce-d9610d2f0e50_fixed.java
@@ -1,38 +1,30 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
         int lastHold = start;
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
+            if (escapingOn && i <= pattern.length() - ESCAPED_QUOTE.length() 
+                    && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                }
+                i += ESCAPED_QUOTE.length() - 1; // -1 because loop increments i
+                pos.setIndex(i + 1);
+                lastHold = i + 1;
                 continue;
             }
-            switch (c[pos.getIndex()]) {
+            switch (c[i]) {
             case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
+                }
+                pos.setIndex(i + 1);
+                return appendTo;
             default:
-                next(pos);
+                // Continue processing
             }
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
