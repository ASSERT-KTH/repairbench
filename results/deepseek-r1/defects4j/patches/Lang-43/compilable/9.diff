diff --git a/tmp/345c711a-88ca-4134-994c-88c1b5025c36_buggy.java b/tmp/49f76825-9baa-4836-866e-f5e72c44eada_fixed.java
index b6b11b6..40e02ea 100644
--- a/tmp/345c711a-88ca-4134-994c-88c1b5025c36_buggy.java
+++ b/tmp/49f76825-9baa-4836-866e-f5e72c44eada_fixed.java
@@ -1,38 +1,30 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        
+        if (start >= pattern.length() || c[start] != QUOTE) {
+            throw new IllegalArgumentException("Unterminated quoted string at position " + start);
         }
-        int lastHold = start;
+        next(pos); // Consume opening quote
+        int lastHold = pos.getIndex();
+
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
+            if (escapingOn && i + ESCAPED_QUOTE.length() <= pattern.length() 
+                    && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
                 pos.setIndex(i + ESCAPED_QUOTE.length());
+                i = pos.getIndex() - 1; // Adjust for loop increment
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+            if (c[i] == QUOTE) {
+                appendTo.append(c, lastHold, i - lastHold);
+                pos.setIndex(i + 1); // Consume closing quote
+                return appendTo;
             }
+            next(pos);
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
