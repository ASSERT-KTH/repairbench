diff --git a/tmp/23e02dab-5522-49fa-a98f-5ab65a2f0f78_buggy.java b/tmp/692f929e-518b-4b4f-9478-ed9474b010a8_fixed.java
index b6b11b6..f4f7520 100644
--- a/tmp/23e02dab-5522-49fa-a98f-5ab65a2f0f78_buggy.java
+++ b/tmp/692f929e-518b-4b4f-9478-ed9474b010a8_fixed.java
@@ -1,38 +1,28 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
 private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
         StringBuffer appendTo, boolean escapingOn) {
     int start = pos.getIndex();
     char[] c = pattern.toCharArray();
     if (escapingOn && c[start] == QUOTE) {
         return appendTo == null ? null : appendTo.append(QUOTE);
     }
     int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+    while (pos.getIndex() < pattern.length()) {
+        int currentIndex = pos.getIndex();
+        if (escapingOn && currentIndex + ESCAPED_QUOTE.length() <= pattern.length() 
+                && pattern.startsWith(ESCAPED_QUOTE, currentIndex)) {
+            appendTo.append(c, lastHold, currentIndex - lastHold).append(QUOTE);
+            pos.setIndex(currentIndex + ESCAPED_QUOTE.length());
             lastHold = pos.getIndex();
             continue;
         }
-            switch (c[pos.getIndex()]) {
+        switch (c[currentIndex]) {
             case QUOTE:
                 next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                return appendTo == null ? null : appendTo.append(c, lastHold, currentIndex - lastHold);
             default:
                 next(pos);
         }
     }
     throw new IllegalArgumentException(
             "Unterminated quoted string at position " + start);
 }
\ No newline at end of file
