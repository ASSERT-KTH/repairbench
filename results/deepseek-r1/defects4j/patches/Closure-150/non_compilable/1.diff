diff --git a/tmp/2290efe1-d767-4477-9092-b18a403a5142_buggy.java b/tmp/e8a87f76-aee3-473c-acc3-8e02ecd16878_fixed.java
index 800e6e1..a6e9b3c 100644
--- a/tmp/2290efe1-d767-4477-9092-b18a403a5142_buggy.java
+++ b/tmp/e8a87f76-aee3-473c-acc3-8e02ecd16878_fixed.java
@@ -1,32 +1,43 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          JSDocInfo jsDoc = n.getJSDocInfo();
+          if (jsDoc != null) {
+            Node expr = n.getFirstChild();
+            if (expr != null && expr.getType() == Token.GETPROP) {
+              Node owner = expr.getFirstChild();
+              String propName = expr.getLastChild().getString();
+              defineQNameExpressionStub(owner, propName, jsDoc);
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
