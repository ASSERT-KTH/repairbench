diff --git a/tmp/e9f2a95b-e2d7-4af2-8f39-ec03421463f7_buggy.java b/tmp/ae1ea79e-7619-4a1b-aaff-b0e94afe1f6c_fixed.java
index 800e6e1..77c16a6 100644
--- a/tmp/e9f2a95b-e2d7-4af2-8f39-ec03421463f7_buggy.java
+++ b/tmp/ae1ea79e-7619-4a1b-aaff-b0e94afe1f6c_fixed.java
@@ -1,32 +1,54 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          Node expr = n.getFirstChild();
+          if (expr != null && expr.isQualifiedName()) {
+            JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);
+            if (jsDoc != null && jsDoc.hasType()) {
+              String qName = expr.getQualifiedName();
+              int lastDotIndex = qName.lastIndexOf('.');
+              if (lastDotIndex != -1) {
+                String ownerName = qName.substring(0, lastDotIndex);
+                String propName = qName.substring(lastDotIndex + 1);
+                Var ownerVar = scope.getVar(ownerName);
+                if (ownerVar != null) {
+                  JSType ownerType = ownerVar.getType();
+                  if (ownerType instanceof ObjectType) {
+                    JSType propType = jsDoc.getType().evaluate(scope, typeRegistry);
+                    ((ObjectType) ownerType).defineDeclaredProperty(propName, propType, expr);
+                  }
+                }
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
