diff --git a/tmp/1e8d9d97-59f6-47c3-8a23-d665e8e36312_buggy.java b/tmp/56cce9a3-bf63-40de-b045-a167d6f68e29_fixed.java
index 800e6e1..c4a61e3 100644
--- a/tmp/1e8d9d97-59f6-47c3-8a23-d665e8e36312_buggy.java
+++ b/tmp/56cce9a3-bf63-40de-b045-a167d6f68e29_fixed.java
@@ -1,32 +1,48 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.GETPROP:
+          if (parent != null && parent.getType() == Token.EXPR_RESULT) {
+            JSType type = n.getJSType();
+            if (type != null) {
+              Node objNode = n.getFirstChild();
+              String propName = n.getLastChild().getString();
+              Var var = scope.getVar(objNode.getQualifiedName());
+              if (var != null) {
+                JSType objType = var.getType();
+                if (objType instanceof ObjectType) {
+                  ((ObjectType) objType).defineDeclaredProperty(propName, type, n);
+                }
+              }
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
