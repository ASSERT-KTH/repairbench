diff --git a/tmp/64098894-5b6b-4c76-afa7-ac048d39e7bf_buggy.java b/tmp/0bf0fbf4-8e5f-4a79-8ff2-e1fe18495964_fixed.java
index 31f58d4..fe7c6ce 100644
--- a/tmp/64098894-5b6b-4c76-afa7-ac048d39e7bf_buggy.java
+++ b/tmp/0bf0fbf4-8e5f-4a79-8ff2-e1fe18495964_fixed.java
@@ -1,101 +1,129 @@
-    /**
-     * <p>An implementation of {@link Parser}'s abstract
-     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>
-     *
-     * <p>The following are the rules used by this flatten method.
-     * <ol>
-     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not
-     *  burst anymore of <code>arguments</code> entries, just add each
-     *  successive entry without further processing.  Otherwise, ignore
-     *  <code>stopAtNonOption</code>.</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>--</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is "<b>-</b>"
-     *  just add the entry to the list of processed tokens</li>
-     *  <li>if the current <code>arguments</code> entry is two characters
-     *  in length and the first character is "<b>-</b>" then check if this
-     *  is a valid {@link Option} id.  If it is a valid id, then add the
-     *  entry to the list of processed tokens and set the current {@link Option}
-     *  member.  If it is not a valid id and <code>stopAtNonOption</code>
-     *  is true, then the remaining entries are copied to the list of 
-     *  processed tokens.  Otherwise, the current entry is ignored.</li>
-     *  <li>if the current <code>arguments</code> entry is more than two
-     *  characters in length and the first character is "<b>-</b>" then
-     *  we need to burst the entry to determine its constituents.  For more
-     *  information on the bursting algorithm see 
-     *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>
-     *  <li>if the current <code>arguments</code> entry is not handled 
-     *  by any of the previous rules, then the entry is added to the list
-     *  of processed tokens.</li>
-     * </ol>
-     * </p>
-     *
-     * @param options The command line {@link Options}
-     * @param arguments The command line arguments to be parsed
-     * @param stopAtNonOption Specifies whether to stop flattening
-     * when an non option is found.
-     * @return The flattened <code>arguments</code> String array.
-     */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
         init();
         this.options = options;
 
         // an iterator for the command line tokens
         Iterator iter = Arrays.asList(arguments).iterator();
 
+        boolean stopProcessing = false;
+
         // process each command line token
-        while (iter.hasNext())
+        while (iter.hasNext() && !stopProcessing)
         {
             // get the next command line token
             String token = (String) iter.next();
 
             // handle long option --foo or --foo=bar
             if (token.startsWith("--"))
             {
-                if (token.indexOf('=') != -1)
+                int equalIndex = token.indexOf('=');
+                String optionPart = equalIndex != -1 ? token.substring(0, equalIndex) : token;
+                if (this.options.hasOption(optionPart))
                 {
-                    tokens.add(token.substring(0, token.indexOf('=')));
-                    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));
+                    if (equalIndex != -1)
+                    {
+                        tokens.add(optionPart);
+                        tokens.add(token.substring(equalIndex + 1));
                     }
                     else
                     {
                         tokens.add(token);
                     }
+                    gobble(iter);
+                }
+                else
+                {
+                    if (stopAtNonOption)
+                    {
+                        tokens.add(token);
+                        stopProcessing = true;
+                    }
+                    else
+                    {
+                        if (equalIndex != -1)
+                        {
+                            tokens.add(optionPart);
+                            tokens.add(token.substring(equalIndex + 1));
+                        }
+                        else
+                        {
+                            tokens.add(token);
+                        }
+                        gobble(iter);
+                    }
+                }
             }
 
             // single hyphen
             else if ("-".equals(token))
             {
                 tokens.add(token);
             }
             else if (token.startsWith("-"))
             {
                 if (token.length() == 2)
+                {
+                    String opt = token.substring(1);
+                    if (this.options.hasOption(opt))
                     {
                         processOptionToken(token, stopAtNonOption);
                     }
-                else if (options.hasOption(token))
+                    else
+                    {
+                        if (stopAtNonOption)
+                        {
+                            tokens.add(token);
+                            stopProcessing = true;
+                        }
+                        else
+                        {
+                            tokens.add(token);
+                        }
+                    }
+                }
+                else if (this.options.hasOption(token))
                 {
                     tokens.add(token);
                 }
                 // requires bursting
                 else
+                {
+                    if (stopAtNonOption)
+                    {
+                        tokens.add(token);
+                        stopProcessing = true;
+                    }
+                    else
                     {
                         burstToken(token, stopAtNonOption);
                     }
                 }
+            }
             else if (stopAtNonOption)
             {
-                process(token);
+                tokens.add(token);
+                stopProcessing = true;
             }
             else
             {
                 tokens.add(token);
             }
 
+            if (!stopProcessing)
+            {
                 gobble(iter);
             }
+        }
+
+        // Add remaining tokens if stopped processing
+        if (stopProcessing)
+        {
+            while (iter.hasNext())
+            {
+                tokens.add((String) iter.next());
+            }
+        }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
