diff --git a/tmp/ac8e14cb-cb1a-4e4b-9c06-24d1436c1d9e_buggy.java b/tmp/9d6117c7-0300-4088-a595-f43a4082ebc7_fixed.java
index 4bbd561..6dfe0cf 100644
--- a/tmp/ac8e14cb-cb1a-4e4b-9c06-24d1436c1d9e_buggy.java
+++ b/tmp/9d6117c7-0300-4088-a595-f43a4082ebc7_fixed.java
@@ -1,37 +1,51 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+        char first = input.charAt(index);
+        char second = input.charAt(index + 1);
+        if (first != '&' || second != '#') {
+            return 0;
+        }
+
         int start = index + 2;
+        if (start >= input.length()) {
+            return 0;
+        }
+
         boolean isHex = false;
-
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        char third = input.charAt(start);
+        if (third == 'x' || third == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
+        String number = input.subSequence(start, end).toString();
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            int entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
+            if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {
+                return 0;
             }
+            out.write(Character.toChars(entityValue));
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
