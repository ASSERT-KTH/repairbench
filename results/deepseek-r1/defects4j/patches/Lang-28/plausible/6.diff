diff --git a/tmp/647ce1fb-3695-48cb-ad99-33fd6933b0df_buggy.java b/tmp/5c9b2dbe-2f2e-4c87-9638-a3489fb0060c_fixed.java
index 4bbd561..11f6ba0 100644
--- a/tmp/647ce1fb-3695-48cb-ad99-33fd6933b0df_buggy.java
+++ b/tmp/5c9b2dbe-2f2e-4c87-9638-a3489fb0060c_fixed.java
@@ -1,37 +1,59 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < 0 || index >= input.length()) {
+            return 0;
+        }
+        if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                if (start >= input.length()) {
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
+                String number = input.subSequence(start, end).toString();
+                if (number.isEmpty()) {
+                    return 0;
+                }
                 if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(number, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(number, 10);
                 }
+
+                if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {
+                    return 0;
+                }
+
+                out.write(Character.toChars(entityValue));
             } catch(NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
