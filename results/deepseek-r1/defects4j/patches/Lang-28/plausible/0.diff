diff --git a/tmp/1ea2ebdb-87c0-4396-8895-6efc7112a49b_buggy.java b/tmp/09663feb-ee7c-4723-8ec4-79586d40eaae_fixed.java
index 4bbd561..ea7ca3d 100644
--- a/tmp/1ea2ebdb-87c0-4396-8895-6efc7112a49b_buggy.java
+++ b/tmp/09663feb-ee7c-4723-8ec4-79586d40eaae_fixed.java
@@ -1,37 +1,53 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 2 >= input.length()) {
+            return 0;
+        }
+        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
+
+        if (start >= input.length()) {
+            return 0;
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
+        String number = input.subSequence(start, end).toString();
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(number, 16) : Integer.parseInt(number, 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        if (!Character.isValidCodePoint(entityValue)) {
+            return 0;
+        }
+
+        char[] chars = Character.toChars(entityValue);
+        out.write(chars);
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
