diff --git a/tmp/f8a27dd4-723b-47e9-8027-a090a5be9da4_buggy.java b/tmp/d06ee370-db1d-4426-8de1-cd17a770d56c_fixed.java
index 4bbd561..d45998a 100644
--- a/tmp/f8a27dd4-723b-47e9-8027-a090a5be9da4_buggy.java
+++ b/tmp/d06ee370-db1d-4426-8de1-cd17a770d56c_fixed.java
@@ -1,37 +1,65 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+
+        char first = input.charAt(index);
+        char second = input.charAt(index + 1);
+
+        if (first == '&' && second == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+                if (start >= input.length()) {
+                    return 0;
+                }
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length() || input.charAt(end) != ';' || end == start) {
+                return 0;
+            }
+
+            String numberStr = input.subSequence(start, end).toString();
             int entityValue;
             try {
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numberStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numberStr, 10);
                 }
-            } catch(NumberFormatException nfe) {
+            } catch (NumberFormatException e) {
+                return 0;
+            }
+
+            if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {
+                return 0;
+            }
+
+            try {
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars);
+            } catch (IllegalArgumentException e) {
                 return 0;
             }
 
-                out.write(entityValue);
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
