diff --git a/tmp/a946435a-346f-42f1-9976-5152c1ce7fd7_buggy.java b/tmp/ddb7c5b5-501a-41cc-a31e-0468a1622f76_fixed.java
index b98f0a7..a0d4592 100644
--- a/tmp/a946435a-346f-42f1-9976-5152c1ce7fd7_buggy.java
+++ b/tmp/ddb7c5b5-501a-41cc-a31e-0468a1622f76_fixed.java
@@ -1,29 +1,49 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    
+    if (ct != null && ct.isConstructor()) {
+      Node params = ct.getParametersNode();
+      int paramIndex = 0;
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        JSType expectedType = null;
+        if (params != null) {
+          Node param = params.getFirstChild();
+          for (int i = 0; i < paramIndex; i++) {
+            param = param.getNext();
+            if (param == null) break;
+          }
+          if (param != null) {
+            expectedType = param.getJSType();
+          }
+        }
+        scope = traverse(arg, scope, expectedType);
+        paramIndex++;
+      }
+    } else {
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
+    
     return scope;
   }
\ No newline at end of file
