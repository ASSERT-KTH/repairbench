diff --git a/tmp/90e71db2-0ea0-4e49-b4bd-6c307cd93c0f_buggy.java b/tmp/8faff375-89d4-4bd0-a5c2-cf9762f1a8c0_fixed.java
index b98f0a7..948ccb9 100644
--- a/tmp/90e71db2-0ea0-4e49-b4bd-6c307cd93c0f_buggy.java
+++ b/tmp/8faff375-89d4-4bd0-a5c2-cf9762f1a8c0_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+    int paramIndex = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      JSType expectedType = null;
+      if (ct != null && ct.isConstructor() && paramIndex < ct.getParameterCount()) {
+        expectedType = ct.getParameterType(paramIndex);
+      }
+      if (expectedType != null) {
+        scope = traverse(arg, scope, expectedType);
+      } else {
         scope = traverse(arg, scope);
       }
+      paramIndex++;
+    }
     return scope;
   }
\ No newline at end of file
