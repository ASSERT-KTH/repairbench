diff --git a/tmp/9c594186-e5ce-458a-8ebf-696de2a6adc1_buggy.java b/tmp/747a3a30-fabb-4ae1-93f0-5db796215983_fixed.java
index b98f0a7..e7bb344 100644
--- a/tmp/9c594186-e5ce-458a-8ebf-696de2a6adc1_buggy.java
+++ b/tmp/747a3a30-fabb-4ae1-93f0-5db796215983_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    if (ct != null && ct.isConstructor()) {
+      ImmutableList<JSType> paramTypes = ct.getParameters();
+      int index = 0;
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), index++) {
+        if (index < paramTypes.size()) {
+          JSType expectedType = paramTypes.get(index);
+          scope = scope.inferSlot(arg, expectedType);
+        }
+        scope = traverse(arg, scope);
+      }
+    } else {
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
+
     return scope;
   }
\ No newline at end of file
