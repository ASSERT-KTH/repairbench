diff --git a/tmp/6ca44138-0857-47f4-a86c-062fda141a51_buggy.java b/tmp/c6adb2a6-79da-42dd-96d1-5944beb16f03_fixed.java
index b98f0a7..89eaac6 100644
--- a/tmp/6ca44138-0857-47f4-a86c-062fda141a51_buggy.java
+++ b/tmp/c6adb2a6-79da-42dd-96d1-5944beb16f03_fixed.java
@@ -1,29 +1,48 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
+    boolean isConstructor = false;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
-        if (ct != null && ct.isConstructor()) {
+        if (ct != null) {
+          isConstructor = ct.isConstructor();
+          if (isConstructor) {
             type = ct.getInstanceType();
           }
         }
       }
+    }
     n.setJSType(type);
+
+    if (ct != null && isConstructor) {
+      List<JSType> paramTypes = ct.getParameters();
+      int paramIndex = 0;
+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramIndex++) {
+        JSType expectedType = (paramIndex < paramTypes.size()) ? paramTypes.get(paramIndex) : null;
+        FlowScope argScope = scope;
+        if (expectedType != null) {
+          argScope = argScope.createChildFlowScope();
+          argScope.inferQualifiedSlot(arg, expectedType);
+        }
+        scope = traverse(arg, argScope);
+      }
+    } else {
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
+
     return scope;
   }
\ No newline at end of file
