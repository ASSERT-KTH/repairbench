diff --git a/tmp/90947c23-548b-41b9-8851-1ec0ecad5deb_buggy.java b/tmp/4b23923f-1322-450d-8254-9df898f9fc7a_fixed.java
index b98f0a7..de0269b 100644
--- a/tmp/90947c23-548b-41b9-8851-1ec0ecad5deb_buggy.java
+++ b/tmp/4b23923f-1322-450d-8254-9df898f9fc7a_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+            ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    if (ct != null && ct.isConstructor()) {
+        List<JSType> paramTypes = ct.getParameters();
+        int paramIndex = 0;
+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramIndex++) {
+            JSType expectedType = (paramIndex < paramTypes.size()) ? paramTypes.get(paramIndex) : null;
+            FlowScope argScope = scope;
+            if (expectedType != null) {
+                argScope = argScope.createChildFlowScope();
+                argScope.inferExpectedType(arg.getJSType(), expectedType);
+            }
+            scope = traverse(arg, argScope);
+        }
+    } else {
         for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
             scope = traverse(arg, scope);
         }
+    }
+
     return scope;
 }
\ No newline at end of file
