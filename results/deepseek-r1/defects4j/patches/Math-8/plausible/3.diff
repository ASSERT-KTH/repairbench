diff --git a/tmp/60181b4a-1a5e-4a71-a30e-dbbd6db93daf_buggy.java b/tmp/4142373f-26a5-48e0-8e14-410874816b11_fixed.java
index bfa2423..7f207df 100644
--- a/tmp/60181b4a-1a5e-4a71-a30e-dbbd6db93daf_buggy.java
+++ b/tmp/4142373f-26a5-48e0-8e14-410874816b11_fixed.java
@@ -1,23 +1,29 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        Class<?> commonSuperclass = Object.class;
+        if (!singletons.isEmpty()) {
+            commonSuperclass = singletons.get(0).getClass();
+            for (T element : singletons) {
+                Class<?> currentClass = element.getClass();
+                while (!commonSuperclass.isAssignableFrom(currentClass)) {
+                    commonSuperclass = commonSuperclass.getSuperclass();
+                    if (commonSuperclass == null) {
+                        commonSuperclass = Object.class;
+                        break;
+                    }
+                }
+            }
+        }
+
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonSuperclass, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
