diff --git a/tmp/d98e6989-b3f6-4426-8553-d762ef59216f_buggy.java b/tmp/657c5391-156a-471c-aacb-3a0be50d9e36_fixed.java
index bfa2423..7fae410 100644
--- a/tmp/d98e6989-b3f6-4426-8553-d762ef59216f_buggy.java
+++ b/tmp/657c5391-156a-471c-aacb-3a0be50d9e36_fixed.java
@@ -1,23 +1,40 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        if (singletons.isEmpty()) {
+            throw new IllegalStateException("Cannot determine class for empty singletons list.");
+        }
+
+        // Compute the common superclass of all singletons
+        Class<?> commonClass = singletons.get(0).getClass();
+        for (T instance : singletons) {
+            Class<?> currentClass = instance.getClass();
+            while (!commonClass.isAssignableFrom(currentClass)) {
+                commonClass = commonClass.getSuperclass();
+                if (commonClass == null) {
+                    commonClass = Object.class;
+                    break;
+                }
+            }
+        }
+
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonClass, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
 
     }
\ No newline at end of file
