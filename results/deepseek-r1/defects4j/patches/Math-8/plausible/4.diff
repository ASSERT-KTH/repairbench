diff --git a/tmp/2b4c88fb-55d0-42c0-8de3-f293bd095f7c_buggy.java b/tmp/0390039d-0ecf-4739-bbf3-444f841e5e2c_fixed.java
index bfa2423..6a73049 100644
--- a/tmp/2b4c88fb-55d0-42c0-8de3-f293bd095f7c_buggy.java
+++ b/tmp/0390039d-0ecf-4739-bbf3-444f841e5e2c_fixed.java
@@ -1,23 +1,33 @@
     /**
      * Generate a random sample from the distribution.
      *
      * @param sampleSize the number of random values to generate.
      * @return an array representing the random sample.
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        Class<?> componentType = Object.class;
+        if (!singletons.isEmpty()) {
+            componentType = singletons.get(0).getClass();
+            for (T element : singletons) {
+                if (!componentType.isInstance(element)) {
+                    componentType = Object.class;
+                    break;
+                }
+            }
+        }
+
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
