diff --git a/tmp/283c1ae9-d5c4-4fd4-8825-9d255ac88dff_buggy.java b/tmp/d0f132fd-3bcb-42ef-a404-b6412578f34d_fixed.java
index bfa2423..3f59f07 100644
--- a/tmp/283c1ae9-d5c4-4fd4-8825-9d255ac88dff_buggy.java
+++ b/tmp/d0f132fd-3bcb-42ef-a404-b6412578f34d_fixed.java
@@ -1,23 +1,34 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+        // Determine the common superclass of all singletons
+        Class<?> commonClass = null;
+        for (T singleton : singletons) {
+            if (commonClass == null) {
+                commonClass = singleton.getClass();
+            } else {
+                Class<?> currentClass = singleton.getClass();
+                while (commonClass != null && !commonClass.isAssignableFrom(currentClass)) {
+                    commonClass = commonClass.getSuperclass();
+                }
+                if (commonClass == null) {
+                    commonClass = Object.class;
+                }
+            }
+        }
+
+        if (commonClass == null) {
+            throw new IllegalStateException("Unable to determine common superclass for singletons.");
+        }
+
+        final T[] out = (T[]) java.lang.reflect.Array.newInstance(commonClass, sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
         }
 
         return out;
-
     }
\ No newline at end of file
