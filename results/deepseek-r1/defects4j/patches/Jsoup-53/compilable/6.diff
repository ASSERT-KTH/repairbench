diff --git a/tmp/e768e477-107a-4a18-be09-ea9a7babf4c9_buggy.java b/tmp/680f73ff-e9ac-4ad5-a1ae-533f33ca1c2c_fixed.java
index fecb896..9d71e19 100644
--- a/tmp/e768e477-107a-4a18-be09-ea9a7babf4c9_buggy.java
+++ b/tmp/680f73ff-e9ac-4ad5-a1ae-533f33ca1c2c_fixed.java
@@ -1,34 +1,45 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char quoteChar = '\0'; // Tracks if we're inside a quote: '\0' means not in a quote
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume(); // unbox to primitive char for direct comparison
+
+        // Check for quotes, but only if not escaped
+        if (last != '\\') { // if previous char was not an escape
+            if (c == '\'' || c == '"') {
+                if (quoteChar == '\0') {
+                    quoteChar = c; // enter quote
+                } else if (quoteChar == c) {
+                    quoteChar = '\0'; // exit quote
+                }
+            }
+        }
+
+        // Process open/close only if not in a quote and not escaped
+        if (quoteChar == '\0' && (last == 0 || last != '\\')) {
+            if (c == open) {
                 depth++;
-                    if (start == -1)
-                        start = pos;
+                if (start == -1) {
+                    start = pos - 1; // pos is after consume, so current char is at pos-1
                 }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
+        if (depth > 0 && last != 0) {
+            end = pos; // update end to current position after consuming the character
+        }
+
+        last = c; // update last to current character
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    if (start == -1) return "";
+    if (end == -1) end = start;
+    return queue.substring(start, end);
 }
\ No newline at end of file
