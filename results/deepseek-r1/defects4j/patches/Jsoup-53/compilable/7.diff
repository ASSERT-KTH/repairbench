diff --git a/tmp/76400bb1-67d2-455d-901d-ef3c28ccd8ce_buggy.java b/tmp/52fa5615-7f07-43ac-b89b-8024e57ebe1f_fixed.java
index fecb896..64b1c35 100644
--- a/tmp/76400bb1-67d2-455d-901d-ef3c28ccd8ce_buggy.java
+++ b/tmp/52fa5615-7f07-43ac-b89b-8024e57ebe1f_fixed.java
@@ -1,34 +1,39 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    char inQuote = 0;
 
     do {
         if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+        char c = consume();
+
+        // Handle quotes
+        if (inQuote != 0) {
+            if (c == inQuote && (last != ESC)) {
+                inQuote = 0; // exit quote
+            }
+        } else {
+            if ((c == '\'' || c == '"') && (last != ESC)) {
+                inQuote = c; // enter quote
+            }
+        }
+
+        // Process open/close only if not in a quote and not escaped
+        if (inQuote == 0 && (last == 0 || last != ESC)) {
+            if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close) {
                 depth--;
             }
+        }
 
         if (depth > 0 && last != 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+    return (start != -1 && end != -1) ? queue.substring(start, end) : "";
 }
\ No newline at end of file
