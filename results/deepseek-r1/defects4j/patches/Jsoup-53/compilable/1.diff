diff --git a/tmp/1630dcef-4af8-4146-a301-801933bdc846_buggy.java b/tmp/1f279c85-4ef0-4ae1-bc22-2608338e559c_fixed.java
index fecb896..7fc23e9 100644
--- a/tmp/1630dcef-4af8-4146-a301-801933bdc846_buggy.java
+++ b/tmp/1f279c85-4ef0-4ae1-bc22-2608338e559c_fixed.java
@@ -1,34 +1,48 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        char inQuote = '\0';
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume();
+            boolean isEscaped = (last == ESC);
+
+            if (!isEscaped) {
+                if (inQuote != '\0') {
+                    if (c == inQuote) {
+                        inQuote = '\0';
+                    }
+                } else {
+                    if (c == '\'' || c == '"') {
+                        inQuote = c;
+                    }
+                }
+            }
+
+            if (inQuote == '\0' && !isEscaped) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
+                    if (start == -1) {
+                        start = pos - 1; // pos is after consume, adjust to current character's position
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
                 }
+            }
+
+            if (depth > 0) {
+                end = pos; // update end while depth is positive
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        if (start != -1 && end > start) {
+            return queue.substring(start, end);
+        } else {
+            return "";
+        }
     }
\ No newline at end of file
