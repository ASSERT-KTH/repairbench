diff --git a/tmp/8b8d2909-f75c-44e3-afe0-df855974f57b_buggy.java b/tmp/f4e4df40-8815-4057-85bc-e9d412ab0d62_fixed.java
index 8e93a5e..827d0d7 100644
--- a/tmp/8b8d2909-f75c-44e3-afe0-df855974f57b_buggy.java
+++ b/tmp/f4e4df40-8815-4057-85bc-e9d412ab0d62_fixed.java
@@ -1,43 +1,42 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        String[] lines = text.split(defaultNewLine, -1);
+        String padding = createPadding(nextLineTabStop);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        for (int i = 0; i < lines.length; i++) {
+            String line = lines[i];
+            if (i > 0) {
+                sb.append(defaultNewLine);
+                line = padding + line.trim();
+            }
+            renderLine(sb, width, i > 0 ? nextLineTabStop : 0, line);
+        }
 
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    private void renderLine(StringBuffer sb, int width, int currentLineTabStop, String line) {
+        int pos = findWrapPos(line, width, currentLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        if (pos == -1) {
+            sb.append(rtrim(line));
+            return;
+        }
 
-            if (pos == -1)
-            {
-                sb.append(text);
+        sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+        String remaining = line.substring(pos).trim();
 
-                return sb;
+        while (true) {
+            remaining = createPadding(currentLineTabStop) + remaining;
+            pos = findWrapPos(remaining, width, currentLineTabStop);
+
+            if (pos == -1) {
+                sb.append(remaining);
+                return;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(rtrim(remaining.substring(0, pos))).append(defaultNewLine);
+            remaining = remaining.substring(pos).trim();
         }
     }
\ No newline at end of file
