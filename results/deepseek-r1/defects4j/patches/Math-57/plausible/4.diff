diff --git a/tmp/233b960f-5ace-4ce4-9d7e-2f8aa427b378_buggy.java b/tmp/9b1c1ae1-a2e0-4cd0-9da7-08f65e1ec556_fixed.java
index ad4b0d8..9e219a1 100644
--- a/tmp/233b960f-5ace-4ce4-9d7e-2f8aa427b378_buggy.java
+++ b/tmp/9b1c1ae1-a2e0-4cd0-9da7-08f65e1ec556_fixed.java
@@ -1,47 +1,61 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
         final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sum = 0;
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
+                final double dSq = d * d;
+                if (dSq > 0.0) {
+                    sum += dSq;
                     dx2[i] = sum;
+                } else {
+                    dx2[i] = -1.0; // Mark as ineligible
+                }
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
+            // probability proportional to D(x)^2
+            if (sum == 0) {
+                // All remaining points are duplicates; choose uniformly
+                final int index = random.nextInt(pointSet.size());
+                final T p = pointSet.remove(index);
+                resultSet.add(new Cluster<T>(p));
+            } else {
                 final double r = random.nextDouble() * sum;
                 for (int i = 0; i < dx2.length; i++) {
+                    if (dx2[i] < 0) {
+                        continue; // Skip ineligible points
+                    }
                     if (dx2[i] >= r) {
                         final T p = pointSet.remove(i);
                         resultSet.add(new Cluster<T>(p));
                         break;
                     }
                 }
             }
+        }
 
         return resultSet;
-
     }
\ No newline at end of file
