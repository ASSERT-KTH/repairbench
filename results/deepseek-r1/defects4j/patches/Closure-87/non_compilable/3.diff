diff --git a/tmp/1d4ab6b4-a053-433f-805c-8c788e28cb44_buggy.java b/tmp/5b9b708c-0f1c-4ede-b09e-16aae6b6cbdc_fixed.java
index 19fd63e..4db6058 100644
--- a/tmp/1d4ab6b4-a053-433f-805c-8c788e28cb44_buggy.java
+++ b/tmp/5b9b708c-0f1c-4ede-b09e-16aae6b6cbdc_fixed.java
@@ -1,24 +1,27 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node call = maybeExpr.getFirstChild();
+          if (call != null && call.getType() == Token.CALL) {
+            Node function = call.getFirstChild();
+            if (function.getType() == Token.GETPROP) {
+              // Check if the method's object is implicitly 'this'
+              Node obj = function.getFirstChild();
+              if (NodeUtil.isImplicitThis(obj)) {
+                // Avoid folding due to IE bug with implicit 'this'
+                return false;
+              }
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
