diff --git a/tmp/ae30d7e0-ac86-400e-b1a8-24a2f83336cd_buggy.java b/tmp/03ee5308-14b4-4d43-9cd1-769555dab6e6_fixed.java
index 19fd63e..9933b0f 100644
--- a/tmp/ae30d7e0-ac86-400e-b1a8-24a2f83336cd_buggy.java
+++ b/tmp/03ee5308-14b4-4d43-9cd1-769555dab6e6_fixed.java
@@ -1,24 +1,27 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node exprChild = maybeExpr.getFirstChild();
+          // Check if the expression is a call to an event handler method with implicit 'this'
+          if (exprChild != null && exprChild.getType() == Token.CALL) {
+            Node function = exprChild.getFirstChild();
+            if (function != null && function.getType() == Token.GETPROP) {
+              String methodName = function.getLastChild().getString();
+              if (methodName.startsWith("on")) {
+                // Avoid folding due to IE bug
+                return false;
+              }
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
