diff --git a/tmp/65e87663-16ff-491c-8406-b8e85cb0a19e_buggy.java b/tmp/3a35602e-732d-4e4c-a79a-4f4b73f74cd1_fixed.java
index 19fd63e..07a9a97 100644
--- a/tmp/65e87663-16ff-491c-8406-b8e85cb0a19e_buggy.java
+++ b/tmp/3a35602e-732d-4e4c-a79a-4f4b73f74cd1_fixed.java
@@ -1,24 +1,26 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null && expr.getType() == Token.CALL) {
+            Node callee = expr.getFirstChild();
+            if (callee != null && callee.getType() == Token.GETPROP) {
+              String propName = callee.getLastChild().getString();
+              if (propName.startsWith("on")) {
+                // It's an event handler method call, prevent folding due to IE bug.
+                return false;
+              }
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
