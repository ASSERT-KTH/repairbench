diff --git a/tmp/044a516c-6298-4109-abed-c84b1ac5b2cf_buggy.java b/tmp/0fe372e3-8d86-4260-a92a-014ecb535cb2_fixed.java
index 822447c..6fb5a55 100644
--- a/tmp/044a516c-6298-4109-abed-c84b1ac5b2cf_buggy.java
+++ b/tmp/0fe372e3-8d86-4260-a92a-014ecb535cb2_fixed.java
@@ -1,37 +1,56 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
+        int i = 0;
+        while (i < len) {
             char c = str.charAt(i);
-            String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
-                    writer.write(';');
+            int codePoint;
+            if (Character.isHighSurrogate(c)) {
+                if (i + 1 < len) {
+                    char next = str.charAt(i + 1);
+                    if (Character.isLowSurrogate(next)) {
+                        codePoint = Character.toCodePoint(c, next);
+                        i += 2;
                     } else {
-                    writer.write(c);
+                        codePoint = c;
+                        i += 1;
                     }
                 } else {
+                    codePoint = c;
+                    i += 1;
+                }
+            } else if (Character.isLowSurrogate(c)) {
+                codePoint = c;
+                i += 1;
+            } else {
+                codePoint = c;
+                i += 1;
+            }
+
+            String entityName;
+            if (codePoint <= Character.MAX_VALUE) {
+                entityName = this.entityName((char) codePoint);
+            } else {
+                entityName = null;
+            }
+
+            if (entityName != null) {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
+            } else {
+                if (codePoint > 0x7F) {
+                    writer.write("&#");
+                    writer.write(Integer.toString(codePoint, 10));
+                    writer.write(';');
+                } else {
+                    if (codePoint <= Character.MAX_VALUE) {
+                        writer.write((char) codePoint);
+                    } else {
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                    }
+                }
             }
         }
     }
\ No newline at end of file
