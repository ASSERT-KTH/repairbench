diff --git a/tmp/bad0b19d-743a-45ab-9f94-2bbb00d58b76_buggy.java b/tmp/db0e920a-da7c-47aa-9bf7-0a35bc732e59_fixed.java
index 822447c..d3dca0d 100644
--- a/tmp/bad0b19d-743a-45ab-9f94-2bbb00d58b76_buggy.java
+++ b/tmp/db0e920a-da7c-47aa-9bf7-0a35bc732e59_fixed.java
@@ -1,37 +1,26 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
+        int i = 0;
+        while (i < len) {
+            int codePoint = str.codePointAt(i);
+            if (codePoint <= 0xFFFF) {
+                char c = (char) codePoint;
                 String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
-                    writer.write(';');
-                } else {
-                    writer.write(c);
-                }
-            } else {
+                if (entityName != null) {
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
+                    i += Character.charCount(codePoint);
+                    continue;
                 }
             }
+            if (codePoint > 0x7F) {
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+            } else {
+                writer.write(codePoint);
+            }
+            i += Character.charCount(codePoint);
+        }
     }
\ No newline at end of file
