diff --git a/tmp/d11393a9-c7ea-4b7e-a93a-f5daf853f26c_buggy.java b/tmp/2bbf588e-1fe0-438d-9ae7-28566c635a2e_fixed.java
index 5f8ac1a..0d23877 100644
--- a/tmp/d11393a9-c7ea-4b7e-a93a-f5daf853f26c_buggy.java
+++ b/tmp/2bbf588e-1fe0-438d-9ae7-28566c635a2e_fixed.java
@@ -1,34 +1,42 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
+            // Handle cases where one pointer is a variable (no parent) and the other is a node
+            if (p1.parent == null && p2.parent != null) {
+                return -1; // Variables come before nodes
+            } else if (p1.parent != null && p2.parent == null) {
+                return 1; // Nodes come after variables
+            } else {
                 throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
             }
+        }
+
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
