diff --git a/tmp/68d8555a-9a1e-40ac-b24d-c6c8883e2d33_buggy.java b/tmp/4441e01e-54c1-4fe6-9408-a440c55db263_fixed.java
index 5f8ac1a..8c3bdb2 100644
--- a/tmp/68d8555a-9a1e-40ac-b24d-c6c8883e2d33_buggy.java
+++ b/tmp/4441e01e-54c1-4fe6-9408-a440c55db263_fixed.java
@@ -1,34 +1,52 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
+            NodePointer root1 = p1;
+            while (root1 != null && root1.parent != null) {
+                root1 = root1.parent;
+            }
+            NodePointer root2 = p2;
+            while (root2 != null && root2.parent != null) {
+                root2 = root2.parent;
+            }
+            if (root1 != root2) {
+                if (root1 == null) return -1;
+                if (root2 == null) return 1;
+                return Integer.compare(
+                    System.identityHashCode(root1),
+                    System.identityHashCode(root2)
+                );
+            } else {
                 throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
             }
+        }
+
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
