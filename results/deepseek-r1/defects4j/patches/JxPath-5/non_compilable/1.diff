diff --git a/tmp/46e14eb2-ecbd-427c-9b80-e16127768eaf_buggy.java b/tmp/e206d9ff-2ea7-4b6b-941e-6955120d9fdb_fixed.java
index 5f8ac1a..9a5caa9 100644
--- a/tmp/46e14eb2-ecbd-427c-9b80-e16127768eaf_buggy.java
+++ b/tmp/e206d9ff-2ea7-4b6b-941e-6955120d9fdb_fixed.java
@@ -1,34 +1,44 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
         if (p1 == null && p2 == null) {
             return 0;
         }
 
         if (p1 != null && p1.equals(p2)) {
             return 0;
         }
 
         if (depth1 == 1) {
+            boolean p1IsVar = p1 instanceof VariablePointer;
+            boolean p2IsVar = p2 instanceof VariablePointer;
+            if (p1IsVar || p2IsVar) {
+                if (p1IsVar && p2IsVar) {
+                    String name1 = ((VariablePointer) p1).getVariableName();
+                    String name2 = ((VariablePointer) p2).getVariableName();
+                    return name1.compareTo(name2);
+                }
+                return p1IsVar ? -1 : 1;
+            }
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
