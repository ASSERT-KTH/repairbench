diff --git a/tmp/aa27dc33-6afb-4747-a586-4984bdb4c0f7_buggy.java b/tmp/e32525bd-a711-4052-b85b-d8f4455b9af9_fixed.java
index 3127f85..1bd64ec 100644
--- a/tmp/aa27dc33-6afb-4747-a586-4984bdb4c0f7_buggy.java
+++ b/tmp/e32525bd-a711-4052-b85b-d8f4455b9af9_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        final double z = dev / standardDeviation;
+        if (z <= -40.0) {
+            return 0.0;
+        }
+        if (z >= 40.0) {
+            return 1.0;
+        }
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                       (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+        } catch (ConvergenceException ex) {
+            if (z <= -20.0) {
+                return 0.0;
+            } else if (z >= 20.0) {
+                return 1.0;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
