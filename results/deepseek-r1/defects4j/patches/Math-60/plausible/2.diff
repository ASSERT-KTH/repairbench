diff --git a/tmp/be8e26ea-1acb-47af-9a85-c657b9ae05c9_buggy.java b/tmp/290b73ac-50d1-44ce-bd96-7e8d1ff68c57_fixed.java
index 3127f85..d60bcae 100644
--- a/tmp/be8e26ea-1acb-47af-9a85-c657b9ae05c9_buggy.java
+++ b/tmp/290b73ac-50d1-44ce-bd96-7e8d1ff68c57_fixed.java
@@ -1,24 +1,20 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        final double zScore = dev / standardDeviation;
+        if (zScore < -40) {
+            return 0.0;
+        } else if (zScore > 40) {
+            return 1.0;
+        }
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
