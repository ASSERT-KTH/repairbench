diff --git a/tmp/a048b950-e55f-4349-8769-68f8f1784b01_buggy.java b/tmp/970d4ec5-3d7e-48f2-9147-fdc8e3f1713f_fixed.java
index 3127f85..a2fbdb7 100644
--- a/tmp/a048b950-e55f-4349-8769-68f8f1784b01_buggy.java
+++ b/tmp/970d4ec5-3d7e-48f2-9147-fdc8e3f1713f_fixed.java
@@ -1,24 +1,20 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        final double z = dev / standardDeviation;
+        if (z < -40) {
+            return 0.0;
+        } else if (z > 40) {
+            return 1.0;
+        }
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            if (dev < -20 * standardDeviation) {
+                return 0.0;
+            } else if (dev > 20 * standardDeviation) {
+                return 1.0;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
