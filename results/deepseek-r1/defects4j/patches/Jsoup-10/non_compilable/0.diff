diff --git a/tmp/35c4408d-d482-4583-ab50-f1a3db781cf0_buggy.java b/tmp/581928ba-e6a5-4456-bbd5-fa67bc987a2b_fixed.java
index b4e6f03..4b29564 100644
--- a/tmp/35c4408d-d482-4583-ab50-f1a3db781cf0_buggy.java
+++ b/tmp/581928ba-e6a5-4456-bbd5-fa67bc987a2b_fixed.java
@@ -1,44 +1,42 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
     public String absUrl(String attributeKey) {
         Validate.notEmpty(attributeKey);
 
         String relUrl = attr(attributeKey);
         if (!hasAttr(attributeKey)) {
             return ""; // nothing to make absolute with
         } else {
             URL base;
             try {
                 try {
                     base = new URL(baseUri);
                 } catch (MalformedURLException e) {
                     // the base is unsuitable, but the attribute may be abs on its own, so try that
                     URL abs = new URL(relUrl);
                     return abs.toExternalForm();
                 }
+                // Handle relative URLs starting with '?' to preserve the base path
+                if (relUrl.startsWith("?")) {
+                    try {
+                        URI baseUri = base.toURI();
+                        String path = baseUri.getPath() == null ? "" : baseUri.getPath();
+                        // Construct the URI with the base's components and the new query
+                        URI absUri = new URI(
+                            baseUri.getScheme(), 
+                            baseUri.getAuthority(), 
+                            path, 
+                            relUrl.substring(1), // query without leading '?'
+                            null // fragment
+                        );
+                        return absUri.toURL().toExternalForm();
+                    } catch (URISyntaxException | MalformedURLException ex) {
+                        return "";
+                    }
+                }
                 // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
                 URL abs = new URL(base, relUrl);
                 return abs.toExternalForm();
             } catch (MalformedURLException e) {
                 return "";
             }
         }
     }
\ No newline at end of file
