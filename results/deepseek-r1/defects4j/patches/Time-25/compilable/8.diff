diff --git a/tmp/24864643-05ee-474d-bfdc-515c7b9ba403_buggy.java b/tmp/1a37bea6-a059-4be6-be8f-821b47878510_fixed.java
index 05aaf2d..a2727e5 100644
--- a/tmp/24864643-05ee-474d-bfdc-515c7b9ba403_buggy.java
+++ b/tmp/1a37bea6-a059-4be6-be8f-821b47878510_fixed.java
@@ -1,56 +1,28 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
     public int getOffsetFromLocal(long instantLocal) {
-        // get the offset at instantLocal (first estimate)
+        // Get the initial offset estimate by treating instantLocal as UTC (incorrect, but starting point)
         final int offsetLocal = getOffset(instantLocal);
-        // adjust instantLocal using the estimate and recalc the offset
+        // Adjust the instant to UTC using the initial estimate
         final long instantAdjusted = instantLocal - offsetLocal;
         final int offsetAdjusted = getOffset(instantAdjusted);
-        // if the offsets differ, we must be near a DST boundary
+        // Check if the initial and adjusted offsets differ (indicating a possible DST boundary)
         if (offsetLocal != offsetAdjusted) {
-            // we need to ensure that time is always after the DST gap
-            // this happens naturally for positive offsets, but not for negative
+            // If the offset decreased, check transitions to handle DST gap
             if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
                 long nextLocal = nextTransition(instantAdjusted);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
             }
+        } else {
+            // Check if the previous millisecond has a different offset (indicating DST overlap)
+            if (instantAdjusted > Long.MIN_VALUE) {
+                int offsetBefore = getOffset(instantAdjusted - 1);
+                if (offsetBefore > offsetAdjusted) {
+                    // In overlap, return the earlier offset (summer time)
+                    return offsetBefore;
+                }
+            }
         }
         return offsetAdjusted;
     }
\ No newline at end of file
