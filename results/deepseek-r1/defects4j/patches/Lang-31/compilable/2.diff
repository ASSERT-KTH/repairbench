diff --git a/tmp/195f4c1b-1346-4c1a-b4df-d66b9db9975d_buggy.java b/tmp/92cbff17-e772-40e7-aec7-7c094ec4de66_fixed.java
index eea9e73..e4235cd 100644
--- a/tmp/195f4c1b-1346-4c1a-b4df-d66b9db9975d_buggy.java
+++ b/tmp/92cbff17-e772-40e7-aec7-7c094ec4de66_fixed.java
@@ -1,41 +1,32 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 	public static boolean containsAny(CharSequence cs, char[] searchChars) {
 		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
 			return false;
 		}
 		int csLength = cs.length();
 		int searchLength = searchChars.length;
 		for (int i = 0; i < csLength; i++) {
 			char ch = cs.charAt(i);
+			if (Character.isHighSurrogate(ch)) {
+				if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+					// Skip the next character as it's part of the surrogate pair
+					i++;
+					continue;
+				}
+			} else if (Character.isLowSurrogate(ch)) {
+				// Check if the previous character was not a high surrogate
+				if (i == 0 || !Character.isHighSurrogate(cs.charAt(i - 1))) {
+					// Proceed to check this standalone low surrogate
+				} else {
+					// Part of a surrogate pair, already handled
+					continue;
+				}
+			}
+			// Check the current character against the searchChars
 			for (int j = 0; j < searchLength; j++) {
 				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
 					return true;
 				}
 			}
 		}
 		return false;
 	}
\ No newline at end of file
