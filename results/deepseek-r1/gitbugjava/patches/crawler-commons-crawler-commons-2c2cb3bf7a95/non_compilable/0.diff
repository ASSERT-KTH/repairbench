diff --git a/tmp/c920279c-2d87-446a-839b-cee2fb5057ea_buggy.java b/tmp/630e39f7-8687-4c40-a09e-c30d1ea8c215_fixed.java
index fd205cf..c797ac9 100644
--- a/tmp/c920279c-2d87-446a-839b-cee2fb5057ea_buggy.java
+++ b/tmp/630e39f7-8687-4c40-a09e-c30d1ea8c215_fixed.java
@@ -1,151 +1,201 @@
     private SimpleRobotRules parseContent(String url, byte[] content, String contentType, Collection<String> robotNames, boolean exactUserAgentMatching) {
 
         // If there's nothing there, treat it like we have no restrictions.
         if ((content == null) || (content.length == 0)) {
             return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
         }
 
         int bytesLen = content.length;
         int offset = 0;
         Charset encoding = StandardCharsets.US_ASCII;
 
         // Check for a UTF-8 BOM at the beginning (EF BB BF)
         if ((bytesLen >= 3) && (content[0] == (byte) 0xEF) && (content[1] == (byte) 0xBB) && (content[2] == (byte) 0xBF)) {
             offset = 3;
             bytesLen -= 3;
             encoding = StandardCharsets.UTF_8;
         }
         // Check for UTF-16LE BOM at the beginning (FF FE)
         else if ((bytesLen >= 2) && (content[0] == (byte) 0xFF) && (content[1] == (byte) 0xFE)) {
             offset = 2;
             bytesLen -= 2;
             encoding = StandardCharsets.UTF_16LE;
         }
         // Check for UTF-16BE BOM at the beginning (FE FF)
         else if ((bytesLen >= 2) && (content[0] == (byte) 0xFE) && (content[1] == (byte) 0xFF)) {
             offset = 2;
             bytesLen -= 2;
             encoding = StandardCharsets.UTF_16BE;
         }
 
+        // Parse charset from Content-Type if no BOM was found
+        if (encoding == StandardCharsets.US_ASCII) {
+            String charset = parseCharsetFromContentType(contentType);
+            if (charset != null) {
+                try {
+                    encoding = Charset.forName(charset);
+                } catch (IllegalArgumentException e) {
+                    LOGGER.debug("Unsupported charset '{}' specified in Content-Type, using UTF-8", charset);
+                    encoding = StandardCharsets.UTF_8;
+                }
+            } else {
+                // Default to UTF-8 per RFC 9309
+                encoding = StandardCharsets.UTF_8;
+            }
+        }
+
         String contentAsStr;
         contentAsStr = new String(content, offset, bytesLen, encoding);
 
         // Decide if we need to do special HTML processing.
         boolean isHtmlType = ((contentType != null) && contentType.toLowerCase(Locale.ROOT).startsWith("text/html"));
 
         // If it looks like it contains HTML, but doesn't have a user agent
         // field, then
         // assume somebody messed up and returned back to us a random HTML page
         // instead
         // of a robots.txt file.
         boolean hasHTML = false;
         if (isHtmlType || SIMPLE_HTML_PATTERN.matcher(contentAsStr).find()) {
             if (!USER_AGENT_PATTERN.matcher(contentAsStr).find()) {
                 LOGGER.trace("Found non-robots.txt HTML file: " + url);
                 return new SimpleRobotRules(RobotRulesMode.ALLOW_ALL);
             } else {
                 // We'll try to strip out HTML tags below.
                 if (isHtmlType) {
                     LOGGER.debug("HTML content type returned for robots.txt file: " + url);
                 } else {
                     LOGGER.debug("Found HTML in robots.txt file: " + url);
                 }
 
                 hasHTML = true;
             }
         }
 
         // Break on anything that might be used as a line ending. Since
         // tokenizer doesn't return empty tokens, a \r\n sequence still
         // works since it looks like an empty string between the \r and \n.
         StringTokenizer lineParser = new StringTokenizer(contentAsStr, "\n\r\u0085\u2028\u2029");
         ParseState parseState = new ParseState(url, robotNames);
 
         while (lineParser.hasMoreTokens()) {
             String line = lineParser.nextToken();
 
             // Get rid of HTML markup, in case some brain-dead webmaster has
             // created an HTML
             // page for robots.txt. We could do more sophisticated processing
             // here to better
             // handle bad HTML, but that's a very tiny percentage of all
             // robots.txt files.
             if (hasHTML) {
                 line = line.replaceAll("<[^>]+>", "");
             }
 
             // trim out comments and whitespace
             int hashPos = line.indexOf("#");
             if (hashPos >= 0) {
                 line = line.substring(0, hashPos);
             }
 
             line = line.trim();
             if (line.length() == 0) {
                 continue;
             }
 
             RobotToken token = tokenize(line);
             switch (token.getDirective()) {
                 case USER_AGENT:
                     handleUserAgent(parseState, token);
                     break;
 
                 case DISALLOW:
                     parseState.setFinishedAgentFields(true);
-                handleDisallow(parseState, token);
+                    handleDisallow(parseState, encodeTokenValue(token));
                     break;
 
                 case ALLOW:
                     parseState.setFinishedAgentFields(true);
-                handleAllow(parseState, token);
+                    handleAllow(parseState, encodeTokenValue(token));
                     break;
 
                 case CRAWL_DELAY:
                     parseState.setFinishedAgentFields(true);
                     handleCrawlDelay(parseState, token);
                     break;
 
                 case SITEMAP:
                     parseState.setFinishedAgentFields(true);
                     handleSitemap(parseState, token);
                     break;
 
                 case HTTP:
                     parseState.setFinishedAgentFields(true);
                     handleHttp(parseState, token);
                     break;
 
                 case UNKNOWN:
                     reportWarning(parseState, "Unknown directive in robots.txt file: {}", line);
                     parseState.setFinishedAgentFields(true);
                     break;
 
                 case MISSING:
                     reportWarning(parseState, "Unknown line in robots.txt file (size {}): {}", content.length, line);
                     parseState.setFinishedAgentFields(true);
                     break;
 
                 default:
                     // All others we just ignore
                     // TODO KKr - which of these should be setting
                     // finishedAgentFields to true?
                     // TODO KKr - handle no-index
                     // TODO KKr - handle request-rate and visit-time
                     break;
             }
         }
 
         this._numWarningsDuringLastParse.set(parseState._numWarnings);
         SimpleRobotRules result = parseState.getRobotRules();
         if (result.getCrawlDelay() > _maxCrawlDelay) {
             // Some evil sites use a value like 3600 (seconds) for the crawl
             // delay, which would cause lots of problems for us.
             LOGGER.debug("Crawl delay exceeds max value - so disallowing all URLs: {}", url);
             return new SimpleRobotRules(RobotRulesMode.ALLOW_NONE);
         } else {
             result.sortRules();
             return result;
         }
     }
+
+    private String parseCharsetFromContentType(String contentType) {
+        if (contentType == null) {
+            return null;
+        }
+        String[] parts = contentType.split(";");
+        for (String part : parts) {
+            part = part.trim();
+            if (part.toLowerCase(Locale.ROOT).startsWith("charset=")) {
+                String charset = part.substring("charset=".length()).trim();
+                // Remove quotes if present
+                if (charset.length() > 0 && (charset.charAt(0) == '"' || charset.charAt(0) == '\'')) {
+                    charset = charset.substring(1);
+                }
+                if (charset.length() > 0 && (charset.charAt(charset.length() - 1) == '"' || charset.charAt(charset.length() - 1) == '\'')) {
+                    charset = charset.substring(0, charset.length() - 1);
+                }
+                return charset;
+            }
+        }
+        return null;
+    }
+
+    private RobotToken encodeTokenValue(RobotToken token) {
+        String value = token.getValue();
+        try {
+            URI uri = new URI(null, null, value, null);
+            String encodedValue = uri.toASCIIString();
+            return new RobotToken(token.getDirective(), encodedValue);
+        } catch (URISyntaxException e) {
+            LOGGER.debug("Error encoding token value: {}", value, e);
+            return token;
+        }
+    }
\ No newline at end of file
