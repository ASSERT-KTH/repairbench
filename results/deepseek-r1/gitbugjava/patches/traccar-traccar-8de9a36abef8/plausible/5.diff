diff --git a/tmp/d8a7671c-00b1-4175-b9c3-21587e06a40b_buggy.java b/tmp/3dfc4b1d-0851-4a59-9207-5c8239e421e2_fixed.java
index ad77f15..9c1f396 100644
--- a/tmp/d8a7671c-00b1-4175-b9c3-21587e06a40b_buggy.java
+++ b/tmp/3dfc4b1d-0851-4a59-9207-5c8239e421e2_fixed.java
@@ -1,112 +1,273 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+            if (index < values.length) {
+                position.setValid("A".equals(values[index]));
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    String latStr = values[index];
+                    double latitude = Double.parseDouble(latStr.substring(1));
+                    if (latStr.charAt(0) == 'S') {
+                        latitude = -latitude;
+                    }
+                    position.setLatitude(latitude);
+                } catch (StringIndexOutOfBoundsException | NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    String lonStr = values[index];
+                    double longitude = Double.parseDouble(lonStr.substring(1));
+                    if (lonStr.charAt(0) == 'W') {
+                        longitude = -longitude;
+                    }
+                    position.setLongitude(longitude);
+                } catch (StringIndexOutOfBoundsException | NumberFormatException ignored) {
+                }
             }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index])));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setCourse(Integer.parseInt(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.setAltitude(Integer.parseInt(values[index]));
+                } catch (NumberFormatException ignored) {
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
             if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                index++;
+            }
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
             }
             if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                index++;
             }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+            int mcc = 0, mnc = 0, lac = 0, cid = 0, rssi = 0;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mcc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    mnc = Integer.parseInt(values[index]);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    lac = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    cid = Integer.parseInt(values[index], 16);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    rssi = Integer.parseInt(values[index]);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, rssi)));
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index]));
+                } catch (NumberFormatException ignored) {
                 }
-                if (index < values.length) {
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
+                    int totalHours = (Integer.parseInt(hours[0]) * 3600
                             + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000;
+                    position.set(Position.KEY_HOURS, totalHours);
+                } catch (NumberFormatException ignored) {
                 }
+            }
+            index++;
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_POWER, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
                 }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index]));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(values[index], 16));
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    int io = Integer.parseInt(values[index], 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
+                } catch (NumberFormatException ignored) {
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
+            }
+            index++;
+            String geo1 = index < values.length ? values[index] : "";
+            index++;
+            String geo2 = index < values.length ? values[index] : "";
+            index++;
+            position.set(Position.KEY_GEOFENCE, geo1 + geo2);
+            if (index < values.length) {
+                position.set("eventStatus", values[index]);
+            }
+            index++;
             if (index < values.length) {
-                    position.set("packetType", values[index++]);
+                position.set("packetType", values[index]);
+                index++;
             }
             break;
         case "ETD":
-                position.set("eventData", values[index++]);
+            if (index < values.length) {
+                position.set("eventData", values[index]);
+                index++;
+            }
             break;
         case "OBD":
-                position.set("obd", values[index++]);
+            if (index < values.length) {
+                position.set("obd", values[index]);
+                index++;
+            }
             break;
         case "TAG":
-                position.set("tagData", values[index++]);
+            if (index < values.length) {
+                position.set("tagData", values[index]);
+                index++;
+            }
             break;
         case "IWD":
             while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
-                    if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                int sensorIndex = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        sensorIndex = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException ignored) {
+                    }
+                }
+                index++;
+                int dataType = 0;
+                if (index < values.length && !values[index].isEmpty()) {
+                    try {
+                        dataType = Integer.parseInt(values[index]);
+                    } catch (NumberFormatException ignored) {
+                    }
+                }
+                index++;
+                if (dataType == 0 && index < values.length) {
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index]);
+                    index++;
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    index++; // temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
+                        try {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index]));
+                        } catch (NumberFormatException ignored) {
+                        }
+                    }
+                    index++;
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
