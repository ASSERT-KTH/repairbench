diff --git a/tmp/4ad72f4a-b76e-458e-9ddb-96ac25a11aea_buggy.java b/tmp/b64b2242-4cb1-43c6-bde3-3534eb2b0e42_fixed.java
index c9c77a4..d2c48c5 100644
--- a/tmp/4ad72f4a-b76e-458e-9ddb-96ac25a11aea_buggy.java
+++ b/tmp/b64b2242-4cb1-43c6-bde3-3534eb2b0e42_fixed.java
@@ -1,35 +1,41 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            URI originalUri = u.toURI();
+            String encodedPath = originalUri.getRawPath();
+            
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                null, // path is handled via the URI string construction
+                null, null
             );
 
             String normUrl = uri.toASCIIString();
+            // Replace the path part with the original encoded path
+            int pathStart = normUrl.indexOf('/', normUrl.indexOf("://") + 3);
+            StringBuilder sb = new StringBuilder();
+            if (pathStart == -1) {
+                sb.append(normUrl).append(encodedPath);
+            } else {
+                sb.append(normUrl.substring(0, pathStart)).append(encodedPath);
+            }
+
             if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
-                normUrl = StringUtil.releaseBuilder(sb);
             }
-            u =  new URL(normUrl);
+            u = new URL(sb.toString());
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
\ No newline at end of file
