diff --git a/tmp/6fe58d94-afb0-4430-bfdc-60d498a244d2_buggy.java b/tmp/62b5dfb0-0697-49f6-aba1-866fa1e3e5fb_fixed.java
index d8d8dec..700d361 100644
--- a/tmp/6fe58d94-afb0-4430-bfdc-60d498a244d2_buggy.java
+++ b/tmp/62b5dfb0-0697-49f6-aba1-866fa1e3e5fb_fixed.java
@@ -1,182 +1,227 @@
 private Position decodePosition(
         Channel channel, DeviceSession deviceSession, ByteBuf buf, int type, int index, ByteBuf imei) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
+    // Validate buffer size at the beginning
+    if (buf.readableBytes() < 1) {
+        return null; // Handle case of insufficient data gracefully
+    }
+
     position.set(Position.KEY_INDEX, index);
 
     if (header != 0x2727) {
 
         buf.readUnsignedShort(); // acc on interval
         buf.readUnsignedShort(); // acc off interval
         buf.readUnsignedByte(); // angle compensation
         buf.readUnsignedShort(); // distance compensation
 
+        if (buf.readableBytes() >= 2) {
             position.set(Position.KEY_RSSI, BitUtil.to(buf.readUnsignedShort(), 7));
-
+        } else {
+            return null; // Not enough data for RSSI, handle gracefully
+        }
     }
 
     int status = buf.readUnsignedByte();
     position.set(Position.KEY_SATELLITES, BitUtil.to(status, 5));
 
     if (header != 0x2727) {
 
         buf.readUnsignedByte(); // gsensor manager status
         buf.readUnsignedByte(); // other flags
         buf.readUnsignedByte(); // heartbeat
         buf.readUnsignedByte(); // relay status
         buf.readUnsignedShort(); // drag alarm setting
 
         int io = buf.readUnsignedShort();
         position.set(Position.KEY_IGNITION, BitUtil.check(io, 14));
         position.set("ac", BitUtil.check(io, 13));
         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 12));
         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 11));
 
         if (type == MSG_GPS_2 || type == MSG_ALARM_2) {
+            if (buf.readableBytes() >= 1) {
                 position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
+            }
             buf.readUnsignedByte(); // reserved
         } else {
+            if (buf.readableBytes() >= 6) {
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 7));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 8));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 9));
             }
+        }
 
         if (header != 0x2626) {
             int adcCount = type == MSG_GPS_2 || type == MSG_ALARM_2 ? 5 : 2;
             for (int i = 1; i <= adcCount; i++) {
+                if (buf.readableBytes() < 2) {
+                    break; // Not enough data, gracefully stop further parsing
+                }
                 String value = ByteBufUtil.hexDump(buf.readSlice(2));
                 if (!value.equals("ffff")) {
-                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value) * 0.01);
+                    try {
+                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value, 16) * 0.01);
+                    } catch (NumberFormatException e) {
+                        // Log error and continue
+                    }
                 }
             }
         }
 
     }
 
+    if (buf.readableBytes() >= 1) {
         int alarm = buf.readUnsignedByte();
         position.set(Position.KEY_ALARM, header != 0x2727 ? decodeAlarm1(alarm) : decodeAlarm2(alarm));
         position.set("alarmCode", alarm);
+    } else {
+        return null; // Not enough data for alarm processing, handle gracefully
+    }
 
     if (header != 0x2727) {
 
         buf.readUnsignedByte(); // reserved
 
+        if (buf.readableBytes() >= 4) {
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+        }
 
+        if (buf.readableBytes() >= 2) {
             int battery = BcdUtil.readInteger(buf, 2);
             position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);
+        }
 
     }
 
     if (BitUtil.check(status, 6)) {
 
         position.setValid(true);
         position.setTime(readDate(buf));
+        if (buf.readableBytes() >= 16) {
             position.setAltitude(buf.readFloatLE());
             position.setLongitude(buf.readFloatLE());
             position.setLatitude(buf.readFloatLE());
             position.setSpeed(UnitsConverter.knotsFromKph(BcdUtil.readInteger(buf, 4) * 0.1));
+        }
+        if (buf.readableBytes() >= 2) {
             position.setCourse(buf.readUnsignedShort());
+        }
 
     } else {
 
+        if (buf.readableBytes() >= 6) {
             getLastLocation(position, readDate(buf));
 
             int mcc = buf.readUnsignedShortLE();
             int mnc = buf.readUnsignedShortLE();
 
             if (mcc != 0xffff && mnc != 0xffff) {
                 Network network = new Network();
-                for (int i = 0; i < 3; i++) {
+                while (buf.readableBytes() >= 8) {
                     network.addCellTower(CellTower.from(
                             mcc, mnc, buf.readUnsignedShortLE(), buf.readUnsignedShortLE()));
                 }
                 position.setNetwork(network);
             }
-
+        }
     }
 
     if (header == 0x2727) {
 
+        if (buf.readableBytes() >= 5) {
             byte[] accelerationBytes = new byte[5];
             buf.readBytes(accelerationBytes);
             long acceleration = new BigInteger(accelerationBytes).longValue();
             double accelerationZ = BitUtil.between(acceleration, 8, 15) + BitUtil.between(acceleration, 4, 8) * 0.1;
             if (!BitUtil.check(acceleration, 15)) {
                 accelerationZ = -accelerationZ;
             }
             double accelerationY = BitUtil.between(acceleration, 20, 27) + BitUtil.between(acceleration, 16, 20) * 0.1;
             if (!BitUtil.check(acceleration, 27)) {
                 accelerationY = -accelerationY;
             }
             double accelerationX = BitUtil.between(acceleration, 28, 32) + BitUtil.between(acceleration, 32, 39) * 0.1;
             if (!BitUtil.check(acceleration, 39)) {
                 accelerationX = -accelerationX;
             }
             position.set(Position.KEY_G_SENSOR, "[" + accelerationX + "," + accelerationY + "," + accelerationZ + "]");
+        }
 
+        if (buf.readableBytes() >= 2) {
             int battery = BcdUtil.readInteger(buf, 2);
             position.set(Position.KEY_BATTERY_LEVEL, battery > 0 ? battery : 100);
+        }
+        if (buf.readableBytes() >= 1) {
             position.set(Position.KEY_DEVICE_TEMP, (int) buf.readByte());
+        }
+        if (buf.readableBytes() >= 2) {
             position.set("lightSensor", BcdUtil.readInteger(buf, 2) * 0.1);
+        }
+        if (buf.readableBytes() >= 2) {
             position.set(Position.KEY_BATTERY, BcdUtil.readInteger(buf, 2) * 0.1);
+        }
+        if (buf.readableBytes() >= 2) {
             position.set("solarPanel", BcdUtil.readInteger(buf, 2) * 0.1);
+        }
+        if (buf.readableBytes() >= 4) {
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+        }
 
+        if (buf.readableBytes() >= 2) {
             int inputStatus = buf.readUnsignedShort();
             position.set(Position.KEY_IGNITION, BitUtil.check(inputStatus, 2));
             position.set(Position.KEY_RSSI, BitUtil.between(inputStatus, 4, 11));
             position.set(Position.KEY_INPUT, inputStatus);
+        }
 
-            buf.readUnsignedShort(); // ignition on upload interval
-            buf.readUnsignedInt(); // ignition off upload interval
-            buf.readUnsignedByte(); // angle upload interval
-            buf.readUnsignedShort(); // distance upload interval
-            buf.readUnsignedByte(); // heartbeat
+        buf.skipBytes(Math.min(buf.readableBytes(), 12)); // Skip remaining known bytes
 
     } else {
-
         if (buf.readableBytes() >= 2) {
             position.set(Position.KEY_POWER, BcdUtil.readInteger(buf, 4) * 0.01);
         }
         if (buf.readableBytes() >= 19) {
             position.set(Position.KEY_OBD_SPEED, BcdUtil.readInteger(buf, 4) * 0.01);
             position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.001);
             position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt() * 0.001);
             position.set(Position.KEY_RPM, buf.readUnsignedShort());
-                int value;
-                value = buf.readUnsignedByte();
+
+            if (buf.readableBytes() >= 1) {
+                int value = buf.readUnsignedByte();
                 if (value != 0xff) {
                     position.set("airInput", value);
                 }
                 if (value != 0xff) {
                     position.set("airPressure", value);
                 }
                 if (value != 0xff) {
                     position.set(Position.KEY_COOLANT_TEMP, value - 40);
                 }
                 if (value != 0xff) {
                     position.set("airTemp", value - 40);
                 }
                 if (value != 0xff) {
                     position.set(Position.KEY_ENGINE_LOAD, value);
                 }
                 if (value != 0xff) {
                     position.set(Position.KEY_THROTTLE, value);
                 }
                 if (value != 0xff) {
                     position.set(Position.KEY_FUEL_LEVEL, value);
                 }
             }
         }
+    }
 
     boolean acknowledgement = AttributeUtil.lookup(
             getCacheManager(), Keys.PROTOCOL_ACK.withPrefix(getProtocolName()), deviceSession.getDeviceId());
     if (acknowledgement || type == MSG_ALARM || type == MSG_ALARM_2) {
-            sendResponse(channel, header, type, index, imei, alarm);
+        sendResponse(channel, header, type, index, imei, buf.readableBytes() > 0 ? buf.readUnsignedByte() : 0);
     }
 
     return position;
 }
\ No newline at end of file
