diff --git a/tmp/ac34f1ee-1baf-4f0e-a6e0-bca9ec0fc28e_buggy.java b/tmp/dd0b5c8f-22a6-4778-b90d-b5d2af6f9b66_fixed.java
index 7b9216c..8f4e19d 100644
--- a/tmp/ac34f1ee-1baf-4f0e-a6e0-bca9ec0fc28e_buggy.java
+++ b/tmp/dd0b5c8f-22a6-4778-b90d-b5d2af6f9b66_fixed.java
@@ -1,47 +1,57 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
+    } else {
+        position.set(Position.KEY_BATTERY, (double) battery); // Handle unknown battery values
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
+    // Add logic for parsing additional remaining bytes, if necessary
+    // Store additional information into some attribute if the buffer has extra bytes
+    if (buf.readableBytes() > 0) {
+        byte[] remainingBytes = new byte[buf.readableBytes()];
+        buf.readBytes(remainingBytes);
+        position.set("rawExtraData", remainingBytes); // Store extra bytes for debugging purposes
+    }
+
     return position;
 }
\ No newline at end of file
