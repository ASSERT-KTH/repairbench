diff --git a/tmp/8150d99c-571b-4de4-9a11-4f4a4274b155_buggy.java b/tmp/93158f46-f0a6-4892-98f0-4a5d9b34c208_fixed.java
index f506479..f3dad1c 100644
--- a/tmp/8150d99c-571b-4de4-9a11-4f4a4274b155_buggy.java
+++ b/tmp/93158f46-f0a6-4892-98f0-4a5d9b34c208_fixed.java
@@ -1,64 +1,84 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) 
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs()) 
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null) 
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<Map<String, List<String>>> groupValuesList = new ArrayList<>();
+
+    while (!arguments.isEmpty()) 
+    {
+        final Map<String, List<String>> currentGroupValues = new HashMap<>();
+        boolean isValidGroup = false;
+
+        final NameValuePair firstArg = arguments.peekFirst();
+        if (firstArg == NameValuePair.NULL) 
+        {
+            arguments.pollFirst();
+            continue;
+        }
+
+        if (firstArg.name != null && firstArg.name.equalsIgnoreCase(groupArg.getIdentity().getName())) 
+        {
+            processor.consume(groupArg.getIdentity(), arguments);
+            isValidGroup = true;
+        }
+
         while (!arguments.isEmpty()) 
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL) 
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null) 
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
+            if (arg == null || arg == groupArg.getIdentity()) 
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+            final List<String> argValues = currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) 
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
+            isValidGroup = true;
         }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+        if (isValidGroup) 
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+            groupValuesList.add(currentGroupValues);
         }
     }
 
+    for (Map<String, List<String>> currentGroupValues : groupValuesList) 
+    {
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, currentGroupValues));
+    }
 }
\ No newline at end of file
