diff --git a/tmp/56e421d1-d6b1-496c-9c5f-e2420b1dc23a_buggy.java b/tmp/3bdd63c4-60a4-4067-b0ec-bd62cadf0056_fixed.java
index f506479..2a14be4 100644
--- a/tmp/56e421d1-d6b1-496c-9c5f-e2420b1dc23a_buggy.java
+++ b/tmp/3bdd63c4-60a4-4067-b0ec-bd62cadf0056_fixed.java
@@ -1,64 +1,88 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<Map<DslArg, List<String>>> groupValues = new ArrayList<>();
+
+    while (!arguments.isEmpty())
+    {
+        final Map<DslArg, List<String>> currentGroupValues = new HashMap<>();
+        final Set<DslArg> processedArgs = new HashSet<>();
+
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+            if (processedArgs.contains(arg) && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
+            processedArgs.add(arg);
+
+            final List<String> argValues = currentGroupValues.computeIfAbsent(arg, k -> new ArrayList<>());
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        if (!currentGroupValues.isEmpty())
+        {
+            groupValues.add(currentGroupValues);
+        }
+        else
+        {
+            break;
+        }
+    }
+
+    for (Map<DslArg, List<String>> groupValue : groupValues)
+    {
         final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+        for (final Map.Entry<DslArg, List<String>> entry : groupValue.entrySet())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+            final DslArg arg = entry.getKey();
+            final SimpleDslParam param = processor.collect(arg);
+
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
