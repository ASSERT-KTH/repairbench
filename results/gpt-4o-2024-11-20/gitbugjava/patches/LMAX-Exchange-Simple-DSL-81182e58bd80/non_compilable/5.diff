diff --git a/tmp/10653ce7-1318-4810-b24d-ab0aef215438_buggy.java b/tmp/4c400ea3-ff7a-45e5-956d-0b41f19c9cfb_fixed.java
index f506479..9f19868 100644
--- a/tmp/10653ce7-1318-4810-b24d-ab0aef215438_buggy.java
+++ b/tmp/4c400ea3-ff7a-45e5-956d-0b41f19c9cfb_fixed.java
@@ -1,64 +1,94 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
             final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
             argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
             for (SimpleDslArg dslArg : groupArg.getOtherArgs())
             {
                 if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                 {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
+            final List<Map<String, List<String>>> collectedGroupValues = new ArrayList<>();
+
             while (!arguments.isEmpty())
             {
-                final NameValuePair argument = arguments.peekFirst();
+                final Map<String, List<String>> currentGroupValues = new HashMap<>();
+                boolean hasGroupIdentity = false;
+
+                final Iterator<NameValuePair> iterator = arguments.iterator();
+                while (iterator.hasNext())
+                {
+                    final NameValuePair argument = iterator.next();
+
                     if (argument == NameValuePair.NULL)
                     {
-                    arguments.pollFirst();
                         continue;
                     }
 
                     if (argument.name == null)
                     {
                         throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                     }
 
                     final DslArg arg = argsByName.get(argument.name.toLowerCase());
                     if (arg == null)
                     {
                         break;
                     }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+                    if (arg == groupArg.getIdentity())
+                    {
+                        if (hasGroupIdentity)
+                        {
+                            // If we encounter another group identity, start new group processing
+                            break;
+                        }
+                        hasGroupIdentity = true;
+                    }
+
+                    final List<String> argValues = currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>());
                     if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                     {
                         break;
                     }
 
                     checkValidValue(arg, argument.value);
                     argValues.add(argument.value);
-                arguments.pollFirst();
+                    iterator.remove();
                 }
 
-            // TODO: this whole thing here is a bit hacky!
+                if (hasGroupIdentity)
+                {
+                    collectedGroupValues.add(currentGroupValues);
+                }
+                else
+                {
+                    break;
+                }
+            }
+
+            for (Map<String, List<String>> groupValues : collectedGroupValues)
+            {
                 final Map<String, List<String>> valuesByName = new HashMap<>();
                 for (final SimpleDslArg simpleDslArg : argsByName.values())
                 {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
+                    final List<String> values = groupValues.get(simpleDslArg.getName().toLowerCase());
+                    if (values != null && !values.isEmpty())
                     {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
+                        valuesByName.put(simpleDslArg.getName().toLowerCase(), values);
                     }
                 }
 
                 final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
                 dslArgs[0] = groupArg.getIdentity();
                 System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
                 groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
             }
+        }
\ No newline at end of file
