diff --git a/tmp/5bda778e-5f57-4513-9b77-f7d405fcb080_buggy.java b/tmp/55b199cd-1950-4b3d-88f4-9768a0e6e913_fixed.java
index f506479..e610b8c 100644
--- a/tmp/5bda778e-5f57-4513-9b77-f7d405fcb080_buggy.java
+++ b/tmp/55b199cd-1950-4b3d-88f4-9768a0e6e913_fixed.java
@@ -1,64 +1,91 @@
         void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
         {
             final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
             final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
             processor.consume(groupArg.getIdentity(), arguments);
 
             final Map<String, SimpleDslArg> argsByName = new HashMap<>();
             argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
             for (SimpleDslArg dslArg : groupArg.getOtherArgs())
             {
                 if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
                 {
                     throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
                 }
             }
 
+            List<Map<DslArg, List<String>>> groupValues = new ArrayList<>();
+            Map<DslArg, List<String>> currentValues = createEmptyValuesMap(groupArg);
+            groupValues.add(currentValues);
+
             while (!arguments.isEmpty())
             {
                 final NameValuePair argument = arguments.peekFirst();
                 if (argument == NameValuePair.NULL)
                 {
                     arguments.pollFirst();
                     continue;
                 }
 
                 if (argument.name == null)
                 {
                     throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
                 }
 
                 final DslArg arg = argsByName.get(argument.name.toLowerCase());
                 if (arg == null)
                 {
                     break;
                 }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+                // If it's the identity argument, start a new group
+                if (arg == groupArg.getIdentity())
+                {
+                    if (!currentValues.isEmpty())
+                    {
+                        currentValues = createEmptyValuesMap(groupArg);
+                        groupValues.add(currentValues);
+                    }
+                }
+
+                final List<String> argValues = currentValues.computeIfAbsent(arg, k -> new ArrayList<>());
                 if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
                 {
                     break;
                 }
 
                 checkValidValue(arg, argument.value);
                 argValues.add(argument.value);
                 arguments.pollFirst();
             }
 
-            // TODO: this whole thing here is a bit hacky!
+            for (Map<DslArg, List<String>> values : groupValues)
+            {
                 final Map<String, List<String>> valuesByName = new HashMap<>();
                 for (final SimpleDslArg simpleDslArg : argsByName.values())
                 {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
+                    final SimpleDslParam param = processor.collect(simpleDslArg, values);
                     if (param.hasValue())
                     {
                         valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
                     }
                 }
 
                 final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
                 dslArgs[0] = groupArg.getIdentity();
                 System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
                 groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
             }
+        }
+
+        private Map<DslArg, List<String>> createEmptyValuesMap(RepeatingArgGroup groupArg)
+        {
+            Map<DslArg, List<String>> valuesMap = new HashMap<>();
+            valuesMap.put(groupArg.getIdentity(), new ArrayList<>());
+            for (DslArg arg : groupArg.getOtherArgs())
+            {
+                valuesMap.put(arg, new ArrayList<>());
+            }
+            return valuesMap;
+        }
\ No newline at end of file
