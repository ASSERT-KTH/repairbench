diff --git a/tmp/c4074baa-b067-4ccb-9fc7-33f064c135dc_buggy.java b/tmp/6304f493-933a-4fbf-bbef-30a3c13b8e2c_fixed.java
index f506479..542e74b 100644
--- a/tmp/c4074baa-b067-4ccb-9fc7-33f064c135dc_buggy.java
+++ b/tmp/6304f493-933a-4fbf-bbef-30a3c13b8e2c_fixed.java
@@ -1,64 +1,73 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    // Map to store values for each group iteration
+    final List<Map<DslArg, List<String>>> groupValues = new ArrayList<>();
+    Map<DslArg, List<String>> currentGroupValues = new HashMap<>();
+    groupValues.add(currentGroupValues);
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+        final List<String> argValues = currentGroupValues.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
-                    break;
+            // Start a new group if no more values are allowed for this argument
+            currentGroupValues = new HashMap<>();
+            groupValues.add(currentGroupValues);
+            currentGroupValues.computeIfAbsent(arg, k -> new ArrayList<>()).add(argument.value);
         }
-
+        else
+        {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
+    // Convert groupValues into the required format and add it to groupsByArg
+    for (Map<DslArg, List<String>> groupValue : groupValues)
+    {
         final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
+        for (final Map.Entry<DslArg, List<String>> entry : groupValue.entrySet())
         {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
-                }
+            valuesByName.put(entry.getKey().getName().toLowerCase(), entry.getValue());
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
