diff --git a/tmp/eca1d4b7-7113-42b9-b6c6-c5573e777c3f_buggy.java b/tmp/2d6b2e9c-73ff-4d19-887d-7e3222eb10cc_fixed.java
index 33e2e76..95648ae 100644
--- a/tmp/eca1d4b7-7113-42b9-b6c6-c5573e777c3f_buggy.java
+++ b/tmp/2d6b2e9c-73ff-4d19-887d-7e3222eb10cc_fixed.java
@@ -1,126 +1,147 @@
 private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
     CellTower cellTower = new CellTower();
     String[] keys = form.substring(1).split("%");
     for (String key : keys) {
+        try {
             switch (key) {
                 case "SA":
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 case "MV":
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 case "BV":
                     position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.1);
                     break;
                 case "GQ":
                     cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     break;
                 case "CE":
                     cellTower.setCellId(buf.readUnsignedInt());
                     break;
                 case "LC":
                     cellTower.setLocationAreaCode(buf.readUnsignedShort());
                     break;
                 case "CN":
+                    if (buf.readableBytes() >= 4) { // Ensure sufficient bytes are available
                         int combinedMobileCodes = (int) (buf.readUnsignedInt() % 100000); // cccnn
                         cellTower.setMobileCountryCode(combinedMobileCodes / 100);
                         cellTower.setMobileNetworkCode(combinedMobileCodes % 100);
+                    }
                     break;
                 case "RL":
+                    if (buf.readableBytes() > 0) { // Ensure at least one byte is available
                         buf.readUnsignedByte(); // rxlev
+                    }
                     break;
                 case "PC":
                     position.set(Position.PREFIX_COUNT + 1, buf.readUnsignedInt());
                     break;
                 case "AT":
                     position.setAltitude(buf.readUnsignedInt());
                     break;
                 case "RP":
                     position.set(Position.KEY_RPM, buf.readUnsignedShort());
                     break;
                 case "GS":
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                     break;
                 case "DT":
                     position.set(Position.KEY_ARCHIVE, buf.readUnsignedByte() == 1);
                     break;
                 case "VN":
                     position.set(Position.KEY_VIN, readString(buf));
                     break;
                 case "MF":
+                    if (buf.readableBytes() >= 2) { // Ensure sufficient bytes for short
                         buf.readUnsignedShort(); // mass air flow rate
+                    }
                     break;
                 case "EL":
+                    if (buf.readableBytes() > 0) { // Ensure at least one byte is available
                         buf.readUnsignedByte(); // engine load
+                    }
                     break;
                 case "TR":
                     position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case "ET":
                     position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort());
                     break;
                 case "FL":
                     position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
                     break;
                 case "ML":
+                    if (buf.readableBytes() > 0) { // Ensure at least one byte is available
                         buf.readUnsignedByte(); // mil status
+                    }
                     break;
                 case "FC":
                     position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedInt());
                     break;
                 case "CI":
-                    readString(buf); // format string
+                case "NC":
+                case "GL":
+                case "MA":
+                    readString(buf); // format string, gsm neighbor cell, google link, or mac address
                     break;
                 case "AV1":
                     position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
                     break;
-                case "NC":
-                    readString(buf); // gsm neighbor cell info
-                    break;
                 case "SM":
+                    if (buf.readableBytes() >= 2) { // Ensure sufficient bytes for short
                         buf.readUnsignedShort(); // max speed between reports
-                    break;
-                case "GL":
-                    readString(buf); // google link
-                    break;
-                case "MA":
-                    readString(buf); // mac address
+                    }
                     break;
                 case "PD":
+                    if (buf.readableBytes() > 0) { // Ensure at least one byte is available
                         buf.readUnsignedByte(); // pending code status
+                    }
                     break;
                 case "CD":
                     position.set(Position.KEY_ICCID, readString(buf));
                     break;
                 case "CM":
+                    if (buf.readableBytes() >= 8) { // Ensure sufficient bytes for long
                         buf.readLong(); // imsi
+                    }
                     break;
                 case "GN":
+                    if (buf.readableBytes() >= 60) { // Ensure at least 60 bytes are available
                         buf.skipBytes(60); // g sensor data
+                    }
                     break;
                 case "GV":
+                    if (buf.readableBytes() >= 6) { // Ensure at least 6 bytes are available
                         buf.skipBytes(6); // maximum g force
+                    }
                     break;
                 case "ME":
+                    if (buf.readableBytes() >= 8) { // Ensure sufficient bytes for long
                         buf.readLong(); // imei
+                    }
                     break;
                 case "IA":
-                    buf.readUnsignedByte(); // intake air temperature
-                    break;
                 case "MP":
-                    buf.readUnsignedByte(); // manifold absolute pressure
+                    if (buf.readableBytes() > 0) { // Ensure at least one byte is available
+                        buf.readUnsignedByte();
+                    }
                     break;
                 default:
                     break;
             }
+        } catch (IndexOutOfBoundsException e) {
+            // Gracefully handle cases where the buffer length does not match the expected structure
+            break; // Exit loop to avoid further processing
+        }
     }
 
     if (cellTower.getMobileCountryCode() != null
             && cellTower.getMobileNetworkCode() != null
             && cellTower.getCellId() != null && cellTower.getCellId() != 0
             && cellTower.getLocationAreaCode() != null) {
         position.setNetwork(new Network(cellTower));
     } else if (cellTower.getSignalStrength() != null) {
         position.set(Position.KEY_RSSI, cellTower.getSignalStrength());
     }
 }
\ No newline at end of file
