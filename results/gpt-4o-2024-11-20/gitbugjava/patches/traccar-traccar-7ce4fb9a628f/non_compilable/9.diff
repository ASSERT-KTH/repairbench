diff --git a/tmp/e5fe3862-7f97-4c1b-9fdd-f048aa0b1829_buggy.java b/tmp/5266e4a7-e6de-4094-9c79-90b98d7e879d_fixed.java
index 2b96a40..d5819fc 100644
--- a/tmp/e5fe3862-7f97-4c1b-9fdd-f048aa0b1829_buggy.java
+++ b/tmp/5266e4a7-e6de-4094-9c79-90b98d7e879d_fixed.java
@@ -1,101 +1,109 @@
     protected Object decodePosition(DeviceSession deviceSession, String content) throws Exception {
 
         Parser parser = new Parser(PATTERN_POSITION, content);
         if (!parser.matches()) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         int event = parser.nextInt();
         String eventData = parser.next();
         position.set(Position.KEY_EVENT, event);
         if (event == 53) {
             position.set(Position.KEY_DRIVER_UNIQUE_ID, eventData);
         } else {
             position.set(Position.KEY_ALARM, decodeAlarm(event));
         }
 
         position.setTime(parser.nextDateTime());
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
 
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.set(Position.KEY_HDOP, parser.nextDouble());
 
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setCourse(parser.nextInt());
         position.setAltitude(parser.nextInt());
 
         position.set(Position.KEY_ODOMETER, parser.nextInt());
 
+        String[] networkParts = parser.next().split("\\|");
+        if (networkParts.length >= 5) {
             position.setNetwork(new Network(CellTower.from(
-                parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), parser.nextInt())));
+                    Integer.parseInt(networkParts[0]),
+                    Integer.parseInt(networkParts[1]),
+                    Integer.parseInt(networkParts[2], 16),
+                    Integer.parseInt(networkParts[3], 16),
+                    Integer.parseInt(networkParts[4])
+            )));
+        }
 
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
         int input = parser.nextHexInt();
         int output = parser.nextHexInt();
         position.set(Position.KEY_IGNITION, BitUtil.check(input, 1));
         position.set(Position.KEY_DOOR, BitUtil.check(input, 2));
         position.set(Position.KEY_INPUT, input);
         position.set(Position.KEY_OUTPUT, output);
 
         position.set(Position.KEY_POWER, parser.nextHexInt() * 0.01);
         position.set(Position.KEY_BATTERY, parser.nextHexInt() * 0.01);
 
         if (parser.hasNext()) {
             String[] adc = parser.next().split("\\|");
             for (int i = 1; i < adc.length; i++) {
                 position.set(Position.PREFIX_ADC + (i + 1), Integer.parseInt(adc[i], 16) * 0.01);
             }
         }
 
         if (parser.hasNext()) {
             String[] fuels = parser.next().split("\\|");
             for (String fuel : fuels) {
                 int index = Integer.parseInt(fuel.substring(0, 2));
                 int value = Integer.parseInt(fuel.substring(2), 16);
                 position.set("fuel" + index, value * 0.1);
             }
         }
 
         if (parser.hasNext()) {
             String[] temperatures = parser.next().split("\\|");
             for (String temperature : temperatures) {
                 int index = Integer.parseInt(temperature.substring(0, 2));
                 int value = Integer.parseInt(temperature.substring(2), 16);
                 double convertedValue = BitUtil.to(value, 15);
                 if (BitUtil.check(value, 15)) {
                     convertedValue = -convertedValue;
                 }
                 position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
             }
         }
 
         if (parser.hasNextAny(9)) {
             position.set(Position.KEY_RPM, parser.nextInt());
             position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
             position.set("airFlow", parser.nextInt());
             position.set("airPressure", parser.nextInt());
             if (parser.hasNext()) {
                 position.set("airTemp", parser.nextInt() - 40);
             }
             position.set(Position.KEY_THROTTLE, parser.nextInt());
             if (parser.hasNext()) {
                 position.set(Position.KEY_COOLANT_TEMP, parser.nextInt() - 40);
             }
             if (parser.hasNext()) {
                 position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextInt() * 0.1);
             }
             position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
         }
 
         if (parser.hasNext()) {
             position.set(Position.KEY_HOURS, parser.nextInt() * 1000L);
         }
 
         return position;
     }
\ No newline at end of file
