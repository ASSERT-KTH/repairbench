diff --git a/tmp/5c407ea0-1781-4d3c-8e37-89a5bc1baee5_buggy.java b/tmp/b72711ed-eed2-4095-8749-9c2bd6a95f0f_fixed.java
index 855afa5..f9b5cf4 100644
--- a/tmp/5c407ea0-1781-4d3c-8e37-89a5bc1baee5_buggy.java
+++ b/tmp/b72711ed-eed2-4095-8749-9c2bd6a95f0f_fixed.java
@@ -1,13 +1,32 @@
     static URL encodeUrl(URL u) {
         u = punyUrl(u);
         try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
+            // Encode each component of the URL properly (path, query, and fragment)
+            String protocol = u.getProtocol();
+            String host = u.getHost();
+            int port = u.getPort();
+            String path = u.getPath() != null ? new URI(null, null, u.getPath(), null).getRawPath() : null;
+            String query = u.getQuery() != null ? new URI(null, null, null, u.getQuery(), null).getRawQuery() : null;
+            String fragment = u.getRef() != null ? new URI(null, null, null, null, u.getRef()).getRawFragment() : null;
+
+            StringBuilder urlBuilder = new StringBuilder();
+            urlBuilder.append(protocol).append("://").append(host);
+            if (port != -1) {
+                urlBuilder.append(":").append(port);
+            }
+            if (path != null) {
+                urlBuilder.append(path);
+            }
+            if (query != null) {
+                urlBuilder.append("?").append(query);
+            }
+            if (fragment != null) {
+                urlBuilder.append("#").append(fragment);
+            }
+
+            return new URL(urlBuilder.toString());
         } catch (URISyntaxException | MalformedURLException e) {
             // give up and return the original input
             return u;
         }
     }
\ No newline at end of file
