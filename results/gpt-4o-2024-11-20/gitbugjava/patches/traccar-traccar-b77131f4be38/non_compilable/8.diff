diff --git a/tmp/0fdc129e-781d-445b-b03c-2f856a7d8d6c_buggy.java b/tmp/9e0488e2-f39a-40bc-856e-1b3ce9be00f6_fixed.java
index 7b8ee38..a88cb4a 100644
--- a/tmp/0fdc129e-781d-445b-b03c-2f856a7d8d6c_buggy.java
+++ b/tmp/9e0488e2-f39a-40bc-856e-1b3ce9be00f6_fixed.java
@@ -1,179 +1,182 @@
 @Override
-    protected Object decode(
-            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     ByteBuf buf = (ByteBuf) msg;
 
     buf.skipBytes(1); // '[' header
-        manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
+    String manufacturer = buf.readSlice(2).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1); // '*' delimiter
 
     int idIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (idIndex == -1) {
+        throw new IllegalArgumentException("Delimiter '*' not found for id");
+    }
+
     String id = buf.readSlice(idIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
     if (deviceSession == null) {
         return null;
     }
 
     buf.skipBytes(1); // '*' delimiter
 
     String index = null;
     int contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+    if (contentIndex == -1) {
+        throw new IllegalArgumentException("Delimiter '*' not found for payload content");
+    }
+
+    boolean hasIndex = false;
     if (contentIndex + 5 < buf.writerIndex() && buf.getByte(contentIndex + 5) == '*'
             && buf.toString(contentIndex + 1, 4, StandardCharsets.US_ASCII).matches("\\p{XDigit}+")) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
+        int indexLength = contentIndex - buf.readerIndex();
         hasIndex = true;
         index = buf.readSlice(indexLength).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // '*' delimiter
     }
 
     buf.skipBytes(4); // length
     buf.skipBytes(1); // '*' delimiter
 
     buf.writerIndex(buf.writerIndex() - 1); // ']' ignore ending
 
-        contentIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
-        if (contentIndex < 0) {
-            contentIndex = buf.writerIndex();
+    int typeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
+    if (typeIndex < 0) {
+        typeIndex = buf.writerIndex();
     }
 
-        String type = buf.readSlice(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
+    String type = buf.readSlice(typeIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
 
-        if (contentIndex < buf.writerIndex()) {
-            buf.readerIndex(contentIndex + 1);
+    if (typeIndex < buf.writerIndex()) {
+        buf.readerIndex(typeIndex + 1);
     }
 
-        if (type.equals("INIT")) {
-
+    switch (type) {
+        case "INIT":
             sendResponse(channel, id, index, "INIT,1");
+            break;
 
-        } else if (type.equals("LK")) {
-
+        case "LK":
             sendResponse(channel, id, index, "LK");
-
             if (buf.isReadable()) {
                 String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                 if (values.length >= 3) {
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
 
                     getLastLocation(position, null);
 
                     position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[2]));
                     position.set(Position.KEY_STEPS, Integer.parseInt(values[0]));
 
                     return position;
                 }
             }
+            break;
 
-        } else if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
+        case "TK":
+            if (buf.readableBytes() == 1) {
+                return null;
+            }
 
-            Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+            Position position = new Position(getProtocolName());
+            position.setDeviceId(deviceSession.getDeviceId());
 
-            if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
-                }
-                sendResponse(channel, id, index, "AL");
-            }
+            getLastLocation(position, null);
+
+            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
 
             return position;
 
-        } else if (type.equals("TKQ") || type.equals("TKQ2")) {
-
+        case "TKQ":
+        case "TKQ2":
             sendResponse(channel, id, index, type);
+            break;
 
+        default:
+            if (type.startsWith("UD") || type.startsWith("AL") || type.startsWith("WT")) {
+                Position pos = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
+
+                if (type.startsWith("AL") && pos != null) {
+                    pos.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                    sendResponse(channel, id, index, "AL");
+                }
+                return pos;
             } else if (type.equalsIgnoreCase("PULSE")
                     || type.equalsIgnoreCase("HEART")
                     || type.equalsIgnoreCase("BLOOD")
                     || type.equalsIgnoreCase("BPHRT")
                     || type.equalsIgnoreCase("btemp2")) {
 
                 if (buf.isReadable()) {
+                    Position healthPosition = new Position(getProtocolName());
+                    healthPosition.setDeviceId(deviceSession.getDeviceId());
 
-                Position position = new Position(getProtocolName());
-                position.setDeviceId(deviceSession.getDeviceId());
-
-                getLastLocation(position, new Date());
+                    getLastLocation(healthPosition, new Date());
 
                     String[] values = buf.toString(StandardCharsets.US_ASCII).split(",");
                     int valueIndex = 0;
 
                     if (type.equalsIgnoreCase("btemp2")) {
                         if (Integer.parseInt(values[valueIndex++]) > 0) {
-                        position.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
+                            healthPosition.set(Position.PREFIX_TEMP + 1, Double.parseDouble(values[valueIndex]));
                         }
                     } else {
                         if (type.equalsIgnoreCase("BPHRT") || type.equalsIgnoreCase("BLOOD")) {
-                        position.set("pressureHigh", values[valueIndex++]);
-                        position.set("pressureLow", values[valueIndex++]);
+                            if (values.length > valueIndex + 1) {
+                                healthPosition.set("pressureHigh", values[valueIndex++]);
+                                healthPosition.set("pressureLow", values[valueIndex++]);
                             }
-                    if (valueIndex <= values.length - 1) {
-                        position.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                         }
+                        if (valueIndex < values.length) {
+                            healthPosition.set(Position.KEY_HEART_RATE, Integer.parseInt(values[valueIndex]));
                         }
-
-                return position;
-
+                    }
+                    return healthPosition;
                 }
 
             } else if (type.equals("img")) {
+                Position imagePosition = new Position(getProtocolName());
+                imagePosition.setDeviceId(deviceSession.getDeviceId());
 
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
+                getLastLocation(imagePosition, null);
 
                 int timeIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',');
                 buf.readerIndex(timeIndex + 12 + 2);
-            position.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
-
-            return position;
+                imagePosition.set(Position.KEY_IMAGE, writeMediaFile(id, buf, "jpg"));
 
+                return imagePosition;
             } else if (type.equals("JXTK")) {
-
                 int dataIndex = BufferUtil.indexOf(buf, buf.readerIndex(), buf.writerIndex(), (byte) ',', 4) + 1;
-            String[] values = buf.readCharSequence(
-                    dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII).toString().split(",");
+                String[] values = buf.readCharSequence(dataIndex - buf.readerIndex(), StandardCharsets.US_ASCII)
+                        .toString()
+                        .split(",");
 
                 int current = Integer.parseInt(values[2]);
                 int total = Integer.parseInt(values[3]);
 
                 if (audio == null) {
                     audio = Unpooled.buffer();
                 }
+
                 audio.writeBytes(buf);
-
                 sendResponse(channel, id, index, "JXTKR,1");
 
                 if (current < total) {
                     return null;
                 } else {
-                Position position = new Position(getProtocolName());
-                position.setDeviceId(deviceSession.getDeviceId());
-                getLastLocation(position, null);
-                position.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
+                    Position audioPosition = new Position(getProtocolName());
+                    audioPosition.setDeviceId(deviceSession.getDeviceId());
+
+                    getLastLocation(audioPosition, null);
+                    audioPosition.set(Position.KEY_AUDIO, writeMediaFile(id, audio, "amr"));
                     audio.release();
                     audio = null;
-                return position;
+                    return audioPosition;
                 }
-
-        } else if (type.equals("TK")) {
-
-            if (buf.readableBytes() == 1) {
-                return null;
             }
-
-            Position position = new Position(getProtocolName());
-            position.setDeviceId(deviceSession.getDeviceId());
-
-            getLastLocation(position, null);
-
-            position.set(Position.KEY_AUDIO, writeMediaFile(id, buf, "amr"));
-
-            return position;
-
+            break;
     }
 
     return null;
 }
\ No newline at end of file
