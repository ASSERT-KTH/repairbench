diff --git a/tmp/e572c774-ccde-425e-b379-6a2fd262a58a_buggy.java b/tmp/69c233fd-5acd-4bde-943c-b468d75b158e_fixed.java
index 2a0dceb..da6900b 100644
--- a/tmp/e572c774-ccde-425e-b379-6a2fd262a58a_buggy.java
+++ b/tmp/69c233fd-5acd-4bde-943c-b468d75b158e_fixed.java
@@ -1,68 +1,88 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
+    // Extract the type
     String type = values[index++].substring(5);
 
+    // Check if the type matches accepted values
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
+    // Fetch the device session
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
+    // Firmware version
     position.set(Position.KEY_VERSION_FW, values[index++]);
-        index += 1; // model
+    index += 1; // Skip model
     
+    // Parse network information
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
+
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
-            index += 1; // timing advance
+        index += 1; // Skip timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
+    // Battery and other parameters
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
-        if (values[index].length() == 3) {
-            index += 1; // collaborative network
+    // Collaborative network flag length check
+    if (index < values.length && values[index].length() == 3) {
+        index += 1; // Skip
     }
 
+    // Parse and set time
+    if (index + 1 < values.length) {
+        String date = values[index++];
+        String time = values[index++];
+        if (!date.isEmpty() && !time.isEmpty()) {
             DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
             dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
+            position.setTime(dateFormat.parse(date + time));
+        }
+    }
 
+    // Latitude, Longitude, Speed, Course
+    if (index + 4 <= values.length) {
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
+    }
 
+    // Number of satellites and validity
+    if (index + 2 <= values.length) {
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
         position.setValid(values[index++].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
