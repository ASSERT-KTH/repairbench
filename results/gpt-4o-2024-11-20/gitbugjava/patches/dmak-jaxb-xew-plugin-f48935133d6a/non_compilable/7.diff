diff --git a/tmp/578e7827-0b6b-43f4-9136-885148d984e6_buggy.java b/tmp/20a0f671-a65a-4e5c-839c-a6d9d85f22d3_fixed.java
index 47a8941..704a4bd 100644
--- a/tmp/578e7827-0b6b-43f4-9136-885148d984e6_buggy.java
+++ b/tmp/20a0f671-a65a-4e5c-839c-a6d9d85f22d3_fixed.java
@@ -1,53 +1,59 @@
 	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+	 * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// Modify the container so it now references the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+		// Allows tracking of class name collisions:
 		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// Check the type of the grandparent (class or package)
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
+			// Grandparent is a class. Add the class as its container's child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
+			// Retrieve the classes map from the grandparent class
 			classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+		} else {
+			// Grandparent is a package. Add the class to the package:
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
+			// Retrieve the classes map from the grandparent package
 			classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// In this scenario, reset the "static" modifier; otherwise, the class won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+					// For inner classes, ensure the declaration is updated accordingly:
+					if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
 						setPrivateField(sc, "anonymous", Boolean.FALSE);
+					}
 
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// Ensure class name uniqueness:
+		String originalName = clazz.name();
+		if (classes.containsKey(originalName)) {
+			String newName = parent.name() + clazz.name();
+			writeSummary("\tRenaming class " + clazz.fullName() + " to " + newName);
+			setPrivateField(clazz, "name", newName);
 		}
 
+		// Add the updated class to the grandparent's classes map:
 		classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+		// Finally, modify the class so that it refers back to the grandparent as its container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
\ No newline at end of file
