diff --git a/tmp/a74a0c04-47d0-4f92-87a4-278588511e1a_buggy.java b/tmp/ece52b00-ec28-4546-8cf9-4107a2fdd00c_fixed.java
index 47a8941..af238fb 100644
--- a/tmp/a74a0c04-47d0-4f92-87a4-278588511e1a_buggy.java
+++ b/tmp/ece52b00-ec28-4546-8cf9-4107a2fdd00c_fixed.java
@@ -1,53 +1,55 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+	// Modify the container so it now refers to the class. Container can be a class or package.
 	JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 	JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+	// Allows tracking class name collisions:
 	Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 	if (grandParent.isClass()) {
 		// Element class should be added as its container child:
 		JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 		writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 		classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+	} else {
 		JPackage grandParentPackage = (JPackage) grandParent;
 
 		writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 		classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+		// Ensure the "static" modifier is reset; otherwise, it won't compile.
+		if ((clazz.mods().getValue() & JMod.STATIC) != 0) {
+			setPrivateField(clazz.mods(), "mods", clazz.mods().getValue() & ~JMod.STATIC);
+		}
 
 		for (ClassOutline classOutline : outline.getClasses()) {
 			if (classOutline.implClass == clazz) {
 				XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+				// Inner class is always a local declaration. Adjust the corresponding property.
+				if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
+				}
 
 				break;
 			}
 		}
 	}
 
+	// Handle name collisions if the class with the same name already exists at the destination.
 	if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		String newName = parent.name() + clazz.name();
+		writeSummary("\tRenaming class " + clazz.fullName() + " to " + newName);
+		setPrivateField(clazz, "name", newName);
 	}
 
 	classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+	// Finally, modify the class so it refers to the updated container:
 	setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
