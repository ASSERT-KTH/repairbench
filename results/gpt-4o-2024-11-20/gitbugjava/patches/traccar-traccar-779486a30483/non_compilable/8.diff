diff --git a/tmp/0bffb625-aa43-40e6-8460-73e9348bfc8b_buggy.java b/tmp/38c05a8f-f132-47df-a050-4c5f19ee6975_fixed.java
index f591bc6..fb30383 100644
--- a/tmp/0bffb625-aa43-40e6-8460-73e9348bfc8b_buggy.java
+++ b/tmp/38c05a8f-f132-47df-a050-4c5f19ee6975_fixed.java
@@ -1,74 +1,86 @@
     protected Object decodeAvrmc(
             String sentence, Channel channel, SocketAddress remoteAddress) {
 
         Parser parser = new Parser(PATTERN_AVRMC, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         DeviceSession deviceSession =
             getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {
             return null;
         }
 
         String deviceModel = null;
         Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
         if (device != null) {
             deviceModel = device.getModel();
         }
 
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         DateBuilder dateBuilder = new DateBuilder()
                 .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
         String status = parser.next();
         String upperCaseStatus = status.toUpperCase();
         position.setValid(upperCaseStatus.equals("A") || upperCaseStatus.equals("R") || upperCaseStatus.equals("P"));
         position.set(Position.KEY_STATUS, status);
 
         position.setLatitude(parser.nextCoordinate());
         position.setLongitude(parser.nextCoordinate());
         position.setSpeed(parser.nextDouble(0));
         position.setCourse(parser.nextDouble(0));
 
         dateBuilder.setDateReverse(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
         position.setTime(dateBuilder.getDate());
 
         String event = parser.next();
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, decodeEvent(event, position, deviceModel));
-        position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
+
+        String battery = parser.next();
+        if (battery != null && !battery.isEmpty()) {
+            position.set(Position.KEY_BATTERY, Double.parseDouble(battery.replaceAll("\\.", "")) * 0.001);
+        }
+
         position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_GPS, parser.nextInt());
-        position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
+
+        Double adc = parser.nextDouble();
+        if (adc != null) {
+            position.set(Position.PREFIX_ADC + 1, adc * 0.001);
+        }
 
         if ("AVL110".equals(deviceModel) || "AVL120".equals(deviceModel)) {
-            position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);
+            adc = parser.nextDouble();
+            if (adc != null) {
+                position.set(Position.PREFIX_ADC + 2, adc * 0.001);
+            }
         }
 
         Integer lac = parser.nextHexInt();
         Integer cid = parser.nextHexInt();
         Integer mcc = parser.nextInt();
         Integer mnc = parser.nextInt();
         if (lac != null && cid != null && mcc != null && mnc != null) {
             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
+        } else {
+            parser.next(); // handle optional empty parameters
         }
 
-        parser.next(); // unused
-
         String checksum = parser.next();
 
         if (channel != null) {
 
             sendAcknowledge(status, event, checksum, channel, remoteAddress);
 
             String devicePassword = AttributeUtil.getDevicePassword(
                     getCacheManager(), deviceSession.getDeviceId(), getProtocolName(), DEFAULT_DEVICE_PASSWORD);
             sendEventResponse(event, devicePassword, channel, remoteAddress);
         }
 
         return position;
     }
\ No newline at end of file
