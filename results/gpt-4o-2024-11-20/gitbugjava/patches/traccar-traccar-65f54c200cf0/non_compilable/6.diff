diff --git a/tmp/7475ce33-1bee-4a81-9558-c6842e8b02dc_buggy.java b/tmp/5886444b-0b2a-4424-a744-77cd683ef058_fixed.java
index 477325f..c3bc33e 100644
--- a/tmp/7475ce33-1bee-4a81-9558-c6842e8b02dc_buggy.java
+++ b/tmp/5886444b-0b2a-4424-a744-77cd683ef058_fixed.java
@@ -1,178 +1,205 @@
 private void decodeLocation(Position position, ByteBuf buf, int codec, String model) {
 
-        int globalMask = 0x0f;
+    int globalMask = buf.isReadable() ? buf.readUnsignedByte() : 0x0f; // Safely handle `globalMask`
 
     if (codec == CODEC_GH3000) {
 
         long time = buf.readUnsignedInt() & 0x3fffffff;
         time += 1167609600; // 2007-01-01 00:00:00
 
-            globalMask = buf.readUnsignedByte();
-            if (BitUtil.check(globalMask, 0)) {
+        globalMask = buf.isReadable() ? buf.readUnsignedByte() : globalMask; // Update globalMask if available
+        
+        if (BitUtil.check(globalMask, 0) && buf.isReadable(2)) {
 
             position.setTime(new Date(time * 1000));
 
             int locationMask = buf.readUnsignedByte();
 
-                if (BitUtil.check(locationMask, 0)) {
+            if (BitUtil.check(locationMask, 0) && buf.isReadable(8)) {
                 position.setLatitude(buf.readFloat());
                 position.setLongitude(buf.readFloat());
             }
 
-                if (BitUtil.check(locationMask, 1)) {
+            if (BitUtil.check(locationMask, 1) && buf.isReadable(2)) {
                 position.setAltitude(buf.readUnsignedShort());
             }
 
-                if (BitUtil.check(locationMask, 2)) {
+            if (BitUtil.check(locationMask, 2) && buf.isReadable(1)) {
                 position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
             }
 
-                if (BitUtil.check(locationMask, 3)) {
+            if (BitUtil.check(locationMask, 3) && buf.isReadable(1)) {
                 position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
             }
 
-                if (BitUtil.check(locationMask, 4)) {
+            if (BitUtil.check(locationMask, 4) && buf.isReadable(1)) {
                 position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
             }
 
             if (BitUtil.check(locationMask, 5)) {
+                if (buf.isReadable(4)) {
                     CellTower cellTower = CellTower.fromLacCid(
                             getConfig(), buf.readUnsignedShort(), buf.readUnsignedShort());
 
-                    if (BitUtil.check(locationMask, 6)) {
+                    if (BitUtil.check(locationMask, 6) && buf.isReadable(1)) {
                         cellTower.setSignalStrength((int) buf.readUnsignedByte());
                     }
 
-                    if (BitUtil.check(locationMask, 7)) {
+                    if (BitUtil.check(locationMask, 7) && buf.isReadable(4)) {
                         cellTower.setOperator(buf.readUnsignedInt());
                     }
 
                     position.setNetwork(new Network(cellTower));
-
+                }
             } else {
-                    if (BitUtil.check(locationMask, 6)) {
+                if (BitUtil.check(locationMask, 6) && buf.isReadable(1)) {
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
                 }
-                    if (BitUtil.check(locationMask, 7)) {
+                if (BitUtil.check(locationMask, 7) && buf.isReadable(4)) {
                     position.set(Position.KEY_OPERATOR, buf.readUnsignedInt());
                 }
             }
 
         } else {
 
             getLastLocation(position, new Date(time * 1000));
 
         }
 
     } else {
 
+        if (buf.isReadable(8)) {
             position.setTime(new Date(buf.readLong()));
+        }
 
+        if (buf.isReadable(1)) {
             position.set("priority", buf.readUnsignedByte());
+        }
 
+        if (buf.isReadable(8)) {
             position.setLongitude(buf.readInt() / 10000000.0);
             position.setLatitude(buf.readInt() / 10000000.0);
+        }
+
+        if (buf.isReadable(2)) {
             position.setAltitude(buf.readShort());
+        }
+
+        if (buf.isReadable(2)) {
             position.setCourse(buf.readUnsignedShort());
+        }
 
+        if (buf.isReadable(1)) {
             int satellites = buf.readUnsignedByte();
             position.set(Position.KEY_SATELLITES, satellites);
-
             position.setValid(satellites != 0);
+        }
 
+        if (buf.isReadable(2)) {
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
+        }
 
         position.set(Position.KEY_EVENT, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16));
-            if (codec == CODEC_16) {
+        if (codec == CODEC_16 && buf.isReadable(1)) {
             buf.readUnsignedByte(); // generation type
         }
 
         readExtByte(buf, codec, CODEC_8_EXT); // total IO data records
 
     }
 
-        // Read 1 byte data
+    // Read data sections with proper bounds checks
     if (BitUtil.check(globalMask, 1)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.isReadable()) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 1, codec, model);
             }
         }
+    }
 
-        // Read 2 byte data
     if (BitUtil.check(globalMask, 2)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.isReadable(2)) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 2, codec, model);
             }
         }
+    }
 
-        // Read 4 byte data
     if (BitUtil.check(globalMask, 3)) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.isReadable(4)) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 4, codec, model);
             }
         }
+    }
 
-        // Read 8 byte data
     if (codec == CODEC_8 || codec == CODEC_8_EXT || codec == CODEC_16) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
+            if (buf.isReadable(8)) {
                 decodeParameter(position, readExtByte(buf, codec, CODEC_8_EXT, CODEC_16), buf, 8, codec, model);
             }
         }
+    }
 
-        // Read 16 byte data
     if (extended) {
         int cnt = readExtByte(buf, codec, CODEC_8_EXT);
         for (int j = 0; j < cnt; j++) {
             int id = readExtByte(buf, codec, CODEC_8_EXT, CODEC_16);
+            if (buf.isReadable(16)) {
                 position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(16)));
             }
         }
+    }
 
-        // Read X byte data
     if (codec == CODEC_8_EXT) {
-            int cnt = buf.readUnsignedShort();
+        int cnt = buf.isReadable(2) ? buf.readUnsignedShort() : 0;
         for (int j = 0; j < cnt; j++) {
+            if (buf.isReadable(4)) {
                 int id = buf.readUnsignedShort();
                 int length = buf.readUnsignedShort();
+                if (buf.isReadable(length)) {
                     if (id == 256) {
                         position.set(Position.KEY_VIN,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII));
                     } else if (id == 281) {
                         position.set(Position.KEY_DTCS,
                                 buf.readSlice(length).toString(StandardCharsets.US_ASCII).replace(',', ' '));
                     } else if (id == 385) {
                         ByteBuf data = buf.readSlice(length);
                         data.readUnsignedByte(); // data part
                         int index = 1;
-                    while (data.isReadable()) {
+                        while (data.isReadable() && data.readableBytes() >= 1) {
                             int flags = data.readUnsignedByte();
                             if (BitUtil.from(flags, 4) > 0) {
                                 position.set("beacon" + index + "Uuid", ByteBufUtil.hexDump(data.readSlice(16)));
                                 position.set("beacon" + index + "Major", data.readUnsignedShort());
                                 position.set("beacon" + index + "Minor", data.readUnsignedShort());
                             } else {
                                 position.set("beacon" + index + "Namespace", ByteBufUtil.hexDump(data.readSlice(10)));
                                 position.set("beacon" + index + "Instance", ByteBufUtil.hexDump(data.readSlice(6)));
                             }
+                            if (data.isReadable(1)) {
                                 position.set("beacon" + index + "Rssi", (int) data.readByte());
-                        if (BitUtil.check(flags, 1)) {
+                            }
+                            if (BitUtil.check(flags, 1) && data.isReadable(2)) {
                                 position.set("beacon" + index + "Battery", data.readUnsignedShort() * 0.01);
                             }
-                        if (BitUtil.check(flags, 2)) {
+                            if (BitUtil.check(flags, 2) && data.isReadable(2)) {
                                 position.set("beacon" + index + "Temp", data.readUnsignedShort());
                             }
                             index += 1;
                         }
                     } else {
                         position.set(Position.PREFIX_IO + id, ByteBufUtil.hexDump(buf.readSlice(length)));
                     }
                 }
             }
+        }
+    }
 
     decodeNetwork(position, model);
-
 }
\ No newline at end of file
