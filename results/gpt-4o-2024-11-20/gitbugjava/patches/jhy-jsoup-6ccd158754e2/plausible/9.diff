diff --git a/tmp/79c0084c-1f3c-4e41-ade6-3bd75fec84da_buggy.java b/tmp/ba18946d-7e8e-482d-8bdc-600aae8a339e_fixed.java
index 23f078d..ba1ddcf 100644
--- a/tmp/79c0084c-1f3c-4e41-ade6-3bd75fec84da_buggy.java
+++ b/tmp/ba18946d-7e8e-482d-8bdc-600aae8a339e_fixed.java
@@ -1,14 +1,19 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
+        // minimal normalization of Unicode -> Ascii, and space normalization. Existing escapes are left as-is.
         for (int i = 0; i < s.length(); i++) {
             int c = s.codePointAt(i);
-            if (c == ' ') {
+
+            if (Character.isSupplementaryCodePoint(c)) {
+                // Handle supplementary characters properly
+                String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+                sb.append(encoded);
+                i++; // Skip the second code unit of the surrogate pair
+            } else if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            } else if (c > 127) { // out of ASCII range
+                sb.append(URLEncoder.encode(Character.toString((char) c), UTF_8.name()));
             } else {
                 sb.append((char) c);
             }
         }
     }
\ No newline at end of file
