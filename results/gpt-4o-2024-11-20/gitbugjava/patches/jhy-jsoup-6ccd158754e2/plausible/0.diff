diff --git a/tmp/f48e0e6c-77f3-43a2-ab66-51b5474042a6_buggy.java b/tmp/6904c52d-5aea-4632-9ec6-4e922978d7ff_fixed.java
index 23f078d..b9de21b 100644
--- a/tmp/f48e0e6c-77f3-43a2-ab66-51b5474042a6_buggy.java
+++ b/tmp/6904c52d-5aea-4632-9ec6-4e922978d7ff_fixed.java
@@ -1,14 +1,15 @@
     private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
         // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+        for (int i = 0; i < s.length(); ) {
             int c = s.codePointAt(i);
             if (c == ' ') {
                 sb.append(spaceAsPlus ? '+' : "%20");
             } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()).replace("+", "%20"));
+                // Replace "+" with "%20" to avoid incorrect encoding of spaces
             } else {
                 sb.append((char) c);
             }
+            i += Character.charCount(c); // Ensure proper handling of supplementary characters
         }
     }
\ No newline at end of file
