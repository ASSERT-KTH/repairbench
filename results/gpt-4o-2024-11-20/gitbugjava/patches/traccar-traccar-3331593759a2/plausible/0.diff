diff --git a/tmp/db4ad8cc-69ac-4d64-be1b-2c1a6c92efe6_buggy.java b/tmp/6ec46c0a-d960-4661-aba5-ce76f11418f9_fixed.java
index 2189af9..9fd8b5c 100644
--- a/tmp/db4ad8cc-69ac-4d64-be1b-2c1a6c92efe6_buggy.java
+++ b/tmp/6ec46c0a-d960-4661-aba5-ce76f11418f9_fixed.java
@@ -1,113 +1,131 @@
 private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
 
     int type = buf.readUnsignedByte();
 
     if (type == 0xF0) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         Date time = readDate(buf, deviceSession.get(DeviceSession.KEY_TIMEZONE));
 
         if (buf.readUnsignedByte() > 0) {
             position.set(Position.KEY_ARCHIVE, true);
         }
 
         buf.readUnsignedByte(); // vehicle type
 
         int count;
         int subtype = buf.readUnsignedByte();
         switch (subtype) {
             case 0x01:
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedByte();
                     switch (id) {
                         case 0x0102:
                         case 0x0528:
                         case 0x0546:
-                                position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
+                            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100L); // Fix: Ensure long multiplication
                             break;
                         case 0x0103:
                             position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedInt() * 0.01); 
                             break;
                         case 0x052A:
                             position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedShort() * 0.01);
                             break;
                         case 0x0105:
                         case 0x052C:
                             position.set(Position.KEY_FUEL_USED, buf.readUnsignedInt() * 0.01);
                             break;
                         case 0x014A:
                         case 0x0537:
                         case 0x0538:
                         case 0x0539:
                             position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShort() * 0.01);
                             break;
                         default:
                             switch (length) {
                                 case 1:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedByte());
                                     break;
                                 case 2:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedShort());
                                     break;
                                 case 4:
                                     position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                                     break;
                                 default:
                                     buf.skipBytes(length);
                                     break;
                             }
                             break;
                     }
                 }
-                    decodeCoordinates(position, buf);
+                // Fix: Added safety check for decoding coordinates
+                if (!decodeCoordinatesSafely(position, buf)) {
+                    return null; // Discard the position if coordinates are invalid
+                }
                 position.setTime(time);
                 break;
             case 0x03:
                 count = buf.readUnsignedByte();
                 for (int i = 0; i < count; i++) {
                     int id = buf.readUnsignedShort();
                     int length = buf.readUnsignedByte();
                     switch (id) {
                         case 0x1A:
                             position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                             break;
                         case 0x1B:
                             position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                             break;
                         case 0x1C:
                             position.set(Position.KEY_ALARM, Position.ALARM_CORNERING);
                             break;
                         case 0x1D:
                         case 0x1E:
                         case 0x1F:
                             position.set(Position.KEY_ALARM, Position.ALARM_LANE_CHANGE);
                             break;
                         case 0x23:
                             position.set(Position.KEY_ALARM, Position.ALARM_FATIGUE_DRIVING);
                             break;
                         default:
                             break;
                     }
                     buf.skipBytes(length);
                 }
-                    decodeCoordinates(position, buf);
+                // Fix: Added safety check for decoding coordinates
+                if (!decodeCoordinatesSafely(position, buf)) {
+                    return null; // Discard the position if coordinates are invalid
+                }
                 position.setTime(time);
                 break;
             case 0x0B:
                 if (buf.readUnsignedByte() > 0) {
                     position.set(Position.KEY_VIN, buf.readCharSequence(17, StandardCharsets.US_ASCII).toString());
                 }
                 getLastLocation(position, time);
                 break;
             default:
                 return null;
         }
 
         return position;
     }
 
     return null;
 }
+
+// Fix: Added helper method to safely decode coordinates with range validation
+private boolean decodeCoordinatesSafely(Position position, ByteBuf buf) {
+    double latitude = buf.readFloat();
+    double longitude = buf.readFloat();
+    if (latitude < -90 || latitude > 90 || longitude < -180 || longitude > 180) {
+        return false; // Invalid coordinates
+    }
+    position.setLatitude(latitude);
+    position.setLongitude(longitude);
+    return true;
+}
\ No newline at end of file
