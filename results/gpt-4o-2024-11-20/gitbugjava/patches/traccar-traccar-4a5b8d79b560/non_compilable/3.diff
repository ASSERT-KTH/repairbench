diff --git a/tmp/8bb0ba80-7169-4ff1-8027-667dded762b6_buggy.java b/tmp/6c3e8ecc-cc55-41c1-a0c9-76ad93c4273d_fixed.java
index 1c732f4..6bcda89 100644
--- a/tmp/8bb0ba80-7169-4ff1-8027-667dded762b6_buggy.java
+++ b/tmp/6c3e8ecc-cc55-41c1-a0c9-76ad93c4273d_fixed.java
@@ -1,88 +1,110 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
+
+    // Fix: Add check to ensure the message has the expected delimiter
+    if (!sentence.contains("|")) {
+        return null;
+    }
+
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+
+        // Fix: Add validation for properly formatted key-value pairs
+        if (delimiter == -1 || delimiter == 0 || delimiter == entry.length() - 1) {
+            continue;
+        }
+
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
+        try {
             switch (key) {
                 case "unit":
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession != null) {
                         position.setDeviceId(deviceSession.getDeviceId());
                     }
                     break;
                 case "gps_valid":
                     position.setValid(Integer.parseInt(value) != 0);
                     break;
                 case "datetime_actual":
+                    // Fix: Add validation for date parsing
+                    try {
                         position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                    } catch (Exception e) {
+                        position.setTime(null); // Set time to null if the date is invalid
+                    }
                     break;
                 case "latitude":
                     position.setLatitude(Double.parseDouble(value));
                     break;
                 case "longitude":
                     position.setLongitude(Double.parseDouble(value));
                     break;
                 case "altitude":
                     position.setAltitude(Double.parseDouble(value));
                     break;
                 case "velocity":
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                     break;
                 case "heading":
                     position.setCourse(Integer.parseInt(value));
                     break;
                 case "eventid":
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
                     break;
                 case "mileage":
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                     break;
                 case "satellites":
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case "ignition":
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
                     break;
                 case "door":
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
                     break;
                 case "arm":
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
                     break;
                 case "fuel":
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
                     break;
                 case "rpm":
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
                     break;
                 case "main_voltage":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
                     break;
                 case "backup_voltage":
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                     break;
                 case "analog1":
                 case "analog2":
                 case "analog3":
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
                     break;
                 case "extra1":
                 case "extra2":
                 case "extra3":
                 default:
                     position.set(key, value);
                     break;
             }
+        } catch (Exception e) {
+            // Fix: Add exception handling for invalid key-value pair parsing
+            // Skip erroneous data and continue parsing the rest
+        }
     }
 
     return position;
 }
\ No newline at end of file
