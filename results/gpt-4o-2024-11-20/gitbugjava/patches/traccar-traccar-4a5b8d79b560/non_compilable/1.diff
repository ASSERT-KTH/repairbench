diff --git a/tmp/951b4903-e656-4889-b3ba-69bcf4e44434_buggy.java b/tmp/e1e827af-0eb4-410c-adb2-ab128110f7dc_fixed.java
index 1c732f4..908bae4 100644
--- a/tmp/951b4903-e656-4889-b3ba-69bcf4e44434_buggy.java
+++ b/tmp/e1e827af-0eb4-410c-adb2-ab128110f7dc_fixed.java
@@ -1,88 +1,130 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
+    DeviceSession deviceSession = null;
+
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
-            String key = entry.substring(0, delimiter);
-            String value = entry.substring(delimiter + 1);
+        if (delimiter == -1) {
+            continue; // Skip malformed entries
+        }
+        String key = entry.substring(0, delimiter).trim();
+        String value = entry.substring(delimiter + 1).trim();
+
         switch (key) {
             case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
+                deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
-                    position.setValid(Integer.parseInt(value) != 0);
+                position.setValid(!value.isEmpty() && Integer.parseInt(value) != 0);
                 break;
             case "datetime_actual":
+                if (!value.isEmpty()) {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                }
                 break;
             case "latitude":
+                if (!value.isEmpty()) {
                     position.setLatitude(Double.parseDouble(value));
+                }
                 break;
             case "longitude":
+                if (!value.isEmpty()) {
                     position.setLongitude(Double.parseDouble(value));
+                }
                 break;
             case "altitude":
+                if (!value.isEmpty()) {
                     position.setAltitude(Double.parseDouble(value));
+                }
                 break;
             case "velocity":
+                if (!value.isEmpty()) {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                }
                 break;
             case "heading":
+                if (!value.isEmpty()) {
                     position.setCourse(Integer.parseInt(value));
+                }
                 break;
             case "eventid":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                }
                 break;
             case "mileage":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                }
                 break;
             case "satellites":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                }
                 break;
             case "ignition":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                }
                 break;
             case "door":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                }
                 break;
             case "arm":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                }
                 break;
             case "fuel":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                }
                 break;
             case "rpm":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
+                }
                 break;
             case "main_voltage":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
+                }
                 break;
             case "backup_voltage":
+                if (!value.isEmpty()) {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                }
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
+                if (!value.isEmpty()) {
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                }
                 break;
-                case "extra1":
-                case "extra2":
-                case "extra3":
             default:
+                if (!value.isEmpty()) {
                     position.set(key, value);
-                    break;
                 }
         }
+    }
+
+    if (deviceSession == null) {
+        return null; // Return null if device session couldn't be resolved
+    }
 
     return position;
 }
\ No newline at end of file
