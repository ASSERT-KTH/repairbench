diff --git a/tmp/3575b5b4-6213-4746-b871-889c79c58b60_buggy.java b/tmp/b06c7c5a-89e2-4f76-8c75-a430f98b9fe7_fixed.java
index 1c732f4..e907bf2 100644
--- a/tmp/3575b5b4-6213-4746-b871-889c79c58b60_buggy.java
+++ b/tmp/b06c7c5a-89e2-4f76-8c75-a430f98b9fe7_fixed.java
@@ -1,88 +1,168 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    int startDelimiter = sentence.indexOf('|') + 1;
+    int endDelimiter = sentence.lastIndexOf('|');
+    if (startDelimiter < 0 || endDelimiter < 0 || startDelimiter >= endDelimiter) {
+        return null; // Return null if the sentence format is invalid
+    }
+    sentence = sentence.substring(startDelimiter, endDelimiter);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter < 0) {
+            continue; // Skip any malformed entries
+        }
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
                 }
                 break;
             case "gps_valid":
+                try {
                     position.setValid(Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.setValid(false); // Handle invalid numeric value gracefully
+                }
                 break;
             case "datetime_actual":
+                try {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                } catch (ParseException e) {
+                    position.setTime(null); // Handle invalid date format gracefully
+                }
                 break;
             case "latitude":
+                try {
                     position.setLatitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setLatitude(0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "longitude":
+                try {
                     position.setLongitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setLongitude(0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "altitude":
+                try {
                     position.setAltitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.setAltitude(0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "velocity":
+                try {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                } catch (NumberFormatException e) {
+                    position.setSpeed(0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "heading":
+                try {
                     position.setCourse(Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.setCourse(0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "eventid":
+                try {
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_EVENT, 0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "mileage":
+                try {
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_ODOMETER, 0L); // Handle invalid numeric value gracefully
+                }
                 break;
             case "satellites":
+                try {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_SATELLITES, 0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "ignition":
+                try {
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_IGNITION, false); // Handle invalid numeric value gracefully
+                }
                 break;
             case "door":
+                try {
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_DOOR, false); // Handle invalid numeric value gracefully
+                }
                 break;
             case "arm":
+                try {
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_ARMED, false); // Handle invalid numeric value gracefully
+                }
                 break;
             case "fuel":
+                try {
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_FUEL_LEVEL, 0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "rpm":
+                try {
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_RPM, 0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "main_voltage":
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_POWER, 0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "backup_voltage":
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    position.set(Position.KEY_BATTERY, 0.0); // Handle invalid numeric value gracefully
+                }
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
+                try {
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Skip or set default if analog values are invalid
+                }
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
             default:
                 position.set(key, value);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
