diff --git a/tmp/ba084e0c-7115-4e85-a52e-8f138aa2c02c_buggy.java b/tmp/5aebb23f-0dec-477e-bd31-18ea98b9851c_fixed.java
index b56897c..0bbb9a1 100644
--- a/tmp/ba084e0c-7115-4e85-a52e-8f138aa2c02c_buggy.java
+++ b/tmp/5aebb23f-0dec-477e-bd31-18ea98b9851c_fixed.java
@@ -1,27 +1,37 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+        // where the function returns (possibly without a return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+        // We only care about calls to functions that
+        // pass one of the dependent variables to a non-side-effect-free function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        // Handle 'in' expressions explicitly, which previously werenâ€™t considered.
+        // The 'in' operator doesn't count as a side effect on its own and shouldn't be misidentified.
+        if (n.isIn()) { 
+          // Check if the left-hand or right-hand side of the 'in' operator contains problematic effects.
+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+            if (apply(c)) {
+              return true;
+            }
+          }
+          return false; // If 'in' itself has no issues, do not consider it causing a side effect.
+        }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
