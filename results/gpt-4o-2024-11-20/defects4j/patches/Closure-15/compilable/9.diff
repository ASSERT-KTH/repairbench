diff --git a/tmp/4970cef9-98ff-474a-9224-6c56e6e81d58_buggy.java b/tmp/2083c007-fdc9-47ec-be12-f7dcc070997c_fixed.java
index b56897c..44a24ed 100644
--- a/tmp/4970cef9-98ff-474a-9224-6c56e6e81d58_buggy.java
+++ b/tmp/2083c007-fdc9-47ec-be12-f7dcc070997c_fixed.java
@@ -1,27 +1,27 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+        // where the function returns (possibly without a return statement)
         if (n == null) {
           return false;
         }
 
         // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
+        // pass one of the dependent variables to a non-side-effect-free
         // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+        if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n))
+             || (n.isIn() || n.isInstanceOf())) {  // Check for 'in' or 'instanceof' operator
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
-
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
