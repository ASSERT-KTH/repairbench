diff --git a/tmp/b38e0284-7934-4411-ac25-36e503da5fe1_buggy.java b/tmp/28575fac-d0ea-4701-a402-162c2af6f31f_fixed.java
index b56897c..887a72f 100644
--- a/tmp/b38e0284-7934-4411-ac25-36e503da5fe1_buggy.java
+++ b/tmp/28575fac-d0ea-4701-a402-162c2af6f31f_fixed.java
@@ -1,27 +1,32 @@
       @Override
       public boolean apply(Node n) {
         // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+        // where the function returns (possibly without a return statement)
         if (n == null) {
           return false;
         }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
+        // TODO: We only care about calls to functions that
+        // pass one of the dependent variables to a non-side-effect free
         // function.
         if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
           return true;
         }
 
         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
           return true;
         }
 
+        if (n.isForIn()) {
+          // Special case for "for-in" statements since they involve iteration over
+          // object properties, which can have side effects if they invoke custom property behaviors.
+          return true;
+        }
 
         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
           }
         }
         return false;
       }
\ No newline at end of file
