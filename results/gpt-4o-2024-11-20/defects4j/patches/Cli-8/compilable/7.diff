diff --git a/tmp/d331ca71-a791-4e7e-a090-6d84b6cda8c6_buggy.java b/tmp/06e85a81-8c9d-4c80-af5c-278b44d1cbe3_fixed.java
index 8e93a5e..fb3ff3d 100644
--- a/tmp/d331ca71-a791-4e7e-a090-6d84b6cda8c6_buggy.java
+++ b/tmp/06e85a81-8c9d-4c80-af5c-278b44d1cbe3_fixed.java
@@ -1,43 +1,43 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    // Split the input text into lines using the system default line separator
+    String[] lines = text.split(defaultNewLine);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+    for (int i = 0; i < lines.length; i++) {
+        String currentLine = lines[i];
+        boolean needsPadding = i > 0; // Add padding only for lines after the first
+
+        while (currentLine.length() > 0) {
+            int pos = findWrapPos(currentLine, width, needsPadding ? nextLineTabStop : 0);
+
+            if (pos == -1) {
+                // No need to wrap, append the remaining text
+                if (needsPadding) {
+                    sb.append(padding);
+                }
+                sb.append(currentLine);
+                currentLine = "";
+            } else {
+                // Wrap at the calculated position
+                if (needsPadding) {
+                    sb.append(padding);
+                }
+                sb.append(rtrim(currentLine.substring(0, pos))).append(defaultNewLine);
+                currentLine = currentLine.substring(pos).trim();
+            }
+
+            // Subsequent lines will need padding
+            needsPadding = true;
+        }
+
+        // Add a newline only if this is not the last input line
+        if (i < lines.length - 1) {
+            sb.append(defaultNewLine);
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
