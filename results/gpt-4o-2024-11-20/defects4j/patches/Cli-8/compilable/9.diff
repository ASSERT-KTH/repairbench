diff --git a/tmp/b99d3ff4-a92d-4883-b482-12e5287e3a1a_buggy.java b/tmp/adc411aa-4d9a-49bb-b4de-eb87ab19f019_fixed.java
index 8e93a5e..9cd8542 100644
--- a/tmp/b99d3ff4-a92d-4883-b482-12e5287e3a1a_buggy.java
+++ b/tmp/adc411aa-4d9a-49bb-b4de-eb87ab19f019_fixed.java
@@ -1,43 +1,28 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        String[] lines = text.split(defaultNewLine); // Split the text into lines using defaultNewLine
+        final String padding = createPadding(nextLineTabStop); // Padding for indented lines
         
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        for (int i = 0; i < lines.length; i++) {
+            String currentLine = lines[i].trim(); // Trim leading/trailing spaces from each line
             
-            return sb;
+            if (i > 0) { // For lines after the first, apply padding
+                sb.append(defaultNewLine).append(padding);
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
             
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            while (!currentLine.isEmpty()) {
+                int wrapPos = findWrapPos(currentLine, width, (i > 0 ? nextLineTabStop : 0));
                 
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
+                if (wrapPos == -1) { // No more wrapping needed
+                    sb.append(currentLine);
+                    currentLine = "";
+                } else {
+                    sb.append(rtrim(currentLine.substring(0, wrapPos))).append(defaultNewLine);
+                    currentLine = padding + currentLine.substring(wrapPos).trim();
+                }
             }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        
+        return sb;
     }
\ No newline at end of file
