diff --git a/tmp/ca748d08-fe33-4e71-93bd-de29754c5ac8_buggy.java b/tmp/fb7c6fcf-1881-47c7-8e6a-242d82b04742_fixed.java
index 8e93a5e..a894b49 100644
--- a/tmp/ca748d08-fe33-4e71-93bd-de29754c5ac8_buggy.java
+++ b/tmp/fb7c6fcf-1881-47c7-8e6a-242d82b04742_fixed.java
@@ -1,43 +1,28 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
-        int pos = findWrapPos(text, width, 0);
+        String[] lines = text.split("\\r?\\n");  // Split the input text on newlines
+        String padding = createPadding(nextLineTabStop);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
+        for (int i = 0; i < lines.length; i++) {
+            String currentLine = (i > 0) ? padding + lines[i].trim() : lines[i];
 
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+            while (!currentLine.isEmpty()) {
+                int pos = findWrapPos(currentLine, width, (i > 0) ? nextLineTabStop : 0);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+                if (pos == -1) {  // No wrap position, append the entire line
+                    sb.append(currentLine);
+                    break;
+                }
 
-                return sb;
+                sb.append(rtrim(currentLine.substring(0, pos))).append(defaultNewLine);
+                currentLine = padding + currentLine.substring(pos).trim();
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            if (i < lines.length - 1) {  // If not the last line, add a newline
+                sb.append(defaultNewLine);
+            }
         }
+
+        return sb;
     }
\ No newline at end of file
