diff --git a/tmp/88770c9a-ddf8-4cd5-ac6e-8ff11f5546aa_buggy.java b/tmp/b8419ea5-5cc3-4d3e-ac38-79f6a49a6345_fixed.java
index 8e93a5e..cdcd686 100644
--- a/tmp/88770c9a-ddf8-4cd5-ac6e-8ff11f5546aa_buggy.java
+++ b/tmp/b8419ea5-5cc3-4d3e-ac38-79f6a49a6345_fixed.java
@@ -1,43 +1,30 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+                                         int nextLineTabStop, String text) {
+    // Split the text into lines based on existing line breaks
+    String[] lines = text.split("\\r?\\n");
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+    for (int i = 0; i < lines.length; i++) {
+        String line = lines[i].trim(); // Trim each individual line
+
+        // Wrap each line individually
+        while (line.length() > 0) {
+            int pos = findWrapPos(line, width, sb.length() == 0 ? 0 : nextLineTabStop);
+
+            if (pos == -1) {
+                sb.append(line);
+                break;
+            }
+
+            sb.append(line, 0, pos).append(defaultNewLine);
+            line = (nextLineTabStop > 0 ? padding : "") + line.substring(pos).trim();
+        }
+
+        // Add defaultNewLine only between lines (not for the last line)
+        if (i < lines.length - 1) {
+            sb.append(defaultNewLine);
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
