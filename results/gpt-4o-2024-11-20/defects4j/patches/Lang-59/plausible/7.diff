diff --git a/tmp/e78a6c9f-3286-4bde-8982-2b542d0a3df2_buggy.java b/tmp/47be421a-ed46-4113-88fc-0009fbcaf882_fixed.java
index 735a993..87d2c66 100644
--- a/tmp/e78a6c9f-3286-4bde-8982-2b542d0a3df2_buggy.java
+++ b/tmp/47be421a-ed46-4113-88fc-0009fbcaf882_fixed.java
@@ -1,29 +1,13 @@
-    /**
-     * Appends an object to the builder padding on the right to a fixed length.
-     * The <code>toString</code> of the object is used.
-     * If the object is larger than the length, the right hand side is lost.
-     * If the object is null, null text value is used.
-     * 
-     * @param obj  the object to append, null uses null text
-     * @param width  the fixed field width, zero or negative has no effect
-     * @param padChar  the pad character to use
-     * @return this, to enable chaining
-     */
     public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
         if (width > 0) {
             ensureCapacity(size + width);
             String str = (obj == null ? getNullText() : obj.toString());
-            int strLen = str.length();
-            if (strLen >= width) {
+            int strLen = Math.min(str.length(), width); // Ensure we don't exceed the width
             str.getChars(0, strLen, buffer, size);
-            } else {
-                int padLen = width - strLen;
-                str.getChars(0, strLen, buffer, size);
-                for (int i = 0; i < padLen; i++) {
-                    buffer[size + strLen + i] = padChar;
-                }
+            for (int i = strLen; i < width; i++) { // Fill the remaining space with padChar
+                buffer[size + i] = padChar;
             }
             size += width;
         }
         return this;
     }
\ No newline at end of file
