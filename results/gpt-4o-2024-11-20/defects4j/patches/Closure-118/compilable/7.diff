diff --git a/tmp/ea33583f-2e32-4224-8ecd-5443ef8fa5ae_buggy.java b/tmp/159aaca9-209e-4398-bba2-48d8366c1f3d_fixed.java
index 0b7c52e..bd87237 100644
--- a/tmp/ea33583f-2e32-4224-8ecd-5443ef8fa5ae_buggy.java
+++ b/tmp/159aaca9-209e-4398-bba2-48d8366c1f3d_fixed.java
@@ -1,27 +1,36 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
         // Maybe STRING, GET, SET
 
         // We should never see a mix of numbers and strings.
+        if (!child.isString()) {
+          continue; // Skip nodes that are not strings.
+        }
+
         String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
+        if (prop == null) {
+          // Skip properties that do not exist in the system.
+          continue;
+        }
+
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
