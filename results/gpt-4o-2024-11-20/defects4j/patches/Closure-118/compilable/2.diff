diff --git a/tmp/872eb3f2-7790-4376-b90f-41ef308e8e65_buggy.java b/tmp/b6cc9336-62ae-4769-aec2-d231ebb26b85_fixed.java
index 0b7c52e..7d4bd07 100644
--- a/tmp/872eb3f2-7790-4376-b90f-41ef308e8e65_buggy.java
+++ b/tmp/b6cc9336-62ae-4769-aec2-d231ebb26b85_fixed.java
@@ -1,27 +1,30 @@
     /**
      * Processes a OBJECTLIT node.
      */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Ensure only valid STRING, GET, or SET nodes are processed.
+        if (!child.isStringKey() && !child.isGetterDef() && !child.isSetterDef()) {
+          continue;
+        }
 
-        // We should never see a mix of numbers and strings.
+        // Extract property name.
         String name = child.getString();
+        // Evaluate the property type.
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
+          // Handle invalid property renaming case.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
