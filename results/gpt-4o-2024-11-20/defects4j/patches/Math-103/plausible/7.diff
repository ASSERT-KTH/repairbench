diff --git a/tmp/8cadcdc1-1aa7-48bb-aba4-1a1c44d4b4a5_buggy.java b/tmp/58269692-ccb2-423b-95dd-f4597f99e18f_fixed.java
index 6cfa79b..05e17d6 100644
--- a/tmp/8cadcdc1-1aa7-48bb-aba4-1a1c44d4b4a5_buggy.java
+++ b/tmp/58269692-ccb2-423b-95dd-f4597f99e18f_fixed.java
@@ -1,12 +1,24 @@
     /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+     * For this distribution, X, this method returns P(X &lt; <code>x</code>).
      * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+     * @return CDF evaluated at <code>x</code>.
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
+        try {
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
+        } catch (MathException e) {
+            // Handle extreme values more than 20 standard deviations away
+            double threshold = 20 * standardDeviation;
+            if (x < mean - threshold) {
+                return 0.0; // Extremely low values
+            } else if (x > mean + threshold) {
+                return 1.0; // Extremely high values
+            } else {
+                throw e; // Re-throw exception if not extreme
+            }
+        }
     }
\ No newline at end of file
