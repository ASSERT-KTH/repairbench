diff --git a/tmp/ad4d5bfa-6782-4dbf-8ffe-1a3c22e66f9e_buggy.java b/tmp/7d7d37a4-026e-47dd-88d3-bf71ec72d8fa_fixed.java
index 6cfa79b..a4a51a8 100644
--- a/tmp/ad4d5bfa-6782-4dbf-8ffe-1a3c22e66f9e_buggy.java
+++ b/tmp/7d7d37a4-026e-47dd-88d3-bf71ec72d8fa_fixed.java
@@ -1,12 +1,24 @@
     /**
-     * For this disbution, X, this method returns P(X &lt; <code>x</code>).
+     * For this distribution, X, this method returns P(X < <code>x</code>).
      * @param x the value at which the CDF is evaluated.
-     * @return CDF evaluted at <code>x</code>. 
+     * @return CDF evaluated at <code>x</code>. 
      * @throws MathException if the algorithm fails to converge; unless
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
     public double cumulativeProbability(double x) throws MathException {
+        try {
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
+        } catch (Exception e) {
+            // Handle extreme cases explicitly to avoid convergence issues.
+            double zScore = (x - mean) / standardDeviation;
+            if (zScore < -20) {
+                return 0.0; // Extreme lower tail
+            } else if (zScore > 20) {
+                return 1.0; // Extreme upper tail
+            } else {
+                throw new MathException("Unable to evaluate cumulative probability", e);
+            }
+        }
     }
\ No newline at end of file
