diff --git a/tmp/23a65541-f734-441d-8356-e6a025a04ae3_buggy.java b/tmp/8526c2c7-4b71-4e03-a30c-43575e7c6d15_fixed.java
index 544303b..d360323 100644
--- a/tmp/23a65541-f734-441d-8356-e6a025a04ae3_buggy.java
+++ b/tmp/8526c2c7-4b71-4e03-a30c-43575e7c6d15_fixed.java
@@ -1,29 +1,35 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        double mostNegative = Double.POSITIVE_INFINITY;
+
+        // Iterate through all decision variables to find the most negative value in the RHS column
+        for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow != null) {
+                mostNegative = Math.min(mostNegative, getEntry(basicRow, getRhsOffset()));
+            }
+        }
+
+        mostNegative = mostNegative == Double.POSITIVE_INFINITY ? 0 : mostNegative;
+
         for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
+            Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+            // If a decision variable is not in the basis, its value is 0
+            if (basicRow == null) {
+                coefficients[i] = 0;
+            } else {
                 coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                    getEntry(basicRow, getRhsOffset()) -
                     (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
