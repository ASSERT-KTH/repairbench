diff --git a/tmp/2d777ed8-7807-44b1-aa1d-7a7b8ab751a7_buggy.java b/tmp/4e8922eb-96ed-4154-af69-ce59b8d2a697_fixed.java
index 544303b..7a9590f 100644
--- a/tmp/2d777ed8-7807-44b1-aa1d-7a7b8ab751a7_buggy.java
+++ b/tmp/4e8922eb-96ed-4154-af69-ce59b8d2a697_fixed.java
@@ -1,29 +1,40 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Integer basicRow;
+        double mostNegative = Double.POSITIVE_INFINITY;
+
+        // Calculate the most negative value among the RHS entries for non-basic variables
+        for (int i = 0; i < coefficients.length; i++) {
+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow != null) {
+                mostNegative = Math.min(mostNegative, getEntry(basicRow, getRhsOffset()));
+            }
+        }
+        mostNegative = mostNegative == Double.POSITIVE_INFINITY ? 0 : mostNegative;
+
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
+
+            // Ensure coefficients are set properly when variables are associated with basic rows
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {
+                    if (j != i && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {
                         coefficients[i] = 0;
+                        break;
                     }
                 }
             }
         }
+
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
