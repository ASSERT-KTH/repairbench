diff --git a/tmp/fbe74a1b-0069-4406-ad88-b0a56dfadcd9_buggy.java b/tmp/daad3cf4-ca0e-4b42-a5cc-ad100f1128f2_fixed.java
index 544303b..6ef0bed 100644
--- a/tmp/fbe74a1b-0069-4406-ad88-b0a56dfadcd9_buggy.java
+++ b/tmp/daad3cf4-ca0e-4b42-a5cc-ad100f1128f2_fixed.java
@@ -1,29 +1,39 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Integer basicRow;
+        double mostNegative = Double.POSITIVE_INFINITY;
+
+        // First pass: determine the most negative RHS value among decision variables
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+                double entry = getEntry(basicRow, getRhsOffset());
+                if (entry < mostNegative) {
+                    mostNegative = entry;
+                }
+            }
+        }
+
+        // Second pass: compute the value for each decision variable
+        for (int i = 0; i < coefficients.length; i++) {
+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRow == null) {
                 coefficients[i] = 0;
+            } else {
+                coefficients[i] = getEntry(basicRow, getRhsOffset());
+                // Adjust if non-negative restriction is not applied
+                if (!restrictToNonNegative) {
+                    coefficients[i] -= mostNegative;
                 }
             }
         }
-        }
+
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
