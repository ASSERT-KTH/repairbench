diff --git a/tmp/7a276407-5b47-424f-8c16-a6d1f20d2cf1_buggy.java b/tmp/781b97f5-c838-4102-baa5-5fa9879d83e6_fixed.java
index 1b36a4f..7b5d47d 100644
--- a/tmp/7a276407-5b47-424f-8c16-a6d1f20d2cf1_buggy.java
+++ b/tmp/781b97f5-c838-4102-baa5-5fa9879d83e6_fixed.java
@@ -1,58 +1,47 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
-            return StringUtils.EMPTY;
+            return "";
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // ensure lower and upper bounds are valid
+        if (lower > str.length()) {
+            return "";
+        }
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
         if (upper < lower) {
             upper = lower;
         }
 
-        StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
-            }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+        StringBuilder result = new StringBuilder();
+        boolean isAbbreviated = false;
+
+        if (lower > 0) {
+            if (lower < str.length()) {
+                str = str.substring(lower);
             } else {
-            result.append(str.substring(0, index));
-            result.append(StringUtils.defaultString(appendToEnd));
+                return "";
             }
+        }
+
+        int spaceIndex = str.indexOf(" ");
+        if (spaceIndex == -1 || spaceIndex > upper - lower) {
+            result.append(str, 0, Math.min(upper - lower, str.length()));
+            isAbbreviated = upper - lower < str.length();
+        } else {
+            result.append(str, 0, spaceIndex);
+            isAbbreviated = true;
+        }
+
+        // Append appendToEnd only if the string was abbreviated
+        if (isAbbreviated) {
+            result.append(appendToEnd == null ? "" : appendToEnd);
+        }
+
         return result.toString();
     }
\ No newline at end of file
