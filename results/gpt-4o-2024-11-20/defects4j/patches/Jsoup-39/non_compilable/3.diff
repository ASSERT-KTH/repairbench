diff --git a/tmp/7044d90a-b20d-46d7-a61e-a3423e415b27_buggy.java b/tmp/0a78401a-4c1a-4d31-b6be-b24cec343648_fixed.java
index c4b260c..0d51d75 100644
--- a/tmp/7044d90a-b20d-46d7-a61e-a3423e415b27_buggy.java
+++ b/tmp/0a78401a-4c1a-4d31-b6be-b24cec343648_fixed.java
@@ -1,51 +1,65 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        Charset defaultCharsetObj = Charset.forName(defaultCharset);
+        docData = defaultCharsetObj.decode(byteData).toString();
+        // Remove BOM if it exists
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                try {
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // Remove BOM if it exists after re-decoding
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                    }
+                } catch (UnsupportedCharsetException e) {
+                    // fallback to defaultCharset if unsupported charset is provided
+                    charsetName = defaultCharset;
+                    byteData.rewind();
+                    docData = defaultCharsetObj.decode(byteData).toString();
+                    // Remove BOM if it exists
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                    }
+                }
+                doc = null; // re-parse after decoding
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // Remove BOM if it exists
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+    }
+    // If doc is still null, it means we need to parse with the detected or provided charset
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
\ No newline at end of file
