diff --git a/tmp/68aee7da-afb0-4a1d-b19a-7a28b22603a6_buggy.java b/tmp/6f42c4fe-3a07-4dcb-8ff4-f06c25000530_fixed.java
index c4b260c..71f6fa8 100644
--- a/tmp/68aee7da-afb0-4a1d-b19a-7a28b22603a6_buggy.java
+++ b/tmp/6f42c4fe-3a07-4dcb-8ff4-f06c25000530_fixed.java
@@ -1,51 +1,56 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+
+    if (charsetName == null) {
+        // Decode the ByteBuffer using the default charset (UTF-8)
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+        // Look for meta tags containing charset information
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+
+        if (meta != null) {
+            String foundCharset = null;
+
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
+            } else if (meta.hasAttr("charset")) {
                 foundCharset = meta.attr("charset");
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
+                foundCharset = foundCharset.trim().replaceAll("[\"']", ""); // Cleanup charset name
                 charsetName = foundCharset; 
-                    byteData.rewind();
+                byteData.rewind(); // Rewind buffer for re-decoding
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // Decode directly with a specified charset
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+
+    // UTF-8 BOM (Byte Order Mark) detection
+    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+        docData = docData.substring(1); // Remove BOM character
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
+
     return doc;
 }
\ No newline at end of file
