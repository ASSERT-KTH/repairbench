diff --git a/tmp/9a7e5730-cb6f-4c58-a7d7-fbcc093ffc94_buggy.java b/tmp/a5e381f8-82c7-4c69-8eb1-eecd9bf376e1_fixed.java
index c4b260c..0ca8378 100644
--- a/tmp/9a7e5730-cb6f-4c58-a7d7-fbcc093ffc94_buggy.java
+++ b/tmp/a5e381f8-82c7-4c69-8eb1-eecd9bf376e1_fixed.java
@@ -1,51 +1,52 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // Decode as UTF-8 initially
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            
+            // Parse the document and check for any meta charset info
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
+
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
-                if (meta.hasAttr("http-equiv")) {
+                String foundCharset = null;
+                
+                // Check for charset in meta tag attributes
+                if (meta.hasAttr("charset")) {
+                    foundCharset = meta.attr("charset");
+                } else if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
-                    if (foundCharset == null && meta.hasAttr("charset")) {
-                        try {
-                            if (Charset.isSupported(meta.attr("charset"))) {
-                                foundCharset = meta.attr("charset");
-                            }
-                        } catch (IllegalCharsetNameException e) {
-                            foundCharset = null;
-                        }
-                    }
-                } else {
-                    foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                // Attempt to re-decode using the found charset if different from default
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                    
+                    if (Charset.isSupported(foundCharset)) {
                         charsetName = foundCharset;
-                    byteData.rewind();
+                        byteData.rewind(); // Reset buffer for re-decode
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                        doc = null; // Reset doc to parse again with correct charset
+                    }
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+
+        // Check for UTF-8 BOM (Byte Order Mark)
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // 65279 is the BOM character
+            docData = docData.substring(1); // Remove BOM
             byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
-        if (doc == null) {
+
+        if (doc == null) { // Parse the document if not already done
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
+
         return doc;
     }
\ No newline at end of file
