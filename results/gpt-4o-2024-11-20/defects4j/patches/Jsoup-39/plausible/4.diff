diff --git a/tmp/720e80c3-9cb3-47e0-9760-a9f0c1abac46_buggy.java b/tmp/a1a6e6e6-0803-4ccf-8185-e77cdf05573e_fixed.java
index c4b260c..3c18ecb 100644
--- a/tmp/720e80c3-9cb3-47e0-9760-a9f0c1abac46_buggy.java
+++ b/tmp/a1a6e6e6-0803-4ccf-8185-e77cdf05573e_fixed.java
@@ -1,51 +1,64 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.mark(); // Mark the position for potential rewind
+
+        if (charsetName == null) { // determine from meta, safe parse as UTF-8
+            // Decode using default charset first
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+            // Handle UTF-8 BOM (char 65279) and remove it if exists
+            if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                docData = docData.substring(1);
+            }
+
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+
+            if (meta != null) { // Look for charset in meta tag
+                String foundCharset = null;
+
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { 
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.reset(); // Rewind to the marked position
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
+                    // Handle potential BOM in the newly decoded data
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
                     }
+
+                    doc = null; // Reset doc to reparse with correct charset
                 }
-        } else { // specified by content type header (or by user on file load)
+            }
+        } else { // Charset specified
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
+            // Handle UTF-8 BOM (char 65279) for explicitly specified charset
             if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
             }
+        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? Charset.forName(charsetName) : Charset.forName(defaultCharset));
         }
+
         return doc;
     }
\ No newline at end of file
