diff --git a/tmp/c87650a5-6c1f-49fd-825b-dafb6aae3232_buggy.java b/tmp/c227d5b7-629a-4cb4-83ca-06becbfc0f13_fixed.java
index c4b260c..b3f1bee 100644
--- a/tmp/c87650a5-6c1f-49fd-825b-dafb6aae3232_buggy.java
+++ b/tmp/c227d5b7-629a-4cb4-83ca-06becbfc0f13_fixed.java
@@ -1,51 +1,53 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // Decode as UTF-8 initially
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // Remove BOM if present
+            if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                docData = docData.substring(1);
+            }
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                    // Remove BOM again if present
+                    if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                        docData = docData.substring(1);
+                    }
+                    doc = parser.parseInput(docData, baseUri);
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+            // Remove BOM if present
             if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
             }
+        }
+        // Parse document if not already done
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
         }
+        doc.outputSettings().charset(charsetName == null ? defaultCharset : charsetName);
         return doc;
     }
\ No newline at end of file
