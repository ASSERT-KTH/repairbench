diff --git a/tmp/fd43c2d4-85a3-49b7-b084-b5ef27ceb725_buggy.java b/tmp/67325ebf-106b-47a8-ad03-7f5e0bba293b_fixed.java
index c4b260c..5fbc9db 100644
--- a/tmp/fd43c2d4-85a3-49b7-b084-b5ef27ceb725_buggy.java
+++ b/tmp/67325ebf-106b-47a8-ad03-7f5e0bba293b_fixed.java
@@ -1,51 +1,63 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        byteData.rewind(); // Ensure the buffer is reset before decoding
+
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // Remove any leading BOM character
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                docData = docData.substring(1);
+            }
             doc = parser.parseInput(docData, baseUri);
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
+                }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    // Remove any leading BOM in the re-decoded data
+                    if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
+                        docData = docData.substring(1);
+                    }
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // Remove any leading BOM character
+            if (docData.length() > 0 && docData.charAt(0) == '\uFEFF') {
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
             }
+        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
+        }
+
+        // Set charset on output settings
+        if (charsetName != null) {
             doc.outputSettings().charset(charsetName);
+        } else {
+            doc.outputSettings().charset(defaultCharset);
         }
+
         return doc;
     }
\ No newline at end of file
