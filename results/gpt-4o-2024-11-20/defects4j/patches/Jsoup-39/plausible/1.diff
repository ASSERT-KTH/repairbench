diff --git a/tmp/8bcd1113-9669-420a-960b-635c86bc0587_buggy.java b/tmp/78f687f3-49f1-4601-929e-17774d76cc7e_fixed.java
index c4b260c..2743447 100644
--- a/tmp/8bcd1113-9669-420a-960b-635c86bc0587_buggy.java
+++ b/tmp/78f687f3-49f1-4601-929e-17774d76cc7e_fixed.java
@@ -1,51 +1,56 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // decode as UTF-8 by default
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // strip BOM if present
+        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+            docData = docData.substring(1);
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+            String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
+            }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-                } else {
-                    foundCharset = meta.attr("charset");
-                }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                // strip BOM if present
+                if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                    docData = docData.substring(1);
+                }
+                doc = parser.parseInput(docData, baseUri);
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+        // strip BOM if present
         if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
+        doc = parser.parseInput(docData, baseUri);
+    }
+
     if (doc == null) {
+        // this shouldn't happen, but keep as fallback
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
     }
+    doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     return doc;
 }
\ No newline at end of file
