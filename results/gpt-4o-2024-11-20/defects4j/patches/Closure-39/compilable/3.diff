diff --git a/tmp/cb316bb5-2974-4749-ba44-2548015dd94c_buggy.java b/tmp/98250812-b68e-42e6-b45f-5623d0942f41_fixed.java
index e4d90e7..8f1aa88 100644
--- a/tmp/cb316bb5-2974-4749-ba44-2548015dd94c_buggy.java
+++ b/tmp/98250812-b68e-42e6-b45f-5623d0942f41_fixed.java
@@ -1,45 +1,54 @@
   @Override
   String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+        // Handle recursion gracefully by detecting recursive references.
+        JSType propertyType = getPropertyType(property);
+        if (propertyType != null && propertyType.equals(this) && !forAnnotations) {
+          sb.append("{...}");
+        } else if (propertyType != null && propertyType.equals(this) && forAnnotations) {
+          sb.append("?");
+        } else {
+          sb.append(propertyType.toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
   }
\ No newline at end of file
