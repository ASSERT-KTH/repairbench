diff --git a/tmp/660dd0b9-2625-422b-93d7-769ab8426e14_buggy.java b/tmp/6bf5b64b-d677-406c-adf1-4a895f22a8eb_fixed.java
index e4d90e7..bcd9a10 100644
--- a/tmp/660dd0b9-2625-422b-93d7-769ab8426e14_buggy.java
+++ b/tmp/6bf5b64b-d677-406c-adf1-4a895f22a8eb_fixed.java
@@ -1,45 +1,57 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
     } else if (prettyPrint) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
-           current != null && !current.isNativeObjectType() &&
-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
+             current != null && !current.isNativeObjectType();
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
+            if (!forAnnotations && i >= MAX_PRETTY_PRINTED_PROPERTIES) {
+                sb.append(", ...");
+                break;
+            }
+
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+            if (!forAnnotations && isPropertyTypeRecursive(property)) {
+                sb.append("{...}");
+            } else {
+                sb.append(getPropertyType(property).toString(forAnnotations));
+            }
 
             ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
-          sb.append(", ...");
-          break;
-        }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
         return "{...}";
     }
 }
+
+/**
+ * Helper method to determine if a property's type is recursive.
+ */
+private boolean isPropertyTypeRecursive(String property) {
+    JSType propertyType = getPropertyType(property);
+    return propertyType != null && propertyType.isEquivalentTo(this);
+}
\ No newline at end of file
