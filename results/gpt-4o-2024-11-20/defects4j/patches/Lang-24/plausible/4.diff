diff --git a/tmp/008d5698-196a-489a-9d89-3a6b351d2625_buggy.java b/tmp/a4e23d36-a9e3-46a5-bc63-df2cb64cb20d_fixed.java
index 33b47bc..5414ad9 100644
--- a/tmp/008d5698-196a-489a-9d89-3a6b351d2625_buggy.java
+++ b/tmp/a4e23d36-a9e3-46a5-bc63-df2cb64cb20d_fixed.java
@@ -1,116 +1,85 @@
-    /**
-     * <p>Checks whether the String a valid Java number.</p>
-     *
-     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
-     * qualifier, scientific notation and numbers marked with a type
-     * qualifier (e.g. 123L).</p>
-     *
-     * <p><code>Null</code> and empty String will return
-     * <code>false</code>.</p>
-     *
-     * @param str  the <code>String</code> to check
-     * @return <code>true</code> if the string is a correctly formatted number
-     */
 public static boolean isNumber(String str) {
-        if (StringUtils.isEmpty(str)) {
+    if (str == null || str.isEmpty()) {
         return false;
     }
     char[] chars = str.toCharArray();
     int sz = chars.length;
     boolean hasExp = false;
     boolean hasDecPoint = false;
     boolean allowSigns = false;
     boolean foundDigit = false;
-        // deal with any possible sign up front
-        int start = (chars[0] == '-') ? 1 : 0;
+    int start = (chars[0] == '-') ? 1 : 0; // Start after minus if present
+
     if (sz > start + 1) {
-            if (chars[start] == '0' && chars[start + 1] == 'x') {
+        if (chars[start] == '0' && (chars[start + 1] == 'x' || chars[start + 1] == 'X')) {
             int i = start + 2;
             if (i == sz) {
-                    return false; // str == "0x"
+                return false; // "0x" is not valid
             }
-                // checking hex (it can't be anything else)
             for (; i < chars.length; i++) {
                 if ((chars[i] < '0' || chars[i] > '9')
                         && (chars[i] < 'a' || chars[i] > 'f')
                         && (chars[i] < 'A' || chars[i] > 'F')) {
                     return false;
                 }
             }
             return true;
         }
     }
-        sz--; // don't want to loop to the last char, check it afterwords
-              // for type qualifiers
+
+    sz--; // Adjust to leave a slot for checking qualifiers
     int i = start;
-        // loop to the next to last char or to the last char if we need another digit to
-        // make a valid number (e.g. chars[0..5] = "1234E")
+
     while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
         if (chars[i] >= '0' && chars[i] <= '9') {
             foundDigit = true;
             allowSigns = false;
 
         } else if (chars[i] == '.') {
             if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent   
-                    return false;
+                return false; // Multiple decimal points or decimal in exponent
             }
             hasDecPoint = true;
+
         } else if (chars[i] == 'e' || chars[i] == 'E') {
-                // we've already taken care of hex.
-                if (hasExp) {
-                    // two E's
-                    return false;
-                }
-                if (!foundDigit) {
+            if (hasExp || !foundDigit) {
                 return false;
             }
             hasExp = true;
             allowSigns = true;
+            foundDigit = false; // Reset because we need digits after 'E'
+
         } else if (chars[i] == '+' || chars[i] == '-') {
             if (!allowSigns) {
-                    return false;
+                return false; // Sign not allowed here
             }
             allowSigns = false;
-                foundDigit = false; // we need a digit after the E
+            foundDigit = false; // Expect digit after the sign
+
         } else {
-                return false;
+            return false; // Invalid character
         }
         i++;
     }
+
     if (i < chars.length) {
         if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
-                return true;
-            }
-            if (chars[i] == 'e' || chars[i] == 'E') {
-                // can't have an E at the last byte
-                return false;
+            return true; // Ends with digit
         }
         if (chars[i] == '.') {
-                if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent
-                    return false;
+            return !hasDecPoint && !hasExp && foundDigit; // Trailing decimal point
         }
-                // single trailing decimal point after non-exponent is ok
-                return foundDigit;
+        if (chars[i] == 'e' || chars[i] == 'E') {
+            return false; // 'E' cannot terminate a valid number
         }
-            if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
-                return foundDigit;
+        if (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F') {
+            return foundDigit; // Valid float qualifiers
         }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
-                // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
+        if (chars[i] == 'l' || chars[i] == 'L') {
+            return foundDigit && !hasDecPoint && !hasExp; // Valid long qualifier
         }
-            // last character is illegal
-            return false;
+        return false; // Invalid trailing character
     }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
-        return !allowSigns && foundDigit;
+
+    return !allowSigns && foundDigit; // Check final state
 }
\ No newline at end of file
