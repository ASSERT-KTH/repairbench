diff --git a/tmp/9d806bfb-d548-44e8-8747-c11cccccdaf0_buggy.java b/tmp/6b3c1446-8e3d-447e-a09d-e302bef7258b_fixed.java
index 5abdeb5..0b735d8 100644
--- a/tmp/9d806bfb-d548-44e8-8747-c11cccccdaf0_buggy.java
+++ b/tmp/6b3c1446-8e3d-447e-a09d-e302bef7258b_fixed.java
@@ -1,29 +1,34 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+            // TODO: Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+               (parent.getFirstChild() == n)) &&
+              // Ensure that we don't count the variable on the left-hand side
+              // of an assignment inside a ternary hook.
+              !(parent.isHook() && parent.getParent() != null &&
+                parent.getParent().isAssign() &&
+                parent.getParent().getFirstChild() == parent)) {
+              // Don't count lhs of top-level assignment chain or lhs in ternary conditions
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
