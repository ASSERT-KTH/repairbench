diff --git a/tmp/b60db8ef-2091-49e1-a3a7-5323d557fe3a_buggy.java b/tmp/f3aff6b4-d618-49ef-a84a-8a58a44de54e_fixed.java
index 5abdeb5..172f776 100644
--- a/tmp/b60db8ef-2091-49e1-a3a7-5323d557fe3a_buggy.java
+++ b/tmp/f3aff6b4-d618-49ef-a84a-8a58a44de54e_fixed.java
@@ -1,29 +1,25 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+               (parent.getFirstChild() == n)) &&
+              !(NodeUtil.isLValue(n, parent))) {
+              // Ignore lhs of any LValue (assignments and declarations)
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
