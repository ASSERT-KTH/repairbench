diff --git a/tmp/7b13b8ac-ff6a-4e60-8f91-b726a79afca6_buggy.java b/tmp/0e5e01d3-23e4-4913-ac80-de9b8cdd33d4_fixed.java
index 5abdeb5..625500d 100644
--- a/tmp/7b13b8ac-ff6a-4e60-8f91-b726a79afca6_buggy.java
+++ b/tmp/0e5e01d3-23e4-4913-ac80-de9b8cdd33d4_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
+            // will happen after the inlining of the right-hand side.
+            // TODO: Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
               !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                parent.getFirstChild() == n) &&
+              // Special case: Do not count variable uses in the LHS of a hook expression
+              !(parent.isHook() &&
+                (parent.getFirstChild() == n || parent.getSecondChild() == n))) {
               numUsesWithinCfgNode++;
           }
         }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
