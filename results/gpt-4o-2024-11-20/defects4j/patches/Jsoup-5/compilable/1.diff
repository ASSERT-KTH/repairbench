diff --git a/tmp/c5d2646f-9a12-4011-86e1-2744447de19e_buggy.java b/tmp/baaf5d14-5aeb-4378-8840-185cf595f490_fixed.java
index 39dd8e7..5d0db18 100644
--- a/tmp/c5d2646f-9a12-4011-86e1-2744447de19e_buggy.java
+++ b/tmp/baaf5d14-5aeb-4378-8840-185cf595f490_fixed.java
@@ -1,30 +1,33 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                while (!tq.matchesAny("<", "/>", ">", "=", "\"", "'") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
+        // Handle case when key is invalid and we need to gracefully stop parsing
+        if (key == null || key.length() == 0) {
+            // If key is empty, try to consume one token safely and return null
+            if (!tq.isEmpty()) {
                 tq.consume(); 
-                
+            }
             return null;
         }
+
+        return Attribute.createFromEncoded(key, value);
     }
\ No newline at end of file
