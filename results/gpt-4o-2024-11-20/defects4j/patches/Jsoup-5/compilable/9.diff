diff --git a/tmp/6d742494-1d14-4c71-8270-c36ab0254565_buggy.java b/tmp/d045ed4b-21d3-4c21-a088-64bbd0ad3c72_fixed.java
index 39dd8e7..56d1460 100644
--- a/tmp/6d742494-1d14-4c71-8270-c36ab0254565_buggy.java
+++ b/tmp/d045ed4b-21d3-4c21-a088-64bbd0ad3c72_fixed.java
@@ -1,30 +1,38 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
+
+        // Ensure key is not null or empty before proceeding
+        if (key == null || key.isEmpty()) {
+            tq.consume(); // Safely consume to prevent infinite loop
+            return null;  // Return null for invalid attribute
+        }
+
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
-        if (key.length() != 0)
+
+        if (!key.isEmpty()) // Double check to ensure key is valid
             return Attribute.createFromEncoded(key, value);
         else {
-            tq.consume();
+            tq.consume(); // Safely consume to avoid further issues
                 
             return null;
         }
     }
\ No newline at end of file
