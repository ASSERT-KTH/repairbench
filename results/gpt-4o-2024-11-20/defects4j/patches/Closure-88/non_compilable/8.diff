diff --git a/tmp/587a71cf-bae9-4a75-b0e3-10fbfc6853c8_buggy.java b/tmp/5cc133d5-469b-4c95-bf1f-623836893365_fixed.java
index 9353941..34e7b87 100644
--- a/tmp/587a71cf-bae9-4a75-b0e3-10fbfc6853c8_buggy.java
+++ b/tmp/5cc133d5-469b-4c95-bf1f-623836893365_fixed.java
@@ -1,30 +1,30 @@
   /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * Determines whether a variable is read before it is killed in the current node or its descendants.
+   * 
+   * It returns READ if the first reference of the variable is a read, KILL if the first reference 
+   * of the variable is an assignment, and MAYBE_LIVE otherwise.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhsOfAssign(n)) {
+        // A variable on the LHS of an assignment is "killed".
         return VariableLiveness.KILL;
       } else {
+        // Any other reference to the variable is considered a "read".
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+    // Explore children nodes in left-to-right, depth-first order.
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+        if (childState != VariableLiveness.MAYBE_LIVE) {
+          return childState;
         }
       }
     }
+
+    // Default case: if no definitive read or kill was found, return MAYBE_LIVE.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
