diff --git a/tmp/0faab553-c29e-46f6-8353-65c1a412f76c_buggy.java b/tmp/27d24c36-982f-4b1f-997a-d69e9af5fb3f_fixed.java
index 9353941..196a071 100644
--- a/tmp/0faab553-c29e-46f6-8353-65c1a412f76c_buggy.java
+++ b/tmp/27d24c36-982f-4b1f-997a-d69e9af5fb3f_fixed.java
@@ -1,30 +1,32 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhsOfAssign(n)) {
+        // The KILL occurs during the assignment to the LHS.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    VariableLiveness firstState = VariableLiveness.MAYBE_LIVE;
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.READ || state == VariableLiveness.KILL) {
           return state;
         }
+        if (firstState == VariableLiveness.MAYBE_LIVE) {
+          firstState = state;
         }
       }
-    return VariableLiveness.MAYBE_LIVE;
+    }
+    return firstState;
   }
\ No newline at end of file
