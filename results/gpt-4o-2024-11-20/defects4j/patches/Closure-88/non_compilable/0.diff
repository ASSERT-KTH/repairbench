diff --git a/tmp/0dde2319-6aa6-4f5c-af0c-99aa028fe7ad_buggy.java b/tmp/e281e336-bfdc-46cb-bd3a-9c3e7ea59a2a_fixed.java
index 9353941..1c2612d 100644
--- a/tmp/0dde2319-6aa6-4f5c-af0c-99aa028fe7ad_buggy.java
+++ b/tmp/e281e336-bfdc-46cb-bd3a-9c3e7ea59a2a_fixed.java
@@ -1,30 +1,24 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhsOfAssign(n)) {
+        // The variable is part of a LHS assignment.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    VariableLiveness result = VariableLiveness.MAYBE_LIVE;
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+        VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+        if (childState == VariableLiveness.READ || childState == VariableLiveness.KILL) {
+          return childState; // Return immediately if a definitive state is found.
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+    return result;
   }
\ No newline at end of file
