diff --git a/tmp/045f5a7b-cd72-4eb2-8264-d9dd921c4a56_buggy.java b/tmp/94ccdfbb-ec7b-4977-a234-5e6f164a2214_fixed.java
index 9353941..2289c61 100644
--- a/tmp/045f5a7b-cd72-4eb2-8264-d9dd921c4a56_buggy.java
+++ b/tmp/94ccdfbb-ec7b-4977-a234-5e6f164a2214_fixed.java
@@ -1,30 +1,28 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhsOfAssign(n) || NodeUtil.isLhs(n, n.getParent())) {
+        // The variable is being written (KILL).
         return VariableLiveness.KILL;
       } else {
+        // The variable is being read (READ).
         return VariableLiveness.READ;
       }
     }
 
-    // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+    // Expressions are evaluated left-right, depth-first.
+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
