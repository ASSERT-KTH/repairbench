diff --git a/tmp/3f9fadf5-22d8-4055-ba93-61c83202dff7_buggy.java b/tmp/17fb1b28-964c-4160-981e-4c4a826eb87f_fixed.java
index 9353941..f09d4b3 100644
--- a/tmp/3f9fadf5-22d8-4055-ba93-61c83202dff7_buggy.java
+++ b/tmp/17fb1b28-964c-4160-981e-4c4a826eb87f_fixed.java
@@ -1,30 +1,32 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      if (NodeUtil.isLhsOfAssign(n)) {
+        // The variable is being assigned, so it is a KILL.
         return VariableLiveness.KILL;
       } else {
+        // The variable is being read, so it is a READ.
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Skip new control flow nodes like FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.READ || state == VariableLiveness.KILL) {
+          // If a READ or KILL is found, propagate it up immediately.
           return state;
         }
       }
     }
+
+    // If no READ or KILL is found, variable remains in MAYBE_LIVE state.
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
