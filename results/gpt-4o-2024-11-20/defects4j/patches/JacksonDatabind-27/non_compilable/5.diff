diff --git a/tmp/363fd9d4-03d8-4cbe-b765-ac479cd5dfa2_buggy.java b/tmp/3f671ecd-35aa-430f-8504-2f4137ab3de8_fixed.java
index 5bc9804..ef3d5a2 100644
--- a/tmp/363fd9d4-03d8-4cbe-b765-ac479cd5dfa2_buggy.java
+++ b/tmp/3f671ecd-35aa-430f-8504-2f4137ab3de8_fixed.java
@@ -1,85 +1,84 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p, DeserializationContext ctxt)
     throws IOException
 {
     final ExternalTypeHandler ext = _externalTypeIdHandler.start();
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
-        TokenBuffer tokens = new TokenBuffer(p);
+    TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
-            // creator property?
+        
+        // Creator property check
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                // first: let's check to see if this might be part of value with external type id:
-                // 11-Sep-2015, tatu: Important; do NOT pass buffer as last arg, but null,
-                //   since it is not the bean
             if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {
-                    ;
-                } else {
-                    // Last creator property to set?
+                continue;
+            }
             if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {
-                        t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT
+                t = p.nextToken(); // move to the next token after assigning the creator property
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue; // never gets here
                 }
-                        // if so, need to copy all remaining tokens into buffer
+                // Process remaining tokens into the TokenBuffer
                 while (t == JsonToken.FIELD_NAME) {
-                            p.nextToken(); // to skip name
-                            tokens.copyCurrentStructure(p);
+                    p.nextToken(); // skip the field name
+                    tokens.copyCurrentStructure(p); // copy the current structure
                     t = p.nextToken();
                 }
                 if (bean.getClass() != _beanType.getRawClass()) {
-                            // !!! 08-Jul-2011, tatu: Could theoretically support; but for now
-                            //   it's too complicated, so bail out
-                            throw ctxt.mappingException("Can not create polymorphic instances with unwrapped values");
+                    throw ctxt.mappingException(
+                            "Cannot create polymorphic instances with unwrapped values");
                 }
                 return ext.complete(p, ctxt, bean);
             }
-                }
             continue;
         }
-            // Object Id property?
+
+        // Object Id property
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+
+        // Regular property processing
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
             buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
             continue;
         }
-            // external type id (or property that depends on it)?
+
+        // External type id or dependent property
         if (ext.handlePropertyValue(p, ctxt, propName, null)) {
             continue;
         }
-            /* As per [JACKSON-313], things marked as ignorable should not be
-             * passed to any setter
-             */
+
+        // Ignorable property
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
-            // "any property"?
+
+        // "Any property" handler
         if (_anySetter != null) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT; resolve the pieces:
+    // Process remaining buffered properties and external properties
     try {
-            return ext.complete(p, ctxt, buffer, creator);
+        Object bean = creator.build(ctxt, buffer);
+        return ext.complete(p, ctxt, bean);
     } catch (Exception e) {
         wrapInstantiationProblem(e, ctxt);
-            return null; // never gets here
+        return null; // Never reached
     }
 }
\ No newline at end of file
