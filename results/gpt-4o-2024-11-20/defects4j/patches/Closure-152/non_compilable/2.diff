diff --git a/tmp/ff1d692b-3b1f-45e2-b096-9e1af0df52ec_buggy.java b/tmp/aaef1ecb-7081-4f45-beea-f315f715bf12_fixed.java
index 58a1651..1cc69c2 100644
--- a/tmp/ff1d692b-3b1f-45e2-b096-9e1af0df52ec_buggy.java
+++ b/tmp/aaef1ecb-7081-4f45-beea-f315f715bf12_fixed.java
@@ -1,32 +1,45 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle UnionType correctly as a possible type for typeOfThis.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Extract ObjectTypes from the UnionType.
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      typeOfThis = unionType.getAlternates().stream()
+              .filter(alternate -> alternate instanceof ObjectType)
+              .map(alternate -> (ObjectType) alternate)
+              .findFirst()
+              .orElse(null);
+    } else {
+      typeOfThis = null; // If it cannot be resolved to an ObjectType.
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
