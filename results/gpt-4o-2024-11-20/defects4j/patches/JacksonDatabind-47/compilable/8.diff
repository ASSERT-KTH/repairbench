diff --git a/tmp/a3fa585a-348b-4d4d-ac6c-d9a1ff0d75da_buggy.java b/tmp/28b4c4dd-5bc8-4a08-b080-a6da28d16e61_fixed.java
index f9fd9ef..6d4b15f 100644
--- a/tmp/a3fa585a-348b-4d4d-ac6c-d9a1ff0d75da_buggy.java
+++ b/tmp/28b4c4dd-5bc8-4a08-b080-a6da28d16e61_fixed.java
@@ -1,108 +1,92 @@
     /**
      * Method called to find out possible type refinements to use
      * for deserialization.
      *
      * @since 2.7
      */
     public JavaType refineSerializationType(final MapperConfig<?> config,
             final Annotated a, final JavaType baseType) throws JsonMappingException
     {
         JavaType type = baseType;
         final TypeFactory tf = config.getTypeFactory();
 
-        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
-        //    now-deprecated secondary methods; this because while
-        //    direct sub-class not yet retrofitted may only override
-        //    those methods. With 2.8 or later we may consider removal
-        //    of these methods
-
-        
         // Ok: start by refining the main type itself; common to all types
         Class<?> serClass = findSerializationType(a);
         if (serClass != null) {
-            if (type.hasRawClass(serClass)) {
-                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
-                //    static typing this way
-                type = type.withStaticTyping();
-            } else {
+            if (!serClass.isAssignableFrom(type.getRawClass())) {
+                if (type.getRawClass().isAssignableFrom(serClass)) {
+                    // Specialize type if widening fails but narrowing is allowed
                     try {
-                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
-                    //   may be needed here too in future?
-                        type = tf.constructGeneralizedType(type, serClass);
+                        type = tf.constructSpecializedType(type, serClass);
                     } catch (IllegalArgumentException iae) {
                         throw new JsonMappingException(null,
-                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
+                                String.format("Failed to narrow type %s with annotation (value %s), from '%s': %s",
                                         type, serClass.getName(), a.getName(), iae.getMessage()),
                                 iae);
                     }
+                } else {
+                    throw new JsonMappingException(null,
+                            String.format("Cannot refine serialization type %s into %s; types not related",
+                                    type, serClass.getName()));
                 }
+            } else {
+                type = type.withStaticTyping();
             }
+        }
+
         // Then further processing for container types
 
         // First, key type (for Maps, Map-like types):
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             Class<?> keyClass = findSerializationKeyType(a, keyType);
             if (keyClass != null) {
-                if (keyType.hasRawClass(keyClass)) {
-                    keyType = keyType.withStaticTyping();
-                } else {
-                    Class<?> currRaw = keyType.getRawClass();
+                if (!keyClass.isAssignableFrom(keyType.getRawClass())) {
+                    if (keyType.getRawClass().isAssignableFrom(keyClass)) {
                         try {
-                        // 19-May-2016, tatu: As per [databind#1231], [databind#1178] may need to actually
-                        //   specialize (narrow) type sometimes, even if more commonly opposite
-                        //   is needed.
-                        if (keyClass.isAssignableFrom(currRaw)) { // common case
-                            keyType = tf.constructGeneralizedType(keyType, keyClass);
-                        } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                             keyType = tf.constructSpecializedType(keyType, keyClass);
+                        } catch (IllegalArgumentException iae) {
+                            throw new JsonMappingException(null,
+                                    String.format("Failed to narrow key type of %s with annotation (value %s), from '%s': %s",
+                                            type, keyClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
+                        }
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Cannot refine serialization key type %s into %s; types not related",
                                         keyType, keyClass.getName()));
                     }
-                    } catch (IllegalArgumentException iae) {
-                        throw new JsonMappingException(null,
-                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
-                                        iae);
-                    }
+                } else {
+                    keyType = keyType.withStaticTyping();
                 }
                 type = ((MapLikeType) type).withKeyType(keyType);
             }
         }
 
         JavaType contentType = type.getContentType();
         if (contentType != null) { // collection[like], map[like], array, reference
-            // And then value types for all containers:
             Class<?> contentClass = findSerializationContentType(a, contentType);
             if (contentClass != null) {
-               if (contentType.hasRawClass(contentClass)) {
-                   contentType = contentType.withStaticTyping();
-               } else {
-                   // 03-Apr-2016, tatu: As per [databind#1178], may need to actually
-                   //   specialize (narrow) type sometimes, even if more commonly opposite
-                   //   is needed.
-                   Class<?> currRaw = contentType.getRawClass();
+                if (!contentClass.isAssignableFrom(contentType.getRawClass())) {
+                    if (contentType.getRawClass().isAssignableFrom(contentClass)) {
                         try {
-                       if (contentClass.isAssignableFrom(currRaw)) { // common case
-                           contentType = tf.constructGeneralizedType(contentType, contentClass);
-                       } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                             contentType = tf.constructSpecializedType(contentType, contentClass);
+                        } catch (IllegalArgumentException iae) {
+                            throw new JsonMappingException(null,
+                                    String.format("Failed to narrow content type of %s with annotation (value %s), from '%s': %s",
+                                            type, contentClass.getName(), a.getName(), iae.getMessage()),
+                                    iae);
+                        }
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Cannot refine serialization content type %s into %s; types not related",
                                         contentType, contentClass.getName()));
                     }
-                   } catch (IllegalArgumentException iae) { // shouldn't really happen
-                       throw new JsonMappingException(null,
-                               String.format("Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s",
-                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
-                                       iae);
-                   }
+                } else {
+                    contentType = contentType.withStaticTyping();
                 }
                 type = type.withContentType(contentType);
             }
         }
         return type;
     }
\ No newline at end of file
