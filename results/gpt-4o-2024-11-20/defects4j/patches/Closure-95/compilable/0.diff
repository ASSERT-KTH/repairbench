diff --git a/tmp/d480636c-ba10-4e19-b150-cb8f5e2f47e9_buggy.java b/tmp/2abab2f2-f84b-437e-b437-b35cfbba4c7d_fixed.java
index 3652aad..13b15d0 100644
--- a/tmp/d480636c-ba10-4e19-b150-cb8f5e2f47e9_buggy.java
+++ b/tmp/2abab2f2-f84b-437e-b437-b35cfbba4c7d_fixed.java
@@ -1,86 +1,83 @@
-    /**
-     * Defines a typed variable. The defining node will be annotated with the
-     * variable's type of {@link JSTypeNative#UNKNOWN_TYPE} if its type is
-     * inferred.
-     *
-     * Slots may be any variable or any qualified name in the global scope.
-     *
-     * @param n the defining NAME or GETPROP node.
-     * @param parent the {@code n}'s parent.
-     * @param type the variable's type. It may be {@code null} if
-     *     {@code inferred} is {@code true}.
-     */
     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {
         Preconditions.checkArgument(inferred || type != null);
 
-      // Only allow declarations of NAMEs and qualfied names.
+        // Only allow declarations of NAMEs and qualified names.
         boolean shouldDeclareOnGlobalThis = false;
         if (n.getType() == Token.NAME) {
             Preconditions.checkArgument(
                 parent.getType() == Token.FUNCTION ||
                 parent.getType() == Token.VAR ||
                 parent.getType() == Token.LP ||
                 parent.getType() == Token.CATCH);
             shouldDeclareOnGlobalThis = scope.isGlobal() &&
                 (parent.getType() == Token.VAR ||
                  parent.getType() == Token.FUNCTION);
         } else {
             Preconditions.checkArgument(
                 n.getType() == Token.GETPROP &&
                 (parent.getType() == Token.ASSIGN ||
                  parent.getType() == Token.EXPR_RESULT));
         }
         String variableName = n.getQualifiedName();
-      Preconditions.checkArgument(!variableName.isEmpty());
+        Preconditions.checkArgument(variableName != null && !variableName.isEmpty());
 
         // If n is a property, then we should really declare it in the
         // scope where the root object appears. This helps out people
         // who declare "global" names in an anonymous namespace.
         Scope scopeToDeclareIn = scope;
         
-        // don't try to declare in the global scope if there's
-        // already a symbol there with this name.
+        // Adjust the scope for qualified names to declare in the appropriate context.
+        if (n.getType() == Token.GETPROP) {
+            Node root = n.getFirstChild();
+            if (root != null && root.isQualifiedName()) {
+                Var rootVar = scope.getVar(root.getQualifiedName());
+                if (rootVar != null && rootVar.isGlobal()) {
+                    scopeToDeclareIn = rootVar.getScope();
+                }
+            }
+        }
 
-      // declared in closest scope?
+        // Don't try to declare in the global scope if there's already
+        // a symbol there with this name.
         if (scopeToDeclareIn.isDeclared(variableName, false)) {
             Var oldVar = scopeToDeclareIn.getVar(variableName);
             validator.expectUndeclaredVariable(
                 sourceName, n, parent, oldVar, variableName, type);
         } else {
             if (!inferred) {
                 setDeferredType(n, type);
             }
             CompilerInput input = compiler.getInput(sourceName);
             scopeToDeclareIn.declare(variableName, n, type, input, inferred);
 
             if (shouldDeclareOnGlobalThis) {
                 ObjectType globalThis =
                     typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
                 boolean isExtern = input.isExtern();
                 if (inferred) {
                     globalThis.defineInferredProperty(variableName,
                         type == null ?
                             getNativeType(JSTypeNative.NO_TYPE) :
                             type,
                         isExtern);
                 } else {
                     globalThis.defineDeclaredProperty(variableName, type, isExtern);
                 }
             }
 
             // If we're in the global scope, also declare var.prototype
             // in the scope chain.
             if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {
                 FunctionType fnType = (FunctionType) type;
                 if (fnType.isConstructor() || fnType.isInterface()) {
                     FunctionType superClassCtor = fnType.getSuperClassConstructor();
                     scopeToDeclareIn.declare(variableName + ".prototype", n,
                         fnType.getPrototype(), compiler.getInput(sourceName),
                         /* declared iff there's an explicit supertype */
                         superClassCtor == null ||
                         superClassCtor.getInstanceType().equals(
                             getNativeType(OBJECT_TYPE)));
                 }
             }
         }
     }
\ No newline at end of file
