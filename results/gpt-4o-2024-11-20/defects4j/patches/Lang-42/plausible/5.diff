diff --git a/tmp/5341b99e-05fd-4fb0-9be5-b6747d0a21f4_buggy.java b/tmp/8b4530f5-2ab8-4ccf-9c45-6aad5867fb45_fixed.java
index 822447c..1fdc459 100644
--- a/tmp/5341b99e-05fd-4fb0-9be5-b6747d0a21f4_buggy.java
+++ b/tmp/8b4530f5-2ab8-4ccf-9c45-6aad5867fb45_fixed.java
@@ -1,37 +1,26 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+            int codePoint = str.codePointAt(i);
+            String entityName = this.entityName(codePoint);
+            
             if (entityName == null) {
-                if (c > 0x7F) {
+                if (codePoint > 0x7F) {
                     writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                    writer.write(Integer.toString(codePoint, 10));
                     writer.write(';');
                 } else {
-                    writer.write(c);
+                    writer.write(codePoint);
                 }
             } else {
                 writer.write('&');
                 writer.write(entityName);
                 writer.write(';');
             }
+            
+            // If the character is represented by a surrogate pair, skip the next character
+            if (Character.isSupplementaryCodePoint(codePoint)) {
+                i++;
+            }
         }
     }
\ No newline at end of file
