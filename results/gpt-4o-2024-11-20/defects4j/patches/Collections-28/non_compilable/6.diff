diff --git a/tmp/2001db01-1fa5-4453-89da-9c42e47f9cb4_buggy.java b/tmp/d0a388a1-3ed2-4dbf-8cb2-3622079e9701_fixed.java
index e69de29..ef6217a 100644
--- a/tmp/2001db01-1fa5-4453-89da-9c42e47f9cb4_buggy.java
+++ b/tmp/d0a388a1-3ed2-4dbf-8cb2-3622079e9701_fixed.java
@@ -0,0 +1,50 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final SortedMap<K, V> subMap = super.prefixMap(prefix);
+
+    return new AbstractSortedMap<K, V>() {
+        @Override
+        public Set<Entry<K, V>> entrySet() {
+            return subMap.entrySet();
+        }
+
+        @Override
+        public void clear() {
+            // Ensure that clearing the prefix map removes the entries from the backing trie.
+            Iterator<K> iterator = subMap.keySet().iterator();
+            while (iterator.hasNext()) {
+                PatriciaTrie.this.remove(iterator.next());
+            }
+        }
+
+        @Override
+        public Comparator<? super K> comparator() {
+            return subMap.comparator();
+        }
+
+        @Override
+        public K firstKey() {
+            return subMap.firstKey();
+        }
+
+        @Override
+        public K lastKey() {
+            return subMap.lastKey();
+        }
+
+        @Override
+        public SortedMap<K, V> headMap(K toKey) {
+            return subMap.headMap(toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> subMap(K fromKey, K toKey) {
+            return subMap.subMap(fromKey, toKey);
+        }
+
+        @Override
+        public SortedMap<K, V> tailMap(K fromKey) {
+            return subMap.tailMap(fromKey);
+        }
+    };
+}
\ No newline at end of file
