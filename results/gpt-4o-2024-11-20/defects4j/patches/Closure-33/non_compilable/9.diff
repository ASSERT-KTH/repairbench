diff --git a/tmp/c0f897e7-541c-479c-bb3e-0e64bf7159d5_buggy.java b/tmp/00c17941-6337-43f0-ba58-b679a25395cc_fixed.java
index fb2b020..f1f2543 100644
--- a/tmp/c0f897e7-541c-479c-bb3e-0e64bf7159d5_buggy.java
+++ b/tmp/00c17941-6337-43f0-ba58-b679a25395cc_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
+        
+        // Ensure compatibility when narrowing types.
         if (!hasProperty(prop)) {
+          if (propType.isSubtypeOf(getNativeType(JSTypeNative.UNKNOWN_TYPE))) {
+            typeToInfer = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+          } else {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+        }
+        
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
