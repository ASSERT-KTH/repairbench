diff --git a/tmp/b826ab36-9f81-40a9-a036-be7d4c53d350_buggy.java b/tmp/97806196-b528-4df4-961c-4422b614d5dd_fixed.java
index fb2b020..de625b6 100644
--- a/tmp/b826ab36-9f81-40a9-a036-be7d4c53d350_buggy.java
+++ b/tmp/97806196-b528-4df4-961c-4422b614d5dd_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // taking each property on the record and trying to match properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+      if (!hasOwnProperty(prop) || !isPropertyTypeDeclared(prop)) { // Fix: Ensure both checks are correct
         JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
+        if (!hasOwnProperty(prop)) { // Fix: Correctly check if the property is not defined
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
