diff --git a/tmp/3ed5d8d4-f5a9-4642-9ff4-b257fd12d85d_buggy.java b/tmp/19ebffa8-97a3-4a9f-83e6-e55180ec9304_fixed.java
index fb2b020..56e9bbd 100644
--- a/tmp/3ed5d8d4-f5a9-4642-9ff4-b257fd12d85d_buggy.java
+++ b/tmp/19ebffa8-97a3-4a9f-83e6-e55180ec9304_fixed.java
@@ -1,27 +1,21 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
+            // Ensure that the inferred type accounts for undefined
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                .getLeastSupertype(propType)
+                .getLeastSupertype(getNativeType(JSTypeNative.NO_TYPE));
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
