diff --git a/tmp/7b4a69db-f61d-4170-b264-d643f08b2d43_buggy.java b/tmp/5fd10e82-9ef1-4674-904d-90a96d066886_fixed.java
index 602226b..c6baaa3 100644
--- a/tmp/7b4a69db-f61d-4170-b264-d643f08b2d43_buggy.java
+++ b/tmp/5fd10e82-9ef1-4674-904d-90a96d066886_fixed.java
@@ -1,26 +1,25 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                 transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // Bleeding functions already get a BAD_PARAMETERS error, so just do nothing.
+                // Parameters of the scope function also get a BAD_PARAMETERS error.
+            } else if (n.hasChildren() || (n.getFirstChild() != null && !n.getFirstChild().isQualifiedName())) {
+                // Directly report local variables that are not valid aliases.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
+        } else {
+            // Unknown or unsupported parent node type; no action needed for now.
         }
     }
 }
\ No newline at end of file
