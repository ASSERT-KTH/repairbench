diff --git a/tmp/cccff854-a037-4ca8-bf80-5e529cdbffe7_buggy.java b/tmp/656999b3-6ca3-467d-bcc5-6ae44bf5670a_fixed.java
index 602226b..7a38b1e 100644
--- a/tmp/cccff854-a037-4ca8-bf80-5e529cdbffe7_buggy.java
+++ b/tmp/656999b3-6ca3-467d-bcc5-6ae44bf5670a_fixed.java
@@ -1,26 +1,31 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (parent.isVar() && n.hasChildren()) {
+          Node firstChild = n.getFirstChild();
+          if (firstChild.isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
 
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
           } else {
-          // TODO(robbyw): Support using locals for private variables.
+            // Not a qualified name means it's not a valid alias.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
+        } else {
+          // If the node is not part of a `var` statement or has no children,
+          // it isn't valid for aliasing.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
     }
\ No newline at end of file
