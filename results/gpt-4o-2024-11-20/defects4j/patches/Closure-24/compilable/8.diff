diff --git a/tmp/3b9b06fa-3875-4c0a-87f4-6856edbdb8a6_buggy.java b/tmp/32ac74a3-b03a-4693-a69d-01d09755651b_fixed.java
index 602226b..32e09cc 100644
--- a/tmp/3b9b06fa-3875-4c0a-87f4-6856edbdb8a6_buggy.java
+++ b/tmp/32ac74a3-b03a-4693-a69d-01d09755651b_fixed.java
@@ -1,26 +1,26 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                Node initialValue = aliasVar.getInitialValue();
+                if (initialValue != null && initialValue.isQualifiedName()) {
+                    String qualifiedName = initialValue.getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
                 } else {
-          // TODO(robbyw): Support using locals for private variables.
+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+                }
+            } else {
+                // Report cases where local variables are not aliases.
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
