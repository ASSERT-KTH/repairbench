diff --git a/tmp/aeadb7bc-1262-426c-9a1c-f749c5e68c47_buggy.java b/tmp/ca53cdeb-20f4-4eb6-ac56-44022c2c226b_fixed.java
index 602226b..eec588c 100644
--- a/tmp/aeadb7bc-1262-426c-9a1c-f749c5e68c47_buggy.java
+++ b/tmp/ca53cdeb-20f4-4eb6-ac56-44022c2c226b_fixed.java
@@ -1,26 +1,29 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
                 aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                String qualifiedName = aliasVar.getInitialValue() != null
+                        ? aliasVar.getInitialValue().getQualifiedName()
+                        : null;
+                if (qualifiedName != null) {
                     transformation.addAlias(name, qualifiedName);
+                }
                 // Bleeding functions already get a BAD_PARAMETERS error, so just
                 // do nothing.
                 // Parameters of the scope function also get a BAD_PARAMETERS
                 // error.
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // Report error if the var node is not a valid alias initialization
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
