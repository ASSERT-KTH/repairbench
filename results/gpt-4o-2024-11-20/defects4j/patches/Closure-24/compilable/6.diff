diff --git a/tmp/0ba8a6d0-686a-4642-af19-d4ac34abbf8b_buggy.java b/tmp/3772fae7-c2bb-4ceb-8c05-cc74fce34c52_fixed.java
index 602226b..ee71382 100644
--- a/tmp/0ba8a6d0-686a-4642-af19-d4ac34abbf8b_buggy.java
+++ b/tmp/3772fae7-c2bb-4ceb-8c05-cc74fce34c52_fixed.java
@@ -1,26 +1,30 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
+                if (aliasVar != null && aliasVar.isGlobal()) {
                     aliases.put(name, aliasVar);
 
                     String qualifiedName =
                             aliasVar.getInitialValue().getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
                 } else {
-          // TODO(robbyw): Support using locals for private variables.
+                    // Report variables that are not qualified names as non-alias locals.
                     report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                 }
+            } else {
+                // Variables without valid children are non-alias locals.
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            }
+        } else {
+            // Non-variable parent nodes are non-alias locals.
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
