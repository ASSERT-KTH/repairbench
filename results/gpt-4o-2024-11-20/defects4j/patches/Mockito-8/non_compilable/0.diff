diff --git a/tmp/d376164c-29d5-4be5-9ee3-96a56854611c_buggy.java b/tmp/1089f75a-0866-411a-908d-5ff7ef1f7ef4_fixed.java
index 42b58d0..f3cbd44 100644
--- a/tmp/d376164c-29d5-4be5-9ee3-96a56854611c_buggy.java
+++ b/tmp/1089f75a-0866-411a-908d-5ff7ef1f7ef4_fixed.java
@@ -1,19 +1,26 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    Map<TypeVariable, Type> processedVariables = new HashMap<>(); // Prevent infinite recursion.
+    
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        if (processedVariables.containsKey(typeParameter)) {
+            continue; // Skip previously processed variables to avoid circular references.
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+        
+        processedVariables.put(typeParameter, actualTypeArgument); // Mark as processed.
     }
 }
\ No newline at end of file
