diff --git a/tmp/066e395a-eb3f-466d-a4fd-af1504a66055_buggy.java b/tmp/46a96b69-4f6f-44b1-b3a2-021c43e71013_fixed.java
index 42b58d0..a2a2704 100644
--- a/tmp/066e395a-eb3f-466d-a4fd-af1504a66055_buggy.java
+++ b/tmp/46a96b69-4f6f-44b1-b3a2-021c43e71013_fixed.java
@@ -1,19 +1,26 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+    // Prevent potential infinite recursion by keeping track of already visited types
+    Set<Type> visitedTypes = new HashSet<>();
+    if (!visitedTypes.add(classType)) {
+        return; // Stop processing if we've already visited this type
+    }
+
     for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+        TypeVariable<?> typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
         // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
