diff --git a/tmp/a3746bda-d9f8-4723-b6c8-aa642ebdf3e0_buggy.java b/tmp/7e444c8c-a76f-4914-8380-30084080e33e_fixed.java
index 42b58d0..59df316 100644
--- a/tmp/a3746bda-d9f8-4723-b6c8-aa642ebdf3e0_buggy.java
+++ b/tmp/7e444c8c-a76f-4914-8380-30084080e33e_fixed.java
@@ -1,19 +1,21 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
 
-            if (actualTypeArgument instanceof WildcardType) {
+            // Avoid infinite recursion by checking if the actualTypeArgument refers to the same type variable
+            if (actualTypeArgument instanceof TypeVariable && actualTypeArgument.equals(typeParameter)) {
+                contextualActualTypeParameters.put(typeParameter, typeParameter);
+            } else if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
