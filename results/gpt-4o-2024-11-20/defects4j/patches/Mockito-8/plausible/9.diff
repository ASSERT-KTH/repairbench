diff --git a/tmp/45a8640a-0d6c-4f56-ac98-b2f44ac54281_buggy.java b/tmp/502ff137-8370-47cb-be85-0e186f9675fd_fixed.java
index 42b58d0..ae71b0e 100644
--- a/tmp/45a8640a-0d6c-4f56-ac98-b2f44ac54281_buggy.java
+++ b/tmp/502ff137-8370-47cb-be85-0e186f9675fd_fixed.java
@@ -1,19 +1,26 @@
     protected void registerTypeVariablesOn(Type classType) {
         if (!(classType instanceof ParameterizedType)) {
             return;
         }
         ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
         Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+        
+        // Prevent StackOverflowError by checking for recursive type variables
         for (int i = 0; i < actualTypeArguments.length; i++) {
-            TypeVariable typeParameter = typeParameters[i];
+            TypeVariable<?> typeParameter = typeParameters[i];
             Type actualTypeArgument = actualTypeArguments[i];
             
+            // Ensure we do not create self-referential mappings
+            if (typeParameter.equals(actualTypeArgument)) {
+                continue;
+            }
+
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
             } else {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
         }
     }
\ No newline at end of file
