diff --git a/tmp/78965671-6e0e-47ae-b4da-0f6df44e1bea_buggy.java b/tmp/791065b1-a8ab-4751-bdd0-dca085fa615c_fixed.java
index 49a5702..b8ebb61 100644
--- a/tmp/78965671-6e0e-47ae-b4da-0f6df44e1bea_buggy.java
+++ b/tmp/791065b1-a8ab-4751-bdd0-dca085fa615c_fixed.java
@@ -1,66 +1,64 @@
   @Override
   public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
-    // I've been unable to think of any cases where this indicates a bug,
-    // and apparently some people like keeping these semicolons around,
-    // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    // Allow such cases, as these semicolons may be intentional.
+    if (n.isEmpty() || n.isComma()) {
       return;
     }
 
     if (parent == null) {
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
+    // Exclude cases where the expression is already handled.
     if (n.isExprResult()) {
       return;
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
+    // Ignore qualified names with attached JSDoc information.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
     }
 
+    // Check if the result of the expression is used.
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
     if (parent.getType() == Token.COMMA) {
       if (isResultUsed) {
         return;
       }
       if (n == parent.getLastChild()) {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
           if (ancestorType == Token.COMMA) continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
           else break;
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+      if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
         return;
       }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    
+    // Ensure unnecessary code is identified and reported.
+    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
+      // Preserve side-effect-free operations as warnings with JSCOMPILER_PRESERVE.
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
+        NodeUtil.markNewVarAsPreserved(n, t.getCompiler());
       }
     }
   }
\ No newline at end of file
