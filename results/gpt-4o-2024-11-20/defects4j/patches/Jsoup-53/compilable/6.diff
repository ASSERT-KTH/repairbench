diff --git a/tmp/0745d0da-d6cb-47de-adf8-75a235f8a7cd_buggy.java b/tmp/b776aa0c-54dd-49ff-aad1-60d337854f34_fixed.java
index fecb896..3516e08 100644
--- a/tmp/0745d0da-d6cb-47de-adf8-75a235f8a7cd_buggy.java
+++ b/tmp/b776aa0c-54dd-49ff-aad1-60d337854f34_fixed.java
@@ -1,34 +1,36 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
+        boolean inQuote = false; // flag to track if we're inside quotes
+        char lastQuote = 0; // tracks the last seen quote character
         char last = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (last != ESC) { // Check escapes
+                if (!inQuote) { // If not inside a quote
                     if (c.equals(open)) {
                         depth++;
                         if (start == -1)
                             start = pos;
-                }
-                else if (c.equals(close))
+                    } else if (c.equals(close)) {
                         depth--;
+                    } else if (c == '\'' || c == '"') { // Detect quotes
+                        inQuote = true;
+                        lastQuote = c;
+                    }
+                } else if (c == lastQuote) { // If inside a quote and the same quote char is seen, close the quote
+                    inQuote = false;
+                }
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth > 0)
+                end = pos; // Update end to include the matched content
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        } while (depth > 0 || inQuote); // Continue while depth > 0 or inside quotes
+
+        return (end >= 0) ? queue.substring(start, end + 1) : ""; // Include the final character of the balanced portion
     }
\ No newline at end of file
