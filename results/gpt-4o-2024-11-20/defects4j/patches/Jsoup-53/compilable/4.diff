diff --git a/tmp/bf63673b-67f9-436a-be8d-00cf10a580db_buggy.java b/tmp/e8b9771e-c2b8-4d42-87bb-a59ec088c38e_fixed.java
index fecb896..4c8a5a7 100644
--- a/tmp/bf63673b-67f9-436a-be8d-00cf10a580db_buggy.java
+++ b/tmp/e8b9771e-c2b8-4d42-87bb-a59ec088c38e_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuotes = false;
+        boolean inDoubleQuotes = false;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (last == ESC) { // Handle escaping
+                last = 0; // Escaped character is skipped for further parsing logic
+                continue;
+            }
+
+            if (c == '\'' && !inDoubleQuotes) {
+                inSingleQuotes = !inSingleQuotes;
+            } else if (c == '"' && !inSingleQuotes) {
+                inDoubleQuotes = !inDoubleQuotes;
+            } else if (!inSingleQuotes && !inDoubleQuotes) { // Only adjust depth if not inside quotes
                 if (c.equals(open)) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                    if (start == -1) start = pos;
+                } else if (c.equals(close)) {
                     depth--;
                 }
+            }
+
+            if (depth > 0)
+                end = pos; // Include characters within the match
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
+        } while (depth > 0 || inSingleQuotes || inDoubleQuotes); // Continue if inside quotes or unbalanced
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
