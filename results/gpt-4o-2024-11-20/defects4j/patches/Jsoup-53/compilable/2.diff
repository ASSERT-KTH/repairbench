diff --git a/tmp/40e6ad94-da29-4733-a738-2a9bf0d2c012_buggy.java b/tmp/b7116011-dd6e-4538-b347-9ab24f266690_fixed.java
index fecb896..9c9b300 100644
--- a/tmp/40e6ad94-da29-4733-a738-2a9bf0d2c012_buggy.java
+++ b/tmp/b7116011-dd6e-4538-b347-9ab24f266690_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuotes = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+            
+            if (inQuotes) {
+                // Check if we are closing the current quote
+                if (c == quoteChar) {
+                    inQuotes = false;
+                }
+            } else if (c == '\'' || c == '\"') {
+                // Check if the character is starting a quoted section
+                inQuotes = true;
+                quoteChar = c;
+            } else if (last != ESC) { // Process only if not escaped
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if (c.equals(close)) {
                     depth--;
                 }
+            }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            // Set the end position only when we are inside matching bounds
+            if (depth > 0)
+                end = pos;
             last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        } while (depth > 0 || inQuotes);
+        return (end >= 0) ? queue.substring(start, end + 1) : "";
     }
\ No newline at end of file
