diff --git a/tmp/e886f9ff-7776-439c-bacc-0a503d2e63c7_buggy.java b/tmp/8c975a8d-79df-411b-ab28-a0c549fe11e5_fixed.java
index fecb896..dc411c9 100644
--- a/tmp/e886f9ff-7776-439c-bacc-0a503d2e63c7_buggy.java
+++ b/tmp/8c975a8d-79df-411b-ab28-a0c549fe11e5_fixed.java
@@ -1,34 +1,28 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+            if (last != ESC) { // Only check for special cases if not escaped
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                        start = pos - 1; // Adjust start to include the opening delimiter
+                } else if (c.equals(close) && depth > 0) {
                     depth--;
+                    if (depth == 0) {
+                        end = pos; // Include the closing delimiter
+                        break; // Exit once the balanced section is found
                     }
+                }
+            }
+
+            last = c; // Update the last character
+        } while (depth > 0 || !isEmpty()); // Ensure to process all characters if depth > 0
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        return (start != -1 && end != -1) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
