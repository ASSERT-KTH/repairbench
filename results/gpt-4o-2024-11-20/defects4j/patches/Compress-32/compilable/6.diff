diff --git a/tmp/f163fc04-dcf0-4bb6-9019-ca36e4bd7ab1_buggy.java b/tmp/c957fe1d-c0d7-44b3-9062-30f4b6c0b7da_fixed.java
index 711e87d..09fb972 100644
--- a/tmp/f163fc04-dcf0-4bb6-9019-ca36e4bd7ab1_buggy.java
+++ b/tmp/c957fe1d-c0d7-44b3-9062-30f4b6c0b7da_fixed.java
@@ -1,38 +1,50 @@
 private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
     /*
      * The following headers are defined for Pax.
      * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
      * mtime
      * comment
      * gid, gname
      * linkpath
      * size
      * uid, uname
      * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
      */
     for (Entry<String, String> ent : headers.entrySet()) {
         String key = ent.getKey();
         String val = ent.getValue();
+        try {
             if ("path".equals(key)) {
                 currEntry.setName(val);
             } else if ("linkpath".equals(key)) {
                 currEntry.setLinkName(val);
             } else if ("gid".equals(key)) {
-                currEntry.setGroupId(Integer.parseInt(val));
+                currEntry.setGroupId(parseLongOrFallbackToInt(val));
             } else if ("gname".equals(key)) {
                 currEntry.setGroupName(val);
             } else if ("uid".equals(key)) {
-                currEntry.setUserId(Integer.parseInt(val));
+                currEntry.setUserId(parseLongOrFallbackToInt(val));
             } else if ("uname".equals(key)) {
                 currEntry.setUserName(val);
             } else if ("size".equals(key)) {
                 currEntry.setSize(Long.parseLong(val));
             } else if ("mtime".equals(key)) {
                 currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
             } else if ("SCHILY.devminor".equals(key)) {
                 currEntry.setDevMinor(Integer.parseInt(val));
             } else if ("SCHILY.devmajor".equals(key)) {
                 currEntry.setDevMajor(Integer.parseInt(val));
             }
+        } catch (NumberFormatException e) {
+            throw new IllegalArgumentException("Invalid number format for key: " + key + ", value: " + val, e);
+        }
+    }
+}
+
+private long parseLongOrFallbackToInt(String value) {
+    try {
+        return Long.parseLong(value);
+    } catch (NumberFormatException e) {
+        return Integer.parseInt(value);
     }
 }
\ No newline at end of file
