diff --git a/tmp/d4c1436f-68e7-4c33-b0bf-e358c195a91f_buggy.java b/tmp/db15a695-4146-4204-8800-24620d14c166_fixed.java
index 2608424..5c5b54e 100644
--- a/tmp/d4c1436f-68e7-4c33-b0bf-e358c195a91f_buggy.java
+++ b/tmp/db15a695-4146-4204-8800-24620d14c166_fixed.java
@@ -1,39 +1,24 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+        if (index < 0 || index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        int remaining = index;
+        for (int i = 0; i < dimension; i++) {
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            indices[i] = remaining / offset; // Compute the dimension index.
+            remaining %= offset; // Get the remainder for the next dimension.
         }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
         return indices;
     }
\ No newline at end of file
