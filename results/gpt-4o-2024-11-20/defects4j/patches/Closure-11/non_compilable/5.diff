diff --git a/tmp/ab97edb3-9fb3-4612-9201-85bd54d45756_buggy.java b/tmp/e98dc642-070f-4847-a78e-0a6ef09c8ae5_fixed.java
index 57c40b2..6ad0c48 100644
--- a/tmp/ab97edb3-9fb3-4612-9201-85bd54d45756_buggy.java
+++ b/tmp/e98dc642-070f-4847-a78e-0a6ef09c8ae5_fixed.java
@@ -1,27 +1,31 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
+    if (childType == null || childType.isNullType()) { 
+      // If childType is null or explicitly null, report an error.
+      report(t, property, TypeValidator.INEXISTENT_PROPERTY,
+          property.getString(), "null");
+    } else if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
       return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
