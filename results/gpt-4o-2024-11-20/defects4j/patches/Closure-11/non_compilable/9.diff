diff --git a/tmp/7d54cff0-c77e-44e1-982f-739c49e3973e_buggy.java b/tmp/dd14b01f-d5fe-4e7b-9a9a-3c5667e7882b_fixed.java
index 57c40b2..91fcff2 100644
--- a/tmp/7d54cff0-c77e-44e1-982f-739c49e3973e_buggy.java
+++ b/tmp/dd14b01f-d5fe-4e7b-9a9a-3c5667e7882b_fixed.java
@@ -1,27 +1,36 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
-    if (childType.isDict()) {
+    if (childType == null || childType.isUnknownType()) {
+      // Warn if the child type is null or unknown, as this could indicate an invalid property access.
+      report(t, n, TypeValidator.UNKNOWN_PROPERTY_TYPE, "Unknown property type");
+    } else if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
     } else if (n.getJSType() != null && parent.isAssign()) {
+      // If JSTYPE is already set, we're done with this node. If the parent is an assignment,
+      // we don't generate further warnings on the assignment target.
       return;
+    } else if (childType.isNullType() || childType.isVoidType()) {
+      // Explicitly check for null or undefined to generate a warning.
+      report(t, n, TypeValidator.NULL_OR_UNDEFINED_PROPERTY_ACCESS, 
+             "No properties on this expression", childType.toString());
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
