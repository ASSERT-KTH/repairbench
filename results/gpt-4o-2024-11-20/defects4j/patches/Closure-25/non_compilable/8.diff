diff --git a/tmp/cca5baf5-df63-44e2-98fe-3e6d68c2e4c6_buggy.java b/tmp/0058a3bd-dcec-4271-9a9c-21dbf8dfc982_fixed.java
index b98f0a7..3ec8a7a 100644
--- a/tmp/cca5baf5-df63-44e2-98fe-3e6d68c2e4c6_buggy.java
+++ b/tmp/0058a3bd-dcec-4271-9a9c-21dbf8dfc982_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backwards inference for the parameters if ct has a known type.
+          FunctionType functionType = ct;
+          Node params = functionType.getParametersNode();
+          Node args = constructor.getNext();
+          while (params != null && args != null) {
+            scope = updateScopeForTypedParameter(scope, args, params.getJSType());
+            params = params.getNext();
+            args = args.getNext();
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
