diff --git a/tmp/5af26c1d-2bc7-4364-8a2b-01b4ff9bb011_buggy.java b/tmp/9a1c272d-52fa-4b8b-b077-0c2b0c1660ba_fixed.java
index b98f0a7..26e5ea2 100644
--- a/tmp/5af26c1d-2bc7-4364-8a2b-01b4ff9bb011_buggy.java
+++ b/tmp/9a1c272d-52fa-4b8b-b077-0c2b0c1660ba_fixed.java
@@ -1,29 +1,40 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Propagate type information to the arguments of the constructor.
+          if (n.hasMoreThanOneChild()) {
+            Node arg = constructor.getNext();
+            if (ct.getParameters() != null && !ct.getParameters().isEmpty()) {
+              JSType expectedType = ct.getParameters().get(0).getJSType();
+              if (expectedType != null) {
+                scope = reverseInterpreter.getPreciserScopeKnowingType(
+                    scope, arg, expectedType);
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
