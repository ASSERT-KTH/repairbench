diff --git a/tmp/f037d968-9d2b-4695-ad36-040b5e758bfd_buggy.java b/tmp/0a978b3a-f537-475c-9a19-23153e69da03_fixed.java
index b98f0a7..44a5034 100644
--- a/tmp/f037d968-9d2b-4695-ad36-040b5e758bfd_buggy.java
+++ b/tmp/0a978b3a-f537-475c-9a19-23153e69da03_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backward inference on the arguments
+          ObjectType ctType = ct.getInstanceType().toObjectType();
+          if (ctType != null && ctType.isRecordType()) {
+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+              JSType argType = arg.getJSType();
+              if (argType != null && argType.isObjectType()) {
+                updateTypeFromExpectations(arg.getJSType().toObjectType(), ctType);
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
+
+  private void updateTypeFromExpectations(ObjectType provided, ObjectType expected) {
+    for (String property : expected.getOwnPropertyNames()) {
+      if (provided.hasProperty(property)) {
+        JSType expectedPropType = expected.getPropertyType(property);
+        JSType providedPropType = provided.getPropertyType(property);
+        JSType refinedType = providedPropType.getGreatestSubtype(expectedPropType);
+        provided.defineDeclaredProperty(property, refinedType, null);
+      }
+    }
+  }
\ No newline at end of file
