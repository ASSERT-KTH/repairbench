diff --git a/tmp/86e97677-0abe-43fd-a173-646878cd8544_buggy.java b/tmp/d78b011b-1639-4557-8541-4bb86b86f184_fixed.java
index b98f0a7..9736697 100644
--- a/tmp/86e97677-0abe-43fd-a173-646878cd8544_buggy.java
+++ b/tmp/d78b011b-1639-4557-8541-4bb86b86f184_fixed.java
@@ -1,29 +1,57 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                
+                // Propagate inferred properties from constructor parameters
+                ObjectType objType = type.toObjectType();
+                if (objType != null && ct.getTypeOfThis() instanceof ObjectType) {
+                    ObjectType thisType = (ObjectType) ct.getTypeOfThis();
+                    if (thisType.hasReferenceName() && !thisType.isUnknownType()) {
+                        scope = backwardInferenceForObject(n, scope, thisType);
                     }
                 }
             }
+        }
+    }
+    
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
+
+private FlowScope backwardInferenceForObject(Node n, FlowScope scope, ObjectType objectType) {
+    Node objLit = n.getLastChild(); // Expecting that the last child represents the object literal being passed.
+    if (objLit != null && objLit.isObjectLit()) {
+        JSType objType = objLit.getJSType();
+        if (objType != null && objType.toObjectType() != null) {
+            for (String prop : objectType.getOwnPropertyNames()) {
+                JSType propType = objectType.getPropertyType(prop);
+                JSType inferredType = objType.toObjectType().getPropertyType(prop);
+                if (inferredType != null && inferredType.isSubtypeOf(propType)) {
+                    objLit.getProp(prop).setJSType(propType);
+                }
+            }
+        }
+    }
+    return scope;
+}
\ No newline at end of file
