diff --git a/tmp/9ec8d9ba-773d-4e90-89ad-8142562ef331_buggy.java b/tmp/720c7c5a-0885-4e64-b46e-6ac01c18ab17_fixed.java
index b98f0a7..2fffdeb 100644
--- a/tmp/9ec8d9ba-773d-4e90-89ad-8142562ef331_buggy.java
+++ b/tmp/720c7c5a-0885-4e64-b46e-6ac01c18ab17_fixed.java
@@ -1,29 +1,52 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Backwards type inference for constructor parameters.
+          FunctionType constructorFunction = ct;
+          if (constructorFunction.getParametersNode() != null) {
+            inferPropertyTypesToMatchParameters(n, constructorFunction.getParametersNode(), scope);
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
+
+  private void inferPropertyTypesToMatchParameters(Node callNode, Node parametersNode, FlowScope scope) {
+    Node currentArgument = callNode.getSecondChild(); // First child is the constructor.
+    Node currentParameter = parametersNode.getFirstChild();
+
+    while (currentArgument != null && currentParameter != null) {
+      JSType argumentType = currentArgument.getJSType();
+      JSType parameterType = currentParameter.getJSType();
+
+      if (parameterType != null && parameterType.isRecordType() && argumentType != null && argumentType.isObject()) {
+        scope.inferRecordTypeProperties(argumentType.toObjectType(), parameterType.toObjectType());
+      }
+
+      currentArgument = currentArgument.getNext();
+      currentParameter = currentParameter.getNext();
+    }
+  }
\ No newline at end of file
