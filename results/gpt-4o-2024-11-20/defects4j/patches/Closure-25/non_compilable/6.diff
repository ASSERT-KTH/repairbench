diff --git a/tmp/95c2912a-52ce-4a51-a1d3-8753cc01efb5_buggy.java b/tmp/cb2d1e1c-c08c-4b43-9720-a309648e590b_fixed.java
index b98f0a7..02f601d 100644
--- a/tmp/95c2912a-52ce-4a51-a1d3-8753cc01efb5_buggy.java
+++ b/tmp/cb2d1e1c-c08c-4b43-9720-a309648e590b_fixed.java
@@ -1,29 +1,36 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Perform backward inference on the constructor arguments
+          // if the type is a constructor object type.
+          ObjectType instanceType = type.toObjectType();
+          if (instanceType != null) {
+            FunctionType constructorFn = instanceType.getConstructor();
+            if (constructorFn != null) {
+              inferPropertyTypesFromCall(n, constructorFn);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
