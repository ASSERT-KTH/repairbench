diff --git a/tmp/5864f991-7e7d-4a53-a5c3-01a199ed799e_buggy.java b/tmp/f1db43cf-42e4-4542-9e7b-be83eca4d188_fixed.java
index b98f0a7..3a6d136 100644
--- a/tmp/5864f991-7e7d-4a53-a5c3-01a199ed799e_buggy.java
+++ b/tmp/f1db43cf-42e4-4542-9e7b-be83eca4d188_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backwards inference for object types.
+          if (type != null && type.isObjectType() && n.hasChildren() && n.getSecondChild() != null) {
+            ObjectType objType = type.toObjectType();
+            FunctionParamBuilder paramBuilder = new FunctionParamBuilder(typeRegistry);
+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+              paramBuilder.addRequiredNode(arg.getJSType());
+            }
+            objType.matchConstraint(paramBuilder.build());
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
