diff --git a/tmp/36cb81fa-b4d9-4ad5-8446-3f5ac7ed1fad_buggy.java b/tmp/3578d531-49de-425e-9fa6-25385c5a739a_fixed.java
index b98f0a7..ebd5055 100644
--- a/tmp/36cb81fa-b4d9-4ad5-8446-3f5ac7ed1fad_buggy.java
+++ b/tmp/3578d531-49de-425e-9fa6-25385c5a739a_fixed.java
@@ -1,29 +1,47 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backward inference for the constructor arguments
+          Node arg = constructor.getNext();
+          if (arg != null) {
+            FunctionType constructorFn = ct.getConstructor();
+            if (constructorFn != null) {
+              Node paramNode = constructorFn.getParametersNode();
+              while (arg != null && paramNode != null) {
+                JSType paramType = paramNode.getJSType();
+                JSType argType = arg.getJSType();
+                if (paramType != null && argType != null) {
+                  scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(
+                      scope, arg, paramType, true);
+                }
+                arg = arg.getNext();
+                paramNode = paramNode.getNext();
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
