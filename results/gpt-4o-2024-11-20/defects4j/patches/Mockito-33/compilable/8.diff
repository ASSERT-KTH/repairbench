diff --git a/tmp/07b5388f-f856-43c1-a93c-e60d067fee49_buggy.java b/tmp/484e0dd1-06a6-4cbb-83f0-53b14cc20efe_fixed.java
index e1fc51f..8d24418 100644
--- a/tmp/07b5388f-f856-43c1-a93c-e60d067fee49_buggy.java
+++ b/tmp/484e0dd1-06a6-4cbb-83f0-53b14cc20efe_fixed.java
@@ -1,9 +1,23 @@
     public boolean hasSameMethod(Invocation candidate) {
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+        // Check if the declaring classes and method names are the same
+        if (!m1.getDeclaringClass().equals(m2.getDeclaringClass()) || !m1.getName().equals(m2.getName())) {
+            return false;
+        }
+
+        // Check if the parameter types are the same, to account for polymorphic methods
+        Class<?>[] params1 = m1.getParameterTypes();
+        Class<?>[] params2 = m2.getParameterTypes();
+        if (params1.length != params2.length) {
+            return false;
+        }
+        for (int i = 0; i < params1.length; i++) {
+            if (!params1[i].equals(params2[i])) {
+                return false;
+            }
+        }
+
+        return true;
     }
\ No newline at end of file
