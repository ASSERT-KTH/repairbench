diff --git a/tmp/9964ba8f-0a63-477e-869a-87a7a7ab9a6d_buggy.java b/tmp/4cdeadbf-75c7-46ee-aaf2-1422da6932f3_fixed.java
index d5b1b52..0696c8f 100644
--- a/tmp/9964ba8f-0a63-477e-869a-87a7a7ab9a6d_buggy.java
+++ b/tmp/4cdeadbf-75c7-46ee-aaf2-1422da6932f3_fixed.java
@@ -1,36 +1,28 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
+        if (array1 == null && array2 == null) {
+            return null;
+        } else if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+
+        // Determine the common superclass or interface of both arrays' component types
+        Class<?> type1 = array1.getClass().getComponentType();
+        Class<?> type2 = array2.getClass().getComponentType();
+
+        // Check compatibility of the array types and find the most specific common type
+        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+            throw new IllegalArgumentException("Incompatible array types: " + type1 + " and " + type2);
+        }
+
+        Class<?> joinedType = type1.isAssignableFrom(type2) ? type2 : type1;
+
+        // Create the new array with the correct component type
+        T[] joinedArray = (T[]) Array.newInstance(joinedType, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+
         return joinedArray;
     }
\ No newline at end of file
