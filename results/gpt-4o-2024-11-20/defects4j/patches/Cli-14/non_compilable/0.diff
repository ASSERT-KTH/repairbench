diff --git a/tmp/a35919cf-c819-47fa-9c2e-0a5d6a63f770_buggy.java b/tmp/41d74b51-8253-4c0d-8fdd-1eb945e0b63f_fixed.java
index 71189c3..58e9bb1 100644
--- a/tmp/a35919cf-c819-47fa-9c2e-0a5d6a63f770_buggy.java
+++ b/tmp/41d74b51-8253-4c0d-8fdd-1eb945e0b63f_fixed.java
@@ -1,46 +1,55 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                // Validate the argument value only if the option is present
+                if (option.getArgument() != null) {
+                    Object value = commandLine.getValue(option);
+                    if (value instanceof String || option.getArgument().getValidator() == null) {
                         option.validate(commandLine);
+                    } else {
+                        // Apply the argument validator to non-string values
+                        option.getArgument().getValidator().validate(value);
+                    }
+                }
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
