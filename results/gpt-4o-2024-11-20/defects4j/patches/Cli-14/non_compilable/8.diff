diff --git a/tmp/af83266b-b2c2-45e0-8e1c-e05ca6e54584_buggy.java b/tmp/9701ef56-b262-4cb2-93e8-4a7072ad8d93_fixed.java
index 71189c3..95a3e22 100644
--- a/tmp/af83266b-b2c2-45e0-8e1c-e05ca6e54584_buggy.java
+++ b/tmp/9701ef56-b262-4cb2-93e8-4a7072ad8d93_fixed.java
@@ -1,46 +1,54 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
 
                     break;
                 }
 
+                if(option.getArgument() != null) {
+                    // Fix: Explicitly check and convert the argument value if it's a File
+                    Object value = commandLine.getValue(option);
+                    if (value instanceof File) {
+                        commandLine.addValue(option, ((File) value).toString());
+                    }
+                }
+
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
