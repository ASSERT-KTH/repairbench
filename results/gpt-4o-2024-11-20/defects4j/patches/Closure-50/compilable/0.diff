diff --git a/tmp/c78b505f-70fb-4ed8-9b09-3ca2d6dcd241_buggy.java b/tmp/eb2dd408-f908-45e6-b2a0-09d211f6728c_fixed.java
index d8b0158..eba55fb 100644
--- a/tmp/c78b505f-70fb-4ed8-9b09-3ca2d6dcd241_buggy.java
+++ b/tmp/eb2dd408-f908-45e6-b2a0-09d211f6728c_fixed.java
@@ -1,113 +1,124 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    if (right != null && !NodeUtil.isImmutableValue(right)) {
       return n;
     }
-    }
 
     Node arrayNode = callTarget.getFirstChild();
-    Node functionName = arrayNode.getNext();
+    Node functionName = callTarget.getLastChild();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
-      // "," is the default, it doesn't need to be explicit
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
+    if (joinString == null) {
+      return n; // Fail fast for invalid join string.
+    }
+
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+    boolean canFold = true;
+
+    // Merges adjacent String/number/boolean nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length() + 2; // +2 for quotes.
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
+      if (!NodeUtil.isImmutableValue(elem) && elem.getType() != Token.EMPTY) {
+        canFold = false;
+      }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldedSize += sb.length() + 2; // +2 for quotes.
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+    foldedSize += arrayFoldedChildren.size() - 1; // One for each comma.
     int originalSize = InlineCostEstimator.getCost(n);
+
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return n;
+        if (arrayFoldedChildren.size() == arrayNode.getChildCount() && canFold) {
+          StringBuilder foldedJoinResult = new StringBuilder();
+          for (Node child : arrayFoldedChildren) {
+            if (foldedJoinResult.length() > 0) {
+              foldedJoinResult.append(joinString);
+            }
+            foldedJoinResult.append(NodeUtil.getArrayElementStringValue(child));
+          }
+          if (foldedJoinResult.length() + 2 <= originalSize) { // +2 for quotes.
+            Node foldedNode = Node.newString(foldedJoinResult.toString());
+            n.getParent().replaceChild(n, foldedNode);
+            reportCodeChange();
+            return foldedNode;
+          }
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+        for (Node child : arrayFoldedChildren) {
+          arrayNode.addChildToBack(child);
         }
         reportCodeChange();
         break;
     }
-
     return n;
   }
\ No newline at end of file
