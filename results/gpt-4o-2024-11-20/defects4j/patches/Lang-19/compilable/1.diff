diff --git a/tmp/344ee845-f564-410e-b54e-078edc5640fe_buggy.java b/tmp/e0f4a860-564c-4f7f-a10e-9c2074ab8379_fixed.java
index 72a422c..58494e6 100644
--- a/tmp/344ee845-f564-410e-b54e-078edc5640fe_buggy.java
+++ b/tmp/e0f4a860-564c-4f7f-a10e-9c2074ab8379_fixed.java
@@ -1,51 +1,71 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if it's hexadecimal
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
 
-                // Check there's more than just an x after the &#
+                    // Ensure there's at least one valid character after "&#x" or "&#X"
+                    if (start >= seqEnd || !Character.isDigit(input.charAt(start)) && 
+                        !(isHex && isHexChar(input.charAt(start)))) {
+                        return 0; // Invalid entity, exit early
+                    }
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            
+            // Look for the ending semicolon or the end of the sequence
+            while (end < seqEnd && input.charAt(end) != ';') {
+                if (!Character.isDigit(input.charAt(end)) && 
+                    !(isHex && isHexChar(input.charAt(end)))) {
+                    return 0; // Invalid character found in entity
+                }
                 end++;
             }
 
+            // If we finished the loop without finding a semicolon, handle carefully
+            if (end >= seqEnd || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
+                // Parse the numeric value based on whether it's hex or decimal
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
+
+    private boolean isHexChar(char c) {
+        return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
+    }
\ No newline at end of file
