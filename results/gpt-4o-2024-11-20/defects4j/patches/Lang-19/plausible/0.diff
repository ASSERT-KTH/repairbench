diff --git a/tmp/648de702-9f77-47c5-aec7-e305d4e29ac8_buggy.java b/tmp/cfb77fcf-f12b-42ba-82b6-496d73c00855_fixed.java
index 72a422c..fb17ab0 100644
--- a/tmp/648de702-9f77-47c5-aec7-e305d4e29ac8_buggy.java
+++ b/tmp/cfb77fcf-f12b-42ba-82b6-496d73c00855_fixed.java
@@ -1,51 +1,67 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check for hex indicator 'x' or 'X'
+            if (start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
+                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            // Find the end of the numeric entity, either until a ';' or invalid character
+            while (end < seqEnd && input.charAt(end) != ';') {
+                char currentChar = input.charAt(end);
+                if (!Character.isDigit(currentChar) && !(isHex && ((currentChar >= 'a' && currentChar <= 'f') || (currentChar >= 'A' && currentChar <= 'F')))) {
+                    // Break on invalid character for the current base
+                    break;
+                }
                 end++;
             }
 
+            // If we reached the end without a ';', consider it as unfinished and safely return 0
+            if (end == start) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
+                // Handle invalid numeric values gracefully
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
 
+            try {
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
+            } catch (IllegalArgumentException iae) {
+                // Handle invalid code point errors
+                System.err.println("Invalid codepoint: " + entityValue);
+                return 0;
+            }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (end - start) + (isHex ? 1 : 0) + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0);
         }
         return 0;
     }
\ No newline at end of file
