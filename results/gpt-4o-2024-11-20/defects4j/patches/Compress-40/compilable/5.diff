diff --git a/tmp/3b8a35a6-2a48-4763-83cb-291f7f8e7384_buggy.java b/tmp/4969f943-680a-4a56-9ed6-7310aad9947d_fixed.java
index 7116384..dec500f 100644
--- a/tmp/3b8a35a6-2a48-4763-83cb-291f7f8e7384_buggy.java
+++ b/tmp/4969f943-680a-4a56-9ed6-7310aad9947d_fixed.java
@@ -1,39 +1,31 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
     public long readBits(final int count) throws IOException {
-        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
-            throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
+        if (count <= 0 || count > MAXIMUM_CACHE_SIZE) {
+            throw new IllegalArgumentException("count must be positive and not greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                if (bitsCachedSize == 0) {
+                    return -1;
+                }
+                // Not enough bits remain, so return whatever is present.
+                break;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsCached |= (nextByte << bitsCachedSize);
+                bitsCached |= (nextByte & 0xFFL) << bitsCachedSize;
             } else {
-                bitsCached <<= 8;
-                bitsCached |= nextByte;
+                bitsCached = (bitsCached << 8) | (nextByte & 0xFFL);
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
-                bitsOut = (bitsCached & MASKS[count]);
+            bitsOut = bitsCached & MASKS[count];
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
