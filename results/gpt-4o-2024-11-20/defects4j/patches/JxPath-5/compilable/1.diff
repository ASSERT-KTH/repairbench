diff --git a/tmp/dbe56c7f-2d2c-41d4-afa8-ed292eadaea9_buggy.java b/tmp/19d2595c-ee92-4841-9e74-e8323309181c_fixed.java
index 5f8ac1a..dc03f4f 100644
--- a/tmp/dbe56c7f-2d2c-41d4-afa8-ed292eadaea9_buggy.java
+++ b/tmp/19d2595c-ee92-4841-9e74-e8323309181c_fixed.java
@@ -1,34 +1,50 @@
     private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
     {
+        // Handle null pointers and treat them as globally incomparable
+        if (p1 == null && p2 == null) {
+            return 0;
+        }
+
+        if (p1 == null) {
+            return -1;
+        }
+
+        if (p2 == null) {
+            return 1;
+        }
+
+        // Adjust depths to match levels if they are different
         if (depth1 < depth2) {
             int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
             return r == 0 ? -1 : r;
         }
         if (depth1 > depth2) {
             int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
             return r == 0 ? 1 : r;
         }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+        // Compare pointers directly if they are at the same depth
+        if (p1.equals(p2)) {
             return 0;
         }
 
-        if (depth1 == 1) {
+        // If pointers belong to different trees, do not compare them
+        if (p1.parent == null || p2.parent == null) {
             throw new JXPathException(
                 "Cannot compare pointers that do not belong to the same tree: '"
                         + p1 + "' and '" + p2 + "'");
         }
+
+        // Recursively compare parent pointers
         int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
         if (r != 0) {
             return r;
         }
 
+        // Compare specific child nodes if their parents are equal
         return p1.parent.compareChildNodePointers(p1, p2);
     }
\ No newline at end of file
