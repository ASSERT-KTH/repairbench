diff --git a/tmp/a1807316-5af1-436a-a6f4-3628fa8dbb63_buggy.java b/tmp/0ee27455-f001-40bd-9eb5-e4f6236aeb12_fixed.java
index 5f8ac1a..bd58da8 100644
--- a/tmp/a1807316-5af1-436a-a6f4-3628fa8dbb63_buggy.java
+++ b/tmp/0ee27455-f001-40bd-9eb5-e4f6236aeb12_fixed.java
@@ -1,34 +1,48 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Handle null cases for p1 and p2 for proper comparison
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+    
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
+    // Check if the node pointers are equal
+    if (p1.equals(p2)) {
         return 0;
     }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+    // Ensure we return a proper result for pointers from different trees
+    if (p1.parent == null || p2.parent == null) {
+        if (!p1.getNamespaceURI().equals(p2.getNamespaceURI())) {
+            return p1.getNamespaceURI().compareTo(p2.getNamespaceURI());
         }
+        return p1.toString().compareTo(p2.toString());
+    }
+
+    // Recursively compare parent node pointers
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // Finally, compare child node pointers at the current level
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
