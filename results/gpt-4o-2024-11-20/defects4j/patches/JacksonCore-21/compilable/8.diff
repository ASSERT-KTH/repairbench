diff --git a/tmp/e4dc6c48-bf99-41b0-86ca-d83a18edea4d_buggy.java b/tmp/16ab283c-593a-4825-8976-e5d9d81c143d_fixed.java
index 7c0ebae..b9550eb 100644
--- a/tmp/e4dc6c48-bf99-41b0-86ca-d83a18edea4d_buggy.java
+++ b/tmp/16ab283c-593a-4825-8976-e5d9d81c143d_fixed.java
@@ -1,229 +1,171 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
-        //    conditionals; and it seems odd to return `null` but NOT considering input
-        //    as closed... would love a rewrite to simplify/clear up logic here.
-        
-        // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
-        // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+public JsonToken nextToken() throws IOException {
+    // This condition handles situations where filters and paths are involved.
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
         if (_currToken.isStructEnd()) {
             if (_headContext.isStartHandled()) {
                 return (_currToken = null);
             }
         } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
             if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                 return (_currToken = null);
             }
         }
     }
-        // Anything buffered?
+
+    // Handle buffered tokens from filtered context
     TokenFilterContext ctxt = _exposedContext;
-
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
                 if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
+                    JsonToken currentToken = delegate.getCurrentToken();
+                    _currToken = currentToken;
+                    return currentToken;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
             _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
         }
     }
 
-        // If not, need to read more. If we got any:
+    // Fetch and process next token
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
-            _currToken = t;
-            return t;
+        _currToken = null;
+        return null;
     }
 
-        // otherwise... to include or not?
     TokenFilter f;
 
     switch (t.id()) {
         case ID_START_ARRAY:
-            f = _itemFilter;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            if (f == null) { // does this occur?
-                delegate.skipChildren();
-                break;
-            }
-            // Otherwise still iffy, need to check
-            f = _headContext.checkValue(f);
-            if (f == null) {
-                delegate.skipChildren();
-                break;
-            }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartArray();
-            }
-            _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            break;
-
         case ID_START_OBJECT:
             f = _itemFilter;
+            boolean isStartArray = (t.id() == ID_START_ARRAY);
             if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _headContext = isStartArray
+                        ? _headContext.createChildArrayContext(f, true)
+                        : _headContext.createChildObjectContext(f, true);
+                _currToken = t;
+                return t;
             }
-            if (f == null) { // does this occur?
+            if (f == null) {
                 delegate.skipChildren();
                 break;
             }
-            // Otherwise still iffy, need to check
             f = _headContext.checkValue(f);
             if (f == null) {
                 delegate.skipChildren();
                 break;
             }
-            if (f != TokenFilter.INCLUDE_ALL) {
-                f = f.filterStartObject();
-            }
+            f = isStartArray ? f.filterStartArray() : f.filterStartObject();
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
+                _headContext = isStartArray
+                        ? _headContext.createChildArrayContext(f, true)
+                        : _headContext.createChildObjectContext(f, true);
+                _currToken = t;
+                return t;
             }
-            _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
+            _headContext = isStartArray
+                    ? _headContext.createChildArrayContext(f, false)
+                    : _headContext.createChildObjectContext(f, false);
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
             break;
 
         case ID_END_ARRAY:
         case ID_END_OBJECT:
-            {
             boolean returnEnd = _headContext.isStartHandled();
             f = _headContext.getFilter();
             if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+                if (t.id() == ID_END_ARRAY) {
                     f.filterFinishArray();
+                } else { // ID_END_OBJECT
+                    f.filterFinishObject();
+                }
             }
             _headContext = _headContext.getParent();
             _itemFilter = _headContext.getFilter();
             if (returnEnd) {
-                    return (_currToken = t);
-                }
+                _currToken = t;
+                return t;
             }
             break;
 
         case ID_FIELD_NAME:
-            {
             final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
             f = _headContext.setFieldName(name);
             if (f == TokenFilter.INCLUDE_ALL) {
                 _itemFilter = f;
                 if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        t = _headContext.nextTokenToRead();
                         _exposedContext = _headContext;
                     }
                 }
-                    return (_currToken = t);
+                _currToken = t;
+                return t;
             }
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             f = f.includeProperty(name);
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
+                _currToken = t;
+                return t;
             }
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
-            }
 
-        default: // scalar value
+        default:
             f = _itemFilter;
             if (f == TokenFilter.INCLUDE_ALL) {
-                return (_currToken = t);
+                _currToken = t;
+                return t;
             }
             if (f != null) {
                 f = _headContext.checkValue(f);
                 if ((f == TokenFilter.INCLUDE_ALL)
                         || ((f != null) && f.includeValue(delegate))) {
-                    return (_currToken = t);
+                    _currToken = t;
+                    return t;
                 }
             }
-            // Otherwise not included (leaves must be explicitly included)
             break;
     }
 
-        // We get here if token was not yet found; offlined handling
+    // No token found in above checks; process further
     return _nextToken2();
 }
\ No newline at end of file
