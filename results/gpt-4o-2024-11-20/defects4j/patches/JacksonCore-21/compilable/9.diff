diff --git a/tmp/6446cdcd-56c4-46c0-853f-afe3d0110efa_buggy.java b/tmp/cff006a8-1b6b-49af-990d-ae3cb9e17054_fixed.java
index 7c0ebae..8f9b099 100644
--- a/tmp/6446cdcd-56c4-46c0-853f-afe3d0110efa_buggy.java
+++ b/tmp/cff006a8-1b6b-49af-990d-ae3cb9e17054_fixed.java
@@ -1,229 +1,138 @@
 @Override
-    public JsonToken nextToken() throws IOException
-    {
-        // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
-        //    conditionals; and it seems odd to return `null` but NOT considering input
-        //    as closed... would love a rewrite to simplify/clear up logic here.
-        
+public JsonToken nextToken() throws IOException {
     // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
     // check for no buffered context _exposedContext - null
-        // If all the conditions matches then check for scalar / non-scalar property
+    // If all the conditions match then check for scalar / non-scalar property
     if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
-            //if not scalar and ended successfully, and !includePath, then return null
         if (_currToken.isStructEnd()) {
             if (_headContext.isStartHandled()) {
                 return (_currToken = null);
             }
         } else if (_currToken.isScalarValue()) {
-                    //else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-                    // then return null 
             if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
                 return (_currToken = null);
             }
         }
     }
+
     // Anything buffered?
     TokenFilterContext ctxt = _exposedContext;
-
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
-                // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
-                    if (ctxt.inArray()) {
-                        t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
-                        _currToken = t;
-                        return t;
-                    }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
                 break;
             }
-                // If not, traverse down the context chain
             ctxt = _headContext.findChildOf(ctxt);
             _exposedContext = ctxt;
-                if (ctxt == null) { // should never occur
+            if (ctxt == null) {
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
         }
     }
 
-        // If not, need to read more. If we got any:
+    // Read more from the underlying delegate parser.
     JsonToken t = delegate.nextToken();
     if (t == null) {
-            // no strict need to close, since we have no state here
         _currToken = t;
         return t;
     }
 
-        // otherwise... to include or not?
     TokenFilter f;
-        
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
-                break;
+            return nextToken();
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-                break;
+            return nextToken();
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartArray();
         }
         _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildArrayContext(f, true);
-                return (_currToken = t);
-            }
-            _headContext = _headContext.createChildArrayContext(f, false);
-            
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            break;
+        _headContext = _headContext.createChildArrayContext(f, f == TokenFilter.INCLUDE_ALL);
+        return (_includePath && f != TokenFilter.INCLUDE_ALL) ? _nextTokenWithBuffering(_headContext) : (_currToken = t);
 
     case ID_START_OBJECT:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
-                break;
+            return nextToken();
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
-                break;
+            return nextToken();
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartObject();
         }
         _itemFilter = f;
-            if (f == TokenFilter.INCLUDE_ALL) {
-                _headContext = _headContext.createChildObjectContext(f, true);
-                return (_currToken = t);
-            }
-            _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
-            if (_includePath) {
-                t = _nextTokenWithBuffering(_headContext);
-                if (t != null) {
-                    _currToken = t;
-                    return t;
-                }
-            }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
-            break;
+        _headContext = _headContext.createChildObjectContext(f, f == TokenFilter.INCLUDE_ALL);
+        return (_includePath && f != TokenFilter.INCLUDE_ALL) ? _nextTokenWithBuffering(_headContext) : (_currToken = t);
 
     case ID_END_ARRAY:
     case ID_END_OBJECT:
-            {
         boolean returnEnd = _headContext.isStartHandled();
         f = _headContext.getFilter();
-                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
+        if (f != null && f != TokenFilter.INCLUDE_ALL) {
             f.filterFinishArray();
         }
         _headContext = _headContext.getParent();
         _itemFilter = _headContext.getFilter();
-                if (returnEnd) {
-                    return (_currToken = t);
-                }
-            }
-            break;
+        return returnEnd ? (_currToken = t) : nextToken();
 
     case ID_FIELD_NAME:
-            {
-                final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
+        String name = delegate.getCurrentName();
         f = _headContext.setFieldName(name);
         if (f == TokenFilter.INCLUDE_ALL) {
             _itemFilter = f;
-                    if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
-                        if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+            if (!_includePath && _includeImmediateParent && !_headContext.isStartHandled()) {
+                t = _headContext.nextTokenToRead();
                 _exposedContext = _headContext;
             }
-                    }
             return (_currToken = t);
         }
-                if (f == null) {
+        if (f == null || (f = f.includeProperty(name)) == null) {
             delegate.nextToken();
             delegate.skipChildren();
-                    break;
-                }
-                f = f.includeProperty(name);
-                if (f == null) {
-                    delegate.nextToken();
-                    delegate.skipChildren();
-                    break;
+            return nextToken();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
-                    if (_includePath) {
-                        return (_currToken = t);
-                    }
-                }
-                if (_includePath) {
-                    t = _nextTokenWithBuffering(_headContext);
-                    if (t != null) {
-                        _currToken = t;
-                        return t;
-                    }
-                }
-                break;
+            return (_includePath) ? _nextTokenWithBuffering(_headContext) : (_currToken = t);
         }
+        return (_includePath) ? _nextTokenWithBuffering(_headContext) : nextToken();
 
-        default: // scalar value
+    default: 
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             return (_currToken = t);
         }
         if (f != null) {
             f = _headContext.checkValue(f);
-                if ((f == TokenFilter.INCLUDE_ALL)
-                        || ((f != null) && f.includeValue(delegate))) {
+            if (f == TokenFilter.INCLUDE_ALL || (f != null && f.includeValue(delegate))) {
                 return (_currToken = t);
             }
         }
-            // Otherwise not included (leaves must be explicitly included)
-            break;
+        return nextToken();
     }
-
-        // We get here if token was not yet found; offlined handling
-        return _nextToken2();
 }
\ No newline at end of file
