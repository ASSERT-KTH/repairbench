diff --git a/tmp/a0f96179-dd08-4896-b671-70771faaadc6_buggy.java b/tmp/6b35bb91-b1bf-4c73-879e-27b07bec00a5_fixed.java
index d926eea..b7b7f09 100644
--- a/tmp/a0f96179-dd08-4896-b671-70771faaadc6_buggy.java
+++ b/tmp/6b35bb91-b1bf-4c73-879e-27b07bec00a5_fixed.java
@@ -1,48 +1,54 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+        // Handle formats where pattern, locale, or timezone is specified
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                     ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                    : StdDateFormat.DATE_FORMAT_STR_ISO8601; // Default pattern
             final Locale loc = format.hasLocale()
                     ? format.getLocale()
-                            : serializers.getLocale();
+                    : serializers.getLocale(); // Fallback to serializer's locale
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+        // Otherwise, attempt to use serializer context's default DateFormat
+        DateFormat defaultFormat = serializers.getConfig().getDateFormat();
+        if (defaultFormat != null) {
+            if (defaultFormat instanceof StdDateFormat) {
+                StdDateFormat std = (StdDateFormat) defaultFormat;
+                // Ensure timezone is respected
+                std = std.withTimeZone(serializers.getTimeZone())
+                         .withLocale(serializers.getLocale());
+                return withFormat(Boolean.FALSE, std);
+            } else if (defaultFormat instanceof SimpleDateFormat) {
+                SimpleDateFormat sdf = (SimpleDateFormat) defaultFormat;
+                SimpleDateFormat cloned = (SimpleDateFormat) sdf.clone();
+                cloned.setTimeZone(serializers.getTimeZone());
+                return withFormat(Boolean.FALSE, cloned);
+            }
+        }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
-        return this;
+        return this; // Fallback to default serializer if no customization is applicable
     }
\ No newline at end of file
