diff --git a/tmp/0cdcf7be-7f7e-4b71-8565-0bc4066aa083_buggy.java b/tmp/e9b57f54-6b0c-4438-b1ea-97c1c382065e_fixed.java
index d926eea..cb96955 100644
--- a/tmp/0cdcf7be-7f7e-4b71-8565-0bc4066aa083_buggy.java
+++ b/tmp/e9b57f54-6b0c-4438-b1ea-97c1c382065e_fixed.java
@@ -1,48 +1,64 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
-        // Simple case first: serialize as numeric timestamp?
+
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                 || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                     ? format.getPattern()
                     : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                    
             final Locale loc = format.hasLocale()
                     ? format.getLocale()
                     : serializers.getLocale();
+                    
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
-        // Otherwise, need one of these changes:
+        // Fallback to contextualization: respect configured DateFormat
+        DateFormat defaultFormat = serializers.getConfig().getDateFormat();
+        if (defaultFormat instanceof StdDateFormat) {
+            StdDateFormat std = (StdDateFormat) defaultFormat;
+            TimeZone tz = format.getTimeZone();
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
+            Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
+            std = std.withTimeZone(tz).withLocale(loc);
+            return withFormat(Boolean.FALSE, std);
+        } else if (defaultFormat instanceof SimpleDateFormat) {
+            SimpleDateFormat sdf = (SimpleDateFormat) defaultFormat;
+            SimpleDateFormat clone = (SimpleDateFormat) sdf.clone();
+            TimeZone tz = format.getTimeZone();
+            if (tz == null) {
+                tz = serializers.getTimeZone();
+            }
+            clone.setTimeZone(tz);
+            if (format.hasLocale()) {
+                clone.applyPattern(((SimpleDateFormat) defaultFormat).toPattern());
+                clone.setDateFormatSymbols(new DateFormatSymbols(format.getLocale()));
+            }
+            return withFormat(Boolean.FALSE, clone);
+        }
 
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
         return this;
     }
\ No newline at end of file
