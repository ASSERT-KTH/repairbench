diff --git a/tmp/66986ad1-d46b-4435-b658-1ea894305c6d_buggy.java b/tmp/d067fbdb-a727-449b-9b5e-36d4030ff741_fixed.java
index d926eea..845c7e2 100644
--- a/tmp/66986ad1-d46b-4435-b658-1ea894305c6d_buggy.java
+++ b/tmp/d067fbdb-a727-449b-9b5e-36d4030ff741_fixed.java
@@ -1,48 +1,61 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+        BeanProperty property) throws JsonMappingException {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
+    // Handle custom pattern, locale, or timezone
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                 ? format.getPattern()
                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
+    // Use the default format set in the SerializerProvider if none is explicitly defined
+    DateFormat defaultDateFormat = serializers.getConfig().getDateFormat();
+    if (defaultDateFormat instanceof StdDateFormat) {
+        // If the default is StdDateFormat, clone it to properly handle timezone
+        TimeZone tz = format.getTimeZone();
+        if (tz == null) {
+            tz = serializers.getTimeZone();
+        }
+        StdDateFormat std = (StdDateFormat) defaultDateFormat;
+        std = (StdDateFormat) std.withLocale(format.hasLocale() ? format.getLocale() : serializers.getLocale());
+        std = (StdDateFormat) std.withTimeZone(tz);
+        return withFormat(Boolean.FALSE, std);
+    } else if (defaultDateFormat instanceof SimpleDateFormat) {
+        // If it's a SimpleDateFormat, recreate a new instance with proper settings
+        SimpleDateFormat sdf = (SimpleDateFormat) defaultDateFormat;
+        TimeZone tz = format.getTimeZone();
+        if (tz == null) {
+            tz = serializers.getTimeZone();
+        }
+        SimpleDateFormat newSdf = new SimpleDateFormat(sdf.toPattern(), sdf.getLocale());
+        newSdf.setTimeZone(tz);
+        return withFormat(Boolean.FALSE, newSdf);
+    }
 
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // Fallback to default behavior if none of the above applies
     return this;
 }
\ No newline at end of file
