diff --git a/tmp/5ccbcf05-b7f5-47dd-bb6a-259ac30c5acd_buggy.java b/tmp/3d586643-46cc-4703-b20c-829af5a74742_fixed.java
index d926eea..ec65dcc 100644
--- a/tmp/5ccbcf05-b7f5-47dd-bb6a-259ac30c5acd_buggy.java
+++ b/tmp/3d586643-46cc-4703-b20c-829af5a74742_fixed.java
@@ -1,48 +1,52 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
-            BeanProperty property) throws JsonMappingException
-    {
+        BeanProperty property) throws JsonMappingException {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
-                                || format.hasLocale() || format.hasTimeZone()) {
+    // New: respect existing DateFormat configuration if no specific pattern is provided
     TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+    final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale();
     if (tz == null) {
         tz = serializers.getTimeZone();
     }
+
+    // First: handle custom pattern
+    if (format.hasPattern()) {
+        String pattern = format.getPattern();
+        SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+    // Otherwise handle default case for `SimpleDateFormat`
+    if ((shape == JsonFormat.Shape.STRING) || format.hasLocale() || format.hasTimeZone()) {
+        DateFormat base = serializers.getConfig().getDateFormat();
+        if (base instanceof StdDateFormat) {
+            // `StdDateFormat` is immutable, can be reconfigured
+            StdDateFormat std = (StdDateFormat) base;
+            std = std.withTimeZone(tz).withLocale(loc);
+            return withFormat(Boolean.FALSE, std);
+        }
+        // Otherwise assume it must be `SimpleDateFormat`
+        if (base instanceof SimpleDateFormat) {
+            // Need to recreate since `SimpleDateFormat` is mutable
+            SimpleDateFormat sdf = (SimpleDateFormat) base;
+            SimpleDateFormat df = new SimpleDateFormat(sdf.toPattern(), loc);
+            df.setTimeZone(tz);
+            return withFormat(Boolean.FALSE, df);
+        }
+    }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
