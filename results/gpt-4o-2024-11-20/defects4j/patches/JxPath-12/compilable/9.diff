diff --git a/tmp/9a6eff90-e5ff-46b5-b8a1-f849b03296c4_buggy.java b/tmp/049bf4fe-6c36-4306-a0e3-25427bea9ccb_fixed.java
index 40f74f7..fde461e 100644
--- a/tmp/9a6eff90-e5ff-46b5-b8a1-f849b03296c4_buggy.java
+++ b/tmp/049bf4fe-6c36-4306-a0e3-25427bea9ccb_fixed.java
@@ -1,50 +1,55 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
-                return true;
-            }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String nodeName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+        if (wildcard) {
+            if (testPrefix == null) {
+                return true; // Wildcard without prefix matches any element
+            } else {
+                // Wildcard with prefix should match the namespace
                 return equalStrings(namespaceURI, nodeNS);
             }
-            return false;
+        }
+
+        // Ensure both local name and namespace match
+        return testName.getName().equals(nodeName) 
+                && equalStrings(namespaceURI, nodeNS);
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
                 return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+            return testPI == null || testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
