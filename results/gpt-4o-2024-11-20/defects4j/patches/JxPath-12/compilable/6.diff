diff --git a/tmp/1bff1eb5-c94b-4650-9964-b5770f67c054_buggy.java b/tmp/80311da6-268b-46c2-9009-3761599200e2_fixed.java
index 40f74f7..50a8311 100644
--- a/tmp/1bff1eb5-c94b-4650-9964-b5770f67c054_buggy.java
+++ b/tmp/80311da6-268b-46c2-9009-3761599200e2_fixed.java
@@ -1,50 +1,64 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
             boolean wildcard = nodeNameTest.isWildcard();
             String testPrefix = testName.getPrefix();
-            if (wildcard && testPrefix == null) {
+
+            // Fix: Allow proper namespace and wildcard matching
+            if (wildcard && (testPrefix == null || testPrefix.isEmpty())) {
                 return true;
             }
+
             if (wildcard
                 || testName.getName()
                         .equals(DOMNodePointer.getLocalName(node))) {
                 String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+                // Fix: Handle null namespace cases during comparison
+                if (nodeNS == null) {
+                    nodeNS = "";
+                }
+                if (namespaceURI == null) {
+                    namespaceURI = "";
+                }
+
                 return equalStrings(namespaceURI, nodeNS);
             }
             return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
-                return testPI.equals(nodePI);
+
+                // Fix: Handle the case where testPI is null to avoid NullPointerException
+                return testPI == null || testPI.equals(nodePI);
             }
         }
         return false;
     }
\ No newline at end of file
