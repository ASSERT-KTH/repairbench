diff --git a/tmp/ca035d59-6b49-434e-9de6-3283b9136b3e_buggy.java b/tmp/67efa21e-d34b-445b-9347-921a278adddb_fixed.java
index 6b09955..5b3d8b1 100644
--- a/tmp/ca035d59-6b49-434e-9de6-3283b9136b3e_buggy.java
+++ b/tmp/67efa21e-d34b-445b-9347-921a278adddb_fixed.java
@@ -1,121 +1,124 @@
-    /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Verify bracketing of initial solution
     verifyBracketing(x0, x1);
 
-        // Get accuracies.
+    // Get accuracies
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Keep track of inverted intervals
     boolean inverted = false;
 
-        // Keep finding better approximations.
+    // Track previous f0 and f1 to prevent stagnation
+    double prevF0 = f0;
+    double prevF1 = f1;
+
+    // Keep finding better approximations
     while (true) {
-            // Calculate the next approximation.
+        // Calculate the next approximation
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
+        // Update the bounds with the new approximation
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
+            // f(x1) and f(x) have opposite signs; interval [x0, x1] becomes [x, x1]
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
+            // f(x0) and f(x) have opposite signs; interval [x0, x1] becomes [x0, x]
             switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
-                    // Should never happen.
+                    // In case of unrecognized method, default to no scaling
+                    break;
             }
         }
-            // Update from [x0, x1] to [x0, x].
+
+        // Ensure bounds are updated to avoid stagnation in evaluations
+        if (FastMath.abs(f0 - prevF0) < ftol && FastMath.abs(f1 - prevF1) < ftol) {
+            f0 *= 0.5;
+        }
+
+        // Update from [x0, x1] to [x0, x]
         x1 = x;
         f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // Record previous f0 and f1
+        prevF0 = f0;
+        prevF1 = f1;
+
+        // Check convergence criteria for function value
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Check convergence criteria for interval size
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
