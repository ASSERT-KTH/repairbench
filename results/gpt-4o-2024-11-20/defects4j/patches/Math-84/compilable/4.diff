diff --git a/tmp/0c587051-27e9-4992-8204-2a11ee02307d_buggy.java b/tmp/3d73018f-6434-4a4b-b82b-042e1d504797_fixed.java
index 5f1dcf2..0faa6af 100644
--- a/tmp/0c587051-27e9-4992-8204-2a11ee02307d_buggy.java
+++ b/tmp/3d73018f-6434-4a4b-b82b-042e1d504797_fixed.java
@@ -1,41 +1,66 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+        final RealConvergenceChecker checker = getConvergenceChecker();
+        if (checker == null) {
+            throw new OptimizationException("Convergence checker is not set.");
+        }
+
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
+            final RealPointValuePair worst = original[original.length - 1];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                // check for convergence
+                if (checker.converged(getIterations(), best, worst)) {
                     return;
+                }
+
+                continue;
+
+            } else if (comparator.compare(reflected, worst) < 0) {
+
+                // accept the reflected simplex
+                final RealPointValuePair[] reflectedSimplex = simplex;
+                simplex = reflectedSimplex;
+
+                // check for convergence
+                if (checker.converged(getIterations(), best, worst)) {
+                    return;
+                }
+
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                // check for convergence
+                if (checker.converged(getIterations(), best, worst)) {
                     return;
                 }
 
-        }
 
             }
+        }
+    }
\ No newline at end of file
