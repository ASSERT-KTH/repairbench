diff --git a/tmp/e1d30d0f-10e1-4399-852b-6694eaee37e3_buggy.java b/tmp/fb410627-7fa8-4ab8-b4ba-550401e179e7_fixed.java
index 5f1dcf2..00ab77f 100644
--- a/tmp/e1d30d0f-10e1-4399-852b-6694eaee37e3_buggy.java
+++ b/tmp/fb410627-7fa8-4ab8-b4ba-550401e179e7_fixed.java
@@ -1,41 +1,66 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    boolean converged = false; // Add a convergence flag to avoid infinite loops
+    while (!converged) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
+        final RealPointValuePair worst = original[original.length - 1];
+
+        // check convergence
+        if (getConvergenceChecker() != null) {
+            boolean allConverged = true;
+            for (int i = 0; i < simplex.length; i++) {
+                allConverged &= getConvergenceChecker().converged(getIterations(), simplex[i], best);
+            }
+            if (allConverged) {
+                converged = true;
+                break;
+            }
+        }
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = simplex.clone();
+                simplex[simplex.length - 1] = reflected;
+            } else {
+                // accept the expanded simplex
+                simplex = simplex.clone();
+                simplex[simplex.length - 1] = expanded;
             }
+            continue;
 
-                return;
+        }
 
+        // check if the reflection is an improvement
+        if (comparator.compare(reflected, worst) < 0) {
+            simplex = simplex.clone();
+            simplex[simplex.length - 1] = reflected;
+            continue;
         }
 
-            // compute the contracted simplex
+        // perform a contraction step
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+        if (comparator.compare(contracted, worst) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            simplex = simplex.clone();
+            simplex[simplex.length - 1] = contracted;
+            continue;
         }
 
+        // perform a shrink step
+        shrinkSimplex(original, comparator);
     }
-
 }
\ No newline at end of file
