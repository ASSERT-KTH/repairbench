diff --git a/tmp/4af38b42-6b3b-495e-8db3-fec8a780fd9a_buggy.java b/tmp/19922016-f275-4790-8610-f11d479cd2ff_fixed.java
index 5f1dcf2..aafac8d 100644
--- a/tmp/4af38b42-6b3b-495e-8db3-fec8a780fd9a_buggy.java
+++ b/tmp/19922016-f275-4790-8610-f11d479cd2ff_fixed.java
@@ -1,41 +1,47 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+        final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+        RealPointValuePair previousBest = null;
+
         while (true) {
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+            final RealPointValuePair[] original = simplex.clone();
+            final RealPointValuePair best = simplex[0];
+
+            // check for convergence
+            if (previousBest != null && checker != null &&
+                checker.converged(getIterations(), previousBest, best)) {
+                return;
+            }
+
+            previousBest = best;
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair[] reflectedSimplex = simplex.clone();
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
                 return;
             }
-
         }
-
     }
\ No newline at end of file
