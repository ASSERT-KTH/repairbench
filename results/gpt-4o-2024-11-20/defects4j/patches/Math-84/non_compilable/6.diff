diff --git a/tmp/8ff3c4bd-f57c-4f6f-ac5a-c4b813d57cfa_buggy.java b/tmp/6e1f2e53-c329-4bd1-a7aa-6311e5df58cc_fixed.java
index 5f1dcf2..36664c1 100644
--- a/tmp/8ff3c4bd-f57c-4f6f-ac5a-c4b813d57cfa_buggy.java
+++ b/tmp/6e1f2e53-c329-4bd1-a7aa-6311e5df58cc_fixed.java
@@ -1,41 +1,69 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean converged = false;
+
+        while (!converged) {
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair[] reflectedSimplex = simplex.clone();
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+                if (comparator.compare(expanded, reflected) < 0) {
+                    // accept the expanded simplex
+                    simplex = reflectedSimplex;
+                } else {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
-
+                converged = checkConvergence(comparator, original);
+                continue;
             }
 
             // compute the contracted simplex
+            final RealPointValuePair[] contractedSimplex = simplex.clone();
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = contractedSimplex;
 
-            // check convergence
-                return;
+                converged = checkConvergence(comparator, original);
+                continue;
+            }
+
+            // shrink the simplex if no improvement
+            shrinkSimplex(best, comparator);
+
+            converged = checkConvergence(comparator, original);
         }
 
     }
 
+    /**
+     * Check if the simplex has converged.
+     * 
+     * @param comparator Comparator for simplex points.
+     * @param original   Original simplex.
+     * @return True if the simplex has converged, false otherwise.
+     */
+    private boolean checkConvergence(final Comparator<RealPointValuePair> comparator,
+                                     final RealPointValuePair[] original) {
+        for (int i = 1; i < simplex.length; i++) {
+            if (comparator.compare(simplex[i], original[0]) != 0) {
+                return false;
+            }
+        }
+        return true;
     }
