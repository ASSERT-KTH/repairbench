diff --git a/tmp/4d27ba4d-a09e-48de-9da8-fc45eb181a7a_buggy.java b/tmp/3d1c2258-3e94-4f1f-945e-7b35a15d74ff_fixed.java
index 5f1dcf2..f6ecd29 100644
--- a/tmp/4d27ba4d-a09e-48de-9da8-fc45eb181a7a_buggy.java
+++ b/tmp/3d1c2258-3e94-4f1f-945e-7b35a15d74ff_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean converged = false;
+
+        while (!converged) {
 
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair[] reflectedSimplex = simplex.clone();
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
-
-            }
+                converged = checkConvergence(original, comparator);
+                continue; // proceed to check convergence or further iterations
 
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex    
-
-            // check convergence
-                return;
+                    converged = checkConvergence(original, comparator);
+                    continue; // proceed to check convergence or further iterations
                 }
-
             }
 
+            // reduce the simplex if all else fails
+            shrinkSimplex(comparator);
+            converged = checkConvergence(original, comparator);
+        }
     }
\ No newline at end of file
