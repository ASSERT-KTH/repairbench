diff --git a/tmp/1a2b565f-8f14-4d15-9017-f538e1aae8c2_buggy.java b/tmp/f049df26-fd86-40ae-813e-1a0c5033b535_fixed.java
index 5f1dcf2..fce217e 100644
--- a/tmp/1a2b565f-8f14-4d15-9017-f538e1aae8c2_buggy.java
+++ b/tmp/f049df26-fd86-40ae-813e-1a0c5033b535_fixed.java
@@ -1,41 +1,55 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final int maxEvaluations = getEvaluations();
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    RealPointValuePair previousBest = null;
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        final RealPointValuePair[] original = simplex.clone();
+        final RealPointValuePair best = simplex[0];
+
+        // check convergence for the best point
+        if (checker != null && previousBest != null) {
+            if (checker.converged(getIterations(), previousBest, best)) {
+                return;
+            }
+        }
+
+        previousBest = best;
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
             return;
         }
 
+        // check max evaluations
+        if (getEvaluations() >= maxEvaluations) {
+            throw new OptimizationException(new MaxIterationsExceededException(maxEvaluations));
+        }
     }
-
 }
\ No newline at end of file
