diff --git a/tmp/31acea63-065c-4630-8686-ca9fed2641ad_buggy.java b/tmp/63559a18-6cd7-46d9-b54c-a173db5656a0_fixed.java
index 5f1dcf2..e0ef174 100644
--- a/tmp/31acea63-065c-4630-8686-ca9fed2641ad_buggy.java
+++ b/tmp/63559a18-6cd7-46d9-b54c-a173db5656a0_fixed.java
@@ -1,41 +1,26 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean converged = false;
 
+        while (!converged) {
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
-
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
+                    converged = checkConvergence(simplex, reflectedSimplex, comparator);
                     simplex = reflectedSimplex;
-                }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
-                return;
-            }
-
-        }
-
-    }
+                } else {
+                    // accept the expanded simplex
+                    converged = checkConvergence(simplex, expandedSimplex, comparator);
