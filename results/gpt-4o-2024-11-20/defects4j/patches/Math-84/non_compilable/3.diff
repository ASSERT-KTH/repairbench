diff --git a/tmp/4256429e-ddd8-494e-9668-4317fc808be7_buggy.java b/tmp/4965e13e-8786-4c41-9fca-4b307d29fe96_fixed.java
index 5f1dcf2..e1af2b3 100644
--- a/tmp/4256429e-ddd8-494e-9668-4317fc808be7_buggy.java
+++ b/tmp/4965e13e-8786-4c41-9fca-4b307d29fe96_fixed.java
@@ -1,41 +1,43 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
         
-        while (true) {
+        boolean converged = false;
 
+        while (!converged) {
             incrementIterationsCounter();
 
             // save the original vertex
-            final RealPointValuePair[] original = simplex;
+            final RealPointValuePair[] original = simplex.clone();
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+                final RealPointValuePair[] reflectedSimplex = simplex.clone();
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
-                return;
+                converged = checkConvergence(simplex, comparator);
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                converged = checkConvergence(simplex, comparator);
+            } else {
+                // reduce the entire simplex
+                reduceSimplex(original);
+                converged = checkConvergence(simplex, comparator);
             }
-
         }
-
     }
\ No newline at end of file
