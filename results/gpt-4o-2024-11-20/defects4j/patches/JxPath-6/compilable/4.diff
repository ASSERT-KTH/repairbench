diff --git a/tmp/c56d65a4-a63d-450a-92bc-97afaf1319de_buggy.java b/tmp/f6808be6-a6bf-4824-af8e-83a09d953fcb_fixed.java
index f650982..b970c91 100644
--- a/tmp/c56d65a4-a63d-450a-92bc-97afaf1319de_buggy.java
+++ b/tmp/f6808be6-a6bf-4824-af8e-83a09d953fcb_fixed.java
@@ -1,42 +1,53 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+        // Resolve contexts to single node pointers
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
+        // Handle collections by converting them to iterators
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
+        // Handle cases where one is an iterator and the other is not
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
+        
+        // Handle cases where both are iterators
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
-        return equal(l, r);
+
+        // Correctly handle null values
+        if (l == null && r == null) {
+            return true;
+        }
+        if (l == null || r == null) {
+            return false;
+        }
+
+        // Use standard equals for deep comparison when both are not iterators
+        return l.equals(r);
     }
\ No newline at end of file
