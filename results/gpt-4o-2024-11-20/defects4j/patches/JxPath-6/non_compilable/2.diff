diff --git a/tmp/15d22f4f-8087-4cc2-a958-44d56b4e3635_buggy.java b/tmp/3562f5c1-f7e6-4482-8727-e7d5e5b82299_fixed.java
index f650982..1191bfb 100644
--- a/tmp/15d22f4f-8087-4cc2-a958-44d56b4e3635_buggy.java
+++ b/tmp/3562f5c1-f7e6-4482-8727-e7d5e5b82299_fixed.java
@@ -1,42 +1,55 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if ((l instanceof Iterator) || (r instanceof Iterator)) {
+            Iterator<?> lit = (l instanceof Iterator) ? (Iterator<?>) l : singletonIterator(l);
+            Iterator<?> rit = (r instanceof Iterator) ? (Iterator<?>) r : singletonIterator(r);
+            return findMatch(lit, rit);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+
+        return (l == r) || (l != null && l.equals(r));
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+
+    private Iterator<?> singletonIterator(Object obj) {
+        return new Iterator<Object>() {
+            private boolean hasNext = true;
+
+            @Override
+            public boolean hasNext() {
+                return hasNext;
             }
-        return equal(l, r);
+
+            @Override
+            public Object next() {
+                if (!hasNext) {
+                    throw new NoSuchElementException();
+                }
+                hasNext = false;
+                return obj;
+            }
+        };
     }
\ No newline at end of file
