diff --git a/tmp/ee7de148-9bb9-47b0-b818-69d0776e2721_buggy.java b/tmp/92c208af-154d-41b6-8721-d7cbc003aab9_fixed.java
index 227a4ef..1811c0d 100644
--- a/tmp/ee7de148-9bb9-47b0-b818-69d0776e2721_buggy.java
+++ b/tmp/92c208af-154d-41b6-8721-d7cbc003aab9_fixed.java
@@ -1,48 +1,54 @@
     /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             int lastPos = pos;
             text = padding + text.substring(pos).trim();
+            
+            // Ensure that the new text is shorter than the desired width before proceeding
+            if (text.length() <= width) {
+                sb.append(rtrim(text));
+                return sb;
+            }
+
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
-            } else
-            if (pos == lastPos)
+            } 
+            else if (pos <= lastPos) // fixed comparison condition to avoid infinite loop
             {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+                sb.append(rtrim(text));
+                return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
