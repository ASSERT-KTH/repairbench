diff --git a/tmp/70d83446-1408-449f-b6ef-3948ab96ffd0_buggy.java b/tmp/754d632f-d9ae-406e-9ed4-a3c326e71575_fixed.java
index 227a4ef..138bc95 100644
--- a/tmp/70d83446-1408-449f-b6ef-3948ab96ffd0_buggy.java
+++ b/tmp/754d632f-d9ae-406e-9ed4-a3c326e71575_fixed.java
@@ -1,48 +1,53 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+        text = text.substring(lastPos).trim();
+        if (text.isEmpty()) { // Break out if the remaining text is empty
+            break;
+        }
+        text = padding + text;
         pos = findWrapPos(text, width, 0);
         
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
-            if (pos == lastPos)
+        }
+        if (pos <= lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Adjust logic here to properly handle invalid or infinite wrapping scenarios
+            pos = lastPos + 1;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
+
+    return sb;
 }
\ No newline at end of file
