diff --git a/tmp/4c5a76bc-672e-4af1-82b9-b3e68f9f06e6_buggy.java b/tmp/9ca743e8-ed0e-4382-b07b-abce41d32fdc_fixed.java
index d6a560a..10b8b56 100644
--- a/tmp/4c5a76bc-672e-4af1-82b9-b3e68f9f06e6_buggy.java
+++ b/tmp/9ca743e8-ed0e-4382-b07b-abce41d32fdc_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Resolve via registry first to avoid unnecessary warnings during resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check and handle prototype cycles after resolving via registry.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early to prevent further processing on cyclic types.
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Resolve via properties if the type was not resolved via registry.
     resolveViaProperties(t, enclosing);
+
+    // Check and handle prototype cycles again after resolving via properties.
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early to prevent further processing on cyclic types.
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
