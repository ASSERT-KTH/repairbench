diff --git a/tmp/41f7f0f8-d28e-4b56-b9e2-c730e9c9823d_buggy.java b/tmp/9fdb043b-13bf-4fa3-963c-9a46c1a883f6_fixed.java
index d6a560a..89c0d2f 100644
--- a/tmp/41f7f0f8-d28e-4b56-b9e2-c730e9c9823d_buggy.java
+++ b/tmp/9fdb043b-13bf-4fa3-963c-9a46c1a883f6_fixed.java
@@ -1,33 +1,41 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Avoid resolving repeatedly if already resolved.
+    if (isResolved()) {
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
+    // Resolve via registry first.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Exit early if a cycle is found to prevent infinite recursion.
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Resolve via properties as a fallback.
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Exit early to prevent infinite recursion.
     }
 
     super.resolveInternal(t, enclosing);
+
+    // Mark as resolved and finalize property continuations if applicable.
     if (isResolved()) {
       finishPropertyContinuations();
     }
+
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
