diff --git a/tmp/e08f62d7-17e8-4e8f-8fc3-eb2ea70908db_buggy.java b/tmp/456182f0-b32e-4736-8197-9281a2914c69_fixed.java
index d6a560a..5bb577a 100644
--- a/tmp/e08f62d7-17e8-4e8f-8fc3-eb2ea70908db_buggy.java
+++ b/tmp/456182f0-b32e-4736-8197-9281a2914c69_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // To prevent infinite loops or cycles during type resolution
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return this; // Return early to avoid further processing
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
+
+    // Check for cycles again after resolving via properties
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this; // Return early to avoid further processing
     }
 
     super.resolveInternal(t, enclosing);
+
     if (isResolved()) {
       finishPropertyContinuations();
     }
+
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
