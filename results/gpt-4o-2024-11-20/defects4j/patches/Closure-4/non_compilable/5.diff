diff --git a/tmp/e0204b39-a373-44e4-a70f-e5d83dd2c721_buggy.java b/tmp/9955bd21-bf92-474c-bea9-715cc2613cea_fixed.java
index d6a560a..52ad338 100644
--- a/tmp/e0204b39-a373-44e4-a70f-e5d83dd2c721_buggy.java
+++ b/tmp/9955bd21-bf92-474c-bea9-715cc2613cea_fixed.java
@@ -1,33 +1,44 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Safeguard to detect and prevent recursive prototype cycles
+  if (isResolving) {
+    t.report(
+        JSError.make(TypeCheck.CYCLIC_INHERITANCE_ERROR, getDisplayName()));
+    return this;
+  }
+
+  isResolving = true; // Mark the type as being resolved to prevent recursion
+  try {
+    // Try resolution via the registry
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolution via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
+  } finally {
+    isResolving = false; // Reset the flag after resolution attempt
+  }
 }
\ No newline at end of file
