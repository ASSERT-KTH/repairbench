diff --git a/tmp/92f85467-9440-44dc-b060-bacd08a50db0_buggy.java b/tmp/32102526-05e1-4260-aa49-3cb222b06f96_fixed.java
index d6a560a..2712244 100644
--- a/tmp/92f85467-9440-44dc-b060-bacd08a50db0_buggy.java
+++ b/tmp/32102526-05e1-4260-aa49-3cb222b06f96_fixed.java
@@ -1,33 +1,46 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // To avoid cycles in inheritance, track already visited types.
+    Set<JSType> visitedTypes = new HashSet<>();
+
+    // Helper method to detect cycles in the inheritance chain.
+    boolean detectCycle(JSType type) {
+      if (visitedTypes.contains(type)) {
+        return true;
+      }
+      visitedTypes.add(type);
+      return false;
+    }
+
+    // Perform resolution via registry first.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    if (detectImplicitPrototypeCycle() || detectCycle(this)) {
       handleTypeCycle(t);
+      return this;
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // Perform resolution via properties next.
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+    if (detectImplicitPrototypeCycle() || detectCycle(this)) {
       handleTypeCycle(t);
+      return this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
+
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
