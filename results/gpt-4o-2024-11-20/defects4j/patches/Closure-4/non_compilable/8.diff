diff --git a/tmp/958e4cf1-e7e9-4fa9-ba43-7ae1fabb8cff_buggy.java b/tmp/8a7d97ad-6b87-435f-9166-9a3817de6321_fixed.java
index d6a560a..c30c1cc 100644
--- a/tmp/958e4cf1-e7e9-4fa9-ba43-7ae1fabb8cff_buggy.java
+++ b/tmp/8a7d97ad-6b87-435f-9166-9a3817de6321_fixed.java
@@ -1,33 +1,49 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+    if (isResolving) {
+      // Prevent re-entrant calls that can result in cycles.
+      t.report(CheckLevel.ERROR, getSourceName(), "Cycle detected in type resolution");
+      return unknownType; // Return an unknown type to break the cycle.
+    }
+
+    try {
+      isResolving = true;
+
       boolean resolved = resolveViaRegistry(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return unknownType; // Return to avoid further processing.
       }
 
       if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
       }
 
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return unknownType; // Return to avoid further processing.
       }
 
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
       return registry.isLastGeneration() ?
           getReferencedType() : this;
+
+    } finally {
+      // Ensure the resolving flag is reset even if an exception occurs.
+      isResolving = false;
+    }
   }
\ No newline at end of file
