diff --git a/tmp/07d8c7d5-afcb-4946-9762-48393d4043a0_buggy.java b/tmp/72d0d93b-b617-4613-bc4f-bcef89aaddbb_fixed.java
index 0eef537..060ee76 100644
--- a/tmp/07d8c7d5-afcb-4946-9762-48393d4043a0_buggy.java
+++ b/tmp/72d0d93b-b617-4613-bc4f-bcef89aaddbb_fixed.java
@@ -1,74 +1,62 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                            matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData = matrix.getData();
     cachedL = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
-
         final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+        if (lTData[i][i] <= absolutePositivityThreshold) { 
+            // Ensure diagonal elements are strictly greater than threshold
             throw new NotPositiveDefiniteMatrixException();
         }
+
         // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
         }
     }
 
     // transform the matrix
     for (int i = 0; i < order; ++i) {
-
         final double[] ltI = lTData[i];
 
         // check diagonal element
+        if (ltI[i] <= absolutePositivityThreshold) { 
+            // Verify positivity during decomposition
+            throw new NotPositiveDefiniteMatrixException();
+        }
 
         ltI[i] = Math.sqrt(ltI[i]);
         final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
+        for (int q = i + 1; q < order; ++q) { 
+            // Adjusted loop bounds to fix incorrect update logic
             final double[] ltQ = lTData[q];
+            ltQ[i] *= inverse; // Compute the L factor
             for (int p = q; p < order; ++p) { 
-                    ltQ[p] -= ltI[q] * ltI[p];
+                ltQ[p] -= ltQ[i] * ltI[p];
             }
         }
-
     }
-
 }
\ No newline at end of file
