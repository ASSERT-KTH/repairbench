diff --git a/tmp/41fd40f4-065b-4762-96c3-25d32168a1a1_buggy.java b/tmp/ea304574-16d5-4c04-966d-b67efa941e4f_fixed.java
index 0eef537..6950eaf 100644
--- a/tmp/41fd40f4-065b-4762-96c3-25d32168a1a1_buggy.java
+++ b/tmp/ea304574-16d5-4c04-966d-b67efa941e4f_fixed.java
@@ -1,74 +1,63 @@
-    /**
-     * Calculates the Cholesky decomposition of the given matrix.
-     * @param matrix the matrix to decompose
-     * @param relativeSymmetryThreshold threshold above which off-diagonal
-     * elements are considered too different and matrix not symmetric
-     * @param absolutePositivityThreshold threshold below which diagonal
-     * elements are considered null and matrix not positive definite
-     * @exception NonSquareMatrixException if matrix is not square
-     * @exception NotSymmetricMatrixException if matrix is not symmetric
-     * @exception NotPositiveDefiniteMatrixException if the matrix is not
-     * strictly positive definite
-     * @see #CholeskyDecompositionImpl(RealMatrix)
-     * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
-     * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
-     */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
         lTData   = matrix.getData();
         cachedL  = null;
         cachedLT = null;
 
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
             if (lTData[i][i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lI[j] = 0; // Corrected here: Reset lI[j] (upper triangular part) instead of lJ[i]
             }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
             // check diagonal element
+            if (ltI[i] <= 0) { // Check if matrix is not positive definite
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
+            for (int q = i + 1; q < order; ++q) { // Fixed bounds: Starting with (i + 1) instead of reversing loop
                 final double[] ltQ = lTData[q];
+                ltQ[i] *= inverse; // Update lower triangular value
+
                 for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+                    ltQ[p] -= ltQ[i] * ltI[p];
                 }
             }
 
         }
 
     }
\ No newline at end of file
