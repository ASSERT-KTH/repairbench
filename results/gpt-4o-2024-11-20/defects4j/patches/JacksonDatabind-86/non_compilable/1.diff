diff --git a/tmp/0e7a74af-b043-4fb4-9d16-c47976b891c5_buggy.java b/tmp/558be9c0-b6b4-4647-af2d-5f798b74a06a_fixed.java
index e69de29..8cea96a 100644
--- a/tmp/0e7a74af-b043-4fb4-9d16-c47976b891c5_buggy.java
+++ b/tmp/558be9c0-b6b4-4647-af2d-5f798b74a06a_fixed.java
@@ -0,0 +1,30 @@
+// Fix for type resolution in TypeFactory or related method:
+@Override
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings, JavaType superClass) {
+    // Ensure caching of recursive types for correctness
+    if (_bindingCache.containsKey(raw)) {
+        return _bindingCache.get(raw);
+    }
+    
+    // Mark this type as being resolved to avoid circular references during resolution
+    ResolvedRecursiveType recursiveType = new ResolvedRecursiveType(raw, _typeFactory());
+    _bindingCache.put(raw, recursiveType);
+    
+    try {
+        // Ensure proper resolution of superclass, filling in all necessary details
+        if (superClass == null && raw.getSuperclass() != null) {
+            TypeBindings superBindings = bindings.resolveBindings(raw.getSuperclass());
+            superClass = constructType(raw.getSuperclass(), superBindings);
+        }
+        
+        // Create resolved type including superclass and other components
+        JavaType resultType = new ResolvedType(raw, bindings, superClass);
+
+        // Update the recursive type once resolution is complete
+        recursiveType.setReference(resultType);
+        
+        return resultType;
+    } finally {
+        _bindingCache.remove(raw);
+    }
+}
\ No newline at end of file
