diff --git a/tmp/5fee9520-ad0f-41f7-80c3-d7c87ac7dbe0_buggy.java b/tmp/8ac3a784-e278-4e0e-b7af-ed80e650a6db_fixed.java
index e69de29..c83814e 100644
--- a/tmp/5fee9520-ad0f-41f7-80c3-d7c87ac7dbe0_buggy.java
+++ b/tmp/8ac3a784-e278-4e0e-b7af-ed80e650a6db_fixed.java
@@ -0,0 +1,37 @@
+@Override
+public synchronized JavaType constructType(Class<?> cls) {
+    if (cls == null) {
+        throw new IllegalArgumentException("Class must not be null");
+    }
+    
+    // First, check cache for previously resolved types
+    JavaType cachedType = _typeCache.get(cls);
+    if (cachedType != null) {
+        return cachedType;
+    }
+    
+    // Avoid infinite recursion by using a partially resolved type for recursive structures
+    ResolvedRecursiveType recursiveType = new ResolvedRecursiveType(cls, this);
+    _typeCache.put(cls, recursiveType);
+
+    JavaType resolvedType;
+    if (cls.isArray()) {
+        resolvedType = constructArrayType(cls.getComponentType());
+    } else if (cls.isEnum()) {
+        resolvedType = new SimpleType(cls);
+    } else if (cls.isInterface()) {
+        resolvedType = new SimpleType(cls);
+    } else {
+        resolvedType = new SimpleType(cls);
+    }
+    
+    // Properly finalize the recursive type if applicable
+    if (recursiveType.getSelfType() == null) {
+        recursiveType.setSelfType(resolvedType);
+    }
+
+    // Update cache with the fully resolved type
+    _typeCache.put(cls, resolvedType);
+
+    return resolvedType;
+}
\ No newline at end of file
