diff --git a/tmp/a39028e2-ec09-4a15-bbf9-ce49836b70a5_buggy.java b/tmp/0768c11f-e053-43d4-a00b-29188bc9805e_fixed.java
index e69de29..78ea277 100644
--- a/tmp/a39028e2-ec09-4a15-bbf9-ce49836b70a5_buggy.java
+++ b/tmp/0768c11f-e053-43d4-a00b-29188bc9805e_fixed.java
@@ -0,0 +1,26 @@
+@Override
+protected JavaType _fromClass(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {
+    ResolvedRecursiveType recursiveType = _findExistingRecursiveType(raw, bindings);
+    if (recursiveType != null) {
+        // If we already resolved this as a recursive type, avoid further processing
+        return recursiveType;
+    }
+
+    // First, let's create a RecursiveType placeholder
+    ResolvedRecursiveType placeholderType = new ResolvedRecursiveType(raw, bindings, _typeFactory);
+    _addRecursiveType(raw, bindings, placeholderType);
+
+    // Process super class and interfaces
+    if (superClass == null && raw.getSuperclass() != null) {
+        // Assign the superclass only if we know it exists
+        superClass = _constructSuperClass(raw, bindings);
+    }
+    if (superInterfaces == null && raw.getInterfaces() != null) {
+        superInterfaces = _constructSuperInterfaces(raw, bindings);
+    }
+
+    // Now, resolve the type fully
+    JavaType resolvedType = super._fromClass(raw, bindings, superClass, superInterfaces);
+    placeholderType.setReference(resolvedType);
+    return resolvedType;
+}
\ No newline at end of file
