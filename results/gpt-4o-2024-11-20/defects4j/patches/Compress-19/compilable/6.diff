diff --git a/tmp/18ed100c-ca19-4606-8b96-050b756811a6_buggy.java b/tmp/1be6488a-be3c-4a8c-bbcb-29e5e0f23e6c_fixed.java
index 730ab7d..c2083c0 100644
--- a/tmp/18ed100c-ca19-4606-8b96-050b756811a6_buggy.java
+++ b/tmp/1be6488a-be3c-4a8c-bbcb-29e5e0f23e6c_fixed.java
@@ -1,48 +1,54 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+
+            // Check if the actual data length is less than the expected length
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " is less than expected central directory"
+                                       + " data. Expected minimum length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
+
             int offset = 0;
             if (hasUncompressedSize) {
                 size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
                 compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                                                          offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
                 diskStart = new ZipLong(rawCentralDirectoryData, offset);
                 offset += WORD;
             }
+
+            // Additional validation to allow excess data: log a warning or ignore excess bytes silently
+            // (No exception is thrown for excess data, as long as required fields fit correctly.)
         }
     }
\ No newline at end of file
