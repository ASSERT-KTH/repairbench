diff --git a/tmp/d406fc9f-530a-48da-a0b5-f244c1389ed1_buggy.java b/tmp/1f41d9ac-e83b-400e-bc59-2310d8dffd63_fixed.java
index 3127f85..f642d9b 100644
--- a/tmp/d406fc9f-530a-48da-a0b5-f244c1389ed1_buggy.java
+++ b/tmp/1f41d9ac-e83b-400e-bc59-2310d8dffd63_fixed.java
@@ -1,24 +1,26 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
+     * If {@code x} is more than 20 standard deviations from the mean, 0 or 1 is returned,
+     * as in these cases the actual value is effectively 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+
+        // Shortcut for extreme values to ensure convergence issues are avoided
+        if (x < (mean - 20 * standardDeviation)) { // Extremely far left
+            return 0.0;
+        } else if (x > (mean + 20 * standardDeviation)) { // Extremely far right
+            return 1.0;
+        }
+
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+            throw new MathException("Failed to compute cumulative probability due to non-convergence", ex);
         }
     }
\ No newline at end of file
