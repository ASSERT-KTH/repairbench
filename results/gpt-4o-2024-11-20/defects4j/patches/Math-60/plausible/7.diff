diff --git a/tmp/b208649a-86f5-4b57-aa4e-606b5b01850d_buggy.java b/tmp/aaec2dec-4007-4c46-ab05-f7d464fce3b4_fixed.java
index 3127f85..3252ed6 100644
--- a/tmp/b208649a-86f5-4b57-aa4e-606b5b01850d_buggy.java
+++ b/tmp/aaec2dec-4007-4c46-ab05-f7d464fce3b4_fixed.java
@@ -1,24 +1,31 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+
+        // Handle extreme cases directly to avoid unnecessary computations
+        if (x <= (mean - 40 * standardDeviation)) {
+            return 0.0;
+        } else if (x >= (mean + 40 * standardDeviation)) {
+            return 1.0;
+        }
+
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
