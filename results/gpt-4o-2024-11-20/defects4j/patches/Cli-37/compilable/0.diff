diff --git a/tmp/758335fb-2137-4ad7-82de-0e6ce74836ef_buggy.java b/tmp/b38959e3-4d33-454f-966c-aba2895c6352_fixed.java
index a7e6997..86ee991 100644
--- a/tmp/758335fb-2137-4ad7-82de-0e6ce74836ef_buggy.java
+++ b/tmp/b38959e3-4d33-454f-966c-aba2895c6352_fixed.java
@@ -1,12 +1,29 @@
     /**
      * Tells if the token looks like a short option.
      * 
      * @param token
      */
     private boolean isShortOption(String token)
     {
         // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+        if (!token.startsWith("-") || token.length() < 2) {
+            return false;
+        }
+
+        // Ensure we only consider the first character after '-' as a potential short option
+        String potentialShortOption = token.substring(1, 2);
+
+        // Check if the first character after '-' is a valid short option
+        if (!options.hasShortOption(potentialShortOption)) {
+            return false;
+        }
+
+        // Ensure the remaining part of the token (if exists) is correctly formed
+        String remainder = token.substring(2);
 
-        // remove leading "-" and "=value"
+        // Valid cases:
+        // - no remainder, or
+        // - remainder is a value starting with '=', or
+        // - remainder is alphanumeric (e.g., chained short options or a single short option with value)
+        return remainder.isEmpty() || remainder.startsWith("=") || remainder.matches("^[a-zA-Z0-9]+$");
     }
\ No newline at end of file
