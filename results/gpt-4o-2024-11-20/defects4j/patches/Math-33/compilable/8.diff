diff --git a/tmp/d9f67c83-9276-4288-9fd5-c6b6b8eac40f_buggy.java b/tmp/473fd61e-5a63-4d95-bd6f-30a6063190cb_fixed.java
index 56b2d66..515b15c 100644
--- a/tmp/d9f67c83-9276-4288-9fd5-c6b6b8eac40f_buggy.java
+++ b/tmp/473fd61e-5a63-4d95-bd6f-30a6063190cb_fixed.java
@@ -1,45 +1,63 @@
     /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
         columnsToDrop.add(0);
 
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
             int col = i + getArtificialVariableOffset();
             if (getBasicRow(col) == null) {
                 columnsToDrop.add(col);
             }
         }
 
+        // Create the new matrix while skipping the columns to be dropped
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
         for (int i = 1; i < getHeight(); i++) {
             int col = 0;
             for (int j = 0; j < getWidth(); j++) {
                 if (!columnsToDrop.contains(j)) {
                     matrix[i - 1][col++] = tableau.getEntry(i, j);
                 }
             }
         }
 
+        // Remove entries from columnLabels corresponding to the columns being dropped
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
             columnLabels.remove((int) columnsToDrop.get(i));
         }
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        // Update the tableau with the new matrix, but this time correctly update the objective function row
+        double[][] newTableauData = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
+        for (int i = 0; i < getHeight(); i++) {
+            if (i == 0) {
+                // Objective function row should be adjusted
+                int col = 0;
+                for (int j = 0; j < getWidth(); j++) {
+                    if (!columnsToDrop.contains(j)) {
+                        newTableauData[0][col++] = tableau.getEntry(i, j);
+                    }
+                }
+            } else {
+                System.arraycopy(matrix[i - 1], 0, newTableauData[i - 1], 0, matrix[i - 1].length);
+            }
+        }
+
+        this.tableau = new Array2DRowRealMatrix(newTableauData);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
