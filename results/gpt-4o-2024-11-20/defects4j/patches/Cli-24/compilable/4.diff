diff --git a/tmp/ea5790b6-90e3-4ca0-bf9e-1dca5b5c7ff1_buggy.java b/tmp/a8987a85-1c99-46b0-90dc-794cade2b9fd_fixed.java
index 229b3e7..652c689 100644
--- a/tmp/ea5790b6-90e3-4ca0-bf9e-1dca5b5c7ff1_buggy.java
+++ b/tmp/a8987a85-1c99-46b0-90dc-794cade2b9fd_fixed.java
@@ -1,55 +1,36 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+        // Ensure nextLineTabStop does not occupy more or equal width
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+            nextLineTabStop = width - 1; // Adjust to prevent infinite loop condition
         }
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
