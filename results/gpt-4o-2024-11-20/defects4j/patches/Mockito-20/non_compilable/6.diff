diff --git a/tmp/2e6182ab-730d-48a8-b763-72368c18fa82_buggy.java b/tmp/38ef6377-7903-4532-b7b9-072b1043ba99_fixed.java
index f9a9b5b..36e182b 100644
--- a/tmp/2e6182ab-730d-48a8-b763-72368c18fa82_buggy.java
+++ b/tmp/38ef6377-7903-4532-b7b9-072b1043ba99_fixed.java
@@ -1,30 +1,48 @@
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
         T mockInstance = null;
         try {
+            // Check if outer instance is provided for inner classes
+            if (settings.getOuterInstance() != null) {
+                mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getOuterInstance());
+            } else if (settings.isUsingConstructor()) {
+                mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs().toArray());
+            } else {
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
         } catch (ClassCastException cce) {
             throw new MockitoException(join(
                     "ClassCastException occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
         } catch (org.mockito.internal.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        } catch (IllegalArgumentException iae) {
+            throw new MockitoException(join(
+                    "IllegalArgumentException occurred while creating the mockito mock :",
+                    "  class to mock : " + describeClass(mockedProxyType),
+                    "  created class : " + describeClass(settings.getTypeToMock()),
+                    "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "",
+                    "The constructor parameters don't match. Please ensure the arguments are correct.",
+                    iae.getMessage()
+            ), iae);
         }
     }
\ No newline at end of file
