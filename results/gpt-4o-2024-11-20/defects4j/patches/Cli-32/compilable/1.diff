diff --git a/tmp/713d5b13-af03-4f77-836a-e97b131a7581_buggy.java b/tmp/0333ea06-1d81-4ca9-be78-9b7f894b4f62_fixed.java
index 14b78fb..a747cb3 100644
--- a/tmp/713d5b13-af03-4f77-836a-e97b131a7581_buggy.java
+++ b/tmp/0333ea06-1d81-4ca9-be78-9b7f894b4f62_fixed.java
@@ -1,56 +1,31 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
     protected int findWrapPos(String text, int width, int startPos)
     {
-        int pos;
-        
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
-        {
-            return pos + 1;
-        }
-        else if (startPos + width >= text.length())
-        {
+        // If startPos + width exceeds the text length, return -1
+        if (startPos + width >= text.length()) {
             return -1;
         }
 
+        // Look for the last whitespace character before startPos + width
+        int pos = startPos + width;
 
-        // look for the last whitespace character before startPos+width
-        pos = startPos + width;
-
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
-        {
+        while (pos > startPos) {
+            char c = text.charAt(pos);
+            if (c == ' ' || c == '\n' || c == '\r') {
+                return pos;
+            }
             --pos;
         }
 
-        // if we found it - just return
-        if (pos > startPos)
-        {
+        // If no whitespace was found, look forward until finding a whitespace or end of text
+        pos = startPos + width;
+        while (pos < text.length()) {
+            char c = text.charAt(pos);
+            if (c == ' ' || c == '\n' || c == '\r') {
                 return pos;
             }
-        
-        // if we didn't find one, simply chop at startPos+width
-        pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
             ++pos;
         }
-        return pos == text.length() ? -1 : pos;
+
+        // If no whitespace at all, simply chop at startPos + width
+        return startPos + width;
     }
\ No newline at end of file
