diff --git a/tmp/8d797fe5-1d49-401d-91f1-d38eb916a144_buggy.java b/tmp/a191ecf2-4e98-40b4-9212-21b0d68380be_fixed.java
index 14b78fb..b718ca9 100644
--- a/tmp/8d797fe5-1d49-401d-91f1-d38eb916a144_buggy.java
+++ b/tmp/a191ecf2-4e98-40b4-9212-21b0d68380be_fixed.java
@@ -1,56 +1,41 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
 
-        // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    // first, handle cases where new line or tab characters are within range
+    if (((pos = text.indexOf('\n', startPos)) != -1 && pos < startPos + width)
+            || ((pos = text.indexOf('\t', startPos)) != -1 && pos < startPos + width))
     {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
+
+    // if startPos + width is beyond text length, return -1
+    if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos + width
     pos = startPos + width;
 
-        char c;
-
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+    while (pos > startPos)
     {
+        char c = text.charAt(pos);
+        if (c == ' ' || c == '\n' || c == '\r')
+        {
+            return pos;
+        }
         --pos;
     }
 
-        // if we found it - just return
-        if (pos > startPos)
-        {
-            return pos;
-        }
-        
-        // if we didn't find one, simply chop at startPos+width
+    // if no whitespace found, try to cut at exactly startPos + width
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+
+    if (pos < text.length() && (text.charAt(pos) == ' ' || text.charAt(pos) == '\n' || text.charAt(pos) == '\r'))
     {
-            ++pos;
+        return pos;
     }
-        return pos == text.length() ? -1 : pos;
+
+    // if still no match, return startPos + width because we are cutting the word
+    return startPos + width;
 }
\ No newline at end of file
