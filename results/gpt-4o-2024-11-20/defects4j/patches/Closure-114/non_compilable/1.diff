diff --git a/tmp/a41c87eb-e1a2-4e69-afb5-0017c133cca0_buggy.java b/tmp/3dd9f525-95dd-4067-810b-ea5126bb5a4e_fixed.java
index c51c8b1..26de657 100644
--- a/tmp/a41c87eb-e1a2-4e69-afb5-0017c133cca0_buggy.java
+++ b/tmp/3dd9f525-95dd-4067-810b-ea5126bb5a4e_fixed.java
@@ -1,31 +1,28 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope. The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
-          //
-          // TODO(user) revisit the dependency scope calculation
-          // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
+        } else if (NodeUtil.isAssignmentOp(parent) && NodeUtil.isCall(parent.getLastChild())) {
+          // Specifically handle cases where the assignment is within a call.
+          // Prevent associating the lhs of the assignment as its dependency scope.
+          recordDepScope(nameNode, ns);
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
