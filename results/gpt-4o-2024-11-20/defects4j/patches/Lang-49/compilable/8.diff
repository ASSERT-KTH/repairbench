diff --git a/tmp/645a4a5c-e484-4bdd-b2c0-7f06d80a1a42_buggy.java b/tmp/3a2ad623-14bd-4fb0-a0ec-c8b8c0d81b82_fixed.java
index 08e51e4..5c51674 100644
--- a/tmp/645a4a5c-e484-4bdd-b2c0-7f06d80a1a42_buggy.java
+++ b/tmp/3a2ad623-14bd-4fb0-a0ec-c8b8c0d81b82_fixed.java
@@ -1,16 +1,29 @@
     /**
      * <p>Reduce the fraction to the smallest values for the numerator and
      * denominator, returning the result.</p>
      * 
      * <p>For example, if this fraction represents 2/4, then the result
      * will be 1/2.</p>
      *
      * @return a new reduced fraction instance, or this if no simplification possible
      */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
+        if (numerator == 0) {
+            // If the numerator is 0, return Fraction.ZERO which is reduced form of 0
+            return Fraction.ZERO;
+        }
+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+        int newNumerator = numerator / gcd;
+        int newDenominator = denominator / gcd;
+
+        // Ensure denominator is always positive
+        if (newDenominator < 0) {
+            newNumerator = -newNumerator;
+            newDenominator = -newDenominator;
+        }
+
+        if (newNumerator == numerator && newDenominator == denominator) {
             return this;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+        return Fraction.getFraction(newNumerator, newDenominator);
     }
\ No newline at end of file
