diff --git a/tmp/37a8a645-852e-4a2c-a5c2-e629fd652cf3_buggy.java b/tmp/2554ef37-063c-49c6-a38d-4375d3094319_fixed.java
index 08e51e4..6f29e8a 100644
--- a/tmp/37a8a645-852e-4a2c-a5c2-e629fd652cf3_buggy.java
+++ b/tmp/2554ef37-063c-49c6-a38d-4375d3094319_fixed.java
@@ -1,16 +1,20 @@
-    /**
-     * <p>Reduce the fraction to the smallest values for the numerator and
-     * denominator, returning the result.</p>
-     * 
-     * <p>For example, if this fraction represents 2/4, then the result
-     * will be 1/2.</p>
-     *
-     * @return a new reduced fraction instance, or this if no simplification possible
-     */
     public Fraction reduce() {
-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
-        if (gcd == 1) {
-            return this;
+        if (numerator == 0) {
+            // If the numerator is 0, the fraction is 0 (0/anything = 0/1 when reduced)
+            return Fraction.ZERO;
         }
-        return Fraction.getFraction(numerator / gcd, denominator / gcd);
+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));
+        int reducedNumerator = numerator / gcd;
+        int reducedDenominator = denominator / gcd;
+
+        // Ensure the denominator is always positive
+        if (reducedDenominator < 0) {
+            reducedNumerator = -reducedNumerator;
+            reducedDenominator = -reducedDenominator;
+        }
+
+        if (reducedNumerator == numerator && reducedDenominator == denominator) {
+            return this; // Return the same instance if no reduction was needed
+        }
+        return Fraction.getFraction(reducedNumerator, reducedDenominator);
     }
\ No newline at end of file
