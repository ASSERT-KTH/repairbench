diff --git a/tmp/1e254b95-519a-480b-8b4d-499cea11f677_buggy.java b/tmp/3f573dab-6022-4211-b068-6454cc597432_fixed.java
index cd412d2..71ce06d 100644
--- a/tmp/1e254b95-519a-480b-8b4d-499cea11f677_buggy.java
+++ b/tmp/3f573dab-6022-4211-b068-6454cc597432_fixed.java
@@ -1,76 +1,72 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
+    /* Perform some cleanup and normalization based on ISO-8601 rules to handle
+     * different cases like missing seconds, milliseconds or timezone adjustments.
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
+    // Handle plain date (no time portion)
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
-        } else if (c == 'Z') {
+    } else if (c == 'Z') { // Case when 'Z' indicates a UTC timezone.
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+        // Handle case where milliseconds might be missing.
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
+        // Determine if the string includes a timezone indicator.
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') { // Timezone offset contains a colon e.g. "+01:00".
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                sb.delete(len - 3, len - 2); // Remove the colon.
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') { // Missing minutes in timezone offset.
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // Handle missing milliseconds or seconds.
+            int lastColon = dateStr.lastIndexOf(':');
+            int timeStart = dateStr.indexOf('T') + 1;
+            if (lastColon > timeStart + 2) { // Check if seconds are present.
+                if (dateStr.charAt(lastColon + 3) != '.') { // No milliseconds.
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    sb.insert(lastColon + 3, ".000");
+                    dateStr = sb.toString();
+                }
+            } else { // Seconds (and milliseconds) are missing.
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(lastColon + 3, ":00.000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+        } else { // No explicit timezone, append 'Z' for UTC.
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen <= 8) { // If milliseconds are missing.
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
