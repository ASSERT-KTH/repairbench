diff --git a/tmp/aad721fd-3b46-4d93-a70b-759202522b96_buggy.java b/tmp/1b517170-cd34-4636-9500-24f0050ec41d_fixed.java
index 10616db..1944093 100644
--- a/tmp/aad721fd-3b46-4d93-a70b-759202522b96_buggy.java
+++ b/tmp/1b517170-cd34-4636-9500-24f0050ec41d_fixed.java
@@ -1,19 +1,32 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
+
+        // Ensure proper handling of leap years and end-of-month adjustments
+        if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {
+            int year = iChronology.year().get(instant);
+            int month = iChronology.monthOfYear().get(instant);
+            int day = iChronology.dayOfMonth().get(instant);
+
+            // Handle overflow for end-of-month scenarios
+            if (day > iChronology.dayOfMonth().getMaximumValue(year, month)) {
+                day = iChronology.dayOfMonth().getMaximumValue(year, month);
+                instant = iChronology.dayOfMonth().set(instant, day);
+            }
+        }
         return iChronology.get(partial, instant);
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
