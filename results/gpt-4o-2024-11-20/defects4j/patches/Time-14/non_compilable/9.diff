diff --git a/tmp/f46bb133-e026-4cee-a79d-dfeacf318680_buggy.java b/tmp/153e7021-31e2-420f-8698-0721faa467df_fixed.java
index 10616db..313c6ff 100644
--- a/tmp/f46bb133-e026-4cee-a79d-dfeacf318680_buggy.java
+++ b/tmp/153e7021-31e2-420f-8698-0721faa467df_fixed.java
@@ -1,19 +1,30 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        
+        int[] result = iChronology.get(partial, instant);
+        
+        // Handle end-of-month adjustments, e.g., leap year February 29.
+        DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);
+        if (!field.isLenient()) {
+            int maxValueForMonth = field.getMaximumValue(instant);
+            if (result[fieldIndex] > maxValueForMonth) {
+                result[fieldIndex] = maxValueForMonth;
+            }
+        }
+        
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
