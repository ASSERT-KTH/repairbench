diff --git a/tmp/b1eab639-a6fc-4315-b66d-71f803838f20_buggy.java b/tmp/7f84d58b-cf8c-4260-b78a-c8239ef61b81_fixed.java
index 10616db..e4df216 100644
--- a/tmp/b1eab639-a6fc-4315-b66d-71f803838f20_buggy.java
+++ b/tmp/7f84d58b-cf8c-4260-b78a-c8239ef61b81_fixed.java
@@ -1,19 +1,30 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Adjust the day of month if it becomes invalid after adding/subtracting
+        int[] result = iChronology.get(partial, instant);
+        if (partial.getFieldType(fieldIndex).getRangeDurationType() == DurationFieldType.months()) {
+            DateTimeField dayField = partial.getFieldType(1).getField(iChronology); // dayOfMonth
+            int maxDay = dayField.getMaximumValue(instant);
+            if (result[1] > maxDay) { // If the day exceeds the maximum valid day
+                result[1] = maxDay;   // Adjust to the maximum valid day
+            }
+        }
+
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
