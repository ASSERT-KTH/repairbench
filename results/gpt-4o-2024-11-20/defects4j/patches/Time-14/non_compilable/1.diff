diff --git a/tmp/5f5f9b17-d645-4e5f-956a-4a7d2b7db0f9_buggy.java b/tmp/efdb452f-853e-4d88-b120-fd5c6687bf9e_fixed.java
index 10616db..11cd911 100644
--- a/tmp/5f5f9b17-d645-4e5f-956a-4a7d2b7db0f9_buggy.java
+++ b/tmp/efdb452f-853e-4d88-b120-fd5c6687bf9e_fixed.java
@@ -1,19 +1,31 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Adjust for cases where day-of-month may overflow (e.g., February 29 -> February 28 in non-leap years)
+        int[] result = iChronology.get(partial, instant);
+        for (int i = 0; i < partial.size(); i++) {
+            if (i == fieldIndex && partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {
+                // Check if day-of-month exceeds the maximum for the new month and year
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(iChronology.set(partial, result));
+                if (result[i] > maxDay) {
+                    result[i] = maxDay;
+                }
+            }
+        }
+        return result;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
