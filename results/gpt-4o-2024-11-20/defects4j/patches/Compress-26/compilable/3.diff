diff --git a/tmp/c5e3728c-0fe1-44c1-83da-ca1f3b7b154d_buggy.java b/tmp/983c60ab-a66c-4880-886e-0e7a4a4ff0a8_fixed.java
index 4b163f6..dcd9dbd 100644
--- a/tmp/c5e3728c-0fe1-44c1-83da-ca1f3b7b154d_buggy.java
+++ b/tmp/983c60ab-a66c-4880-886e-0e7a4a4ff0a8_fixed.java
@@ -1,28 +1,17 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long bytesSkipped = 0;
+        while (bytesSkipped < numToSkip) {
+            long skipped = input.skip(numToSkip - bytesSkipped);
             if (skipped == 0) {
+                // If skip returns 0, try reading a single byte and discard it.
+                if (input.read() == -1) {
+                    // End of stream reached
                     break;
+                } else {
+                    skipped = 1;
                 }
-            numToSkip -= skipped;
             }
-            
-        return available - numToSkip;
+            bytesSkipped += skipped;
+        }
+        return bytesSkipped;
     }
\ No newline at end of file
