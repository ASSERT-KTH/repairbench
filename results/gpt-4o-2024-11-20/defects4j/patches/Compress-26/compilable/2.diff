diff --git a/tmp/55b54717-40a1-4211-a462-14ef5c6f7704_buggy.java b/tmp/55a41a6b-aac7-4ce0-bceb-8eb833896c84_fixed.java
index 4b163f6..6fc8ba2 100644
--- a/tmp/55b54717-40a1-4211-a462-14ef5c6f7704_buggy.java
+++ b/tmp/55a41a6b-aac7-4ce0-bceb-8eb833896c84_fixed.java
@@ -1,28 +1,16 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
             if (skipped == 0) {
+                // Fallback to read() when skip returns 0
+                if (input.read() == -1) {
+                    // End of stream reached
                     break;
                 }
-            numToSkip -= skipped;
+                skipped = 1; // Successfully read one byte
             }
-            
-        return available - numToSkip;
+            remaining -= skipped;
+        }
+        return numToSkip - remaining; // Return the actual number of skipped bytes
     }
\ No newline at end of file
