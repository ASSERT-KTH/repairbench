diff --git a/tmp/fc0f54c9-a082-4493-bc01-e65cf3cbe11a_buggy.java b/tmp/e9fc4bcb-7522-4cbc-917e-38b2a01875f8_fixed.java
index cc69d41..3baa3f1 100644
--- a/tmp/fc0f54c9-a082-4493-bc01-e65cf3cbe11a_buggy.java
+++ b/tmp/e9fc4bcb-7522-4cbc-917e-38b2a01875f8_fixed.java
@@ -1,29 +1,41 @@
     /**
      * Create an Option using the current settings and with
      * the specified Option <code>char</code>.
      *
      * @param opt the <code>java.lang.String</code> representation
      * of the Option
      * @return the Option instance
      * @throws IllegalArgumentException if <code>opt</code> is not
      * a valid character.  See Option.
      */
     public static Option create(String opt) throws IllegalArgumentException
     {
+        if (opt == null || opt.trim().isEmpty()) {
+            throw new IllegalArgumentException("Invalid option character");
+        }
+
         // create the option
         Option option = new Option(opt, description);
 
         // set the option properties
         option.setLongOpt(longopt);
         option.setRequired(required);
         option.setOptionalArg(optionalArg);
         option.setArgs(numberOfArgs);
         option.setType(type);
         option.setValueSeparator(valuesep);
         option.setArgName(argName);
-            // reset the OptionBuilder properties
-            OptionBuilder.reset();
+
+        // reset the OptionBuilder properties to avoid property inheritance
+        OptionBuilder.description = null;
+        OptionBuilder.longopt = null;
+        OptionBuilder.required = false;
+        OptionBuilder.optionalArg = false;
+        OptionBuilder.numberOfArgs = -1;
+        OptionBuilder.type = null;
+        OptionBuilder.valuesep = '\0';
+        OptionBuilder.argName = null;
 
         // return the Option instance
         return option;
     }
\ No newline at end of file
