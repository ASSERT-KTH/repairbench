diff --git a/tmp/d0702123-aca9-4b58-8f9c-275647cd379b_buggy.java b/tmp/67117eff-e2c5-4dbe-8918-6c9c3ed10580_fixed.java
index cc69d41..be021b9 100644
--- a/tmp/d0702123-aca9-4b58-8f9c-275647cd379b_buggy.java
+++ b/tmp/67117eff-e2c5-4dbe-8918-6c9c3ed10580_fixed.java
@@ -1,29 +1,42 @@
     /**
      * Create an Option using the current settings and with
      * the specified Option <code>char</code>.
      *
      * @param opt the <code>java.lang.String</code> representation
      * of the Option
      * @return the Option instance
      * @throws IllegalArgumentException if <code>opt</code> is not
      * a valid character.  See Option.
      */
     public static Option create(String opt) throws IllegalArgumentException
     {
+        // Validate input
+        if (opt == null || opt.isEmpty()) {
+            throw new IllegalArgumentException("opt must not be null or empty");
+        }
+
         // create the option
         Option option = new Option(opt, description);
 
         // set the option properties
         option.setLongOpt(longopt);
         option.setRequired(required);
         option.setOptionalArg(optionalArg);
         option.setArgs(numberOfArgs);
         option.setType(type);
         option.setValueSeparator(valuesep);
         option.setArgName(argName);
+
         // reset the OptionBuilder properties
-            OptionBuilder.reset();
+        OptionBuilder.description = null;
+        OptionBuilder.longopt = null;
+        OptionBuilder.required = false;
+        OptionBuilder.optionalArg = false;
+        OptionBuilder.numberOfArgs = -1;
+        OptionBuilder.type = null;
+        OptionBuilder.valuesep = '\0';
+        OptionBuilder.argName = null;
 
         // return the Option instance
         return option;
     }
\ No newline at end of file
