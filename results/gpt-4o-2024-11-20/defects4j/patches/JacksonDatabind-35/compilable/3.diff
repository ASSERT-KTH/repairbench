diff --git a/tmp/8f76a13a-cc7a-472f-a89b-21d286a2a4d3_buggy.java b/tmp/fba4ca84-a7bc-4b24-b262-0e2c98fab02c_fixed.java
index 7d8d756..0f11f18 100644
--- a/tmp/8f76a13a-cc7a-472f-a89b-21d286a2a4d3_buggy.java
+++ b/tmp/fba4ca84-a7bc-4b24-b262-0e2c98fab02c_fixed.java
@@ -1,48 +1,80 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
+
+    // Handle unwrapping of type information
+    JsonToken t = p.getCurrentToken();
+
+    // If we start with FIELD_NAME, it might still be acceptable depending on structure
+    if (t == JsonToken.FIELD_NAME) {
+        // Verify that it's actually the type id field
+        if (_typePropertyName.equals(p.getCurrentName())) {
+            p.nextToken(); // move to the type id value
+            final String typeId = p.getText();
+            JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+            p.nextToken(); // move to the actual value to deserialize
+            return deser.deserialize(p, ctxt);
+        }
+        // Otherwise, it is an unexpected token for this context
+        throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+                "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
+    }
+
     // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+    if (t != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
-            // should always get field name, but just in case...
+
+    // Process START_OBJECT and expect FIELD_NAME for type id
     if (p.nextToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
     }
+
+    // Validate the type id field name
+    if (!_typePropertyName.equals(p.getCurrentName())) {
+        throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                "expected field named '" + _typePropertyName + "' that contains type id (for subtype of " + baseTypeName() + ")");
+    }
+
+    // Read the type id
+    p.nextToken(); // move to type id value
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+
+    // Move to the next token (expected to be START_OBJECT or actual value)
     p.nextToken();
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
     Object value = deser.deserialize(p, ctxt);
+
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
