diff --git a/tmp/4e5b26de-fbf5-4028-a6fd-5ca2b814c56a_buggy.java b/tmp/1a9e42a9-97fd-4938-a91f-40247c33b90e_fixed.java
index 7d8d756..025ab4d 100644
--- a/tmp/4e5b26de-fbf5-4028-a6fd-5ca2b814c56a_buggy.java
+++ b/tmp/1a9e42a9-97fd-4938-a91f-40247c33b90e_fixed.java
@@ -1,48 +1,74 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
         }
-            // should always get field name, but just in case...
+        
+        // Move to the next token to parse the type id property
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
         }
+        
+        final String typePropertyName = p.getCurrentName();
+        if (!_typePropertyName.equals(typePropertyName)) {
+            throw ctxt.mappingException("Expected type id property name '%s', but found '%s'", _typePropertyName, typePropertyName);
+        }
+
+        // Move to the type id value
+        if (p.nextToken() != JsonToken.VALUE_STRING) {
+            throw ctxt.wrongTokenException(p, JsonToken.VALUE_STRING,
+                    "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
+        }
+
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+
+        // Move to the next token to parse the actual object
+        if (p.nextToken() != JsonToken.FIELD_NAME) {
+            throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
+                    "need JSON String that contains the actual object for subtype of " + baseTypeName());
+        }
+
+        final String valuePropertyName = p.getCurrentName();
+        if (!_valuePropertyName.equals(valuePropertyName)) {
+            throw ctxt.mappingException("Expected value property name '%s', but found '%s'", _valuePropertyName, valuePropertyName);
+        }
+
+        // Move to the value of the object
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
