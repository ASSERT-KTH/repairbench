diff --git a/tmp/f1d08321-0249-4040-b13a-697f8a8e357e_buggy.java b/tmp/ef9a0e9b-85bb-4fe5-b81e-144d29953834_fixed.java
index e087f95..b3a9bb0 100644
--- a/tmp/f1d08321-0249-4040-b13a-697f8a8e357e_buggy.java
+++ b/tmp/ef9a0e9b-85bb-4fe5-b81e-144d29953834_fixed.java
@@ -1,53 +1,48 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Buffer too short, must be at least 2 bytes long.");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean hasTrailingChar = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+            // Check for trailing space or NUL
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                hasTrailingChar = true;
+
                 if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
+                    continue; // Skip leading spaces or NULs
                 }
+                break; // Stop parsing once we encounter trailing space or NUL
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            // Ensure all characters after the Numeric octal values are valid
+            if (stillPadding && currentByte == '0') {
+                continue; // Skip leading padding zeroes
+            }
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Validate that the input is a valid octal digit (0-7 only)
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            result = (result << 3) + (currentByte - '0'); // Convert to numeric octal representation
+        }
+
+        // If all NULs and no valid octal digits or no trailing space/NUL, throw exception
+        if (stillPadding || !hasTrailingChar) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, (byte) 0));
         }
 
         return result;
     }
\ No newline at end of file
