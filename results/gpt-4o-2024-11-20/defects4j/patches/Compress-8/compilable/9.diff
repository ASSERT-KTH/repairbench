diff --git a/tmp/db48a91f-d921-4d13-ab33-e627bb2f7ee0_buggy.java b/tmp/92356727-da48-409c-8ae2-d8a03f4fcdec_fixed.java
index e087f95..99ebfbb 100644
--- a/tmp/db48a91f-d921-4d13-ab33-e627bb2f7ee0_buggy.java
+++ b/tmp/92356727-da48-409c-8ae2-d8a03f4fcdec_fixed.java
@@ -1,53 +1,53 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes.");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        for (int i = offset; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+            // Check for trailing NUL or space
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                        throw new IllegalArgumentException("Invalid bytes found after trailing space or NUL.");
+                    }
+                }
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) {
+                    continue;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Validate octal range
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            // Convert ASCII octal to long
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // If the entire buffer is NUL or space, return 0
+        if (stillPadding) {
+            for (int i = offset; i < end; i++) {
+                if (buffer[i] != 0 && buffer[i] != (byte) ' ') {
+                    throw new IllegalArgumentException("Buffer is not all NULs or spaces.");
+                }
+            }
+            return 0L;
         }
 
         return result;
     }
\ No newline at end of file
