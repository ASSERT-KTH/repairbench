diff --git a/tmp/00e873dc-e90f-4a43-9861-d15183dfab10_buggy.java b/tmp/c4ba7202-a38e-47bc-bdb6-254401eb5028_fixed.java
index e087f95..b033fb0 100644
--- a/tmp/00e873dc-e90f-4a43-9861-d15183dfab10_buggy.java
+++ b/tmp/c4ba7202-a38e-47bc-bdb6-254401eb5028_fixed.java
@@ -1,53 +1,55 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (buffer == null || length < 2) {
+        throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+    }
+
+    int end = offset + length;
+    if (end > buffer.length) {
+        throw new IllegalArgumentException("Length exceeds buffer size");
+    }
+
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+    boolean hasTrailer = false;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        // Trailing space or NUL
+        if (currentByte == (byte) ' ' || currentByte == 0) {
+            hasTrailer = true;
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces or zeros
         if (stillPadding) {
+            if (currentByte == (byte) ' ' || currentByte == '0') {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        }
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+
+        result = (result << 3) + (currentByte - '0'); // Convert from ASCII
+    }
+
+    // Ensure trailing space or NUL exists
+    if (!hasTrailer) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+
+    // Ensure valid octal number or valid padding-only case
+    if (stillPadding && result == 0) {
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                throw new IllegalArgumentException("Invalid buffer, expected all NULs");
+            }
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
