diff --git a/tmp/79aa4bfb-b08f-4cd0-b42b-ee283d9e10be_buggy.java b/tmp/a1166c57-5686-4050-b264-bd604c5ee575_fixed.java
index e087f95..54b0108 100644
--- a/tmp/79aa4bfb-b08f-4cd0-b42b-ee283d9e10be_buggy.java
+++ b/tmp/a1166c57-5686-4050-b264-bd604c5ee575_fixed.java
@@ -1,53 +1,56 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (buffer == null || length < 2) {
+        throw new IllegalArgumentException("Buffer must be at least 2 bytes long.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    boolean hasValidTrailer = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
+        // Check for trailing space or NUL to validate the trailer
+        if (i == end - 1 && (currentByte == (byte) ' ' || currentByte == 0)) {
+            hasValidTrailer = true;
+            continue;
+        }
+
+        // Stop processing at the first completely NULL buffer
         if (currentByte == 0) {
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        // Skip leading padding (spaces or zeros)
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // Stop if an embedded space or NUL is found, which is invalid
+        if (currentByte == (byte) ' ' || currentByte == 0) {
+            throw new IllegalArgumentException(
+                    "Invalid octal number - embedded space or NUL.");
+        }
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check if byte is invalid (not an octal character)
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        // Calculate the result
+        result = (result << 3) + (currentByte - '0'); // Convert from ASCII
+    }
+
+    // Validate that there was a proper trailer
+    if (!hasValidTrailer) {
+        throw new IllegalArgumentException("Invalid octal number - no valid trailer.");
     }
 
     return result;
 }
\ No newline at end of file
