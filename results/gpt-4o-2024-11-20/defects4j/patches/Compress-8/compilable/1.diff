diff --git a/tmp/dfb71452-1a37-4934-9474-227d949efee6_buggy.java b/tmp/d375daea-72ae-4741-973b-3f4dfc4102ce_fixed.java
index e087f95..d62409f 100644
--- a/tmp/dfb71452-1a37-4934-9474-227d949efee6_buggy.java
+++ b/tmp/d375daea-72ae-4741-973b-3f4dfc4102ce_fixed.java
@@ -1,53 +1,54 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes long");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
+        boolean hasTrailingSpaceOrNul = false;
+
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                hasTrailingSpaceOrNul = true;
+                break; // Stop at trailing NUL or space
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) {
+                    continue;
+                } else {
+                    throw new IllegalArgumentException(
+                            "Invalid space within the octal number");
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+            if (stillPadding && currentByte == '0') { // Skip leading zero padding
+                continue;
+            }
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Check invalid characters
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            result = (result << 3) + (currentByte - '0'); // Convert from ASCII
+        }
+
+        if (stillPadding) { // All characters were padding
+            return 0L;
+        }
+
+        if (!hasTrailingSpaceOrNul) {
+            throw new IllegalArgumentException("Missing trailing space or NUL");
         }
 
         return result;
     }
\ No newline at end of file
