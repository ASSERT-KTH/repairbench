diff --git a/tmp/1330ab25-1548-4b5b-8df6-69201d51e8c9_buggy.java b/tmp/ed66e11f-2aa9-4712-8f60-175442dff6a5_fixed.java
index e087f95..bbbd957 100644
--- a/tmp/1330ab25-1548-4b5b-8df6-69201d51e8c9_buggy.java
+++ b/tmp/ed66e11f-2aa9-4712-8f60-175442dff6a5_fixed.java
@@ -1,53 +1,48 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (buffer == null || length < 2) {
+        throw new IllegalArgumentException("Buffer must be at least 2 bytes long");
+    }
+
     long result = 0;
     boolean stillPadding = true;
+    boolean hasValidEnding = false;
     int end = offset + length;
     int start = offset;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            hasValidEnding = true;
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        // Skip leading padding
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
+        // If padding ends, but an invalid char is found, throw an exception
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0'); // Convert from ASCII
+    }
+
+    if (!hasValidEnding) {
+        throw new IllegalArgumentException("No valid trailing NUL or space found");
+    }
+
+    // Ensure buffer contains only NULs if result is 0
+    if (result == 0) {
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                throw new IllegalArgumentException("Buffer must contain all NULs if result is 0");
+            }
+        }
     }
 
     return result;
 }
\ No newline at end of file
