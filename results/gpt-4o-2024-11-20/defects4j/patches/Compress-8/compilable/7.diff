diff --git a/tmp/d4cf816b-6196-466c-afa4-f63e9807e75e_buggy.java b/tmp/b8d588a5-f933-4590-97b7-af6c946006a0_fixed.java
index e087f95..981d581 100644
--- a/tmp/d4cf816b-6196-466c-afa4-f63e9807e75e_buggy.java
+++ b/tmp/b8d588a5-f933-4590-97b7-af6c946006a0_fixed.java
@@ -1,53 +1,49 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Input buffer must be at least 2 bytes long.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
+    boolean foundTrailer = false;
+
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailer = true;
+
+            // Check if trailing space or NUL is followed only by space or NUL
+            for (int j = i + 1; j < end; j++) {
+                if (buffer[j] != 0 && buffer[j] != (byte) ' ') {
+                    throw new IllegalArgumentException("Invalid trailing characters after space or NUL.");
+                }
+            }
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && currentByte == (byte) ' ') {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check if the character is valid octal
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, start, currentByte)
+            );
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0'); // Convert from ASCII to number
+    }
+
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Input buffer missing required trailing space or NUL.");
     }
 
     return result;
 }
\ No newline at end of file
