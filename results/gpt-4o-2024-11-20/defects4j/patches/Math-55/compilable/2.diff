diff --git a/tmp/711dcc15-ba01-4e32-a64b-3bc06bd35dcb_buggy.java b/tmp/bb1cc95d-03c2-4071-9371-d6e6dce1b308_fixed.java
index 1478ee1..17ec534 100644
--- a/tmp/711dcc15-ba01-4e32-a64b-3bc06bd35dcb_buggy.java
+++ b/tmp/bb1cc95d-03c2-4071-9371-d6e6dce1b308_fixed.java
@@ -1,24 +1,29 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute scaling factors
+      double norm1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
+      double norm2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+      double scale = Math.max(norm1, norm2);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Rescale the vectors to reduce numerical precision issues
+      double scaledX1 = v1.x / scale;
+      double scaledY1 = v1.y / scale;
+      double scaledZ1 = v1.z / scale;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      double scaledX2 = v2.x / scale;
+      double scaledY2 = v2.y / scale;
+      double scaledZ2 = v2.z / scale;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product with rescaled components
+      double resultX = scaledY1 * scaledZ2 - scaledZ1 * scaledY2;
+      double resultY = scaledZ1 * scaledX2 - scaledX1 * scaledZ2;
+      double resultZ = scaledX1 * scaledY2 - scaledY1 * scaledX2;
 
+      // Scale the result back to the original magnitude
+      return new Vector3D(resultX * scale * scale, resultY * scale * scale, resultZ * scale * scale);
   }
\ No newline at end of file
