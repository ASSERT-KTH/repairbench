diff --git a/tmp/143b398e-2ecc-4885-99c5-5d4801ce42c3_buggy.java b/tmp/8a0a24a1-a777-4aa2-81da-ea616d80ec0d_fixed.java
index 1478ee1..4622498 100644
--- a/tmp/143b398e-2ecc-4885-99c5-5d4801ce42c3_buggy.java
+++ b/tmp/8a0a24a1-a777-4aa2-81da-ea616d80ec0d_fixed.java
@@ -1,24 +1,24 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Improve precision by preconditioning the vectors to minimize cancellation errors
+      double v1Norm = v1.getNorm();
+      double v2Norm = v2.getNorm();
+      double scale  = Math.sqrt(v1Norm * v2Norm);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+      // Scale the vectors
+      Vector3D scaledV1 = new Vector3D(1.0 / scale, v1);
+      Vector3D scaledV2 = new Vector3D(1.0 / scale, v2);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product between the scaled vectors
+      double x = scaledV1.getY() * scaledV2.getZ() - scaledV1.getZ() * scaledV2.getY();
+      double y = scaledV1.getZ() * scaledV2.getX() - scaledV1.getX() * scaledV2.getZ();
+      double z = scaledV1.getX() * scaledV2.getY() - scaledV1.getY() * scaledV2.getX();
 
+      // Scale back the result to maintain the proper magnitude
+      return new Vector3D(scale * scale, new Vector3D(x, y, z));
   }
\ No newline at end of file
