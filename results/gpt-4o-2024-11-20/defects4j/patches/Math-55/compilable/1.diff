diff --git a/tmp/481e4da7-d801-4cf1-b7d1-6c8b7b9935b7_buggy.java b/tmp/7d2a6707-e67b-48dc-a575-a7043b6c808a_fixed.java
index 1478ee1..a43e02f 100644
--- a/tmp/481e4da7-d801-4cf1-b7d1-6c8b7b9935b7_buggy.java
+++ b/tmp/7d2a6707-e67b-48dc-a575-a7043b6c808a_fixed.java
@@ -1,24 +1,25 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
+      double normV1 = Math.sqrt(v1.x * v1.x + v1.y * v1.y + v1.z * v1.z);
+      double normV2 = Math.sqrt(v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+      double scale = Math.max(normV1, normV2);
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      Vector3D scaledV1 = new Vector3D(v1.x / scale, v1.y / scale, v1.z / scale);
+      Vector3D scaledV2 = new Vector3D(v2.x / scale, v2.y / scale, v2.z / scale);
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // compute cross product from scaled vectors to reduce precision issues
+      double x = scaledV1.y * scaledV2.z - scaledV1.z * scaledV2.y;
+      double y = scaledV1.z * scaledV2.x - scaledV1.x * scaledV2.z;
+      double z = scaledV1.x * scaledV2.y - scaledV1.y * scaledV2.x;
 
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // rescale back the result to original magnitude
+      return new Vector3D(x * scale * scale, y * scale * scale, z * scale * scale);
 
   }
\ No newline at end of file
