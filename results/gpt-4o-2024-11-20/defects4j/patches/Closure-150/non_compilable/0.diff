diff --git a/tmp/ad188076-ab26-41d2-b820-993b2748e76b_buggy.java b/tmp/8878be8b-a268-4a89-bd80-52c2eb6898dc_fixed.java
index 800e6e1..fbdb487 100644
--- a/tmp/ad188076-ab26-41d2-b820-993b2748e76b_buggy.java
+++ b/tmp/8878be8b-a268-4a89-bd80-52c2eb6898dc_fixed.java
@@ -1,32 +1,53 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          maybeDefineStubFunction(n);
+          break;
+      }
+    }
+
+    /**
+     * Handles the case where a stub function is being defined, e.g., 
+     * /** @param {number} x * / obj.foo;.
+     */
+    private void maybeDefineStubFunction(Node n) {
+      Node expr = n.getFirstChild();
+      if (expr != null && expr.isGetProp() && expr.getJSDocInfo() != null) {
+        defineStubFunction(expr);
+      }
+    }
+
+    private void defineStubFunction(Node getPropNode) {
+      String name = getPropNode.getQualifiedName();
+      if (name != null) {
+        scope.declare(name, getPropNode, getPropNode.getJSDocInfo().getType(), /* inferred= */ false);
       }
     }
\ No newline at end of file
