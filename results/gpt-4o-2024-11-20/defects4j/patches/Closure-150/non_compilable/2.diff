diff --git a/tmp/65db0036-c6a1-48b9-841b-a792e67eb273_buggy.java b/tmp/c7da237d-2dfd-4b54-920b-33f83d55d48c_fixed.java
index 800e6e1..edf9d20 100644
--- a/tmp/65db0036-c6a1-48b9-841b-a792e67eb273_buggy.java
+++ b/tmp/c7da237d-2dfd-4b54-920b-33f83d55d48c_fixed.java
@@ -1,32 +1,51 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          defineTypeDeclarationsInExpressions(n);
+          break;
+      }
+    }
+
+    /**
+     * Handles type declarations made in standalone expressions.
+     * For example: 
+     * /** @param {number} x * / goog.foo;
+     *
+     * @param n The node being visited.
+     */
+    private void defineTypeDeclarationsInExpressions(Node n) {
+      if (n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
+        JSDocInfo jsDoc = n.getJSDocInfo();
+        if (jsDoc != null && jsDoc.containsType()) {
+          defineSlot(n.getFirstChild(), jsDoc);
+        }
       }
     }
\ No newline at end of file
