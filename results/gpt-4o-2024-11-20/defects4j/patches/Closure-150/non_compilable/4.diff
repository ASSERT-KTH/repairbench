diff --git a/tmp/ea936d07-a844-44d9-b3e6-fc02f9e77e29_buggy.java b/tmp/6881b117-c20a-423a-9f2f-b98bda043d91_fixed.java
index 800e6e1..af0ca88 100644
--- a/tmp/ea936d07-a844-44d9-b3e6-fc02f9e77e29_buggy.java
+++ b/tmp/6881b117-c20a-423a-9f2f-b98bda043d91_fixed.java
@@ -1,32 +1,55 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.EXPR_RESULT:
+          // Handle stubs for namespaces or collected function stubs.
+          defineNamespaceOrCollectedFunctionStub(n);
+          break;
+      }
+    }
+
+    /**
+     * Defines a namespace or collected function stub from an EXPR_RESULT node.
+     *
+     * @param n The EXPR_RESULT node
+     */
+    private void defineNamespaceOrCollectedFunctionStub(Node n) {
+      Node expr = n.getFirstChild();
+      if (expr != null && expr.isGetProp() && expr.getParent().isExprResult()) {
+        JSType type = expr.getJSType();
+        if (type != null && type.isFunctionType()) {
+          String propName = expr.getLastChild().getString();
+          ObjectType objType = ObjectType.cast(expr.getFirstChild().getJSType());
+          if (objType != null && objType.hasOwnProperty(propName)) {
+            objType.defineProperty(propName, type, expr);
+          }
+        }
       }
     }
\ No newline at end of file
