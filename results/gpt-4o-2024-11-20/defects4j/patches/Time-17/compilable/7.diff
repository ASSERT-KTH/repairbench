diff --git a/tmp/20239a3b-ebf7-4186-88f1-9dacd337ba62_buggy.java b/tmp/d0957730-b863-4998-af7a-b68e30536c67_fixed.java
index 03b03d7..040a00d 100644
--- a/tmp/20239a3b-ebf7-4186-88f1-9dacd337ba62_buggy.java
+++ b/tmp/d0957730-b863-4998-af7a-b68e30536c67_fixed.java
@@ -1,25 +1,36 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+        // Check for overlap situation by evaluating local time before and after a given range
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+            return instant;  // not an overlap (case of a gap or normal offset)
         }
 
-        // work out range of instants that have duplicate local times
+        // Determine the local time for the given instant
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Convert back to UTC, resolving the overlap based on the flag earlierOrLater
+        long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+        long laterInstant = convertLocalToUTC(local, false, instantAfter);
+        
+        // Return the appropriate instant depending on earlierOrLater flag
+        if (earlierOrLater) {
+            // Later offset
+            if (instant == earlierInstant) {
+                return laterInstant;
+            }
+        } else {
+            // Earlier offset
+            if (instant == laterInstant) {
+                return earlierInstant;
+            }
+        }
+        return instant;
     }
\ No newline at end of file
