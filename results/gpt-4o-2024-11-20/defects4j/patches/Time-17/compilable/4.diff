diff --git a/tmp/0c64f49e-6ba2-48c5-8397-02c5beedfcec_buggy.java b/tmp/0c705550-c51c-4740-ad84-3b6057c76813_fixed.java
index 03b03d7..a0b1367 100644
--- a/tmp/0c64f49e-6ba2-48c5-8397-02c5beedfcec_buggy.java
+++ b/tmp/0c705550-c51c-4740-ad84-3b6057c76813_fixed.java
@@ -1,25 +1,31 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+        // Evaluate 3 hours before and after to detect offset transitions
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+            return instant;  // No overlap (normal case or gaps)
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // Convert provided instant to its local time
+        long localInstant = convertUTCToLocal(instant);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Determine the two possible UTC instants for the given local time
+        long earlierInstant = convertLocalToUTC(localInstant, false, instantBefore);
+        long laterInstant = convertLocalToUTC(localInstant, false, instantAfter);
+
+        // Return based on the earlierOrLater flag
+        if (earlierOrLater) {
+            // Choose the later instant
+            return (laterInstant > instant) ? laterInstant : earlierInstant;
+        } else {
+            // Choose the earlier instant
+            return (earlierInstant < instant) ? earlierInstant : laterInstant;
+        }
     }
\ No newline at end of file
