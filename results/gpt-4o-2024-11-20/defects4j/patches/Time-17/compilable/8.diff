diff --git a/tmp/abc13be7-b7ee-4af5-9528-feb84df6d81d_buggy.java b/tmp/81c01a4c-4c9e-4df0-ae58-d7a923223b71_fixed.java
index 03b03d7..3428f95 100644
--- a/tmp/abc13be7-b7ee-4af5-9528-feb84df6d81d_buggy.java
+++ b/tmp/81c01a4c-4c9e-4df0-ae58-d7a923223b71_fixed.java
@@ -1,25 +1,31 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long adjustedInstant = convertLocalToUTC(local, false, instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        if (adjustedInstant == instant) {
+            // If we are already at one of the offsets, we need to move to the other
+            adjustedInstant = convertLocalToUTC(local, false, instantAfter);
+        }
+
+        // Choose the appropriate offset based on the earlierOrLater flag
+        if (earlierOrLater) {
+            return Math.max(adjustedInstant, instant);
+        } else {
+            return Math.min(adjustedInstant, instant);
+        }
     }
\ No newline at end of file
