diff --git a/tmp/5d172161-c03f-4e13-8698-226ce7bfc269_buggy.java b/tmp/58eb1c9b-b7f2-49c2-8076-f75970bebc61_fixed.java
index 03b03d7..b213c42 100644
--- a/tmp/5d172161-c03f-4e13-8698-226ce7bfc269_buggy.java
+++ b/tmp/58eb1c9b-b7f2-49c2-8076-f75970bebc61_fixed.java
@@ -1,25 +1,39 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        // evaluate instant before and after the overlap to determine transition points
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        
+        long offsetBefore = getOffset(instantBefore);
+        long offsetAfter = getOffset(instantAfter);
+        
+        // if there's no offset difference, it's not an overlap
+        if (offsetBefore == offsetAfter) {
+            return instant;
         }
 
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        // work out the local time
+        long local = instant + offsetBefore;
+
+        // determine which offset to apply
+        long adjustedOffset = earlierOrLater ? offsetAfter : offsetBefore;
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // calculate and return the adjusted instant
+        long adjustedInstant = local - adjustedOffset;
+
+        // if the result is still within the overlap range, return it
+        if (getOffset(adjustedInstant) == adjustedOffset) {
+            return adjustedInstant;
+        } else {
+            // otherwise, return the original instant as a fallback
+            return instant;
+        }
     }
\ No newline at end of file
