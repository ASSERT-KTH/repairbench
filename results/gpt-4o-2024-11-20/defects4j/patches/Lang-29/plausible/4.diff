diff --git a/tmp/7866df68-0729-4612-a00f-0a4ad17dc5c7_buggy.java b/tmp/0aba1bc3-7893-4d1f-8ebb-94ffbb7f1125_fixed.java
index 3ec995f..9f7c205 100644
--- a/tmp/7866df68-0729-4612-a00f-0a4ad17dc5c7_buggy.java
+++ b/tmp/0aba1bc3-7893-4d1f-8ebb-94ffbb7f1125_fixed.java
@@ -1,26 +1,11 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    version = version.replaceAll("[^0-9.]", ""); // Strip all non-numeric and non-dot characters
+    String[] parts = version.split("\\.");
+    int major = (parts.length > 0 && !parts[0].isEmpty()) ? Integer.parseInt(parts[0]) : 0;
+    int minor = (parts.length > 1 && !parts[1].isEmpty()) ? Integer.parseInt(parts[1]) : 0;
+    int patch = (parts.length > 2 && !parts[2].isEmpty()) ? Integer.parseInt(parts[2]) : 0;
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
