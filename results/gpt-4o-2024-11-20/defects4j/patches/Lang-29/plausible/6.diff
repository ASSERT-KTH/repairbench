diff --git a/tmp/e01bcb29-19c3-4bef-8db8-351e1bfb2178_buggy.java b/tmp/026ec16a-1764-488e-9fb9-8537c475f414_fixed.java
index 3ec995f..013e67b 100644
--- a/tmp/e01bcb29-19c3-4bef-8db8-351e1bfb2178_buggy.java
+++ b/tmp/026ec16a-1764-488e-9fb9-8537c475f414_fixed.java
@@ -1,26 +1,20 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    version = version.replaceAll("[^0-9.]", ""); // Remove non-numeric and non-dot characters
+    String[] parts = version.split("\\.");
+    int major = parts.length > 0 ? parseInt(parts[0]) : 0;
+    int minor = parts.length > 1 ? parseInt(parts[1]) : 0;
+    int patch = parts.length > 2 ? parseInt(parts[2]) : 0;
+
+    return major * 100 + minor * 10 + patch;
+}
+
+private static int parseInt(String value) {
+    try {
+        return Integer.parseInt(value);
+    } catch (NumberFormatException e) {
+        return 0; // Default to 0 if parsing fails
+    }
 }
\ No newline at end of file
