diff --git a/tmp/5dff3d00-fd73-4c3a-b961-102b2506692c_buggy.java b/tmp/76be8b73-1054-4f11-b860-86b7b7ba47bd_fixed.java
index 3ec995f..4fc7f27 100644
--- a/tmp/5dff3d00-fd73-4c3a-b961-102b2506692c_buggy.java
+++ b/tmp/76be8b73-1054-4f11-b860-86b7b7ba47bd_fixed.java
@@ -1,26 +1,27 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    
+    version = version.replaceAll("[^0-9\\.]", ""); // Remove non-numeric and non-dot characters.
+
+    String[] parts = version.split("\\.");
+    int major = 0, minor = 0, patch = 0;
+
+    try {
+        if (parts.length > 0) {
+            major = Integer.parseInt(parts[0]);
+        }
+        if (parts.length > 1) {
+            minor = Integer.parseInt(parts[1]);
+        }
+        if (parts.length > 2) {
+            patch = Integer.parseInt(parts[2]);
+        }
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+
+    // Convert the version components into a single integer representation.
+    return (major * 100) + (minor * 10) + patch;
 }
\ No newline at end of file
