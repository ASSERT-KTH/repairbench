diff --git a/tmp/dd572725-fc00-4bfc-9382-94377fa6592b_buggy.java b/tmp/9c83b526-5f00-4ef0-8f37-16b9ce56958e_fixed.java
index 3ec995f..4bf9dae 100644
--- a/tmp/dd572725-fc00-4bfc-9382-94377fa6592b_buggy.java
+++ b/tmp/9c83b526-5f00-4ef0-8f37-16b9ce56958e_fixed.java
@@ -1,26 +1,18 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.trim().isEmpty()) {
+            return 0;
+        }
+        version = version.replaceAll("[^0-9.]", ""); // Remove non-numeric and non-dot characters
+        String[] parts = version.split("\\.");
+        if (parts.length < 2) {
+            return 0; // Invalid version format
+        }
+        try {
+            int major = Integer.parseInt(parts[0]);
+            int minor = Integer.parseInt(parts[1]);
+            int patch = (parts.length > 2) ? Integer.parseInt(parts[2]) : 0;
+            return major * 100 + minor * 10 + patch;
+        } catch (NumberFormatException ex) {
+            return 0; // Handle invalid number formats gracefully
+        }
     }
\ No newline at end of file
