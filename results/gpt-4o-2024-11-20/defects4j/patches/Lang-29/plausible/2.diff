diff --git a/tmp/57ccd9dc-40c2-4872-8996-436065989004_buggy.java b/tmp/e755b2fd-bcf7-459e-b9a0-a47ad2b25095_fixed.java
index 3ec995f..21d081d 100644
--- a/tmp/57ccd9dc-40c2-4872-8996-436065989004_buggy.java
+++ b/tmp/e755b2fd-bcf7-459e-b9a0-a47ad2b25095_fixed.java
@@ -1,26 +1,21 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+
+    version = version.replaceAll("[^\\d\\.]", "");  // Remove non-numeric and non-dot characters
+    String[] parts = version.split("\\.");
+    int major = parts.length > 0 ? parseInt(parts[0], 0) : 0;
+    int minor = parts.length > 1 ? parseInt(parts[1], 0) : 0;
+    int patch = parts.length > 2 ? parseInt(parts[2].replaceAll("[^\\d]", ""), 0) : 0;
+
+    return major * 100 + minor * 10 + patch;
+}
+
+private static int parseInt(String value, int defaultValue) {
+    try {
+        return Integer.parseInt(value);
+    } catch (NumberFormatException e) {
+        return defaultValue;
+    }
 }
\ No newline at end of file
