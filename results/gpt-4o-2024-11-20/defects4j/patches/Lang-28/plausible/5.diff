diff --git a/tmp/d005d80c-69e7-46e4-be1c-1c60392c76d1_buggy.java b/tmp/fb3e5337-600e-4050-8a6d-ddb918e916c0_fixed.java
index 4bbd561..4b4aa8f 100644
--- a/tmp/d005d80c-69e7-46e4-be1c-1c60392c76d1_buggy.java
+++ b/tmp/fb3e5337-600e-4050-8a6d-ddb918e916c0_fixed.java
@@ -1,37 +1,56 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Ensure that we do not go out of bounds
+        if (index < 0 || index >= input.length() || input.charAt(index) != '&' || (index + 1) >= input.length() || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        // Check if the character is 'x' or 'X' to determine if it's a hexadecimal entity
+        if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Finding the end of the numeric entity (searching for ';')
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If the end of the entity is not found, return 0
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
+            // Parse the numeric entity value (hex or decimal)
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write the character(s) represented by the entity value
+        if (Character.isValidCodePoint(entityValue)) {
+            if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                out.write(Character.toChars(entityValue));
+            } else {
                 out.write(entityValue);
+            }
+        } else {
+            return 0;
+        }
+
+        // Return the number of consumed characters: 2 (&#) + length of the entity + 1 (;)
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
