diff --git a/tmp/ba5b8879-2423-4589-ab04-008916b31a9b_buggy.java b/tmp/3ee5c833-ae41-4738-93ef-cbe9ee50997e_fixed.java
index 4bbd561..69976e2 100644
--- a/tmp/ba5b8879-2423-4589-ab04-008916b31a9b_buggy.java
+++ b/tmp/3ee5c833-ae41-4738-93ef-cbe9ee50997e_fixed.java
@@ -1,37 +1,52 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Prevent ArrayIndexOutOfBoundsException
+        if (index < 0 || index >= input.length() - 1) {
+            return 0;
+        }
+
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            // Check if the next character indicates hexadecimal
+            if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we reached the end of input without finding ';', return 0
+            if (end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Write the entityValue properly handling supplementary characters
+            if (Character.isValidCodePoint(entityValue)) {
+                out.write(Character.toChars(entityValue));
+            } else {
+                return 0;
+            }
+
+            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // `2` is for `&#`, and `+1` for `;`
         }
         return 0;
     }
\ No newline at end of file
