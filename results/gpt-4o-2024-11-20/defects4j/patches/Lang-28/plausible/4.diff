diff --git a/tmp/f471a5af-d4c3-47de-9674-748cebb6c943_buggy.java b/tmp/5bb0ea53-761a-47fc-9750-76aa70d713ee_fixed.java
index 4bbd561..1983f51 100644
--- a/tmp/f471a5af-d4c3-47de-9674-748cebb6c943_buggy.java
+++ b/tmp/5bb0ea53-761a-47fc-9750-76aa70d713ee_fixed.java
@@ -1,37 +1,54 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < input.length() - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if the next character indicates hex encoding
+            if (start < input.length()) {
                 char firstChar = input.charAt(start);
                 if (firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
+            }
 
+            // Find the endpoint for the numeric entity
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we didn't find a semicolon, it's not a valid entity
+            if (end == input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
+                // Parse the numeric value, either in hex or decimal
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Write the character(s) corresponding to the entity value
+            if (Character.isSupplementaryCodePoint(entityValue)) {
+                out.write(Character.toChars(entityValue));
+            } else {
                 out.write(entityValue);
+            }
+
+            // Return the length of the consumed input
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
