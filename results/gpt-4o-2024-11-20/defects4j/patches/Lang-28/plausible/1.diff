diff --git a/tmp/bebcc845-bc39-43b9-9ccd-c7408ff213db_buggy.java b/tmp/cc14915f-5171-4552-be42-bdc7c0b78921_fixed.java
index 4bbd561..57881d2 100644
--- a/tmp/bebcc845-bc39-43b9-9ccd-c7408ff213db_buggy.java
+++ b/tmp/cc14915f-5171-4552-be42-bdc7c0b78921_fixed.java
@@ -1,37 +1,64 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Ensure we don't go out of bounds
+        if (index < 0 || index >= input.length() - 1) {
+            return 0;
+        }
+
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Verify we don't go out of bounds
+            if (start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Loop to find the ending semicolon, safely checking bounds
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If no semicolon is found, return 0
+            if (end == input.length()) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Write the character or surrogate pair to the output
+            if (Character.isValidCodePoint(entityValue)) {
+                if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                    char[] surrogatePair = Character.toChars(entityValue);
+                    out.write(surrogatePair[0]);
+                    out.write(surrogatePair[1]);
+                    return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                } else {
                     out.write(entityValue);
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
                 }
+            } else {
+                return 0;
+            }
+        }
         return 0;
     }
\ No newline at end of file
