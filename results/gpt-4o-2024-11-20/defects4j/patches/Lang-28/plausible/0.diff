diff --git a/tmp/3f5d3a1c-92ed-4239-9034-b8747ae359a1_buggy.java b/tmp/6eb36226-073e-40e0-aec1-35542d5a24b2_fixed.java
index 4bbd561..74e819c 100644
--- a/tmp/3f5d3a1c-92ed-4239-9034-b8747ae359a1_buggy.java
+++ b/tmp/6eb36226-073e-40e0-aec1-35542d5a24b2_fixed.java
@@ -1,37 +1,61 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if (index < 0 || index >= input.length() - 2) {
+        return 0;
+    }
+
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // Validate that ';' was found
+        if (end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
+            String numberString = input.subSequence(start, end).toString();
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(numberString, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(numberString, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Handle supplementary characters
+        if (Character.isValidCodePoint(entityValue)) {
+            if (entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {
+                out.write(Character.toChars(entityValue));
+            } else {
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            }
+        } else {
+            return 0;
+        }
+
+        return 2 + (end - start) + (isHex ? 1 : 0) + 1; // "&" + "#" + (digits) + ";" (+ "x" if isHex)
     }
     return 0;
 }
\ No newline at end of file
