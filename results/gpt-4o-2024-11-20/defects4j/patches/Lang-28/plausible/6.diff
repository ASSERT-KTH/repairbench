diff --git a/tmp/d0dbdffc-e3b8-4545-8cdc-5c1fa4a45cd3_buggy.java b/tmp/7b37a263-6553-4afc-8f22-f220f2954e46_fixed.java
index 4bbd561..a4d79d4 100644
--- a/tmp/d0dbdffc-e3b8-4545-8cdc-5c1fa4a45cd3_buggy.java
+++ b/tmp/7b37a263-6553-4afc-8f22-f220f2954e46_fixed.java
@@ -1,37 +1,57 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        // Protect from ArrayIndexOutOfBounds
+        if (index < 0 || index >= input.length()) {
+            return 0;
+        }
+        if (input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            // Check hex format
+            if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            // Validate sequence and prevent ArrayIndexOutOfBounds
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
             
+            // Ensure the sequence is valid when no semicolon is found
+            if (end == input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
+            // Handle supplementary characters (code points > 0xFFFF)
+            if (Character.isValidCodePoint(entityValue)) {
+                if (entityValue > Character.MAX_VALUE) {
+                    char[] surrogatePair = Character.toChars(entityValue);
+                    out.write(surrogatePair);
+                    return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                } else {
                     out.write(entityValue);
                     return 2 + (end - start) + (isHex ? 1 : 0) + 1;
                 }
+            }
+            
+            return 0;
+        }
         return 0;
     }
\ No newline at end of file
