diff --git a/tmp/85c1736b-9182-4bc7-8bca-264c861bf87b_buggy.java b/tmp/3bcef4e4-30b0-46dc-a214-d410718ba43c_fixed.java
index 4bbd561..39f09b2 100644
--- a/tmp/85c1736b-9182-4bc7-8bca-264c861bf87b_buggy.java
+++ b/tmp/3bcef4e4-30b0-46dc-a214-d410718ba43c_fixed.java
@@ -1,37 +1,52 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < 0 || index >= input.length() - 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Write the character(s) corresponding to the code point
+        if (Character.isSupplementaryCodePoint(entityValue)) {
+            out.write(Character.toChars(entityValue));
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
-        return 0;
+
+        return 2 + (end - start) + (isHex ? 1 : 0) + 1; // 2 for "&#", the entity length, optional "x", and ";"
     }
\ No newline at end of file
