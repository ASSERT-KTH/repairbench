diff --git a/tmp/1c42d901-2c70-4a50-ae63-45a8c5041e9e_buggy.java b/tmp/76e655ae-8394-4dbe-970c-c2467ad8c1d6_fixed.java
index 4bbd561..42664d9 100644
--- a/tmp/1c42d901-2c70-4a50-ae63-45a8c5041e9e_buggy.java
+++ b/tmp/76e655ae-8394-4dbe-970c-c2467ad8c1d6_fixed.java
@@ -1,37 +1,54 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < input.length() - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= input.length()) {
+                return 0; // Prevent ArrayIndexOutOfBounds
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
+                if (end >= input.length()) {
+                    return 0; // Prevent ArrayIndexOutOfBounds if semicolon is missing
+                }
             }
 
             int entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch (NumberFormatException nfe) {
-                return 0;
+                return 0; // Invalid numeric entity
             }
 
+            if (entityValue > Character.MAX_CODE_POINT) {
+                return 0; // Prevent invalid character entity
+            }
+
+            // Handle supplementary characters
+            if (Character.isSupplementaryCodePoint(entityValue)) {
+                out.write(Character.toChars(entityValue));
+            } else {
                 out.write(entityValue);
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
