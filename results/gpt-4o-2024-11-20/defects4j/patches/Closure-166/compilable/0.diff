diff --git a/tmp/ff86c0c7-9105-4138-b096-d6a52a04ff16_buggy.java b/tmp/16350e78-e28b-4e23-b3eb-f6d52e3fcb26_fixed.java
index 5f96616..369a313 100644
--- a/tmp/ff86c0c7-9105-4138-b096-d6a52a04ff16_buggy.java
+++ b/tmp/16350e78-e28b-4e23-b3eb-f6d52e3fcb26_fixed.java
@@ -1,20 +1,25 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      ObjectType thisObjectType = toObjectType();
+      if (thisObjectType != null) {
+        ObjectType constraintObjectType = constraint.toObjectType();
+        for (String property : constraintObjectType.getOwnPropertyNames()) {
+          JSType propertyType = constraintObjectType.getPropertyType(property);
+          if (!thisObjectType.hasProperty(property)) {
+            thisObjectType.defineInferredProperty(property, propertyType, null);
+          } else {
+            JSType thisPropertyType = thisObjectType.getPropertyType(property);
+            thisObjectType.defineDeclaredProperty(
+                property, thisPropertyType.getLeastSupertype(propertyType), null);
+          }
+        }
+      }
     }
   }
\ No newline at end of file
