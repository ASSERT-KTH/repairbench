diff --git a/tmp/016b8731-36df-446f-83a3-608bf6536b1a_buggy.java b/tmp/a02675d3-a952-4d23-b42b-3f429d56b694_fixed.java
index 5f96616..aa06802 100644
--- a/tmp/016b8731-36df-446f-83a3-608bf6536b1a_buggy.java
+++ b/tmp/a02675d3-a952-4d23-b42b-3f429d56b694_fixed.java
@@ -1,20 +1,23 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+      return;
+    }
+
+    // Handle the case where the constraint is a union type that might include a record type.
+    if (constraint.isUnionType()) {
+      for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternate.isRecordType()) {
+          matchRecordTypeConstraint(alternate.toObjectType());
+          return;
+        }
+      }
     }
   }
\ No newline at end of file
