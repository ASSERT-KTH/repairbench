diff --git a/tmp/18abc0b3-ee93-4d07-b2f3-438d025630ae_buggy.java b/tmp/62e62bdd-6728-45e5-aac2-559b1f94a4bd_fixed.java
index 5f96616..2aa2e94 100644
--- a/tmp/18abc0b3-ee93-4d07-b2f3-438d025630ae_buggy.java
+++ b/tmp/62e62bdd-6728-45e5-aac2-559b1f94a4bd_fixed.java
@@ -1,20 +1,29 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      ObjectType recordConstraint = constraint.toObjectType();
+      if (isRecordType()) {
+        // If both this type and the constraint are record types, match each property.
+        for (String property : recordConstraint.getOwnPropertyNames()) {
+          JSType propertyType = recordConstraint.getPropertyType(property);
+          if (hasOwnProperty(property)) {
+            getPropertyType(property).matchConstraint(propertyType);
+          } else {
+            defineInferredProperty(property, propertyType, null);
+          }
+        }
+      } else {
+        // If "this" is not a record type, treat it as an empty record and define all properties.
+        for (String property : recordConstraint.getOwnPropertyNames()) {
+          JSType propertyType = recordConstraint.getPropertyType(property);
+          defineInferredProperty(property, propertyType, null);
+        }
+      }
     }
   }
\ No newline at end of file
