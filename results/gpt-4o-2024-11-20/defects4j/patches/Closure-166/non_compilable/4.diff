diff --git a/tmp/d0750384-f995-4af7-84fb-7a94bebd0c7b_buggy.java b/tmp/78ce4c66-3a55-4240-98f5-7d81b2084a47_fixed.java
index 5f96616..2a3128d 100644
--- a/tmp/d0750384-f995-4af7-84fb-7a94bebd0c7b_buggy.java
+++ b/tmp/78ce4c66-3a55-4240-98f5-7d81b2084a47_fixed.java
@@ -1,20 +1,23 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    ObjectType recordType = constraint.toObjectType();
+    if (recordType != null) {
+      for (String property : recordType.getOwnPropertyNames()) {
+        JSType propertyType = recordType.getPropertyType(property);
+        if (!this.hasOwnProperty(property)) {
+          this.defineInferredProperty(property, propertyType, /* inferred= */ true);
+        } else {
+          // Attempt to match the property types recursively.
+          this.getPropertyType(property).matchConstraint(propertyType);
+        }
+      }
+    }
   }
 }
\ No newline at end of file
