diff --git a/tmp/a5a14816-0a9a-4e3c-b74c-785615ea04cf_buggy.java b/tmp/87fad7dc-eebc-4fed-b2e1-ed1aa8d75c1f_fixed.java
index 5f96616..b77b1ad 100644
--- a/tmp/a5a14816-0a9a-4e3c-b74c-785615ea04cf_buggy.java
+++ b/tmp/87fad7dc-eebc-4fed-b2e1-ed1aa8d75c1f_fixed.java
@@ -1,20 +1,19 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      // Handle the case where the constraint is a union that includes a record type.
+      for (JSType alternative : constraint.toMaybeUnionType().getAlternates()) {
+        if (alternative.isRecordType()) {
+          matchRecordTypeConstraint(alternative.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
