diff --git a/tmp/b87a7d41-931f-4421-81f8-f759ac27fd6d_buggy.java b/tmp/3dc3b9eb-ae56-4c3a-9f00-14770221e173_fixed.java
index 25ca093..4f8b079 100644
--- a/tmp/b87a7d41-931f-4421-81f8-f759ac27fd6d_buggy.java
+++ b/tmp/3dc3b9eb-ae56-4c3a-9f00-14770221e173_fixed.java
@@ -1,52 +1,74 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM (Byte Order Mark) to determine character encoding
+    byteData.mark();
+    if (byteData.remaining() >= 3) {
+        byte[] bom = new byte[3];
+        byteData.get(bom);
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if ((bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {
+            charsetName = "UTF-8";
+            byteData.position(3); // Skip BOM
+        } else if (byteData.remaining() >= 4) {
+            byte[] bom4 = new byte[4];
+            byteData.get(bom4);
+            byteData.reset();
+
+            if ((bom4[0] & 0xFF) == 0x00 && (bom4[1] & 0xFF) == 0x00 && (bom4[2] & 0xFF) == 0xFE && (bom4[3] & 0xFF) == 0xFF) {
+                charsetName = "UTF-32BE";
+                byteData.position(4); // Skip BOM
+            } else if ((bom4[0] & 0xFF) == 0xFF && (bom4[1] & 0xFF) == 0xFE && (bom4[2] & 0xFF) == 0x00 && (bom4[3] & 0xFF) == 0x00) {
+                charsetName = "UTF-32LE";
+                byteData.position(4); // Skip BOM
+            } else if ((bom4[0] & 0xFF) == 0xFE && (bom4[1] & 0xFF) == 0xFF) {
+                charsetName = "UTF-16BE";
+                byteData.position(2); // Skip BOM
+            } else if ((bom4[0] & 0xFF) == 0xFF && (bom4[1] & 0xFF) == 0xFE) {
+                charsetName = "UTF-16LE";
+                byteData.position(2); // Skip BOM
+            }
+        }
+    }
+
+    if (charsetName == null) { // Determine from meta tag; default to UTF-8
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // If not found, will keep UTF-8 as the default
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // Re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // Use specified charsetName
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
