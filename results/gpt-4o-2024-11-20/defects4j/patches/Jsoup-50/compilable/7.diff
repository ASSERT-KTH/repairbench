diff --git a/tmp/46db694b-a591-4bbf-885c-3639f60dc3b1_buggy.java b/tmp/738f2532-b280-4ccc-b573-4602e561638e_fixed.java
index 25ca093..5a0a803 100644
--- a/tmp/46db694b-a591-4bbf-885c-3639f60dc3b1_buggy.java
+++ b/tmp/738f2532-b280-4ccc-b573-4602e561638e_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM (Byte Order Mark)
+    byteData.mark();
+    byte[] bom = new byte[4];
+    if (byteData.remaining() >= 4) {
+        byteData.get(bom, 0, 4);
+        byteData.rewind();
+    } else if (byteData.remaining() >= 2) {
+        byteData.get(bom, 0, 2);
+        byteData.rewind();
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    String detectedCharset = null;
+    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+        detectedCharset = "UTF-8";
+        byteData.position(3); // Skip BOM
+    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+        detectedCharset = "UTF-16BE";
+        byteData.position(2); // Skip BOM
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+        detectedCharset = "UTF-16LE";
+        byteData.position(2); // Skip BOM
+    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+        detectedCharset = "UTF-32BE";
+        byteData.position(4); // Skip BOM
+    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+        detectedCharset = "UTF-32LE";
+        byteData.position(4); // Skip BOM
+    } else {
+        byteData.rewind(); // No BOM detected, rewind to start
+    }
+
+    if (charsetName == null) {
+        if (detectedCharset != null) {
+            charsetName = detectedCharset; // Use BOM-detected charset if available
+        } else {
+            // Fallback to detecting via meta tags after decoding with default charset
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            byteData.rewind();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
-                    try {
-                        if (Charset.isSupported(meta.attr("charset"))) {
                     foundCharset = meta.attr("charset");
                 }
-                    } catch (IllegalCharsetNameException e) {
-                        foundCharset = null;
+
+                if (foundCharset != null && Charset.isSupported(foundCharset)) {
+                    charsetName = foundCharset.trim().replaceAll("[\"']", "");
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
         }
     }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+
+    if (charsetName == null) {
+        charsetName = defaultCharset; // Fallback to default charset
+    }
+
     docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+    byteData.rewind();
+
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        docData = docData.substring(1); // Remove BOM
     }
-        if (doc == null) {
+
     doc = parser.parseInput(docData, baseUri);
     doc.outputSettings().charset(charsetName);
-        }
+
     return doc;
 }
\ No newline at end of file
