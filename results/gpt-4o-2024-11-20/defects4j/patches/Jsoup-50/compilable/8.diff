diff --git a/tmp/5c8aa9eb-dc07-4345-a266-ffca812e88c0_buggy.java b/tmp/7a1c631a-8682-4ab8-b2e0-c5790fca73eb_fixed.java
index 25ca093..0a5c19e 100644
--- a/tmp/5c8aa9eb-dc07-4345-a266-ffca812e88c0_buggy.java
+++ b/tmp/7a1c631a-8682-4ab8-b2e0-c5790fca73eb_fixed.java
@@ -1,52 +1,83 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOM and determine charset
+        if (byteData.remaining() >= 3) {
+            byte[] bom = new byte[4]; // BOM might be up to 4 bytes
+            byteData.mark();
+            byteData.get(bom, 0, Math.min(byteData.remaining(), bom.length));
+            byteData.rewind();
             
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // BOM detection
+            if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
+                charsetName = "UTF-8"; // UTF-8 BOM
+                byteData.position(3); // Skip BOM
+            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+                charsetName = "UTF-16BE"; // UTF-16BE BOM
+                byteData.position(2); // Skip BOM
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+                if (bom[2] == 0x00 && bom[3] == 0x00) {
+                    charsetName = "UTF-32LE"; // UTF-32LE BOM
+                    byteData.position(4); // Skip BOM
+                } else {
+                    charsetName = "UTF-16LE"; // UTF-16LE BOM
+                    byteData.position(2); // Skip BOM
+                }
+            } else if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                charsetName = "UTF-32BE"; // UTF-32BE BOM
+                byteData.position(4); // Skip BOM
+            }
+        }
+
+        // Determine charset from meta if not provided already
+        if (charsetName == null) {
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        } else {
+            Validate.notEmpty(charsetName,
+                    "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
+        // Final check for BOM and re-decode
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             byteData.rewind();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
             charsetName = defaultCharset;
             doc = null;
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName); // Update document charset setting
         }
+
         return doc;
     }
\ No newline at end of file
