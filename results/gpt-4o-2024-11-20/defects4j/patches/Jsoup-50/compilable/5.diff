diff --git a/tmp/2457e5d2-c16b-4454-ad16-9dddd23776fd_buggy.java b/tmp/07a754c2-5760-4f2b-a3e6-f708bb5cbd22_fixed.java
index 25ca093..ffe8eb6 100644
--- a/tmp/2457e5d2-c16b-4454-ad16-9dddd23776fd_buggy.java
+++ b/tmp/07a754c2-5760-4f2b-a3e6-f708bb5cbd22_fixed.java
@@ -1,52 +1,69 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOM (Byte Order Mark) and determine charset if necessary
+        if (byteData.remaining() >= 2) {
+            byte[] bom = new byte[4];
+            for (int i = 0; i < Math.min(byteData.remaining(), 4); i++) {
+                bom[i] = byteData.get(i);
+            }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+                charsetName = "UTF-16BE";
+                byteData.position(2); // Skip BOM
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+                charsetName = "UTF-16LE";
+                byteData.position(2); // Skip BOM
+            } else if (byteData.remaining() >= 4 && bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                charsetName = "UTF-32BE";
+                byteData.position(4); // Skip BOM
+            } else if (byteData.remaining() >= 4 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == (byte) 0x00 && bom[3] == (byte) 0x00) {
+                charsetName = "UTF-32LE";
+                byteData.position(4); // Skip BOM
+            }
+        }
+
+        if (charsetName == null) { // determine charset from meta; assume UTF-8 initially
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // re-decode based on new charset
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        } else { // charset specified explicitly
+            Validate.notEmpty(charsetName, "Must set charset argument to a valid character set. Set to null to detect from HTML.");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
+        // Handle BOM removal (if present) for UTF-8 or other charsets
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
