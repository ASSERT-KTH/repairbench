diff --git a/tmp/e68464c6-57c5-421e-8a63-147dcda8914b_buggy.java b/tmp/46544665-42ff-421e-935d-c577ae8f69bc_fixed.java
index 25ca093..1f587ca 100644
--- a/tmp/e68464c6-57c5-421e-8a63-147dcda8914b_buggy.java
+++ b/tmp/46544665-42ff-421e-935d-c577ae8f69bc_fixed.java
@@ -1,52 +1,73 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Detect BOM (Byte Order Mark) and determine charset
+        String detectedCharset = null;
+        if (byteData.remaining() >= 2) {
+            int bom1 = byteData.get(0) & 0xFF;
+            int bom2 = byteData.get(1) & 0xFF;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            if (bom1 == 0xFE && bom2 == 0xFF) { // UTF-16BE
+                detectedCharset = "UTF-16BE";
+            } else if (bom1 == 0xFF && bom2 == 0xFE) { // UTF-16LE
+                detectedCharset = "UTF-16LE";
+            } else if (byteData.remaining() >= 4) {
+                int bom3 = byteData.get(2) & 0xFF;
+                int bom4 = byteData.get(3) & 0xFF;
+                if (bom1 == 0x00 && bom2 == 0x00 && bom3 == 0xFE && bom4 == 0xFF) { // UTF-32BE
+                    detectedCharset = "UTF-32BE";
+                } else if (bom1 == 0xFF && bom2 == 0xFE && bom3 == 0x00 && bom4 == 0x00) { // UTF-32LE
+                    detectedCharset = "UTF-32LE";
+                }
+            }
+        }
+
+        if (detectedCharset != null) {
+            byteData.position(detectedCharset.startsWith("UTF-32") ? 4 : 2); // Skip BOM
+            charsetName = detectedCharset;
+        }
+
+        // Decode with the determined charset or user-provided charset
+        if (charsetName == null) {
+            // If charset is null, try UTF-8 as fallback
+            charsetName = defaultCharset;
+        }
+
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+
+        // Parse document and determine if meta charset needs overriding
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equalsIgnoreCase(charsetName)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri);
             }
         }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+
+        // Remove BOM marker if present in document text
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
-        if (doc == null) {
-            doc = parser.parseInput(docData, baseUri);
+
         doc.outputSettings().charset(charsetName);
-        }
         return doc;
     }
\ No newline at end of file
