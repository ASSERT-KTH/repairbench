diff --git a/tmp/ef253d83-b707-4b77-a6ed-3af1d00dcf01_buggy.java b/tmp/d5d35901-bc26-4c19-a51b-315b1286bb47_fixed.java
index 46817a7..3a3b595 100644
--- a/tmp/ef253d83-b707-4b77-a6ed-3af1d00dcf01_buggy.java
+++ b/tmp/d5d35901-bc26-4c19-a51b-315b1286bb47_fixed.java
@@ -1,16 +1,41 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    RecordType thisRecord = this.toMaybeRecordType();
+    RecordType thatRecord = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Combine all property names from both record types
+    Set<String> allProperties = new HashSet<>();
+    allProperties.addAll(thisRecord.getProperties().keySet());
+    allProperties.addAll(thatRecord.getProperties().keySet());
+
+    for (String property : allProperties) {
+      boolean thisHasProp = thisRecord.hasProperty(property);
+      boolean thatHasProp = thatRecord.hasProperty(property);
+
+      if (thisHasProp && thatHasProp) {
+        JSType thisPropType = thisRecord.getPropertyType(property);
+        JSType thatPropType = thatRecord.getPropertyType(property);
+        builder.addProperty(
+            property,
+            thisPropType.getLeastSupertype(thatPropType),
+            thisRecord.getPropertyNode(property));
+      } else if (thisHasProp) {
+        builder.addProperty(
+            property,
+            thisRecord.getPropertyType(property),
+            thisRecord.getPropertyNode(property));
+      } else {
+        builder.addProperty(
+            property,
+            thatRecord.getPropertyType(property),
+            thatRecord.getPropertyNode(property));
       }
     }
+
     return builder.build();
   }
\ No newline at end of file
