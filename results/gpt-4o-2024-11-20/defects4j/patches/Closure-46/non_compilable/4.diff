diff --git a/tmp/a14d4bde-da01-4037-bf73-30f1628f7adf_buggy.java b/tmp/3f8e5339-f609-423e-b7b6-eb5dc7c40dda_fixed.java
index 46817a7..79fa417 100644
--- a/tmp/a14d4bde-da01-4037-bf73-30f1628f7adf_buggy.java
+++ b/tmp/3f8e5339-f609-423e-b7b6-eb5dc7c40dda_fixed.java
@@ -1,16 +1,32 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    RecordType thisRecordType = this.toMaybeRecordType();
+    RecordType thatRecordType = that.toMaybeRecordType();
+
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>();
+    allProperties.addAll(thisRecordType.getProperties());
+    allProperties.addAll(thatRecordType.getProperties());
+
+    for (String property : allProperties) {
+      boolean thisHasProperty = thisRecordType.hasProperty(property);
+      boolean thatHasProperty = thatRecordType.hasProperty(property);
+
+      if (thisHasProperty && thatHasProperty) {
+        JSType thisPropertyType = thisRecordType.getPropertyType(property);
+        JSType thatPropertyType = thatRecordType.getPropertyType(property);
+        builder.addProperty(property,
+            thisPropertyType.getLeastSupertype(thatPropertyType), null);
+      } else if (thisHasProperty) {
+        builder.addProperty(property, thisRecordType.getPropertyType(property), null);
+      } else {
+        builder.addProperty(property, thatRecordType.getPropertyType(property), null);
       }
     }
+
     return builder.build();
   }
\ No newline at end of file
