diff --git a/tmp/4b32840c-80d6-4f36-b308-ec6451dfcc21_buggy.java b/tmp/c6a8b9ba-2b88-4738-bdfa-ce229e3301f7_fixed.java
index 46817a7..5b96c3e 100644
--- a/tmp/4b32840c-80d6-4f36-b308-ec6451dfcc21_buggy.java
+++ b/tmp/c6a8b9ba-2b88-4738-bdfa-ce229e3301f7_fixed.java
@@ -1,16 +1,31 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    RecordType thatRecordType = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Add all properties from this record type
+    for (String property : this.properties.keySet()) {
+      JSType propertyType = getPropertyType(property);
+      Node propertyNode = getPropertyNode(property);
+
+      if (thatRecordType.hasProperty(property)) {
+        JSType thatPropertyType = thatRecordType.getPropertyType(property);
+        builder.addProperty(property, propertyType.getLeastSupertype(thatPropertyType), propertyNode);
+      } else {
+        builder.addProperty(property, propertyType, propertyNode);
       }
     }
+
+    // Add remaining properties from 'that' record type
+    for (String property : thatRecordType.getProperties()) {
+      if (!this.hasProperty(property)) {
+        builder.addProperty(property, thatRecordType.getPropertyType(property), 
+                            thatRecordType.getPropertyNode(property));
+      }
+    }
+
     return builder.build();
   }
\ No newline at end of file
