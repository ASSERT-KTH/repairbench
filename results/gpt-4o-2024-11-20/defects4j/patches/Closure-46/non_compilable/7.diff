diff --git a/tmp/61b3e539-2bca-4db2-8324-6bbf2ff12477_buggy.java b/tmp/023d584c-fb24-480d-b22b-fb2bdd67a624_fixed.java
index 46817a7..da3f6bd 100644
--- a/tmp/61b3e539-2bca-4db2-8324-6bbf2ff12477_buggy.java
+++ b/tmp/023d584c-fb24-480d-b22b-fb2bdd67a624_fixed.java
@@ -1,16 +1,35 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    RecordType thatRecordType = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+    // Add all properties from both record types
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+      JSType thisPropertyType = getPropertyType(property);
+      if (thatRecordType.hasProperty(property)) {
+        JSType thatPropertyType = thatRecordType.getPropertyType(property);
+        // Combine types if property exists in both record types
+        builder.addProperty(
+            property,
+            thisPropertyType.getLeastSupertype(thatPropertyType),
             getPropertyNode(property)); 
+      } else {
+        // Add property from this record type only
+        builder.addProperty(property, thisPropertyType, getPropertyNode(property));
       }
     }
+    for (String property : thatRecordType.getProperties().keySet()) {
+      if (!properties.containsKey(property)) {
+        // Add property from the other record type only
+        builder.addProperty(
+            property,
+            thatRecordType.getPropertyType(property),
+            thatRecordType.getPropertyNode(property));
+      }
+    }
+
     return builder.build();
   }
\ No newline at end of file
