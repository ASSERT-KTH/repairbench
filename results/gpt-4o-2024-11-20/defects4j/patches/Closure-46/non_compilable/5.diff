diff --git a/tmp/ba58aa81-d6fd-4fe8-964b-05a0cb48ea6c_buggy.java b/tmp/b8997a31-99ea-4d34-8e2d-f25171b23425_fixed.java
index 46817a7..39bf1d7 100644
--- a/tmp/ba58aa81-d6fd-4fe8-964b-05a0cb48ea6c_buggy.java
+++ b/tmp/b8997a31-99ea-4d34-8e2d-f25171b23425_fixed.java
@@ -1,16 +1,30 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+    RecordType thatRecordType = that.toMaybeRecordType();
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+    // Add all properties from both record types to the result.
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (thatRecordType.hasProperty(property)) {
+        // If both have the property, use the union of the property types.
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = thatRecordType.getPropertyType(property);
+        builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), null);
+      } else {
+        // Add properties present only in this record type.
+        builder.addProperty(property, getPropertyType(property), null);
       }
     }
+
+    for (String property : thatRecordType.getProperties()) {
+      if (!properties.containsKey(property)) {
+        // Add properties present only in the other record type.
+        builder.addProperty(property, thatRecordType.getPropertyType(property), null);
+      }
+    }
+
     return builder.build();
   }
\ No newline at end of file
