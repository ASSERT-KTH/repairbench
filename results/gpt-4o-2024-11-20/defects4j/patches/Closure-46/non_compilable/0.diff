diff --git a/tmp/55efc349-b897-4463-b6b7-ee2aaccae17a_buggy.java b/tmp/a38bc08f-e613-4629-9786-d2e470b45178_fixed.java
index 46817a7..f77b566 100644
--- a/tmp/55efc349-b897-4463-b6b7-ee2aaccae17a_buggy.java
+++ b/tmp/a38bc08f-e613-4629-9786-d2e470b45178_fixed.java
@@ -1,16 +1,27 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Add properties present in either record type
+    Set<String> combinedProperties = new HashSet<>(this.properties.keySet());
+    combinedProperties.addAll(that.toMaybeRecordType().getOwnPropertyNames());
+
+    for (String property : combinedProperties) {
+        boolean thisHasProperty = this.hasProperty(property);
+        boolean thatHasProperty = that.toMaybeRecordType().hasProperty(property);
+
+        if (thisHasProperty && thatHasProperty) {
+            JSType thisPropertyType = this.getPropertyType(property);
+            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+            builder.addProperty(property, thisPropertyType.getLeastSupertype(thatPropertyType), null);
+        } else if (thisHasProperty) {
+            builder.addProperty(property, this.getPropertyType(property), null);
+        } else if (thatHasProperty) {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);
         }
     }
     return builder.build();
 }
\ No newline at end of file
