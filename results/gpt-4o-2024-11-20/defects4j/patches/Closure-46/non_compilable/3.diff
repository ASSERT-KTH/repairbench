diff --git a/tmp/0083a852-4469-4fc0-a56e-b02dbc73f4b4_buggy.java b/tmp/640828e8-1f30-4b0c-8b2e-90d432f726f7_fixed.java
index 46817a7..dbd6b93 100644
--- a/tmp/0083a852-4469-4fc0-a56e-b02dbc73f4b4_buggy.java
+++ b/tmp/640828e8-1f30-4b0c-8b2e-90d432f726f7_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType thatRecordType = that.toMaybeRecordType();
+
+  // Combine properties from both record types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  Set<String> allProperties = new HashSet<>();
+  allProperties.addAll(this.properties.keySet());
+  allProperties.addAll(thatRecordType.getProperties().keySet());
+
+  for (String property : allProperties) {
+    boolean thisHasProperty = this.hasProperty(property);
+    boolean thatHasProperty = thatRecordType.hasProperty(property);
+
+    if (thisHasProperty && thatHasProperty) {
+      // If both have the property, union the types
+      JSType thisPropType = this.getPropertyType(property);
+      JSType thatPropType = thatRecordType.getPropertyType(property);
+      JSType unifiedType = registry.createUnionType(thisPropType, thatPropType);
+      builder.addProperty(property, unifiedType, null);
+    } else if (thisHasProperty) {
+      // If only this has the property, add it
+      builder.addProperty(property, this.getPropertyType(property), null);
+    } else if (thatHasProperty) {
+      // If only that has the property, add it
+      builder.addProperty(property, thatRecordType.getPropertyType(property), null);
     }
   }
+
   return builder.build();
 }
\ No newline at end of file
