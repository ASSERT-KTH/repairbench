diff --git a/tmp/6ffb4735-3694-4faa-8878-2b0ddb3641f6_buggy.java b/tmp/419fd923-6773-4820-8bf5-9de5f7870011_fixed.java
index 00914da..53b83f6 100644
--- a/tmp/6ffb4735-3694-4faa-8878-2b0ddb3641f6_buggy.java
+++ b/tmp/419fd923-6773-4820-8bf5-9de5f7870011_fixed.java
@@ -1,17 +1,28 @@
-    // does not recurse.
     private void normalise(Element element) {
-        List<Node> toMove = new ArrayList<Node>();
+        List<TextNode> textNodes = new ArrayList<>();
+        
+        // Collect contiguous TextNodes and remove blanks
         for (Node node : element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
-                if (!tn.isBlank())
-                    toMove.add(tn);
+                if (!tn.isBlank()) {
+                    textNodes.add(tn);
+                } else {
+                    node.remove(); // Remove blank TextNodes
                 }
             }
+        }
+        
+        if (!textNodes.isEmpty()) {
+            // Combine collected TextNodes into a single one
+            StringBuilder combinedText = new StringBuilder();
+            for (TextNode tn : textNodes) {
+                combinedText.append(tn.getWholeText());
+                tn.remove(); // Remove the original TextNode from its parent
+            }
 
-        for (Node node: toMove) {
-            element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            // Prepend the combined text to the element
+            TextNode finalTextNode = new TextNode(combinedText.toString(), "");
+            element.prependChild(finalTextNode);
         }
     }
\ No newline at end of file
