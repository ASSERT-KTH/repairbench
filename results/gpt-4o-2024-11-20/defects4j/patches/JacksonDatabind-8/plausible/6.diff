diff --git a/tmp/0ddcb6cc-8151-4528-ac23-b414931c63c0_buggy.java b/tmp/c7e4d9ed-0740-42b2-ad41-526a7d057e65_fixed.java
index c9da1b7..28332d8 100644
--- a/tmp/0ddcb6cc-8151-4528-ac23-b414931c63c0_buggy.java
+++ b/tmp/c7e4d9ed-0740-42b2-ad41-526a7d057e65_fixed.java
@@ -1,33 +1,26 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
+        boolean oldOneExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+        // If both creators are explicitly annotated, throw an exception
+        if (explicit && oldOneExplicit) {
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+        } else if (!explicit) {
+            // If the new one is not explicit, do not override
+            return;
+        }
+        // otherwise, allow new explicit one to override old one
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
