diff --git a/tmp/493d0db3-e147-46b8-84c2-8369899c17e8_buggy.java b/tmp/2b062d49-086a-4672-a097-dbb2fda1d419_fixed.java
index c9da1b7..080af01 100644
--- a/tmp/493d0db3-e147-46b8-84c2-8369899c17e8_buggy.java
+++ b/tmp/2b062d49-086a-4672-a097-dbb2fda1d419_fixed.java
@@ -1,33 +1,34 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
 
+                if (explicit) { // If both are explicit, raise a conflict.
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                } else { // Otherwise, prefer the already existing creator.
+                    return;
+                }
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
