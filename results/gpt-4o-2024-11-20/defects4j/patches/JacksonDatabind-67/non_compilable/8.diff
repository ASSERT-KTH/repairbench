diff --git a/tmp/4c9145c9-4f96-4b1d-b46c-d291b1cac19e_buggy.java b/tmp/21adad60-1aae-4896-ad85-30400cf2e5f4_fixed.java
index bc80637..bb93aca 100644
--- a/tmp/4c9145c9-4f96-4b1d-b46c-d291b1cac19e_buggy.java
+++ b/tmp/21adad60-1aae-4896-ad85-30400cf2e5f4_fixed.java
@@ -1,33 +1,53 @@
 @Override
 public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
-            JavaType type)
-        throws JsonMappingException
-    {
+        JavaType type) throws JsonMappingException {
     final DeserializationConfig config = ctxt.getConfig();
     KeyDeserializer deser = null;
+
     if (_factoryConfig.hasKeyDeserializers()) {
         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
         for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {
             deser = d.findKeyDeserializer(type, config, beanDesc);
             if (deser != null) {
                 break;
             }
         }
     }
-        // the only non-standard thing is this:
+
+    // If no custom KeyDeserializer found:
     if (deser == null) {
         if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+            // Handle enum types using modifiers or custom logic
+            deser = new KeyDeserializer() {
+                @Override
+                public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
+                    Class<? extends Enum> enumClass = (Class<? extends Enum>) type.getRawClass();
+                    try {
+                        return Enum.valueOf(enumClass, key);
+                    } catch (IllegalArgumentException ex) {
+                        // Custom case-insensitive handling
+                        for (Enum<?> enumValue : enumClass.getEnumConstants()) {
+                            if (enumValue.name().equalsIgnoreCase(key)) {
+                                return enumValue;
                             }
+                        }
+                        throw ctxt.weirdKeyException(enumClass, key,
+                                "not one of the accepted values: " + Arrays.toString(enumClass.getEnumConstants()));
+                    }
+                }
+            };
+        } else {
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
-        // and then post-processing
+    }
+
+    // Post-processing for additional modifiers
     if (deser != null) {
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 deser = mod.modifyKeyDeserializer(config, type, deser);
             }
         }
     }
     return deser;
 }
\ No newline at end of file
