diff --git a/tmp/d224a474-faf1-449b-a9bc-ceabd237d2c0_buggy.java b/tmp/cd59930e-5375-47d4-b85a-58ba8d7fbf8a_fixed.java
index ce55b5f..251f283 100644
--- a/tmp/d224a474-faf1-449b-a9bc-ceabd237d2c0_buggy.java
+++ b/tmp/cd59930e-5375-47d4-b85a-58ba8d7fbf8a_fixed.java
@@ -1,63 +1,61 @@
     /**
      * <p>
      * Gets the greatest common divisor of the absolute value of two numbers,
      * using the "binary gcd" method which avoids division and modulo
      * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
      * Stein (1961).
      * </p>
      * 
-     * @param u a non-zero number
-     * @param v a non-zero number
-     * @return the greatest common divisor, never zero
+     * @param u a number
+     * @param v a number
+     * @return the greatest common divisor, never negative
      * @since 1.1
      */
     public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+        if (u == 0 && v == 0) {
+            return 0; // gcd(0, 0) is conventionally considered 0
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
-        if (u > 0) {
-            u = -u;
-        } // make u negative
-        if (v > 0) {
-            v = -v;
-        } // make v negative
+        if (u == 0) {
+            return Math.abs(v); // gcd(0, v) = |v|
+        }
+        if (v == 0) {
+            return Math.abs(u); // gcd(u, 0) = |u|
+        }
+
+        // Make u and v positive
+        u = Math.abs(u);
+        v = Math.abs(v);
+
         // B1. [Find power of 2]
         int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+        while ((u & 1) == 0 && (v & 1) == 0) { // while u and v are both even...
             u /= 2;
             v /= 2;
-            k++; // cast out twos.
+            k++; // cast out twos
         }
-        if (k == 31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
+
+        // Ensure u is odd
+        while ((u & 1) == 0) { 
+            u /= 2; 
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+
+        // Process the algorithm
         do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+            // Ensure v is odd
+            while ((v & 1) == 0) { 
+                v /= 2; 
             }
-            // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
-            } else {
-                v = t;
+
+            // Subtract smaller from larger
+            if (u > v) {
+                int temp = u;
+                u = v;
+                v = temp;
             }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+            v -= u;
+
+        } while (v != 0);
+
+        // Restore factor of 2
+        return u * (1 << k);
     }
\ No newline at end of file
