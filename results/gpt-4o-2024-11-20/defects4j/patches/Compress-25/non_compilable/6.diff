diff --git a/tmp/0525e41a-ba98-48d7-bb3d-09ce5cfcab80_buggy.java b/tmp/ae1db65b-9211-402a-b3b0-79a377753b85_fixed.java
index 6c0aa19..b66df9f 100644
--- a/tmp/0525e41a-ba98-48d7-bb3d-09ce5cfcab80_buggy.java
+++ b/tmp/ae1db65b-9211-402a-b3b0-79a377753b85_fixed.java
@@ -1,20 +1,25 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
+        this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+        
+        // Ensure buffer has a default capacity to avoid issues during initialization
+        buf = ByteBuffer.allocate(512);
+        
+        // Initialize input stream with the correct buffer size
+        in = new PushbackInputStream(inputStream, buf.capacity() > 64 ? buf.capacity() : 64);
+        
         // haven't read anything so far
     }
\ No newline at end of file
