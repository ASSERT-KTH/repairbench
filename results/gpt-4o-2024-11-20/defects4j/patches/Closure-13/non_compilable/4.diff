diff --git a/tmp/6d5776e9-99ee-4121-9003-05fbdc634cd3_buggy.java b/tmp/e1611475-1e43-4241-94d6-6edc3fd6c107_fixed.java
index b5d94e0..afe1b80 100644
--- a/tmp/6d5776e9-99ee-4121-9003-05fbdc634cd3_buggy.java
+++ b/tmp/e1611475-1e43-4241-94d6-6edc3fd6c107_fixed.java
@@ -1,26 +1,30 @@
   private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
+    boolean changed;
     do {
+      changed = false;
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
-        Node next = c.getNext();
+        Node next = c.getNext(); // Store next node before traversing current
+        traverse(c); // Recursively traverse the child
         c = next;
       }
 
-      visit(node);
+      if (visit(node)) { // Check if visit modifies the node
+        changed = true;
+      }
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      Preconditions.checkState(visits < 10000, "too many iterations");
+    } while (changed || shouldRetraverse(node)); // Retraverse if node changes or condition is met.
 
     exitNode(node);
   }
\ No newline at end of file
