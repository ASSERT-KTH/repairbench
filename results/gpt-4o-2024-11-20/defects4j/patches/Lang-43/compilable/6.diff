diff --git a/tmp/f50ffa5f-744b-432b-b9a3-1fe44a69ce1b_buggy.java b/tmp/07e4f6dd-7279-4290-a554-74f22c9d1994_fixed.java
index b6b11b6..0bc2f28 100644
--- a/tmp/f50ffa5f-744b-432b-b9a3-1fe44a69ce1b_buggy.java
+++ b/tmp/07e4f6dd-7279-4290-a554-74f22c9d1994_fixed.java
@@ -1,38 +1,42 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
         int lastHold = start;
+
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
-                lastHold = pos.getIndex();
-                continue;
+            char ch = c[i];
+            pos.setIndex(i);
+
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, i)) {
+                // Append from last hold to current position
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
                 }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
-                next(pos);
+                // Skip the escaped sequence
+                i += ESCAPED_QUOTE.length() - 1;
+                lastHold = i + 1;
+            } else if (ch == QUOTE) {
+                // Closing quote found
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold);
                 }
+                pos.setIndex(i + 1);
+                return appendTo;
             }
+        }
+
+        // Unterminated quoted string
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
