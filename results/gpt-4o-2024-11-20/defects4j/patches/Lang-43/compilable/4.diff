diff --git a/tmp/534d2564-279b-4d2b-9b16-735f650722d0_buggy.java b/tmp/0813becb-5950-4d11-93f4-d4ac301c7841_fixed.java
index b6b11b6..9ec46f1 100644
--- a/tmp/534d2564-279b-4d2b-9b16-735f650722d0_buggy.java
+++ b/tmp/0813becb-5950-4d11-93f4-d4ac301c7841_fixed.java
@@ -1,38 +1,53 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
-        }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        boolean inQuote = false;
+
+        while (pos.getIndex() < pattern.length()) {
+            char currentChar = c[pos.getIndex()];
+
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {
+                // Process escaped quote
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+                }
+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
-                continue;
+            } else if (currentChar == QUOTE) {
+                // Handle quote
+                if (escapingOn && (pos.getIndex() + 1 < pattern.length()) && pattern.charAt(pos.getIndex() + 1) == QUOTE) {
+                    // Escaped single quote (e.g., '' -> treat as one quote)
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
+                    pos.setIndex(pos.getIndex() + 2); // Skip both quotes
+                    lastHold = pos.getIndex();
+                } else {
+                    // End of quoted string
                     next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);
+                    }
+                    return appendTo;
+                }
+            } else {
+                // Regular character, move to the next position
                 next(pos);
             }
         }
+
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
