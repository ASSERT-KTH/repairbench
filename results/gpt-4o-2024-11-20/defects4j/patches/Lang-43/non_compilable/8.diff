diff --git a/tmp/ff53c90d-be71-4f5b-be10-db38bcf0e83c_buggy.java b/tmp/25efbe9f-9de0-4aa9-a9ae-124ec39bb7cb_fixed.java
index b6b11b6..865185f 100644
--- a/tmp/ff53c90d-be71-4f5b-be10-db38bcf0e83c_buggy.java
+++ b/tmp/25efbe9f-9de0-4aa9-a9ae-124ec39bb7cb_fixed.java
@@ -1,38 +1,58 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
-        if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+        if (c[start] != QUOTE) {
+            throw new IllegalArgumentException("Quoted string must start with a quote at position " + start);
         }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        next(pos); // Move past the starting quote
+        int lastHold = pos.getIndex();
+        boolean insideQuote = true;
+
+        while (pos.getIndex() < pattern.length()) {
+            char currentChar = c[pos.getIndex()];
+
+            if (escapingOn && pattern.startsWith(ESCAPED_QUOTE, pos.getIndex())) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
+                }
+                next(pos, ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
+            } else if (currentChar == QUOTE) {
+                next(pos); // Move past the closing quote
+                if (pos.getIndex() < pattern.length() && c[pos.getIndex()] == QUOTE) {
+                    // Handle doubled quote (escaped quote)
+                    if (appendTo != null) {
+                        appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);
                     }
-            switch (c[pos.getIndex()]) {
-            case QUOTE:
-                next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
-            default:
+                    next(pos); // Move past the escaped quote
+                    lastHold = pos.getIndex();
+                } else {
+                    insideQuote = false;
+                    break;
+                }
+            } else {
                 next(pos);
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+
+        if (insideQuote) {
+            throw new IllegalArgumentException("Unterminated quoted string at position " + start);
+        }
+
+        if (appendTo != null) {
+            appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+        }
+        return appendTo;
     }
\ No newline at end of file
