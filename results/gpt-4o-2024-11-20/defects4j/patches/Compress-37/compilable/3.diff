diff --git a/tmp/93a7027a-a366-46c1-a5a7-43f578685564_buggy.java b/tmp/152b387b-29df-4963-a18e-faa4d7709dda_fixed.java
index 4b7e1e4..51e751a 100644
--- a/tmp/93a7027a-a366-46c1-a5a7-43f578685564_buggy.java
+++ b/tmp/152b387b-29df-4963-a18e-faa4d7709dda_fixed.java
@@ -1,52 +1,79 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
+
+            // Parse the length value
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
+                    // Length has been fully parsed
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    // Ignore invalid or blank lines, reset and continue
+                    while (ch != '\n' && ch != -1) {
+                        ch = i.read();
+                    }
+                    read = 0;
+                    len = 0;
+                    continue;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+
+            if (ch == -1) { // EOF
+                break;
+            }
+
+            if (len <= read) {
+                // Invalid length or blank line, skip to the next line
+                while (ch != '\n' && ch != -1) {
+                    ch = i.read();
+                }
+                continue;
+            }
+
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == '=') { // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
+
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                    if (restLen <= 0) {
+                        // Invalid header, skip to next
+                        while (ch != '\n' && ch != -1) {
+                            ch = i.read();
+                        }
+                        break;
+                    }
+
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                               + "Paxheader. Expected "
                                               + restLen
                                               + " bytes, read "
                                               + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                                                     restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
-                            }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
         }
         return headers;
     }
\ No newline at end of file
