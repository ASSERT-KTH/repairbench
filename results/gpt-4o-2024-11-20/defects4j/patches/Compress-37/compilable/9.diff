diff --git a/tmp/c60106e4-a037-45ff-89d6-7ea738c74b21_buggy.java b/tmp/ad627dd1-6a8e-4c0a-b544-b6e05aba493e_fixed.java
index 4b7e1e4..2d73222 100644
--- a/tmp/c60106e4-a037-45ff-89d6-7ea738c74b21_buggy.java
+++ b/tmp/ad627dd1-6a8e-4c0a-b544-b6e05aba493e_fixed.java
@@ -1,52 +1,63 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
+            boolean seenDigit = false;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
+                    if (!seenDigit) { // Skip invalid/blank line
+                        continue;
+                    }
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while((ch = i.read()) != -1) {
                         read++;
                         if (ch == '='){ // end of keyword
                             final String keyword = coll.toString(CharsetNames.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
+                            if (restLen < 0) { // Prevent negative rest lengths
+                                throw new IOException("Invalid Paxheader length: " + len);
+                            }
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
                             } else {
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                           + "Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
                                 final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                                 headers.put(keyword, value);
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
                 }
+                if (Character.isDigit(ch)) {
+                    seenDigit = true; // Ensure we've actually seen a digit
                     len *= 10;
                     len += ch - '0';
+                } else {
+                    throw new IOException("Invalid Paxheader format. Expected digit, found: " + (char)ch);
+                }
             }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
