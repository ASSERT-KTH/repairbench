diff --git a/tmp/fc982c4e-7d34-43ee-b6e3-79bd4cd95004_buggy.java b/tmp/0199cb30-d9d7-4c36-80b6-61e7dc329225_fixed.java
index 4b7e1e4..8151220 100644
--- a/tmp/fc982c4e-7d34-43ee-b6e3-79bd4cd95004_buggy.java
+++ b/tmp/0199cb30-d9d7-4c36-80b6-61e7dc329225_fixed.java
@@ -1,52 +1,83 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
+            boolean foundLength = false;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
+                    foundLength = true;
+                    break;
+                }
+                if (Character.isDigit(ch)) {
+                    len *= 10;
+                    len += ch - '0';
+                } else { 
+                    // If a non-digit character is found unexpectedly, skip invalid line.
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
+                    }
+                    // Reset for the next potential entry.
+                    read = 0;
+                    len = 0;
+                    continue;
+                }
+            }
+            if (ch == -1 && !foundLength) { // EOF
+                break;
+            }
+            
+            // If len is 0 or invalid, skip processing
+            if (len <= 0) {
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                continue;
+            }
+
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == '=') { // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (restLen < 0) { // Validate length
+                        throw new IOException("Invalid length in Paxheader: " + len);
+                    } else if (restLen == 1) { // only NL
                         headers.remove(keyword);
+                        i.read(); // Consume the trailing NL
                     } else {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
                                                   + restLen
                                                   + " bytes, read "
                                                   + got);
                         }
                         // Drop trailing NL
                         final String value = new String(rest, 0,
                                                    restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
+            // Skip to the next line if incomplete or invalid.
+            while (ch != -1 && ch != '\n') {
+                ch = i.read();
             }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
