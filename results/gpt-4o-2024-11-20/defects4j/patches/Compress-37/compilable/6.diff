diff --git a/tmp/0906a182-b108-4b0a-894c-556a79598ed7_buggy.java b/tmp/bff78120-6a07-4946-996a-ab419684388f_fixed.java
index 4b7e1e4..3abd6c4 100644
--- a/tmp/0906a182-b108-4b0a-894c-556a79598ed7_buggy.java
+++ b/tmp/bff78120-6a07-4946-996a-ab419684388f_fixed.java
@@ -1,52 +1,80 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
-            int read = 0;
+            boolean foundSpace = false;
+
+            // Read length (a number followed by a space)
             while ((ch = i.read()) != -1) {
-                read++;
                 if (ch == ' ') {
-                    // Get keyword
+                    foundSpace = true;
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    // Skip invalid entries or malformed lines
+                    while ((ch = i.read()) != -1 && ch != '\n');
+                    continue;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+
+            if (ch == -1) { // EOF
+                break;
+            }
+
+            if (!foundSpace) {
+                // If no space was found where expected, assume invalid line
+                throw new IOException("Invalid Paxheader format: Missing keyword-space separator.");
+            }
+
+            // Read the keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while ((ch = i.read()) != -1) {
-                        read++;
                 if (ch == '=') { // end of keyword
+                    break;
+                }
+                coll.write((byte) ch);
+            }
+
+            if (ch == -1) { // EOF before '='
+                throw new IOException("Invalid Paxheader format: Unexpected end of stream while reading keyword.");
+            }
+
             final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+
+            // Get rest of the entry
+            final int restLen = len - (coll.size() + 1 + String.valueOf(len).length() + 1); // length excludes itself and spaces
+            if (restLen < 1) { // only NL or invalid length, skip entry
+                while ((ch = i.read()) != -1 && ch != '\n');
+                continue;
+            }
+
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
                 throw new IOException("Failed to read "
                         + "Paxheader. Expected "
                         + restLen
                         + " bytes, read "
                         + got);
             }
+
             // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            if (rest[restLen - 1] != '\n') {
+                throw new IOException("Invalid Paxheader format: Missing newline at the end of entry.");
+            }
+
+            final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
+
+            if (value.isEmpty()) {
+                headers.remove(keyword); // Blank value means remove the key
+            } else {
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
         }
         return headers;
     }
\ No newline at end of file
