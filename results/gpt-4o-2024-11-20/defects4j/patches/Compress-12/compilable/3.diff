diff --git a/tmp/d4596968-f775-4808-9683-c8e4c99f2271_buggy.java b/tmp/49c1e0f1-9854-4699-a569-b8cad396cd12_fixed.java
index b5a206b..09ebb63 100644
--- a/tmp/d4596968-f775-4808-9683-c8e4c99f2271_buggy.java
+++ b/tmp/49c1e0f1-9854-4699-a569-b8cad396cd12_fixed.java
@@ -1,80 +1,75 @@
-    /**
-     * Get the next entry in this tar archive. This will skip
-     * over any remaining data in the current entry, if there
-     * is one, and place the input stream at the header of the
-     * next entry, and read the header and instantiate a new
-     * TarEntry from the header bytes and return that entry.
-     * If there are no more entries in the archive, null will
-     * be returned to indicate that the end of the archive has
-     * been reached.
-     *
-     * @return The next TarEntry in the archive, or null.
-     * @throws IOException on error
-     */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
             while (numToSkip > 0) {
                 long skipped = skip(numToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip current tar entry");
                 }
                 numToSkip -= skipped;
             }
 
             readBuf = null;
         }
 
+        // Read the next header record
         byte[] headerBuf = getRecord();
+        if (headerBuf == null || headerBuf.length == 0) {
+            hasHitEOF = true;
+        }
 
         if (hasHitEOF) {
             currEntry = null;
             return null;
         }
 
+        try {
             currEntry = new TarArchiveEntry(headerBuf);
+        } catch (IllegalArgumentException e) {
+            throw new IOException("Invalid tar archive entry header", e);
+        }
+
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
-            // read in the name
+            // Read in the name
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
             int length = 0;
             while ((length = read(buf)) >= 0) {
                 longName.append(new String(buf, 0, length));
             }
-            getNextEntry();
+
+            // Recursively call to skip the long name entry and parse the actual entry
+            getNextTarEntry();
+
             if (currEntry == null) {
-                // Bugzilla: 40334
-                // Malformed tar file - long entry name not followed by entry
+                // Bugzilla 40334: Malformed tar file - long entry name not followed by entry
                 return null;
             }
-            // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+
+            // Remove trailing null terminator
+            if (longName.length() > 0 && longName.charAt(longName.length() - 1) == '\0') {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
         }
 
         if (currEntry.isPaxHeader()) { // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()) { // Process sparse files
             readGNUSparse();
         }
 
-        // If the size of the next element in the archive has changed
-        // due to a new size being reported in the posix header
-        // information, we update entrySize here so that it contains
-        // the correct value.
+        // Update entry size in case it changed due to new size reported in headers
         entrySize = currEntry.getSize();
         return currEntry;
     }
\ No newline at end of file
