diff --git a/tmp/792ce8ca-1bd2-4429-bd86-a9693c1aab94_buggy.java b/tmp/36bbb3f1-5060-4fb7-9d9d-24da9ade36e6_fixed.java
index 19fd63e..635d6a5 100644
--- a/tmp/792ce8ca-1bd2-4429-bd86-a9693c1aab94_buggy.java
+++ b/tmp/36bbb3f1-5060-4fb7-9d9d-24da9ade36e6_fixed.java
@@ -1,24 +1,25 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression and can be safely folded.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null && NodeUtil.isCallOrNew(expr)) {
+            Node target = expr.getFirstChild();
+            if (target != null && target.isGetProp() && target.getLastChild().isString()) {
+              String propName = target.getLastChild().getString();
+              if ("onchange".equals(propName) || "onsubmit".equals(propName)) {
+                return false; // Case where folding should not occur due to IE bug.
+              }
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
