diff --git a/tmp/94d6b73d-f504-488d-9831-c4be5d51bd76_buggy.java b/tmp/1861c3f6-f403-4fd4-9afb-8e6681522606_fixed.java
index 19fd63e..9b225e2 100644
--- a/tmp/94d6b73d-f504-488d-9831-c4be5d51bd76_buggy.java
+++ b/tmp/1861c3f6-f403-4fd4-9afb-8e6681522606_fixed.java
@@ -1,24 +1,25 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        // We ensure the expression is not only a valid expression node
+        // but also does not have side effects or implicit uses that
+        // would lead to unexpected behavior when transformed.
+        return NodeUtil.isExpressionNode(maybeExpr) 
+            && !NodeUtil.mayHaveSideEffects(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
