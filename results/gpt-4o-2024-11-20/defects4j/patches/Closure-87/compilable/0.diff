diff --git a/tmp/61f8a963-2a2e-43c7-b7c9-bdafe22a7ad8_buggy.java b/tmp/cb731c48-abd1-44a9-be1b-dda5ee38f1fe_fixed.java
index 19fd63e..c7fd3dd 100644
--- a/tmp/61f8a963-2a2e-43c7-b7c9-bdafe22a7ad8_buggy.java
+++ b/tmp/cb731c48-abd1-44a9-be1b-dda5ee38f1fe_fixed.java
@@ -1,24 +1,23 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, but not an EXPR_RESULT where the expression might
+   *     have observable side effects in IE.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
+          Node inner = maybeExpr.getFirstChild();
+          // Detect cases where the expression might have side effects in IE.
+          // Specifically, cases where the expression is a method call with an
+          // implicit 'this' (e.g., `f.onchange()`).
+          if (NodeUtil.isGet(inner)) {
+            return false;
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
