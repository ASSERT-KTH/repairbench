diff --git a/tmp/0f44ab55-1070-45c4-b67b-a0ffc3f7d316_buggy.java b/tmp/cc493bca-3cd8-4b5d-b5dd-5ee07d3db11d_fixed.java
index 9976e43..3fe195f 100644
--- a/tmp/0f44ab55-1070-45c4-b67b-a0ffc3f7d316_buggy.java
+++ b/tmp/cc493bca-3cd8-4b5d-b5dd-5ee07d3db11d_fixed.java
@@ -1,76 +1,55 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
-    // This is described in Draft 2 of the ES4 spec,
-    // Section 3.4.7: Subtyping Function Types.
-
-    // this.returnType <: that.returnType (covariant)
+  // Check if this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Check if the parameters follow contravariance rules
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
+
+  while (thisParam != null || thatParam != null) { // Ensure both parameter lists are handled
+    JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;
+    JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;
+
+    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
+
+    // If "that.param" is null but "this.param" is required, fail (missing required argument)
+    if (thisParamType != null && !thisIsVarArgs && thatParamType == null) {
       return false;
     }
-      }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    // Check contravariance: that.paramType[i] <: this.paramType[i]
+    if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {
+      return false;
+    }
 
-      // don't advance if we have variable arguments
+    // Don't advance if we're at varargs; otherwise, step forward
     if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+      thisParam = thisParam != null ? thisParam.getNext() : null;
     }
     if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+      thatParam = thatParam != null ? thatParam.getNext() : null;
     }
 
-      // both var_args indicates the end
+    // Break if both are varargs, as there are no more checks to perform
     if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // Ensure "that" doesn't miss any required arguments
+  if (thisParam != null && !thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+    return false;
+  }
 
   return true;
 }
\ No newline at end of file
