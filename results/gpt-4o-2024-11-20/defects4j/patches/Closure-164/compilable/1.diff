diff --git a/tmp/265966a4-9844-4035-af23-92538074e689_buggy.java b/tmp/4f11fd4c-9880-40cb-9bd0-7de45a01e857_fixed.java
index 9976e43..b9f0673 100644
--- a/tmp/265966a4-9844-4035-af23-92538074e689_buggy.java
+++ b/tmp/4f11fd4c-9880-40cb-9bd0-7de45a01e857_fixed.java
@@ -1,76 +1,61 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
+
+    while (thisParam != null || thatParam != null) {
+      JSType thisParamType = thisParam != null ? thisParam.getJSType() : null;
+      JSType thatParamType = thatParam != null ? thatParam.getJSType() : null;
+
+      // If "that" has fewer parameters than "this" and the remaining
+      // parameters in "this" are not optional, return false.
+      if (thisParam != null && !thisParam.isOptionalArg() && thatParam == null) {
+        return false;
+      }
+
+      // If we are comparing param types and they are incompatible, return false.
+      if (thisParamType != null && thatParamType != null &&
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
+
+      boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+      boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
+
+      // Check varargs compatibility
+      if (thisIsVarArgs && !thatIsVarArgs) {
+        return false;
       }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+      // Advance parameters, taking varargs into account
       if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
+        thisParam = thisParam != null ? thisParam.getNext() : null;
       }
       if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
+        thatParam = thatParam != null ? thatParam.getNext() : null;
       }
 
-      // both var_args indicates the end
+      // If both are varargs, stop iteration
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
-
     return true;
   }
\ No newline at end of file
