diff --git a/tmp/87fbdfd2-aac6-4e3d-b89e-33b99dd6870e_buggy.java b/tmp/27643730-cd42-4a52-b7cb-c6324edfda0e_fixed.java
index 21f64c6..1d9af69 100644
--- a/tmp/87fbdfd2-aac6-4e3d-b89e-33b99dd6870e_buggy.java
+++ b/tmp/27643730-cd42-4a52-b7cb-c6324edfda0e_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+            // scan to first instance of startChar:
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+            
+            if (offset >= length) break; // Ensure offset doesn't go out of bounds
+            
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last <= length) { // Ensure sequence fits within bounds
+                int j;
+                for (j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+                if (i == last && j == seq.length() - 1) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
