diff --git a/tmp/424fee2a-0eaf-4db2-86dd-fa9faca1bcbb_buggy.java b/tmp/08498d09-32ee-41d5-b466-67a634089575_fixed.java
index 21f64c6..930afdd 100644
--- a/tmp/424fee2a-0eaf-4db2-86dd-fa9faca1bcbb_buggy.java
+++ b/tmp/08498d09-32ee-41d5-b466-67a634089575_fixed.java
@@ -1,23 +1,27 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+        int seqLength = seq.length();
+        int maxScan = length - seqLength; // limit to avoid scanning past the end of input
+        
+        for (int offset = pos; offset <= maxScan; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+                while (++offset <= maxScan && startChar != input[offset]);
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int last = i + seqLength - 1;
+            if (offset <= maxScan) {
+                int j = 1;
+                for (; i < last && seq.charAt(j) == input[i]; i++, j++);
+                if (i == last && seq.charAt(j) == input[i]) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
