diff --git a/tmp/c443485a-ba1a-4ae2-a3c6-f49c626d0e9e_buggy.java b/tmp/0be8a380-86dc-4a3a-81ba-35c0f37e2f0b_fixed.java
index 21f64c6..c55b7d8 100644
--- a/tmp/c443485a-ba1a-4ae2-a3c6-f49c626d0e9e_buggy.java
+++ b/tmp/0be8a380-86dc-4a3a-81ba-35c0f37e2f0b_fixed.java
@@ -1,23 +1,30 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+            if (offset + seqLength > length) {
+                // If the remaining characters are fewer than the sequence length, stop checking
+                return -1;
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
+            int last = i + seqLength - 1;
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                int j = 1;
+                for (; i < last && j < seqLength && seq.charAt(j) == input[i]; i++, j++);
+                if (j == seqLength) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
