diff --git a/tmp/5715dd1a-13f5-4328-a294-6eae1d5d0cbf_buggy.java b/tmp/56d08378-9002-456a-8276-b78cc4fd4720_fixed.java
index 21f64c6..8f08d22 100644
--- a/tmp/5715dd1a-13f5-4328-a294-6eae1d5d0cbf_buggy.java
+++ b/tmp/56d08378-9002-456a-8276-b78cc4fd4720_fixed.java
@@ -1,23 +1,37 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
+
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while (++offset < length && startChar != input[offset]);
+            
+            if (offset + seqLength > length) {
+                // If there aren't enough remaining characters to match the sequence, break early
+                break;
+            }
+
             int i = offset + 1;
             int last = i + seq.length() - 1;
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                boolean found = true;
+                for (int j = 1; i < last; i++, j++) {
+                    if (seq.charAt(j) != input[i]) {
+                        found = false;
+                        break;
+                    }
+                }
+                if (found && i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
