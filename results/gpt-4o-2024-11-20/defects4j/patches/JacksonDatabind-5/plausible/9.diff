diff --git a/tmp/c7eb9082-7571-4fb7-bdac-b0431de046b4_buggy.java b/tmp/e6a7ab5c-6488-4d5b-9ecd-7d7dd138073d_fixed.java
index b2db1d6..f0ef2d9 100644
--- a/tmp/c7eb9082-7571-4fb7-bdac-b0431de046b4_buggy.java
+++ b/tmp/e6a7ab5c-6488-4d5b-9ecd-7d7dd138073d_fixed.java
@@ -1,29 +1,25 @@
     protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
     {
         List<Class<?>> parents = new ArrayList<Class<?>>();
         parents.add(mixInCls);
         ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
         for (Class<?> mixin : parents) {
             for (Method m : mixin.getDeclaredMethods()) {
                 if (!_isIncludableMemberMethod(m)) {
                     continue;
                 }
+                // Check if we already have the method in our primary map
                 AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
                 if (am != null) {
+                    // If present, augment the existing method
                     _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
                 } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                    // Otherwise, check if it's already added in the mix-in map
+                    if (mixIns.find(m) == null) {
                         mixIns.add(_constructMethod(m));
                     }
                 }
             }
         }
+    }
\ No newline at end of file
