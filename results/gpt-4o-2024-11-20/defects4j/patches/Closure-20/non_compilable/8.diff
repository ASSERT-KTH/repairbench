diff --git a/tmp/32f96010-2328-4cae-85b0-f626214c1805_buggy.java b/tmp/384e3b82-7d63-482b-ac4b-87f0ed4c4667_fixed.java
index d4e6d48..3b97c22 100644
--- a/tmp/32f96010-2328-4cae-85b0-f626214c1805_buggy.java
+++ b/tmp/384e3b82-7d63-482b-ac4b-87f0ed4c4667_fixed.java
@@ -1,23 +1,29 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
+      // Fold String(a) to '' + (a) on immutable literals
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && value.getNext() == null && isSafeToCastToString(value)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
     return n;
   }
+
+  private boolean isSafeToCastToString(Node value) {
+    // Check if the value is safe for transformation into a string.
+    // Immutable literals like numbers, strings, and booleans are safe.
+    // Exclude complex objects or function calls.
+    return value.isStringLit() || value.isNumber() || value.isBoolean() || value.isNull();
+  }
\ No newline at end of file
