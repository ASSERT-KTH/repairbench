diff --git a/tmp/e16b951d-a3b3-45cc-a014-27742f4c46a3_buggy.java b/tmp/dcd34810-a16c-4b0e-a93b-d443ac8caf4d_fixed.java
index 3effef5..af423ae 100644
--- a/tmp/e16b951d-a3b3-45cc-a014-27742f4c46a3_buggy.java
+++ b/tmp/dcd34810-a16c-4b0e-a93b-d443ac8caf4d_fixed.java
@@ -1,73 +1,84 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    Object bean = null;
+    boolean beanBuilt = false;
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+            if (!buffer.readIdProperty(propName) && buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
+                // Builder is completed, advance to next token processing
                 t = p.nextToken();
-                    Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
+                    beanBuilt = true;
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
-                    while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
-                        tokens.copyCurrentStructure(p);
-                        t = p.nextToken();
-                    }
-                    tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
+
+                // Continue processing remaining fields after building
+                while (t == JsonToken.FIELD_NAME) {
+                    p.nextToken();
+                    tokens.copyCurrentStructure(p);
+                    t = p.nextToken();
+                }
+                break;
             }
             continue;
         }
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
         // regular property? needs buffering
         SettableBeanProperty prop = _beanProperties.find(propName);
         if (prop != null) {
+            if (beanBuilt) {
+                prop.deserializeAndSet(p, ctxt, bean);
+            } else {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
+            }
             continue;
         }
         if (_ignorableProps != null && _ignorableProps.contains(propName)) {
             handleIgnoredProperty(p, ctxt, handledType(), propName);
             continue;
         }
         tokens.writeFieldName(propName);
         tokens.copyCurrentStructure(p);
         // "any property"?
-            if (_anySetter != null) {
+        if (_anySetter != null && !beanBuilt) {
             buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
         }
     }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+    // If not built yet, build now:
+    if (!beanBuilt) {
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
+    }
+
+    tokens.writeEndObject();
     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
 }
\ No newline at end of file
