diff --git a/tmp/d74d7f14-7c7f-4578-a42e-93146a94cc68_buggy.java b/tmp/72005486-e783-4fd9-9cb3-06fc78dc2201_fixed.java
index 3effef5..3cd8bf3 100644
--- a/tmp/d74d7f14-7c7f-4578-a42e-93146a94cc68_buggy.java
+++ b/tmp/72005486-e783-4fd9-9cb3-06fc78dc2201_fixed.java
@@ -1,73 +1,87 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
             DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
+        Object bean = null;
+
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
-                    Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
+                    // Continue processing the remaining fields using the already created bean
                     while (t == JsonToken.FIELD_NAME) {
+                        propName = p.getCurrentName();
                         p.nextToken();
+                        SettableBeanProperty prop = _beanProperties.find(propName);
+                        if (prop != null) {
+                            prop.deserializeAndSet(p, ctxt, bean);
+                        } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                            handleIgnoredProperty(p, ctxt, bean.getClass(), propName);
+                        } else {
+                            tokens.writeFieldName(propName);
                             tokens.copyCurrentStructure(p);
+                            if (_anySetter != null) {
+                                _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                            }
+                        }
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
-        Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
+        // If the bean has not yet been created, create it now
+        if (bean == null) {
             try {
                 bean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 return wrapInstantiationProblem(e, ctxt);
             }
+        }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
\ No newline at end of file
