diff --git a/tmp/8184c664-c626-4428-94ed-7cf65779cfec_buggy.java b/tmp/61f24dc6-553f-4fe1-8ce5-655afa514c47_fixed.java
index 3075782..73e71ab 100644
--- a/tmp/8184c664-c626-4428-94ed-7cf65779cfec_buggy.java
+++ b/tmp/61f24dc6-553f-4fe1-8ce5-655afa514c47_fixed.java
@@ -1,82 +1,84 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
     boolean hasSideEffects = false;
     if (block.hasChildren()) {
       Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
       if (stmt.isReturn()) {
         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
       }
     }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
-        // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
-        // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+      // For each named parameter, check if it is used in a way that disqualifies inlining.
       if (fnParam != null) {
         if (cArg != null) {
+          // Check if the call argument could have side effects.
           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
             return CanInlineResult.NO;
           }
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
+          // If an argument can mutate state and the corresponding parameter is referenced
+          // more than once in the function, inlining cannot proceed.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+          // Check if parameters are modified directly.
+          if (NodeUtil.isParameterReferencedInModifyingContext(block, fnParam.getString())) {
+            return CanInlineResult.NO;
+          }
         }
 
-        // Move to the next name.
+        // Move to the next parameter.
         fnParam = fnParam.getNext();
       }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+      // For every call argument, check for side effects, even if there isn't a matching parameter.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
