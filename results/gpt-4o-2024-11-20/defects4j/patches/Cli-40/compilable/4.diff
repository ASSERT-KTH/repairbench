diff --git a/tmp/eebc9920-5d31-4e83-a51e-286c02b037cb_buggy.java b/tmp/68ca9e52-554e-4d22-a132-574588532479_fixed.java
index a7d0787..415f6dd 100644
--- a/tmp/eebc9920-5d31-4e83-a51e-286c02b037cb_buggy.java
+++ b/tmp/68ca9e52-554e-4d22-a132-574588532479_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
+        try {
             if (PatternOptionBuilder.STRING_VALUE == clazz)
             {
                 return (T) str;
             }
             else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
             {
                 return (T) createObject(str);
             }
             else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
             {
                 return (T) createNumber(str);
             }
             else if (PatternOptionBuilder.DATE_VALUE == clazz)
             {
                 return (T) createDate(str);
             }
             else if (PatternOptionBuilder.CLASS_VALUE == clazz)
             {
                 return (T) createClass(str);
             }
             else if (PatternOptionBuilder.FILE_VALUE == clazz)
             {
                 return (T) createFile(str);
             }
             else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
             {
                 return (T) openFile(str);
             }
             else if (PatternOptionBuilder.FILES_VALUE == clazz)
             {
                 return (T) createFiles(str);
             }
             else if (PatternOptionBuilder.URL_VALUE == clazz)
             {
                 return (T) createURL(str);
             }
+            else if (clazz.isAssignableFrom(Integer.class))
+            {
+                return (T) Integer.valueOf(str);
+            }
+            else if (clazz.isAssignableFrom(Double.class))
+            {
+                return (T) Double.valueOf(str);
+            }
+            else if (clazz.isAssignableFrom(Float.class))
+            {
+                return (T) Float.valueOf(str);
+            }
+            else if (clazz.isAssignableFrom(Long.class))
+            {
+                return (T) Long.valueOf(str);
+            }
+            else if (clazz.isAssignableFrom(Boolean.class))
+            {
+                return (T) Boolean.valueOf(str);
+            }
             else
             {
-            return null;
+                throw new ParseException("Unsupported class type: " + clazz.getName());
+            }
+        } catch (Exception e) {
+            throw new ParseException("Failed to create value for " + clazz.getName() + ": " + e.getMessage());
         }
     }
\ No newline at end of file
