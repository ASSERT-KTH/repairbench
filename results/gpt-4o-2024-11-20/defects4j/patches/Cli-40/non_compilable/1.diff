diff --git a/tmp/8844124a-ed2f-414c-8d7d-49eb1d2662a1_buggy.java b/tmp/eaaefc6d-797c-4f66-b8be-a58c3b994ef1_fixed.java
index a7d0787..d361967 100644
--- a/tmp/8844124a-ed2f-414c-8d7d-49eb1d2662a1_buggy.java
+++ b/tmp/eaaefc6d-797c-4f66-b8be-a58c3b994ef1_fixed.java
@@ -1,54 +1,55 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
+    {
+        try 
         {
             if (PatternOptionBuilder.STRING_VALUE == clazz)
             {
                 return (T) str;
             }
             else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
             {
                 return (T) createObject(str);
             }
             else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
             {
                 return (T) createNumber(str);
             }
             else if (PatternOptionBuilder.DATE_VALUE == clazz)
             {
                 return (T) createDate(str);
             }
             else if (PatternOptionBuilder.CLASS_VALUE == clazz)
             {
                 return (T) createClass(str);
             }
             else if (PatternOptionBuilder.FILE_VALUE == clazz)
             {
                 return (T) createFile(str);
             }
             else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
             {
                 return (T) openFile(str);
             }
             else if (PatternOptionBuilder.FILES_VALUE == clazz)
             {
                 return (T) createFiles(str);
             }
             else if (PatternOptionBuilder.URL_VALUE == clazz)
             {
                 return (T) createURL(str);
             }
+            else if (Number.class.isAssignableFrom(clazz))
+            {
+                return (T) createNumber(str); // Handles other Number subclasses like Integer, Double, etc.
+            }
             else
             {
-            return null;
+                throw new ParseException("Unsupported class type: " + clazz.getName());
+            }
+        } 
+        catch (ClassCastException | IllegalArgumentException e) 
+        {
+            throw new ParseException("Failed to create value for class type: " + clazz.getName() + " from input: " + str);
         }
     }
\ No newline at end of file
