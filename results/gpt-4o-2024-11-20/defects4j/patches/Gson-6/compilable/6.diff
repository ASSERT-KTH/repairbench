diff --git a/tmp/58ecf24a-b351-4dfb-a46b-2012f1431033_buggy.java b/tmp/35acd2e0-2740-4c8f-a61d-73f5458aa2c8_fixed.java
index 1c53d31..982feba 100644
--- a/tmp/58ecf24a-b351-4dfb-a46b-2012f1431033_buggy.java
+++ b/tmp/35acd2e0-2740-4c8f-a61d-73f5458aa2c8_fixed.java
@@ -1,20 +1,25 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
+  Object instance;
   if (TypeAdapter.class.isAssignableFrom(value)) {
     Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+    instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
   } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
     Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+    instance = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+
+  if (instance instanceof TypeAdapter) {
+    return ((TypeAdapter<?>) instance).nullSafe();
+  } else if (instance instanceof TypeAdapterFactory) {
+    return ((TypeAdapterFactory) instance).create(gson, fieldType).nullSafe();
+  } else {
+    throw new IllegalArgumentException(
+        "Invalid @JsonAdapter value. It must be either a TypeAdapter or TypeAdapterFactory.");
+  }
 }
\ No newline at end of file
