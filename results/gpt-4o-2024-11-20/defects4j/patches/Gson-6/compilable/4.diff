diff --git a/tmp/578c754e-19de-46a0-bda9-4f2f20903735_buggy.java b/tmp/79d2909f-eab5-4cb4-9b15-57ee97506383_fixed.java
index 1c53d31..4e065f0 100644
--- a/tmp/578c754e-19de-46a0-bda9-4f2f20903735_buggy.java
+++ b/tmp/79d2909f-eab5-4cb4-9b15-57ee97506383_fixed.java
@@ -1,20 +1,25 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
+    Object instance;
     if (TypeAdapter.class.isAssignableFrom(value)) {
       Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
+      instance = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
     } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
       Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+      instance = constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();
+      instance = ((TypeAdapterFactory) instance).create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+
+    // Ensure instance is a TypeAdapter before calling nullSafe to avoid NullPointerException
+    if (instance instanceof TypeAdapter) {
+      return ((TypeAdapter<?>) instance).nullSafe();
+    } else {
+      throw new IllegalArgumentException(
+          "@JsonAdapter value must produce a TypeAdapter instance.");
+    }
   }
\ No newline at end of file
