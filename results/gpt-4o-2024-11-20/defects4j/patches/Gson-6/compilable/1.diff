diff --git a/tmp/896f852c-e6a0-4ded-9555-2b080113cb66_buggy.java b/tmp/8faed092-0951-4510-b4b2-df14656c5ee9_fixed.java
index 1c53d31..72e2dc2 100644
--- a/tmp/896f852c-e6a0-4ded-9555-2b080113cb66_buggy.java
+++ b/tmp/8faed092-0951-4510-b4b2-df14656c5ee9_fixed.java
@@ -1,20 +1,24 @@
 @SuppressWarnings("unchecked") // Casts guarded by conditionals.
 static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
     TypeToken<?> fieldType, JsonAdapter annotation) {
   Class<?> value = annotation.value();
-    TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+  Object instance;
+  
+  try {
+    instance = constructorConstructor.get(TypeToken.get(value)).construct();
+  } catch (Exception e) {
+    throw new IllegalArgumentException(
+        "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference and must have a no-arguments constructor.", e);
+  }
+  
+  if (instance instanceof TypeAdapter) {
+    TypeAdapter<?> typeAdapter = (TypeAdapter<?>) instance;
+    return typeAdapter.nullSafe();
+  } else if (instance instanceof TypeAdapterFactory) {
+    TypeAdapterFactory typeAdapterFactory = (TypeAdapterFactory) instance;
+    return typeAdapterFactory.create(gson, fieldType).nullSafe();
   } else {
     throw new IllegalArgumentException(
         "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
   }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
 }
\ No newline at end of file
