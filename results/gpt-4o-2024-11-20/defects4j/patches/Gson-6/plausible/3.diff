diff --git a/tmp/a8a16496-9e0e-4f16-97e5-4afa791cdd04_buggy.java b/tmp/5e10850b-8301-46e8-9cea-a5c2b339515a_fixed.java
index 1c53d31..cea34c2 100644
--- a/tmp/a8a16496-9e0e-4f16-97e5-4afa791cdd04_buggy.java
+++ b/tmp/5e10850b-8301-46e8-9cea-a5c2b339515a_fixed.java
@@ -1,20 +1,25 @@
   @SuppressWarnings("unchecked") // Casts guarded by conditionals.
   static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson,
       TypeToken<?> fieldType, JsonAdapter annotation) {
     Class<?> value = annotation.value();
+    Object instance;
+    
+    try {
+      instance = constructorConstructor.get(TypeToken.get(value)).construct();
+    } catch (Exception e) {
+      throw new IllegalArgumentException(
+          "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.", e);
+    }
+    
     TypeAdapter<?> typeAdapter;
-    if (TypeAdapter.class.isAssignableFrom(value)) {
-      Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();
-    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {
-      Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;
-      typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))
-          .construct()
-          .create(gson, fieldType);
+    if (instance instanceof TypeAdapter) {
+      typeAdapter = (TypeAdapter<?>) instance;
+    } else if (instance instanceof TypeAdapterFactory) {
+      typeAdapter = ((TypeAdapterFactory) instance).create(gson, fieldType);
     } else {
       throw new IllegalArgumentException(
           "@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
     }
-      typeAdapter = typeAdapter.nullSafe();
-    return typeAdapter;
+
+    return typeAdapter != null ? typeAdapter.nullSafe() : null;
   }
\ No newline at end of file
