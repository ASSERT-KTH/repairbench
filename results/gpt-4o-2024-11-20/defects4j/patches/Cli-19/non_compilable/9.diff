diff --git a/tmp/8c2995c6-cfe8-4d58-8454-b29cb34eb8df_buggy.java b/tmp/c1f34cd2-18bc-4a03-bb4a-d186e0a572c6_fixed.java
index 62e8ec8..48944c4 100644
--- a/tmp/8c2995c6-cfe8-4d58-8454-b29cb34eb8df_buggy.java
+++ b/tmp/c1f34cd2-18bc-4a03-bb4a-d186e0a572c6_fixed.java
@@ -1,26 +1,35 @@
     /**
      * <p>If an {@link Option} exists for <code>token</code> then
      * set the current option and add the token to the processed 
      * list.</p>
      *
      * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
-     * is set then ignore the current token and add the remaining tokens
+     * is set, then ignore the current token and add the remaining tokens
      * to the processed tokens list directly.</p>
      *
+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>
+     * is not set, throw an {@link UnrecognizedOptionException}.</p>
+     *
      * @param token The current option token
      * @param stopAtNonOption Specifies whether flattening should halt
      * at the first non option.
+     * @throws UnrecognizedOptionException If an unrecognized option is encountered
+     * and <code>stopAtNonOption</code> is not set.
      */
-    private void processOptionToken(String token, boolean stopAtNonOption)
+    private void processOptionToken(String token, boolean stopAtNonOption) throws UnrecognizedOptionException
     {
         if (options.hasOption(token))
         {
             currentOption = options.getOption(token);
             tokens.add(token);
         }
         else if (stopAtNonOption)
         {
             eatTheRest = true;
             tokens.add(token);
         }
+        else
+        {
+            throw new UnrecognizedOptionException("Unrecognized option: " + token, token);
+        }
     }
\ No newline at end of file
