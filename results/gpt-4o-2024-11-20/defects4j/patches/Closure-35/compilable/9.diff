diff --git a/tmp/824851b6-a45f-49a9-bffc-4f21c67b3bca_buggy.java b/tmp/e5f19738-a6e1-45b0-b8d3-ba0305ff89ca_fixed.java
index d57736b..fc19ebc 100644
--- a/tmp/824851b6-a45f-49a9-bffc-4f21c67b3bca_buggy.java
+++ b/tmp/e5f19738-a6e1-45b0-b8d3-ba0305ff89ca_fixed.java
@@ -1,39 +1,28 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
-          if (!objType.isPropertyTypeDeclared(prop)) {
+          // Ensure that the property is valid and proceed to infer types
+          if (!objType.isPropertyTypeDeclared(prop) || !objType.hasProperty(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              // Widen the property type appropriately to handle undefined cases
+              typeToInfer = propType == null 
+                  ? getNativeType(VOID_TYPE) 
+                  : getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
