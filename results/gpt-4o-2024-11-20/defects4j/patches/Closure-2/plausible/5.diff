diff --git a/tmp/2cf79e44-f937-449a-87d1-e34cb70c875c_buggy.java b/tmp/2624de98-e6c5-410e-93a9-0fc88d731494_fixed.java
index 8ff679b..ededb73 100644
--- a/tmp/2cf79e44-f937-449a-87d1-e34cb70c875c_buggy.java
+++ b/tmp/2624de98-e6c5-410e-93a9-0fc88d731494_fixed.java
@@ -1,39 +1,50 @@
   /**
    * Check whether there's any property conflict for for a particular super
    * interface
    * @param t The node traversal object that supplies context
    * @param n The node being visited
    * @param functionName The function name being checked
    * @param properties The property names in the super interfaces that have
    * been visited
    * @param currentProperties The property names in the super interface
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
   private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
+    if (interfaceType == null) {
+      // If the interfaceType is null, it indicates a problem with the 
+      // type annotation, but the code should not crash.
+      return;
+    }
+
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+      // If the prototype is null, skip further checks.
+      return;
+    }
+
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (currentPropertyNames != null) {
       for (String name : currentPropertyNames) {
         ObjectType oType = properties.get(name);
         if (oType != null) {
           if (!interfaceType.getPropertyType(name).isEquivalentTo(
               oType.getPropertyType(name))) {
             compiler.report(
                 t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
                     functionName, name, oType.toString(),
                     interfaceType.toString()));
           }
         }
         currentProperties.put(name, interfaceType);
       }
+    }
+
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);
     }
   }
\ No newline at end of file
