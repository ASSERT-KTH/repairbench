diff --git a/tmp/63f12e35-8e33-4671-9055-5229129e5e7f_buggy.java b/tmp/84d77334-a2bf-468c-8d81-85b9f3a29a4e_fixed.java
index e0ecec8..8fe8053 100644
--- a/tmp/63f12e35-8e33-4671-9055-5229129e5e7f_buggy.java
+++ b/tmp/84d77334-a2bf-468c-8d81-85b9f3a29a4e_fixed.java
@@ -1,35 +1,44 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+    boolean isVarArgsFunction = functionType.hasVarArgs();
+
+    while (arguments.hasNext()) {
       argument = arguments.next();
       ordinal++;
 
+      if (parameters.hasNext()) {
+        parameter = parameters.next();
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else if (isVarArgsFunction) {
+        // For var_args functions, validate the remaining arguments individually
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(functionType.getVarArgsType()), call, ordinal);
+      } else {
+        // More arguments provided than function accepts and it's not var_args
+        break;
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+
+    if (minArgs > numArgs || (!isVarArgsFunction && maxArgs < numArgs)) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
