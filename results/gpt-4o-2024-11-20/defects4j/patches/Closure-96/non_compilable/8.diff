diff --git a/tmp/136cb3ad-9ebe-4a43-9b77-e31ff3bed7da_buggy.java b/tmp/652c2375-47e7-4e5b-929e-299811571fb1_fixed.java
index e0ecec8..ff37995 100644
--- a/tmp/136cb3ad-9ebe-4a43-9b77-e31ff3bed7da_buggy.java
+++ b/tmp/652c2375-47e7-4e5b-929e-299811571fb1_fixed.java
@@ -1,35 +1,48 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
-      argument = arguments.next();
+
+  while (arguments.hasNext()) {
+    Node argument = arguments.next();
     ordinal++;
 
+    if (parameters.hasNext()) {
+      Node parameter = parameters.next();
       validator.expectArgumentMatchesParameter(t, argument,
           getJSType(argument), getJSType(parameter), call, ordinal);
+    } else if (!functionType.isVarArgs()) {
+      // Report an error if the function is not variadic and there are extra arguments
+      report(t, call, WRONG_ARGUMENT_COUNT,
+          validator.getReadableJSTypeName(call.getFirstChild(), false),
+          String.valueOf(ordinal),
+          String.valueOf(functionType.getMinArguments()),
+          functionType.getMaxArguments() != Integer.MAX_VALUE ?
+              " and no more than " + functionType.getMaxArguments() + " argument(s)" : "");
+    } else {
+      // For a variadic function, validate the rest of the arguments
+      JSType varArgsType = functionType.getVarArgsType();
+      if (varArgsType != null) {
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), varArgsType, call, ordinal);
+      }
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (numArgs < minArgs || (!functionType.isVarArgs() && numArgs > maxArgs)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
         String.valueOf(numArgs), String.valueOf(minArgs),
         maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
