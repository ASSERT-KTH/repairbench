diff --git a/tmp/145117dd-6435-48d4-b046-c3e121058bfe_buggy.java b/tmp/866367fe-aab6-418d-8465-0d14033ad49f_fixed.java
index 99f4092..b580600 100644
--- a/tmp/145117dd-6435-48d4-b046-c3e121058bfe_buggy.java
+++ b/tmp/866367fe-aab6-418d-8465-0d14033ad49f_fixed.java
@@ -1,13 +1,32 @@
     /**
      * Creates a time period for the week in which the specified date/time
      * falls, calculated relative to the specified time zone.
      *
      * @param time  the date/time (<code>null</code> not permitted).
      * @param zone  the time zone (<code>null</code> not permitted).
      *
      * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
      */
     public Week(Date time, TimeZone zone) {
-        // defer argument checking...
-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());
+        if (time == null) {
+            throw new IllegalArgumentException("Null 'time' argument.");
+        }
+        if (zone == null) {
+            throw new IllegalArgumentException("Null 'zone' argument.");
+        }
+        Calendar calendar = Calendar.getInstance(zone);
+        calendar.setTime(time);
+        int week = calendar.get(Calendar.WEEK_OF_YEAR);
+        int year = calendar.get(Calendar.YEAR);
+
+        // Check for week adjustment due to year boundary
+        if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && week > 50) {
+            year--;
+        } else if (calendar.get(Calendar.MONTH) == Calendar.DECEMBER && week == 1) {
+            year++;
+        }
+
+        this.week = week;
+        this.year = year;
+        this.firstDay = calendar.getFirstDayOfWeek();
     }
\ No newline at end of file
