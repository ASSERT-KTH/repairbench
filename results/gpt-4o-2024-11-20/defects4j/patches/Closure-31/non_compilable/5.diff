diff --git a/tmp/40848312-b380-48c9-b1b7-8d9439acb5c2_buggy.java b/tmp/fab811e5-f3a3-4bf4-be19-d5adf39f5c17_fixed.java
index ae9ef3f..f3f7e78 100644
--- a/tmp/40848312-b380-48c9-b1b7-8d9439acb5c2_buggy.java
+++ b/tmp/fab811e5-f3a3-4bf4-be19-d5adf39f5c17_fixed.java
@@ -1,158 +1,162 @@
-  /**
-   * Parses the externs and main inputs.
-   *
-   * @return A synthetic root node whose two children are the externs root
-   *     and the main root
-   */
 Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
         externsRoot.detachChildren();
     }
     if (jsRoot != null) {
         jsRoot.detachChildren();
     }
 
     // Parse main js sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
         tracker = new PerformanceTracker(jsRoot, options.tracer);
         addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
         // Parse externs sources.
         for (CompilerInput input : externs) {
             Node n = input.getAstRoot(this);
             if (hasErrors()) {
                 return null;
             }
             externsRoot.addChildToBack(n);
         }
 
         // Modules inferred in ProcessCommonJS pass.
         if (options.transformAMDToCJSModules || options.processCommonJSModules) {
             processAMDAndCommonJSModules();
         }
 
         // Check if inputs need to be rebuilt from modules.
         boolean staleInputs = false;
 
         // Check if the sources need to be re-ordered.
         if (options.dependencyOptions.needsManagement() &&
             !options.skipAllPasses &&
             options.closurePass) {
             for (CompilerInput input : inputs) {
                 // Forward-declare all the provided types, so that they
                 // are not flagged even if they are dropped from the process.
                 for (String provide : input.getProvides()) {
                     getTypeRegistry().forwardDeclareType(provide);
                 }
             }
 
             try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
+                inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
                         .manageDependencies(options.dependencyOptions, inputs);
                 staleInputs = true;
             } catch (CircularDependencyException e) {
-          report(JSError.make(
-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
+                report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                 if (hasErrors()) {
                     return null;
                 }
             } catch (MissingProvideException e) {
-          report(JSError.make(
-              MISSING_ENTRY_ERROR, e.getMessage()));
-
-          // If in IDE mode, we ignore the error and keep going.
+                report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));
                 if (hasErrors()) {
                     return null;
                 }
             }
         }
 
+        // Handle inputs and their metadata.
         for (CompilerInput input : inputs) {
             Node n = input.getAstRoot(this);
 
             // Inputs can have a null AST during initial parse.
             if (n == null) {
                 continue;
             }
 
             if (n.getJSDocInfo() != null) {
                 JSDocInfo info = n.getJSDocInfo();
                 if (info.isExterns()) {
-            // If the input file is explicitly marked as an externs file, then
-            // assume the programmer made a mistake and throw it into
-            // the externs pile anyways.
+                    // Add explicitly marked externs to the externs root.
                     externsRoot.addChildToBack(n);
                     input.setIsExtern(true);
 
                     input.getModule().remove(input);
 
                     externs.add(input);
                     staleInputs = true;
                 } else if (info.isNoCompile()) {
                     input.getModule().remove(input);
                     staleInputs = true;
                 }
             }
         }
 
         if (staleInputs) {
             fillEmptyModules(modules);
             rebuildInputsFromModules();
         }
 
         // Build the AST.
         for (CompilerInput input : inputs) {
             Node n = input.getAstRoot(this);
             if (n == null) {
                 continue;
             }
 
             if (devMode) {
                 runSanityCheck();
                 if (hasErrors()) {
                     return null;
                 }
             }
 
             if (options.sourceMapOutputPath != null ||
                 options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
+                // Annotate the nodes in the tree with information from the input file.
+                SourceInformationAnnotator sia = new SourceInformationAnnotator(
                     input.getName(), options.devMode != DevMode.OFF);
                 NodeTraversal.traverse(this, n, sia);
             }
 
             jsRoot.addChildToBack(n);
         }
 
+        // Reorder the AST nodes based on dependencies, if needed.
+        if (options.dependencyOptions.needsManagement() && options.dependencyOptions.shouldSortDependencies()) {
+            try {
+                List<Node> nodes = new ArrayList<>();
+                for (Node child : jsRoot.children()) {
+                    nodes.add(child);
+                }
+                jsRoot.detachChildren(); // Clear current children
+                DependencySorter sorter = new DependencySorter(nodes);
+                List<Node> sortedNodes = sorter.sort();
+                for (Node sortedNode : sortedNodes) {
+                    jsRoot.addChildToBack(sortedNode);
+                }
+            } catch (DependencySorter.SortingException e) {
+                report(JSError.make(DEPENDENCY_SORT_ERROR, e.getMessage()));
+                if (hasErrors()) {
+                    return null;
+                }
+            }
+        }
+
         if (hasErrors()) {
             return null;
         }
         return externAndJsRoot;
     } finally {
         stopTracer(tracer, "parseInputs");
     }
 }
\ No newline at end of file
