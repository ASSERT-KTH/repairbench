diff --git a/tmp/825b2514-c0be-43df-b2c2-38a8f902eeb9_buggy.java b/tmp/bcd19dce-9a69-419e-adfa-30f9be3db85a_fixed.java
index 99141e0..538aeb3 100644
--- a/tmp/825b2514-c0be-43df-b2c2-38a8f902eeb9_buggy.java
+++ b/tmp/bcd19dce-9a69-419e-adfa-30f9be3db85a_fixed.java
@@ -1,33 +1,40 @@
 static String unescape(String string) {
     if (!string.contains("&")) 
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    StringBuffer accum = new StringBuffer(string.length());
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                int base = m.group(2) != null ? 16 : 10; // hex or decimal
+                charval = Integer.parseInt(num, base);
+                if (charval > 0x10FFFF) { // Unicode max code point check
+                    charval = -1;
+                }
             } catch (NumberFormatException e) {
-                } // skip
+                // skip if parsing fails
+            }
         } else {
             String name = m.group(1);
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
-                String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+        if (charval != -1) {
+            if (Character.isValidCodePoint(charval)) {
+                String c = new String(Character.toChars(charval)); // Properly output supplementary characters
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
             } else {
-                m.appendReplacement(accum, m.group(0));
+                m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // If invalid, leave as-is
+            }
+        } else {
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // If charval is invalid, leave as-is
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
