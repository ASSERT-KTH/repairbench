diff --git a/tmp/4a6a4efe-5014-4952-a1ef-b0396dcbd5ad_buggy.java b/tmp/a9cbe717-cfce-4979-86a3-dea937daaa7d_fixed.java
index 99141e0..5d9372d 100644
--- a/tmp/4a6a4efe-5014-4952-a1ef-b0396dcbd5ad_buggy.java
+++ b/tmp/a9cbe717-cfce-4979-86a3-dea937daaa7d_fixed.java
@@ -1,33 +1,35 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
     Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
     StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
     // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
-            if (num != null) {
+        if (num != null) { // Handle numeric character references (&#x and &#)
             try {
                 int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
-                    charval = Integer.valueOf(num, base);
+                charval = Integer.parseInt(num, base); // Corrected to parseInt for primitive handling
             } catch (NumberFormatException e) {
-                } // skip
-            } else {
+                charval = -1; // Ignore invalid numeric references
+            }
+        } else { // Handle named character references (&name;)
             String name = m.group(1);
-                if (full.containsKey(name))
+            if (name != null && full.containsKey(name)) { // Ensure name is non-null and in the map
                 charval = full.get(name);
             }
+        }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval != -1 && charval <= 0xFFFF) { // Valid character range; ensure within range
             String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            m.appendReplacement(accum, Matcher.quoteReplacement(c)); // Use quoteReplacement to handle special chars
         } else {
-                m.appendReplacement(accum, m.group(0));
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0))); // Use original if invalid or out of range
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
