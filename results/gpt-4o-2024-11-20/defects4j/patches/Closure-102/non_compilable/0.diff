diff --git a/tmp/a388febc-23fd-41cc-9a6d-a07ba063942d_buggy.java b/tmp/76ae3a0b-9050-4af7-81be-706fed7cc2fa_fixed.java
index f47d784..02eabbe 100644
--- a/tmp/a388febc-23fd-41cc-9a6d-a07ba063942d_buggy.java
+++ b/tmp/76ae3a0b-9050-4af7-81be-706fed7cc2fa_fixed.java
@@ -1,12 +1,32 @@
   @Override
   public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
       NodeTraversal t = new NodeTraversal(compiler, renamer);
       t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
+
+    // Fix: Restore the "arguments" variable if shadowed after process
+    restoreShadowedArguments(root);
+  }
+
+  private void restoreShadowedArguments(Node root) {
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {
+      @Override
+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
+        return true;
+      }
+
+      @Override
+      public void visit(NodeTraversal t, Node n, Node parent) {
+        if (n.isName() && "arguments".equals(n.getString())) {
+          // Perform necessary fix to restore the original "arguments"
+          n.putBooleanProp(Node.IS_ARGUMENTS, true);
+        }
+      }
+    });
   }
\ No newline at end of file
