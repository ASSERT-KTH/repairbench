diff --git a/tmp/51be00ac-8ea8-49dc-9155-ef39ad339b51_buggy.java b/tmp/fcfc36df-497c-4172-845f-22cce3366daa_fixed.java
index 29a9d2f..7e08ee5 100644
--- a/tmp/51be00ac-8ea8-49dc-9155-ef39ad339b51_buggy.java
+++ b/tmp/fcfc36df-497c-4172-845f-22cce3366daa_fixed.java
@@ -1,43 +1,41 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
   Node left = n.getFirstChild();
   Node arg = left.getNext();
   if (verifyLastArgumentIsString(t, left, arg)) {
     String ns = arg.getString();
     ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
-        unrecognizedRequires.add(
-            new UnrecognizedRequire(n, ns, t.getSourceName()));
+    if (provided == null) {
+      // If the namespace was not provided at all, we still need to record it as unrecognized.
+      unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));
     } else {
       JSModule providedModule = provided.explicitModule;
 
-        // This must be non-null, because there was an explicit provide.
+      // Handle cases where the namespace is explicitly provided.
+      if (provided.isExplicitlyProvided()) {
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
+    }
 
     maybeAddToSymbolTable(left);
     maybeAddStringNodeToSymbolTable(arg);
 
     // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+    if (provided != null || allowUnrecognizedRequires) {
       parent.detachFromParent();
       compiler.reportCodeChange();
     }
   }
 }
\ No newline at end of file
