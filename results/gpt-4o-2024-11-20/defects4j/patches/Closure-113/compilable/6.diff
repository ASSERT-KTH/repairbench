diff --git a/tmp/9c04ea00-99f3-4191-981b-2c8eabfb8575_buggy.java b/tmp/9cb0ba02-73ce-4d2d-acdc-3fa1567dcce9_fixed.java
index 29a9d2f..d5e609c 100644
--- a/tmp/9c04ea00-99f3-4191-981b-2c8eabfb8575_buggy.java
+++ b/tmp/9cb0ba02-73ce-4d2d-acdc-3fa1567dcce9_fixed.java
@@ -1,43 +1,42 @@
   /**
    * Handles a goog.require call.
    */
   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
       String ns = arg.getString();
       ProvidedName provided = providedNames.get(ns);
-      if (provided == null || !provided.isExplicitlyProvided()) {
+      boolean isProvided = provided != null && provided.isExplicitlyProvided();
+
+      if (!isProvided) {
         unrecognizedRequires.add(
             new UnrecognizedRequire(n, ns, t.getSourceName()));
       } else {
         JSModule providedModule = provided.explicitModule;
 
         // This must be non-null, because there was an explicit provide.
         Preconditions.checkNotNull(providedModule);
 
         JSModule module = t.getModule();
         if (moduleGraph != null &&
             module != providedModule &&
             !moduleGraph.dependsOn(module, providedModule)) {
           compiler.report(
               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                   providedModule.getName(),
                   module.getName()));
         }
       }
 
       maybeAddToSymbolTable(left);
       maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+      // Requires should not be removed unconditionally. Only remove them
+      // if they correspond to a recognized and explicitly provided namespace.
+      if (isProvided) {
         parent.detachFromParent();
         compiler.reportCodeChange();
       }
     }
   }
\ No newline at end of file
