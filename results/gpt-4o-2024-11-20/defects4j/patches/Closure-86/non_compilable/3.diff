diff --git a/tmp/8abd14e4-b910-4b06-968c-1dadbb60b0d8_buggy.java b/tmp/b7a5135b-8f54-48b1-bb42-6f97dd1695bb_fixed.java
index a3709ee..a0380b6 100644
--- a/tmp/8abd14e4-b910-4b06-968c-1dadbb60b0d8_buggy.java
+++ b/tmp/b7a5135b-8f54-48b1-bb42-6f97dd1695bb_fixed.java
@@ -1,71 +1,78 @@
   /**
    * @param locals A predicate to apply to unknown local values.
    * @return Whether the node is known to be a value that is not a reference
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
       case Token.ASSIGN:
-        // A result that is aliased by a non-local name, is the effectively the
+        // A result that is aliased by a non-local name, is effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
         return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+            && evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.COMMA:
         return evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
             && evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
             && evaluatesToLocalValue(value.getLastChild(), locals);
+
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
           return evaluatesToLocalValue(value.getFirstChild(), locals);
         } else {
           return true;
         }
+
       case Token.THIS:
-        return locals.apply(value);
+      case Token.ARGUMENTS:
+        return false;
+
       case Token.NAME:
-        return isImmutableValue(value) || locals.apply(value);
+        // A known immutable value or explicitly local name are considered local.
+        return NodeUtil.isImmutableValue(value) || locals.apply(value);
+
       case Token.GETELEM:
       case Token.GETPROP:
-        // There is no information about the locality of object properties.
-        return locals.apply(value);
+        // Object properties and array accesses are assumed to not be locally scoped.
+        return false;
+
       case Token.CALL:
         return callHasLocalResult(value)
-            || isToStringMethodCall(value)
-            || locals.apply(value);
+            || isToStringMethodCall(value);
+
       case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
-        return true;
+        // A "new" object is not considered local unless it's immutable.
+        return false;
+
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT:
       case Token.OBJECTLIT:
-        // Literals objects with non-literal children are allowed.
+        // Literals or functions are considered local.
         return true;
+
       case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
+
       default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
-        if (isAssignmentOp(value)
-            || isSimpleOperator(value)
-            || isImmutableValue(value)) {
+        // Other operations that produce primitive or immutable values are local.
+        if (NodeUtil.isAssignmentOp(value)
+            || NodeUtil.isSimpleOperator(value)
+            || NodeUtil.isImmutableValue(value)) {
           return true;
         }
 
         throw new IllegalStateException(
-            "Unexpected expression node" + value +
+            "Unexpected expression node: " + value +
             "\n parent: " + value.getParent());
     }
   }
\ No newline at end of file
