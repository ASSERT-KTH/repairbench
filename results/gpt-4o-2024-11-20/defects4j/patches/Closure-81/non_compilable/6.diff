diff --git a/tmp/53994553-2a59-4617-914f-95bc8778f6cc_buggy.java b/tmp/094cf892-2750-4c4f-9b6a-ea97d7755ef1_fixed.java
index 6e05e4b..15bfa3f 100644
--- a/tmp/53994553-2a59-4617-914f-95bc8778f6cc_buggy.java
+++ b/tmp/094cf892-2750-4c4f-9b6a-ea97d7755ef1_fixed.java
@@ -1,51 +1,54 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  Boolean isUnnamedFunction = name == null || name.getIdentifier().isEmpty(); // Fix: Account for empty identifier as unnamed
+
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
-        isUnnamedFunction = true;
   }
+
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
+
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
+    // Properly handle the left paren character position
+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
+
+  // Process left parenthesis
   Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+
+  // Ensure the line number is set properly based on the function name
+  if (name != null && !isUnnamedFunction) {
+    lp.setLineno(name.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
 
+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
   lp.setCharno(position2charno(lparenCharno));
+
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
+  // Process function body
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
+
+  // Validate that unnamed functions as statements throw an error
+  if (isUnnamedFunction && functionNode.isStatement()) {
+    throw new IllegalStateException("unnamed function statement");
+  }
+
   return node;
 }
\ No newline at end of file
