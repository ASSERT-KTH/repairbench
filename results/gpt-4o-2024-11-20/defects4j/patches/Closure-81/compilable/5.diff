diff --git a/tmp/c4a11285-c7e6-4137-b4d3-c482a8a2efef_buggy.java b/tmp/a2bf24cc-62ca-42b3-a8b3-4b4d89363141_fixed.java
index 6e05e4b..a44a0d0 100644
--- a/tmp/c4a11285-c7e6-4137-b4d3-c482a8a2efef_buggy.java
+++ b/tmp/a2bf24cc-62ca-42b3-a8b3-4b4d89363141_fixed.java
@@ -1,51 +1,35 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
-      if (name == null) {
-        name = new Name();
-        name.setIdentifier("");
-        isUnnamedFunction = true;
+    boolean isUnnamedFunction = (name == null || name.getIdentifier().isEmpty());
+    if (isUnnamedFunction) {
+        // Handle unnamed function error
+        throw new IllegalArgumentException("unnamed function statement");
     }
+
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
-      if (isUnnamedFunction) {
-        // Old Rhino tagged the empty name node with the line number of the
-        // declaration.
-        newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
-      }
 
     node.addChildToBack(newName);
     Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
+
+    // Assign line number and character number for the left paren
+    if (name != null) {
+        lp.setLineno(name.getLineno());
     } else {
         lp.setLineno(functionNode.getLineno());
     }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
-
+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
     lp.setCharno(position2charno(lparenCharno));
+
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
+
     return node;
 }
\ No newline at end of file
