diff --git a/tmp/a4912754-eb9b-40d9-b129-b0041bd70dcd_buggy.java b/tmp/b9576195-3219-4fc2-a6eb-e4387e82265b_fixed.java
index 63641d0..2c280b3 100644
--- a/tmp/a4912754-eb9b-40d9-b129-b0041bd70dcd_buggy.java
+++ b/tmp/b9576195-3219-4fc2-a6eb-e4387e82265b_fixed.java
@@ -1,33 +1,39 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Create a merged map to ensure all template types are replaced with UNKNOWN if not inferred
+    TemplateTypeMap templateTypeMap = fnType.getTemplateTypeMap();
+    Map<TemplateType, JSType> completeInferred = new HashMap<>(templateTypeMap.getResolvedTemplateTypeMap());
+    completeInferred.putAll(inferred);
+    for (TemplateType key : keys) {
+      completeInferred.putIfAbsent(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, completeInferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
