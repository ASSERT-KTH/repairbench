diff --git a/tmp/b7a4148f-630e-4537-8609-aa09b65298b8_buggy.java b/tmp/4844194a-10bb-4908-9df9-2221743be9a9_fixed.java
index 63641d0..7dbe707 100644
--- a/tmp/b7a4148f-630e-4537-8609-aa09b65298b8_buggy.java
+++ b/tmp/4844194a-10bb-4908-9df9-2221743be9a9_fixed.java
@@ -1,33 +1,49 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Ensure inferred is not null to prevent potential issues
+    if (inferred == null) {
+      return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
+    // Ensure we properly handle corner cases in fnType visitation
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+
+    // If visiting does not yield a function type, return false
+    if (replacementFnType == null) {
+      return false;
+    }
 
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    JSType returnType = replacementFnType.getReturnType();
+
+    // Ensure returnType is set to UNKNOWN if it couldn't be inferred
+    if (returnType == null) {
+      returnType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+    }
+
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
   }
\ No newline at end of file
