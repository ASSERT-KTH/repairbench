diff --git a/tmp/2148b74c-1630-4428-babd-f9152263da99_buggy.java b/tmp/2610a380-1bcd-48ce-a3ed-67454753d3fb_fixed.java
index 63641d0..50c91f5 100644
--- a/tmp/2148b74c-1630-4428-babd-f9152263da99_buggy.java
+++ b/tmp/2610a380-1bcd-48ce-a3ed-67454753d3fb_fixed.java
@@ -1,33 +1,43 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Ensure all required template types are inferred. If a required template
+    // type is not inferred, default it to UNKNOWN.
+    for (TemplateType key : keys) {
+      if (!inferred.containsKey(key)) {
+        inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types using the inferred or default values.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Ensure proper propagation of the function type and return type.
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    n.setJSType(
+        replacementFnType.getReturnType() != null 
+        ? replacementFnType.getReturnType() 
+        : registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
 
     return replacer.madeChanges;
   }
\ No newline at end of file
