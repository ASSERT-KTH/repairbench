diff --git a/tmp/d92526f9-1c33-4e59-b7f9-cfbdeb8a1377_buggy.java b/tmp/b26583b6-1618-4e8e-88e4-2856b1357632_fixed.java
index 63641d0..1e7cf38 100644
--- a/tmp/d92526f9-1c33-4e59-b7f9-cfbdeb8a1377_buggy.java
+++ b/tmp/b26583b6-1618-4e8e-88e4-2856b1357632_fixed.java
@@ -1,33 +1,43 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    if (inferred.isEmpty()) {
+      // If no types were inferred but template keys exist,
+      // ensure that all template types are replaced with UNKNOWN
+      for (TemplateType key : keys) {
+        inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
-    Preconditions.checkNotNull(replacementFnType);
+    JSType replacedType = fnType.visit(replacer);
+    FunctionType replacementFnType = replacedType == null 
+        ? null 
+        : replacedType.toMaybeFunctionType();
+
+    Preconditions.checkNotNull(replacementFnType, "Replacement function type cannot be null.");
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
