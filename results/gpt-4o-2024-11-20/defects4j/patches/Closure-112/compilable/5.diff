diff --git a/tmp/7afe79ed-fdb5-4fb3-b505-491f6511079b_buggy.java b/tmp/5e2ea8d5-b0ed-4043-8e17-22d2843d3b56_fixed.java
index 63641d0..5d4662f 100644
--- a/tmp/7afe79ed-fdb5-4fb3-b505-491f6511079b_buggy.java
+++ b/tmp/5e2ea8d5-b0ed-4043-8e17-22d2843d3b56_fixed.java
@@ -1,33 +1,44 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    if (inferred.isEmpty()) {
+      // If no templates could be inferred, return false early to avoid replacing
+      // with incorrect or UNKNOWN types unnecessarily.
+      return false;
+    }
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
-    callTarget.setJSType(replacementFnType);
+    // Handle edge cases for mismatched or missing return types
+    if (replacementFnType.getReturnType() == null) {
+      n.setJSType(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    } else {
       n.setJSType(replacementFnType.getReturnType());
+    }
+
+    callTarget.setJSType(replacementFnType);
 
     return replacer.madeChanges;
   }
\ No newline at end of file
