diff --git a/tmp/54c224b3-b2cd-4c4f-a22d-f447729d0025_buggy.java b/tmp/1c40f0e9-85f9-4892-aa93-042838828017_fixed.java
index 4e21866..5619013 100644
--- a/tmp/54c224b3-b2cd-4c4f-a22d-f447729d0025_buggy.java
+++ b/tmp/1c40f0e9-85f9-4892-aa93-042838828017_fixed.java
@@ -1,10 +1,39 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m == null || m.getRowDimension() != m.getColumnDimension()) {
+            throw new IllegalArgumentException("Matrix must be square and non-null.");
+        }
+
         final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        
+        // Verify positive definiteness
+        for (double eigenvalue : dec.getRealEigenvalues()) {
+            if (eigenvalue <= 0) {
+                throw new IllegalArgumentException("Matrix is not positive definite.");
+            }
+        }
+
+        // Compute the square root matrix
+        RealMatrix sqrtMatrix = dec.getV().multiply(diagSqrt(dec.getRealEigenvalues())).multiply(dec.getVT());
+        return sqrtMatrix;
+    }
+
+    /**
+     * Creates a diagonal matrix with square roots of input eigenvalues.
+     *
+     * @param eigenvalues Eigenvalues of the matrix.
+     * @return Diagonal matrix with square roots of eigenvalues.
+     */
+    private RealMatrix diagSqrt(double[] eigenvalues) {
+        int n = eigenvalues.length;
+        RealMatrix diagMatrix = MatrixUtils.createRealDiagonalMatrix(new double[n]);
+        for (int i = 0; i < n; i++) {
+            diagMatrix.setEntry(i, i, Math.sqrt(eigenvalues[i]));
+        }
+        return diagMatrix;
     }
\ No newline at end of file
