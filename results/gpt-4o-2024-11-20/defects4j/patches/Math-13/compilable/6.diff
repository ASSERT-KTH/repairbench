diff --git a/tmp/8c009db3-8572-4577-9145-bbd092a962db_buggy.java b/tmp/a544059f-e0af-4670-b6a8-3d2417f2c1a1_fixed.java
index 4e21866..ed5ba31 100644
--- a/tmp/8c009db3-8572-4577-9145-bbd092a962db_buggy.java
+++ b/tmp/a544059f-e0af-4670-b6a8-3d2417f2c1a1_fixed.java
@@ -1,10 +1,27 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m == null || m.getRowDimension() != m.getColumnDimension()) {
+            throw new IllegalArgumentException("Matrix must be square and non-null.");
+        }
+
         final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        final double[] eigenValues = dec.getRealEigenvalues();
+        final RealMatrix eigenVectors = dec.getV();
+
+        // Create diagonal matrix for square roots of eigenvalues
+        for (int i = 0; i < eigenValues.length; ++i) {
+            if (eigenValues[i] <= 0) {
+                throw new IllegalArgumentException("Matrix must be positive-definite.");
+            }
+            eigenValues[i] = Math.sqrt(eigenValues[i]);
+        }
+
+        // Reconstruct the square-root matrix
+        RealMatrix sqrtEigenValuesMatrix = MatrixUtils.createRealDiagonalMatrix(eigenValues);
+        return eigenVectors.multiply(sqrtEigenValuesMatrix).multiply(eigenVectors.transpose());
     }
\ No newline at end of file
