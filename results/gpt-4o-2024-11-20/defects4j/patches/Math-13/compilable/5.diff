diff --git a/tmp/7b63275e-3328-4cc6-9c94-b261855c3019_buggy.java b/tmp/bc3f7ef7-ba2b-4e7f-8a6e-15b7e75d4c9f_fixed.java
index 4e21866..c57cc31 100644
--- a/tmp/7b63275e-3328-4cc6-9c94-b261855c3019_buggy.java
+++ b/tmp/bc3f7ef7-ba2b-4e7f-8a6e-15b7e75d4c9f_fixed.java
@@ -1,10 +1,37 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m == null || m.getRowDimension() != m.getColumnDimension()) {
+            throw new IllegalArgumentException("Matrix must be square and non-null.");
+        }
         final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        double[] eigenValues = dec.getRealEigenvalues();
+        for (double eigenValue : eigenValues) {
+            if (eigenValue <= 0) {
+                throw new IllegalArgumentException("Matrix must be positive-definite.");
+            }
+        }
+
+        RealMatrix sqrtMatrix = dec.getV()
+            .multiply(diagonalMatrixSqrt(dec.getD()))
+            .multiply(dec.getV().transpose());
+        return sqrtMatrix;
+    }
+
+    /**
+     * Computes the square-root of a diagonal matrix.
+     *
+     * @param d Diagonal matrix.
+     * @return Square root of the diagonal matrix.
+     */
+    private RealMatrix diagonalMatrixSqrt(RealMatrix d) {
+        RealMatrix result = d.copy();
+        for (int i = 0; i < d.getRowDimension(); i++) {
+            result.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));
+        }
+        return result;
     }
\ No newline at end of file
