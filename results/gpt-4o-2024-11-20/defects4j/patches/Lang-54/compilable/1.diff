diff --git a/tmp/fe958af2-579d-498a-9246-72ba50254b9d_buggy.java b/tmp/5e1598dc-90d6-4481-a2d5-2b8453855ffa_fixed.java
index 90fe130..eb62f02 100644
--- a/tmp/fe958af2-579d-498a-9246-72ba50254b9d_buggy.java
+++ b/tmp/5e1598dc-90d6-4481-a2d5-2b8453855ffa_fixed.java
@@ -1,61 +1,35 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (len < 2 || (str.indexOf('_') == -1 && len != 2)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str, "");
         } else {
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+            // Split the string into parts based on underscores
+            String[] parts = str.split("_", -1);
+            if (parts.length < 2 || parts.length > 3) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
-                if (str.charAt(5) != '_') {
+            String language = parts[0];
+            String country = parts.length > 1 ? parts[1] : "";
+            String variant = parts.length > 2 ? parts[2] : "";
+            // Validate country code if it's not empty
+            if (!country.isEmpty() && (country.length() != 2 || country.charAt(0) < 'A' || country.charAt(0) > 'Z' 
+                                        || country.charAt(1) < 'A' || country.charAt(1) > 'Z')) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
-            }
+            return new Locale(language, country, variant);
         }
     }
\ No newline at end of file
