diff --git a/tmp/2543af3f-7b56-451d-983a-5f53f3a92bde_buggy.java b/tmp/451796bb-30ed-48cf-8820-4d1fcab76394_fixed.java
index efa499e..beb163c 100644
--- a/tmp/2543af3f-7b56-451d-983a-5f53f3a92bde_buggy.java
+++ b/tmp/451796bb-30ed-48cf-8820-4d1fcab76394_fixed.java
@@ -1,35 +1,28 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+        Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
         double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+        Set<Integer> basicRows = new HashSet<>();
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         for (int i = 0; i < coefficients.length; i++) {
             int colIndex = columnLabels.indexOf("x" + i);
             if (colIndex < 0) {
                 coefficients[i] = 0;
                 continue;
             }
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
-          } else {
+            if (basicRow != null) {
                 basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+            } else {
+                coefficients[i] = 0; // Set coefficients to 0 if variable is not part of the solution
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
