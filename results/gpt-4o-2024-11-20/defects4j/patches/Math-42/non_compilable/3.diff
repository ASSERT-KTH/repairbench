diff --git a/tmp/b7c50320-61cc-481f-889f-9c9f92717b57_buggy.java b/tmp/2e4e2c9a-0fdc-4e87-81f7-9b346a6a0905_fixed.java
index efa499e..effb6d2 100644
--- a/tmp/b7c50320-61cc-481f-889f-9c9f92717b57_buggy.java
+++ b/tmp/2e4e2c9a-0fdc-4e87-81f7-9b346a6a0905_fixed.java
@@ -1,35 +1,39 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+      Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null; // Fixed to allow index 0
       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+      Set<Integer> basicRows = new HashSet<>();
       double[] coefficients = new double[getOriginalNumDecisionVariables()];
       for (int i = 0; i < coefficients.length; i++) {
           int colIndex = columnLabels.indexOf("x" + i);
           if (colIndex < 0) {
               coefficients[i] = 0;
               continue;
           }
           Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+          if (basicRow != null && basicRow == -1) { // Skip invalid basic rows
+              coefficients[i] = 0;
+              continue;
+          }
+          // Fixed logic for negative variable and basic row handling
           if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+              coefficients[i] = 0;
           } else {
               basicRows.add(basicRow);
               coefficients[i] =
                   (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                   (restrictToNonNegative ? 0 : mostNegative);
+              // Ensure non-negative coefficients if restrictToNonNegative is true
+              if (restrictToNonNegative) {
+                  coefficients[i] = Math.max(coefficients[i], 0);
+              }
           }
       }
       return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
