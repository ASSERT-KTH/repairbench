diff --git a/tmp/bb3b7503-6bf4-4115-8ddc-5b4a5c31b773_buggy.java b/tmp/725018ee-b16b-45f3-ad93-b48722dacc7b_fixed.java
index efa499e..206843b 100644
--- a/tmp/bb3b7503-6bf4-4115-8ddc-5b4a5c31b773_buggy.java
+++ b/tmp/725018ee-b16b-45f3-ad93-b48722dacc7b_fixed.java
@@ -1,35 +1,31 @@
     /**
      * Get the current solution.
      *
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+        Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
+        double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
         Set<Integer> basicRows = new HashSet<Integer>();
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         for (int i = 0; i < coefficients.length; i++) {
             int colIndex = columnLabels.indexOf("x" + i);
             if (colIndex < 0) {
                 coefficients[i] = 0;
                 continue;
             }
             Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            if (basicRow != null && basicRows.contains(basicRow)) {
+                // If multiple variables share the same basic row, assign 0 to this one.
+                coefficients[i] = 0;
             } else {
                 basicRows.add(basicRow);
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+                    (restrictToNonNegative ? Math.max(0, mostNegative) : mostNegative);
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
