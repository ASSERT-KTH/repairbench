diff --git a/tmp/d2f1535d-3a52-4f98-8095-2083161873e9_buggy.java b/tmp/ffbf948b-e10a-498b-ba24-e336187c5c97_fixed.java
index be2af16..394ff96 100644
--- a/tmp/d2f1535d-3a52-4f98-8095-2083161873e9_buggy.java
+++ b/tmp/ffbf948b-e10a-498b-ba24-e336187c5c97_fixed.java
@@ -1,29 +1,46 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
+        // Assume date is Gregorian initially.
         long instant;
+        try {
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+        } catch (IllegalFieldValueException e) {
+            // If invalid in Gregorian, try Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            // If it's in Julian but still after the cutover, it's invalid.
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return instant;
+        }
+
+        // If calculated instant is before the cutover, try Julian.
+        if (instant < iCutoverMillis) {
+            long julianInstant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (julianInstant < iCutoverMillis) {
+                // Use Julian instant only if it is valid and before the cutover.
+                instant = julianInstant;
+            } else {
+                // Gregorian instant is valid; return it.
+                return instant;
+            }
         }
+
         return instant;
     }
\ No newline at end of file
