diff --git a/tmp/e43738f5-854c-4c56-b145-2e0f328926ec_buggy.java b/tmp/843ab374-a30e-4c4c-9435-dcdd1b1b1c14_fixed.java
index be2af16..5956b56 100644
--- a/tmp/e43738f5-854c-4c56-b145-2e0f328926ec_buggy.java
+++ b/tmp/843ab374-a30e-4c4c-9435-dcdd1b1b1c14_fixed.java
@@ -1,29 +1,47 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
+        // Handle year directly to address leap year behavior.
+        boolean isLeapYearInJulian = iJulianChronology.isLeapYear(year);
+        boolean isLeapYearInGregorian = iGregorianChronology.isLeapYear(year);
+
+        // Adjust the dayOfMonth validity based on the calendar being used.
+        if (monthOfYear == 2 && dayOfMonth == 29) {
+            if (isLeapYearInJulian && !isLeapYearInGregorian) {
+                // Julian calendar allows leap day for this year, use Julian chronology.
+                return iJulianChronology.getDateTimeMillis(
+                    year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond
+                );
+            } else if (!isLeapYearInJulian && !isLeapYearInGregorian) {
+                // Neither calendar allows leap day, so throw exception.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+        }
+
         // Assume date is Gregorian.
         long instant;
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
\ No newline at end of file
