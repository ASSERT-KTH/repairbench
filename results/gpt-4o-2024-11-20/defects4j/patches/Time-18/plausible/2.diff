diff --git a/tmp/422f9506-93c4-41d0-9b96-8789000a4fb5_buggy.java b/tmp/aec8278c-630f-478e-bfb8-90f493c498da_fixed.java
index be2af16..f8b68e2 100644
--- a/tmp/422f9506-93c4-41d0-9b96-8789000a4fb5_buggy.java
+++ b/tmp/aec8278c-630f-478e-bfb8-90f493c498da_fixed.java
@@ -1,29 +1,28 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
+        // Attempt Julian first, as it covers all years.
+        long instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            // Adjust to Gregorian if it falls after (or on) the cutover.
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                // If switching back to Julian causes inconsistency, it's invalid.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
         }
         return instant;
     }
\ No newline at end of file
