diff --git a/tmp/861fc9b5-edc5-44da-9d35-49b8ec497d7d_buggy.java b/tmp/6f00fc33-7822-4832-9f04-86c8b3dd7a55_fixed.java
index 939f49b..08d30ec 100644
--- a/tmp/861fc9b5-edc5-44da-9d35-49b8ec497d7d_buggy.java
+++ b/tmp/6f00fc33-7822-4832-9f04-86c8b3dd7a55_fixed.java
@@ -1,21 +1,17 @@
     private boolean isPrototypePropertyAssign(Node assign) {
       Node n = assign.getFirstChild();
       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+          && n.getType() == Token.GETPROP) {
+        // Traverse the property chain to check for "prototype"
+        Node current = n;
+        while (current != null && current.getType() == Token.GETPROP) {
+          Node property = current.getLastChild();
+          if (property.getType() == Token.STRING && property.getString().equals("prototype")) {
             return true;
           }
+          current = current.getFirstChild();
         }
       }
 
       return false;
     }
\ No newline at end of file
