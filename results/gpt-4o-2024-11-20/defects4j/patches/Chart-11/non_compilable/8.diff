diff --git a/tmp/133cf581-2f18-4e7c-a7b8-8ad9ea258248_buggy.java b/tmp/bd4b1d96-76a4-4868-9ee2-a5595ac4999f_fixed.java
index ad7255c..93bbb01 100644
--- a/tmp/133cf581-2f18-4e7c-a7b8-8ad9ea258248_buggy.java
+++ b/tmp/bd4b1d96-76a4-4868-9ee2-a5595ac4999f_fixed.java
@@ -1,42 +1,40 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fix: Use p2 here instead of p1
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
+        while (!iterator1.isDone() && !iterator2.isDone()) {
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            // Only compare used coordinates; PathIterator reports unused entries as 0.0,
+            // which can cause a mismatch. Compare number of elements based on segment type.
+            int elementCount = switch (seg1) {
+                case PathIterator.SEG_MOVETO, PathIterator.SEG_LINETO -> 2;
+                case PathIterator.SEG_QUADTO -> 4;
+                case PathIterator.SEG_CUBICTO -> 6;
+                case PathIterator.SEG_CLOSE -> 0;
+                default -> throw new IllegalArgumentException("Unknown segment type: " + seg1);
+            };
+            for (int i = 0; i < elementCount; i++) {
+                if (d1[i] != d2[i]) {
                     return false;
                 }
+            }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
-        return true;
+        // Verify both iterators are used up
+        return iterator1.isDone() && iterator2.isDone();
     }
\ No newline at end of file
