diff --git a/tmp/953a9570-56d7-4dec-a550-ef93d4d225bc_buggy.java b/tmp/842437ce-e3e3-47a9-9543-de08af8e8c8e_fixed.java
index ad7255c..d2a5f40 100644
--- a/tmp/953a9570-56d7-4dec-a550-ef93d4d225bc_buggy.java
+++ b/tmp/842437ce-e3e3-47a9-9543-de08af8e8c8e_fixed.java
@@ -1,42 +1,54 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Corrected this line to use p2 for iterator2
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+        
+        while (!iterator1.isDone() || !iterator2.isDone()) { // Iterating while either path isn't done
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            if (seg1 != seg2) { // Compare segment types
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (!Arrays.equals(trimArray(d1, seg1), trimArray(d2, seg2))) { // Compare relevant coordinates
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+    
+    private static double[] trimArray(double[] array, int segType) {
+        int length;
+        switch (segType) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                length = 2; // x, y
+                break;
+            case PathIterator.SEG_QUADTO:
+                length = 4; // x1, y1, x, y
+                break;
+            case PathIterator.SEG_CUBICTO:
+                length = 6; // x1, y1, x2, y2, x, y
+                break;
+            case PathIterator.SEG_CLOSE:
+                length = 0; // No points
+                break;
+            default:
+                throw new IllegalArgumentException("Unknown segment type");
+        }
+        return Arrays.copyOf(array, length);
+    }
\ No newline at end of file
