diff --git a/tmp/50d745ec-d5ff-4cd3-a1f1-50b5bb6a1c04_buggy.java b/tmp/337c27f9-e5cf-4b14-afa3-d94b8309af32_fixed.java
index ad7255c..52ae0c8 100644
--- a/tmp/50d745ec-d5ff-4cd3-a1f1-50b5bb6a1c04_buggy.java
+++ b/tmp/337c27f9-e5cf-4b14-afa3-d94b8309af32_fixed.java
@@ -1,42 +1,54 @@
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Corrected to use p2
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+        while (!iterator1.isDone() || !iterator2.isDone()) { 
             if (iterator1.isDone() != iterator2.isDone()) { 
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (seg1 != PathIterator.SEG_CLOSE && !Arrays.equals(Arrays.copyOf(d1, coordCount(seg1)), Arrays.copyOf(d2, coordCount(seg2)))) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+
+    private static int coordCount(int segType) {
+        switch (segType) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                return 2;
+            case PathIterator.SEG_QUADTO:
+                return 4;
+            case PathIterator.SEG_CUBICTO:
+                return 6;
+            default:
+                return 0;
+        }
+    }
\ No newline at end of file
