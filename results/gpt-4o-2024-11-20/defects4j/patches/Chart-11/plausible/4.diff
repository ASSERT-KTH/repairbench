diff --git a/tmp/dd1f8a98-1868-4cc9-90c8-503e2320cdd6_buggy.java b/tmp/b95cd62d-fa8c-4e5c-a729-7205d2be4c7c_fixed.java
index ad7255c..ab2d7e7 100644
--- a/tmp/dd1f8a98-1868-4cc9-90c8-503e2320cdd6_buggy.java
+++ b/tmp/b95cd62d-fa8c-4e5c-a729-7205d2be4c7c_fixed.java
@@ -1,42 +1,50 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fixed here: Correctly use p2
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+        
+        while (!iterator1.isDone() || !iterator2.isDone()) { // Fixed: Check individual conditions consistently
+            if (iterator1.isDone() || iterator2.isDone()) { // If one is done but not the other
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            if (seg1 != seg2) { // If segment types don't match
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (!Arrays.equals(Arrays.copyOf(d1, getCoordCount(seg1)), 
+                               Arrays.copyOf(d2, getCoordCount(seg2)))) { // Compare relevant coordinates
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+
+    // Helper function to decide the number of coordinates for a segment type
+    private static int getCoordCount(int segmentType) {
+        switch (segmentType) {
+            case PathIterator.SEG_MOVETO:
+            case PathIterator.SEG_LINETO:
+                return 2; // Move and line segments use 2 coordinates
+            case PathIterator.SEG_QUADTO:
+                return 4; // Quadratic curve uses 4 coordinates
+            case PathIterator.SEG_CUBICTO:
+                return 6; // Cubic curve uses 6 coordinates
+            case PathIterator.SEG_CLOSE:
+                return 0; // Close segment uses no coordinates
+            default:
+                throw new IllegalArgumentException("Unknown segment type: " + segmentType);
+        }
+    }
\ No newline at end of file
