diff --git a/tmp/01d9dbf4-d478-44ac-99e7-ef6499caeed0_buggy.java b/tmp/411cf366-b667-4dba-ba32-870e06e90454_fixed.java
index ad7255c..1698e83 100644
--- a/tmp/01d9dbf4-d478-44ac-99e7-ef6499caeed0_buggy.java
+++ b/tmp/411cf366-b667-4dba-ba32-870e06e90454_fixed.java
@@ -1,42 +1,35 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fix: Use p2 here instead of p1
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
+        while (!iterator1.isDone() || !iterator2.isDone()) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            // Compare only the relevant segment coordinates, not the whole array
+            int coordsCount = (seg1 == PathIterator.SEG_CLOSE) ? 0 : 
+                              (seg1 == PathIterator.SEG_MOVETO || seg1 == PathIterator.SEG_LINETO) ? 2 : 
+                              (seg1 == PathIterator.SEG_QUADTO) ? 4 : 6;
+            if (!Arrays.equals(Arrays.copyOf(d1, coordsCount), Arrays.copyOf(d2, coordsCount))) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
\ No newline at end of file
