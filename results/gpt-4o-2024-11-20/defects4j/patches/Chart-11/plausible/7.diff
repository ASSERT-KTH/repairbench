diff --git a/tmp/059b6e7d-a64c-40f3-88c0-d807d248b8fa_buggy.java b/tmp/45bd9eb3-fed0-4eef-ac5e-42e1d42f13c7_fixed.java
index ad7255c..f7394dc 100644
--- a/tmp/059b6e7d-a64c-40f3-88c0-d807d248b8fa_buggy.java
+++ b/tmp/45bd9eb3-fed0-4eef-ac5e-42e1d42f13c7_fixed.java
@@ -1,42 +1,51 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fix: used p2 instead of p1
         double[] d1 = new double[6];
         double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
+
+        while (!iterator1.isDone() || !iterator2.isDone()) { // Iterate until both are done
+            if (iterator1.isDone() != iterator2.isDone()) { // One is done but the other is not
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
+            if (seg1 != seg2) { // Segment types must be the same
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            // Compare only the relevant coordinates based on the segment type
+            int coordCount = 0;
+            switch (seg1) {
+                case PathIterator.SEG_MOVETO:
+                case PathIterator.SEG_LINETO:
+                    coordCount = 2;
+                    break;
+                case PathIterator.SEG_QUADTO:
+                    coordCount = 4;
+                    break;
+                case PathIterator.SEG_CUBICTO:
+                    coordCount = 6;
+                    break;
+                case PathIterator.SEG_CLOSE:
+                    coordCount = 0; // No coordinates to compare in SEG_CLOSE
+                    break;
+                default:
+                    throw new IllegalStateException("Unexpected segment type");
+            }
+            if (!Arrays.equals(Arrays.copyOfRange(d1, 0, coordCount), Arrays.copyOfRange(d2, 0, coordCount))) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
\ No newline at end of file
