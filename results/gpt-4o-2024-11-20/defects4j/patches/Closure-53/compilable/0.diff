diff --git a/tmp/3b92b669-2f85-4547-b841-22da168a38fa_buggy.java b/tmp/795c424b-27f7-4197-a004-804e1c5d36af_fixed.java
index 41ea16c..0290126 100644
--- a/tmp/3b92b669-2f85-4547-b841-22da168a38fa_buggy.java
+++ b/tmp/795c424b-27f7-4197-a004-804e1c5d36af_fixed.java
@@ -1,63 +1,63 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
         // Compute all of the assignments necessary
         List<Node> nodes = Lists.newArrayList();
         Node val = ref.getAssignedValue();
         blacklistVarReferencesInTree(val, v.scope);
         Preconditions.checkState(val.getType() == Token.OBJECTLIT);
         Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
         for (Node key = val.getFirstChild(); key != null;
              key = key.getNext()) {
             String var = key.getString();
             Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
+            // TODO: Copy type information.
             nodes.add(
                 new Node(Token.ASSIGN,
                          Node.newString(Token.NAME, varmap.get(var)), value));
             all.remove(var);
         }
 
-      // TODO(user): Better source information.
+        // Add undefined assignments for variables not in the object literal
         for (String var : all) {
             nodes.add(
                 new Node(Token.ASSIGN,
                          Node.newString(Token.NAME, varmap.get(var)),
                          NodeUtil.newUndefinedNode(null)));
         }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+        // Ensure the result evaluates to true
         nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
+        // Join the nodes using COMMA
+        Node replacement = null;
+        if (nodes.size() == 1) {
+            // If there's only a single node, use it as the replacement directly
+            replacement = nodes.get(0);
+        } else {
             replacement = new Node(Token.COMMA);
             Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+            for (int i = 0; i < nodes.size(); i++) {
+                cur.addChildToBack(nodes.get(i));
+                if (i < nodes.size() - 1) {
+                    Node nextComma = new Node(Token.COMMA);
+                    cur.addChildToBack(nextComma);
+                    cur = nextComma;
+                }
+            }
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
         Node replace = ref.getParent();
         replacement.copyInformationFromForTree(replace);
 
         if (replace.getType() == Token.VAR) {
             replace.getParent().replaceChild(
                 replace, NodeUtil.newExpr(replacement));
         } else {
             replace.getParent().replaceChild(replace, replacement);
         }
     }
\ No newline at end of file
