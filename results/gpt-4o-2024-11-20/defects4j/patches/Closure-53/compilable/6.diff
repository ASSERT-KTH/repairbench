diff --git a/tmp/db80654d-c781-4f49-b93a-5a0848bb1cc4_buggy.java b/tmp/16ca7fcc-d60e-4930-9a25-01e3e4554bf9_fixed.java
index 41ea16c..d469d31 100644
--- a/tmp/db80654d-c781-4f49-b93a-5a0848bb1cc4_buggy.java
+++ b/tmp/16ca7fcc-d60e-4930-9a25-01e3e4554bf9_fixed.java
@@ -1,63 +1,65 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
       Preconditions.checkState(val.getType() == Token.OBJECTLIT);
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+        // TODO: Copy type information.
+        Node varNode = Node.newString(Token.NAME, varmap.get(var));
+        varNode.copyInformationFromForTree(key);
+        Node assignNode = new Node(Token.ASSIGN, varNode, value);
+        assignNode.copyInformationFromForTree(key);
+        nodes.add(assignNode);
         all.remove(var);
       }
 
-      // TODO(user): Better source information.
+      // Handle variables not in the object literal.
       for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
+        Node varNode = Node.newString(Token.NAME, varmap.get(var));
+        varNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());
+        Node undefinedNode = NodeUtil.newUndefinedNode(null);
+        undefinedNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());
+        Node assignNode = new Node(Token.ASSIGN, varNode, undefinedNode);
+        assignNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());
+        nodes.add(assignNode);
       }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
-        nodes.add(new Node(Token.TRUE));
+      // All assignments evaluate to true, so ensure the expression
+      // statement evaluates to true.
+      Node trueNode = new Node(Token.TRUE);
+      trueNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());
+      nodes.add(trueNode);
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      // Join these using commas.
+      Node replacement = null;
+      for (int i = nodes.size() - 1; i >= 0; i--) {
+        if (replacement == null) {
+          replacement = nodes.get(i);
+        } else {
+          Node commaNode = new Node(Token.COMMA, nodes.get(i), replacement);
+          commaNode.setStaticSourceFile(ref.getParent().getStaticSourceFile());
+          replacement = commaNode;
+        }
       }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
