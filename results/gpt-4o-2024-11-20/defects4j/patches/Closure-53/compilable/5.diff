diff --git a/tmp/dd6293a4-fca3-42b5-b069-07e7a6255aea_buggy.java b/tmp/77530180-06f5-4577-b09a-3471a36d7476_fixed.java
index 41ea16c..e1ca35e 100644
--- a/tmp/dd6293a4-fca3-42b5-b069-07e7a6255aea_buggy.java
+++ b/tmp/77530180-06f5-4577-b09a-3471a36d7476_fixed.java
@@ -1,63 +1,59 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
         // Compute all of the assignments necessary
         List<Node> nodes = Lists.newArrayList();
         Node val = ref.getAssignedValue();
         blacklistVarReferencesInTree(val, v.scope);
         Preconditions.checkState(val.getType() == Token.OBJECTLIT);
         Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
         for (Node key = val.getFirstChild(); key != null;
              key = key.getNext()) {
             String var = key.getString();
             Node value = key.removeFirstChild();
-        // TODO(user): Copy type information.
+            // TODO: Copy type information.
             nodes.add(
                 new Node(Token.ASSIGN,
                          Node.newString(Token.NAME, varmap.get(var)), value));
             all.remove(var);
         }
 
-      // TODO(user): Better source information.
+        // Add assignments for variables not in the object literal
         for (String var : all) {
             nodes.add(
                 new Node(Token.ASSIGN,
                          Node.newString(Token.NAME, varmap.get(var)),
                          NodeUtil.newUndefinedNode(null)));
         }
 
-      Node replacement;
         // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+        // resulting expression evaluates to true in case it matters.
         nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+        // Join these using COMMA. A COMMA node must have exactly two children.
+        // Construct the tree using a reverse order traversal.
+        Node replacement = null;
+        for (int i = nodes.size() - 1; i >= 0; i--) {
+            if (replacement == null) {
+                replacement = nodes.get(i);
+            } else {
+                replacement = new Node(Token.COMMA, nodes.get(i), replacement);
+            }
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
         Node replace = ref.getParent();
+        Preconditions.checkNotNull(replace);
         replacement.copyInformationFromForTree(replace);
 
         if (replace.getType() == Token.VAR) {
+            // If the parent is a VAR node, replace it with an expression.
             replace.getParent().replaceChild(
                 replace, NodeUtil.newExpr(replacement));
         } else {
             replace.getParent().replaceChild(replace, replacement);
         }
     }
\ No newline at end of file
