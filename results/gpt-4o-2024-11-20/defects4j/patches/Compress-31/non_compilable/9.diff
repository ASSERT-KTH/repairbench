diff --git a/tmp/e82ff0af-bda5-4072-8a57-7234eb113a91_buggy.java b/tmp/d3ff10f1-95dd-471c-925d-0ec9f3c22d03_fixed.java
index b91f7de..beb3bd9 100644
--- a/tmp/e82ff0af-bda5-4072-8a57-7234eb113a91_buggy.java
+++ b/tmp/d3ff10f1-95dd-471c-925d-0ec9f3c22d03_fixed.java
@@ -1,69 +1,59 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
         if (buffer[start] == 0) {
+            // Handle all NULs case
+            for (int i = start; i < end; i++) {
+                if (buffer[i] != 0) {
+                    throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, buffer[i]));
+                }
+            }
             return 0L;
         }
 
         // Skip leading spaces
         while (start < end) {
             if (buffer[start] == ' ') {
                 start++;
             } else {
                 break;
             }
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
+        // Trim all trailing NULs and spaces
         byte trailer = buffer[end - 1];
         while (start < end && (trailer == 0 || trailer == ' ')) {
             end--;
             trailer = buffer[end - 1];
         }
 
+        boolean seenNonOctal = false;
+        // Parse numeric octal value
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
-            if (currentByte == 0) {
+            if (currentByte == 0 || currentByte == ' ') {
+                seenNonOctal = true;
                 break;
             }
-            // CheckStyle:MagicNumber OFF
+            // If an invalid character is found
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            if (seenNonOctal) {
+                throw new IllegalArgumentException("Embedded non-octal found");
             }
-
-        return result;
+            result = (result << 3) + (currentByte - '0'); // Convert from ASCII
         }
+
+        // Check for any remaining invalid embedded characters (NUL/space within valid contents)
+        for (; start < end; start++) {
+            byte remainingByte = buffer(start   .``)
+         
\ No newline at end of file
