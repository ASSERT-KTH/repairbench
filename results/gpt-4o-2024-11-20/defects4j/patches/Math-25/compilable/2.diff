diff --git a/tmp/1ef9661d-0dc3-482e-a5d6-98f9f1dce561_buggy.java b/tmp/d023c86f-88bf-438f-b5fc-e958ab4fea05_fixed.java
index 940af3f..0416bf2 100644
--- a/tmp/1ef9661d-0dc3-482e-a5d6-98f9f1dce561_buggy.java
+++ b/tmp/d023c86f-88bf-438f-b5fc-e958ab4fea05_fixed.java
@@ -1,82 +1,95 @@
 /**
  * Estimate a first guess of the amplitude and angular frequency.
  * This method assumes that the {@link #sortObservations()} method
  * has been called previously.
  *
  * @throws ZeroException if the abscissa range is zero.
  * @throws MathIllegalStateException when the guessing procedure cannot
  * produce sensible results.
  */
 private void guessAOmega() {
-            // initialize the sums for the linear model between the two integrals
+    // Initialize the sums for the linear model between the two integrals
     double sx2 = 0;
     double sy2 = 0;
     double sxy = 0;
     double sxz = 0;
     double syz = 0;
 
     double currentX = observations[0].getX();
     double currentY = observations[0].getY();
     double f2Integral = 0;
     double fPrime2Integral = 0;
     final double startX = currentX;
+
     for (int i = 1; i < observations.length; ++i) {
-                // one step forward
+        // One step forward
         final double previousX = currentX;
         final double previousY = currentY;
         currentX = observations[i].getX();
         currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
+        // Update the integrals of f² and f'²
         // considering a linear model for f (and therefore constant f')
         final double dx = currentX - previousX;
         final double dy = currentY - previousY;
+
+        if (dx == 0) {
+            // Prevent division by zero
+            throw new MathIllegalStateException();
+        }
+
         final double f2StepIntegral =
             dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
         final double fPrime2StepIntegral = dy * dy / dx;
 
         final double x = currentX - startX;
         f2Integral += f2StepIntegral;
         fPrime2Integral += fPrime2StepIntegral;
 
         sx2 += x * x;
         sy2 += f2Integral * f2Integral;
         sxy += x * f2Integral;
         sxz += x * fPrime2Integral;
         syz += f2Integral * fPrime2Integral;
     }
 
-            // compute the amplitude and pulsation coefficients
-            double c1 = sy2 * sxz - sxy * syz;
-            double c2 = sxy * sxz - sx2 * syz;
-            double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
+    // Compute the amplitude and pulsation coefficients
+    final double c1 = sy2 * sxz - sxy * syz;
+    final double c2 = sxy * sxz - sx2 * syz;
+    final double c3 = sx2 * sy2 - sxy * sxy;
+
+    // Check for ill-conditioned cases or invalid guesses
+    if (c3 == 0 || c2 == 0 || c1 < 0 || c2 < 0) {
         final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
+        // Range of the observations, assuming that the observations are sorted.
         final double xRange = observations[last].getX() - observations[0].getX();
         if (xRange == 0) {
             throw new ZeroException();
         }
         omega = 2 * Math.PI / xRange;
 
         double yMin = Double.POSITIVE_INFINITY;
         double yMax = Double.NEGATIVE_INFINITY;
         for (int i = 1; i < observations.length; ++i) {
             final double y = observations[i].getY();
             if (y < yMin) {
                 yMin = y;
             }
             if (y > yMax) {
                 yMax = y;
             }
         }
         a = 0.5 * (yMax - yMin);
     } else {
         // In some ill-conditioned cases (cf. MATH-844), the guesser
         // procedure cannot produce sensible results.
+        final double c2OverC3 = c2 / c3;
+        final double c1OverC2 = c1 / c2;
 
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+        if (c1OverC2 < 0 || c2OverC3 < 0) {
+            throw new MathIllegalStateException();
+        }
+        a = FastMath.sqrt(c1OverC2);
+        omega = FastMath.sqrt(c2OverC3);
     }
 }
\ No newline at end of file
