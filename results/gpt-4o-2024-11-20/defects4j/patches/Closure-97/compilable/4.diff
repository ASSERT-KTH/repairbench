diff --git a/tmp/fd3f2188-d1db-498d-93fa-075a92e3a0c5_buggy.java b/tmp/9be22e9f-a59e-40a9-a279-6ca3aebae7ee_fixed.java
index 1126687..145abd8 100644
--- a/tmp/fd3f2188-d1db-498d-93fa-075a92e3a0c5_buggy.java
+++ b/tmp/9be22e9f-a59e-40a9-a279-6ca3aebae7ee_fixed.java
@@ -1,65 +1,65 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
+      // Check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
+      // Only the lower 5 bits are used when shifting in JavaScript,
+      // so ensure rval is in the range [0, 32).
+      rval = rval % 32; // Ensure rval is within the allowed bit range for shifts.
+      if (rval < 0) {
+        rval += 32; // Adjust for negative rval to ensure it's a valid shift amount.
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int cannot represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // where JavaScript can, so use a long here and mask the result.
+          result = ((long) lvalInt & 0xFFFFFFFFL) >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
