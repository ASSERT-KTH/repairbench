diff --git a/tmp/d3c952c2-620c-4d4d-af81-976b68d081fb_buggy.java b/tmp/4d78dcb2-2b24-4451-8258-7942da4a9d46_fixed.java
index 61ffdbf..ec87c3a 100644
--- a/tmp/d3c952c2-620c-4d4d-af81-976b68d081fb_buggy.java
+++ b/tmp/4d78dcb2-2b24-4451-8258-7942da4a9d46_fixed.java
@@ -1,44 +1,51 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
+    
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
+
+    // Check the compilation level or mode before modifying arguments
+    if (!compiler.getOptions().isRemoveUnusedFunctionArgs()) {
+      // In simple mode or if not set to remove unused args, skip this.
+      return;
+    }
+
     boolean modifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
