diff --git a/tmp/fc1048e7-525e-4cb4-8768-e775bab1a848_buggy.java b/tmp/e7d38e99-049c-41a3-bc39-2b3433a12f12_fixed.java
index 61ffdbf..48893ac 100644
--- a/tmp/fc1048e7-525e-4cb4-8768-e775bab1a848_buggy.java
+++ b/tmp/e7d38e99-049c-41a3-bc39-2b3433a12f12_fixed.java
@@ -1,44 +1,50 @@
   /**
    * Removes unreferenced arguments from a function declaration and when
    * possible the function's callSites.
    *
    * @param fnScope The scope inside the function
    */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
     // Notice that removing unreferenced function args breaks
     // Function.prototype.length. In advanced mode, we don't really care
     // about this: we consider "length" the equivalent of reflecting on
     // the function's lexical source.
     //
     // Rather than create a new option for this, we assume that if the user
     // is removing globals, then it's OK to remove unused function args.
     //
     // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
     Node function = fnScope.getRootNode();
 
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
       // The parameters object literal setters cannot be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
+    boolean canModifyCallers = modifyCallSites
         && callSiteOptimizer.canModifyCallers(function);
-    if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
+
+    if (removeGlobal || canModifyCallers) {
+      // If we can modify call sites or globals are allowed to be removed,
+      // attempt to optimize both function arguments and call sites.
+      if (canModifyCallers) {
+        callSiteOptimizer.optimize(fnScope, referenced);
+      }
+    } else {
+      // Otherwise, only remove unreferenced arguments from the end
+      // of the function declaration, preserving "simple" behavior.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
-    } else {
-      callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
