diff --git a/tmp/37805d6f-5ff5-47b3-8524-1311cd2fe16a_buggy.java b/tmp/9efd4ef6-aa9a-4340-91e1-e200ca83bc94_fixed.java
index afcc27c..fb1e3b1 100644
--- a/tmp/37805d6f-5ff5-47b3-8524-1311cd2fe16a_buggy.java
+++ b/tmp/9efd4ef6-aa9a-4340-91e1-e200ca83bc94_fixed.java
@@ -1,61 +1,76 @@
     /**
      * Variant called when creation of the POJO involves buffering of creator properties
      * as well as property-based creator.
      */
     public Object complete(JsonParser p, DeserializationContext ctxt,
             PropertyValueBuffer buffer, PropertyBasedCreator creator)
         throws IOException
     {
-        // first things first: deserialize all data buffered:
+        // First, deserialize all data buffered for properties
         final int len = _properties.length;
         Object[] values = new Object[len];
         for (int i = 0; i < len; ++i) {
             String typeId = _typeIds[i];
             final ExtTypedProperty extProp = _properties[i];
             if (typeId == null) {
-                // let's allow missing both type and property (may already have been set, too)
+                // Allow missing both type and property (may already have been set)
                 if (_tokens[i] == null) {
                     continue;
                 }
-                // but not just one
-                // 26-Oct-2012, tatu: As per [databind#94], must allow use of 'defaultImpl'
+                // If missing one, but not both: handle default type check
                 if (!extProp.hasDefaultType()) {
                     ctxt.reportInputMismatch(_beanType,
                             "Missing external type id property '%s'",
                             extProp.getTypePropertyName());
                 } else {
                     typeId = extProp.getDefaultTypeId();
                 }
             } else if (_tokens[i] == null) {
                 SettableBeanProperty prop = extProp.getProperty();
                 ctxt.reportInputMismatch(_beanType,
                         "Missing property '%s' for external type id '%s'",
                         prop.getName(), _properties[i].getTypePropertyName());
             }
+            // Deserialize value using the resolved type id
             values[i] = _deserialize(p, ctxt, i, typeId);
 
             final SettableBeanProperty prop = extProp.getProperty();
-            // also: if it's creator prop, fill in
+            // Also: if it's a creator property, fill into the buffer
             if (prop.getCreatorIndex() >= 0) {
                 buffer.assignParameter(prop, values[i]);
 
-                // [databind#999] And maybe there's creator property for type id too?
+                // Handle creator property for type id, if needed
                 SettableBeanProperty typeProp = extProp.getTypeProperty();
-                // for now, should only be needed for creator properties, too
                 if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) {
-                    // 31-May-2018, tatu: [databind#1328] if id is NOT plain `String`, need to
-                    //    apply deserializer... fun fun.
-                    buffer.assignParameter(typeProp, typeId);
+                    // If the type id is not a plain String, apply deserializer
+                    Object typeValue = typeId;
+                    if (!typeProp.getType().isTypeOrSubTypeOf(String.class)) {
+                        JsonDeserializer<Object> typeDeser = typeProp.getValueDeserializer();
+                        if (typeDeser == null) {
+                            ctxt.reportInputMismatch(_beanType,
+                                    "Missing deserializer for external type id property '%s'",
+                                    typeProp.getName());
                         }
+                        typeValue = typeDeser.deserialize(
+                                p.getCodec().treeAsTokens(p.getCodec().createParser(typeId)),
+                                ctxt
+                        );
                     }
+                    buffer.assignParameter(typeProp, typeValue);
                 }
+            }
+        }
+
+        // Build the bean using the creator and buffer
         Object bean = creator.build(ctxt, buffer);
-        // third: assign non-creator properties
+
+        // Assign remaining non-creator properties
         for (int i = 0; i < len; ++i) {
             SettableBeanProperty prop = _properties[i].getProperty();
             if (prop.getCreatorIndex() < 0) {
                 prop.set(bean, values[i]);
             }
         }
+
         return bean;
     }
\ No newline at end of file
