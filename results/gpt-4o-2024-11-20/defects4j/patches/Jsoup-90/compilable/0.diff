diff --git a/tmp/1b5c0d06-9902-447e-b176-ab41383fdb6f_buggy.java b/tmp/f0012a06-26df-4f72-9439-72685a7951d5_fixed.java
index 373b1e8..d0a3595 100644
--- a/tmp/1b5c0d06-9902-447e-b176-ab41383fdb6f_buggy.java
+++ b/tmp/f0012a06-26df-4f72-9439-72685a7951d5_fixed.java
@@ -1,37 +1,40 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+            && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
-                int o = input[i];
+    while (i < input.length) {
+        int o = input[i] & 0xFF; // Mask to avoid signed issues.
         if ((o & 0x80) == 0) {
-                    continue; // ASCII
+            i++; // ASCII
+            continue;
         }
 
+        int end = -1;
         // UTF-8 leading:
         if ((o & 0xE0) == 0xC0) {
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
         } else {
-                    return false;
+            return false; // Invalid leading byte
         }
 
+        if (end >= input.length) {
+            return false; // Incomplete sequence
+        }
 
-                while (i < end) {
-                    i++;
-                    o = input[i];
+        for (i = i + 1; i <= end; i++) {
+            o = input[i] & 0xFF; // Mask each byte to prevent signed overflow.
             if ((o & 0xC0) != 0x80) {
-                        return false;
+                return false; // Invalid continuation byte
             }
         }
     }
     return true;
 }
\ No newline at end of file
