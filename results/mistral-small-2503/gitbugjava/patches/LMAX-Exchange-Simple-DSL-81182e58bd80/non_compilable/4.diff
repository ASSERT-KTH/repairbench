diff --git a/tmp/ae2937fc-29ba-40f0-b2f1-ae7ee60b5e4e_buggy.java b/tmp/8842de2c-4126-4254-9d61-72936ca0ea04_fixed.java
index f506479..1c904c5 100644
--- a/tmp/ae2937fc-29ba-40f0-b2f1-ae7ee60b5e4e_buggy.java
+++ b/tmp/8842de2c-4126-4254-9d61-72936ca0ea04_fixed.java
@@ -1,64 +1,63 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    final List<Map<String, List<String>>> groupsValues = new ArrayList<>();
+    Map<String, List<String>> currentGroupValues = new HashMap<>();
+    groupsValues.add(currentGroupValues);
+
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
+            currentGroupValues = new HashMap<>();
+            groupsValues.add(currentGroupValues);
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
+        final List<String> argValues = currentGroupValues.computeIfAbsent(arg.getName().toLowerCase(), k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
         checkValidValue(arg, argument.value);
         argValues.add(argument.value);
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
-            final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
-            {
-                final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
-                    valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
-                }
-            }
-
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
-            groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
+
+    for (Map<String, List<String>> groupValues : groupsValues)
+    {
+        groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, groupValues));
+    }
 }
\ No newline at end of file
