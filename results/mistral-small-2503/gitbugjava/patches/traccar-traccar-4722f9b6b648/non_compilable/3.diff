diff --git a/tmp/1c4dd054-b3b1-4cb1-8a5b-fc9dfae3a33d_buggy.java b/tmp/6e73abec-9065-40fd-9a70-3e433c64717c_fixed.java
index c84c989..7b49009 100644
--- a/tmp/1c4dd054-b3b1-4cb1-8a5b-fc9dfae3a33d_buggy.java
+++ b/tmp/6e73abec-9065-40fd-9a70-3e433c64717c_fixed.java
@@ -1,27 +1,38 @@
 private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
     buf.readUnsignedShortLE(); // length
 
     buf.skipBytes(3); // identification header
     buf.readUnsignedIntLE(); // index
 
     DeviceSession deviceSession = getDeviceSession(
             channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     buf.readUnsignedByte(); // session status
     buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+
+    // Read and interpret the date and time
+    int dateAndTime = buf.readUnsignedIntLE();
+    LocalDateTime dateTime = parseDateTime(dateAndTime);
+    position.setTime(dateTime);
 
     buf.skipBytes(23); // coordinates block
 
     buf.skipBytes(3); // data tag header
     decodeMinimalDataSet(position, buf);
 
     return position;
 }
+
+private LocalDateTime parseDateTime(int dateAndTime) {
+    // Assuming the date and time are in a specific format, parse it accordingly
+    // This is a placeholder implementation. Adjust according to the actual format.
+    // For example, if the date and time are in seconds since epoch, you can use:
+    return LocalDateTime.ofInstant(Instant.ofEpochSecond(dateAndTime), ZoneId.systemDefault());
+}
\ No newline at end of file
