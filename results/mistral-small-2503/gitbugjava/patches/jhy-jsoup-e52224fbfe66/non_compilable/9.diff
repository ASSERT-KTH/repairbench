diff --git a/tmp/2a6ddb98-58ba-4b10-b2ae-c6775b72ebb6_buggy.java b/tmp/ec95ac15-dffd-408e-bd70-e88ebb5a7aa7_fixed.java
index acd5eb5..8aa3c69 100644
--- a/tmp/2a6ddb98-58ba-4b10-b2ae-c6775b72ebb6_buggy.java
+++ b/tmp/ec95ac15-dffd-408e-bd70-e88ebb5a7aa7_fixed.java
@@ -1,32 +1,40 @@
 @Override
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         Node prev = previousSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())) // next is blank text, from re-parenting
             || (prev instanceof Element && ((Element) prev).isBlock())
             ;
         if (couldSkip && isBlank) return;
 
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && isNode(prev, "br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
+    // Special handling for <br> tags within block elements
+    if (isNode(this, "br") && parent != null && parent.tag().isBlock()) {
+        if (siblingIndex > 0) {
+            accum.append("\n");
+        }
+        indent(accum, depth, out);
+    }
+
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
