diff --git a/tmp/bf3aed03-6aa7-4bca-868e-8b039edfc8ff_buggy.java b/tmp/72d653cf-051d-4296-a685-5444f058b0ce_fixed.java
index 855afa5..7aab5c8 100644
--- a/tmp/bf3aed03-6aa7-4bca-868e-8b039edfc8ff_buggy.java
+++ b/tmp/72d653cf-051d-4296-a685-5444f058b0ce_fixed.java
@@ -1,13 +1,28 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+        String urlS = u.toExternalForm();
+        String encodedPath = URLEncoder.encode(u.getPath(), "UTF-8");
+        String encodedQuery = URLEncoder.encode(u.getQuery(), "UTF-8");
+        String encodedFragment = URLEncoder.encode(u.getRef(), "UTF-8");
+
+        StringBuilder encodedUrl = new StringBuilder();
+        encodedUrl.append(u.getProtocol()).append("://");
+        encodedUrl.append(u.getHost());
+        if (u.getPort() != -1) {
+            encodedUrl.append(":").append(u.getPort());
+        }
+        encodedUrl.append(encodedPath);
+        if (encodedQuery != null && !encodedQuery.isEmpty()) {
+            encodedUrl.append("?").append(encodedQuery);
+        }
+        if (encodedFragment != null && !encodedFragment.isEmpty()) {
+            encodedUrl.append("#").append(encodedFragment);
+        }
+
+        return new URL(encodedUrl.toString());
+    } catch (UnsupportedEncodingException | MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
