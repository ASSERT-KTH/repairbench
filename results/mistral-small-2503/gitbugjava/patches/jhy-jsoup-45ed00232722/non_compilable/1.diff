diff --git a/tmp/c731c497-af67-4964-9808-f0b9e4fa73f1_buggy.java b/tmp/9fab9918-55bc-46b8-a5e8-8cbaa71b4fa0_fixed.java
index 855afa5..1d836b7 100644
--- a/tmp/c731c497-af67-4964-9808-f0b9e4fa73f1_buggy.java
+++ b/tmp/9fab9918-55bc-46b8-a5e8-8cbaa71b4fa0_fixed.java
@@ -1,13 +1,32 @@
 static URL encodeUrl(URL u) {
     u = punyUrl(u);
     try {
-            //  odd way to encode urls, but it works!
-            String urlS = u.toExternalForm(); // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
-            urlS = urlS.replace(" ", "%20");
-            final URI uri = new URI(urlS);
-            return new URL(uri.toASCIIString());
-        } catch (URISyntaxException | MalformedURLException e) {
+        // Encode the URL properly by replacing all non-alphanumeric characters except for a few special characters
+        String urlS = u.toExternalForm();
+        urlS = URLEncoder.encode(urlS, StandardCharsets.UTF_8.toString())
+                .replace("+", "%20") // Replace '+' with '%20' to maintain space encoding
+                .replace("%21", "!") // Restore '!' since it's a valid URL character
+                .replace("%27", "'") // Restore single quote since it's a valid URL character
+                .replace("%28", "(") // Restore '(' since it's a valid URL character
+                .replace("%29", ")") // Restore ')' since it's a valid URL character
+                .replace("%7E", "~") // Restore '~' since it's a valid URL character
+                .replace("%22", "%2522") // Restore double quote by encoding it properly
+                .replace("%26", "%2526") // Restore '&' by encoding it properly
+                .replace("%3D", "%253D") // Restore '=' by encoding it properly
+                .replace("%2C", "%252C") // Restore ',' by encoding it properly
+                .replace("%2F", "/") // Restore '/' since it's a valid URL character
+                .replace("%3F", "?") // Restore '?' since it's a valid URL character
+                .replace("%3A", ":") // Restore ':' since it's a valid URL character
+                .replace("%40", "@") // Restore '@' since it's a valid URL character
+                .replace("%24", "$") // Restore '$' since it's a valid URL character
+                .replace("%23", "#") // Restore '#' since it's a valid URL character
+                .replace("%5B", "[") // Restore '[' since it's a valid URL character
+                .replace("%5D", "]") // Restore ']' since it's a valid URL character
+                .replace("%25", "%2525"); // Restore '%' by encoding it properly
+
+        return new URL(urlS);
+    } catch (MalformedURLException e) {
         // give up and return the original input
         return u;
     }
 }
\ No newline at end of file
