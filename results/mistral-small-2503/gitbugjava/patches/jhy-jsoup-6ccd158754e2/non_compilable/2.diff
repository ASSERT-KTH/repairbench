diff --git a/tmp/6a85041b-c031-4611-ad44-64653fa303fa_buggy.java b/tmp/92136f7b-d14b-4893-ab47-a2f7f7fb5307_fixed.java
index 23f078d..86de7a4 100644
--- a/tmp/6a85041b-c031-4611-ad44-64653fa303fa_buggy.java
+++ b/tmp/92136f7b-d14b-4893-ab47-a2f7f7fb5307_fixed.java
@@ -1,14 +1,22 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
+        } else if (Character.isHighSurrogate(c) || Character.isLowSurrogate(c)) {
+            // Handle supplementary characters
+            byte[] utf8Bytes = Character.toString(c).getBytes(StandardCharsets.UTF_8);
+            for (byte b : utf8Bytes) {
+                sb.append(String.format("%%%02X", b));
+            }
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            byte[] utf8Bytes = Character.toString(c).getBytes(StandardCharsets.UTF_8);
+            for (byte b : utf8Bytes) {
+                sb.append(String.format("%%%02X", b));
+            }
         } else {
             sb.append((char) c);
         }
     }
 }
\ No newline at end of file
