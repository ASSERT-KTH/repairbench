diff --git a/tmp/cc1bd3e0-873e-4453-bc4c-15f3a4a6ee97_buggy.java b/tmp/9b4b1d1e-35da-4308-abbc-3dd1ad7c92f5_fixed.java
index 5abdeb5..b72eca0 100644
--- a/tmp/cc1bd3e0-873e-4453-bc4c-15f3a4a6ee97_buggy.java
+++ b/tmp/9b4b1d1e-35da-4308-abbc-3dd1ad7c92f5_fixed.java
@@ -1,29 +1,26 @@
 /**
  * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+ * numUsesWithinCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
   numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
+  AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+      if (n.isName() && n.getString().equals(varName)) {
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
         // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
         //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+        if (!(parent.isAssign() && (parent.getFirstChild() == n))) {
           // Don't count lhs of top-level assignment chain
           numUsesWithinCfgNode++;
         }
       }
-
+    }
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
