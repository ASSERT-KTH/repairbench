diff --git a/tmp/88b4f4bc-f26b-483d-a4a8-efd82f97146c_buggy.java b/tmp/68b60d56-39dc-4f1c-8ee7-e052785e3439_fixed.java
index 5abdeb5..a791301 100644
--- a/tmp/88b4f4bc-f26b-483d-a4a8-efd82f97146c_buggy.java
+++ b/tmp/68b60d56-39dc-4f1c-8ee7-e052785e3439_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * numUsesWithinCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
           if (n.isName() && n.getString().equals(varName) &&
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
               !(parent.isAssign() &&
                (parent.getFirstChild() == n))) {
             // Don't count lhs of top-level assignment chain
             numUsesWithinCfgNode++;
           }
         }
 
       };
 
+      // Ensure we traverse the entire cfgNode
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
