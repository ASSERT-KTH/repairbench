diff --git a/tmp/eacd84d4-7b2c-40b8-9a16-620d57b1ef40_buggy.java b/tmp/fd0ab185-9ec8-45ee-9acd-7b1561ac16c4_fixed.java
index 5abdeb5..0bd65be 100644
--- a/tmp/eacd84d4-7b2c-40b8-9a16-620d57b1ef40_buggy.java
+++ b/tmp/fd0ab185-9ec8-45ee-9acd-7b1561ac16c4_fixed.java
@@ -1,29 +1,31 @@
     /**
      * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
+     * numUsesWithinCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
             // We make a special exception when the entire cfgNode is a chain
             // of assignments, since in that case the assignment statements
             // will happen after the inlining of the right hand side.
             // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
             //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+            if (!(parent.isAssign() &&
+                  (parent.getFirstChild() == n) &&
+                  (parent.getParent() != null && parent.getParent().isAssign()))) {
               // Don't count lhs of top-level assignment chain
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
