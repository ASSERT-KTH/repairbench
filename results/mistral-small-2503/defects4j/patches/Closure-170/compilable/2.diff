diff --git a/tmp/ee359543-b241-4e61-bb22-2f427c6bef56_buggy.java b/tmp/10ea6b11-e249-4305-81ed-3b7037a6beb1_fixed.java
index 5abdeb5..cc1568b 100644
--- a/tmp/ee359543-b241-4e61-bb22-2f427c6bef56_buggy.java
+++ b/tmp/10ea6b11-e249-4305-81ed-3b7037a6beb1_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
+          if (n.isName() && n.getString().equals(varName)) {
               // We make a special exception when the entire cfgNode is a chain
               // of assignments, since in that case the assignment statements
               // will happen after the inlining of the right hand side.
               // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
               //   and remove this special case.
-              !(parent.isAssign() &&
+              if (!(parent.isAssign() &&
                     (parent.getFirstChild() == n))) {
                   // Don't count lhs of top-level assignment chain
                   numUsesWithinCfgNode++;
               }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
