diff --git a/tmp/2426cf92-dbff-4480-8bd6-cc8e0adee876_buggy.java b/tmp/faf15fdd-d3ab-4c44-8da8-57d78d3959d6_fixed.java
index c6b65da..ae62c54 100644
--- a/tmp/2426cf92-dbff-4480-8bd6-cc8e0adee876_buggy.java
+++ b/tmp/faf15fdd-d3ab-4c44-8da8-57d78d3959d6_fixed.java
@@ -1,25 +1,35 @@
 /**
  * Returns the options with a long name starting with the name specified.
  *
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
+ * @throws AmbiguousOptionException if the option name is ambiguous
  * @since 1.3
  */
-    public List<String> getMatchingOptions(String opt)
-    {
+public List<String> getMatchingOptions(String opt) throws AmbiguousOptionException {
     opt = Util.stripLeadingHyphens(opt);
 
-        List<String> matchingOpts = new ArrayList<String>();
+    List<String> matchingOpts = new ArrayList<>();
 
     // for a perfect match return the single option only
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.equals(opt)) {
+            matchingOpts.add(longOpt);
+            return matchingOpts; // Return immediately if there's an exact match
+        }
+    }
 
-        for (String longOpt : longOpts.keySet())
-        {
-            if (longOpt.startsWith(opt))
-            {
+    // Collect all matching options
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.startsWith(opt)) {
             matchingOpts.add(longOpt);
         }
     }
 
+    // Check for ambiguity
+    if (matchingOpts.size() > 1) {
+        throw new AmbiguousOptionException("Ambiguous option: '" + opt + "' (could be: " + String.join(", ", matchingOpts) + ")");
+    }
+
     return matchingOpts;
 }
\ No newline at end of file
