diff --git a/tmp/d241d526-3569-406c-a58d-7a39d5af57df_buggy.java b/tmp/87d93f47-b8a7-4bb7-9388-6892514a12d2_fixed.java
index 139579d..1313b08 100644
--- a/tmp/d241d526-3569-406c-a58d-7a39d5af57df_buggy.java
+++ b/tmp/87d93f47-b8a7-4bb7-9388-6892514a12d2_fixed.java
@@ -1,43 +1,42 @@
-    // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
-        final int len = classAttr.length();
     final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+    // if classAttr is null or empty or shorter than className, return false
+    if (classAttr == null || classAttr.isEmpty() || classAttr.length() < wantLen) {
         return false;
     }
 
     // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
+    if (classAttr.length() == wantLen) {
         return className.equalsIgnoreCase(classAttr);
     }
 
     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
     boolean inClass = false;
     int start = 0;
-        for (int i = 0; i < len; i++) {
+    for (int i = 0; i < classAttr.length(); i++) {
         if (Character.isWhitespace(classAttr.charAt(i))) {
             if (inClass) {
                 // white space ends a class name, compare it with the requested one, ignore case
                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                     return true;
                 }
                 inClass = false;
             }
         } else {
             if (!inClass) {
                 // we're in a class name : keep the start of the substring
                 inClass = true;
                 start = i;
             }
         }
     }
 
     // check the last entry
-        if (inClass && len - start == wantLen) {
+    if (inClass && classAttr.length() - start == wantLen) {
         return classAttr.regionMatches(true, start, className, 0, wantLen);
     }
 
     return false;
 }
\ No newline at end of file
