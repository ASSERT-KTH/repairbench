diff --git a/tmp/22133a7f-9ac9-4497-ba66-a56d1a943c3a_buggy.java b/tmp/b172bce3-d946-4f11-9fbd-c5c0840bdd2b_fixed.java
index 63641d0..4fe19e2 100644
--- a/tmp/22133a7f-9ac9-4497-ba66-a56d1a943c3a_buggy.java
+++ b/tmp/b172bce3-d946-4f11-9fbd-c5c0840bdd2b_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Ensure that the return type of the call target is correctly set
+    JSType returnType = replacementFnType.getReturnType();
+    if (returnType == null) {
+      returnType = JSType.UNKNOWN_TYPE;
+    }
     callTarget.setJSType(replacementFnType);
-    n.setJSType(replacementFnType.getReturnType());
+    n.setJSType(returnType);
 
     return replacer.madeChanges;
   }
\ No newline at end of file
