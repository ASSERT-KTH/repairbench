diff --git a/tmp/d81749f9-47e2-462d-8385-9c3ea28be814_buggy.java b/tmp/c83ab0e1-27ef-4dfc-9eab-491333380c46_fixed.java
index 63641d0..76bedd8 100644
--- a/tmp/d81749f9-47e2-462d-8385-9c3ea28be814_buggy.java
+++ b/tmp/c83ab0e1-27ef-4dfc-9eab-491333380c46_fixed.java
@@ -1,33 +1,25 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
-  private boolean inferTemplatedTypesForCall(
-      Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  private boolean inferTemplatedTypesForCall(Node n, FunctionType fnType) {
+    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+    TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
     Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+    FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    // Ensure that the inferred types are correctly applied to the call target
+    if (replacer.madeChanges) {
       callTarget.setJSType(replacementFnType);
       n.setJSType(replacementFnType.getReturnType());
+    }
 
     return replacer.madeChanges;
   }
\ No newline at end of file
