diff --git a/tmp/d126c424-87ee-4856-a724-2d33d3efd048_buggy.java b/tmp/125e5078-3eae-4fa6-a13e-60f7450dbc34_fixed.java
index d931bce..0c1a17a 100644
--- a/tmp/d126c424-87ee-4856-a724-2d33d3efd048_buggy.java
+++ b/tmp/125e5078-3eae-4fa6-a13e-60f7450dbc34_fixed.java
@@ -1,5 +1,41 @@
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+        if (f == null) {
+            throw new NullPointerException("Function must not be null");
+        }
+        if (min >= max) {
+            throw new IllegalArgumentException("Lower bound must be less than upper bound");
+        }
+        if (initial < min || initial > max) {
+            throw new IllegalArgumentException("Initial guess must be within bounds");
+        }
+
+        // Implement the bisection method using the provided function and bounds
+        double result = initial;
+        double midpoint = (min + max) / 2.0;
+        double fa = f.value(min);
+        double fb = f.value(max);
+        double fc = f.value(midpoint);
+
+        int maxIterations = 100; // Example maximum number of iterations
+        int iteration = 0;
+
+        while (iteration < maxIterations) {
+            if (fc == 0.0) {
+                return midpoint;
+            }
+            if (fa * fc < 0) {
+                max = midpoint;
+                fb = fc;
+            } else {
+                min = midpoint;
+                fa = fc;
+            }
+            midpoint = (min + max) / 2.0;
+            fc = f.value(midpoint);
+            iteration++;
+        }
+
+        throw new MaxIterationsExceededException(maxIterations);
     }
\ No newline at end of file
