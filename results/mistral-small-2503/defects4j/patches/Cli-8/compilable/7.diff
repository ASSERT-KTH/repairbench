diff --git a/tmp/1f79a919-98b0-47ed-9868-4059f9be5209_buggy.java b/tmp/7cd59574-c70b-4d42-8b17-f18c0a0755d8_fixed.java
index 8e93a5e..087be8a 100644
--- a/tmp/1f79a919-98b0-47ed-9868-4059f9be5209_buggy.java
+++ b/tmp/7cd59574-c70b-4d42-8b17-f18c0a0755d8_fixed.java
@@ -1,43 +1,31 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        String trimmedText = text.substring(pos).trim();
+        pos = findWrapPos(trimmedText, width, nextLineTabStop);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(padding).append(trimmedText);
             return sb;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        sb.append(padding).append(rtrim(trimmedText.substring(0, pos))).append(defaultNewLine);
+        text = trimmedText.substring(pos);
     }
 }
\ No newline at end of file
