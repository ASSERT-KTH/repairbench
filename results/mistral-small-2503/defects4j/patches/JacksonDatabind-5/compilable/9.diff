diff --git a/tmp/ad6b59bd-c542-4e42-b0ba-9d1392c40fcf_buggy.java b/tmp/82fc415a-1ad5-4b2b-9a7b-2bf5f9305af4_fixed.java
index b2db1d6..26f2339 100644
--- a/tmp/ad6b59bd-c542-4e42-b0ba-9d1392c40fcf_buggy.java
+++ b/tmp/82fc415a-1ad5-4b2b-9a7b-2bf5f9305af4_fixed.java
@@ -1,29 +1,29 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
+                // Add the method to mixIns even if it is masked by a subclass method
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
