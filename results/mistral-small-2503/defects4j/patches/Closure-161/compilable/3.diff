diff --git a/tmp/1e987f19-68fb-40e5-823b-787bca6eeb88_buggy.java b/tmp/87a018a1-088e-4dfd-8bda-f24b2c6d7759_fixed.java
index 1303a19..cefcc60 100644
--- a/tmp/1e987f19-68fb-40e5-823b-787bca6eeb88_buggy.java
+++ b/tmp/87a018a1-088e-4dfd-8bda-f24b2c6d7759_fixed.java
@@ -1,45 +1,53 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
 
   if (right.getType() != Token.NUMBER) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
   if (intIndex < 0) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node elem = left.getFirstChild();
   for (int i = 0; elem != null && i < intIndex; i++) {
     elem = elem.getNext();
   }
 
   if (elem == null) {
+    // If the element is null, it means the index is out of bounds.
+    // We need to handle this case properly.
+    if (left.getChildCount() == 0) {
+      // The array is empty, so we need to create a new undefined node.
+      elem = NodeUtil.newUndefinedNode(left);
+    } else {
+      // The index is out of bounds, so we report an error.
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
+  }
 
   if (elem.getType() == Token.EMPTY) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
