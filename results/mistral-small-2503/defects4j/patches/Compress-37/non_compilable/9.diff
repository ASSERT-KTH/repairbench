diff --git a/tmp/15dc3d56-11b3-47ed-9ad2-e8dcf461e0e9_buggy.java b/tmp/e68dc2f7-04bb-4302-bdb2-0fd39308c4a7_fixed.java
index 4b7e1e4..b8b2ce9 100644
--- a/tmp/15dc3d56-11b3-47ed-9ad2-e8dcf461e0e9_buggy.java
+++ b/tmp/e68dc2f7-04bb-4302-bdb2-0fd39308c4a7_fixed.java
@@ -1,52 +1,56 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
-                                final byte[] rest = new byte[restLen];
+                            final byte[] rest;
+                            if (restLen > 0) {
+                                rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
                                     throw new IOException("Failed to read "
                                                                   + "Paxheader. Expected "
                                                                   + restLen
                                                                   + " bytes, read "
                                                                   + got);
                                 }
+                            } else {
+                                rest = new byte[0];
+                            }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                                          restLen > 0 ? restLen - 1 : 0, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
