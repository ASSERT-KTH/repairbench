diff --git a/tmp/3428012e-a744-40df-b506-8de0b389e5b8_buggy.java b/tmp/5663c944-ec26-405f-9245-e615dbcfd1fb_fixed.java
index 4b7e1e4..30d209c 100644
--- a/tmp/3428012e-a744-40df-b506-8de0b389e5b8_buggy.java
+++ b/tmp/5663c944-ec26-405f-9245-e615dbcfd1fb_fixed.java
@@ -1,52 +1,53 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
-    Map<String, String> parsePaxHeaders(final InputStream i)
-        throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+Map<String, String> parsePaxHeaders(final InputStream i) throws IOException {
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                           restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
+            len = len * 10 + (ch - '0');
         }
         if (ch == -1) { // EOF
             break;
         }
+        // Skip the rest of the line if it's blank
+        while ((ch = i.read()) != -1 && ch != '\n') {
+            // Do nothing, just skip the characters
+        }
     }
     return headers;
 }
\ No newline at end of file
