diff --git a/tmp/13500ef7-deac-44cf-bbbc-cac7c250c0f8_buggy.java b/tmp/16b58fed-b27c-40a3-b572-41d1ae7dee46_fixed.java
index 3fb3172..6597567 100644
--- a/tmp/13500ef7-deac-44cf-bbbc-cac7c250c0f8_buggy.java
+++ b/tmp/16b58fed-b27c-40a3-b572-41d1ae7dee46_fixed.java
@@ -1,13 +1,33 @@
-    /**
-     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.
-     * <p>
-     * When encoding the line length is 0 (no chunking), and the encoding table is STANDARD_ENCODE_TABLE.
-     * </p>
-     * 
-     * <p>
-     * When decoding all variants are supported.
-     * </p>
-     */
+import org.apache.commons.codec.Encoder;
+import org.apache.commons.codec.BinaryEncoder;
+import org.apache.commons.codec.EncoderException;
+import org.apache.commons.codec.binary.Base64;
+
+public class Base64 implements Encoder, BinaryEncoder {
+    private final boolean urlSafe;
+
     public Base64() {
         this(false);
     }
+
+    public Base64(boolean urlSafe) {
+        this.urlSafe = urlSafe;
+    }
+
+    @Override
+    public Object encode(Object source) throws EncoderException {
+        if (source instanceof byte[]) {
+            return encode((byte[]) source);
+        }
+        throw new EncoderException("Source object is not a byte array");
+    }
+
+    @Override
+    public byte[] encode(byte[] binaryData) throws EncoderException {
+        if (urlSafe) {
+            return org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(binaryData);
+        } else {
+            return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData);
+        }
+    }
+}
\ No newline at end of file
