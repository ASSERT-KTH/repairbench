diff --git a/tmp/bd04e9f8-b911-441f-84b7-03ac230bf1d0_buggy.java b/tmp/15e5256f-de98-49b7-a2f4-600b105acc69_fixed.java
index e087f95..4a5804d 100644
--- a/tmp/bd04e9f8-b911-441f-84b7-03ac230bf1d0_buggy.java
+++ b/tmp/15e5256f-de98-49b7-a2f4-600b105acc69_fixed.java
@@ -1,53 +1,64 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("The length must be at least 2 bytes.");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
-            }
             if (currentByte == (byte) ' ') {
+                continue;
+            }
+
+            // Check for all NULs case
+            if (currentByte == 0) {
+                if (i == start && i == end - 1) {
+                    return 0L; // All NULs case
+                }
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
+            if (stillPadding) {
+                if (currentByte == '0') {
                     stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                } else {
+                    throw new IllegalArgumentException("Invalid leading character: " + currentByte);
+                }
+            } else {
+                // Check for invalid characters
                 if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    throw new IllegalArgumentException("Invalid octal digit: " + currentByte);
                 }
                 result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            }
+        }
+
+        // Ensure there is a trailing space or NUL
+        if (buffer[end - 1] != ' ' && buffer[end - 1] != 0) {
+            throw new IllegalArgumentException("Missing trailing space or NUL.");
         }
 
         return result;
     }
\ No newline at end of file
