diff --git a/tmp/a16a5544-572a-4ae5-a77d-45a071bb4301_buggy.java b/tmp/79b4253b-97cb-44d9-a437-4818c924c729_fixed.java
index e087f95..a1757f8 100644
--- a/tmp/a16a5544-572a-4ae5-a77d-45a071bb4301_buggy.java
+++ b/tmp/79b4253b-97cb-44d9-a437-4818c924c729_fixed.java
@@ -1,53 +1,62 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
             break;
         }
 
         // Skip leading spaces
         if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
             if (currentByte == (byte) ' ') {
                 break;
             }
         }
 
         // Must have trailing NUL or space
         // May have additional NUL or space
 
         stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    // Ensure there is a trailing space or NUL
+    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+        throw new IllegalArgumentException("Missing trailing space or NUL.");
+    }
+
     return result;
 }
\ No newline at end of file
