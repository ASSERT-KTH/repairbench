diff --git a/tmp/27c801d7-bfef-4182-9e33-57a2b769aa7c_buggy.java b/tmp/195e9b80-9222-4754-9201-a126a21602d9_fixed.java
index 3ec995f..3f1074b 100644
--- a/tmp/27c801d7-bfef-4182-9e33-57a2b769aa7c_buggy.java
+++ b/tmp/195e9b80-9222-4754-9201-a126a21602d9_fixed.java
@@ -1,26 +1,48 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      *
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      *
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      *
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty() || "0".equals(version)) {
+            return 0;
+        }
+
+        // Extract the version number part from the string
+        String versionNumber = version.replaceAll("[^0-9.]", "");
+
+        // Split the version number into parts
+        String[] parts = versionNumber.split("\\.");
+
+        if (parts.length < 2) {
+            return 0;
+        }
+
+        int major = Integer.parseInt(parts[0]);
+        int minor = Integer.parseInt(parts[1]);
+
+        if (parts.length > 2) {
+            int micro = Integer.parseInt(parts[2]);
+            return major * 100 + minor * 10 + micro;
+        }
+
+        return major * 100 + minor * 10;
     }
\ No newline at end of file
