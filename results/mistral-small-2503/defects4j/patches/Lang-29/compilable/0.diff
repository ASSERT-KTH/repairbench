diff --git a/tmp/0eb33199-6cd4-45a4-a78b-d711f6a1be61_buggy.java b/tmp/d6a8289a-7ee9-451c-960c-41d6c4cc1847_fixed.java
index 3ec995f..92213b9 100644
--- a/tmp/0eb33199-6cd4-45a4-a78b-d711f6a1be61_buggy.java
+++ b/tmp/d6a8289a-7ee9-451c-960c-41d6c4cc1847_fixed.java
@@ -1,26 +1,43 @@
     /**
      * <p>
      * Converts the given Java version string to an <code>int</code>.
      * </p>
      *
      * <p>
      * Example return values:
      * </p>
      * <ul>
      * <li><code>120</code> for Java 1.2</li>
      * <li><code>131</code> for Java 1.3.1</li>
      * <li><code>160</code> for Java 1.6.0_20</li>
      * </ul>
      *
      * <p>
      * Patch releases are not reported.
      * </p>
      * <p>
      * This method is package private instead of private to support unit test invocation.
      * </p>
      *
      * @return the version, for example 131 for Java 1.3.1
      */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty() || "0".equals(version)) {
+            return 0;
+        }
+
+        String[] versionParts = version.split("[^0-9]+");
+        if (versionParts.length < 2) {
+            return 0;
+        }
+
+        int major = Integer.parseInt(versionParts[0]);
+        int minor = Integer.parseInt(versionParts[1]);
+
+        if (versionParts.length >= 3) {
+            int micro = Integer.parseInt(versionParts[2]);
+            return major * 100 + minor * 10 + micro;
+        }
+
+        return major * 100 + minor * 10;
     }
\ No newline at end of file
