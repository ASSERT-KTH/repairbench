diff --git a/tmp/ce7f8df1-d4c5-433b-ba92-347cacd00394_buggy.java b/tmp/d3b38ade-b113-4746-820d-2fa252996a10_fixed.java
index 0b7c52e..acebe19 100644
--- a/tmp/ce7f8df1-d4c5-433b-ba92-347cacd00394_buggy.java
+++ b/tmp/d3b38ade-b113-4746-820d-2fa252996a10_fixed.java
@@ -1,27 +1,35 @@
-    /**
-     * Processes a OBJECTLIT node.
-     */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
        child != null;
        child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
     T type = typeSystem.getType(getScope(), n, name);
 
     Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
+    if (prop == null) {
+      // If the property does not exist, we should handle it differently.
+      // For example, we might want to create a new property or report an error.
+      if (propertiesToErrorFor.containsKey(name)) {
+        compiler.report(JSError.make(
+            t.getSourceName(), child, propertiesToErrorFor.get(name),
+            Warnings.INVALIDATION, name,
+            (type == null ? "null" : type.toString()), n.toString(), ""));
+      }
+      continue;
+    }
+
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
