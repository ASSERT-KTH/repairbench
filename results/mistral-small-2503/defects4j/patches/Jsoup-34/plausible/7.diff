diff --git a/tmp/757dab2f-1af4-479a-b9bb-f37974b270e7_buggy.java b/tmp/987e7690-2edb-426a-a0df-adbe2e52acad_fixed.java
index 21f64c6..a3d639b 100644
--- a/tmp/757dab2f-1af4-479a-b9bb-f37974b270e7_buggy.java
+++ b/tmp/987e7690-2edb-426a-a0df-adbe2e52acad_fixed.java
@@ -1,23 +1,34 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        if (seq == null || seq.length() == 0) {
+            return -1;
+        }
+
         char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int seqLength = seq.length();
+        for (int offset = pos; offset <= length - seqLength; offset++) {
+            // scan to first instance of startChar:
+            if (input[offset] != startChar) {
+                continue;
+            }
+
+            // We found the startChar, now check the rest of the sequence
+            boolean match = true;
+            for (int i = 1; i < seqLength; i++) {
+                if (input[offset + i] != seq.charAt(i)) {
+                    match = false;
+                    break;
+                }
+            }
+
+            if (match) {
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
