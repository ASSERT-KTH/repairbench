diff --git a/tmp/12d5d46c-87d6-44b6-9a9b-f73139d7f676_buggy.java b/tmp/162ea78f-9666-4884-82a9-16ac4168ebbf_fixed.java
index 21f64c6..49f4f46 100644
--- a/tmp/12d5d46c-87d6-44b6-9a9b-f73139d7f676_buggy.java
+++ b/tmp/162ea78f-9666-4884-82a9-16ac4168ebbf_fixed.java
@@ -1,23 +1,28 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return 0; // empty sequence is always found at the current position
+    }
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
+            while (++offset <= length - seq.length() && startChar != input[offset]);
+        }
+
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
+        if (offset <= length - seq.length()) {
             for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
