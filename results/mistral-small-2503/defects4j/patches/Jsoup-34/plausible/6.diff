diff --git a/tmp/b009e6b3-b921-4370-9d43-f11c6ecf8a9a_buggy.java b/tmp/e17a576a-fbb7-4fee-896b-296cf0356682_fixed.java
index 21f64c6..a23b723 100644
--- a/tmp/b009e6b3-b921-4370-9d43-f11c6ecf8a9a_buggy.java
+++ b/tmp/e17a576a-fbb7-4fee-896b-296cf0356682_fixed.java
@@ -1,23 +1,26 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
-        char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int startChar = seq.charAt(0);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+        if (input[offset] == startChar) {
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = offset + seq.length();
+            if (last <= length) {
+                for (int j = 1; i < last && j < seq.length(); i++, j++) {
+                    if (seq.charAt(j) != input[i]) {
+                        break;
+                    }
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
