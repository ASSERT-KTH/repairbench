diff --git a/tmp/169d9388-50e2-4d05-8e5f-cd7dd812bdc5_buggy.java b/tmp/f501dc77-2769-4412-b3fe-4c45dbc92ac0_fixed.java
index 21f64c6..a2c531a 100644
--- a/tmp/169d9388-50e2-4d05-8e5f-cd7dd812bdc5_buggy.java
+++ b/tmp/f501dc77-2769-4412-b3fe-4c45dbc92ac0_fixed.java
@@ -1,23 +1,25 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+    if (seq.length() == 0) {
+        return pos;
+    }
+
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    for (int offset = pos; offset <= length - seq.length(); offset++) {
+        // scan to first instance of startChar:
+        if (input[offset] == startChar) {
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last <= length) {
+                for (int j = 1; i < last && j < seq.length(); i++, j++) {
+                    if (seq.charAt(j) != input[i]) {
+                        break;
+                    }
+                }
+                if (i == last) { // found full sequence
                     return offset - pos;
                 }
             }
+        }
+    }
     return -1;
 }
\ No newline at end of file
