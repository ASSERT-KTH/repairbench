diff --git a/tmp/ef67edc1-2885-4a1d-bbeb-6e690d1b6392_buggy.java b/tmp/bae532cd-a157-41d4-a8b5-1e6af6c2f311_fixed.java
index b98f0a7..996c800 100644
--- a/tmp/ef67edc1-2885-4a1d-bbeb-6e690d1b6392_buggy.java
+++ b/tmp/bae532cd-a157-41d4-a8b5-1e6af6c2f311_fixed.java
@@ -1,29 +1,31 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
-    JSType type = null;
+    JSType type = constructorType; // Initialize type with constructorType
+
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
+
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
