diff --git a/tmp/ad3f633f-e09d-41b4-816a-9ae180fcb058_buggy.java b/tmp/3a22c876-0ffc-4fda-b5e0-fdf286f9c277_fixed.java
index b98f0a7..1e5bd97 100644
--- a/tmp/ad3f633f-e09d-41b4-816a-9ae180fcb058_buggy.java
+++ b/tmp/3a22c876-0ffc-4fda-b5e0-fdf286f9c277_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  // Ensure that the arguments are processed correctly
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+
+  // Ensure the type information is propagated back to the scope
+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    JSType argType = arg.getJSType();
+    if (argType != null) {
+      scope = scope.infer(arg, argType);
+    }
+  }
+
   return scope;
 }
\ No newline at end of file
