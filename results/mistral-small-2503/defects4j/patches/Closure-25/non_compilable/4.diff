diff --git a/tmp/6db27076-4ab2-47cf-9d18-4461d54c8ab8_buggy.java b/tmp/c18b1b35-6369-49a0-bee4-0b452b9f2db0_fixed.java
index b98f0a7..42d4c9f 100644
--- a/tmp/6db27076-4ab2-47cf-9d18-4461d54c8ab8_buggy.java
+++ b/tmp/c18b1b35-6369-49a0-bee4-0b452b9f2db0_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+
+    // Ensure the type of the argument is set in the scope
+    Node arg = constructor.getNext();
+    if (arg != null) {
+        JSType argType = arg.getJSType();
+        if (argType != null) {
+            scope = scope.setType(arg, argType);
         }
+    }
+
+    for (Node nextArg = arg != null ? arg.getNext() : null; nextArg != null; nextArg = nextArg.getNext()) {
+        scope = traverse(nextArg, scope);
+    }
+
     return scope;
 }
\ No newline at end of file
