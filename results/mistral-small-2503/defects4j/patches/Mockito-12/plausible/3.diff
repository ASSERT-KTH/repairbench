diff --git a/tmp/29edf1ef-c67b-4e8d-81b5-c1845f7ef2eb_buggy.java b/tmp/91024dc9-bcef-4e2b-ac9a-b2df2e3edb28_fixed.java
index bada2b6..acf8a4c 100644
--- a/tmp/29edf1ef-c67b-4e8d-81b5-c1845f7ef2eb_buggy.java
+++ b/tmp/91024dc9-bcef-4e2b-ac9a-b2df2e3edb28_fixed.java
@@ -1,16 +1,15 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
 public Class getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
+    if (generic instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) generic;
+        Type rawType = parameterizedType.getRawType();
+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
 
+        if (actualTypeArguments.length > 0 && actualTypeArguments[0] instanceof Class) {
+            return (Class) actualTypeArguments[0];
+        } else if (actualTypeArguments[0] instanceof ParameterizedType) {
+            return (Class) ((ParameterizedType) actualTypeArguments[0]).getRawType();
+        }
+    }
     return Object.class;
 }
\ No newline at end of file
