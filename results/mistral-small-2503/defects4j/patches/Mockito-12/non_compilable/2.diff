diff --git a/tmp/d183a496-886b-4907-a878-0fdd4f5f3551_buggy.java b/tmp/3b444ead-57f1-4f7e-a584-4bf5be34a905_fixed.java
index bada2b6..f914351 100644
--- a/tmp/d183a496-886b-4907-a878-0fdd4f5f3551_buggy.java
+++ b/tmp/3b444ead-57f1-4f7e-a584-4bf5be34a905_fixed.java
@@ -1,16 +1,26 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  *
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic != null) {
+        if (generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+            if (actual instanceof Class<?>) {
+                return (Class<?>) actual;
+            } else if (actual instanceof ParameterizedType) {
+                return (Class<?>) ((ParameterizedType) actual).getRawType();
+            } else if (actual instanceof TypeVariable<?>) {
+                return Object.class; // Handle type variables appropriately
+            } else if (actual instanceof WildcardType) {
+                return Object.class; // Handle wildcard types appropriately
+            }
+        } else if (generic instanceof Class<?>) {
+            return (Class<?>) generic;
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
