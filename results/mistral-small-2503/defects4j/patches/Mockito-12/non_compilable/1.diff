diff --git a/tmp/182b73c9-c0b7-4388-a85d-6fe6052be0b4_buggy.java b/tmp/25efaca7-5a7a-4926-99d7-2f4e9ab02974_fixed.java
index bada2b6..fa50f4d 100644
--- a/tmp/182b73c9-c0b7-4388-a85d-6fe6052be0b4_buggy.java
+++ b/tmp/25efaca7-5a7a-4926-99d7-2f4e9ab02974_fixed.java
@@ -1,16 +1,21 @@
-    /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
-     * 
-     * @param field
-     * @return
-     */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
+    if (generic instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) generic;
+        Type rawType = parameterizedType.getRawType();
+        Type actualType = parameterizedType.getActualTypeArguments()[0];
 
+        if (actualType instanceof ParameterizedType) {
+            return (Class<?>) ((ParameterizedType) actualType).getRawType();
+        } else if (actualType instanceof Class) {
+            return (Class<?>) actualType;
+        } else if (actualType instanceof TypeVariable) {
+            TypeVariable<?> typeVariable = (TypeVariable<?>) actualType;
+            Type[] bounds = typeVariable.getBounds();
+            if (bounds.length > 0) {
+                return (Class<?>) bounds[0];
+            }
+        }
+    }
     return Object.class;
 }
\ No newline at end of file
