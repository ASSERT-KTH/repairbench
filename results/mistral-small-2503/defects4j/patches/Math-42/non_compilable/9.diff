diff --git a/tmp/9ce36d4c-9270-4460-b012-0f71113efa50_buggy.java b/tmp/25cb382b-7fed-4eb4-b48c-2c80f2e19cc0_fixed.java
index efa499e..f62992d 100644
--- a/tmp/9ce36d4c-9270-4460-b012-0f71113efa50_buggy.java
+++ b/tmp/25cb382b-7fed-4eb4-b48c-2c80f2e19cc0_fixed.java
@@ -1,35 +1,36 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+    Set<Integer> basicRows = new HashSet<>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
         // if the basic row is found to be the objective function row
         // set the coefficient to 0 -> this case handles unconstrained
         // variables that are still part of the objective function
         if (basicRows.contains(basicRow)) {
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset()));
         }
     }
+
+    // Adjust coefficients based on the mostNegative value if necessary
+    if (!restrictToNonNegative) {
+        for (int i = 0; i < coefficients.length; i++) {
+            coefficients[i] -= mostNegative;
+        }
+    }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
