diff --git a/tmp/4fb488d0-6899-4afb-b7db-1d97d611a85b_buggy.java b/tmp/1e777d5c-1d54-4bad-ac5a-3e059b45e962_fixed.java
index 88647d1..3e30c82 100644
--- a/tmp/4fb488d0-6899-4afb-b7db-1d97d611a85b_buggy.java
+++ b/tmp/1e777d5c-1d54-4bad-ac5a-3e059b45e962_fixed.java
@@ -1,44 +1,36 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
     double ret = Double.NaN;
 
     double yMin = f.value(min);
     double yMax = f.value(max);
 
     // Verify bracketing
+    if (yMin == 0) {
+        // min is a root
+        return min;
+    } else if (yMax == 0) {
+        // max is a root
+        return max;
+    } else {
         double sign = yMin * yMax;
         if (sign >= 0) {
             // check if either value is close to a zero
             // neither value is close to zero and min and max do not bracket root.
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" +
                     "  Values: [" + yMin + "," + yMax + "]");
         } else {
             // solve using only the first endpoint as initial guess
             ret = solve(min, yMin, max, yMax, min, yMin);
             // either min or max is a root
         }
+    }
 
     return ret;
 }
\ No newline at end of file
