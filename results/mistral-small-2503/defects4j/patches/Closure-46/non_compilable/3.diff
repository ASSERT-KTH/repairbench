diff --git a/tmp/f1fb5502-8e44-4f2c-8ede-ece037fc4704_buggy.java b/tmp/40308f4a-d15c-4a9a-8e00-3079c64af9b2_fixed.java
index 46817a7..262b6a8 100644
--- a/tmp/f1fb5502-8e44-4f2c-8ede-ece037fc4704_buggy.java
+++ b/tmp/40308f4a-d15c-4a9a-8e00-3079c64af9b2_fixed.java
@@ -1,16 +1,30 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+  // Collect all properties from both record types
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+
+  for (String property : allProperties) {
+    JSType thisType = properties.get(property);
+    JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+
+    if (thisType != null && thatType != null) {
+      // If both record types have the property, use the union of the types
+      builder.addProperty(property, registry.createUnionType(thisType, thatType), null);
+    } else if (thisType != null) {
+      // If only this record type has the property, use this type
+      builder.addProperty(property, thisType, getPropertyNode(property));
+    } else {
+      // If only the other record type has the property, use that type
+      builder.addProperty(property, thatType, null);
     }
   }
+
   return builder.build();
 }
\ No newline at end of file
