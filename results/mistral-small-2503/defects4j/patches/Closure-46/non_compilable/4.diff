diff --git a/tmp/4bec6308-37cf-408d-b932-c31ffb147335_buggy.java b/tmp/4ede5974-f278-45fa-8c46-15b4ff9dd633_fixed.java
index 46817a7..fc358ef 100644
--- a/tmp/4bec6308-37cf-408d-b932-c31ffb147335_buggy.java
+++ b/tmp/4ede5974-f278-45fa-8c46-15b4ff9dd633_fixed.java
@@ -1,16 +1,29 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+  // Collect all properties from both record types
+  Set<String> allProperties = new HashSet<>(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+
+  for (String property : allProperties) {
+    JSType thisType = getPropertyType(property);
+    JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+
+    if (thisType != null && thatType != null) {
+      // If both types have the property, create a union type
+      builder.addProperty(property, registry.createUnionType(thisType, thatType), null);
+    } else if (thisType != null) {
+      // If only this type has the property, add it as is
+      builder.addProperty(property, thisType, getPropertyNode(property));
+    } else if (thatType != null) {
+      // If only that type has the property, add it as is
+      builder.addProperty(property, thatType, null);
     }
   }
+
   return builder.build();
 }
\ No newline at end of file
