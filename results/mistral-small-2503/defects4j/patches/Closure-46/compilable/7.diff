diff --git a/tmp/61fce041-e6c4-4833-82bc-f05c60664c66_buggy.java b/tmp/86258b4e-be4f-412e-96f4-37b1ace61f78_fixed.java
index 46817a7..5944606 100644
--- a/tmp/61fce041-e6c4-4833-82bc-f05c60664c66_buggy.java
+++ b/tmp/86258b4e-be4f-412e-96f4-37b1ace61f78_fixed.java
@@ -1,16 +1,30 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+    // Add properties from the current record type
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
     }
+
+    // Add properties from the `that` record type
+    for (String property : that.toMaybeRecordType().getPropertyNames()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), null);
       }
-    return builder.build();
+    }
+
+    // Build the resulting record type
+    JSType result = builder.build();
+
+    // If the result is not a union type, return it directly
+    if (!that.isUnionType()) {
+      return result;
+    }
+
+    // Otherwise, create a union type of the current record type and the `that` record type
+    return registry.createUnionType(this, that);
   }
\ No newline at end of file
