diff --git a/tmp/c2007898-ae52-40f0-bcb0-1f3e3245d70f_buggy.java b/tmp/bbdd3d8b-8ea4-48bc-b845-0a5db6c56ca4_fixed.java
index 5f1dcf2..39279aa 100644
--- a/tmp/c2007898-ae52-40f0-bcb0-1f3e3245d70f_buggy.java
+++ b/tmp/bbdd3d8b-8ea4-48bc-b845-0a5db6c56ca4_fixed.java
@@ -1,41 +1,50 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        int maxIterations = getMaxIterations();
+        int maxEvaluations = getMaxEvaluations();
+
+        while (getIterations() < maxIterations && getEvaluations() < maxEvaluations) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
                 }
 
+                if (isConverged()) {
                     return;
-
                 }
 
+            } else {
+
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
+                    simplex = new RealPointValuePair[]{contracted};
+                }
 
                 // check convergence
+                if (isConverged()) {
                     return;
                 }
-
+            }
         }
 
+        throw new MaxIterationsExceededException(maxIterations);
     }
\ No newline at end of file
