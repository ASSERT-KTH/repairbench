diff --git a/tmp/16541176-c96f-4ed3-aad8-5f6b368d2b8d_buggy.java b/tmp/eb01c0db-f96b-48d0-b1e8-04a77fb90db9_fixed.java
index 5f1dcf2..ba972e1 100644
--- a/tmp/16541176-c96f-4ed3-aad8-5f6b368d2b8d_buggy.java
+++ b/tmp/eb01c0db-f96b-48d0-b1e8-04a77fb90db9_fixed.java
@@ -1,41 +1,50 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    int maxIterations = getMaxIterations();
+    int iterationCount = 0;
+
+    while (iterationCount < maxIterations) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
-                return;
+            iterationCount++;
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = new RealPointValuePair[]{contracted};
+        }
 
         // check convergence
+        if (checkConvergence()) {
             return;
         }
 
+        iterationCount++;
     }
 
+    throw new MaxIterationsExceededException(maxIterations);
 }
\ No newline at end of file
