diff --git a/tmp/27b8710d-e9c4-4abb-b898-1f0115865a48_buggy.java b/tmp/1e58c2b5-c301-415a-ba92-f5bc32af69c9_fixed.java
index 5f1dcf2..4cbd6d4 100644
--- a/tmp/27b8710d-e9c4-4abb-b898-1f0115865a48_buggy.java
+++ b/tmp/1e58c2b5-c301-415a-ba92-f5bc32af69c9_fixed.java
@@ -1,41 +1,43 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (isIterationLimitReached() || !isConverged()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = new RealPointValuePair[]{expanded, original[1], original[2], original[3]};
                 }
-
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
+                simplex = new RealPointValuePair[]{contracted, original[1], original[2], original[3]};
                 return;
             }
 
+            // perform a shrink step
+            simplex = shrinkSimplex(original, rho, comparator);
         }
-
     }
\ No newline at end of file
