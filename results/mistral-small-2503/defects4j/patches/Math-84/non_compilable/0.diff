diff --git a/tmp/5bd1faae-8932-4ffc-86ff-4c43441511d7_buggy.java b/tmp/261442b5-a1cb-4cda-ac46-57bb5c8f8baf_fixed.java
index 5f1dcf2..7d5ac33 100644
--- a/tmp/5bd1faae-8932-4ffc-86ff-4c43441511d7_buggy.java
+++ b/tmp/261442b5-a1cb-4cda-ac46-57bb5c8f8baf_fixed.java
@@ -1,41 +1,45 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (getIterations() < getMaxIterations()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = new RealPointValuePair[]{reflected, original[1], original[2], original[3]};
+                } else {
+                    simplex = new RealPointValuePair[]{expanded, original[1], original[2], original[3]};
                 }
-
                 return;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[]{contracted, original[1], original[2], original[3]};
+                return;
+            }
 
             // check convergence
+            if (isConverged()) {
                 return;
             }
-
         }
 
+        throw new MaxIterationsExceededException(getMaxIterations());
     }
\ No newline at end of file
