diff --git a/tmp/d0428630-9369-47d1-8278-73cbd24bfa7a_buggy.java b/tmp/2c2dd1e6-6ba0-4f39-9e02-6e6d41222d10_fixed.java
index 670114d..64ac1b8 100644
--- a/tmp/d0428630-9369-47d1-8278-73cbd24bfa7a_buggy.java
+++ b/tmp/2c2dd1e6-6ba0-4f39-9e02-6e6d41222d10_fixed.java
@@ -1,48 +1,67 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
           Preconditions.checkNotNull(ns);
           recordSet(ns.name, n);
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
             recordSet(nameInfo.name, nameNode);
           }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
 
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
-      } else if (n.isCall()) {
+      } else if (n.isCall() && n.getParent().isGetProp()) {
+        Node callNode = n.getParent();
+        Node propNode = callNode.getFirstChild();
+        if (propNode.isGetProp() && propNode.getFirstChild().isGetProp()) {
+          Node outerPropNode = propNode.getFirstChild();
+          Node innerPropNode = outerPropNode.getFirstChild();
+          if (innerPropNode.isName() && outerPropNode.isName()) {
+            String outerPropName = outerPropNode.getString();
+            String innerPropName = innerPropNode.getString();
+
             Node nameNode = n.getFirstChild();
             NameInformation ns = createNameInformation(t, nameNode, n);
             if (ns != null && ns.onlyAffectsClassDef) {
               JsName name = getName(ns.name, false);
               if (name != null) {
                 refNodes.add(new ClassDefiningFunctionNode(
                     name, n, parent, parent.getParent()));
               }
             }
+
+            // Handle constructor inheritance
+            JsName outerPropInfo = getName(outerPropName, true);
+            JsName innerPropInfo = getName(innerPropName, true);
+            if (outerPropInfo != null && innerPropInfo != null) {
+              recordSet(innerPropInfo.name, innerPropNode);
+              recordSet(outerPropInfo.name, outerPropNode);
+            }
+          }
+        }
       }
     }
\ No newline at end of file
