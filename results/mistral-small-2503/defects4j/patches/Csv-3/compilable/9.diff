diff --git a/tmp/c4d99a50-d879-462d-97cf-ce313aa70c63_buggy.java b/tmp/b82c15df-e44a-4c95-a487-780a3ba66b24_fixed.java
index 1ad070d..ea94702 100644
--- a/tmp/c4d99a50-d879-462d-97cf-ce313aa70c63_buggy.java
+++ b/tmp/b82c15df-e44a-4c95-a487-780a3ba66b24_fixed.java
@@ -1,38 +1,42 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      *
      * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected:
-     * the escape character is not allowed at end of strem
+     * the escape character is not allowed at end of stream
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
             case 'r':
                 return CR;
             case 'n':
                 return LF;
             case 't':
                 return TAB;
             case 'b':
                 return BACKSPACE;
             case 'f':
                 return FF;
+            case 'N': // MySQL uses \N to symbolize null values
+                return 'N';
+            case '\\': // Escape the backslash itself
+                return '\\';
             case CR:
             case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+            case FF:
+            case TAB:
+            case BACKSPACE:
                 return c;
             case END_OF_STREAM:
                 throw new IOException("EOF whilst processing escape sequence");
             default:
                 // Now check for meta-characters
                 return c;
                 // indicate unexpected char - available from in.getLastChar()
         }
     }
\ No newline at end of file
