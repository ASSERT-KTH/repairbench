diff --git a/tmp/afe380c5-b6af-43a0-80c3-ecbed675a1df_buggy.java b/tmp/f2cd1ff2-15cf-4c61-855a-052b7d2a021b_fixed.java
index 1ad070d..94b801f 100644
--- a/tmp/afe380c5-b6af-43a0-80c3-ecbed675a1df_buggy.java
+++ b/tmp/f2cd1ff2-15cf-4c61-855a-052b7d2a021b_fixed.java
@@ -1,38 +1,29 @@
-    /**
-     * Handle an escape sequence.
-     * The current character must be the escape character.
-     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
-     * on the input stream.
-     * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
-     * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
-     */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
+        case 'N': // Handle MySQL NULL symbol
+            return 'N';
         case CR:
         case LF:
         case FF: // TODO is this correct?
         case TAB: // TODO is this correct? Do tabs need to be escaped?
         case BACKSPACE: // TODO is this correct?
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
             // Now check for meta-characters
             return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
