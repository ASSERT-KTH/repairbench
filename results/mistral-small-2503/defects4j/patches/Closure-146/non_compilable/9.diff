diff --git a/tmp/226d8cf0-b61f-4863-88f8-bfba97677126_buggy.java b/tmp/73935635-3733-41b4-9e44-42b7768e6493_fixed.java
index 210695a..d340052 100644
--- a/tmp/226d8cf0-b61f-4863-88f8-bfba97677126_buggy.java
+++ b/tmp/73935635-3733-41b4-9e44-42b7768e6493_fixed.java
@@ -1,32 +1,37 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
+    // Handle the case where both types are VOID_TYPE
+    if (this.isVoidType() && that.isVoidType()) {
+      return new TypePair(NO_TYPE, NO_TYPE);
+    }
+
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
 
       case FALSE:
       case UNKNOWN:
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
