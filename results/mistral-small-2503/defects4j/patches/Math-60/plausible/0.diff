diff --git a/tmp/d2c98f95-0fcb-431d-b153-68ebc4d678b2_buggy.java b/tmp/ab96f183-5ae0-42ae-a077-db5dcdb953a6_fixed.java
index 3127f85..c86bd24 100644
--- a/tmp/d2c98f95-0fcb-431d-b153-68ebc4d678b2_buggy.java
+++ b/tmp/ab96f183-5ae0-42ae-a077-db5dcdb953a6_fixed.java
@@ -1,24 +1,21 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        final double threshold = 40 * standardDeviation;
+
+        if (x < (mean - threshold)) {
             return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+        } else if (x > (mean + threshold)) {
             return 1;
         } else {
-                throw ex;
-            }
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         }
     }
\ No newline at end of file
