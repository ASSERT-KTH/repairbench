diff --git a/tmp/b7a79dfe-6e76-4aa9-8d89-e748757602de_buggy.java b/tmp/0f2ab334-abca-4696-834e-0260d86c416e_fixed.java
index 3127f85..851d9af 100644
--- a/tmp/b7a79dfe-6e76-4aa9-8d89-e748757602de_buggy.java
+++ b/tmp/0f2ab334-abca-4696-834e-0260d86c416e_fixed.java
@@ -1,24 +1,31 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+        double erfValue = Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0)));
+        return 0.5 * (1.0 + erfValue);
+    } catch (Exception ex) {
+        if (Double.isInfinite(x)) {
+            if (x < 0) {
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else {
+                return 1;
+            }
+        }
+        if (x < (mean - 40 * standardDeviation)) {
+            return 0;
+        } else if (x > (mean + 40 * standardDeviation)) {
             return 1;
         } else {
-                throw ex;
+            throw new MathException("Algorithm failed to converge", ex);
         }
     }
 }
\ No newline at end of file
