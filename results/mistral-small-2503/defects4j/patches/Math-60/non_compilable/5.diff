diff --git a/tmp/318deee6-8cf2-4bd0-b768-c596caf61e66_buggy.java b/tmp/a0a80b39-9acd-4234-ab32-3befe2208f9f_fixed.java
index 3127f85..13a27c5 100644
--- a/tmp/318deee6-8cf2-4bd0-b768-c596caf61e66_buggy.java
+++ b/tmp/a0a80b39-9acd-4234-ab32-3befe2208f9f_fixed.java
@@ -1,24 +1,20 @@
 /**
  * For this distribution, {@code X}, this method returns {@code P(X < x)}.
  * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
  * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
  *
  * @param x Value at which the CDF is evaluated.
  * @return CDF evaluated at {@code x}.
  * @throws MathException if the algorithm fails to converge
  */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
+        if (Math.abs(dev) > 40 * standardDeviation) {
+            return x > mean ? 1.0 : 0.0;
         }
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+    } catch (ConvergenceException ex) {
+        throw new MathException(ex);
     }
 }
\ No newline at end of file
