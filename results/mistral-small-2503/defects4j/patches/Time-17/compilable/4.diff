diff --git a/tmp/5319e3c8-005f-4981-85f1-79b5d186745e_buggy.java b/tmp/32b29c07-a023-43da-b390-153322502a2f_fixed.java
index 03b03d7..b89c3d4 100644
--- a/tmp/5319e3c8-005f-4981-85f1-79b5d186745e_buggy.java
+++ b/tmp/32b29c07-a023-43da-b390-153322502a2f_fixed.java
@@ -1,25 +1,26 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  *
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
-        // work out range of instants that have duplicate local times
+    // Work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Determine the correct instant to return based on earlierOrLater
+    if (earlierOrLater) {
+        return convertLocalToUTC(local, false, instantAfter);
+    } else {
+        return convertLocalToUTC(local, false, instantBefore);
+    }
 }
\ No newline at end of file
