diff --git a/tmp/cb2508c0-ead7-4933-9ab0-fa972b552c99_buggy.java b/tmp/6f563700-291c-41ce-b097-db3a42e45cfb_fixed.java
index 03b03d7..9b3e8c2 100644
--- a/tmp/cb2508c0-ead7-4933-9ab0-fa972b552c99_buggy.java
+++ b/tmp/6f563700-291c-41ce-b097-db3a42e45cfb_fixed.java
@@ -1,25 +1,21 @@
-    /**
-     * Adjusts the offset to be the earlier or later one during an overlap.
-     * 
-     * @param instant  the instant to adjust
-     * @param earlierOrLater  false for earlier, true for later
-     * @return the adjusted instant millis
-     */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+        // Evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+
         if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+            return instant;  // Not an overlap (less than is a gap, equal is normal case)
         }
 
-        // work out range of instants that have duplicate local times
+        // Determine the range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
+        long beforeLocal = convertUTCToLocal(instant - 1);
+        long afterLocal = convertUTCToLocal(instant + 1);
+
+        if (beforeLocal != local && local == afterLocal) {
+            // Instant is within an overlap period
             return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        }
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        return instant;
     }
\ No newline at end of file
