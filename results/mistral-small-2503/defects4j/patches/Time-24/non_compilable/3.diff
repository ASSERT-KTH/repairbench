diff --git a/tmp/7902eddd-8c00-4571-86a4-0b43ca7708c0_buggy.java b/tmp/203b985d-7728-4d53-9e78-3b037d6c60c5_fixed.java
index 99d6a44..94c4bc8 100644
--- a/tmp/7902eddd-8c00-4571-86a4-0b43ca7708c0_buggy.java
+++ b/tmp/203b985d-7728-4d53-9e78-3b037d6c60c5_fixed.java
@@ -1,58 +1,86 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
+    // Handle week year and week of year fields
+    if (count > 1) {
+        DateTimeFieldType weekYearType = DateTimeFieldType.weekyear();
+        DateTimeFieldType weekOfYearType = DateTimeFieldType.weekOfWeekyear();
+        int weekYear = -1;
+        int weekOfYear = -1;
+
+        for (int i = 0; i < count; i++) {
+            if (weekYearType.equals(savedFields[i].iField)) {
+                weekYear = savedFields[i].iValue;
+            } else if (weekOfYearType.equals(savedFields[i].iField)) {
+                weekOfYear = savedFields[i].iValue;
+            }
+        }
+
+        if (weekYear != -1 && weekOfYear != -1) {
+            DateTimeField weekYearField = weekYearType.getField(iChrono);
+            DateTimeField weekOfYearField = weekOfYearType.getField(iChrono);
+            int year = weekYearField.getValue(millis);
+            int week = weekOfYearField.getValue(millis);
+
+            if (year != weekYear || week != weekOfYear) {
+                millis = weekYearField.set(millis, weekYear);
+                millis = weekOfYearField.set(millis, weekOfYear);
+            }
+        }
+    }
+
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
