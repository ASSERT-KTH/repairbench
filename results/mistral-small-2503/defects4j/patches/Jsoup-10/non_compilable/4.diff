diff --git a/tmp/b995ff26-10b3-448b-88f0-71b69077c9c5_buggy.java b/tmp/b8dce199-49a7-47a0-89cd-3f7b5e0a52ad_fixed.java
index b4e6f03..91d35b4 100644
--- a/tmp/b995ff26-10b3-448b-88f0-71b69077c9c5_buggy.java
+++ b/tmp/b8dce199-49a7-47a0-89cd-3f7b5e0a52ad_fixed.java
@@ -1,44 +1,62 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
             // the base is unsuitable, but the attribute may be abs on its own, so try that
+            try {
                 URL abs = new URL(relUrl);
                 return abs.toExternalForm();
-                }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
+            } catch (MalformedURLException ex) {
                 return "";
             }
         }
+
+        // Manually construct the absolute URL
+        String basePath = base.getProtocol() + "://" + base.getHost();
+        if (base.getPort() != -1) {
+            basePath += ":" + base.getPort();
+        }
+        basePath += base.getPath();
+
+        if (relUrl.startsWith("/")) {
+            // Absolute path relative to the base URL
+            return basePath + relUrl;
+        } else if (relUrl.startsWith("?")) {
+            // Relative query string
+            return basePath + relUrl;
+        } else {
+            // Relative path
+            String[] baseSegments = basePath.split("/");
+            String[] relSegments = relUrl.split("/");
+            StringBuilder absPath = new StringBuilder();
+
+            for (String segment : relSegments) {
+                if (segment.equals("..")) {
+                    if (baseSegments.length > 0) {
+                        baseSegments[baseSegments.length - 1] = "";
+                    }
+                } else if (segment.equals(".") || segment.isEmpty()) {
+                    // Ignore current directory and empty segments
+                } else {
+                    baseSegments[baseSegments.length - 1] = segment;
+                    baseSegments = Arrays.copyOf(baseSegments, baseSegments.length + 1);
+                }
+            }
+
+            for (String segment : baseSegments) {
+                if (!segment.isEmpty()) {
+                    absPath.append("/").append(segment);
+                }
+            }
+
+            return basePath + absPath.toString() + (relUrl.contains("?") ? "" : relUrl.substring(relUrl.indexOf("?")));
+        }
+    }
 }
\ No newline at end of file
