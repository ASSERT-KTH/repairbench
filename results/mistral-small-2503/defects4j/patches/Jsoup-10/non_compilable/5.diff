diff --git a/tmp/1ee68021-4594-46a0-892d-d23da05eecfd_buggy.java b/tmp/646824ac-cf63-423a-8b47-68089bdc1104_fixed.java
index b4e6f03..3843725 100644
--- a/tmp/1ee68021-4594-46a0-892d-d23da05eecfd_buggy.java
+++ b/tmp/646824ac-cf63-423a-8b47-68089bdc1104_fixed.java
@@ -1,44 +1,96 @@
 /**
  * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
  * <code>&lt;img src></code>).
  * <p/>
  * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
  * <p/>
  * If the attribute value is already absolute (i.e. it starts with a protocol, like
  * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
  * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
  * absolute using that.
  * <p/>
  * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
  * <code>String absUrl = linkEl.attr("abs:href");</code>
  *
  * @param attributeKey The attribute key
  * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
  * could not be made successfully into a URL.
  * @see #attr
  * @see java.net.URL#URL(java.net.URL, String)
  */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
         URL base;
-            try {
         try {
             base = new URL(baseUri);
         } catch (MalformedURLException e) {
             // the base is unsuitable, but the attribute may be abs on its own, so try that
+            try {
                 URL abs = new URL(relUrl);
                 return abs.toExternalForm();
+            } catch (MalformedURLException ex) {
+                return "";
+            }
+        }
+
+        try {
+            // Manually handle the construction of the absolute URL
+            String basePath = base.getProtocol() + "://" + base.getHost();
+            if (base.getPort() != -1) {
+                basePath += ":" + base.getPort();
+            }
+            basePath += base.getPath();
+
+            if (relUrl.startsWith("/")) {
+                // Absolute path
+                return basePath + relUrl;
+            } else if (relUrl.startsWith("?")) {
+                // Relative path with query parameters
+                return basePath + relUrl;
+            } else {
+                // Relative path
+                String[] baseSegments = basePath.split("/");
+                String[] relSegments = relUrl.split("/");
+                List<String> pathSegments = new ArrayList<>();
+
+                // Add all base segments except the last one
+                for (int i = 0; i < baseSegments.length - 1; i++) {
+                    pathSegments.add(baseSegments[i]);
+                }
+
+                // Add relative segments
+                for (String segment : relSegments) {
+                    if (segment.equals(".") || segment.equals("")) {
+                        continue;
+                    } else if (segment.equals("..")) {
+                        if (!pathSegments.isEmpty()) {
+                            pathSegments.remove(pathSegments.size() - 1);
+                        }
+                    } else {
+                        pathSegments.add(segment);
+                    }
+                }
+
+                StringBuilder path = new StringBuilder();
+                for (String segment : pathSegments) {
+                    path.append("/").append(segment);
+                }
+
+                // Append query parameters if any
+                int queryIndex = relUrl.indexOf('?');
+                if (queryIndex != -1) {
+                    path.append(relUrl.substring(queryIndex));
+                }
+
+                return base.getProtocol() + "://" + base.getHost() + (base.getPort() != -1 ? ":" + base.getPort() : "") + path.toString();
             }
-                // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
-                URL abs = new URL(base, relUrl);
-                return abs.toExternalForm();
-            } catch (MalformedURLException e) {
+        } catch (Exception e) {
             return "";
         }
     }
 }
\ No newline at end of file
