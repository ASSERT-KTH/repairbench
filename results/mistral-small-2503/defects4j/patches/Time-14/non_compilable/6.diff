diff --git a/tmp/89943e1f-76cf-4602-a395-1d9733eb9d0d_buggy.java b/tmp/0f629c59-a584-424d-805f-c996420ead56_fixed.java
index 10616db..157a291 100644
--- a/tmp/89943e1f-76cf-4602-a395-1d9733eb9d0d_buggy.java
+++ b/tmp/0f629c59-a584-424d-805f-c996420ead56_fixed.java
@@ -1,19 +1,38 @@
-    //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
+
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
+        // Ensure the resulting date is valid
         return iChronology.get(partial, instant);
     } else {
-            return super.add(partial, fieldIndex, values, valueToAdd);
+        // Handle the case where the partial is not contiguous
+        int[] newValues = Arrays.copyOf(values, values.length);
+        int fieldValue = newValues[fieldIndex];
+        fieldValue += valueToAdd;
+        newValues[fieldIndex] = fieldValue;
+
+        // Adjust for end-of-month and leap year issues
+        if (partial.getFieldType(fieldIndex).isSupported()) {
+            DateTimeField field = partial.getFieldType(fieldIndex).getField(iChronology);
+            if (field.isLeap(fieldValue)) {
+                // Handle leap year adjustments
+                newValues[fieldIndex] = field.getLeapMaximumValue();
+            } else {
+                // Handle end-of-month adjustments
+                newValues[fieldIndex] = field.getMaximumValue();
+            }
+        }
+
+        return newValues;
     }
 }
\ No newline at end of file
