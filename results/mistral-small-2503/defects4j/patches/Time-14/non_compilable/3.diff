diff --git a/tmp/d76fa3e1-7e8d-43af-bc05-cb5a19f71a5a_buggy.java b/tmp/854bf938-8e9b-452e-a9cd-bda908453a69_fixed.java
index 10616db..cbc3fbf 100644
--- a/tmp/d76fa3e1-7e8d-43af-bc05-cb5a19f71a5a_buggy.java
+++ b/tmp/854bf938-8e9b-452e-a9cd-bda908453a69_fixed.java
@@ -1,19 +1,76 @@
-    //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+            int[] newValues = new int[values.length];
+            System.arraycopy(values, 0, newValues, 0, values.length);
+
+            // Adjust the values based on the fieldIndex and valueToAdd
+            if (fieldIndex == partial.getFieldType(0).getFieldIndex()) {
+                // Handle month adjustment
+                int month = newValues[fieldIndex];
+                month += valueToAdd;
+                int year = newValues[fieldIndex - 1];
+                int day = newValues[fieldIndex + 1];
+
+                // Handle end of month adjustment
+                if (month > 12) {
+                    year += month / 12;
+                    month = month % 12;
+                } else if (month < 1) {
+                    year += (month - 1) / 12;
+                    month = (month - 1) % 12 + 1;
+                }
+
+                // Handle day adjustment for leap years and month lengths
+                if (day > DateTimeUtils.getDaysInMonth(year, month)) {
+                    day = DateTimeUtils.getDaysInMonth(year, month);
+                }
+
+                newValues[fieldIndex] = month;
+                newValues[fieldIndex - 1] = year;
+                newValues[fieldIndex + 1] = day;
+            } else if (fieldIndex == partial.getFieldType(1).getFieldIndex()) {
+                // Handle day adjustment
+                int day = newValues[fieldIndex];
+                day += valueToAdd;
+                int month = newValues[fieldIndex - 1];
+                int year = newValues[fieldIndex - 2];
+
+                // Handle end of month adjustment
+                if (day > DateTimeUtils.getDaysInMonth(year, month)) {
+                    day = DateTimeUtils.getDaysInMonth(year, month);
+                    month++;
+                    if (month > 12) {
+                        month = 1;
+                        year++;
+                    }
+                } else if (day < 1) {
+                    day = DateTimeUtils.getDaysInMonth(year, month - 1);
+                    month--;
+                    if (month < 1) {
+                        month = 12;
+                        year--;
+                    }
+                }
+
+                newValues[fieldIndex] = day;
+                newValues[fieldIndex - 1] = month;
+                newValues[fieldIndex - 2] = year;
+            }
+
+            return newValues;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
