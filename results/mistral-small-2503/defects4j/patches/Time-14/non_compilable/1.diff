diff --git a/tmp/ca1bfd8a-c56a-4657-b565-588abef363ad_buggy.java b/tmp/d02a8e07-9c7c-44d3-9fb6-3b7ca6d6b89f_fixed.java
index 10616db..50ea331 100644
--- a/tmp/ca1bfd8a-c56a-4657-b565-588abef363ad_buggy.java
+++ b/tmp/d02a8e07-9c7c-44d3-9fb6-3b7ca6d6b89f_fixed.java
@@ -1,19 +1,33 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+            // Adjust the instant for the valueToAdd
+            long newInstant = add(instant, valueToAdd);
+
+            // Ensure the day of the month is valid after the adjustment
+            int month = iChronology.get(iChronology.monthOfYear(), newInstant);
+            int maxDayOfMonth = iChronology.getMaximumValueInMonth(iChronology.dayOfMonth(), month, newInstant);
+            int dayOfMonth = iChronology.get(iChronology.dayOfMonth(), newInstant);
+
+            if (dayOfMonth > maxDayOfMonth) {
+                dayOfMonth = maxDayOfMonth;
+                newInstant = iChronology.set(iChronology.dayOfMonth(), dayOfMonth, newInstant);
+            }
+
+            return iChronology.get(partial, newInstant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
