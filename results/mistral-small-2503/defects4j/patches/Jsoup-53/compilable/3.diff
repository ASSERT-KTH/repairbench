diff --git a/tmp/c340e61e-a62b-427f-9a3b-e963136002e5_buggy.java b/tmp/9275e841-a9d5-4377-9948-cdbbb0d76f3b_fixed.java
index fecb896..4125bd3 100644
--- a/tmp/c340e61e-a62b-427f-9a3b-e963136002e5_buggy.java
+++ b/tmp/9275e841-a9d5-4377-9948-cdbbb0d76f3b_fixed.java
@@ -1,34 +1,40 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
     int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
     do {
         if (isEmpty()) break;
         Character c = consume();
         if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (c == quoteChar) {
+                inQuote = !inQuote;
+            } else if (inQuote) {
+                // Ignore characters inside quotes
+            } else if (c == open) {
                 depth++;
                 if (start == -1)
                     start = pos;
-                }
-                else if (c.equals(close))
+            } else if (c == close)
                 depth--;
         }
 
         if (depth > 0 && last != 0)
             end = pos; // don't include the outer match pair in the return
         last = c;
     } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+    // Handle quoted characters
+    if (start != -1 && end != -1) {
+        String result = queue.substring(start, end);
+        if (result.startsWith("'") || result.startsWith("\"")) {
+            quoteChar = result.charAt(0);
+            result = result.substring(1, result.length() - 1);
+        }
+        return result;
+    }
+    return "";
 }
\ No newline at end of file
