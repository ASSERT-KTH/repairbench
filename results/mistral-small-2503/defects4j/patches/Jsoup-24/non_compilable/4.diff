diff --git a/tmp/1a519007-55c6-42b8-9c41-7f927c3cbadf_buggy.java b/tmp/da192fd1-ad5b-46f2-953e-f29c8ea718bd_fixed.java
index b2d53db..e23feaf 100644
--- a/tmp/1a519007-55c6-42b8-9c41-7f927c3cbadf_buggy.java
+++ b/tmp/da192fd1-ad5b-46f2-953e-f29c8ea718bd_fixed.java
@@ -1,34 +1,65 @@
 void read(Tokeniser t, CharacterReader r) {
     if (r.matchesLetter()) {
         String name = r.consumeLetterSequence();
         t.tagPending.appendTagName(name.toLowerCase());
         t.dataBuffer.append(name);
         r.advance();
         return;
     }
 
     if (t.isAppropriateEndTagToken() && !r.isEmpty()) {
         char c = r.consume();
         switch (c) {
             case '\t':
             case '\n':
             case '\f':
             case ' ':
                 t.transition(BeforeAttributeName);
                 break;
             case '/':
                 t.transition(SelfClosingStartTag);
                 break;
             case '>':
                 t.emitTagPending();
                 t.transition(Data);
                 break;
             default:
                 t.dataBuffer.append(c);
                 anythingElse(t, r);
                 break;
         }
     } else {
         anythingElse(t, r);
     }
 }
+
+void anythingElse(Tokeniser t, CharacterReader r) {
+    if (t.isInScriptDataState()) {
+        // Handle characters within script tags differently
+        while (!r.isEmpty()) {
+            char c = r.consume();
+            if (c == '<') {
+                t.transition(ScriptDataLessThanSign);
+                return;
+            } else if (c == '\0') {
+                t.error();
+                t.transition(Data);
+                return;
+            } else {
+                t.dataBuffer.append(c);
+            }
+        }
+    } else {
+        // Default handling for other states
+        while (!r.isEmpty()) {
+            char c = r.consume();
+            if (c == '\0') {
+                t.error();
+                t.transition(Data);
+                return;
+            } else {
+                t.dataBuffer.append(c);
+            }
+        }
+    }
+}
\ No newline at end of file
