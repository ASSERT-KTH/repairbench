diff --git a/tmp/2f6edf68-74b7-4ede-9d47-00b7e44a05fe_buggy.java b/tmp/6c9a045a-adc8-45f8-b28d-58cb6f014e6c_fixed.java
index a9a5e27..d72f59d 100644
--- a/tmp/2f6edf68-74b7-4ede-9d47-00b7e44a05fe_buggy.java
+++ b/tmp/6c9a045a-adc8-45f8-b28d-58cb6f014e6c_fixed.java
@@ -1,24 +1,38 @@
 /**
  * Multiply two values throwing an exception if overflow occurs.
  *
  * @param val1  the first value
  * @param val2  the second value
  * @return the new total
  * @throws ArithmeticException if the value is too big or too small
  * @since 1.2
  */
 public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
+    if (val2 == 0) {
         return 0L;
-            case 1:
+    }
+    if (val2 == 1) {
         return val1;
     }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+    if (val2 == -1) {
+        return -val1;
+    }
+
+    // Check for overflow
+    if (val1 != 0 && val2 != 0) {
+        if (val1 > 0 && val2 > 0 && val1 > (Long.MAX_VALUE / val2)) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if (val1 < 0 && val2 < 0 && val1 < (Long.MIN_VALUE / val2)) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if (val1 > 0 && val2 < 0 && val1 > (Long.MIN_VALUE / val2)) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if (val1 < 0 && val2 > 0 && val1 < (Long.MAX_VALUE / val2)) {
             throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
-        return total;
+    }
+
+    return val1 * val2;
 }
\ No newline at end of file
