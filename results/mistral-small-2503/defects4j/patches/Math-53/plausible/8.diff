diff --git a/tmp/cdccbc40-4df1-45de-b1b0-404c957c8837_buggy.java b/tmp/27e7112d-e01b-4480-b637-e598583c0c9e_fixed.java
index 181b1ac..ccc81e1 100644
--- a/tmp/cdccbc40-4df1-45de-b1b0-404c957c8837_buggy.java
+++ b/tmp/27e7112d-e01b-4480-b637-e598583c0c9e_fixed.java
@@ -1,23 +1,10 @@
-    /**
-     * Return the sum of this complex number and the given complex number.
-     * <p>
-     * Uses the definitional formula
-     * <pre>
-     * (a + bi) + (c + di) = (a+c) + (b+d)i
-     * </pre></p>
-     * <p>
-     * If either this or <code>rhs</code> has a NaN value in either part,
-     * {@link #NaN} is returned; otherwise Infinite and NaN values are
-     * returned in the parts of the result according to the rules for
-     * {@link java.lang.Double} arithmetic.</p>
-     *
-     * @param rhs the other complex number
-     * @return the complex number sum
-     * @throws NullArgumentException if <code>rhs</code> is null
-     */
     public Complex add(Complex rhs)
         throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        double realSum = real + rhs.getReal();
+        double imaginarySum = imaginary + rhs.getImaginary();
+        if (Double.isNaN(realSum) || Double.isNaN(imaginarySum)) {
+            return Complex.NaN;
+        }
+        return createComplex(realSum, imaginarySum);
     }
\ No newline at end of file
