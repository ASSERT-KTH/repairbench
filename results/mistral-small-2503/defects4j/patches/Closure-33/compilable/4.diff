diff --git a/tmp/e303e761-ac66-4145-bb55-0b3701b9ac78_buggy.java b/tmp/f1daa79a-b0fe-4831-a04a-18ad8cc9c3c3_fixed.java
index fb2b020..e826e52 100644
--- a/tmp/e303e761-ac66-4145-bb55-0b3701b9ac78_buggy.java
+++ b/tmp/f1daa79a-b0fe-4831-a04a-18ad8cc9c3c3_fixed.java
@@ -1,27 +1,26 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else {
+          // If the property is already declared, update its type to match the constraint.
+          JSType existingType = getPropertyType(prop);
+          JSType updatedType = existingType.getLeastSupertype(propType);
+          if (updatedType != existingType) {
+            defineInferredProperty(prop, updatedType, null);
+          }
         }
       }
     }
   }
\ No newline at end of file
