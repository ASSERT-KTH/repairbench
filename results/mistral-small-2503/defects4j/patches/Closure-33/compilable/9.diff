diff --git a/tmp/f0267aa1-ac4c-4eb2-b3e6-af325398c739_buggy.java b/tmp/cd902c7c-fd7b-4f0e-b241-731548e07568_fixed.java
index fb2b020..eafad0c 100644
--- a/tmp/f0267aa1-ac4c-4eb2-b3e6-af325398c739_buggy.java
+++ b/tmp/cd902c7c-fd7b-4f0e-b241-731548e07568_fixed.java
@@ -1,27 +1,25 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is already declared, ensure it matches the constraint type
+        JSType existingType = getPropertyType(prop);
+        if (!existingType.isEquivalentTo(propType)) {
+          defineInferredProperty(prop, propType, null);
+        }
       }
     }
   }
 }
\ No newline at end of file
