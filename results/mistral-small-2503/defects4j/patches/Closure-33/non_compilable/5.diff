diff --git a/tmp/28ff7a60-29e3-4853-891c-69a630fb8195_buggy.java b/tmp/c7b2b89e-01cd-4243-b389-157a420e2b8d_fixed.java
index fb2b020..5d99409 100644
--- a/tmp/28ff7a60-29e3-4853-891c-69a630fb8195_buggy.java
+++ b/tmp/c7b2b89e-01cd-4243-b389-157a420e2b8d_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+  // taking each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is already declared, update its type to match the constraint.
+        JSType currentType = getPropertyType(prop);
+        JSType updatedType = currentType.getLeastSupertype(propType);
+        setPropertyType(prop, updatedType);
       }
     }
   }
 }
\ No newline at end of file
