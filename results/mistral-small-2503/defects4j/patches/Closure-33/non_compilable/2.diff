diff --git a/tmp/37888a99-2c46-435b-945a-7ada2cb038cd_buggy.java b/tmp/9ccbb91d-628a-4cbe-807d-626c09744277_fixed.java
index fb2b020..d6444ca 100644
--- a/tmp/37888a99-2c46-435b-945a-7ada2cb038cd_buggy.java
+++ b/tmp/9ccbb91d-628a-4cbe-807d-626c09744277_fixed.java
@@ -1,27 +1,44 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
+    } else {
+        // Handle the case where the constraint object is not a record type.
+        // This might involve checking for nested properties or other types.
+        for (String prop : constraintObj.getOwnPropertyNames()) {
+            JSType propType = constraintObj.getPropertyType(prop);
+            if (propType.isRecordType()) {
+                // Recursively match constraints for nested record types.
+                matchConstraint(propType);
+            } else if (!isPropertyTypeDeclared(prop)) {
+                JSType typeToInfer = propType;
+                if (!hasProperty(prop)) {
+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                            .getLeastSupertype(propType);
+                }
+                defineInferredProperty(prop, typeToInfer, null);
+            }
+        }
     }
 }
\ No newline at end of file
