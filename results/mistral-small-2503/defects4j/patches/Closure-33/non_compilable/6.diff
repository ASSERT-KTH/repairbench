diff --git a/tmp/0678f730-7692-494f-a662-f6ccbe8f9a4c_buggy.java b/tmp/56e0ebc0-8233-497a-8fdb-1cc11b13b093_fixed.java
index fb2b020..a1557e1 100644
--- a/tmp/0678f730-7692-494f-a662-f6ccbe8f9a4c_buggy.java
+++ b/tmp/56e0ebc0-8233-497a-8fdb-1cc11b13b093_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
+
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
+
+      // Handle union types
+      if (propType.isUnionType()) {
+        for (JSType unionType : propType.getUnionTypes()) {
+          if (!isPropertyTypeDeclared(prop)) {
+            JSType typeToInfer = unionType;
+            if (!hasProperty(prop)) {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                  .getLeastSupertype(unionType);
+            }
+            defineInferredProperty(prop, typeToInfer, null);
+          }
+        }
+      }
     }
   }
 }
\ No newline at end of file
