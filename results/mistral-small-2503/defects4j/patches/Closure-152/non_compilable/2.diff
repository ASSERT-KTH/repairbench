diff --git a/tmp/1d574f54-5c0c-4ca2-af89-c624e5de3d28_buggy.java b/tmp/abf4a2e3-a83a-4e1a-9c64-1c0c4fee09f7_fixed.java
index 58a1651..6f6f953 100644
--- a/tmp/1d574f54-5c0c-4ca2-af89-c624e5de3d28_buggy.java
+++ b/tmp/abf4a2e3-a83a-4e1a-9c64-1c0c4fee09f7_fixed.java
@@ -1,32 +1,38 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis if it doesn't resolve to an ObjectType
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (typeOfThis instanceof UnionType) {
+      // Handle the case where typeOfThis is a UnionType
+      // For simplicity, we can throw an error or handle it as needed
+      t.report(JSError.make(typeOfThis.getToken(), "@this type of a function must be an object\nActual type: " + typeOfThis));
+    } else if (!(typeOfThis instanceof ObjectType)) {
+      // Handle the case where typeOfThis is not an ObjectType
+      t.report(JSError.make(typeOfThis.getToken(), "@this type of a function must be an object\nActual type: " + typeOfThis));
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
