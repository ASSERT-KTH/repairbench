diff --git a/tmp/cdeaf27e-a1f4-4c09-b64c-6b83b2e010b2_buggy.java b/tmp/cc9cf920-afb5-42d7-9e80-039b94689f11_fixed.java
index 58a1651..8b7a1bd 100644
--- a/tmp/cdeaf27e-a1f4-4c09-b64c-6b83b2e010b2_buggy.java
+++ b/tmp/cc9cf920-afb5-42d7-9e80-039b94689f11_fixed.java
@@ -1,32 +1,60 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis if it doesn't resolve to an ObjectType
+    // Handle UnionType correctly.
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Handle the UnionType appropriately, e.g., by checking its components
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      boolean hasObjectType = false;
+      for (JSType component : unionType.getTypes()) {
+        if (component instanceof ObjectType) {
+          hasObjectType = true;
+          break;
+        }
+      }
+      if (!hasObjectType) {
+        t.report(JSError.make(
+            this.getSource(),
+            this.getSourcePosition(),
+            TypeCheck.THIS_TYPE_MUST_BE_OBJECT,
+            this.getSource(),
+            resolvedTypeOfThis.toString()));
+      }
+      typeOfThis = (ObjectType) resolvedTypeOfThis.getLeastType();
+    } else {
+      t.report(JSError.make(
+          this.getSource(),
+          this.getSourcePosition(),
+          TypeCheck.THIS_TYPE_MUST_BE_OBJECT,
+          this.getSource(),
+          resolvedTypeOfThis.toString()));
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
