diff --git a/tmp/95f7e932-9fc8-46f6-ab0d-be32d458ccd2_buggy.java b/tmp/5f19d866-0869-40de-abee-3170da4df354_fixed.java
index 58a1651..aea67cc 100644
--- a/tmp/95f7e932-9fc8-46f6-ab0d-be32d458ccd2_buggy.java
+++ b/tmp/5f19d866-0869-40de-abee-3170da4df354_fixed.java
@@ -1,32 +1,51 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Handle the case where typeOfThis can be a UnionType
+  JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedTypeOfThis instanceof UnionType) {
+    UnionType unionType = (UnionType) resolvedTypeOfThis;
+    boolean isObjectType = true;
+    for (JSType type : unionType.types) {
+      if (!(type instanceof ObjectType)) {
+        isObjectType = false;
+        break;
+      }
+    }
+    if (!isObjectType) {
+      t.report(JsError.make(
+          JsError.Type.MUST_BE_OBJECT,
+          "The @this type of a function must be an object"));
+    }
+  } else if (resolvedTypeOfThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedTypeOfThis;
+  } else {
+    t.report(JsError.make(
+        JsError.Type.MUST_BE_OBJECT,
+        "The @this type of a function must be an object"));
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
