diff --git a/tmp/27c27b41-1024-4e24-80cd-2da7e64d96a7_buggy.java b/tmp/23eba563-1a1f-4018-a73d-e2f465c7808a_fixed.java
index 58a1651..7a665d1 100644
--- a/tmp/27c27b41-1024-4e24-80cd-2da7e64d96a7_buggy.java
+++ b/tmp/23eba563-1a1f-4018-a73d-e2f465c7808a_fixed.java
@@ -1,32 +1,41 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle the case where typeOfThis can be a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      boolean hasObjectType = unionType.getAlternatives().stream()
+          .anyMatch(alt -> alt instanceof ObjectType);
+      if (!hasObjectType) {
+        t.report(this, JSC_ERROR, "Type of @this must be an object");
+      }
+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {
+      t.report(this, JSC_ERROR, "Type of @this must be an object");
+    }
+    typeOfThis = resolvedTypeOfThis;
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
