diff --git a/tmp/56357ac8-3d52-44c1-9fdc-1cf4016b275c_buggy.java b/tmp/9298e2ca-e32d-483f-910d-70f8edce5800_fixed.java
index 58a1651..df2cd9f 100644
--- a/tmp/56357ac8-3d52-44c1-9fdc-1cf4016b275c_buggy.java
+++ b/tmp/9298e2ca-e32d-483f-910d-70f8edce5800_fixed.java
@@ -1,32 +1,39 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle the case where typeOfThis resolves to a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      if (unionType.getAlternatives().stream().noneMatch(alt -> alt instanceof ObjectType)) {
+        t.report(JsError.make(this.getSourcePosition(), JsError.Type.MISSING_PROPERTY).setDescription("The @this type of a function must be an object"));
+      }
+      typeOfThis = resolvedTypeOfThis;
+    } else {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
