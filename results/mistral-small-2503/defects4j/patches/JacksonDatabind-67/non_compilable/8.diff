diff --git a/tmp/ef15542f-05c8-4a22-ae2b-3305dd659855_buggy.java b/tmp/4c498f35-6a23-4286-97ee-2383c1e5c9b9_fixed.java
index bc80637..68f7d6e 100644
--- a/tmp/ef15542f-05c8-4a22-ae2b-3305dd659855_buggy.java
+++ b/tmp/4c498f35-6a23-4286-97ee-2383c1e5c9b9_fixed.java
@@ -1,33 +1,41 @@
 @Override
 public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
         JavaType type)
     throws JsonMappingException
 {
     final DeserializationConfig config = ctxt.getConfig();
     KeyDeserializer deser = null;
     if (_factoryConfig.hasKeyDeserializers()) {
         BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
         for (KeyDeserializers d : _factoryConfig.keyDeserializers()) {
             deser = d.findKeyDeserializer(type, config, beanDesc);
             if (deser != null) {
                 break;
             }
         }
     }
     // the only non-standard thing is this:
     if (deser == null) {
         if (type.isEnumType()) {
-                return _createEnumKeyDeserializer(ctxt, type);
+            // Create a custom key deserializer for enums
+            return new KeyDeserializer() {
+                @Override
+                public Object deserializeKey(String key, DeserializationContext ctxt)
+                        throws IOException {
+                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
+                    return Enum.valueOf(rawClass, key.toLowerCase());
+                }
+            };
         }
         deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
     }
     // and then post-processing
     if (deser != null) {
         if (_factoryConfig.hasDeserializerModifiers()) {
             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                 deser = mod.modifyKeyDeserializer(config, type, deser);
             }
         }
     }
     return deser;
 }
\ No newline at end of file
