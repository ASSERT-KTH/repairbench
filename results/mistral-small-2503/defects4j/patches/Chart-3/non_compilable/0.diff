diff --git a/tmp/9c454237-f642-4b51-857d-3968bfdb1f98_buggy.java b/tmp/5c4276f2-a4be-40cc-9583-45fbe4390d33_fixed.java
index 388771b..5bd6a71 100644
--- a/tmp/9c454237-f642-4b51-857d-3968bfdb1f98_buggy.java
+++ b/tmp/5c4276f2-a4be-40cc-9583-45fbe4390d33_fixed.java
@@ -1,37 +1,60 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
+        copy.data = new java.util.ArrayList<>();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        // Update minY and maxY based on the copied data
+        copy.updateMinMax();
         return copy;
     }
+
+    // Assuming there is a method to update minY and maxY in the TimeSeries class
+    private void updateMinMax() {
+        if (this.data.isEmpty()) {
+            this.minY = Double.NaN;
+            this.maxY = Double.NaN;
+        } else {
+            this.minY = Double.MAX_VALUE;
+            this.maxY = Double.MIN_VALUE;
+            for (Object item : this.data) {
+                TimeSeriesDataItem dataItem = (TimeSeriesDataItem) item;
+                double value = dataItem.getValue().doubleValue();
+                if (value < this.minY) {
+                    this.minY = value;
+                }
+                if (value > this.maxY) {
+                    this.maxY = value;
+                }
+            }
+        }
+    }
\ No newline at end of file
