diff --git a/tmp/ad413fe9-afac-4bb5-9dfd-5d7a9f53018b_buggy.java b/tmp/7a95eea9-d6de-4ce0-8a6d-7624da3363fb_fixed.java
index 227a4ef..7a70e5d 100644
--- a/tmp/ad413fe9-afac-4bb5-9dfd-5d7a9f53018b_buggy.java
+++ b/tmp/7a95eea9-d6de-4ce0-8a6d-7624da3363fb_fixed.java
@@ -1,48 +1,44 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         int lastPos = pos;
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
-            } else
+        }
+
         if (pos == lastPos)
         {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
+            // Handle the case where the text is too long for the line
+            // by breaking it into multiple lines
+            while (text.length() > width)
+            {
+                sb.append(rtrim(text.substring(0, width))).append(defaultNewLine);
+                text = text.substring(width).trim();
+            }
+            sb.append(text);
+            return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
