diff --git a/tmp/d11dfccf-e8d1-437d-b87a-ea149195ce66_buggy.java b/tmp/db93ffea-f984-4543-afe5-7254c644222f_fixed.java
index 9353941..d2e5b0e 100644
--- a/tmp/d11dfccf-e8d1-437d-b87a-ea149195ce66_buggy.java
+++ b/tmp/db93ffea-f984-4543-afe5-7254c644222f_fixed.java
@@ -1,30 +1,34 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
+
+  // Check for assignments in the current node
+  if (NodeUtil.isAssign(n) && NodeUtil.isName(n.getFirstChild()) && variable.equals(n.getFirstChild().getString())) {
+    return VariableLiveness.KILL;
+  }
+
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
