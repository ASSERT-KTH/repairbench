diff --git a/tmp/515a69a1-e6f4-48fc-b758-a0f6064fa31c_buggy.java b/tmp/6aac27fb-f31c-4a13-8779-4138c2d27160_fixed.java
index cfdcd9c..3534909 100644
--- a/tmp/515a69a1-e6f4-48fc-b758-a0f6064fa31c_buggy.java
+++ b/tmp/6aac27fb-f31c-4a13-8779-4138c2d27160_fixed.java
@@ -1,51 +1,50 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
   Node parent = n.getParent();
   // If GETPROP/GETELEM is used as assignment target the array literal is
   // acting as a temporary we can't fold it here:
   //    "[][0] += 1"
   if (isAssignmentTarget(n)) {
     return n;
   }
 
   if (!right.isNumber()) {
     // Sometimes people like to use complex expressions to index into
     // arrays, or strings to index into array methods.
     return n;
   }
 
   double index = right.getDouble();
   int intIndex = (int) index;
   if (intIndex != index) {
     error(INVALID_GETELEM_INDEX_ERROR, right);
     return n;
   }
 
-    if (intIndex < 0) {
+  if (intIndex < 0 || intIndex >= left.getChildCount()) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
   Node current = left.getFirstChild();
   Node elem = null;
   for (int i = 0; current != null && i < intIndex; i++) {
-        elem = current;
-
     current = current.getNext();
   }
 
-    if (elem == null) {
+  if (current == null) {
     error(INDEX_OUT_OF_BOUNDS_ERROR, right);
     return n;
   }
 
+  elem = current;
   if (elem.isEmpty()) {
     elem = NodeUtil.newUndefinedNode(elem);
   } else {
     left.removeChild(elem);
   }
 
   // Replace the entire GETELEM with the value
   n.getParent().replaceChild(n, elem);
   reportCodeChange();
   return elem;
 }
\ No newline at end of file
