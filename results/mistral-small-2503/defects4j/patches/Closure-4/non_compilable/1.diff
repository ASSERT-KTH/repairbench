diff --git a/tmp/7ac94c38-64ab-4be4-8c60-54dcadd78d59_buggy.java b/tmp/c70a21b8-f6c5-4790-95d7-4ba1e5b88b95_fixed.java
index d6a560a..2287eca 100644
--- a/tmp/7ac94c38-64ab-4be4-8c60-54dcadd78d59_buggy.java
+++ b/tmp/c70a21b8-f6c5-4790-95d7-4ba1e5b88b95_fixed.java
@@ -1,33 +1,33 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First, attempt to resolve via registry to avoid triggering property warnings.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // If not resolved via registry, attempt to resolve via properties.
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    // Call super.resolveInternal only if resolved via properties.
+    if (resolved) {
       super.resolveInternal(t, enclosing);
       if (isResolved()) {
         finishPropertyContinuations();
       }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    }
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
