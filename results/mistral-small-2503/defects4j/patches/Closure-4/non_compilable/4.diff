diff --git a/tmp/fbee7540-5110-4893-892c-c6f31bbcb78c_buggy.java b/tmp/e9fe2a6e-f429-422a-8bca-aa7fe61967bc_fixed.java
index d6a560a..7d11557 100644
--- a/tmp/fbee7540-5110-4893-892c-c6f31bbcb78c_buggy.java
+++ b/tmp/e9fe2a6e-f429-422a-8bca-aa7fe61967bc_fixed.java
@@ -1,33 +1,30 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First, try to resolve via the registry to avoid triggering warnings.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    // If not resolved via registry, try to resolve via properties.
+    resolved = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    if (resolved) {
       super.resolveInternal(t, enclosing);
-    if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
