diff --git a/tmp/74327ad3-407d-445f-9bd1-8c6d9f61be81_buggy.java b/tmp/d86bed30-6f34-4e79-acf9-d9d36c8c2587_fixed.java
index d6a560a..7a01496 100644
--- a/tmp/74327ad3-407d-445f-9bd1-8c6d9f61be81_buggy.java
+++ b/tmp/d86bed30-6f34-4e79-acf9-d9d36c8c2587_fixed.java
@@ -1,33 +1,35 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+
+    if (detectImplicitPrototypeCycle()) {
+      handleTypeCycle(t);
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+    if (resolved) {
+      super.resolveInternal(t, enclosing);
+      finishPropertyContinuations();
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    resolved = resolveViaProperties(t, enclosing);
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
-    super.resolveInternal(t, enclosing);
-    if (isResolved()) {
-      finishPropertyContinuations();
-    }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
