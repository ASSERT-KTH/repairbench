diff --git a/tmp/e71cba4d-80ec-4b6b-bbe8-a9f8410c60c7_buggy.java b/tmp/8c06c0d7-3226-498d-8d38-9287e3fa028a_fixed.java
index d6a560a..a459c7c 100644
--- a/tmp/e71cba4d-80ec-4b6b-bbe8-a9f8410c60c7_buggy.java
+++ b/tmp/8c06c0d7-3226-498d-8d38-9287e3fa028a_fixed.java
@@ -1,33 +1,40 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // Avoid infinite recursion by checking if we are already in the process of resolving
+    if (isResolving()) {
+      handleTypeCycle(t);
+      return this;
+    }
+
+    // Mark as resolving to avoid infinite recursion
+    setResolving(true);
+    try {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    } finally {
+      setResolving(false);
+    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
