diff --git a/tmp/017527dc-50f0-4290-84c2-89efd31eba03_buggy.java b/tmp/c380f02e-ad0a-44cd-a924-7c3223ac1878_fixed.java
index d6a560a..51e1945 100644
--- a/tmp/017527dc-50f0-4290-84c2-89efd31eba03_buggy.java
+++ b/tmp/c380f02e-ad0a-44cd-a924-7c3223ac1878_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // First attempt to resolve via the registry
     boolean resolved = resolveViaRegistry(t, enclosing);
+
+    // Check for implicit prototype cycle and handle it
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
+      // If resolved via registry, call super and finish property continuations
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, attempt to resolve via properties
     resolveViaProperties(t, enclosing);
+
+    // Check for implicit prototype cycle and handle it again
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
+    // Call super and finish property continuations if resolved
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+
+    // Return the resolved type or this
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
