diff --git a/tmp/247748ff-3d91-4656-b9e1-08e2b0dff294_buggy.java b/tmp/0362c74a-e6b7-41f3-b668-7c7aa7630d53_fixed.java
index b56897c..db5c8a4 100644
--- a/tmp/247748ff-3d91-4656-b9e1-08e2b0dff294_buggy.java
+++ b/tmp/0362c74a-e6b7-41f3-b668-7c7aa7630d53_fixed.java
@@ -1,27 +1,28 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null, it means we reached the implicit return
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // We only care about calls to functions that pass one of the dependent variables
+  // to a non-side-effect-free function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // We also need to check for constructor calls that have side effects.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
+  // Recursively apply the function to each child node.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+    // We need to ensure we are entering a new CFG node.
+    if (ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
