diff --git a/tmp/a91c6e47-8e8d-4f27-b441-337921df768e_buggy.java b/tmp/d2fd7813-c904-4ba6-a91b-98717d08321e_fixed.java
index b56897c..5e8e36b 100644
--- a/tmp/a91c6e47-8e8d-4f27-b441-337921df768e_buggy.java
+++ b/tmp/d2fd7813-c904-4ba6-a91b-98717d08321e_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Handle calls to functions that pass one of the dependent variables to a non-side-effect free function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
+  // Handle constructor calls that have side effects.
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Handle the 'in' operator, which is a binary operation.
+  if (n.isAssign() || n.isExprResult() || n.isBinaryOperator()) {
+    if (n.getOperator() == Token.IN) {
+      return true;
+    }
+  }
 
+  // Recursively apply the function to child nodes.
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
