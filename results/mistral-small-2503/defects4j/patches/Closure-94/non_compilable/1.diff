diff --git a/tmp/653b6976-fe8d-4c9a-9ecb-6ea79f546c76_buggy.java b/tmp/6de82a69-11f5-4b35-a31d-ddb522957081_fixed.java
index 66e3d01..c7a6955 100644
--- a/tmp/653b6976-fe8d-4c9a-9ecb-6ea79f546c76_buggy.java
+++ b/tmp/6de82a69-11f5-4b35-a31d-ddb522957081_fixed.java
@@ -1,34 +1,36 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
 static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
         case Token.STRING:
         case Token.NUMBER:
         case Token.TRUE:
         case Token.FALSE:
             return true;
 
         // Binary operators are only valid if both children are valid.
         case Token.BITAND:
-      case Token.BITNOT:
         case Token.BITOR:
         case Token.BITXOR:
+        case Token.PLUS:
+        case Token.MINUS:
+        case Token.TIMES:
+        case Token.DIVIDE:
+        case Token.MOD:
+            return val.getFirstChild() != null && val.getSecondChild() != null &&
+                   isValidDefineValue(val.getFirstChild(), defines) &&
+                   isValidDefineValue(val.getSecondChild(), defines);
 
-      // Uniary operators are valid if the child is valid.
+        // Unary operators are valid if the child is valid.
         case Token.NOT:
         case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+            return val.getFirstChild() != null && isValidDefineValue(val.getFirstChild(), defines);
 
         // Names are valid if and only if they are defines themselves.
         case Token.NAME:
         case Token.GETPROP:
             if (val.isQualifiedName()) {
                 return defines.contains(val.getQualifiedName());
             }
+            return defines.contains(val.getName());
     }
     return false;
 }
\ No newline at end of file
