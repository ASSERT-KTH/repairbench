diff --git a/tmp/5df6b9cc-b64a-4f9c-8374-c7238845aef6_buggy.java b/tmp/8dbff8f4-1234-4a73-9cb0-5b90f58f7756_fixed.java
index f650982..02fe8c5 100644
--- a/tmp/5df6b9cc-b64a-4f9c-8374-c7238845aef6_buggy.java
+++ b/tmp/8dbff8f4-1234-4a73-9cb0-5b90f58f7756_fixed.java
@@ -1,42 +1,55 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    if (l instanceof Iterator && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!(l instanceof Iterator) && r instanceof Iterator) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // If both are not iterators, perform a direct comparison
     return equal(l, r);
 }
+
+private boolean contains(Iterator<?> iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (equal(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean findMatch(Iterator<?> left, Iterator<?> right) {
+    while (left.hasNext() && right.hasNext()) {
+        if (!equal(left.next(), right.next())) {
+            return false;
+        }
+    }
+    return !left.hasNext() && !right.hasNext();
+}
\ No newline at end of file
