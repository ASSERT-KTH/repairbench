diff --git a/tmp/bfeea553-fe6e-4e0b-bdc2-e174a0024135_buggy.java b/tmp/83cbbbf8-52c7-4bf9-a1d4-1bfcaa130c6b_fixed.java
index ad7255c..7c564ba 100644
--- a/tmp/bfeea553-fe6e-4e0b-bdc2-e174a0024135_buggy.java
+++ b/tmp/83cbbbf8-52c7-4bf9-a1d4-1bfcaa130c6b_fixed.java
@@ -1,42 +1,63 @@
+import java.awt.geom.GeneralPath;
+import java.awt.geom.PathIterator;
+import java.awt.geom.Path2D;
+import java.util.Arrays;
+
+public class ShapeUtilities {
+
     /**
      * Tests two polygons for equality.  If both are <code>null</code> this
      * method returns <code>true</code>.
      *
      * @param p1  path 1 (<code>null</code> permitted).
      * @param p2  path 2 (<code>null</code> permitted).
      *
      * @return A boolean.
      */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null); // Fixed: should be p2, not p1
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            if (!arraysEqualWithTolerance(d1, d2)) {
                 return false;
             }
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
+
+    private static boolean arraysEqualWithTolerance(double[] d1, double[] d2) {
+        final double TOLERANCE = 1e-6;
+        if (d1.length != d2.length) {
+            return false;
+        }
+        for (int i = 0; i < d1.length; i++) {
+            if (Math.abs(d1[i] - d2[i]) > TOLERANCE) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
\ No newline at end of file
