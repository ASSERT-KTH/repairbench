diff --git a/tmp/2914c5c8-87f2-40a8-adfa-1c27019a8d8c_buggy.java b/tmp/808e51a6-511a-441e-a225-f372614f05fe_fixed.java
index 822447c..e3339e3 100644
--- a/tmp/2914c5c8-87f2-40a8-adfa-1c27019a8d8c_buggy.java
+++ b/tmp/808e51a6-511a-441e-a225-f372614f05fe_fixed.java
@@ -1,37 +1,22 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
-        for (int i = 0; i < len; i++) {
-            char c = str.charAt(i);
-            String entityName = this.entityName(c);
+    for (int i = 0; i < len; ) {
+        int codePoint = str.codePointAt(i);
+        String entityName = this.entityName(codePoint);
         if (entityName == null) {
-                if (c > 0x7F) {
+            if (codePoint > 0x7F) {
                 writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                writer.write(Integer.toString(codePoint, 10));
                 writer.write(';');
             } else {
-                    writer.write(c);
+                writer.write(codePoint);
             }
+            i += Character.charCount(codePoint);
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
+            i += Character.charCount(codePoint);
         }
     }
 }
\ No newline at end of file
