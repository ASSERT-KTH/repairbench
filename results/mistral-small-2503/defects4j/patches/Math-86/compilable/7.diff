diff --git a/tmp/0447d369-183a-4624-a85a-51f196510c0f_buggy.java b/tmp/280638dc-47df-4ee1-80ad-c715f0636bcd_fixed.java
index 0eef537..d85d732 100644
--- a/tmp/0447d369-183a-4624-a85a-51f196510c0f_buggy.java
+++ b/tmp/280638dc-47df-4ee1-80ad-c715f0636bcd_fixed.java
@@ -1,74 +1,77 @@
 /**
  * Calculates the Cholesky decomposition of the given matrix.
  * @param matrix the matrix to decompose
  * @param relativeSymmetryThreshold threshold above which off-diagonal
  * elements are considered too different and matrix not symmetric
  * @param absolutePositivityThreshold threshold below which diagonal
  * elements are considered null and matrix not positive definite
  * @exception NonSquareMatrixException if matrix is not square
  * @exception NotSymmetricMatrixException if matrix is not symmetric
  * @exception NotPositiveDefiniteMatrixException if the matrix is not
  * strictly positive definite
  * @see #CholeskyDecompositionImpl(RealMatrix)
  * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
  * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
  */
 public CholeskyDecompositionImpl(final RealMatrix matrix,
                                  final double relativeSymmetryThreshold,
                                  final double absolutePositivityThreshold)
     throws NonSquareMatrixException,
            NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
     if (!matrix.isSquare()) {
         throw new NonSquareMatrixException(matrix.getRowDimension(),
                                          matrix.getColumnDimension());
     }
 
     final int order = matrix.getRowDimension();
     lTData   = matrix.getData();
     cachedL  = null;
     cachedLT = null;
 
     // check the matrix before transformation
     for (int i = 0; i < order; ++i) {
 
         final double[] lI = lTData[i];
 
         if (lTData[i][i] < absolutePositivityThreshold) {
             throw new NotPositiveDefiniteMatrixException();
         }
         // check off-diagonal elements (and reset them to 0)
         for (int j = i + 1; j < order; ++j) {
             final double[] lJ = lTData[j];
             final double lIJ = lI[j];
             final double lJI = lJ[i];
             final double maxDelta =
                 relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
             if (Math.abs(lIJ - lJI) > maxDelta) {
                 throw new NotSymmetricMatrixException();
             }
             lJ[i] = 0;
         }
     }
 
     // transform the matrix
-        for (int i = 0; i < order; ++i) {
-
-            final double[] ltI = lTData[i];
-
-            // check diagonal element
-
-            ltI[i] = Math.sqrt(ltI[i]);
-            final double inverse = 1.0 / ltI[i];
-
-            for (int q = order - 1; q > i; --q) {
-                ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
+    for (int k = 0; k < order; ++k) {
+        final double[] lK = lTData[k];
+        for (int i = k; i < order; ++i) {
+            final double[] lI = lTData[i];
+            double sum = lI[k];
+            for (int j = 0; j < k; ++j) {
+                sum -= lI[j] * lK[j];
             }
+            lI[k] = sum;
         }
 
+        if (lTData[k][k] <= absolutePositivityThreshold) {
+            throw new NotPositiveDefiniteMatrixException();
         }
 
+        lTData[k][k] = Math.sqrt(lTData[k][k]);
+        final double inverse = 1.0 / lTData[k][k];
+
+        for (int i = k + 1; i < order; ++i) {
+            lTData[i][k] *= inverse;
+        }
+    }
 }
\ No newline at end of file
