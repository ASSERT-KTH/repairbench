diff --git a/tmp/1a653473-c10e-4b21-b750-9d06e17c4d2d_buggy.java b/tmp/7ca59189-c207-42d7-883e-74b35ea24917_fixed.java
index 544303b..a43cc44 100644
--- a/tmp/1a653473-c10e-4b21-b750-9d06e17c4d2d_buggy.java
+++ b/tmp/7ca59189-c207-42d7-883e-74b35ea24917_fixed.java
@@ -1,29 +1,32 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+    Integer basicRow = null;
+    double mostNegative = 0;
+
+    // Determine the most negative value in the RHS
+    for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {
+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+        double value = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        if (value < mostNegative) {
+            mostNegative = value;
+        }
+    }
+
+    // Calculate the coefficients
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+        coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                           (restrictToNonNegative ? 0 : mostNegative);
+
         if (basicRow != null) {
             for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                 if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
         }
     }
+
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
