diff --git a/tmp/60d7197c-bd6e-4cb1-8596-67296a1b3c15_buggy.java b/tmp/4e2380c6-3706-4786-b0c2-359f536175c6_fixed.java
index 544303b..9cb62f3 100644
--- a/tmp/60d7197c-bd6e-4cb1-8596-67296a1b3c15_buggy.java
+++ b/tmp/4e2380c6-3706-4786-b0c2-359f536175c6_fixed.java
@@ -1,29 +1,28 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Set<Integer> basicRows = new HashSet<Integer>();
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRows.contains(basicRow)) {
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
+                coefficients[i] = 0;
+            } else {
+                basicRows.add(basicRow);
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                     (restrictToNonNegative ? 0 : mostNegative);
-            if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
-                    }
-                }
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
