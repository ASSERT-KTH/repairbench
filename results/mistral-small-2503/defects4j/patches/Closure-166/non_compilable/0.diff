diff --git a/tmp/81de6ae2-8f7d-4cf4-b6f6-969f212b4d79_buggy.java b/tmp/49efb7a6-77ba-491e-bce4-77188e3b773f_fixed.java
index 5f96616..3c395c0 100644
--- a/tmp/81de6ae2-8f7d-4cf4-b6f6-969f212b4d79_buggy.java
+++ b/tmp/49efb7a6-77ba-491e-bce4-77188e3b773f_fixed.java
@@ -1,20 +1,18 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
       matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+      for (JSType type : constraint.toMaybeUnionType().getAlternatives()) {
+        if (type.isRecordType()) {
+          matchRecordTypeConstraint(type.toObjectType());
+        }
+      }
     }
   }
\ No newline at end of file
