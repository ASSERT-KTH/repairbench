diff --git a/tmp/636c9b07-681c-4074-ac4f-7923d0162ebb_buggy.java b/tmp/ce9ddbdf-5691-48dc-baa7-4043ad4d02a8_fixed.java
index 5f96616..650ac40 100644
--- a/tmp/636c9b07-681c-4074-ac4f-7923d0162ebb_buggy.java
+++ b/tmp/ce9ddbdf-5691-48dc-baa7-4043ad4d02a8_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // Handle the case where the constraint object is a record type or a union type that includes a record type.
+  if (constraint.isUnionType()) {
+    for (JSType type : constraint.getUnionTypes()) {
+      if (type.isRecordType()) {
+        matchRecordTypeConstraint(type.toObjectType());
+        return;
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
