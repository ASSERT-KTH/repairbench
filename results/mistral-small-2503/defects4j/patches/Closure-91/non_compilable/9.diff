diff --git a/tmp/cd4e31b8-d700-440d-9a81-d4d2e3863dd3_buggy.java b/tmp/6f743a0a-eb96-47e8-8f1a-717abe2e784d_fixed.java
index 30d7266..6e77ac1 100644
--- a/tmp/cd4e31b8-d700-440d-9a81-d4d2e3863dd3_buggy.java
+++ b/tmp/6f743a0a-eb96-47e8-8f1a-717abe2e784d_fixed.java
@@ -1,69 +1,77 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
 
             // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
 
       // Don't traverse functions that are getting lent to a prototype.
-    }
-
       if (parent != null && parent.getType() == Token.ASSIGN) {
         Node lhs = parent.getFirstChild();
         Node rhs = lhs.getNext();
 
         if (n == lhs) {
           // Always traverse the left side of the assignment. To handle
           // nested assignments properly (e.g., (a = this).property = c;),
           // assignLhsChild should not be overridden.
           if (assignLhsChild == null) {
             assignLhsChild = lhs;
           }
         } else {
           // Only traverse the right side if it's not an assignment to a prototype
           // property or subproperty.
           if (NodeUtil.isGet(lhs)) {
             if (lhs.getType() == Token.GETPROP &&
                 lhs.getLastChild().getString().equals("prototype")) {
               return false;
             }
             Node llhs = lhs.getFirstChild();
             if (llhs.getType() == Token.GETPROP &&
                 llhs.getLastChild().getString().equals("prototype")) {
               return false;
             }
           }
         }
       }
+    }
+
+    // Check for @lends annotations
+    if (parent != null && parent.getType() == Token.ASSIGN) {
+      Node lhs = parent.getFirstChild();
+      Node rhs = lhs.getNext();
+
+      if (rhs.getType() == Token.FUNCTION) {
+        JSDocInfo jsDoc = getFunctionJsDocInfo(rhs);
+        if (jsDoc != null && jsDoc.hasLends()) {
+          return true;
+        }
+      }
+    }
 
     return true;
   }
\ No newline at end of file
