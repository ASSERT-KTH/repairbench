diff --git a/tmp/e9e63109-d16c-4be5-8035-83202d7c8f8e_buggy.java b/tmp/28449ae1-bc33-4f7d-addb-8f8eca8e251b_fixed.java
index 851ffc2..a3e1f71 100644
--- a/tmp/e9e63109-d16c-4be5-8035-83202d7c8f8e_buggy.java
+++ b/tmp/28449ae1-bc33-4f7d-addb-8f8eca8e251b_fixed.java
@@ -1,70 +1,65 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
         nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
-            candidateDefinition.getParent().replaceChild(
-                candidateDefinition, varNode);
+        candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
         // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+        ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
+        if (parentName != null && parentName.replacementNode != null) {
           parentName.replacementNode.getParent().addChildAfter(
               replacementNode, parentName.replacementNode);
+        } else {
+          // If the parent name is not found, add it to the minimum module.
+          compiler.getNodeForCodeInsertion(minimumModule)
+              .addChildToBack(replacementNode);
+        }
       }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
