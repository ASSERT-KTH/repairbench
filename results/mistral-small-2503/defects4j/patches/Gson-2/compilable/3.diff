diff --git a/tmp/1132fe3c-5ba0-406e-af64-da8913872205_buggy.java b/tmp/53860785-494e-439a-add5-827238bae11c_fixed.java
index 6e45f80..25888b9 100644
--- a/tmp/1132fe3c-5ba0-406e-af64-da8913872205_buggy.java
+++ b/tmp/53860785-494e-439a-add5-827238bae11c_fixed.java
@@ -1,21 +1,32 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
 
+      // Check if the typeAdapter can handle the requested type
+      try {
+        // Attempt to create an instance of the TypeAdapter for the requested type
+        TypeAdapter<T2> adapter = (TypeAdapter<T2>) typeAdapter;
+        // If no exception is thrown, the cast is valid
+        return adapter;
+      } catch (ClassCastException e) {
+        // If a ClassCastException is thrown, the typeAdapter cannot handle the requested type
+        return null;
       }
-      @Override public String toString() {
+    }
+
+    @Override
+    public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
