diff --git a/tmp/38e52a72-332b-43f4-a75c-2b06c1182ff5_buggy.java b/tmp/51e9a9dc-8c47-43f4-a322-318c6edf3c00_fixed.java
index 25ca093..74ae7ed 100644
--- a/tmp/38e52a72-332b-43f4-a75c-2b06c1182ff5_buggy.java
+++ b/tmp/51e9a9dc-8c47-43f4-a322-318c6edf3c00_fixed.java
@@ -1,52 +1,84 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    boolean hasBOM = false;
+    Charset detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Determine charset from BOM if present
+    if (byteData.hasRemaining()) {
+        int firstByte = byteData.get() & 0xFF;
+        int secondByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;
+        int thirdByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;
+        int fourthByte = byteData.hasRemaining() ? byteData.get() & 0xFF : -1;
+
+        if (firstByte == 0xFF && secondByte == 0xFE) {
+            detectedCharset = StandardCharsets.UTF_16BE;
+            hasBOM = true;
+        } else if (firstByte == 0xFE && secondByte == 0xFF) {
+            detectedCharset = StandardCharsets.UTF_16LE;
+            hasBOM = true;
+        } else if (firstByte == 0x00 && secondByte == 0x00 && thirdByte == 0xFE && fourthByte == 0xFF) {
+            detectedCharset = Charset.forName("UTF-32BE");
+            hasBOM = true;
+        } else if (firstByte == 0xFF && secondByte == 0xFE && thirdByte == 0x00 && fourthByte == 0x00) {
+            detectedCharset = Charset.forName("UTF-32LE");
+            hasBOM = true;
+        } else if (firstByte == 0xEF && secondByte == 0xBB && thirdByte == 0xBF) {
+            detectedCharset = StandardCharsets.UTF_8;
+            hasBOM = true;
+        }
+
+        if (hasBOM) {
+            byteData.rewind();
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals("UTF-8")) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    if (hasBOM && detectedCharset != null) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+        docData = detectedCharset.decode(byteData).toString();
+        if (detectedCharset.equals(StandardCharsets.UTF_8)) {
+            docData = docData.substring(1); // Remove BOM for UTF-8
+        }
+        charsetName = detectedCharset.name();
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
