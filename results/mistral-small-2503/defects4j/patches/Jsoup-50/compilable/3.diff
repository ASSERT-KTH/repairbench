diff --git a/tmp/0bbd25da-dfb2-4813-8fcf-f3632844300e_buggy.java b/tmp/e07f461c-a53d-4fb3-9494-7da319f643ae_fixed.java
index 25ca093..0318d84 100644
--- a/tmp/0bbd25da-dfb2-4813-8fcf-f3632844300e_buggy.java
+++ b/tmp/e07f461c-a53d-4fb3-9494-7da319f643ae_fixed.java
@@ -1,52 +1,84 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    Charset detectedCharset = null;
 
     // look for BOM - overrides any other header or input
+    byte[] bomBytes = new byte[4];
+    if (byteData.remaining() >= 4) {
+        byteData.mark();
+        byteData.get(bomBytes);
+        byteData.reset();
+        if (isUTF16BE(bomBytes)) {
+            detectedCharset = Charset.forName("UTF-16BE");
+        } else if (isUTF16LE(bomBytes)) {
+            detectedCharset = Charset.forName("UTF-16LE");
+        } else if (isUTF32BE(bomBytes)) {
+            detectedCharset = Charset.forName("UTF-32BE");
+        } else if (isUTF32LE(bomBytes)) {
+            detectedCharset = Charset.forName("UTF-32LE");
+        }
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    if (detectedCharset != null) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
+        docData = detectedCharset.decode(byteData).toString();
+        charsetName = detectedCharset.name();
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static boolean isUTF16BE(byte[] bomBytes) {
+    return bomBytes[0] == (byte) 0xFE && bomBytes[1] == (byte) 0xFF;
+}
+
+private static boolean isUTF16LE(byte[] bomBytes) {
+    return bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE;
+}
+
+private static boolean isUTF32BE(byte[] bomBytes) {
+    return bomBytes[0] == (byte) 0x00 && bomBytes[1] == (byte) 0x00 && bomBytes[2] == (byte) 0xFE && bomBytes[3] == (byte) 0xFF;
+}
+
+private static boolean isUTF32LE(byte[] bomBytes) {
+    return bomBytes[0] == (byte) 0xFF && bomBytes[1] == (byte) 0xFE && bomBytes[2] == (byte) 0x00 && bomBytes[3] == (byte) 0x00;
+}
\ No newline at end of file
