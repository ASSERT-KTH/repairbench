diff --git a/tmp/437dacd7-0168-4af0-a595-8074d8e61695_buggy.java b/tmp/1016b400-2d15-48d0-85a5-a29d10911a9f_fixed.java
index 25ca093..97dc275 100644
--- a/tmp/437dacd7-0168-4af0-a595-8074d8e61695_buggy.java
+++ b/tmp/1016b400-2d15-48d0-85a5-a29d10911a9f_fixed.java
@@ -1,52 +1,67 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
-
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        docData = Charset.forName("UTF-8").decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals("UTF-8")) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    // Handle BOM for UTF-16 and UTF-32
+    if (charsetName == null || charsetName.equals("UTF-8")) {
         byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+        byte[] bom = new byte[4];
+        if (byteData.remaining() >= 4) {
+            byteData.get(bom);
+            if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0 && bom[3] == 0) {
+                charsetName = "UTF-32LE";
+            } else if (bom[0] == 0 && bom[1] == (byte) 0xFF && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
+                charsetName = "UTF-32BE";
+            } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
+                charsetName = "UTF-16BE";
+            } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
+                charsetName = "UTF-16LE";
             }
+        }
+    }
+
+    if (charsetName != null && !charsetName.equals("UTF-8")) {
+        byteData.rewind();
+        docData = Charset.forName(charsetName).decode(byteData).toString();
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
