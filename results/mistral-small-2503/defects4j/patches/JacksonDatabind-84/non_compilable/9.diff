diff --git a/tmp/0432b0bd-77b4-493f-affc-1e7bde251c73_buggy.java b/tmp/1c2376c4-7365-4a9a-9e9d-58acc77e649b_fixed.java
index e69de29..fa1df5a 100644
--- a/tmp/0432b0bd-77b4-493f-affc-1e7bde251c73_buggy.java
+++ b/tmp/1c2376c4-7365-4a9a-9e9d-58acc77e649b_fixed.java
@@ -0,0 +1,72 @@
+package com.fasterxml.jackson.databind.type;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.impl.TypeFactoryImpl;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class TypeFactory {
+
+    private static final TypeFactory DEFAULT_INSTANCE = new TypeFactoryImpl();
+
+    private final Map<Class<?>, JavaType> typeCache = new HashMap<>();
+
+    public static TypeFactory defaultInstance() {
+        return DEFAULT_INSTANCE;
+    }
+
+    public JavaType constructType(Class<?> rawClass) {
+        if (typeCache.containsKey(rawClass)) {
+            return typeCache.get(rawClass);
+        }
+        JavaType javaType = new TypeFactoryImpl().constructFromRaw(rawClass, null);
+        typeCache.put(rawClass, javaType);
+        return javaType;
+    }
+
+    public JavaType constructType(Class<?> rawClass, JavaType baseType) {
+        if (typeCache.containsKey(rawClass)) {
+            return typeCache.get(rawClass);
+        }
+        JavaType javaType = new TypeFactoryImpl().constructFromRaw(rawClass, baseType);
+        typeCache.put(rawClass, javaType);
+        return javaType;
+    }
+
+    private static class TypeFactoryImpl extends TypeFactory {
+        public JavaType constructFromRaw(Class<?> rawClass, JavaType baseType) {
+            if (baseType == null) {
+                return constructUnsafe(rawClass);
+            }
+            return constructUnsafe(rawClass, baseType);
+        }
+
+        public JavaType constructUnsafe(Class<?> rawClass) {
+            // Implementation to construct JavaType from raw class
+            return new JavaTypeImpl(rawClass);
+        }
+
+        public JavaType constructUnsafe(Class<?> rawClass, JavaType baseType) {
+            // Implementation to construct JavaType from raw class and base type
+            return new JavaTypeImpl(rawClass, baseType);
+        }
+    }
+
+    private static class JavaTypeImpl extends JavaType {
+        private final Class<?> rawClass;
+        private final JavaType baseType;
+
+        public JavaTypeImpl(Class<?> rawClass) {
+            this.rawClass = rawClass;
+            this.baseType = null;
+        }
+
+        public JavaTypeImpl(Class<?> rawClass, JavaType baseType) {
+            this.rawClass = rawClass;
+            this.baseType = baseType;
+        }
+
+        // Other necessary methods and fields
+    }
+}
\ No newline at end of file
