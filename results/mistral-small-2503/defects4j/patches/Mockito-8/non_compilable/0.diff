diff --git a/tmp/002a9d81-7760-4d20-910e-6b525fcf1eeb_buggy.java b/tmp/cc728a8f-ac72-4c83-ad6a-f08435ac6a92_fixed.java
index 42b58d0..9fc38d0 100644
--- a/tmp/002a9d81-7760-4d20-910e-6b525fcf1eeb_buggy.java
+++ b/tmp/cc728a8f-ac72-4c83-ad6a-f08435ac6a92_fixed.java
@@ -1,19 +1,30 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
+    Type rawType = parameterizedType.getRawType();
+
+    // Avoid processing the same type multiple times
+    if (processedTypes.contains(rawType)) {
+        return;
+    }
+    processedTypes.add(rawType);
+
+    TypeVariable[] typeParameters = ((Class<?>) rawType).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
+            // Recursively process the actual type argument if it's a parameterized type
+            if (actualTypeArgument instanceof ParameterizedType) {
+                registerTypeVariablesOn(actualTypeArgument);
+            }
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
