diff --git a/tmp/448a2d72-1aa5-4ac7-9ab6-de4284e110ca_buggy.java b/tmp/13df9d1d-97ff-47c2-ac3f-59387744b340_fixed.java
index 0bbaab0..61ecb01 100644
--- a/tmp/448a2d72-1aa5-4ac7-9ab6-de4284e110ca_buggy.java
+++ b/tmp/13df9d1d-97ff-47c2-ac3f-59387744b340_fixed.java
@@ -1,62 +1,48 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant based on the chronology
-     * and time-zone of the supplied instant.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
         DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
 
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         int defaultYear = chrono.year().get(instantLocal);
 
         DateTimeParserBucket bucket = new DateTimeParserBucket(
             instantLocal, chrono, iLocale, iPivotYear, defaultYear);
         int newPos = parser.parseInto(bucket, text, position);
+
+        // Check if the parsed month and day are February 29
+        if (bucket.getMonthOfYear() != null && bucket.getMonthOfYear() == 2 &&
+            bucket.getDayOfMonth() != null && bucket.getDayOfMonth() == 29) {
+            // Ensure the year is a leap year
+            int parsedYear = bucket.getYear();
+            if (parsedYear == null) {
+                parsedYear = defaultYear;
+            }
+            if (!chrono.isLeapYear(parsedYear)) {
+                // Adjust the year to the nearest leap year
+                parsedYear = chrono.year().add(parsedYear, 4);
+                while (!chrono.isLeapYear(parsedYear)) {
+                    parsedYear += 4;
+                }
+                bucket.setYear(parsedYear);
+            }
+        }
+
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
             int parsedOffset = bucket.getOffsetInteger();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
             chrono = chrono.withZone(parsedZone);
         } else if (bucket.getZone() != null) {
             chrono = chrono.withZone(bucket.getZone());
         }
         instant.setChronology(chrono);
         if (iZone != null) {
             instant.setZone(iZone);
         }
         return newPos;
     }
\ No newline at end of file
