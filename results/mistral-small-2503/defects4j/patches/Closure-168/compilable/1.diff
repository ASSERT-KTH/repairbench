diff --git a/tmp/71292d12-ed45-40c1-911c-5c19bac6b426_buggy.java b/tmp/e4c0a163-0b9b-4374-81b9-4f870c7c1bb3_fixed.java
index b12de99..fd3e916 100644
--- a/tmp/71292d12-ed45-40c1-911c-5c19bac6b426_buggy.java
+++ b/tmp/e4c0a163-0b9b-4374-81b9-4f870c7c1bb3_fixed.java
@@ -1,52 +1,63 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
       NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (scope != ownerScope && ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
+  } else if (n.isAssign() && n.getFirstChild().isName()) {
+    Node lhs = n.getFirstChild();
+    String name = lhs.getString();
+    Scope scope = t.getScope();
+    Var var = scope.getVar(name);
+    if (var != null) {
+      Scope ownerScope = var.getScope();
+      if (ownerScope.isLocal()) {
+        data.get(ownerScope.getRootNode()).recordAssignedName(name);
+      }
+    }
   }
 }
\ No newline at end of file
