diff --git a/tmp/52464c8b-f1b6-4d97-9ee8-8a9eedbe8759_buggy.java b/tmp/d780bb75-33e8-467f-ae96-c45ec2c50a5b_fixed.java
index b12de99..59a6eea 100644
--- a/tmp/52464c8b-f1b6-4d97-9ee8-8a9eedbe8759_buggy.java
+++ b/tmp/d780bb75-33e8-467f-ae96-c45ec2c50a5b_fixed.java
@@ -1,52 +1,72 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
       if (t.getScopeDepth() <= 2) {
         // The first-order function analyzer looks at two types of variables:
         //
         // 1) Local variables that are assigned in inner scopes ("escaped vars")
         //
         // 2) Local variables that are assigned more than once.
         //
         // We treat all global variables as escaped by default, so there's
         // no reason to do this extra computation for them.
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
+
+      // Add additional checks to ensure all necessary conditions are met
+      if (n.isAssign() && n.getFirstChild() != null) {
+        Node leftHandSide = n.getFirstChild();
+        if (leftHandSide.isName() && NodeUtil.isLValue(leftHandSide) &&
+            !NodeUtil.isBleedingFunctionName(leftHandSide)) {
+          String name = leftHandSide.getString();
+          Scope scope = t.getScope();
+          Var var = scope.getVar(name);
+          if (var != null) {
+            Scope ownerScope = var.getScope();
+            if (ownerScope.isLocal()) {
+              data.get(ownerScope.getRootNode()).recordAssignedName(name);
+            }
+            if (scope != ownerScope && ownerScope.isLocal()) {
+              data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
+            }
+          }
+        }
+      }
     }
\ No newline at end of file
