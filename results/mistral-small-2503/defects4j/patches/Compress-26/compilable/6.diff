diff --git a/tmp/3d8a5135-4ebe-4525-90b7-45b044199f68_buggy.java b/tmp/e8739d8a-96de-4f39-b8fe-65c370300801_fixed.java
index 4b163f6..4165f49 100644
--- a/tmp/3d8a5135-4ebe-4525-90b7-45b044199f68_buggy.java
+++ b/tmp/e8739d8a-96de-4f39-b8fe-65c370300801_fixed.java
@@ -1,28 +1,17 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long skipped = 0;
     while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+        long skippedInThisIteration = input.skip(numToSkip);
+        if (skippedInThisIteration == 0) {
+            // Fallback to read() if skip() returns 0
+            int readByte = input.read();
+            if (readByte == -1) {
                 break;
             }
-            numToSkip -= skipped;
+            skippedInThisIteration = 1;
         }
-            
-        return available - numToSkip;
+        numToSkip -= skippedInThisIteration;
+        skipped += skippedInThisIteration;
+    }
+    return skipped;
 }
\ No newline at end of file
