diff --git a/tmp/c32379f7-7802-4033-b87f-79d2d76be470_buggy.java b/tmp/34437aef-57c3-45ab-9c39-724e56b25bd1_fixed.java
index 4b163f6..68ac814 100644
--- a/tmp/c32379f7-7802-4033-b87f-79d2d76be470_buggy.java
+++ b/tmp/34437aef-57c3-45ab-9c39-724e56b25bd1_fixed.java
@@ -1,28 +1,16 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+        long skipped = 0;
         while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+            long skippedInThisIteration = input.skip(numToSkip);
+            if (skippedInThisIteration == 0) {
+                int read = input.read();
+                if (read == -1) {
                     break;
                 }
-            numToSkip -= skipped;
+                skippedInThisIteration = 1;
             }
-            
-        return available - numToSkip;
+            numToSkip -= skippedInThisIteration;
+            skipped += skippedInThisIteration;
+        }
+        return skipped;
     }
\ No newline at end of file
