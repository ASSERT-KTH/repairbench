diff --git a/tmp/ac6bae67-0698-4dbb-b55f-d9d105261c16_buggy.java b/tmp/10fbe719-ff26-4d03-b59e-45e8d1e96fa4_fixed.java
index e8705ac..06f1aa5 100644
--- a/tmp/ac6bae67-0698-4dbb-b55f-d9d105261c16_buggy.java
+++ b/tmp/10fbe719-ff26-4d03-b59e-45e8d1e96fa4_fixed.java
@@ -1,24 +1,27 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
   Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+  // Keep track of the "this" context of a call. A call without an
   // explicit "this" is a free call.
   Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Ignore cast nodes.
+  if (first.isCast()) {
+    first = first.getFirstChild();
+  }
 
-      if (!NodeUtil.isGet(first)) {
+  // Check if the first child is a GET node (which indicates a property access)
+  if (first.isGet() || first.isName()) {
+    // If it's a GET node, it means it's a property access, so it's not a free call.
+    return;
+  }
+
+  // Annotate the node as a free call if it's not a GET or NAME node.
   n.putBooleanProp(Node.FREE_CALL, true);
-      }
 
   // Keep track of the context in which eval is called. It is important
   // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+  if (first.isName() && "eval".equals(first.getString())) {
     first.putBooleanProp(Node.DIRECT_EVAL, true);
   }
 }
\ No newline at end of file
