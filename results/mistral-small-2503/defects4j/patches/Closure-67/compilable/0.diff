diff --git a/tmp/00efaeb1-6b7b-4663-b0c0-5435fc5a6206_buggy.java b/tmp/444f44d9-b001-4fed-ba83-94f13363e16f_fixed.java
index 939f49b..4796ba5 100644
--- a/tmp/00efaeb1-6b7b-4663-b0c0-5435fc5a6206_buggy.java
+++ b/tmp/444f44d9-b001-4fed-ba83-94f13363e16f_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+    Node lhs = n.getFirstChild();
+    if (lhs.getType() == Token.GETPROP) {
       // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;
 
       if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+        Node child = lhs.getFirstChild().getFirstChild().getNext();
+        if (child.getType() == Token.STRING && "prototype".equals(child.getString())) {
           return true;
         }
+      } else {
+        Node propertyNameNode = lhs.getFirstChild().getNext();
+        if (propertyNameNode.getType() == Token.STRING && "prototype".equals(propertyNameNode.getString())) {
+          return true;
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
