diff --git a/tmp/5352c71f-134f-4021-9f44-30e03df5d1d5_buggy.java b/tmp/1193f1f4-bacd-4dd6-a437-fbcb34f71e0f_fixed.java
index 939f49b..bcffc83 100644
--- a/tmp/5352c71f-134f-4021-9f44-30e03df5d1d5_buggy.java
+++ b/tmp/1193f1f4-bacd-4dd6-a437-fbcb34f71e0f_fixed.java
@@ -1,21 +1,18 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+        Node lhs = n.getFirstChild();
+        if (lhs.getType() == Token.GETPROP) {
             // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+            Node propertyAccess = lhs.getFirstChild();
+            if (propertyAccess.getType() == Token.GETPROP) {
+                Node propertyName = propertyAccess.getFirstChild().getNext();
+                if (propertyName.getType() == Token.STRING &&
+                    propertyName.getString().equals("prototype")) {
                     return true;
                 }
             }
         }
-
+    }
     return false;
 }
\ No newline at end of file
