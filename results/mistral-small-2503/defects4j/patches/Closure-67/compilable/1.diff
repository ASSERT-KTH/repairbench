diff --git a/tmp/81c53550-1a19-423e-adf9-ad616483a607_buggy.java b/tmp/e5afca64-eae6-4166-b07a-1a9f92270fa8_fixed.java
index 939f49b..c61fb06 100644
--- a/tmp/81c53550-1a19-423e-adf9-ad616483a607_buggy.java
+++ b/tmp/e5afca64-eae6-4166-b07a-1a9f92270fa8_fixed.java
@@ -1,21 +1,23 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)) {
+        Node lhs = n.getFirstChild();
+        if (lhs.getType() == Token.GETPROP) {
             // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+            boolean isChainedProperty = lhs.getFirstChild().getType() == Token.GETPROP;
 
             if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+                Node child = lhs.getFirstChild().getFirstChild().getNext();
+                if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
                     return true;
                 }
+            } else {
+                Node child = lhs.getFirstChild().getNext();
+                if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+                    return true;
+                }
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
