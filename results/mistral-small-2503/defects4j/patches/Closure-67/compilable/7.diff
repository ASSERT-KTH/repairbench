diff --git a/tmp/caf58c2c-6718-4646-b306-9de43a6b6b47_buggy.java b/tmp/b54e23cb-22cc-4df8-a8f4-2238b315fbf8_fixed.java
index 939f49b..c18b0f7 100644
--- a/tmp/caf58c2c-6718-4646-b306-9de43a6b6b47_buggy.java
+++ b/tmp/b54e23cb-22cc-4df8-a8f4-2238b315fbf8_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node child = n.getFirstChild().getFirstChild();
+      while (child != null && child.getType() == Token.GETPROP) {
+        child = child.getFirstChild();
+      }
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      if (child != null && child.getType() == Token.STRING && child.getString().equals("prototype")) {
+        return true;
+      }
+    } else {
+      if (n.getFirstChild().getType() == Token.STRING && n.getFirstChild().getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
