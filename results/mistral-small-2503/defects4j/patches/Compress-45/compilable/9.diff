diff --git a/tmp/4822c397-b1e0-4a86-bc25-fc1a21b86bb9_buggy.java b/tmp/3eb6227d-73b4-4c6c-8097-0fa118497636_fixed.java
index 1bbc082..35d5919 100644
--- a/tmp/4822c397-b1e0-4a86-bc25-fc1a21b86bb9_buggy.java
+++ b/tmp/3eb6227d-73b4-4c6c-8097-0fa118497636_fixed.java
@@ -1,36 +1,22 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
-        final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        // Determine if the value can be represented as an octal string
+        if (value >= 0 && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
+        // If the value is negative or too large for octal, format as binary
         if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+            formatLongBinary(value, buf, offset, length, value < 0);
+        } else {
+            formatBigIntegerBinary(value, buf, offset, length, value < 0);
         }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        // Set the sign bit
+        buf[offset] = (byte) (value < 0 ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
