diff --git a/tmp/0acf543c-a39d-4b50-9501-e0d379b7a9ff_buggy.java b/tmp/30747fcf-61d8-4fa5-8929-189bdb1b3c82_fixed.java
index e69de29..988bb40 100644
--- a/tmp/0acf543c-a39d-4b50-9501-e0d379b7a9ff_buggy.java
+++ b/tmp/30747fcf-61d8-4fa5-8929-189bdb1b3c82_fixed.java
@@ -0,0 +1,28 @@
+protected JavaType _fromClass(Class<?> clz, TypeBindings context, 
+        // TypeParameters _params_, 
+        JavaType superClass)
+{
+    // [databind#1647] Need to figure out if there are generics in supertype; if not, we can 
+    // just shortcut binding
+    if (superClass == null) {
+        superClass = _resolveType(clz.getSuperclass(), context, _typeBindingsForSuper(clz));
+    }
+    // 26-Jun-2019, tatu: This used to be simple check, but has to be more
+    //    complicated due to possibility of "self-reference" (or other cycles)
+    //    that `superClass` and/or its parts might have.
+    if (!superClass.isTypeOrSubTypeOf(RecursiveType.class)) {
+        return superClass;
+    }
+    // 26-Jun-2019, tatu: We will try to "pre-bind" super-class before resolving
+    //   its type; this will cover most of simple cases, hopefully all we need.
+    //   If this is not enough, we could do a full pass of pre-fetching of
+    //   super types in `TypeFactory`
+    if (superClass instanceof ResolvedRecursiveType) {
+        ResolvedRecursiveType self = (ResolvedRecursiveType) superClass;
+        if (self.getSelfType() == null) {
+            self.setSelfType(_fromClass(clz, context, superClass));
+        }
+        return self;
+    }
+    return new ResolvedRecursiveType(clz, context);
+}
\ No newline at end of file
