diff --git a/tmp/6397b182-3904-4ddb-bb05-fdfab2da7727_buggy.java b/tmp/3d907769-572d-41dd-ae37-75ae2ed1c6ff_fixed.java
index e69de29..ae7a1fb 100644
--- a/tmp/6397b182-3904-4ddb-bb05-fdfab2da7727_buggy.java
+++ b/tmp/3d907769-572d-41dd-ae37-75ae2ed1c6ff_fixed.java
@@ -0,0 +1,39 @@
+protected JavaType _resolveSuperType(JavaType type, Type parentRef) {
+    // First: do not try to resolve recursive types; we can't fully resolve
+    // those, and trying to resolve partly is just going to lead to problems
+    // (as in [databind#1607])
+    if (parentRef != null) {
+        if (_isDescendant(type, parentRef)) {
+            return TypeFactory.unknownType();
+        }
+    }
+    try {
+        // 26-Jun-2019, tatu: This used to be called for all types, but it seems
+        //    that only recursive (or self-referencing) types need this, so let's
+        //    try to limit call to those. Trying to fix [databind#2468]
+        if (type.isContainerType() || type.isReferenceType()) {
+            type = type.getContentType();
+        }
+
+        // First things first: we can't do much with unresolved types, so
+        // need to resolve before proceeding
+        if (type.isJavaLangObject()) {
+            // No super types for "Object" (or, should we return Object itself?)
+            return null;
+        }
+        JavaType superType = type.getSuperClass();
+        if (superType != null) {
+            // As per [databind#1647], may need to try resolving generic type
+            // parameters; and as per [databind#2468] need to allow possibility
+            // of recursive type, too
+            superType = _fromAny(parentRef, superType, _typeBindings);
+        }
+        return superType;
+    } catch (StackOverflowError e) {
+        // 26-Sep-2016, tatu: Occasionally we get into recursive resolution, and
+        //    while it's generally sign of a problem (and will be caught elsewhere)
+        //    it is possible (see [databind#1418]) so for now just ignore and
+        //    return `null`
+        return null;
+    }
+}
\ No newline at end of file
