diff --git a/tmp/a8a0aefa-c6d3-4ffa-b660-619afda18f77_buggy.java b/tmp/43d43cc0-6eb1-4e9b-9558-a8be42daa569_fixed.java
index e69de29..734f9f1 100644
--- a/tmp/a8a0aefa-c6d3-4ffa-b660-619afda18f77_buggy.java
+++ b/tmp/43d43cc0-6eb1-4e9b-9558-a8be42daa569_fixed.java
@@ -0,0 +1,42 @@
+protected JavaType _fromClass(Class<?> clz, TypeBindings context, 
+        // TypeBindings context, 
+        RecursiveTypeBindings typeBindings)
+{
+    // 18-Apr-2019, tatu: Need to cache to avoid infinite recursion for self-referential types.
+    //    But to do that, we need to give type "placeholder" first, to allow
+    //    resolving bindings (otherwise we may get into loop of resolving
+    //    same type)
+
+    // As to [databind#1647], may need to resolve `clz` before constructing
+    // `JavaType`; this is needed for "self-referential" types (ones with
+    // generics referring to the type itself).
+    if (_typeBindings == null) {
+        _typeBindings = RecursiveTypeBindings.emptyBindings();
+    }
+    JavaType result = _typeBindings.findType(clz);
+    if (result != null) {
+        return result;
+    }
+    // First things first: class must be resolved via super-types
+    ResolvedTypeImpl resolved = new ResolvedTypeImpl(clz, _typeBindings);
+    // then check if it's already in main cache (needed for cyclic types)
+    result = _cachedTypes.get(clz);
+    if (result != null) {
+        return result;
+    }
+    // If not, need to start by resolving parent type first
+    TypeBindings b = resolved.typeBindings();
+    // 14-Mar-2016, tatu: Not sure if this is really needed, but it can't hurt to try
+    //    recreating, if we might be missing resolved super types. But can we force
+    //    re-resolution?
+    b = b.childInstance();
+    JavaType superType = _resolveSuperType(clz, b, typeBindings);
+    resolved.setSuperType(superType);
+    // and then resolve all type bindings
+    JavaType[] typeParams = _resolveTypeParams(clz, b, typeBindings);
+    resolved.setTypeParams(typeParams);
+    // and just for fun, back-reference to this type (to allow construction
+    // of recursive types: needed for Enums, for example)
+    _cachedTypes.put(clz, resolved);
+    return resolved;
+}
\ No newline at end of file
