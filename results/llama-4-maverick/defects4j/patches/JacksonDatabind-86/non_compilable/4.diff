diff --git a/tmp/1a4b2ee8-26e0-4d66-831f-df6dd872792f_buggy.java b/tmp/461be4fc-e797-4415-9056-bc5e2973353f_fixed.java
index e69de29..ad65f26 100644
--- a/tmp/1a4b2ee8-26e0-4d66-831f-df6dd872792f_buggy.java
+++ b/tmp/461be4fc-e797-4415-9056-bc5e2973353f_fixed.java
@@ -0,0 +1,32 @@
+protected JavaType _resolveSuperType(JavaType type, TypeBindings bindings) {
+    // Need to iterate since we may have multiple levels to unwind
+    while (true) {
+        Class<?> raw = type.getRawClass();
+        JavaType superType = _fromSuperClass(raw, bindings);
+        // 26-Sep-2017, tatu: [databind#1647] need to resolve recursive (or self-referential type)
+        //  so, if we have seen super type (or one of its sub-types), resolve to it directly
+        if (superType != null) {
+            if (superType.isTypeOrSubTypeOf(raw)) {
+                return superType;
+            }
+            // otherwise, iterate, resolve
+            type = superType;
+            continue;
+        }
+        // or, if not, resolve generic (if any) and return
+        Type parent = raw.getGenericSuperclass();
+        if (parent == null) {
+            return null;
+        }
+        JavaType superType2 = _fromUnknownType(raw, parent, bindings);
+        if (superType2 != null) {
+            type = superType2;
+            continue;
+        }
+        // shouldn't we give up if we can't resolve it?
+        // 27-Sep-2017, tatu: We used to, but it turns out that this can be a problem
+        //    with certain unusual types... so we will try to resolve it, instead of giving up
+        //    here (see [databind#1677] for an example)
+        return _fromUnknownType(raw, parent, bindings);
+    }
+}
\ No newline at end of file
