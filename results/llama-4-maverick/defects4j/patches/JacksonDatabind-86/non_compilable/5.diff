diff --git a/tmp/f4799daa-fb50-439a-9afe-569a8454ec71_buggy.java b/tmp/4a8d46a3-de3f-4f31-b1b4-dc94becbddca_fixed.java
index e69de29..228ff4e 100644
--- a/tmp/f4799daa-fb50-439a-9afe-569a8454ec71_buggy.java
+++ b/tmp/4a8d46a3-de3f-4f31-b1b4-dc94becbddca_fixed.java
@@ -0,0 +1,28 @@
+protected JavaType _resolveSuperType(JavaType type, Type parentRef) {
+    // need to resolve?
+    if (type instanceof ResolvedRecursiveType) {
+        ResolvedRecursiveType recursiveType = (ResolvedRecursiveType) type;
+        JavaType superClass = _fromAny(parentRef, false);
+        if (superClass != null) {
+            recursiveType.setReference(superClass);
+            superClass._checkAndFixSuperTypes();
+        }
+    } else if (type.isContainerType()) {
+        // [databind#759]
+        ResolvedRecursiveType newRef = _recursiveType(parentRef);
+        ContainerType cont = (ContainerType) type;
+        newRef.setReference(cont.getContentType());
+        JavaType newType = cont.withContentType(_resolveSuperType(cont.getContentType(), parentRef));
+        _fixContainerTypes(type, newRef, newType);
+    } else if (type.isReferenceType()) {
+        ResolvedRecursiveType newRef = _recursiveType(parentRef);
+        ReferenceType ref = (ReferenceType) type;
+        newRef.setReference(ref.getContentType());
+        JavaType newType = ref.withContentType(_resolveSuperType(ref.getContentType(), parentRef));
+        _fixContainerTypes(type, newRef, newType);
+    }
+    // 29-Aug-2019, tatu: With [databind#2468] need to make sure super-types get resolved too
+    //   (although it is not obvious why exactly this is needed)
+    type._checkAndFixSuperTypes();
+    return type;
+}
\ No newline at end of file
