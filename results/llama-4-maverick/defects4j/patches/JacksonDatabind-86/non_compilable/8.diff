diff --git a/tmp/62386a8f-0ab9-4c4d-bb55-721381fd8ef8_buggy.java b/tmp/9d0e9a43-232b-46c6-b6c8-b0df3989f743_fixed.java
index e69de29..01545ed 100644
--- a/tmp/62386a8f-0ab9-4c4d-bb55-721381fd8ef8_buggy.java
+++ b/tmp/9d0e9a43-232b-46c6-b6c8-b0df3989f743_fixed.java
@@ -0,0 +1,19 @@
+protected JavaType _resolveSuperType(JavaType type, TypeTypeBindings bindings) {
+    final Class<?> raw = type.getRawClass();
+    final JavaType superType = type.getSuperClass();
+    if (superType != null) {
+        // 26-Jun-2019, tatu: Need to (re)bind regardless, as per [databind#2460]
+        JavaType resolved = superType.resolve(bindings);
+        // 19-Oct-2018, tatu: [databind#2115] Need to resolve recursive types
+        //   (although not necessarily thru super-types)
+        if (resolved.isTypeOrSubTypeOf(PlaceholderForType.class)) {
+            ResolvedRecursiveType placeholder = new ResolvedRecursiveType(type.getRawClass(), type.getBindings());
+            _incompleteSubTypes.add(placeholder);
+            // [databind#1647] Need to "set" resolved super type to have same placeholder
+            // so that we can correctly rebind types
+            placeholder.setSuperClass(resolved);
+        }
+        return resolved;
+    }
+    return superType;
+}
\ No newline at end of file
