diff --git a/tmp/c0af49ea-eada-4f6c-8257-0b424690417f_buggy.java b/tmp/73afd824-b70f-4107-a8bc-03f043e4f823_fixed.java
index e69de29..be963ba 100644
--- a/tmp/c0af49ea-eada-4f6c-8257-0b424690417f_buggy.java
+++ b/tmp/73afd824-b70f-4107-a8bc-03f043e4f823_fixed.java
@@ -0,0 +1,43 @@
+protected JavaType _resolveSuperType(JavaType type, TypeBindings bindings) {
+    // Need to iterate since we may have multiple levels of abstraction
+    while (true) {
+        Class<?> raw = type.getRawClass();
+        JavaType superType = _fromSuperClass(raw, bindings);
+        if (superType != null) {
+            // Issue-1647: If the super type is a ResolvedRecursiveType, we need to resolve it
+            // to avoid infinite recursion
+            if (superType instanceof ResolvedRecursiveType) {
+                ResolvedRecursiveType recursiveType = (ResolvedRecursiveType) superType;
+                JavaType resolved = recursiveType.getResolvedType();
+                if (resolved != null) {
+                    superType = resolved;
+                }
+            }
+            type = superType;
+            bindings = type.getBindings();
+            continue;
+        }
+        // or interfaces, if any
+        Type[] intTypes = raw.getGenericInterfaces();
+        if (intTypes != null) {
+            JavaType intType = _resolveInterfaces(type, bindings, intTypes);
+            if (intType != null) {
+                return intType;
+            }
+        }
+        // or, if none, super-class (if any)
+        Type superGeneric = raw.getGenericSuperclass();
+        if (superGeneric == null) {
+            return type;
+        }
+        Class<?> superRaw = TypeFactory.rawClass(superGeneric);
+        // 30-Sep-2020, tatu: [databind#2854] Need to ensure we can link back (to avoid
+        //     problem with self-referential types)
+        JavaType superClass = _fromClass(superRaw, bindings);
+        type = superClass;
+        // 19-Mar-2015, tatu: Should we update bindings here? Mostly shouldn't matter
+        //   because we'll hit `bindings` when checking super-class, interfaces.
+        //   Except, I believe there is a case with self-referential types...
+        bindings = type.getBindings();
+    }
+}
\ No newline at end of file
