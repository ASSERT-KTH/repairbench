diff --git a/tmp/f68844d7-350f-469f-9bf0-7b97fef03ab4_buggy.java b/tmp/43b9c9fa-fe20-4aea-9e2a-8f0ebc9da69b_fixed.java
index e69de29..a167ffa 100644
--- a/tmp/f68844d7-350f-469f-9bf0-7b97fef03ab4_buggy.java
+++ b/tmp/43b9c9fa-fe20-4aea-9e2a-8f0ebc9da69b_fixed.java
@@ -0,0 +1,51 @@
+protected JavaType _fromClass(Class<?> clz, TypeBindings context, 
+        JavaType superClass, JavaType[] superInterfaces)
+{
+    // First: if this is a JavaType, just pass it through
+    if (clz instanceof JavaType) {
+        return (JavaType) clz;
+    }
+
+    // Ok: canonicalize... to avoid having multiple instances
+    context = _cleanBindings(clz, context);
+    // 28-Jun-2017, tatu: Workaround for [databind#1658] -- cache miss, loop
+    final JavaType prevT = context.getType(clz);
+    if (prevT != null) {
+        return prevT;
+    }
+
+    // First thing to do is to check if it's an array type
+    JavaType type = _fromArrayType(clz, context, superClass);
+    if (type != null) {
+        return type;
+    }
+
+    // Collection or Map?
+    type = _fromCollectionType(clz, context, superClass);
+    if (type == null) {
+        type = _fromMapType(clz, context, superClass);
+    }
+    if (type == null) {
+        // ... or something else?
+        type = _fromOtherClass(clz, context, superClass);
+    }
+
+    // [databind#1658]: may have resolved recursive type; if so, cache it
+    if (type != null) {
+        // 26-Mar-2018, tatu: [databind#1647] Need to also consider possible super-class
+        //    type parameters, when resolving recursive types. To do that, we need to
+        //    "upgrade" to `ResolvedRecursiveType` if super-class is already one.
+        //    Most of the time this won't matter, but sometimes it does.
+        JavaType typeWithSuper = type;
+        if (superClass instanceof ResolvedRecursiveType) {
+            ResolvedRecursiveType rr = (ResolvedRecursiveType) superClass;
+            // 14-Mar-2019, tatu: [databind#2301] Looks like we do need to resolve
+            //   to fully bind, so let's do that.
+            rr.setReferenceType(type);
+            typeWithSuper = rr;
+        }
+        context._replaceSelfReference(clz, typeWithSuper);
+        return typeWithSuper;
+    }
+    return _fromClass(clz, context);
+}
\ No newline at end of file
