diff --git a/tmp/9f48650a-90f3-489d-b86b-ef01170317a6_buggy.java b/tmp/b0542ced-8521-4a4d-86a9-0039d6d4ae5e_fixed.java
index 21f64c6..ec16723 100644
--- a/tmp/9f48650a-90f3-489d-b86b-ef01170317a6_buggy.java
+++ b/tmp/b0542ced-8521-4a4d-86a9-0039d6d4ae5e_fixed.java
@@ -1,23 +1,28 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            if (offset >= length) // Check if offset is within bounds
+                return -1;
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+            int last = offset + seq.length();
+            if (last <= length) { // Check if the sequence can fit in the remaining input
+                int j = 1;
+                while (i < last && seq.charAt(j) == input[i]) {
+                    i++;
+                    j++;
+                }
                 if (i == last) // found full sequence
                     return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
