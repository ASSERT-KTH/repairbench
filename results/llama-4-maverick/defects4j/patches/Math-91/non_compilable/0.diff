diff --git a/tmp/3fb74455-9f49-4e47-a552-c88eb0d40fa9_buggy.java b/tmp/7d64b256-0fd6-4598-b2ac-ffd85d6e3706_fixed.java
index 4cce784..bb9d300 100644
--- a/tmp/3fb74455-9f49-4e47-a552-c88eb0d40fa9_buggy.java
+++ b/tmp/7d64b256-0fd6-4598-b2ac-ffd85d6e3706_fixed.java
@@ -1,11 +1,41 @@
     /**
      * Compares this object to another based on size.
      * @param object the object to compare to
      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater
      *         than <tt>object</tt>, 0 if they are equal.
      */
     public int compareTo(Fraction object) {
+        // otherwise, just compare the two double values
+        // this avoids problems with overflow or underflow when the two fractions
+        // have very different magnitudes
         double nOd = doubleValue();
         double dOn = object.doubleValue();
-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
+        if (Double.isNaN(nOd) || Double.isNaN(dOn)) {
+            throw new IllegalArgumentException("Comparison of NaN is illegal");
+        }
+        if (nOd < dOn) {
+            return -1;
+        } else if (nOd > dOn) {
+            return 1;
+        } else {
+            // the double representations are equal, but that doesn't mean
+            // the fractions are actually equal, so check that the representations
+            // are the same when reduced to lowest terms.
+            Fraction f1 = this.reduce();
+            Fraction f2 = object.reduce();
+            if (f1.getNumerator() != f2.getNumerator() || f1.getDenominator() != f2.getDenominator()) {
+                // check overflow
+                long f1Num = (long) f1.getNumerator() * f2.getDenominator();
+                long f2Num = (long) f1.getDenominator() * f2.getNumerator();
+                if (f1Num > f2Num) {
+                    return 1;
+                } else if (f1Num < f2Num) {
+                    return -1;
+                } else {
+                    return 0;
+                }
+            } else {
+                return 0;
+            }
+        }
     }
\ No newline at end of file
