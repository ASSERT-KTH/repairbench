diff --git a/tmp/0128cb48-9841-4402-a950-367da154aeb0_buggy.java b/tmp/01174695-b439-4f80-afcf-3ebafad2fbae_fixed.java
index e69de29..44d36f2 100644
--- a/tmp/0128cb48-9841-4402-a950-367da154aeb0_buggy.java
+++ b/tmp/01174695-b439-4f80-afcf-3ebafad2fbae_fixed.java
@@ -0,0 +1,47 @@
+public void clear() {
+    if (parent == null) {
+        // we are the root node, just clear key, value and the Entry list
+        key = null;
+        value = null;
+        children = null;
+    } else {
+        // we are not the root node: we have to remove this node from the
+        // parent's children list and merge our children list into the
+        // parent's children list
+        final List<Entry<K, V>> parentChildren = parent.children;
+        // remove this node from the parent's children list
+        final int index = parentChildren.indexOf(this);
+        parentChildren.remove(index);
+
+        // merge our children list into the parent's children list
+        // (parent is always a non-leaf node so we can use prefixMatch)
+        final int size = children.size();
+        for (int i = 0; i < size; i++) {
+            final Entry<K, V> entry = children.get(i);
+            // add the entries to the parent's children list
+            // and make the entries point to the new parent
+            entry.parent = parent;
+            parentChildren.add(index, entry);
+        }
+
+        // fix the key for the one entry in this node's children that
+        // corresponds to the key previously stored in this node
+        final int index2 = prefixMatch(key, 0, key.length(), this);
+        final Entry<K, V> child = children.get(index2);
+        final int keyLength = key.length();
+
+        if (child.key.length() == keyLength) {
+            // child will replace this node in the trie, so
+            // it needs to have this node's value and other non-trie fields
+            child.value = value;
+            child.equals = equals;
+            child.getValue = getValue;
+            child.hashCode = hashCode;
+        } else {
+            // this node is not the end of a key, but we need to fix
+            // the key for the child that replaces it
+            final K newKey = keySubString(child.key, 0, keyLength);
+            child.key = newKey;
+        }
+    }
+}
\ No newline at end of file
