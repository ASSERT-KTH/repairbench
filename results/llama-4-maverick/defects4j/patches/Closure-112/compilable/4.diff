diff --git a/tmp/91b11283-ba4b-4c2e-a002-6ffaf0344074_buggy.java b/tmp/40cf9b91-5225-498f-b824-3cd2a8aed952_fixed.java
index 63641d0..49fcadf 100644
--- a/tmp/91b11283-ba4b-4c2e-a002-6ffaf0344074_buggy.java
+++ b/tmp/40cf9b91-5225-498f-b824-3cd2a8aed952_fixed.java
@@ -1,33 +1,33 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
+        .restrictByNotNullOrUndefined()
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
