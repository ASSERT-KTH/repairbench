diff --git a/tmp/512044af-2271-43a4-92b8-3d6a4ac80e8e_buggy.java b/tmp/3e7bd8cf-f0a3-4872-84db-271b19b11e8d_fixed.java
index 14b78fb..252b132 100644
--- a/tmp/512044af-2271-43a4-92b8-3d6a4ac80e8e_buggy.java
+++ b/tmp/3e7bd8cf-f0a3-4872-84db-271b19b11e8d_fixed.java
@@ -1,56 +1,49 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
 protected int findWrapPos(String text, int width, int startPos)
 {
     int pos;
 
     // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+    pos = text.indexOf('\n', startPos);
+    if (pos != -1 && pos <= startPos + width)
     {
         return pos + 1;
     }
-        else if (startPos + width >= text.length())
+    pos = text.indexOf('\t', startPos);
+    if (pos != -1 && pos <= startPos + width)
+    {
+        return pos + 1;
+    }
+
+    if (startPos + width >= text.length())
     {
         return -1;
     }
 
-
     // look for the last whitespace character before startPos+width
     pos = startPos + width;
 
-        char c;
+    char c = text.charAt(pos);
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+    while ((pos >= startPos) && !Character.isWhitespace(c))
     {
         --pos;
+        if(pos == startPos) {
+            break;
+        }
+        c = text.charAt(pos);
     }
 
-        // if we found it - just return
+    // if we found one - just return
     if (pos > startPos)
     {
         return pos;
     }
 
     // if we didn't find one, simply chop at startPos+width
     pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+    while ((pos < text.length()) && !Character.isWhitespace(text.charAt(pos)))
     {
         ++pos;
     }
     return pos == text.length() ? -1 : pos;
 }
\ No newline at end of file
