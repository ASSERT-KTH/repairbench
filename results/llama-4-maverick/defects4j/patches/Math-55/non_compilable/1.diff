diff --git a/tmp/209e9719-4902-4f40-84eb-8f9cdd1a28a5_buggy.java b/tmp/9e8f7cf5-ad84-41a8-8232-20fac2d7190a_fixed.java
index 1478ee1..d945d36 100644
--- a/tmp/209e9719-4902-4f40-84eb-8f9cdd1a28a5_buggy.java
+++ b/tmp/9e8f7cf5-ad84-41a8-8232-20fac2d7190a_fixed.java
@@ -1,24 +1,31 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
+      // we have to compute the cross product in a way that avoids cancellation errors,
+      // see Kahan lecture "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double   ax = v1.x;
+      final double   ay = v1.y;
+      final double   az = v1.z;
+      final double   bx = v2.x;
+      final double   by = v2.y;
+      final double   bz = v2.z;
 
+      // compute the cross product components
+      // the original computation is the following (not numerically stable)
+      // final double x = ay * bz - az * by;
+      // final double y = az * bx - ax * bz;
+      // final double z = ax * by - ay * bx;
+      // we use Kahan's method, with 2 multiplications and 5 fused-multiply-add
+      double x =  Math.fma(ay, bz, -az * by);
+      double y =  Math.fma(az, bx, -ax * bz);
+      double z =  Math.fma(ax, by, -ay * bx);
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(x, y, z);
 
   }
\ No newline at end of file
