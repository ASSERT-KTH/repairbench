diff --git a/tmp/b79a6d8b-c441-44b4-a6ff-de4dcee8bf47_buggy.java b/tmp/f1913e81-7706-46ad-a2db-1c1cf1bc1d09_fixed.java
index 1478ee1..9f82cb8 100644
--- a/tmp/b79a6d8b-c441-44b4-a6ff-de4dcee8bf47_buggy.java
+++ b/tmp/f1913e81-7706-46ad-a2db-1c1cf1bc1d09_fixed.java
@@ -1,24 +1,27 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double dot = v1.dotProduct(v2);
+      final double scale1 = 1.0;
+      final double scale2 = 1.0;
+      final double s = FastMath.max(FastMath.scalb(FastMath.abs(dot), -53), 1.0);
+      final Vector3D v3 = new Vector3D(scale1, v1, -s * dot / FastMath.abs(dot), v2);
+      final double newScale = s / v3.getNorm();
 
+      final double x = newScale * (v3.getY() * v2.getZ() - v3.getZ() * v2.getY());
+      final double y = newScale * (v3.getZ() * v2.getX() - v3.getX() * v2.getZ());
+      final double z = newScale * (v3.getX() * v2.getY() - v3.getY() * v2.getX());
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(x, y, z);
 
   }
\ No newline at end of file
