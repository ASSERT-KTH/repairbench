diff --git a/tmp/c6ac2e13-cc24-4052-936c-42b1e42ef6ba_buggy.java b/tmp/70b10e06-40a1-4b20-b25c-f5e899ee5427_fixed.java
index 1478ee1..aec637e 100644
--- a/tmp/c6ac2e13-cc24-4052-936c-42b1e42ef6ba_buggy.java
+++ b/tmp/70b10e06-40a1-4b20-b25c-f5e899ee5427_fixed.java
@@ -1,24 +1,23 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      final double v1x = v1.x;
+      final double v1y = v1.y;
+      final double v1z = v1.z;
+      final double v2x = v2.x;
+      final double v2y = v2.y;
+      final double v2z = v2.z;
+
+      final double dot = v1x * v2x + v1y * v2y + v1z * v2z;
+      final double s   = FastMath.scalb(1.0, -FastMath.getExponent(dot));
+      final double v3x = s * (v1y * (s * (v2z * s)) - v1z * (s * (v2y * s)));
+      final double v3y = s * (v1z * (s * (v2x * s)) - v1x * (s * (v2z * s)));
+      final double v3z = s * (v1x * (s * (v2y * s)) - v1y * (s * (v2x * s)));
+
+      return new Vector3D(v3x, v3y, v3z);
 
   }
\ No newline at end of file
