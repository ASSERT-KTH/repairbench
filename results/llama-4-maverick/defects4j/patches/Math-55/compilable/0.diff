diff --git a/tmp/31ffec40-b1be-415e-967d-69319994433f_buggy.java b/tmp/cb0ae433-c1b4-4122-a5eb-f0e47a403f96_fixed.java
index 1478ee1..b2d14de 100644
--- a/tmp/31ffec40-b1be-415e-967d-69319994433f_buggy.java
+++ b/tmp/cb0ae433-c1b4-4122-a5eb-f0e47a403f96_fixed.java
@@ -1,24 +1,31 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      final double ax = v1.x;
+      final double ay = v1.y;
+      final double az = v1.z;
+      final double bx = v2.x;
+      final double by = v2.y;
+      final double bz = v2.z;
+      final double b2 = bx * bx + by * by + bz * bz;
+      final double rho = ax * bx + ay * by + az * bz;
+      if (Double.isNaN(rho)) {
+          // this happens when v1 is NaN or infinite and v2 is NaN or zero (infinity * 0 = NaN)
+          return new Vector3D(Double.NaN, Double.NaN, Double.NaN);
+      }
+      final double s = Math.scalb(1.0, -FastMath.getExponent(b2)) * rho;
+      final double t = Math.scalb(1.0, -FastMath.getExponent(b2)) * b2;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      final double cax = ay * bz - az * by;
+      final double cay = az * bx - ax * bz;
+      final double caz = ax * by - ay * bx;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(cax * (t - s) + ax * (s - t),
+                          cay * (t - s) + ay * (s - t),
+                          caz * (t - s) + az * (s - t));
 
   }
\ No newline at end of file
