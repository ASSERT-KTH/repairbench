diff --git a/tmp/97ef4f32-cdb9-4ef9-8fd9-2b18ac237695_buggy.java b/tmp/ce31f34c-91d1-41e1-a6db-8f59a1e319a5_fixed.java
index 1478ee1..d489be3 100644
--- a/tmp/97ef4f32-cdb9-4ef9-8fd9-2b18ac237695_buggy.java
+++ b/tmp/ce31f34c-91d1-41e1-a6db-8f59a1e319a5_fixed.java
@@ -1,24 +1,32 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      double dx1 = v1.x;
+      double dy1 = v1.y;
+      double dz1 = v1.z;
+      double dx2 = v2.x;
+      double dy2 = v2.y;
+      double dz2 = v2.z;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
+      // we protect against numerical cancellation by rescaling v1 and v2
+      // before computing the cross product; rescaling preserves the result
+      // (this is equivalent to change of units for some arbitrary length)
+      double max1 = FastMath.max(FastMath.max(FastMath.abs(dx1), FastMath.abs(dy1)), FastMath.abs(dz1));
+      double max2 = FastMath.max(FastMath.max(FastMath.abs(dx2), FastMath.abs(dy2)), FastMath.abs(dz2));
+      double scale1 = FastMath.scalb(1.0, -FastMath.getExponent(max1));
+      double scale2 = FastMath.scalb(1.0, -FastMath.getExponent(max2));
+      dx1 = dx1 * scale1;
+      dy1 = dy1 * scale1;
+      dz1 = dz1 * scale1;
+      dx2 = dx2 * scale2;
+      dy2 = dy2 * scale2;
+      dz2 = dz2 * scale2;
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(dy1 * dz2 - dz1 * dy2, dz1 * dx2 - dx1 * dz2, dx1 * dy2 - dy1 * dx2);
 
   }
\ No newline at end of file
