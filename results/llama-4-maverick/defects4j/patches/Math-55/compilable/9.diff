diff --git a/tmp/c2b38abd-7d7e-42ba-ba2b-efc39801c4d3_buggy.java b/tmp/44bf5b4f-ff42-4ab0-be51-3d1fc5502a53_fixed.java
index 1478ee1..50da498 100644
--- a/tmp/c2b38abd-7d7e-42ba-ba2b-efc39801c4d3_buggy.java
+++ b/tmp/44bf5b4f-ff42-4ab0-be51-3d1fc5502a53_fixed.java
@@ -1,24 +1,37 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
+      // we have to compute the cross product in a way that avoids
+      // cancellation problems that occur when the vectors are almost
+      // parallel (co-linear or anti-parallel). The following formula
+      // was found in Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      final double ax = v1.x;
+      final double ay = v1.y;
+      final double az = v1.z;
+      final double bx = v2.x;
+      final double by = v2.y;
+      final double bz = v2.z;
 
+      final double x = ay * bz - az * by;
+      final double y = az * bx - ax * bz;
+      final double z = ax * by - ay * bx;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      if ((x == 0.0) && (y == 0.0) && (z == 0.0)) {
+          // the vectors are co-linear or anti-parallel, we use an alternate formula
+          final double a2 = ax * ax + ay * ay + az * az;
+          final double b2 = bx * bx + by * by + bz * bz;
+          final double ab = ax * bx + ay * by + az * bz;
+          final double s = FastMath.sqrt(a2 * b2 - ab * ab);
+          return new Vector3D(s, v1, -s, v2);
+      } else {
+          return new Vector3D(x, y, z);
+      }
 
   }
\ No newline at end of file
