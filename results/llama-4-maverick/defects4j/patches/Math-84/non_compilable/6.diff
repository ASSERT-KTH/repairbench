diff --git a/tmp/91a521b5-cab1-4493-bdd0-61de0f11d1c5_buggy.java b/tmp/229669a0-3580-4d9c-a661-fdb1825109a8_fixed.java
index 5f1dcf2..4a4f04f 100644
--- a/tmp/91a521b5-cab1-4493-bdd0-61de0f11d1c5_buggy.java
+++ b/tmp/229669a0-3580-4d9c-a661-fdb1825109a8_fixed.java
@@ -1,41 +1,43 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = createSimplex(original, reflected);
+            } else {
+                // accept the expanded simplex
+                simplex = createSimplex(original, expanded);
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = createSimplex(original, contracted);
+            } else {
+                // shrink simplex (not sure this can really ever happen)
+                simplex = shrinkSimplex(original, comparator);
+            }
+        }
 
         // check convergence
+        boolean converged = true;
+        for (int i = 1; converged && (i < simplex.length); ++i) {
+            converged = comparator.compare(original[0], simplex[i]) >= 0;
+        }
+        if (converged) {
+            // we are done
             return;
         }
 
     }
\ No newline at end of file
-
-    }
