diff --git a/tmp/7aaf4a27-907c-4783-a8cd-d75a4970a4b4_buggy.java b/tmp/afa8a135-13a2-47fd-a5dc-34ed228f5e2f_fixed.java
index 5f1dcf2..934a530 100644
--- a/tmp/7aaf4a27-907c-4783-a8cd-d75a4970a4b4_buggy.java
+++ b/tmp/afa8a135-13a2-47fd-a5dc-34ed228f5e2f_fixed.java
@@ -1,41 +1,141 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceFirstSimplex(reflected);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceFirstSimplex(expanded);
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, worst(best, comparator)) >= 0) {
+                // we are trapped in a flat area or wrong direction
+                simplex = shrinkSimplex(comparator);
+            } else {
                 // accept the contracted simplex
+                simplex = replaceFirstSimplex(contracted);
+            }
+        }
 
         // check convergence
+        boolean converged = true;
+        for (RealPointValuePair point : simplex) {
+            if (comparator.compare(point, best) < 0) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
             return;
         }
 
+        incrementIterationsCounter();
     }
 
+    private RealPointValuePair[] replaceFirstSimplex(RealPointValuePair newPoint) {
+        RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+        newSimplex[0] = newPoint;
+        System.arraycopy(simplex, 1, newSimplex, 1, simplex.length - 1);
+        return newSimplex;
+    }
+
+    private RealPointValuePair worst(RealPointValuePair best, Comparator<RealPointValuePair> comparator) {
+        RealPointValuePair worst = simplex[1];
+        for (int i = 2; i < simplex.length; i++) {
+            if (comparator.compare(worst, simplex[i]) < 0) {
+                worst = simplex[i];
+            }
+        }
+        return comparator.compare(best, worst) < 0 ? best : worst;
+    }
+
+    private RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException {
+        final RealPointValuePair best = simplex[0];
+        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+        newSimplex[0] = best;
+        for (int i = 1; i < simplex.length; ++i) {
+            final RealPointValuePair contracted = evaluateNewSimplex(best, simplex[i], sigma, comparator);
+            if (comparator.compare(contracted, simplex[i]) < 0) {
+                newSimplex[i] = contracted;
+            } else {
+                newSimplex[i] = simplex[i];
+            }
+        }
+        return newSimplex;
+    }
+
+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,
+                                                  final double coeff,
+                                                  final Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException {
+        final RealPointValuePair[] newSimplex = new RealPointValuePair[original.length];
+        final double[] xSmallest = original[0].getPoint();
+        final double fSmallest = original[0].getValue();
+        double sum = 0;
+        for (int i = 1; i < original.length; ++i) {
+            final double[] x = original[i].getPoint();
+            for (int j = 0; j < x.length; ++j) {
+                x[j] = xSmallest[j] + coeff * (x[j] - xSmallest[j]);
+            }
+            newSimplex[i] = new RealPointValuePair(x, Double.NaN, false);
+            sum += newSimplex[i].getValue();
+        }
+        newSimplex[0] = new RealPointValuePair(xSmallest, fSmallest, false);
+
+        final RealPointValuePair centroid = new RealPointValuePair(computeCentroid(newSimplex), sum / (newSimplex.length - 1), false);
+        newSimplex[0] = evaluate(centroid.getPointRef());
+
+        return getReplacement(newSimplex, comparator);
+    }
+
+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair smallest,
+                                                  final RealPointValuePair point,
+                                                  final double coeff,
+                                                  final Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException {
+        final double[] xSmallest = smallest.getPointRef();
+        final double[] x = point.getPointRef();
+        final double[] xNew = new double[x.length];
+        for (int i = 0; i < x.length; ++i) {
+            xNew[i] = xSmallest[i] + coeff * (x[i] - xSmallest[i]);
+        }
+
+        return evaluate(xNew);
+    }
+
+    private RealPointValuePair getReplacement(final RealPointValuePair[] newSimplex,
+                                              final Comparator<RealPointValuePair> comparator) {
+        RealPointValuePair replacement = newSimplex[0];
+        for (int i = 1; i < newSimplex.length; ++i) {
+            if (comparator.compare(replacement, newSimplex[i]) > 0) {
+                replacement = newSimplex[i];
+            }
+        }
+        return replacement;
+    }
+
+    private double[] computeCentroid(final RealPointValuePair[] points) {
+        final double[] centroid = new double[points[0].getDimension()];
+        for (int i = 0; i < centroid.length; ++i) {
+            double sum = 0;
+            for (int j = 0; j < points.length; ++j) {
+                sum += points[j].getPointRef()[i];
+            }
+            centroid[i] = sum / points.length;
+        }
+        return centroid;
     }
\ No newline at end of file
