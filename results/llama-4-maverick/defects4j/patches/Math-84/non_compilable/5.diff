diff --git a/tmp/689ba2c9-9fc7-4fb1-8067-fb58639b24ef_buggy.java b/tmp/d7bc7ab9-4987-4a06-a9c6-de1338e01764_fixed.java
index 5f1dcf2..04484c1 100644
--- a/tmp/689ba2c9-9fc7-4fb1-8067-fb58639b24ef_buggy.java
+++ b/tmp/d7bc7ab9-4987-4a06-a9c6-de1338e01764_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = original;
+                replaceWorstPoint(reflected, comparator);
+            } else {
+                // accept the expanded simplex
+                simplex = original;
+                replaceWorstPoint(expanded, comparator);
             }
 
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = original;
+                replaceWorstPoint(contracted, comparator);
+            } else {
+                // perform a shrink
+                for (int i = 1; i < simplex.length; ++i) {
+                    final RealPointValuePair newVertex = new RealPointValuePair(
+                        new double[] {
+                            best.getPoint()[0] + 0.5 * (simplex[i].getPoint()[0] - best.getPoint()[0]),
+                            best.getPoint()[1] + 0.5 * (simplex[i].getPoint()[1] - best.getPoint()[1])
+                        },
+                        Double.NaN,
+                        false
+                    );
+                    simplex[i] = newVertex;
+                }
+                // reevaluate the simplex
+                for (int i = 1; i < simplex.length; ++i) {
+                    evaluate(simplex[i]);
+                }
             }
-
         }
 
     }
\ No newline at end of file
