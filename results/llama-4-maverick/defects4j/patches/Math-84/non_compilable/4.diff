diff --git a/tmp/d84f0790-4bfc-41bc-af05-c0f693d13246_buggy.java b/tmp/22a6b4a2-1283-4b16-a358-2dfbd539b35e_fixed.java
index 5f1dcf2..a8a0970 100644
--- a/tmp/d84f0790-4bfc-41bc-af05-c0f693d13246_buggy.java
+++ b/tmp/22a6b4a2-1283-4b16-a358-2dfbd539b35e_fixed.java
@@ -1,41 +1,61 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceFirstSimplex(reflected);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceFirstSimplex(expanded);
             }
 
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, worst) < 0) {
                 // accept the contracted simplex
+                simplex = replaceFirstSimplex(contracted);
+            } else {
+                // shrink the simplex
+                for (int i = 1; i < simplex.length; ++i) {
+                    final RealPointValuePair newVertex = new RealPointValuePair(
+                        new double[] {
+                            (simplex[i].getPoint()[0] + best.getPoint()[0]) / 2,
+                            (simplex[i].getPoint()[1] + best.getPoint()[1]) / 2 },
+                        Double.NaN);
+                    simplex[i] = newVertex;
+                }
+                // evaluate the simplex
+                evaluateSimplex(comparator);
+            }
+        }
 
         // check convergence
         return;
-            }
 
     }
 
+    /**
+     * Replace the first point in the simplex (the worst point) with a new point.
+     *
+     * @param newPoint new point to put at the first position
+     * @return a new simplex with the new point at the first position
+     */
+    private RealPointValuePair[] replaceFirstSimplex(RealPointValuePair newPoint) {
+        final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];
+        newSimplex[0] = newPoint;
+        System.arraycopy(simplex, 1, newSimplex, 1, simplex.length - 1);
+        return newSimplex;
     }
\ No newline at end of file
