diff --git a/tmp/541fc6e9-137c-46bc-8d07-f5d90101062a_buggy.java b/tmp/ebb4fc51-b13d-44ed-8812-3c489615f3ca_fixed.java
index 5f1dcf2..7585552 100644
--- a/tmp/541fc6e9-137c-46bc-8d07-f5d90101062a_buggy.java
+++ b/tmp/ebb4fc51-b13d-44ed-8812-3c489615f3ca_fixed.java
@@ -1,41 +1,56 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = getSimplex();
+            } else {
+                // accept the expanded simplex
+                simplex = getSimplex();
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            if (comparator.compare(contracted, best) >= 0) {
+                // shrink the simplex
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] point = simplex[i].getPoint();
+                    final double[] bestPoint = best.getPoint();
+                    for (int j = 0; j < point.length; ++j) {
+                        point[j] = bestPoint[j] + delta * (point[j] - bestPoint[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(point, Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
+            } else {
                 // accept the contracted simplex
+                simplex = getSimplex();
+            }
+        }
 
         // check convergence
+        boolean converged = true;
+        for (int i = 1; i < simplex.length; ++i) {
+            if (comparator.compare(best, simplex[i]) != 0) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
             return;
         }
 
-        }
-
+        // we have not converged yet
+        throw new OptimizationException("no convergence");
     }
\ No newline at end of file
