diff --git a/tmp/072cc8bd-79d6-42c7-9397-d066f04ff9ac_buggy.java b/tmp/9c4c524d-57e8-434f-aeb5-11ac33a38517_fixed.java
index 5f1dcf2..fb8e771 100644
--- a/tmp/072cc8bd-79d6-42c7-9397-d066f04ff9ac_buggy.java
+++ b/tmp/9c4c524d-57e8-434f-aeb5-11ac33a38517_fixed.java
@@ -1,41 +1,49 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = original;
+                System.arraycopy(evaluateSimplex(reflected.getPoint(), comparator), 0, simplex, 0, simplex.length);
+            } else {
+                // accept the expanded simplex
+                simplex = original;
+                System.arraycopy(evaluateSimplex(expanded.getPoint(), comparator), 0, simplex, 0, simplex.length);
             }
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                simplex = original;
+                System.arraycopy(evaluateSimplex(contracted.getPoint(), comparator), 0, simplex, 0, simplex.length);
+            } else {
+                // shrink the simplex
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] x = simplex[i].getPoint();
+                    final double[] xSmall = new double[x.length];
+                    for (int j = 0; j < x.length; ++j) {
+                        xSmall[j] = best.getPoint()[j] + rho * (x[j] - best.getPoint()[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(xSmall, Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
             }
 
         }
 
     }
\ No newline at end of file
