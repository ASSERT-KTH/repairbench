diff --git a/tmp/74cc8b24-4483-4a01-bf27-3813df89c451_buggy.java b/tmp/06922db0-9071-4a08-aec3-4fa45bacd6e9_fixed.java
index 5f1dcf2..7c3b984 100644
--- a/tmp/74cc8b24-4483-4a01-bf27-3813df89c451_buggy.java
+++ b/tmp/06922db0-9071-4a08-aec3-4fa45bacd6e9_fixed.java
@@ -1,41 +1,52 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceWorstPoint(reflected, comparator);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceWorstPoint(expanded, comparator);
             }
 
-                return;
-
+        } else {
+            // perform a contraction step
+            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];
+            contractedSimplex[0] = best;
+            for (int i = 1; i < simplex.length; ++i) {
+                final RealPointValuePair point = simplex[i];
+                final double[] newPoint = new double[point.getPoint().length];
+                for (int j = 0; j < newPoint.length; ++j) {
+                    newPoint[j] = (1 - gamma) * best.getPoint()[j] + gamma * point.getPoint()[j];
+                }
+                contractedSimplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);
+            }
+            simplex = evaluateSimplex(contractedSimplex, comparator);
         }
-
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
 
         // check convergence
+        boolean converged = true;
+        for (int i = 1; i < simplex.length; ++i) {
+            if (!isConverged(simplex[i].getPoint(), best.getPoint())) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
             return;
         }
 
-        }
-
+        // check we didn't exceed the number of allowed iterations
+        checkIterationCount();
     }
\ No newline at end of file
