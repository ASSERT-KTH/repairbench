diff --git a/tmp/4152a3ea-b9fb-4524-84e2-c40575448671_buggy.java b/tmp/d974201e-5e13-47d5-b4db-dd5a4ba05604_fixed.java
index 5f1dcf2..c5864f4 100644
--- a/tmp/4152a3ea-b9fb-4524-84e2-c40575448671_buggy.java
+++ b/tmp/d974201e-5e13-47d5-b4db-dd5a4ba05604_fixed.java
@@ -1,41 +1,43 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
-
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceFirstSimplex(reflected);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceFirstSimplex(expanded);
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = replaceFirstSimplex(contracted);
+            } else {
+                // shrink the simplex
+                for (int i = 1; i < simplex.length; ++i) {
+                    final RealPointValuePair value = new RealPointValuePair(
+                            simplex[0].getPointRef()[0] + delta * (simplex[i].getPointRef()[0] - simplex[0].getPointRef()[0]),
+                            simplex[0].getPointRef()[1] + delta * (simplex[i].getPointRef()[1] - simplex[0].getPointRef()[1]),
+                            Double.NaN, false);
+                    simplex[i] = evaluate(value, comparator);
+                }
+                Arrays.sort(simplex, comparator);
+            }
+        }
 
         // check convergence
         return;
-            }
-
-        }
 
     }
\ No newline at end of file
