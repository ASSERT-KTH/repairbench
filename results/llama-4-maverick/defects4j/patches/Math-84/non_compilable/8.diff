diff --git a/tmp/3b14a938-3ed8-46bf-afe2-79436cde6125_buggy.java b/tmp/80c5d1d2-f91b-458e-9b30-32b52846a6d1_fixed.java
index 5f1dcf2..2efbb27 100644
--- a/tmp/3b14a938-3ed8-46bf-afe2-79436cde6125_buggy.java
+++ b/tmp/80c5d1d2-f91b-458e-9b30-32b52846a6d1_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceFirstSimplex(reflected);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceFirstSimplex(expanded);
             }
 
-                return;
-
-            }
-
-            // compute the contracted simplex
+        } else {
+            // perform a contraction step
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = replaceFirstSimplex(contracted);
+            } else {
+                // we shrink the simplex
+                simplex = shrinkSimplex(comparator);
+            }
+        }
 
-            // check convergence
-                return;
     }
 
+    private RealPointValuePair[] replaceFirstSimplex(final RealPointValuePair replacement) {
+        System.arraycopy(simplex, 1, simplex, 1, simplex.length - 1);
+        simplex[0] = replacement;
+        return simplex;
     }
 
+    private RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator)
+        throws FunctionEvaluationException, OptimizationException {
+        final RealPointValuePair best = simplex[0];
+        for (int i = 1; i < simplex.length; ++i) {
+            final RealPointValuePair newVertex = evaluateNewSimplex(best, simplex[i], 0.5, comparator);
+            simplex[i] = newVertex;
+        }
+        // re-sort vertices (if needed)
+        sortSimplex(simplex, comparator);
+        return simplex;
     }
\ No newline at end of file
