diff --git a/tmp/a41a70d6-6722-4b92-9b11-8f0015eb6784_buggy.java b/tmp/4ea486d5-5d8c-4c9e-9390-dbb89ed8de67_fixed.java
index 574b43c..a3883b4 100644
--- a/tmp/a41a70d6-6722-4b92-9b11-8f0015eb6784_buggy.java
+++ b/tmp/4ea486d5-5d8c-4c9e-9390-dbb89ed8de67_fixed.java
@@ -1,57 +1,105 @@
     /**
      * Method that will construct a regular bean property setter using
      * the given setter method.
      *
      * @return Property constructed, if any; or null to indicate that
      *   there should be no property based on given definitions.
      */
     protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
         if (ctxt.canOverrideAccessModifiers()) {
-            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
+            // [databind#877, #1025]: Explicitly prevent forced access to `cause` of `Throwable`;
             // never needed and attempts may cause problems on some platforms.
             // !!! NOTE: should be handled better for 2.8 and later
+            if (isIgnorableThrowableCause(ctxt, mutator)) {
+                return null;
+            }
             mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
         }
         // note: this works since we know there's exactly one argument for methods
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
         // did type change?
         if (type != propType0) {
             property = property.withType(type);
         }
 
         // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser != null) {
             prop = prop.withValueDeserializer(propDeser);
         }
         // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref != null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if(objectIdInfo != null){
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
+
+    private boolean isIgnorableThrowableCause(DeserializationContext ctxt, AnnotatedMember mutator) {
+        if (mutator instanceof AnnotatedMethod) {
+            AnnotatedMethod am = (AnnotatedMethod) mutator;
+            // [databind#1025]: add special handling for `Throwable.cause`/`Throwable.initCause`
+            //    (since actual method is private, not even visible on `Throwable`)
+            if ("initCause".equals(am.getName()) 
+                    && am.getParameterCount() == 1) {
+                return true;
+            }
+            return _isIgnorableThrowableCtor(ctxt, am);
+        } else if (mutator instanceof AnnotatedField) {
+            return _isIgnorableThrowableField(mutator);
+        }
+        return false;
+    }
+
+    private boolean _isIgnorableThrowableField(AnnotatedMember mutator) {
+        return "cause".equals(mutator.getName());
+    }
+
+    private boolean _isIgnorableThrowableCtor(DeserializationContext ctxt,
+            AnnotatedMethod am) {
+        // First: only interested in 1-arg ctors (others aren't
+        // relevant)
+        if (am.getParameterCount() != 1) {
+            return false;
+        }
+        // Second: check name (not strictly necessary, but nice)
+        if (!"Throwable".equals(am.getDeclaringClass().getSimpleName())) {
+            return false;
+        }
+        // And third: check parameter type (also not strictly necessary)
+        JavaType type = am.getParameterType(0);
+        // wrt [databind#3811]: minor improvement, but helps with GraalVM native-image
+        // (also a practical problem with JDK 16+)
+        if (type == null) {
+            try {
+                type = ctxt.getTypeFactory().constructType(Class.forName("java.lang.Throwable"));
+            } catch (ClassNotFoundException e) {
+                // 20-Oct-2021, tatu: Not sure how this could happen but let's be defensive
+            }
+        }
+        return ((type != null) && "java.lang.Throwable".equals(type.getRawClass().getName()));
+    }
\ No newline at end of file
