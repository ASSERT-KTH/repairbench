diff --git a/tmp/b1df23e0-dc35-4d30-b778-984d1d3860f0_buggy.java b/tmp/9b64fb71-1c96-4ed9-977d-7d691f92b094_fixed.java
index 574b43c..d871831 100644
--- a/tmp/b1df23e0-dc35-4d30-b778-984d1d3860f0_buggy.java
+++ b/tmp/9b64fb71-1c96-4ed9-977d-7d691f92b094_fixed.java
@@ -1,57 +1,73 @@
-    /**
-     * Method that will construct a regular bean property setter using
-     * the given setter method.
-     *
-     * @return Property constructed, if any; or null to indicate that
-     *   there should be no property based on given definitions.
-     */
 protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
         BeanDescription beanDesc, BeanPropertyDefinition propDef,
         JavaType propType0)
     throws JsonMappingException
 {
     // need to ensure method is callable (for non-public)
     AnnotatedMember mutator = propDef.getNonConstructorMutator();
-
+    // [databind#2410]: Very likely a false positive (access already forced by JDK) but
+    //   let's try to work around JDK issue with Throwable.cause
+    if ("cause".equals(propDef.getName()) && mutator instanceof AnnotatedMethod) {
+        AnnotatedMethod am = (AnnotatedMethod) mutator;
+        // 16-Oct-2019, tatu: As per [databind#2410], looks like access to `Throwable.cause`
+        //    is problematic; see if this is the problem (and if so work around)
+        Class<?> rawBase = am.getDeclaringClass();
+        if (Throwable.class.isAssignableFrom(rawBase)) {
+            // Let's try to recognize JDK internals that forcibly define "cause" as final
+            // (IBM JDK being one such example); if final, can't force access, so give up
+            if (_isSetterMethodFinal(am)) {
+                return null;
+            }
+        }
+    }
     if (ctxt.canOverrideAccessModifiers()) {
-            // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
-            // never needed and attempts may cause problems on some platforms.
-            // !!! NOTE: should be handled better for 2.8 and later
         mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
     }
     // note: this works since we know there's exactly one argument for methods
     BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
             propType0, propDef.getWrapperName(),
             beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
     JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
     // did type change?
     if (type != propType0) {
         property = property.withType(type);
     }
 
     // First: does the Method specify the deserializer to use? If so, let's use it.
     JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
     type = modifyTypeByAnnotation(ctxt, mutator, type);
     TypeDeserializer typeDeser = type.getTypeHandler();
     SettableBeanProperty prop;
     if (mutator instanceof AnnotatedMethod) {
         prop = new MethodProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
     } else {
         prop = new FieldProperty(propDef, type, typeDeser,
                 beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
     }
     if (propDeser != null) {
         prop = prop.withValueDeserializer(propDeser);
     }
     // need to retain name of managed forward references:
     AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
     if (ref != null && ref.isManagedReference()) {
         prop.setManagedReferenceName(ref.getName());
     }
     ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
     if(objectIdInfo != null){
         prop.setObjectIdInfo(objectIdInfo);
     }
     return prop;
 }
+
+// @since 2.11
+protected boolean _isSetterMethodFinal(AnnotatedMethod am) {
+    // [databind#2410]: with JDK we could do this, but not with JDK 8, 9...
+    /*
+    try {
+        Method m = am.getAnnotated();
+        return Modifier.isFinal(m.getModifiers());
+    } catch (SecurityException e) { }
+    */
+    return false;
+}
\ No newline at end of file
