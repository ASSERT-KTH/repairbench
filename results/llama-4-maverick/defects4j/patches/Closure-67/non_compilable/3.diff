diff --git a/tmp/ab6c12b0-9720-489c-bd20-a5a1d160dcaf_buggy.java b/tmp/c28aafaf-b8be-46c4-8edd-acd92bc22925_fixed.java
index 939f49b..346e4cd 100644
--- a/tmp/ab6c12b0-9720-489c-bd20-a5a1d160dcaf_buggy.java
+++ b/tmp/c28aafaf-b8be-46c4-8edd-acd92bc22925_fixed.java
@@ -1,21 +1,37 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
       && n.getType() == Token.GETPROP
       ) {
     // We want to exclude the assignment itself from the usage list
     boolean isChainedProperty =
         n.getFirstChild().getType() == Token.GETPROP;
 
     if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+      Node lhs = n.getFirstChild();
+      Node child = lhs.getFirstChild().getNext();
 
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
+    } else if (assign.getParent().isExprResult()) {
+      // Check for a.b.c = d.e = ...;
+      Node parent = assign.getParent();
+      Node grandparent = parent.getParent();
+      if (grandparent.isAssign()) {
+        Node grn = grandparent.getFirstChild();
+        if (grn.isGetProp() && grn.getFirstChild().getType() == Token.GETPROP) {
+          Node lhs = grn.getFirstChild();
+          Node child = lhs.getFirstChild().getNext();
+          if (child.getType() == Token.STRING &&
+              child.getString().equals("prototype")) {
+            return true;
+          }
+        }
+      }
     }
   }
 
   return false;
 }
\ No newline at end of file
