diff --git a/tmp/6cfc11ed-8d95-48b0-a297-056f9454c3f2_buggy.java b/tmp/bad11b37-2379-477c-bcdf-3f0f40c12eef_fixed.java
index e69de29..2dd338b 100644
--- a/tmp/6cfc11ed-8d95-48b0-a297-056f9454c3f2_buggy.java
+++ b/tmp/bad11b37-2379-477c-bcdf-3f0f40c12eef_fixed.java
@@ -0,0 +1,56 @@
+protected void _writeFieldName(String name, boolean canonical) throws IOException
+{
+    if (_cfgPrettyPrinter != null) {
+        _writePPFieldName(name, canonical);
+        return;
+    }
+    if (_outputPtr >= _outputEnd) {
+        _flushBuffer();
+    }
+    if (!(_writeContext.writeFieldName(name) == Status.ALLOW_UNQUOTED)) {
+        _reportError("Can not write a field name, expecting a value");
+    }
+    if (_cfgQuoteFieldNames) {
+        _writeFieldNameQuoted(name);
+    } else {
+        _writeFieldNameUnquoted(name);
+    }
+}
+
+private void _writeFieldNameQuoted(String name) throws IOException
+{
+    if (_outputPtr >= _outputEnd) {
+        _flushBuffer();
+    }
+    _outputBuffer[_outputPtr++] = _quoteChar;
+    _writeString(name);
+    if (_outputPtr >= _outputEnd) {
+        _flushBuffer();
+    }
+    _outputBuffer[_outputPtr++] = _quoteChar;
+}
+
+private void _writeFieldNameUnquoted(String name) throws IOException
+{
+    final int nameLen = name.length();
+    if (nameLen == 0) {
+        _reportError("Field name can not be empty");
+    }
+    // Special case: output directly if no need to escape
+    // 11-Jan-2014, tatu: Special handling for spaces, to avoid outputting
+    //   invalid JSON (unquoted spaces are not valid field names)
+    final int firstChar = _typeOf(name.charAt(0));
+    if (!_isJavaIdentifierStart(firstChar) || firstChar == JsonTokenId.INT_SPACE) {
+        _writeFieldNameQuoted(name);
+        return;
+    }
+    for (int i = 1; i < nameLen; ++i) {
+        final int c = _typeOf(name.charAt(i));
+        if (!_isJavaIdentifierPart(c)) {
+            _writeFieldNameQuoted(name);
+            return;
+        }
+    }
+    // Ok: let's just output as is, without quotes
+    _writeString(name);
+}
\ No newline at end of file
