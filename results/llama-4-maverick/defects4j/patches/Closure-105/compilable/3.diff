diff --git a/tmp/9aa94f72-bcf2-4aa1-8e0a-1fc8621d7042_buggy.java b/tmp/18e2f3fe-06fe-4d7b-8d0a-bbddfeef772c_fixed.java
index ef65dd9..508cba7 100644
--- a/tmp/9aa94f72-bcf2-4aa1-8e0a-1fc8621d7042_buggy.java
+++ b/tmp/18e2f3fe-06fe-4d7b-8d0a-bbddfeef772c_fixed.java
@@ -1,92 +1,106 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+    boolean hasNonStringChild = false;
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
+        hasNonStringChild = true;
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
     // one for each comma.
     foldedSize += arrayFoldedChildren.size() - 1;
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+        // If the result of the join is used as an operand for +,
+        // then the compiler will use String.valueOf(x) instead of
+        // String.valueOf(''.join(x)) because the former can be
+        // rewritten as x + '' which is smaller. Hence, we don't
+        // need to coerce the result if we have a non-string child.
+        if (!hasNonStringChild && !right.getString().isEmpty()) {
+          Node coercedThis = new Node(Token.EMPTY, arrayNode.cloneTree());
+          Node call = new Node(Token.CALL, Node.newString("String"), coercedThis);
+          Node replacement = new Node(Token.COMMA, call, n);
+          parent.replaceChild(n, replacement);
+          t.getCompiler().reportCodeChange();
+        }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
