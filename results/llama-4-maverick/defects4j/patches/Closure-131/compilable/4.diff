diff --git a/tmp/c1f6dc00-1f0a-400a-bb32-8ecf7e9245d8_buggy.java b/tmp/1258d628-70aa-46c2-b87d-4373b11de35b_fixed.java
index 19fe1b4..0245ea3 100644
--- a/tmp/c1f6dc00-1f0a-400a-bb32-8ecf7e9245d8_buggy.java
+++ b/tmp/1258d628-70aa-46c2-b87d-4373b11de35b_fixed.java
@@ -1,17 +1,43 @@
 public static boolean isJSIdentifier(String s) {
   int length = s.length();
 
   if (length == 0 ||
       !Character.isJavaIdentifierStart(s.charAt(0))) {
     return false;
   }
 
   for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+    if (!Character.isJavaIdentifierPart(s.charAt(i))) {
       return false;
     }
   }
 
+  // Check if the identifier is a valid JavaScript identifier
+  // According to ECMAScript 5.1 section 7.6, a valid identifier
+  // must not be a reserved word and must be a valid Unicode identifier.
+  // Here we only check if it's a reserved word.
+  if (isReservedWord(s)) {
+    return false;
+  }
+
   return true;
 }
+
+// Helper function to check if a string is a reserved word in JavaScript
+private static boolean isReservedWord(String s) {
+  // List of reserved words in JavaScript (ECMAScript 5.1 section 7.6.1)
+  String[] reservedWords = {
+    "break", "case", "catch", "continue", "debugger", "default", "delete",
+    "do", "else", "finally", "for", "function", "if", "in", "instanceof",
+    "new", "return", "switch", "this", "throw", "try", "typeof", "var",
+    "void", "while", "with"
+  };
+
+  for (String word : reservedWords) {
+    if (s.equals(word)) {
+      return true;
+    }
+  }
+
+  return false;
+}
\ No newline at end of file
