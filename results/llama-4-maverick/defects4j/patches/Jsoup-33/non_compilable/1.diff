diff --git a/tmp/159d987d-ebbd-4b1f-82bb-31a6286796aa_buggy.java b/tmp/c862d664-e4b2-4d7e-a8f3-3ce3d1e8f00f_fixed.java
index dc93be3..8721444 100644
--- a/tmp/159d987d-ebbd-4b1f-82bb-31a6286796aa_buggy.java
+++ b/tmp/c862d664-e4b2-4d7e-a8f3-3ce3d1e8f00f_fixed.java
@@ -1,14 +1,18 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        if (!el.tag().isKnownEmpty()) {
+            // If it's not a known empty element, add it to the stack. This will allow the parser to handle the case
+            // where the tag is self-closing but not known to be empty, and ensure that the end tag is generated.
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
