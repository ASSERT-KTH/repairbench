diff --git a/tmp/7b8a6336-ee4f-45cd-84b3-f84161708799_buggy.java b/tmp/0f276268-3a6d-45af-baf0-db9bf064c4b5_fixed.java
index dc93be3..19bd527 100644
--- a/tmp/7b8a6336-ee4f-45cd-84b3-f84161708799_buggy.java
+++ b/tmp/0f276268-3a6d-45af-baf0-db9bf064c4b5_fixed.java
@@ -1,14 +1,19 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        if (!el.tag().isKnownEmpty()) {
+            // for HTML, not XML; if a known tag (which will be autoclosed on next start tag) is self closed, emit an end tag
+            // so that <div /><div></div> parses as <div></div><div></div>. Known tags are treated as self-closing if
+            // the spec declares them empty, so won't reach here.
             stack.add(el);
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
