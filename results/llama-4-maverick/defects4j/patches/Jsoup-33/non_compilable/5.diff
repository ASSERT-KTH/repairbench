diff --git a/tmp/449d8068-e938-4365-a38c-6ab761265a7f_buggy.java b/tmp/4175b556-057f-45ed-95c3-c4d15ed53afa_fixed.java
index dc93be3..f31c2ae 100644
--- a/tmp/449d8068-e938-4365-a38c-6ab761265a7f_buggy.java
+++ b/tmp/4175b556-057f-45ed-95c3-c4d15ed53afa_fixed.java
@@ -1,14 +1,16 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    Tag tag = Tag.valueOf(startTag.name());
+    if (startTag.isSelfClosing() || tag.isKnownEmpty()) {
         Element el = insertEmpty(startTag);
-            stack.add(el);
+        stack.add(el); // if self-closing, stack not popped in this method; but that's ok because we just want to get out of the current state.
+        if (!tag.isSelfClosing())  // for non-self-closing known empty elements, emit a synthetic empty end tag.
             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
         return el;
     }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
