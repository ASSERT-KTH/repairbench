diff --git a/tmp/464003c5-a61c-4805-a567-655b267fb815_buggy.java b/tmp/1ea3a8b9-6a03-4e93-89ab-cb50b358bd3d_fixed.java
index e69de29..6728481 100644
--- a/tmp/464003c5-a61c-4805-a567-655b267fb815_buggy.java
+++ b/tmp/1ea3a8b9-6a03-4e93-89ab-cb50b358bd3d_fixed.java
@@ -0,0 +1,30 @@
+protected void _addFields(Class<?> type, List<BeanPropertyDefinition> props) {
+    // First, a bit of introspection for "known" JDK types
+    if (type.isInterface() || Modifier.isStatic(type.getModifiers())) {
+        /* 24-Feb-2014, tatu: Better skip static classes; for example,
+         *   JDK 1.8 adds "static" to Member classes of non-static classes
+         *   (see JDK-8033525)
+         */
+        return;
+    }
+    Class<?> parent = type.getSuperclass();
+    if (parent != null) { // should always be true, but let's be paranoid
+        // Let's start by adding superclass properties, if any, before this class' own
+        _addFields(parent, props);
+    }
+    // then add our own if any (and filtering out duplicates)
+    for (Field field : ClassUtil.getDeclaredFields(type)) {
+        // static fields are skipped, as well as ones that are marked transient or have annotation that indicates exclusion
+        int mods = field.getModifiers();
+        if (!Modifier.isStatic(mods)) {
+            if (Modifier.isTransient(mods)) { // transient is NOT to be ignored; it is a hard "don't include"
+                continue;
+            }
+            AnnotatedField af = _forField(field);
+            if (!_propertyFilter.hasProperty(af)) { 
+                continue;
+            }
+            props.add(af);
+        }
+    }
+}
\ No newline at end of file
