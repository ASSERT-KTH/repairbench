diff --git a/tmp/ac28a9ca-3323-4160-a4a3-3ae7504484f7_buggy.java b/tmp/f200a3f6-9da6-4850-97fb-583898626e9f_fixed.java
index 7d8d756..74a67b4 100644
--- a/tmp/ac28a9ca-3323-4160-a4a3-3ae7504484f7_buggy.java
+++ b/tmp/f200a3f6-9da6-4850-97fb-583898626e9f_fixed.java
@@ -1,48 +1,55 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
     // first, sanity checks
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
     }
     // should always get field name, but just in case...
     if (p.nextToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
     }
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
-
+    JsonToken t = p.nextToken();
+    // 26-Oct-2016, tatu: TODO! Verify/optimize handling here...
+    if (t == JsonToken.VALUE_NULL) {
+        return deser.getNullValue(ctxt);
+    }
+    if (t == JsonToken.START_OBJECT) {
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (_typeIdVisible) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
+            tb.writeRaw(p.getText(), 0, p.getTextLength()); // add property read so far
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
-            p.nextToken();
+        } else {
+            p = p.skipChildren();
+            t = p.getCurrentToken();
+        }
     }
-        
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
