diff --git a/tmp/36fd5020-19ca-4981-9f9b-eba4047fd374_buggy.java b/tmp/871ad4d7-dcbb-455a-bcab-e56699029486_fixed.java
index 7d8d756..a1032ee 100644
--- a/tmp/36fd5020-19ca-4981-9f9b-eba4047fd374_buggy.java
+++ b/tmp/871ad4d7-dcbb-455a-bcab-e56699029486_fixed.java
@@ -1,48 +1,69 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            // START_OBJECT is expected, but if not, let's check if we are in Object Id case
+            if (p.getCurrentToken() == JsonToken.FIELD_NAME && "_id".equals(p.getText())) {
+                p.nextToken(); // Value of "_id" field
+                return _deserializeWithObjectId(p, ctxt);
+            }
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
         // should always get field name, but just in case...
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
         
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
+
+    private Object _deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException {
+        // Handling for Object Id
+        Object value = ctxt.findObjectId(p.getText(), _objectIdReader);
+        if (value != null) {
+            return value;
+        }
+        // Advance to the next token (START_OBJECT or VALUE)
+        p.nextToken();
+        // If it is START_OBJECT, handle it normally
+        if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+            return _deserialize(p, ctxt);
+        }
+        // Otherwise, it's a simple value, return it
+        return ctxt.readValue(p, handledType());
+    }
\ No newline at end of file
