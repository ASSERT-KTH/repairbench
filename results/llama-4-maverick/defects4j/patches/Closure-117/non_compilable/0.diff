diff --git a/tmp/1a2ee8b2-bf87-4df6-a4af-b05e8c278ac6_buggy.java b/tmp/591b9981-e614-4cf7-a7e0-ff0f7a894ce0_fixed.java
index 39981f0..6452ad6 100644
--- a/tmp/1a2ee8b2-bf87-4df6-a4af-b05e8c278ac6_buggy.java
+++ b/tmp/591b9981-e614-4cf7-a7e0-ff0f7a894ce0_fixed.java
@@ -1,65 +1,81 @@
-  /**
-   * Given a node, get a human-readable name for the type of that node so
-   * that will be easy for the programmer to find the original declaration.
-   *
-   * For example, if SubFoo's property "bar" might have the human-readable
-   * name "Foo.prototype.bar".
-   *
-   * @param n The node.
-   * @param dereference If true, the type of the node will be dereferenced
-   *     to an Object type, if possible.
-   */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
           return objectType.toString() + "." + propName;
         }
       }
     }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
+      // If qualifiedName is a getprop, try to find the type of the object
+      // that it is getting the property from and see if it has a property
+      // with the same name.
+      Node parent = n.getParent();
+      if (parent != null && parent.isGetProp() && parent.getFirstChild() == n) {
+        Node propNode = parent.getLastChild();
+        if (propNode.isString()) {
+          String propName = propNode.getString();
+          ObjectType objectType = type.toObjectType();
+          if (objectType != null) {
+            ObjectType topDefiningType =
+                objectType.getTopDefiningInterface(propName);
+            if (topDefiningType == null) {
+              // classes
+              ObjectType foundType = objectType;
+              while (foundType != null && !foundType.hasOwnProperty(propName)) {
+                foundType = foundType.getImplicitPrototype();
+              }
+              if (foundType != null) {
+                return foundType.toString() + "." + propName;
+              }
+            } else {
+              return topDefiningType.toString() + "." + propName;
+            }
+          }
+        }
+      }
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
 }
\ No newline at end of file
