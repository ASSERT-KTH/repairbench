diff --git a/tmp/0a66678b-be2c-4ac4-8bcb-1c5e1bfdde90_buggy.java b/tmp/274a6bc0-ccaf-40fa-b384-9d5c9a897ea6_fixed.java
index dbadad4..cf39801 100644
--- a/tmp/0a66678b-be2c-4ac4-8bcb-1c5e1bfdde90_buggy.java
+++ b/tmp/274a6bc0-ccaf-40fa-b384-9d5c9a897ea6_fixed.java
@@ -1,50 +1,51 @@
     /**
      * Alternative to {@link #serializeAsField} that is used when a POJO
      * is serialized as JSON Array; the difference is that no field names
      * are written.
      * 
      * @since 2.1
      */
     public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov)
         throws Exception
     {
         Object value = get(bean);
         if (value == null) { // nulls need specialized handling
             if (_nullSerializer != null) {
                 _nullSerializer.serialize(null, jgen, prov);
-            } else { // can NOT suppress entries in tabular output
+            } else {
                 jgen.writeNull();
             }
-        }
+        } else {
             // otherwise find serializer to use
             JsonSerializer<Object> ser = _serializer;
             if (ser == null) {
                 Class<?> cls = value.getClass();
                 PropertySerializerMap map = _dynamicSerializers;
                 ser = map.serializerFor(cls);
                 if (ser == null) {
                     ser = _findAndAddDynamic(map, cls, prov);
                 }
             }
             // and then see if we must suppress certain values (default, empty)
             if (_suppressableValue != null) {
                 if (MARKER_FOR_EMPTY == _suppressableValue) {
-                if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output
+                    if (ser.isEmpty(value)) { 
                         serializeAsPlaceholder(bean, jgen, prov);
                         return;
                     }
-            } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output
+                } else if (_suppressableValue.equals(value)) { 
                     serializeAsPlaceholder(bean, jgen, prov);
                     return;
                 }
             }
             // For non-nulls: simple check for direct cycles
             if (value == bean) {
                 _handleSelfReference(bean, ser);
             }
             if (_typeSerializer == null) {
                 ser.serialize(value, jgen, prov);
             } else {
                 ser.serializeWithType(value, jgen, prov, _typeSerializer);
             }
         }
+    }
\ No newline at end of file
