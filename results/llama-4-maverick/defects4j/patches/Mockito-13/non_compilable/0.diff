diff --git a/tmp/8d2756e6-48d1-4742-9c62-7059707fbb11_buggy.java b/tmp/f6f67f23-d5dc-4e90-a8f8-9c4c156f6eb8_fixed.java
index 5481b94..5464766 100644
--- a/tmp/8d2756e6-48d1-4742-9c62-7059707fbb11_buggy.java
+++ b/tmp/f6f67f23-d5dc-4e90-a8f8-9c4c156f6eb8_fixed.java
@@ -1,49 +1,55 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                         .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
     InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
                     invocation);
 
     mockingProgress.validateState();
 
     //if verificationMode is not null then someone is doing verify()        
     if (verificationMode != null) {
         //We need to check if verification was started on the correct mock 
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
         if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
-                VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
+            VerificationDataImpl data = createVerificationData(invocationContainerImpl, invocationMatcher);            
             verificationMode.verify(data);
             return null;
             // this means there is an invocation on a different mock. Re-adding verification mode 
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+        } else {
+            mockingProgress.putVerificationMode(verificationMode);
         }
     }
     
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
         // mocks / spies.
         // Without it, the real method inside 'when' might have delegated
         // to other self method and overwrite the intended stubbed method
         // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
+
+private VerificationDataImpl createVerificationData(InvocationContainerImpl invocationContainerImpl, InvocationMatcher invocationMatcher) {
+    return new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
+}
\ No newline at end of file
