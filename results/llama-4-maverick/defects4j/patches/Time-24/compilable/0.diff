diff --git a/tmp/6cab66d3-9304-471b-acc1-520c9579ac86_buggy.java b/tmp/c9134fbf-f4fe-40f5-b647-1f658ad96c2a_fixed.java
index 99d6a44..9586006 100644
--- a/tmp/6cab66d3-9304-471b-acc1-520c9579ac86_buggy.java
+++ b/tmp/c9134fbf-f4fe-40f5-b647-1f658ad96c2a_fixed.java
@@ -1,58 +1,110 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
+        if (count > 0 && isWeekOrWeekDay(count, savedFields)) {
+            if (count > 1) {
+                // if there are any other fields, except weekyear & week or weekday,
+                // recompute after saving them (JODA-629)
+                int weeky = -1, week = -1, day = -1;
+                for (int i = 0; i < count; i++) {
+                    if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekyear())) {
+                        weeky = i;
+                    } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.weekOfWeekyear())) {
+                        week = i;
+                    } else if (savedFields[i].iField.getType().equals(DateTimeFieldType.dayOfWeek())) {
+                        day = i;
+                    }
+                }
+                if (weeky != -1) {
+                    if (week != -1) {
+                        // keep weekyear and week, and set them later,
+                        // so that other fields (i.e. month, day) are not ignored (JODA-524)
+                        long instant = iMillis;
+                        for (int i = 0; i < count; i++) {
+                            if (i != weeky && i != week) {
+                                instant = savedFields[i].set(instant, resetFields);
+                            }
+                        }
+                        long weekyear = savedFields[weeky].iField.set(instant, savedFields[weeky].iValue);
+                        long weekOfWeekyear = savedFields[week].iField.set(weekyear, savedFields[week].iValue);
+                        return weekOfWeekyear;
+                    } else if (day != -1) {
+                        long instant = iMillis;
+                        for (int i = 0; i < count; i++) {
+                            if (i != weeky && i != day) {
+                                instant = savedFields[i].set(instant, resetFields);
+                            }
+                        }
+                        long weekyear = savedFields[weeky].iField.set(instant, savedFields[weeky].iValue);
+                        long dayOfWeek = savedFields[day].iField.set(weekyear, savedFields[day].iValue);
+                        return dayOfWeek;
+                    }
+                }
+            }
+        }
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
+
+    private boolean isWeekOrWeekDay(int count, SavedField[] savedFields) {
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType type = savedFields[i].iField.getType();
+            if (type.equals(DateTimeFieldType.weekyear()) || type.equals(DateTimeFieldType.weekOfWeekyear()) || type.equals(DateTimeFieldType.dayOfWeek())) {
+                continue;
+            }
+            return false;
+        }
+        return true;
+    }
\ No newline at end of file
