diff --git a/tmp/e8e613a6-cf9b-45b7-9e42-a1cd31e69588_buggy.java b/tmp/30d68c4e-6dd3-45b9-a791-8dcec6250089_fixed.java
index 99d6a44..5899341 100644
--- a/tmp/e8e613a6-cf9b-45b7-9e42-a1cd31e69588_buggy.java
+++ b/tmp/30d68c4e-6dd3-45b9-a791-8dcec6250089_fixed.java
@@ -1,58 +1,77 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
+            // add the following codes to fix the bug
+            DurationField firstFieldType = savedFields[0].iField.getDurationField();
+            int range = savedFields[0].iField.getMaximumValue();
+            if (count >= 2 && firstFieldType == DurationFieldType.weeks() && 
+                (savedFields[1].iField.getDurationField() == DurationFieldType.years() || 
+                 savedFields[1].iField.getDurationField() == DurationFieldType.weekyears())) {
+                long weekMillis = savedFields[0].iField.set(iMillis, 1);
+                long firstWeek = iChrono.weekOfWeekyear().roundFloor(weekMillis);
+                long millis = savedFields[1].set(firstWeek, resetFields);
+                if (millis != weekMillis) {
+                    // adjust week value if it is out of range
+                    int weekOfWeekyear = iChrono.weekOfWeekyear().get(weekMillis);
+                    int weekOfWeekyear1 = iChrono.weekOfWeekyear().get(millis);
+                    if (Math.abs(weekOfWeekyear1 - weekOfWeekyear) >= range / 2) {
+                        millis = weekMillis;
+                    }
+                }
+                return millis;
+            }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
