diff --git a/tmp/3601c81a-e162-484e-b465-5f6ebd362b75_buggy.java b/tmp/48c962be-d487-4a0f-b0ae-4329d8f9b329_fixed.java
index 99d6a44..e296856 100644
--- a/tmp/3601c81a-e162-484e-b465-5f6ebd362b75_buggy.java
+++ b/tmp/48c962be-d487-4a0f-b0ae-4329d8f9b329_fixed.java
@@ -1,58 +1,77 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+        if (count > 0 && isWeekyearMonthOrWeek(savedFields, count)) {
+            // if first field is weekyear, month or week, re-order so that weekyear is first
+            int firstWeekDateTimeFieldType = getFirstWeekDateTimeFieldType(savedFields, count);
+            if (firstWeekDateTimeFieldType != DateTimeFieldType.weekyear() &&
+                firstWeekDateTimeFieldType != DateTimeFieldType.monthOfYear() &&
+                firstWeekDateTimeFieldType != DateTimeFieldType.weekOfWeekyear()) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
+            }
             return computeMillis(resetFields, text);
         }
-        }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
+
+    private boolean isWeekyearMonthOrWeek(SavedField[] savedFields, int count) {
+        DateTimeFieldType firstFieldType = savedFields[0].iField.getType();
+        return firstFieldType == DateTimeFieldType.weekyear() ||
+               firstFieldType == DateTimeFieldType.monthOfYear() ||
+               firstFieldType == DateTimeFieldType.weekOfWeekyear();
+    }
+
+    private DateTimeFieldType getFirstWeekDateTimeFieldType(SavedField[] savedFields, int count) {
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType == DateTimeFieldType.weekyear() ||
+                fieldType == DateTimeFieldType.monthOfYear() ||
+                fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                return fieldType;
+            }
+        }
+        return null;
+    }
\ No newline at end of file
