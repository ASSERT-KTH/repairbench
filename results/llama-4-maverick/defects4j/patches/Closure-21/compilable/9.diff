diff --git a/tmp/92aead8a-32ec-4e5b-b002-1d547da6251a_buggy.java b/tmp/af008878-512d-41b4-8891-4967c8635ae5_fixed.java
index 49a5702..200a005 100644
--- a/tmp/92aead8a-32ec-4e5b-b002-1d547da6251a_buggy.java
+++ b/tmp/af008878-512d-41b4-8891-4967c8635ae5_fixed.java
@@ -1,66 +1,78 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
         if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
         else break;
       }
+    } else if (!n.hasChildren() && !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+      // Comma operator is left associative, so anything but the last child is used.
+      String msg = "This code lacks side-effects. Is there a bug?";
+      if (n.isString()) {
+        msg = "Is there a missing '+' on the previous line?";
+      } else if (isSimpleOp) {
+        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
+            "' operator is not being used.";
+      }
+
+      t.getCompiler().report(
+          t.makeError(n, level, USELESS_CODE_ERROR, msg));
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
     if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
   if (
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
