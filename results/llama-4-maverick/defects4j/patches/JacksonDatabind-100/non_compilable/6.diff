diff --git a/tmp/9f8db9a7-8410-4342-a99c-3f1f0f7f3317_buggy.java b/tmp/5d589c18-0cd7-4c90-933a-efb011ee96ad_fixed.java
index fc8c302..05874eb 100644
--- a/tmp/9f8db9a7-8410-4342-a99c-3f1f0f7f3317_buggy.java
+++ b/tmp/5d589c18-0cd7-4c90-933a-efb011ee96ad_fixed.java
@@ -1,23 +1,35 @@
 @Override
 public byte[] getBinaryValue(Base64Variant b64variant)
     throws IOException, JsonParseException
 {
     // Multiple possibilities...
     JsonNode n = currentNode();
     if (n != null) {
         // [databind#2096]: although `binaryValue()` works for real binary node
         // and embedded "POJO" node, coercion from TextNode may require variant, so:
+        if (n.isTextual()) {
+            String str = n.asText();
+            try {
+                return n.getBinaryValue(b64variant);
+            } catch (IllegalArgumentException e) {
+                // 22-May-2019, tatu: Not ideal, but seems like we have to go with "JDK's exception
+                //    clumsiness" here is jackson-databind-2.9. Until (and if) jackson-core gets
+                //    changed to throw different type (Jackson 3?) this is pretty much it.
+                throw JsonParseException.from(this,
+                        "Cannot access contents of TextNode as binary due to broken Base64 encoding: "+e.getMessage());
+            }
+        }
         byte[] data = n.binaryValue();
         if (data != null) {
             return data;
         }
         if (n.isPojo()) {
             Object ob = ((POJONode) n).getPojo();
             if (ob instanceof byte[]) {
                 return (byte[]) ob;
             }
         }
     }
     // otherwise return null to mark we have no binary content
     return null;
 }
\ No newline at end of file
