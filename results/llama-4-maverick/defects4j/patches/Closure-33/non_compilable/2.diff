diff --git a/tmp/c3081beb-eda1-40a7-8d98-1b6df820c6c3_buggy.java b/tmp/4aee88dc-b603-4c35-a2d3-29298474bdbd_fixed.java
index fb2b020..b5fb561 100644
--- a/tmp/c3081beb-eda1-40a7-8d98-1b6df820c6c3_buggy.java
+++ b/tmp/4aee88dc-b603-4c35-a2d3-29298474bdbd_fixed.java
@@ -1,27 +1,33 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // If the property is not explicitly defined in the object literal,
+          // we want to check if it's a property that can be undefined.
+          // If so, we should not infer it as a required property.
+          if (propType.isUnionType() && propType.toMaybeUnionType().hasNullOrUndefined()) {
+            typeToInfer = propType;
+          } else {
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
+          }
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
