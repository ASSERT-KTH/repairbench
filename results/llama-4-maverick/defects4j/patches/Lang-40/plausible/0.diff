diff --git a/tmp/5501d447-1988-4d3e-a7c3-b8b7b0e6cceb_buggy.java b/tmp/7e7fc79a-5e2d-471f-b36d-cad28d9f6f90_fixed.java
index 562001a..dd93d84 100644
--- a/tmp/5501d447-1988-4d3e-a7c3-b8b7b0e6cceb_buggy.java
+++ b/tmp/7e7fc79a-5e2d-471f-b36d-cad28d9f6f90_fixed.java
@@ -1,29 +1,37 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
 public static boolean containsIgnoreCase(String str, String searchStr) {
     if (str == null || searchStr == null) {
         return false;
     }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+    int len = searchStr.length();
+    int max = str.length() - len;
+    for (int i = 0; i <= max; i++) {
+        if (regionMatches(str, i, searchStr, 0, len, true)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private static boolean regionMatches(String text, int textStart, String pattern, int patternStart, int length, boolean ignoreCase) {
+    if (!ignoreCase) {
+        return text.regionMatches(textStart, pattern, patternStart, length);
+    }
+    int textEnd = textStart + length;
+    int patternEnd = patternStart + length;
+    for (int i = textStart, j = patternStart; i < textEnd && j < patternEnd; i++, j++) {
+        char c1 = text.charAt(i);
+        char c2 = pattern.charAt(j);
+        if (c1 != c2) {
+            c1 = Character.toUpperCase(c1);
+            c2 = Character.toUpperCase(c2);
+            if (c1 != c2) {
+                c1 = Character.toLowerCase(c1);
+                c2 = Character.toLowerCase(c2);
+                if (c1 != c2) {
+                    return false;
+                }
+            }
+        }
+    }
+    return true;
 }
\ No newline at end of file
