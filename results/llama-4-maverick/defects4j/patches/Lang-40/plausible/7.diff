diff --git a/tmp/b6a68f70-8c13-4552-be8a-e3616c2681c1_buggy.java b/tmp/e641f434-efb5-470e-b7c1-5087d78214c0_fixed.java
index 562001a..ea1077e 100644
--- a/tmp/b6a68f70-8c13-4552-be8a-e3616c2681c1_buggy.java
+++ b/tmp/e641f434-efb5-470e-b7c1-5087d78214c0_fixed.java
@@ -1,29 +1,25 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
 public static boolean containsIgnoreCase(String str, String searchStr) {
     if (str == null || searchStr == null) {
         return false;
     }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+    int len = searchStr.length();
+    int max = str.length() - len;
+    for (int i = 0; i <= max; i++) {
+        if (regionMatches(str, i, searchStr, 0, len, true)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private static boolean regionMatches(String text, int textStart, String other, int otherStart, int numChars, boolean ignoreCase) {
+    if (textStart < 0 || otherStart < 0 || textStart + numChars > text.length() || otherStart + numChars > other.length()) {
+        return false;
+    }
+    String a = text.substring(textStart, textStart + numChars);
+    String b = other.substring(otherStart, otherStart + numChars);
+    if (ignoreCase) {
+        return a.equalsIgnoreCase(b);
+    }
+    return a.equals(b);
 }
\ No newline at end of file
