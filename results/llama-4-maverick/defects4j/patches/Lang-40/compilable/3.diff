diff --git a/tmp/8a5415b0-d6a9-40f3-b86f-abfac171e2c6_buggy.java b/tmp/a132a6e4-fc48-4974-ba82-cb498df3d59f_fixed.java
index 562001a..ab1c36c 100644
--- a/tmp/8a5415b0-d6a9-40f3-b86f-abfac171e2c6_buggy.java
+++ b/tmp/a132a6e4-fc48-4974-ba82-cb498df3d59f_fixed.java
@@ -1,29 +1,39 @@
-    /**
-     * <p>Checks if String contains a search String irrespective of case,
-     * handling <code>null</code>. Case-insensitivity is defined as by
-     * {@link String#equalsIgnoreCase(String)}.
-     *
-     * <p>A <code>null</code> String will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.contains(null, *) = false
-     * StringUtils.contains(*, null) = false
-     * StringUtils.contains("", "") = true
-     * StringUtils.contains("abc", "") = true
-     * StringUtils.contains("abc", "a") = true
-     * StringUtils.contains("abc", "z") = false
-     * StringUtils.contains("abc", "A") = true
-     * StringUtils.contains("abc", "Z") = false
-     * </pre>
-     *
-     * @param str  the String to check, may be null
-     * @param searchStr  the String to find, may be null
-     * @return true if the String contains the search String irrespective of
-     * case or false if not or <code>null</code> string input
-     */
 public static boolean containsIgnoreCase(String str, String searchStr) {
     if (str == null || searchStr == null) {
         return false;
     }
-        return contains(str.toUpperCase(), searchStr.toUpperCase());
+    int len = searchStr.length();
+    int max = str.length() - len;
+    for (int i = 0; i <= max; i++) {
+        if (regionMatches(str, i, searchStr, 0, len, true)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private static boolean regionMatches(String str, int strStart, String substr, int subStart, int subLen, boolean ignoreCase) {
+    if (str == null || substr == null) {
+        throw new NullPointerException();
+    }
+    if (strStart < 0 || subStart < 0 || subStart + subLen > substr.length() || strStart + subLen > str.length()) {
+        return false;
+    }
+    if (!ignoreCase) {
+        return str.regionMatches(strStart, substr, subStart, subLen);
+    }
+    for (int i = 0; i < subLen; i++) {
+        char c1 = str.charAt(strStart + i);
+        char c2 = substr.charAt(subStart + i);
+        if (c1 == c2) {
+            continue;
+        }
+        if (Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
+            return false;
+        }
+        if (Character.toLowerCase(c1) != Character.toLowerCase(c2)) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
