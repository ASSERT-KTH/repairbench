diff --git a/tmp/5fd69d94-f832-440c-b523-a650855a10c9_buggy.java b/tmp/c6bb814f-0545-4d7d-981b-e0064c7eb519_fixed.java
index 6f24eb6..2b5cb27 100644
--- a/tmp/5fd69d94-f832-440c-b523-a650855a10c9_buggy.java
+++ b/tmp/c6bb814f-0545-4d7d-981b-e0064c7eb519_fixed.java
@@ -1,99 +1,119 @@
   /**
    * Determines whether the given property is visible in the current context.
    * @param t The current traversal.
    * @param getprop The getprop node.
    */
   private void checkPropertyVisibility(NodeTraversal t,
       Node getprop, Node parent) {
     ObjectType objectType =
         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
     String propertyName = getprop.getLastChild().getString();
 
     if (objectType != null) {
       // Is this a normal property access, or are we trying to override
       // an existing property?
       boolean isOverride = t.inGlobalScope() &&
           parent.getType() == Token.ASSIGN &&
           parent.getFirstChild() == getprop;
 
       // Find the lowest property defined on a class with visibility
       // information.
       if (isOverride) {
         objectType = objectType.getImplicitPrototype();
       }
       JSDocInfo docInfo = null;
       for (; objectType != null;
            objectType = objectType.getImplicitPrototype()) {
         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);
         if (docInfo != null &&
             docInfo.getVisibility() != Visibility.INHERITED) {
           break;
         }
       }
 
       if (objectType == null) {
         // We couldn't find a visibility modifier; assume it's public.
         return;
       }
 
       boolean sameInput =
           t.getInput().getName().equals(docInfo.getSourceName());
       Visibility visibility = docInfo.getVisibility();
       JSType ownerType = normalizeClassType(objectType);
       if (isOverride) {
         // Check an ASSIGN statement that's trying to override a property
         // on a superclass.
         JSDocInfo overridingInfo = parent.getJSDocInfo();
         Visibility overridingVisibility = overridingInfo == null ?
             Visibility.INHERITED : overridingInfo.getVisibility();
 
         // Check that (a) the property *can* be overridden, and
         // (b) that the visibility of the override is the same as the
         // visibility of the original property.
         if (visibility == Visibility.PRIVATE && !sameInput) {
           compiler.report(
               t.makeError(getprop, PRIVATE_OVERRIDE,
                   objectType.toString()));
         } else if (overridingVisibility != Visibility.INHERITED &&
             overridingVisibility != visibility) {
           compiler.report(
               t.makeError(getprop, VISIBILITY_MISMATCH,
                   visibility.name(), objectType.toString(),
                   overridingVisibility.name()));
         }
       } else {
         if (sameInput) {
           // private access is always allowed in the same file.
           return;
         } else if (visibility == Visibility.PRIVATE &&
             (currentClass == null || ownerType.differsFrom(currentClass))) {
           if (docInfo.isConstructor() &&
               isValidPrivateConstructorAccess(parent)) {
             return;
           }
 
-          // private access is not allowed outside the file from a different
-          // enclosing class.
+          // Check if the property is declared in any of our superclass
+          // and if it is private, report an error.
+          JSType maybeSuperClass = currentClass;
+          while (maybeSuperClass != null) {
+            ObjectType superClass = maybeSuperClass.getImplicitPrototype();
+            JSDocInfo superClassDocInfo =
+                superClass.getOwnPropertyJSDocInfo(propertyName);
+            if (superClassDocInfo != null &&
+                superClassDocInfo.getVisibility() == Visibility.PRIVATE &&
+                superClass.getSourceFileName().equals(docInfo.getSourceName())) {
               compiler.report(
                   t.makeError(getprop,
                       BAD_PRIVATE_PROPERTY_ACCESS,
                       propertyName,
                       validator.getReadableJSTypeName(
                           getprop.getFirstChild(), true)));
+              break;
+            }
+            maybeSuperClass = superClass.getConstructor().getSuperClass();
+          }
+          if (maybeSuperClass == null) {
+            compiler.report(
+                t.makeError(getprop,
+                    BAD_PRIVATE_PROPERTY_ACCESS,
+                    propertyName,
+                    validator.getReadableJSTypeName(
+                        getprop.getFirstChild(), true)));
+          }
         } else if (visibility == Visibility.PROTECTED) {
           // There are 3 types of legal accesses of a protected property:
           // 1) Accesses in the same file
           // 2) Overriding the property in a subclass
           // 3) Accessing the property from inside a subclass
           // The first two have already been checked for.
           if (currentClass == null || !currentClass.isSubtype(ownerType)) {
             compiler.report(
                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,
                     propertyName,
                     validator.getReadableJSTypeName(
                         getprop.getFirstChild(), true)));
           }
         }
       }
     }
   }
\ No newline at end of file
