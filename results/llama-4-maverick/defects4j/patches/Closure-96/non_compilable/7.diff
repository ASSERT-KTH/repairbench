diff --git a/tmp/c6dbbfad-91e2-4958-a90b-53d74a606b26_buggy.java b/tmp/66d684a8-85c4-49fb-91a8-b5eb7a938854_fixed.java
index e0ecec8..2701fc9 100644
--- a/tmp/c6dbbfad-91e2-4958-a90b-53d74a606b26_buggy.java
+++ b/tmp/66d684a8-85c4-49fb-91a8-b5eb7a938854_fixed.java
@@ -1,35 +1,40 @@
   /**
    * Visits the parameters of a CALL or a NEW node.
    */
   private void visitParameterList(NodeTraversal t, Node call,
       FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
     while (arguments.hasNext() &&
            parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
       parameter = parameters.next();
       argument = arguments.next();
       ordinal++;
 
+      // Validate the argument type.
+      if (!parameter.isVarArgs()) {
         validator.expectArgumentMatchesParameter(t, argument,
             getJSType(argument), getJSType(parameter), call, ordinal);
+      } else {
+        validator.expectArgumentMatchesParameter(t, argument,
+            getJSType(argument), getJSType(parameter).getType(),
+            call, ordinal);
+      }
     }
 
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
     if (minArgs > numArgs || maxArgs < numArgs) {
       report(t, call, WRONG_ARGUMENT_COUNT,
               validator.getReadableJSTypeName(call.getFirstChild(), false),
               String.valueOf(numArgs), String.valueOf(minArgs),
               maxArgs != Integer.MAX_VALUE ?
               " and no more than " + maxArgs + " argument(s)" : "");
     }
   }
\ No newline at end of file
