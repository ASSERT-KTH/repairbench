diff --git a/tmp/a21fbf03-02ab-4f33-92b8-d5d74d2de671_buggy.java b/tmp/74e0bf4c-381e-44ed-b619-d9ee66420f20_fixed.java
index 711e87d..479b6ae 100644
--- a/tmp/a21fbf03-02ab-4f33-92b8-d5d74d2de671_buggy.java
+++ b/tmp/74e0bf4c-381e-44ed-b619-d9ee66420f20_fixed.java
@@ -1,38 +1,50 @@
 private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
     /*
      * The following headers are defined for Pax.
      * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
      * mtime
      * comment
      * gid, gname
      * linkpath
      * size
      * uid,uname
      * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
      */
     for (Entry<String, String> ent : headers.entrySet()){
         String key = ent.getKey();
         String val = ent.getValue();
         if ("path".equals(key)){
             currEntry.setName(val);
         } else if ("linkpath".equals(key)){
             currEntry.setLinkName(val);
         } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+            currEntry.setGroupId(parseLongOrUnsignedInt(val));
         } else if ("gname".equals(key)){
             currEntry.setGroupName(val);
         } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+            currEntry.setUserId(parseLongOrUnsignedInt(val));
         } else if ("uname".equals(key)){
             currEntry.setUserName(val);
         } else if ("size".equals(key)){
             currEntry.setSize(Long.parseLong(val));
         } else if ("mtime".equals(key)){
             currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
         } else if ("SCHILY.devminor".equals(key)){
             currEntry.setDevMinor(Integer.parseInt(val));
         } else if ("SCHILY.devmajor".equals(key)){
             currEntry.setDevMajor(Integer.parseInt(val));
         }
     }
 }
+
+private int parseLongOrUnsignedInt(String val) {
+    try {
+        return Integer.parseInt(val);
+    } catch (NumberFormatException e) {
+        long result = Long.parseLong(val);
+        if (result < 0 || result > 0xffffffffL) {
+            throw new NumberFormatException("Value \"" + val + "\" is too big for integer");
+        }
+        return (int) result;
+    }
+}
\ No newline at end of file
