diff --git a/tmp/af4a0cae-fa28-4fad-b233-05af00c66bb6_buggy.java b/tmp/c407eea4-a1d2-4aa3-b501-d6cc2a285438_fixed.java
index 711e87d..e6f74bd 100644
--- a/tmp/af4a0cae-fa28-4fad-b233-05af00c66bb6_buggy.java
+++ b/tmp/c407eea4-a1d2-4aa3-b501-d6cc2a285438_fixed.java
@@ -1,38 +1,50 @@
 private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) {
     /*
      * The following headers are defined for Pax.
      * atime, ctime, charset: cannot use these without changing TarArchiveEntry fields
      * mtime
      * comment
      * gid, gname
      * linkpath
      * size
      * uid,uname
      * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those
      */
     for (Entry<String, String> ent : headers.entrySet()){
         String key = ent.getKey();
         String val = ent.getValue();
         if ("path".equals(key)){
             currEntry.setName(val);
         } else if ("linkpath".equals(key)){
             currEntry.setLinkName(val);
         } else if ("gid".equals(key)){
-                currEntry.setGroupId(Integer.parseInt(val));
+            currEntry.setGroupId(parsePaxNumber(val, "gid"));
         } else if ("gname".equals(key)){
             currEntry.setGroupName(val);
         } else if ("uid".equals(key)){
-                currEntry.setUserId(Integer.parseInt(val));
+            currEntry.setUserId(parsePaxNumber(val, "uid"));
         } else if ("uname".equals(key)){
             currEntry.setUserName(val);
         } else if ("size".equals(key)){
             currEntry.setSize(Long.parseLong(val));
         } else if ("mtime".equals(key)){
             currEntry.setModTime((long) (Double.parseDouble(val) * 1000));
         } else if ("SCHILY.devminor".equals(key)){
-                currEntry.setDevMinor(Integer.parseInt(val));
+            currEntry.setDevMinor(parsePaxNumber(val, "SCHILY.devminor"));
         } else if ("SCHILY.devmajor".equals(key)){
-                currEntry.setDevMajor(Integer.parseInt(val));
+            currEntry.setDevMajor(parsePaxNumber(val, "SCHILY.devmajor"));
         }
     }
 }
+
+private int parsePaxNumber(String val, String field) {
+    try {
+        return Integer.parseInt(val);
+    } catch (NumberFormatException ex) {
+        long l = Long.parseLong(val);
+        if (l > Integer.MAX_VALUE || l < Integer.MIN_VALUE) {
+            throw new IllegalArgumentException("Pax " + field + " value " + l + " is out of range");
+        }
+        return (int) l;
+    }
+}
\ No newline at end of file
