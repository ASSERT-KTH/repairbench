diff --git a/tmp/7e3a46c3-f9f2-463f-b398-c8b3380b916d_buggy.java b/tmp/06f31374-016b-4dfd-889c-c143ed3a996a_fixed.java
index b36b2a9..23a283f 100644
--- a/tmp/7e3a46c3-f9f2-463f-b398-c8b3380b916d_buggy.java
+++ b/tmp/06f31374-016b-4dfd-889c-c143ed3a996a_fixed.java
@@ -1,26 +1,31 @@
   JSType meet(JSType that) {
     UnionTypeBuilder builder = new UnionTypeBuilder(registry);
     for (JSType alternate : alternates) {
       if (alternate.isSubtype(that)) {
         builder.addAlternate(alternate);
       }
     }
 
     if (that instanceof UnionType) {
       for (JSType otherAlternate : ((UnionType) that).alternates) {
         if (otherAlternate.isSubtype(this)) {
           builder.addAlternate(otherAlternate);
         }
       }
     } else if (that.isSubtype(this)) {
       builder.addAlternate(that);
     }
     JSType result = builder.build();
     if (result != null) {
       return result;
     } else if (this.isObject() && that.isObject()) {
       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
+    } else if (this.isAllType() || that.isAllType()) {
+      // If either type is a supertype of all types, then we need to
+      // return the other type in case it contains a type that the
+      // other contains a type that is a subtype of the other.
+      return this.isAllType() ? that : this;
     } else {
       return getNativeType(JSTypeNative.NO_TYPE);
     }
   }
\ No newline at end of file
