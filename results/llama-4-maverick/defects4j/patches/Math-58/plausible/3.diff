diff --git a/tmp/0c229387-beac-49a3-968f-4424891d1867_buggy.java b/tmp/c7e97497-7369-45b7-a3cc-e13050d8b99b_fixed.java
index 3002587..b5b193d 100644
--- a/tmp/0c229387-beac-49a3-968f-4424891d1867_buggy.java
+++ b/tmp/c7e97497-7369-45b7-a3cc-e13050d8b99b_fixed.java
@@ -1,10 +1,37 @@
     /**
      * Fits a Gaussian function to the observed points.
      *
      * @return the parameters of the Gaussian function that best fits the
      * observed points (in the same order as above).
      */
     public double[] fit() {
         final double[] guess = (new ParameterGuesser(getObservations())).guess();
-        return fit(new Gaussian.Parametric(), guess);
+        Gaussian.Parametric f = new Gaussian.Parametric() {
+            @Override
+            public double value(double x, double[] p) {
+                try {
+                    return super.value(x, p);
+                } catch (NotStrictlyPositiveException e) {
+                    // Catch the exception and return a very large value to 
+                    // indicate that the current parameters are not good.
+                    return Double.POSITIVE_INFINITY;
+                }
+            }
+
+            @Override
+            public double[] gradient(double x, double[] p) {
+                try {
+                    return super.gradient(x, p);
+                } catch (NotStrictlyPositiveException e) {
+                    // Catch the exception and return a very large value to 
+                    // indicate that the current parameters are not good.
+                    double[] g = new double[3];
+                    g[0] = Double.POSITIVE_INFINITY;
+                    g[1] = Double.POSITIVE_INFINITY;
+                    g[2] = Double.POSITIVE_INFINITY;
+                    return g;
+                }
+            }
+        };
+        return fit(f, guess);
     }
\ No newline at end of file
