diff --git a/tmp/e99f1c07-913b-4d4d-9dc5-a598126c32f0_buggy.java b/tmp/c678e685-e6bb-4705-867f-63d271b3a02f_fixed.java
index 658036e..f42d001 100644
--- a/tmp/e99f1c07-913b-4d4d-9dc5-a598126c32f0_buggy.java
+++ b/tmp/c678e685-e6bb-4705-867f-63d271b3a02f_fixed.java
@@ -1,29 +1,34 @@
 // off-lined to keep main method lean and mean...
 @SuppressWarnings("resource")
 protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
         TokenBuffer tb) throws IOException
 {
     // As per [JACKSON-614], may have default implementation to use
     JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
     if (deser != null) {
         if (tb != null) {
             tb.writeEndObject();
             p = tb.asParser(p);
             // must move to point to the first token:
             p.nextToken();
         }
         return deser.deserialize(p, ctxt);
     }
     // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
     Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
     if (result != null) {
         return result;
     }
     // or, something for which "as-property" won't work, changed into "wrapper-array" type:
     if (p.getCurrentToken() == JsonToken.START_ARRAY) {
         return super.deserializeTypedFromAny(p, ctxt);
     }
+    // [databind#1533]: allow empty String (similar to `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT`)
+    if (p.getCurrentToken() == JsonToken.VALUE_STRING && p.getText().isEmpty() &&
+            ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
+        return null;
+    }
     ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
             "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
     return null;
 }
\ No newline at end of file
