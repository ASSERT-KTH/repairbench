diff --git a/tmp/d1ccb715-4909-4729-9db5-135cb2108345_buggy.java b/tmp/97bfe67c-ba86-43d2-b44a-822c530b3372_fixed.java
index 8e93a5e..4c12354 100644
--- a/tmp/d1ccb715-4909-4729-9db5-135cb2108345_buggy.java
+++ b/tmp/97bfe67c-ba86-43d2-b44a-822c530b3372_fixed.java
@@ -1,43 +1,61 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    int pos;
+    int newLinePos = text.indexOf(defaultNewLine);
+    if (newLinePos != -1 && newLineTabStop == 0) 
+    {
+        pos = newLinePos;
+    }
+    else 
+    {
+        pos = findWrapPos(text, width, 0);
+    }
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        if (newLinePos != -1 && pos == newLinePos) 
+        {
+            text = text.substring(newLinePos + defaultNewLine.length());
+            newLinePos = text.indexOf(defaultNewLine);
+            pos = newLinePos;
+        }
+        else 
+        {
+            text = text.substring(pos);
+            pos = findWrapPos(text, width - nextLineTabStop, nextLineTabStop);
+        }
 
         if (pos == -1)
         {
-                sb.append(text);
+            if (nextLineTabStop > 0 && text.trim().length() > 0)
+            {
+                sb.append(padding);
+            }
+            sb.append(rtrim(text));
 
             return sb;
         }
 
+        if (newLinePos != -1 && pos == newLinePos) 
+        {
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
+        else 
+        {
+            sb.append(rtrim(padding + text.substring(0, pos))).append(defaultNewLine);
+        }
+    }
 }
\ No newline at end of file
