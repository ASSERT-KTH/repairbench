diff --git a/tmp/c20d7822-bbf9-48ce-bc57-1e023a8b4961_buggy.java b/tmp/c7b84407-6d19-498c-b239-cbcaef88d135_fixed.java
index 8e93a5e..ca59fb8 100644
--- a/tmp/c20d7822-bbf9-48ce-bc57-1e023a8b4961_buggy.java
+++ b/tmp/c7b84407-6d19-498c-b239-cbcaef88d135_fixed.java
@@ -1,43 +1,64 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    int pos;
+    int len = text.length();
+
+    // Handle the special case of a text with only one newline and nothing else.
+    if ((len == (defaultNewLine.length() + 1)) && text.equals(defaultNewLine))
+    {
+        sb.append(text);
+
+        return sb;
+    }
+
+    // iterate over the lines
+    int start = 0;
+    while (start < len)
+    {
+        int newLine = text.indexOf(defaultNewLine, start);
+        if (newLine == -1)
+        {
+            pos = findWrapPos(text, width, start);
+        }
+        else
+        {
+            pos = (newLine - start > width) ? findWrapPos(text, width, start) : newLine;
+        }
 
         if (pos == -1)
         {
-            sb.append(rtrim(text));
+            sb.append(rtrim(text.substring(start)));
 
             return sb;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // write out the line
+        if (pos != newLine)
+        {
+            sb.append(rtrim(text.substring(start, pos)));
+        }
+        else
+        {
+            sb.append(text.substring(start, pos));
+        }
+        sb.append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
-        while (true)
+        // set the start to be the next line
+        start = pos + 1;
+        if (start < len && text.charAt(start) == ' ')
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
-
-            if (pos == -1)
-            {
-                sb.append(text);
+            // skip the first character on the next line, it's a space
+            start += 1;
+        }
+        text = padding + text.substring(start);
+        len = text.length();
+        start = 0;
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
