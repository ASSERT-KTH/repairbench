diff --git a/tmp/cf793aa6-3c02-4bca-b894-5d061e45066a_buggy.java b/tmp/90f7a3bc-6cd1-479d-ad3d-6c02de58824c_fixed.java
index bada2b6..f770bd8 100644
--- a/tmp/cf793aa6-3c02-4bca-b894-5d061e45066a_buggy.java
+++ b/tmp/90f7a3bc-6cd1-479d-ad3d-6c02de58824c_fixed.java
@@ -1,16 +1,26 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return (Class<?>) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof TypeVariable) {
+            // This is a generic type variable. We can't do much with it here.
+            // Let's return Object.class as a default.
+            return Object.class;
+        } else {
+            // If it's something else, we don't know how to handle it, so return Object.class.
+            return Object.class;
+        }
     }
     
     return Object.class;
 }
\ No newline at end of file
