diff --git a/tmp/d99b5531-db98-4264-9975-6ed8c7264c8f_buggy.java b/tmp/08c7fd30-9360-402d-a1fe-ca9ed933a5d0_fixed.java
index bada2b6..2338ea2 100644
--- a/tmp/d99b5531-db98-4264-9975-6ed8c7264c8f_buggy.java
+++ b/tmp/08c7fd30-9360-402d-a1fe-ca9ed933a5d0_fixed.java
@@ -1,16 +1,26 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return (Class<?>) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof TypeVariable) {
+            // For type variables we return the upper bound
+            // to be consistent with TypeToken (Guava) and erasure (javac)
+            TypeVariable typeVariable = (TypeVariable) actual;
+            Type[] bounds = typeVariable.getBounds();
+            if (bounds.length > 0) {
+                return (Class<?>) bounds[0];
+            }
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
