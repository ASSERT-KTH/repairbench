diff --git a/tmp/bc2396dd-c2bb-4fb3-9c7a-d03747d2955e_buggy.java b/tmp/c7f53ce9-27ad-46bc-84a2-bdb0b738546f_fixed.java
index bada2b6..c9e5797 100644
--- a/tmp/bc2396dd-c2bb-4fb3-9c7a-d03747d2955e_buggy.java
+++ b/tmp/c7f53ce9-27ad-46bc-84a2-bdb0b738546f_fixed.java
@@ -1,16 +1,36 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
+public Class<?> getGenericType(Field field) {        
     Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+    if (generic instanceof ParameterizedType) {
         Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return (Class<?>) ((ParameterizedType) actual).getRawType();
+        } else if (actual instanceof TypeVariable) {
+            // TypeVariable is not an instanceof Class and doesn't contain any useful info. 
+            // In this case, let's return Object.class. 
+            // See org.mockito.internal.util.reflection.GenericMasterTest.shouldDealWithTypeVariables
+            return Object.class;
+        } else if (actual instanceof GenericArrayType) {
+            Type componentType = ((GenericArrayType) actual).getGenericComponentType();
+            if (componentType instanceof Class) {
+                return Array.newInstance((Class<?>) componentType, 0).getClass();
+            } else {
+                // Not sure if this is the correct handling for nested generic arrays. 
+                // Let's return Object.class for now.
+                return Object.class;
+            }
+        } else {
+            // If we can't handle it, let's return Object.class.
+            return Object.class;
+        }
     }
     
     return Object.class;
 }
\ No newline at end of file
