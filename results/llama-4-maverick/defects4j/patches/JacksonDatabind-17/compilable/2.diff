diff --git a/tmp/33cd22db-fe4c-4b49-846e-9b3c1f5676e2_buggy.java b/tmp/9ff469aa-d9c6-41e0-aa91-247bddc185f7_fixed.java
index 01967cc..da5d996 100644
--- a/tmp/33cd22db-fe4c-4b49-846e-9b3c1f5676e2_buggy.java
+++ b/tmp/9ff469aa-d9c6-41e0-aa91-247bddc185f7_fixed.java
@@ -1,35 +1,27 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
 public boolean useForType(JavaType t)
 {
     switch (_appliesFor) {
     case NON_CONCRETE_AND_ARRAYS:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // fall through
     case OBJECT_AND_NON_CONCRETE:
 //      return t.isJavaLangObject() || 
         return (t.getRawClass() == Object.class)
                 || (!t.isConcrete()
                         // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                || JsonNode.class.isAssignableFrom(t.getRawClass()));
 
     case NON_FINAL:
         while (t.isArrayType()) {
             t = t.getContentType();
         }
         // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+        return !t.isFinal() && !JsonNode.class.isAssignableFrom(t.getRawClass());
     default:
     //case JAVA_LANG_OBJECT:
 //      return t.isJavaLangObject();
         return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
