diff --git a/tmp/658cf401-cb9b-4ea5-9c0c-2591a115765c_buggy.java b/tmp/db39046e-4105-4270-976a-b137a079c6e5_fixed.java
index 46817a7..891232e 100644
--- a/tmp/658cf401-cb9b-4ea5-9c0c-2591a115765c_buggy.java
+++ b/tmp/db39046e-4105-4270-976a-b137a079c6e5_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
     if (that.toMaybeRecordType().hasProperty(property) &&
         that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
   }
-    return builder.build();
+  // Add all properties of both records that were not in the intersection
+  RecordType otherRecordType = that.toMaybeRecordType();
+  for (String property : properties.keySet()) {
+    if (!otherRecordType.hasProperty(property)) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+    }
+  }
+  for (String property : otherRecordType.properties.keySet()) {
+    if (!hasProperty(property)) {
+      builder.addProperty(property, otherRecordType.getPropertyType(property),
+          otherRecordType.getPropertyNode(property));
+    }
+  }
+  JSType result = builder.build();
+  if (result.isEmptyType()) {
+    return registry.createUnionType(this, that);
+  } else {
+    return result;
+  }
 }
\ No newline at end of file
