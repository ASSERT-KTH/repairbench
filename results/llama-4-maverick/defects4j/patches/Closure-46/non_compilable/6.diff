diff --git a/tmp/6b195c6e-299c-41d2-8c60-84ec5e684e88_buggy.java b/tmp/b4863738-b25f-46f5-a92b-74269cb2d6a1_fixed.java
index 46817a7..6501c49 100644
--- a/tmp/6b195c6e-299c-41d2-8c60-84ec5e684e88_buggy.java
+++ b/tmp/b4863738-b25f-46f5-a92b-74269cb2d6a1_fixed.java
@@ -1,16 +1,22 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
     if (that.toMaybeRecordType().hasProperty(property) &&
         that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
   }
+  // If no properties are common, we still need to return a type that is a supertype
+  // of both record types. The union type of the record types is a supertype of
+  // both types.
+  if (builder.getPropertiesCount() == 0) {
+    return registry.createUnionType(this, that);
+  }
   return builder.build();
 }
\ No newline at end of file
