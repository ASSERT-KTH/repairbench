diff --git a/tmp/8807f8e5-b922-440f-8501-780367e081f5_buggy.java b/tmp/da1a8d25-b882-469b-83e7-686dfa1b9746_fixed.java
index 46817a7..ec8ba40 100644
--- a/tmp/8807f8e5-b922-440f-8501-780367e081f5_buggy.java
+++ b/tmp/da1a8d25-b882-469b-83e7-686dfa1b9746_fixed.java
@@ -1,16 +1,22 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+  RecordType otherRecordType = that.toMaybeRecordType();
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+    if (otherRecordType.hasProperty(property) &&
+        otherRecordType.getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
   }
-    return builder.build();
+  // If the record types have nothing in common, we return the `?` type
+  // (the universal type). Otherwise, we return the join of all the
+  // common properties, and make it a record type.
+  JSType result = builder.build();
+  return result.isEmptyType() ?
+      registry.getNativeObjectType(JSTypeNative.TOP_OBJECT_TYPE) : result;
 }
\ No newline at end of file
