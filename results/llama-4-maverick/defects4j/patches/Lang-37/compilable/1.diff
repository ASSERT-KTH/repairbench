diff --git a/tmp/51127f0f-9bc6-439a-8cfb-1f949ed8cad0_buggy.java b/tmp/682b6411-ee66-4433-8eb7-7e80086f411c_fixed.java
index d5b1b52..ed154d0 100644
--- a/tmp/51127f0f-9bc6-439a-8cfb-1f949ed8cad0_buggy.java
+++ b/tmp/682b6411-ee66-4433-8eb7-7e80086f411c_fixed.java
@@ -1,36 +1,54 @@
-    /**
-     * <p>Adds all the elements of the given arrays into a new array.</p>
-     * <p>The new array contains all of the element of <code>array1</code> followed
-     * by all of the elements <code>array2</code>. When an array is returned, it is always
-     * a new array.</p>
-     *
-     * <pre>
-     * ArrayUtils.addAll(null, null)     = null
-     * ArrayUtils.addAll(array1, null)   = cloned copy of array1
-     * ArrayUtils.addAll(null, array2)   = cloned copy of array2
-     * ArrayUtils.addAll([], [])         = []
-     * ArrayUtils.addAll([null], [null]) = [null, null]
-     * ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"]
-     * </pre>
-     *
-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.
-     *      The type of the new array is the type of the first array,
-     *      unless the first array is null, in which case the type is the same as the second array.
-     * @since 2.1
-     */
     @SuppressWarnings("unchecked")
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
             return clone(array2);
         } else if (array2 == null) {
             return clone(array1);
         }
         final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        final Class<?> type2 = array2.getClass().getComponentType();
+        Class<?> type = type1;
+        if (type1 != type2) {
+            // TODO: Not the best way to do this.  More efficient to use reflection to get the type and then check that
+            //       array1 and array2 are both assignable to it.
+            //       The worst case is that we do this twice.
+            type = getCommonSuperClass(type1, type2);
+            if (type == null) {
+                throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
+            }
+        }
+        T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        try {
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        } catch (ArrayStoreException e) {
             // Check if problem is incompatible types
+            throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName(), e);
+        }
         return joinedArray;
     }
+
+    private static Class<?> getCommonSuperClass(Class<?> class1, Class<?> class2) {
+        if (class1 == null || class2 == null) {
+            return null;
+        }
+        if (class1.isAssignableFrom(class2)) {
+            return class1;
+        }
+        if (class2.isAssignableFrom(class1)) {
+            return class2;
+        }
+        if (class1.isPrimitive() || class2.isPrimitive()) {
+            return null;
+        }
+        try {
+            Class<?> ancestor = class1.getSuperclass();
+            if (ancestor.isAssignableFrom(class2)) {
+                return ancestor;
+            }
+            return getCommonSuperClass(ancestor, class2);
+        } catch (Exception e) {
+            // Should not happen, but just in case.
+            return null;
+        }
+    }
\ No newline at end of file
