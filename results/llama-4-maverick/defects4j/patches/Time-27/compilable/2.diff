diff --git a/tmp/f573cee1-e35f-46d5-9e3a-12df92462807_buggy.java b/tmp/61ca58b4-0145-44cf-b957-ed8b38608dbf_fixed.java
index ec6c9ee..92d576b 100644
--- a/tmp/f573cee1-e35f-46d5-9e3a-12df92462807_buggy.java
+++ b/tmp/61ca58b4-0145-44cf-b957-ed8b38608dbf_fixed.java
@@ -1,21 +1,29 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
+        if (size >= 3 && elementPairs.get(2) instanceof Separator) {
+            // Fix for the bug: recursively call toFormatter with the sublist starting from index 2
             PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
             sep = sep.finish(f.getPrinter(), f.getParser());
             return new PeriodFormatter(sep, sep);
+        } else {
+            // Handle the case when the element at index 2 is not a Separator
+            PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);
+            sep = sep.finish(f.getPrinter(), f.getParser());
+            return new PeriodFormatter(sep, sep);
+        }
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
