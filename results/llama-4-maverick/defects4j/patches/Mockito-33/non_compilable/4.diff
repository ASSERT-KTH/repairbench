diff --git a/tmp/6923ed40-94cf-4cfa-91f2-b70479352b18_buggy.java b/tmp/2966e2f8-d98a-4b36-b576-1cf34e1181b4_fixed.java
index e1fc51f..efd2ccd 100644
--- a/tmp/6923ed40-94cf-4cfa-91f2-b70479352b18_buggy.java
+++ b/tmp/2966e2f8-d98a-4b36-b576-1cf34e1181b4_fixed.java
@@ -1,9 +1,34 @@
 public boolean hasSameMethod(Invocation candidate) {        
     //not using method.equals() for 1 good reason:
     //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
     
+    // Bridge methods are generated by the compiler when dealing with type parameters and generics.
+    // For our purposes, these methods should be considered equal to the original method.
+    if (m1.isBridge() != m2.isBridge()) {
+        // If one is a bridge method and the other is not, we need to compare the original methods.
+        if (m1.isBridge()) {
+            m1 = getOriginalMethod(m1);
+        } else {
+            m2 = getOriginalMethod(m2);
+        }
+    }
+    
     /* Avoid unnecessary cloning */
     return m1.equals(m2);
 }
+
+// Helper method to get the original method if the given method is a bridge method.
+private Method getOriginalMethod(Method method) {
+    Method originalMethod = null;
+    for (Method m : method.getDeclaringClass().getMethods()) {
+        if (m.getName().equals(method.getName()) 
+                && Arrays.equals(m.getParameterTypes(), method.getParameterTypes()) 
+                && !m.isBridge()) {
+            originalMethod = m;
+            break;
+        }
+    }
+    return originalMethod != null ? originalMethod : method;
+}
\ No newline at end of file
