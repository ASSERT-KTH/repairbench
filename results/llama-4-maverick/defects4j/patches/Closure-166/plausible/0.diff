diff --git a/tmp/12011db1-b3d6-440b-8b78-7a37ef2b9f11_buggy.java b/tmp/10a5f06d-2aaa-43c0-ab8d-d722dfb19d83_fixed.java
index 5f96616..971fd73 100644
--- a/tmp/12011db1-b3d6-440b-8b78-7a37ef2b9f11_buggy.java
+++ b/tmp/10a5f06d-2aaa-43c0-ab8d-d722dfb19d83_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+  // Handle the case where the constraint object is a record type or a union type that contains a record type.
+  if (constraint.isUnionType()) {
+    for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+      if (alternate.isRecordType()) {
+        matchRecordTypeConstraint(alternate.toObjectType());
+      }
+    }
+  } else if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
