diff --git a/tmp/811b6d66-3903-4808-a658-817aea3e247d_buggy.java b/tmp/1cc27c49-c46b-407e-b4d5-68a612b5c3c6_fixed.java
index 9353941..ae69a13 100644
--- a/tmp/811b6d66-3903-4808-a658-817aea3e247d_buggy.java
+++ b/tmp/1cc27c49-c46b-407e-b4d5-68a612b5c3c6_fixed.java
@@ -1,30 +1,38 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    boolean isAnd = n.isAnd();
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If the current node is an '&&', and the result of the boolean operation is
+          // determined by the current child, the remaining children will not be evaluated.
+          if (isAnd && isBooleanResult(child)) {
             return state;
           }
+          // For other cases, we will still visit the remaining children, for example:
+          //   (a = b) || (a = 1)
+          //   a will be KILL in the first child, but it is still read in the second child.
+        }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
