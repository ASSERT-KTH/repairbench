diff --git a/tmp/909cb570-245a-4b1e-a577-525f6853d07a_buggy.java b/tmp/95994077-ab40-4345-8b13-8a4a4dc9cdc9_fixed.java
index 9353941..fa344ea 100644
--- a/tmp/909cb570-245a-4b1e-a577-525f6853d07a_buggy.java
+++ b/tmp/95994077-ab40-4345-8b13-8a4a4dc9cdc9_fixed.java
@@ -1,30 +1,37 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+        if (state == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        } else if (state == VariableLiveness.KILL) {
+          // We found a kill, but we still need to check whether there was a read in the LHS.
+          // e.g. (x = read()) && (x = 1)
+          // so just continue
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+    // We are here because either 
+    // 1) we didn't find a KILL or READ, so we return MAYBE_LIVE or
+    // 2) we found a KILL, but there was no READ and we didn't return in the loop above.
+    return n.isAssign() ? VariableLiveness.MAYBE_LIVE : VariableLiveness.KILL;
   }
\ No newline at end of file
