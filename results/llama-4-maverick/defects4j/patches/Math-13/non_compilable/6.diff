diff --git a/tmp/4bc514e6-bb97-4cb0-8f43-aba9cc6adf63_buggy.java b/tmp/6939469a-b923-4cf3-9e72-60cf861b1077_fixed.java
index 4e21866..f0f6c60 100644
--- a/tmp/4bc514e6-bb97-4cb0-8f43-aba9cc6adf63_buggy.java
+++ b/tmp/6939469a-b923-4cf3-9e72-60cf861b1077_fixed.java
@@ -1,10 +1,46 @@
     /**
      * Computes the square-root of the weight matrix.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
+        if (m.getRowDimension() != m.getColumnDimension()) {
+            throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());
+        }
+        if (m.getRowDimension() == 0) {
+            return m.copy();
+        }
+
+        // This is a special case for a diagonal matrix.
+        if (isDiagonal(m)) {
+            final int dim = m.getRowDimension();
+            final double[][] data = new double[dim][dim];
+            for (int i = 0; i < dim; i++) {
+                data[i][i] = FastMath.sqrt(m.getEntry(i, i));
+            }
+            return MatrixUtils.createRealMatrix(data);
+        }
+
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
+
+    /**
+     * Checks whether a matrix is diagonal.
+     *
+     * @param m Matrix.
+     * @return {@code true} if {@code m} is diagonal, {@code false} otherwise.
+     */
+    private boolean isDiagonal(RealMatrix m) {
+        final int rowDim = m.getRowDimension();
+        final int colDim = m.getColumnDimension();
+        for (int i = 0; i < rowDim; i++) {
+            for (int j = 0; j < colDim; j++) {
+                if (i != j && m.getEntry(i, j) != 0) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
\ No newline at end of file
