diff --git a/tmp/a69517e4-8332-46f6-b62d-bf6fae532213_buggy.java b/tmp/13d696ce-9257-4c79-830f-781736053f07_fixed.java
index cd412d2..71b037d 100644
--- a/tmp/a69517e4-8332-46f6-b62d-bf6fae532213_buggy.java
+++ b/tmp/13d696ce-9257-4c79-830f-781736053f07_fixed.java
@@ -1,76 +1,127 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
-                }
+            len = dateStr.length(); // just in case we changed it
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
+            return df.parse(dateStr, pos);
+        }
+
+        // Milliseconds partial or missing; and even seconds are optional
+        len = dateStr.length(); // might have changed due to timezone adjustment
+        int dotIx = dateStr.lastIndexOf('.');
+        // No seconds? Add them (with 0 for milliseconds)
+        if (dateStr.lastIndexOf(':') == len-3) {
+            StringBuilder sb = new StringBuilder(dateStr);
+            sb.append(":00");
+            dateStr = sb.toString();
+            dotIx += 3; // so it is at the new end
+            len += 3;
+        }
+        // milliseconds?
+        if (dotIx > 0) {
+            // Need to normalize to 3 millis digits, may have less or more
+            StringBuilder sb = new StringBuilder(dateStr);
+            int fractLen = len - dotIx - 1;
+            if (fractLen < 3) {
+                do {
+                    sb.append('0');
+                    ++fractLen;
+                } while (fractLen < 3);
+                dateStr = sb.toString();
+            } else if (fractLen > 3) {
+                // truncate, but also need to round up if >= 0.5 (0.5, 0.500, 0.5000)
+                int ix = dotIx + 3;
+                // ok to use int directly here since number is < 1000
+                int extra = Integer.parseInt(dateStr.substring(ix, ix + 1));
+                if (extra >= 5) { // round up
+                    // Let's back up a bit to see if there are non-zero digits
+                    while (--ix > dotIx) {
+                        int digit = dateStr.charAt(ix);
+                        if (digit != '0' && digit != '.') {
+                            // Only round up to ".000"; otherwise retain fractional part
+                            if (digit == '9') { // roll over to the next left digit
+                                sb = new StringBuilder(dateStr);
+                                sb.setCharAt(ix, '0');
+                                // carry forward
+                                while (--ix > dotIx) {
+                                    digit = sb.charAt(ix);
+                                    if (digit != '.') {
+                                        sb.setCharAt(ix, (char) (digit+1));
+                                        break;
+                                    }
+                                }
+                                dateStr = sb.toString();
+                            } else {
+                                sb = new StringBuilder(dateStr);
+                                sb.setCharAt(ix, (char) (digit+1));
+                                dateStr = sb.toString();
+                            }
+                            break;
+                        }
+                    }
+                }
+                dateStr = dateStr.substring(0, dotIx+3);
+            }
+        }
+        df = _formatISO8601;
+        if (_formatISO8601 == null) {
+            df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
