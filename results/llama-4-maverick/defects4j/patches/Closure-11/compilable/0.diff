diff --git a/tmp/446463b7-b85c-4a29-b413-f610c7a770eb_buggy.java b/tmp/2cecbf6b-2737-4dd3-ba23-691df06b1a93_fixed.java
index 57c40b2..6297aa3 100644
--- a/tmp/446463b7-b85c-4a29-b413-f610c7a770eb_buggy.java
+++ b/tmp/2cecbf6b-2737-4dd3-ba23-691df06b1a93_fixed.java
@@ -1,27 +1,33 @@
   /**
    * Visits a GETPROP node.
    *
    * @param t The node traversal object that supplies context, such as the
    * scope chain to use in name lookups as well as error reporting.
    * @param n The node being visited.
    * @param parent The parent of <code>n</code>
    */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+    } else if (n.getJSType() != null && parent.isAssign() && n == parent.getFirstChild()) {
+      // We're checking a property assignment, which means we're checking
+      // the type of the property on the LHS of the assign.
+      // So, in this code: var a = {}; a.prop = 3; the relevant type for
+      // the check is 'a'.
+      // In this code: var a = null; a.prop = 3; the check is against null.
+      // We don't check whether we're doing a property access on a null
+      // or undefined object. That check is done in checkPropAccess.
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
       checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
   }
\ No newline at end of file
