diff --git a/tmp/067b45e1-e563-4468-a822-bc29bfc1f0fc_buggy.java b/tmp/433e2576-c843-460f-8032-1f1b1c1d5c37_fixed.java
index d57736b..9d96c36 100644
--- a/tmp/067b45e1-e563-4468-a822-bc29bfc1f0fc_buggy.java
+++ b/tmp/433e2576-c843-460f-8032-1f1b1c1d5c37_fixed.java
@@ -1,39 +1,49 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
               typeToInfer =
                   getNativeType(VOID_TYPE).getLeastSupertype(propType);
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
+          } else if (objType.isPropertyTypeInferred(prop)) {
+            // We have a declared-but-inferred property in the object literal;
+            // it may have been inferred as a subtype of the property in the
+            // constraint.  For example, the property was declared as
+            // {!Object} but the initializer was {}.
+            // We need to widen it to the type in the constraint.
+            JSType declaredType = objType.getPropertyType(prop);
+            if (!declaredType.isSubtypeOf(propType)) {
+              objType.defineInferredProperty(prop, propType, null);
+            }
           }
         }
       }
     }
   }
\ No newline at end of file
