diff --git a/tmp/e4b85e7c-eb87-414a-bceb-c4bea4fe32d5_buggy.java b/tmp/91ccd301-0751-4166-984c-a80ab04f17ae_fixed.java
index 99141e0..fadc038 100644
--- a/tmp/e4b85e7c-eb87-414a-bceb-c4bea4fe32d5_buggy.java
+++ b/tmp/91ccd301-0751-4166-984c-a80ab04f17ae_fixed.java
@@ -1,33 +1,37 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string); 
+    StringBuffer accum = new StringBuffer(string.length()); 
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2) != null ? 16 : 10; 
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+            } 
         } else {
-                String name = m.group(1);
+            String name = m.group(1).substring(1); // Remove '&' from the name
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval != -1) { 
+            if (charval > 0xFFFF) { 
+                String c = new String(Character.toChars(charval));
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
+            } else {
                 String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+                m.appendReplacement(accum, Matcher.quoteReplacement(c));
+            }
         } else {
-                m.appendReplacement(accum, m.group(0));
+            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
