diff --git a/tmp/4d04fec5-9b18-4be4-9943-34bcf7203f9b_buggy.java b/tmp/f3d9f3d7-5411-40fa-827b-1ea123585f30_fixed.java
index 99141e0..9bbf621 100644
--- a/tmp/4d04fec5-9b18-4be4-9943-34bcf7203f9b_buggy.java
+++ b/tmp/f3d9f3d7-5411-40fa-827b-1ea123585f30_fixed.java
@@ -1,33 +1,33 @@
 static String unescape(String string) {
     if (!string.contains("&"))
         return string;
 
-        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
-        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
-        // todo: replace m.appendReplacement with own impl, so StringBuilder and quoteReplacement not required
+    Matcher m = unescapePattern.matcher(string); 
+    StringBuffer accum = new StringBuffer(string.length()); 
 
     while (m.find()) {
         int charval = -1;
         String num = m.group(3);
         if (num != null) {
             try {
-                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                int base = m.group(2) != null ? 16 : 10; 
                 charval = Integer.valueOf(num, base);
             } catch (NumberFormatException e) {
-                } // skip
+            } 
         } else {
-                String name = m.group(1);
+            String name = m.group(1).substring(1); // Remove '&' from the matched name
             if (full.containsKey(name))
                 charval = full.get(name);
         }
 
-            if (charval != -1 || charval > 0xFFFF) { // out of range
+        if (charval != -1 && charval <= 0xFFFF) { 
             String c = Character.toString((char) charval);
-                m.appendReplacement(accum, c);
+            String replacement = Matcher.quoteReplacement(c); // Quote the replacement string
+            m.appendReplacement(accum, replacement);
         } else {
             m.appendReplacement(accum, m.group(0));
         }
     }
     m.appendTail(accum);
     return accum.toString();
 }
\ No newline at end of file
