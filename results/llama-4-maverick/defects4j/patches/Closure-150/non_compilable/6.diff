diff --git a/tmp/867056d7-b1c5-4b75-b6b2-4d136d43c660_buggy.java b/tmp/9d5fbdab-1823-4805-9f15-00c18d9f4972_fixed.java
index 800e6e1..958f7c9 100644
--- a/tmp/867056d7-b1c5-4b75-b6b2-4d136d43c660_buggy.java
+++ b/tmp/9d5fbdab-1823-4805-9f15-00c18d9f4972_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
           if (parent.getType() == Token.NAME) {
+            // Do not visit function declaration twice. This is done to avoid
+            // entering function body scope twice.
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.ASSIGN:
+          // We need to revisit a ASSIGN node here because a JSdoc on a LHS
+          // ASSIGN node is not visited by the JsDocParser.
+          Node lhs = n.getFirstChild();
+          if (lhs.isQualifiedName()) {
+            attachJsDocType(n, lhs);
+          }
+          break;
       }
     }
\ No newline at end of file
