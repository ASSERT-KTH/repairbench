diff --git a/tmp/7ca4f7df-e291-445a-9efd-a6ff395eb73b_buggy.java b/tmp/7ce342dd-7a00-4a9c-86d1-c7227abd7269_fixed.java
index 800e6e1..afecf63 100644
--- a/tmp/7ca4f7df-e291-445a-9efd-a6ff395eb73b_buggy.java
+++ b/tmp/7ce342dd-7a00-4a9c-86d1-c7227abd7269_fixed.java
@@ -1,32 +1,42 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+          if (parent.isName()) {
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
+        case Token.ASSIGN:
+          // Handle cases like: `var goog = {}; /** @param {number} x */ goog.foo;`
+          // and: `var x = {}; /** @return {number} */ x.foo;`
+          if (n.getFirstChild().isQualifiedName()) {
+            Node rhs = n.getLastChild();
+            if (rhs.isFunction()) {
+              defineDeclaredFunction(rhs, rhs);
+            }
+          }
+          break;
       }
     }
\ No newline at end of file
