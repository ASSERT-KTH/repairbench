diff --git a/tmp/1b6ccaa6-8e87-4c81-8442-5d6df7b5d3dc_buggy.java b/tmp/d3b19542-c0f1-4382-9b7c-6c9d1af5f174_fixed.java
index 800e6e1..96d1d61 100644
--- a/tmp/1b6ccaa6-8e87-4c81-8442-5d6df7b5d3dc_buggy.java
+++ b/tmp/d3b19542-c0f1-4382-9b7c-6c9d1af5f174_fixed.java
@@ -1,32 +1,36 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+          if (parent.getType() == Token.NAME ||
+              parent.getType() == Token.GETPROP) {
+            // Do not enter a new scope for the function, as it is just
+            // a stub declaration.  For correct type inference, the stub
+            // function's body is treated as if it were in the outer scope.
             return;
           }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
\ No newline at end of file
