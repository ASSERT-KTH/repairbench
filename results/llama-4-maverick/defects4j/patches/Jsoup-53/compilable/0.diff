diff --git a/tmp/7241aecd-17f9-4396-ae33-35272a78d86e_buggy.java b/tmp/9ee477b1-dbae-4753-a35e-6723a4135474_fixed.java
index fecb896..81dd14a 100644
--- a/tmp/7241aecd-17f9-4396-ae33-35272a78d86e_buggy.java
+++ b/tmp/9ee477b1-dbae-4753-a35e-6723a4135474_fixed.java
@@ -1,34 +1,42 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
-        int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+            if (last != ESC) {
+                if (c.equals('"') || c.equals('\'')) {
+                    inQuote = !inQuote;
+                }
+                if (!inQuote) {
                     if (c.equals(open)) {
                         depth++;
                         if (start == -1)
-                        start = pos;
-                }
-                else if (c.equals(close))
+                            start = pos - 1; // include the opener in the match
+                    } else if (c.equals(close)) {
                         depth--;
                     }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+                }
+            }
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+        if (start == -1) {
+            return "";
+        } else {
+            // include the closer in the match
+            int end = (depth == 0) ? pos : pos - 1;
+            return queue.substring(start, end);
+        }
     }
\ No newline at end of file
