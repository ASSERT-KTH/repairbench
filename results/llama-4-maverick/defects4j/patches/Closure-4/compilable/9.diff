diff --git a/tmp/eedf80bd-333c-4051-8121-3569ebdcdd93_buggy.java b/tmp/8910b0c0-46dc-42bf-bcc4-10ae27d3f068_fixed.java
index d6a560a..4be35e1 100644
--- a/tmp/eedf80bd-333c-4051-8121-3569ebdcdd93_buggy.java
+++ b/tmp/8910b0c0-46dc-42bf-bcc4-10ae27d3f068_fixed.java
@@ -1,33 +1,37 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    boolean firstPass = !isResolved();
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
+    // If we were unable to resolve a type, then there's no point in trying to
+    // resolve via properties, since we've already failed. On the first pass,
+    // we are resolving @extends and @implements, so we should not report
+    // warnings then. On the second pass, properties have been resolved, so
+    // there is no need to go through this again.
+    if (firstPass) {
       resolveViaProperties(t, enclosing);
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
       }
+    }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
