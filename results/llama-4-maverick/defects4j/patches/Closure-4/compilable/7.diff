diff --git a/tmp/e215a1e9-26f5-4064-94c4-007dac5596e8_buggy.java b/tmp/8ac4e202-0657-4797-a72a-97c66763aef6_fixed.java
index d6a560a..59829d7 100644
--- a/tmp/e215a1e9-26f5-4064-94c4-007dac5596e8_buggy.java
+++ b/tmp/8ac4e202-0657-4797-a72a-97c66763aef6_fixed.java
@@ -1,33 +1,32 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
     // TODO(user): Investigate whether it is really necessary to keep two
     // different mechanisms for resolving named types, and if so, which order
     // makes more sense. Now, resolution via registry is first in order to
     // avoid triggering the warnings built into the resolution via properties.
+    if (isResolved()) {
+      return registry.isLastGeneration() ? getReferencedType() : this;
+    }
+
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
