diff --git a/tmp/9f50e41f-271a-4343-9b87-06b3d93ee157_buggy.java b/tmp/16e6d3fe-7d2e-4f63-88b0-78a8b1051924_fixed.java
index d6a560a..fea9177 100644
--- a/tmp/9f50e41f-271a-4343-9b87-06b3d93ee157_buggy.java
+++ b/tmp/16e6d3fe-7d2e-4f63-88b0-78a8b1051924_fixed.java
@@ -1,33 +1,24 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
-    resolveViaProperties(t, enclosing);
+    boolean resolvedViaProperties = resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
 
     super.resolveInternal(t, enclosing);
-    if (isResolved()) {
+    if (isResolved() || resolvedViaProperties) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
