diff --git a/tmp/7dd8f5ef-6846-449d-b495-d677fbd15c0a_buggy.java b/tmp/75f18e23-c81c-423e-b911-0def70d8da08_fixed.java
index 4b7e1e4..b553d96 100644
--- a/tmp/7dd8f5ef-6846-449d-b495-d677fbd15c0a_buggy.java
+++ b/tmp/75f18e23-c81c-423e-b911-0def70d8da08_fixed.java
@@ -1,52 +1,61 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
-            while((ch = i.read()) != -1) {
+            while((ch = i.read()) != -1 && Character.isDigit((char)ch)) { // Check if ch is a digit before parsing
                 read++;
-                if (ch == ' '){
+                len *= 10;
+                len += ch - '0';
+            }
+            if (ch == -1){ // EOF
+                break;
+            }
+            if (ch != ' '){
+                throw new IOException("Invalid Paxheader encountered");
+            }
+            read++; // Consume the space character
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == '='){ // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                    if (restLen <= 1) { // Pax headers must be terminated by a NL, so restLen == 1 is valid, anything less is not
+                        if (restLen == 1) {
+                            // Consume the NL
+                            i.read();
+                        }
                         headers.remove(keyword);
                     } else {
-                                final byte[] rest = new byte[restLen];
+                        final byte[] rest = new byte[restLen - 1]; // Subtract 1 to account for the NL
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                        if (got != restLen - 1) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
-                                                          + restLen
+                                                  + (restLen - 1)
                                                   + " bytes, read "
                                                   + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        // The String constructor will handle the UTF-8 encoding
+                        final String value = new String(rest, CharsetNames.UTF_8);
                         headers.put(keyword, value);
+                        // Consume the NL
+                        i.read(); // This should be the NL, not checked as the stream may be closed after this
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
             if (ch == -1){ // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
