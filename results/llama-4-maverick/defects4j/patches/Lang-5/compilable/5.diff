diff --git a/tmp/171a15f7-f156-4ee1-b587-e5d8e49da8dc_buggy.java b/tmp/0f529e33-2747-49d0-8673-50cdf303dfe1_fixed.java
index f843d29..b96dace 100644
--- a/tmp/171a15f7-f156-4ee1-b587-e5d8e49da8dc_buggy.java
+++ b/tmp/0f529e33-2747-49d0-8673-50cdf303dfe1_fixed.java
@@ -1,68 +1,52 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(final String str) {
         if (str == null) {
             return null;
         }
         final int len = str.length();
-        if (len < 2) {
+        if (len == 0) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         final char ch0 = str.charAt(0);
+        if (ch0 == '_') {
+            if (len < 3) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
             final char ch1 = str.charAt(1);
-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {
+            final char ch2 = str.charAt(2);
+            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            if (len == 2) {
-                return new Locale(str);
-            }
+            if (len == 3) {
+                return new Locale("", str.substring(1, 3));
+            } else {
                 if (len < 5) {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            if (str.charAt(2) != '_') {
+                if (str.charAt(3) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-            final char ch3 = str.charAt(3);
-            if (ch3 == '_') {
-                return new Locale(str.substring(0, 2), "", str.substring(4));
+                return new Locale("", str.substring(1, 3), str.substring(4));
             }
-            final char ch4 = str.charAt(4);
-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {
+        }
+        final String[] parts = str.split("_", -1);
+        final int partsLength = parts.length;
+        if (partsLength < 1 || partsLength > 3) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (parts[0].length() == 0 || !Character.isLowerCase(parts[0].charAt(0))) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+        if (partsLength == 1) {
+            return new Locale(parts[0]);
         }
-            if (len < 7) {
+        if (parts[1].length() == 0 || !Character.isUpperCase(parts[1].charAt(0))) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (str.charAt(5) != '_') {
+        if (partsLength == 2) {
+            return new Locale(parts[0], parts[1]);
+        }
+        if (parts[2].length() == 0) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        return new Locale(parts[0], parts[1], parts[2]);
     }
\ No newline at end of file
