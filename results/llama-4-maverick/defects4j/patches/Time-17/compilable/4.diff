diff --git a/tmp/244b3d8a-9da5-4e4f-ad51-4471da5d2fca_buggy.java b/tmp/14ae8b4c-a2dc-4fe8-9163-1c6f6b0be6cd_fixed.java
index 03b03d7..00a8af1 100644
--- a/tmp/244b3d8a-9da5-4e4f-ad51-4471da5d2fca_buggy.java
+++ b/tmp/14ae8b4c-a2dc-4fe8-9163-1c6f6b0be6cd_fixed.java
@@ -1,25 +1,25 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long before = convertLocalToUTC(local, false, instantBefore);
+        long after = convertLocalToUTC(local, false, instantAfter);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // return the correct adjusted offset
+        return earlierOrLater ? Math.max(before, after) : Math.min(before, after);
     }
\ No newline at end of file
