diff --git a/tmp/c7726627-a6be-42b4-9bd1-8c3f429be0fe_buggy.java b/tmp/e90ec228-c583-48df-b56a-bbf5962a1daa_fixed.java
index 4bbd561..6a7bf83 100644
--- a/tmp/c7726627-a6be-42b4-9bd1-8c3f429be0fe_buggy.java
+++ b/tmp/e90ec228-c583-48df-b56a-bbf5962a1daa_fixed.java
@@ -1,37 +1,47 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if(end >= input.length()) {
+            return 0; // invalid input, missing ';'
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        if (entityValue > 0xFFFF) {
+            char[] ch = Character.toChars(entityValue);
+            out.write(ch[0]);
+            out.write(ch[1]);
+        } else {
+            out.write((char) entityValue);
+        }
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
