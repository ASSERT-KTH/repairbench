diff --git a/tmp/1ec7e7f3-d977-4bcb-82cc-b2fa156cc23c_buggy.java b/tmp/2a8300f7-9c09-4713-aa35-bfc03c573a87_fixed.java
index b98f0a7..57b2f04 100644
--- a/tmp/1ec7e7f3-d977-4bcb-82cc-b2fa156cc23c_buggy.java
+++ b/tmp/2a8300f7-9c09-4713-aa35-bfc03c573a87_fixed.java
@@ -1,29 +1,27 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
+    scope = traverseChildren(n, scope);
 
     Node constructor = n.getFirstChild();
-    scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          backwardsInferenceFromCallSite(n, ct);
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
-    }
     return scope;
   }
