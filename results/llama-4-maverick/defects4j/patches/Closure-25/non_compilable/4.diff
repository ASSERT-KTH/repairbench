diff --git a/tmp/d6164f64-17cf-4d01-895d-7e295bea9cad_buggy.java b/tmp/31a44329-c1a0-462b-aa4d-b646c881a8da_fixed.java
index b98f0a7..c4e2c03 100644
--- a/tmp/d6164f64-17cf-4d01-895d-7e295bea9cad_buggy.java
+++ b/tmp/31a44329-c1a0-462b-aa4d-b646c881a8da_fixed.java
@@ -1,29 +1,53 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Backwards inference: if the constructor is called with 'new', its
+          // parameter type is inferred from the type of the argument.
+          FunctionType ctorType = ct.toConstructorType();
+          Iterator<Node> paramIter = ctorType.getParameters().iterator();
+          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+            scope = traverse(arg, scope);
+            if (!paramIter.hasNext()) {
+              break;
+            }
+            Node param = paramIter.next();
+            // If the parameter is not declared or has a loose type, tighten it.
+            JSType paramType = param.getJSType();
+            if (paramType == null || paramType.isUnknownType() || paramType.isAllType()) {
+              paramType = getNativeType(JSTypeNative.NO_TYPE);
+            }
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+              param.setJSType(paramType.getLeastSupertype(argType));
+            }
+          }
+          // No need to traverse the rest of the arguments.
+          for (; arg != null; arg = arg.getNext()) {
+            scope = traverse(arg, scope);
+          }
+          return scope;
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
