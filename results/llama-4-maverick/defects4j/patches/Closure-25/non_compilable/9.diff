diff --git a/tmp/72cf971a-79e7-4d45-8d27-381c9cdf06ef_buggy.java b/tmp/70578fbe-c664-47fd-bd7b-667c74019e0b_fixed.java
index b98f0a7..21476c7 100644
--- a/tmp/72cf971a-79e7-4d45-8d27-381c9cdf06ef_buggy.java
+++ b/tmp/70578fbe-c664-47fd-bd7b-667c74019e0b_fixed.java
@@ -1,29 +1,43 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backwards inference.
+        int paramNum = 0;
+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+          scope = traverse(arg, scope);
+          if (ct.hasParameters() && (paramNum < ct.getParameters().size())) {
+            Node formalParam = ct.getParameters().get(paramNum).getNode();
+            if (formalParam.getJSType() != null) {
+              // NOTE: We could do much, much better here by
+              // being more aware of the expected type.
+              arg.inferType(getTypeInferenceEngine(), formalParam.getJSType());
+            }
+          }
+          paramNum++;
+        }
+        return scope;
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
