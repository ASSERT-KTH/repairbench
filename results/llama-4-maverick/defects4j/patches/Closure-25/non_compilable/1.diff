diff --git a/tmp/dae77dc5-6c90-4788-a7fe-4c0328f73b3e_buggy.java b/tmp/2790474e-46b0-4864-9af7-e31b8f44abd2_fixed.java
index b98f0a7..da28603 100644
--- a/tmp/dae77dc5-6c90-4788-a7fe-4c0328f73b3e_buggy.java
+++ b/tmp/2790474e-46b0-4864-9af7-e31b8f44abd2_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backwards inference: if the result of 'new F(x)' is the same as 'x',
+        // we can infer that 'x' is an instance of 'F'.
+        // See https://github.com/google/closure-compiler/issues/2769
+        if (type.getImplicitPrototype() == getNativeType(JSTypeNative.OBJECT_PROTOTYPE) && n.getParent().isExprResult()) {
+          Node arg = constructor.getNext();
+          if (arg != null && arg.getNext() == null) {
+            updateScopeForTypeBeforeCast(n, scope, arg, type);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
