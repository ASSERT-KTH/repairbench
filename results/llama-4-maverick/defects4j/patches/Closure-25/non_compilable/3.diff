diff --git a/tmp/53d7ba75-ddd7-4c1a-b067-17c4b67e3596_buggy.java b/tmp/24b24633-2d65-4f20-9725-71223bfe1dfe_fixed.java
index b98f0a7..b2ffb27 100644
--- a/tmp/53d7ba75-ddd7-4c1a-b067-17c4b67e3596_buggy.java
+++ b/tmp/24b24633-2d65-4f20-9725-71223bfe1dfe_fixed.java
@@ -1,29 +1,58 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backwards inference: if the result of 'new F(y)' is assigned to a variable,
+        // we can infer that 'y' is a valid argument to 'F'.
+        int paramCount = ct.getParameters().size();
+        int argCount = n.getChildCount() - 1;
+        if (paramCount > 0 && argCount >= paramCount - 1) {
+          Node lastParam = ct.getParameters().get(paramCount - 1);
+          if (lastParam.isVarArgs()) {
+            // var args can take any number of arguments
+            argCount = paramCount;
+          }
+          Node arg = n.getSecondChild();
+          for (int i = 0; i < argCount; i++) {
+            if (arg != null) {
+              scope = traverse(arg, scope);
+              if (i < paramCount) {
+                JSType paramType = ct.getParameters().get(i).getJSType();
+                if (paramType != null) {
+                  arg.setJSType(paramType);
+                  scope = updateScopeForTypeCheck(scope, arg, paramType);
+                }
+              }
+              arg = arg.getNext();
+            }
+          }
+          // continue with the rest of the arguments
+          for (; arg != null; arg = arg.getNext()) {
+            scope = traverse(arg, scope);
+          }
+          return scope;
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
