diff --git a/tmp/04183ae4-2bb8-49cf-988e-b7148e941f95_buggy.java b/tmp/ac18d47d-29ce-4974-9663-a75d416a9a5e_fixed.java
index b98f0a7..0afeded 100644
--- a/tmp/04183ae4-2bb8-49cf-988e-b7148e941f95_buggy.java
+++ b/tmp/ac18d47d-29ce-4974-9663-a75d416a9a5e_fixed.java
@@ -1,29 +1,49 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Backwards inference: if the result of `new F(y)` is a known type,
+          // then we know that the parameter type of F must be a supertype of the type of y.
+          if (n.getFirstFirstChild().isThis()) {
+            // Don't do backwards inference if the ctor call is a super() call.
+          } else if (n.getJSType() != null && !n.getJSType().isUnknownType()) {
+            // If the result of 'new F(y)' is not unknown, use it to infer the type of y.
+            FunctionType fnType = ct.getTypeOfThis();
+            if (fnType.isConstructor() && fnType.getParameters().size() > 0) {
+              Node argumentNode = constructor.getNext();
+              if (argumentNode != null) {
+                JSType argumentType = argumentNode.getJSType();
+                if (argumentType != null) {
+                  // Get the type of the first parameter
+                  JSType parameterType = fnType.getParameterType(0);
+                  // Infer the type of y by making it a subtype of the parameter type
+                  argumentType = argumentType.getGreatestSubtype(parameterType);
+                  argumentNode.setJSType(argumentType);
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
