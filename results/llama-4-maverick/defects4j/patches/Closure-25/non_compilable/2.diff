diff --git a/tmp/115c7048-6aba-46ba-a687-355fd001a8df_buggy.java b/tmp/3a2bad1d-3ee5-4c8e-a8b9-3accc37f6794_fixed.java
index b98f0a7..365c6d5 100644
--- a/tmp/115c7048-6aba-46ba-a687-355fd001a8df_buggy.java
+++ b/tmp/3a2bad1d-3ee5-4c8e-a8b9-3accc37f6794_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Backwards inference.
+                int paramNum = 0;
+                for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramNum++) {
+                    Node formalParam = ct.getParameter(paramNum);
+                    JSType formalParamType = formalParam != null ? formalParam.getJSType() : null;
+                    if (formalParamType != null && !formalParamType.isUnknownType()) {
+                        scope = traverseBackwards(arg, scope, formalParamType);
+                    } else {
+                        scope = traverse(arg, scope);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
