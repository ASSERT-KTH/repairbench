diff --git a/tmp/a9582863-0d8d-479d-8896-8816f2374b33_buggy.java b/tmp/c0d0ae1a-3e3e-430b-8a70-cac62e6f275f_fixed.java
index b98f0a7..3f49b74 100644
--- a/tmp/a9582863-0d8d-479d-8896-8816f2374b33_buggy.java
+++ b/tmp/c0d0ae1a-3e3e-430b-8a70-cac62e6f275f_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backwards inference: if the result of `new F(y)` has a type,
+        // then `y` must be a valid argument to the (possibly unknown) constructor F.
+        // TODO(b/117621661): this is a very incomplete handling of backwards inference for constructors.
+        // It doesn't handle multiple arguments or cases where `F` is declared as a variable rather than a function.
+        Node argument = constructor.getNext();
+        if (argument != null && argument.getNext() == null) {
+          JSType parameterType = ct.getParameterType();
+          if (parameterType != null) {
+            scope = traverseBackwards(argument, parameterType, scope);
+          }
+        }
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
