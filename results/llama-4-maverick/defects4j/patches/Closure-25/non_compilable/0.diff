diff --git a/tmp/b5ac6bc3-ee82-46b3-979d-5a6009220e4a_buggy.java b/tmp/9b8dc688-a447-4033-80e5-27e0bf1fa530_fixed.java
index b98f0a7..d8813a9 100644
--- a/tmp/b5ac6bc3-ee82-46b3-979d-5a6009220e4a_buggy.java
+++ b/tmp/9b8dc688-a447-4033-80e5-27e0bf1fa530_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+        // Backwards inference: If the result of 'new F(y)' is assigned to a variable,
+        // we want to update the type of 'y' based on the type of 'F's parameter.
+        int paramIndex = 0;
+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext(), paramIndex++) {
+          scope = traverse(arg, scope);
+          // If the argument is a formal parameter, update its type.
+          if (arg.isName()) {
+            String name = arg.getString();
+            JSType paramType = ct.getParameterTypeAt(paramIndex);
+            if (paramType != null && scope.hasSlot(name)) {
+              TypedVar var = scope.getVar(name);
+              if (var != null) {
+                var.getType().restrictByNotNullOrUndefined();
+                JSType restricted = var.getType().getRestrictedTypeGivenToOtherType(paramType);
+                scope = updateScopeType(scope, arg, restricted);
+              }
+            }
+          }
+        }
+        return scope;
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
