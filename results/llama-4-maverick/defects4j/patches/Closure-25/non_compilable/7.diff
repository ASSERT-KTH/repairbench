diff --git a/tmp/a413650a-0290-46e9-a4b8-2cbcd5b1f176_buggy.java b/tmp/42a99c4a-fcd8-4f13-985b-54570920beef_fixed.java
index b98f0a7..5a08d71 100644
--- a/tmp/a413650a-0290-46e9-a4b8-2cbcd5b1f176_buggy.java
+++ b/tmp/42a99c4a-fcd8-4f13-985b-54570920beef_fixed.java
@@ -1,29 +1,53 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Backwards inference for the arguments.
+          Node arg = constructor.getNext();
+          Node parameter = ct.getParameters();
+          while (arg != null && parameter != null) {
+            // Type inference for the arguments.
+            scope = traverse(arg, scope);
+            JSType parameterType = parameter.getJSType();
+            if (parameterType != null) {
+              // Type check for the arguments.
+              JSType argType = arg.getJSType();
+              if (argType != null) {
+                argType = argType.getLeastSupertype(parameterType);
+                scope = updateScopeForTypeMismatch(scope, arg, argType, parameterType);
+              }
+            }
+            arg = arg.getNext();
+            parameter = parameter.getNext();
+          }
+          // traverse remaining arguments
+          while (arg != null) {
+            scope = traverse(arg, scope);
+            arg = arg.getNext();
+          }
+          n.setJSType(type);
+          return scope;
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
