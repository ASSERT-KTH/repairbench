diff --git a/tmp/64f27272-8944-46e0-8f64-eaeec725a375_buggy.java b/tmp/40897bd4-8dcb-477c-85ff-917dc6b5f751_fixed.java
index e69de29..6030dfd 100644
--- a/tmp/64f27272-8944-46e0-8f64-eaeec725a375_buggy.java
+++ b/tmp/40897bd4-8dcb-477c-85ff-917dc6b5f751_fixed.java
@@ -0,0 +1,54 @@
+@Override
+public List<Connection.KeyVal> formData() {
+    List<Connection.KeyVal> formData = new ArrayList<>();
+
+    for (Element el : this.children()) {
+        if (!el.hasAttr("disabled")) {
+            if (el.tag() instanceof FormElement) {
+                // recurse children if a form element (i.e. inputs within nested forms)
+                for (Connection.KeyVal subData : ((FormElement) el).formData()) {
+                    formData.add(subData);
+                }
+            } else if (el instanceof FormElement) {
+                // pass on non-disabled children elements that are not nested in a form (i.e. elements within this form)
+                formData.addAll(((FormElement) el).formData());
+            } else {
+                if (el.hasAttr("name")) {
+                    String name = el.attr("name");
+                    if (name.length() == 0) continue;
+                    String value = el.hasAttr("value") ? el.attr("value") : "";
+                    if (el.tag().getName().equals("select")) {
+                        Elements options = el.select("option[selected]");
+                        boolean set = false;
+                        for (Element option : options) {
+                            String val = option.attr("value");
+                            if (val.isEmpty()) val = option.text();
+                            formData.add(Connection.KeyVal.create(name, val));
+                            set = true;
+                        }
+                        if (!set && options.size() == 0) { // the form spec requires that the first unset option be used
+                            Element option = el.select("option").first();
+                            if (option != null) {
+                                String val = option.attr("value");
+                                if (val.isEmpty()) val = option.text();
+                                formData.add(Connection.KeyVal.create(name, val));
+                            }
+                        }
+                    } else if (el.tag().getName().equals("input") && el.attr("type").equalsIgnoreCase("checkbox")) {
+                        if (el.hasAttr("checked")) {
+                            formData.add(Connection.KeyVal.create(name, value.isEmpty() ? "on" : value));
+                        }
+                    } else if (el.tag().getName().equals("input") && el.attr("type").equalsIgnoreCase("radio")) {
+                        if (el.hasAttr("checked")) {
+                            formData.add(Connection.KeyVal.create(name, value));
+                        }
+                    } else {
+                        formData.add(Connection.KeyVal.create(name, value));
+                    }
+                }
+            }
+        }
+    }
+
+    return formData;
+}
\ No newline at end of file
