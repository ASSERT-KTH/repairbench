diff --git a/tmp/3a092bda-f320-4f11-ae47-4ce0b6d03c84_buggy.java b/tmp/45467f7e-337c-4d20-a4fa-8de996308161_fixed.java
index e69de29..b54b26f 100644
--- a/tmp/3a092bda-f320-4f11-ae47-4ce0b6d03c84_buggy.java
+++ b/tmp/45467f7e-337c-4d20-a4fa-8de996308161_fixed.java
@@ -0,0 +1,52 @@
+@Override
+public List<Connection.KeyVal> formData() {
+    List<Connection.KeyVal> formData = new ArrayList<>();
+
+    for (Element el : this.children()) {
+        if (!el.hasAttr("disabled")) {
+            if (el.tag().getName().equals("input")) {
+                if (el.attr("type").equals("radio") || el.attr("type").equals("checkbox")) {
+                    if (el.hasAttr("checked")) {
+                        formData.add(Connection.KeyVal.create(el.attr("name"), el.val()));
+                    }
+                } else {
+                    formData.add(Connection.KeyVal.create(el.attr("name"), el.val()));
+                }
+            } else if (el.tag().getName().equals("select")) {
+                Elements options = el.select("option[selected]");
+                boolean hasDefault = false;
+                for (Element option : options) {
+                    formData.add(Connection.KeyVal.create(el.attr("name"), option.val()));
+                    hasDefault = true;
+                }
+                if (!hasDefault) {
+                    Element selectDefault = options.size() > 0 ? options.get(0) : el.select("option").first();
+                    if (selectDefault != null) {
+                        formData.add(Connection.KeyVal.create(el.attr("name"), selectDefault.val()));
+                    }
+                }
+            } else if (el.tag().getName().equals("textarea")) {
+                formData.add(Connection.KeyVal.create(el.attr("name"), el.text()));
+            }
+        }
+    }
+
+    // flatten multiple inputs of same name into one value
+    Map<String, List<String>> mergeMap = new LinkedHashMap<>();
+    for (Connection.KeyVal kv : formData) {
+        List<String> valsList = mergeMap.computeIfAbsent(kv.key(), k -> new ArrayList<>());
+        valsList.add(kv.value());
+    }
+    List<Connection.KeyVal> compressed = new ArrayList<>();
+    for (Map.Entry<String, List<String>> entry : mergeMap.entrySet()) {
+        String name = entry.getKey();
+        List<String> vals = entry.getValue();
+        if (vals.size() == 1) {
+            compressed.add(Connection.KeyVal.create(name, vals.get(0)));
+        } else {
+            compressed.add(Connection.KeyVal.create(name, vals));
+        }
+    }
+
+    return compressed;
+}
\ No newline at end of file
