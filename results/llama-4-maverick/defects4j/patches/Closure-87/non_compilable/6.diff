diff --git a/tmp/7353e2d0-8c61-4ed1-9c8f-47ab4961b892_buggy.java b/tmp/e8405e36-5604-42cd-9204-a57e0c3eaa3b_fixed.java
index 19fd63e..be31d07 100644
--- a/tmp/7353e2d0-8c61-4ed1-9c8f-47ab4961b892_buggy.java
+++ b/tmp/e8405e36-5604-42cd-9204-a57e0c3eaa3b_fixed.java
@@ -1,24 +1,33 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
           // We only have to worry about methods with an implicit 'this'
           // param, or this doesn't happen.
-
+          Node expr = maybeExpr.getFirstChild();
+          if (expr != null && expr.isCall()) {
+            Node target = expr.getFirstChild();
+            if (target != null && target.isGetProp()) {
+              return NodeUtil.getJSType(target).isFunctionType() &&
+                  !target.isQualifiedName();
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
