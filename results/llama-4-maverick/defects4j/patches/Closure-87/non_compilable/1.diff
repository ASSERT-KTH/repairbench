diff --git a/tmp/c68bad3d-2b19-426b-9f90-f0654e78261b_buggy.java b/tmp/8655ddfa-9743-4246-828c-a9a2ab624e15_fixed.java
index 19fd63e..b93ea94 100644
--- a/tmp/c68bad3d-2b19-426b-9f90-f0654e78261b_buggy.java
+++ b/tmp/8655ddfa-9743-4246-828c-a9a2ab624e15_fixed.java
@@ -1,24 +1,42 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.isExprResult()) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
           // We only have to worry about methods with an implicit 'this'
           // param, or this doesn't happen.
+          Node expr = maybeExpr.getFirstChild();
+          if (expr.isCall()) {
+            Node left = expr.getFirstChild();
+            // If the call is on a property, and that property is not a simple
+            // name (i.e. isn't 'foo' in 'foo.bar'), or a simple property access
+            // (i.e. isn't 'bar' in 'foo.bar') then we bail. This is simpler than
+            // trying to track all complex LHS expressions.
+            if (left.isGetProp()) {
+              Node target = left.getFirstChild();
+              if (!target.isName() && !target.isGetProp()) {
+                return false;
+              }
+            } else {
+              return false;
+            }
+          }
+        }
 
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
\ No newline at end of file
