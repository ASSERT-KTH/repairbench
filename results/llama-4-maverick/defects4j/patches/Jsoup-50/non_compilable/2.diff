diff --git a/tmp/f65826c2-7018-4d79-a890-bca7f6a7f388_buggy.java b/tmp/1dc1e30d-d2a5-4ec9-8ef1-edebe32d96c6_fixed.java
index 25ca093..45059de 100644
--- a/tmp/f65826c2-7018-4d79-a890-bca7f6a7f388_buggy.java
+++ b/tmp/1dc1e30d-d2a5-4ec9-8ef1-edebe32d96c6_fixed.java
@@ -1,52 +1,60 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
     // look for BOM - overrides any other header or input
+    if (byteData.limit() >= 3 && byteData.get(0) == (byte) 0xEF && byteData.get(1) == (byte) 0xBB && byteData.get(2) == (byte) 0xBF) {
+        charsetName = "UTF-8";
+        byteData.position(3);
+    } else if (byteData.limit() >= 4 && byteData.get(0) == (byte) 0x00 && byteData.get(1) == (byte) 0x00 && byteData.get(2) == (byte) 0xFE && byteData.get(3) == (byte) 0xFF) {
+        charsetName = "UTF-32BE";
+        byteData.position(4);
+    } else if (byteData.limit() >= 4 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE && byteData.get(2) == (byte) 0x00 && byteData.get(3) == (byte) 0x00) {
+        charsetName = "UTF-32LE";
+        byteData.position(4);
+    } else if (byteData.limit() >= 2 && byteData.get(0) == (byte) 0xFE && byteData.get(1) == (byte) 0xFF) {
+        charsetName = "UTF-16BE";
+        byteData.position(2);
+    } else if (byteData.limit() >= 2 && byteData.get(0) == (byte) 0xFF && byteData.get(1) == (byte) 0xFE) {
+        charsetName = "UTF-16LE";
+        byteData.position(2);
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
-            Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        Element meta = doc.selectFirst("meta[http-equiv=content-type], meta[charset]");
+        if (meta != null) { 
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { 
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { 
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
