diff --git a/tmp/6b7bb4fa-dee8-4159-b464-37b51bdf4e64_buggy.java b/tmp/08ecda5c-0744-464d-a234-999a69ba83f5_fixed.java
index a7d0787..102c509 100644
--- a/tmp/6b7bb4fa-dee8-4159-b464-37b51bdf4e64_buggy.java
+++ b/tmp/08ecda5c-0744-464d-a234-999a69ba83f5_fixed.java
@@ -1,54 +1,70 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
     public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
     {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (PatternOptionBuilder.NUMBER_VALUE == Number.class && NumberFormat.getInstance().getClass().equals(java.text.DecimalFormat.class))
+        {
+            try {
+                return (T) NumberFormat.getInstance().parse(str);
+            } catch (java.text.ParseException e) {
+                throw new ParseException(e.getMessage());
+            }
+        }
         else
         {
-            return null;
+            try {
+                return (T) MethodUtil.invokeStaticMethod(clazz, "valueOf", new Object[]{str});
+            } catch (NoSuchMethodException e) {
+                throw new ParseException("Unable to parse '" + str + "' for class " + clazz.getName());
+            } catch (IllegalAccessException e) {
+                throw new ParseException("Unable to access valueOf method in " + clazz.getName());
+            } catch (InvocationTargetException e) {
+                throw new ParseException("Unable to invoke valueOf method in " + clazz.getName() + ": " + e.getCause().getMessage());
+            }
         }
     }
\ No newline at end of file
