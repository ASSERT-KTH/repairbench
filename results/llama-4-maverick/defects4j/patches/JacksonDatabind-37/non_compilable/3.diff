diff --git a/tmp/6de18706-ed1f-4248-a33f-a03812c6ec41_buggy.java b/tmp/2b91f898-1dc7-4000-94df-783ff23e13b2_fixed.java
index e5ad041..e4d07d4 100644
--- a/tmp/6de18706-ed1f-4248-a33f-a03812c6ec41_buggy.java
+++ b/tmp/2b91f898-1dc7-4000-94df-783ff23e13b2_fixed.java
@@ -1,19 +1,21 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
+    // 20-Apr-2016, tatu: For [databind#1083], try to support "narrowing" even if
+    //    not really sub-class. Bit of a hack for now, but may be needed for
+    //    some cases.
+    if (_class.isAssignableFrom(subclass)) {
+        // First: if we have "value handler", we need to re-create
+        JavaType subtype = _valueHandler == null ? null : SimpleType.constructUnsafe(subclass, _bindings);
+        // but either way, need to re-create type (superclass etc)
+        return new SimpleType(subclass, subtype == null ? _bindings : subtype.getBindings(),
+                _superClass, _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
+    }
     // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
     throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
             +_class.getName());
 }
\ No newline at end of file
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
-                _valueHandler, _typeHandler, _asStatic);
-    }
