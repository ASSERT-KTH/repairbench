diff --git a/tmp/b15e0d4c-8873-46f4-8fe1-6df1092e2208_buggy.java b/tmp/4f0f3176-611a-4b19-8307-7eb83df0113b_fixed.java
index c4b260c..377c9b8 100644
--- a/tmp/b15e0d4c-8873-46f4-8fe1-6df1092e2208_buggy.java
+++ b/tmp/4f0f3176-611a-4b19-8307-7eb83df0113b_fixed.java
@@ -1,51 +1,57 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check if we need to re-encode with a different charset.
+        // We'll use a slightly more lenient check here - any BOM or declaration of UTF-16/32 will do.
+        if (docData.startsWith("\uFEFF") || docData.startsWith("\uFFFE") || 
+                docData.contains("charset=utf-16") || docData.contains("charset=utf-32")) {
+            // Re-encode with the correct charset.
+            byteData.rewind();
+            docData = Charset.forName("UTF-16").decode(byteData).toString();
+            // Remove the BOM if present.
+            if (docData.startsWith("\uFEFF")) {
+                docData = docData.substring(1);
+            }
+            charsetName = "UTF-16";
+        }
+        
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-        }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
