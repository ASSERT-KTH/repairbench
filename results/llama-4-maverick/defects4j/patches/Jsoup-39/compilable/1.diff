diff --git a/tmp/e07b2722-b7c4-485d-a3db-69b5c24998d2_buggy.java b/tmp/1fa8b324-4c23-493c-a3c0-d22248eacccf_fixed.java
index c4b260c..ccce098 100644
--- a/tmp/e07b2722-b7c4-485d-a3db-69b5c24998d2_buggy.java
+++ b/tmp/1fa8b324-4c23-493c-a3c0-d22248eacccf_fixed.java
@@ -1,51 +1,54 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // Check if we need to re-encode with a different charset
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // UTF-8 BOM indicator. takes precedence over everything else. rarely used.
+            docData = docData.substring(1);
+            charsetName = defaultCharset;
+        }
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                if (docData.length() > 0 && docData.charAt(0) == 65279) { // re-check for BOM, now with the correct encoding
+                    docData = docData.substring(1);
+                }
+                doc = parser.parseInput(docData, baseUri);
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
-        if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        if (docData.length() > 0 && docData.charAt(0) == 65279) { // UTF-8 BOM indicator. takes precedence over everything else. rarely used.
             docData = docData.substring(1);
-            charsetName = defaultCharset;
         }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
+    if (doc != null) {
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
