diff --git a/tmp/51634b70-b210-4722-9827-699c1f11400a_buggy.java b/tmp/b5ff6eef-a5d6-4f49-a2e7-f6330d1962a1_fixed.java
index 7fb120e..7b18142 100644
--- a/tmp/51634b70-b210-4722-9827-699c1f11400a_buggy.java
+++ b/tmp/b5ff6eef-a5d6-4f49-a2e7-f6330d1962a1_fixed.java
@@ -1,16 +1,23 @@
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
-            String charset = m.group(1).trim();
+            String charset = m.group(1).trim().replaceAll("\"", "");
             charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+            try {
+                if (Charset.isSupported(charset)) return charset.toLowerCase(Locale.ENGLISH);
+                // if our charset is "unsupported" (i.e. not in the JDK's list), we drop it to the lower case (in case the
+                // charset was not in title case), and check again. Case insensitivity is defined in RFC 2978. See issue #1036
+                charset = charset.toLowerCase(Locale.ENGLISH);
+                if (Charset.isSupported(charset)) return charset;
+            } catch (IllegalArgumentException e) { // not a valid Java charset name; don't support it
+            }
         }
         return null;
     }
\ No newline at end of file
