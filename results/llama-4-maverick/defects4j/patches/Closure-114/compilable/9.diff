diff --git a/tmp/aace2109-6b16-4258-b4d4-6d7c79407144_buggy.java b/tmp/b51b5cc2-75f9-462b-8c83-bfb57a71f34e_fixed.java
index c51c8b1..9e98746 100644
--- a/tmp/aace2109-6b16-4258-b4d4-6d7c79407144_buggy.java
+++ b/tmp/b51b5cc2-75f9-462b-8c83-bfb57a71f34e_fixed.java
@@ -1,31 +1,30 @@
 private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
   Node nameNode = n.getFirstChild();
   Node parent = n.getParent();
   NameInformation ns = createNameInformation(t, nameNode);
   if (ns != null) {
-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {
+    // The RHS of the assignment is the global this or arguments or the
+    // result of a call, so it's used by the context.
+    // Don't associate it w/ the LHS.
+    if (parent.isExprResult() && NodeUtil.isExprCall(parent.getFirstChild())) {
+      recordDepScope(recordNode, ns);
+    } else if (parent.isFor() && !NodeUtil.isForIn(parent)) {
       // Patch for assignments that appear in the init,
       // condition or iteration part of a FOR loop.  Without
       // this change, all 3 of those parts try to claim the for
       // loop as their dependency scope.  The last assignment in
       // those three fields wins, which can result in incorrect
       // reference edges between referenced and assigned variables.
       //
       // TODO(user) revisit the dependency scope calculation
       // logic.
       if (parent.getFirstChild().getNext() != n) {
         recordDepScope(recordNode, ns);
       } else {
         recordDepScope(nameNode, ns);
       }
     } else {
-          // The rhs of the assignment is the caller, so it's used by the
-          // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
       recordDepScope(recordNode, ns);
     }
   }
 }
\ No newline at end of file
