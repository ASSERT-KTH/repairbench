diff --git a/tmp/049c5d7e-f23e-4dd2-bdc9-b26a5e0ef112_buggy.java b/tmp/e0708f6f-d784-4573-a15c-a00c5393f4be_fixed.java
index 63a7c80..5c445d7 100644
--- a/tmp/049c5d7e-f23e-4dd2-bdc9-b26a5e0ef112_buggy.java
+++ b/tmp/e0708f6f-d784-4573-a15c-a00c5393f4be_fixed.java
@@ -1,77 +1,90 @@
-    /**
-     * Arranges the items within a container.
-     *
-     * @param container  the container.
-     * @param constraint  the constraint.
-     * @param g2  the graphics device.
-     *
-     * @return The container size after the arrangement.
-     */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
         RectangleConstraint constraint) {
+
+    Size2D contentSize = null;
+    RectangleConstraint contentConstraint = null;
+    if (constraint.getHeightConstraintType() == LengthConstraintType.NONE) {
+        contentSize = arrangeNN(g2);
+        contentConstraint = new RectangleConstraint(constraint.getWidth(),
+                contentSize.width, LengthConstraintType.RANGE,
+                0.0, contentSize.height, LengthConstraintType.RANGE);
+    } else {
+        contentConstraint = constraint;
+    }
+
     double[] w = new double[5];
     double[] h = new double[5];
-        w[0] = constraint.getWidth();
+    w[0] = contentConstraint.getWidth();
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                new Range(0.0, contentConstraint.getHeight()),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
     w[1] = w[0];
     if (this.bottomBlock != null) {
         RectangleConstraint c2 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                contentConstraint.getHeight() - h[0]), LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+    h[2] = contentConstraint.getHeight() - h[1] - h[0];
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                new Range(0.0, contentConstraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
     h[3] = h[2];
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, contentConstraint.getWidth() - w[2]),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+    w[4] = contentConstraint.getWidth() - w[3] - w[2];
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
     if (this.centerBlock != null) {
-            this.centerBlock.arrange(g2, c5);
+        Size2D size = this.centerBlock.arrange(g2, c5);
+        w[4] = size.width;
+        h[4] = size.height;
+    } else {
+        w[4] = 0;
+        h[4] = 0;
     }
 
     if (this.topBlock != null) {
         this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                 h[0]));
     }
     if (this.bottomBlock != null) {
         this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                 w[1], h[1]));
     }
     if (this.leftBlock != null) {
         this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                 h[2]));
     }
     if (this.rightBlock != null) {
         this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                 w[3], h[3]));
     }
     if (this.centerBlock != null) {
         this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                 h[4]));
     }
+
+    if (contentSize != null) {
+        return contentSize;
+    } else {
         return new Size2D(constraint.getWidth(), constraint.getHeight());
     }
+}
\ No newline at end of file
