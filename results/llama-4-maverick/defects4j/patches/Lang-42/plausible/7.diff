diff --git a/tmp/0e248429-2bd1-4640-beb5-a68dd3543af9_buggy.java b/tmp/a259c568-9702-4cc0-8cba-5f2fdb483ca7_fixed.java
index 822447c..1b3db7b 100644
--- a/tmp/0e248429-2bd1-4640-beb5-a68dd3543af9_buggy.java
+++ b/tmp/a259c568-9702-4cc0-8cba-5f2fdb483ca7_fixed.java
@@ -1,37 +1,53 @@
     /**
      * <p>
      * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
      * passed.
      * </p>
      * 
      * @param writer
      *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
      * @param str
      *            The <code>String</code> to escape. Assumed to be a non-null value.
      * @throws IOException
      *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
      *             methods.
      * 
      * @see #escape(String)
      * @see Writer
      */
     public void escape(Writer writer, String str) throws IOException {
         int len = str.length();
         for (int i = 0; i < len; i++) {
             char c = str.charAt(i);
+            if (Character.isHighSurrogate(c)) {
+                if (i + 1 < len) {
+                    char nextChar = str.charAt(i + 1);
+                    if (Character.isLowSurrogate(nextChar)) {
+                        int codePoint = Character.toCodePoint(c, nextChar);
+                        writer.write("&#");
+                        writer.write(Integer.toString(codePoint, 10));
+                        writer.write(';');
+                        i++; // skip the next character as it's handled
+                        continue;
+                    }
+                }
+                // If we get here, it's an invalid surrogate pair, so just write the character as is
+                writer.write(c);
+            } else {
                 String entityName = this.entityName(c);
                 if (entityName == null) {
                     if (c > 0x7F) {
                         writer.write("&#");
                         writer.write(Integer.toString(c, 10));
                         writer.write(';');
                     } else {
                         writer.write(c);
                     }
                 } else {
                     writer.write('&');
                     writer.write(entityName);
                     writer.write(';');
                 }
             }
         }
+    }
\ No newline at end of file
