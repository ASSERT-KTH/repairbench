diff --git a/tmp/20332a4a-8c43-40b4-b170-4be6c75856ba_buggy.java b/tmp/c5d9fe43-da73-4a53-88d0-16468d4a4841_fixed.java
index 1c92640..3d9de59 100644
--- a/tmp/20332a4a-8c43-40b4-b170-4be6c75856ba_buggy.java
+++ b/tmp/c5d9fe43-da73-4a53-88d0-16468d4a4841_fixed.java
@@ -1,7 +1,22 @@
     /**
      * Set the name of the entry.
      * @param name the name to use
      */
     protected void setName(String name) {
-        this.name = name;
+        if (name != null && !ZipArchiveOutputStream.STORED_WITH_LANG_FLAG
+            && ZipEncodingHelper.isUTF8(name.getBytes(ZipEncoding.UTF8))) {
+            this.setGeneralPurposeBit(ZipArchiveOutputStream.USE_UTF8);
+        }
+        // Winzip (at least 9.0 SR1) has a bug where it puts the
+        // wrong unicode path extra in the central directory - even
+        // when it puts the correct one into the local file header.
+        // By now we don't use the unicode path extra for anything
+        // else so we can simply ignore the wrong extra data.
+        // See COMPRESS-171
+        // COMPRESS-176: WinZip (at least 11.2) has another bug where
+        // it uses backslashes in the file name entry
+        // COMPRESS-527: ZipFile will ignore backslashes in the file name if the Zip archive has EFS set.
+        // MS-ZIP does not specify EFS as other archivers do, so we have no choice but to always sanitize the names.
+        // See also http://www.info-zip.org/FAQ.html#backslashes
+        this.name = name.replace('\\', '/');
     }
\ No newline at end of file
