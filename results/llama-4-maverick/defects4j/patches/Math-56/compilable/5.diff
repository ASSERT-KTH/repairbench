diff --git a/tmp/00e209b3-527e-484d-97ae-0473a7cb5f3a_buggy.java b/tmp/42252257-6b94-4bbf-909c-cd5fafb190a6_fixed.java
index 2608424..bdc4b4e 100644
--- a/tmp/00e209b3-527e-484d-97ae-0473a7cb5f3a_buggy.java
+++ b/tmp/42252257-6b94-4bbf-909c-cd5fafb190a6_fixed.java
@@ -1,39 +1,26 @@
     /**
      * Convert to multidimensional counter.
      *
      * @param index Index in unidimensional counter.
      * @return the multidimensional counts.
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
+            throw new OutOfRangeException(index, 0, totalSize - 1); // Fix: Changed totalSize to totalSize - 1
         }
 
         final int[] indices = new int[dimension];
 
         int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        for (int i = dimension - 1; i >= 0; i--) { // Fix: Changed loop to iterate in reverse order
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
+            int idx = index / offset; // Fix: Simplified calculation
             indices[i] = idx;
+            index -= idx * offset; // Fix: Simplified calculation
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
         return indices;
     }
\ No newline at end of file
