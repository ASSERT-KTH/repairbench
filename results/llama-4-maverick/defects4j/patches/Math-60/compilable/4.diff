diff --git a/tmp/1d328583-9ce0-4e45-8436-98a16c6a4f33_buggy.java b/tmp/420ad6d9-7413-423e-b7e1-9316f4b5963f_fixed.java
index 3127f85..33335e1 100644
--- a/tmp/1d328583-9ce0-4e45-8436-98a16c6a4f33_buggy.java
+++ b/tmp/420ad6d9-7413-423e-b7e1-9316f4b5963f_fixed.java
@@ -1,24 +1,23 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+        if (Double.isInfinite(dev)) {
+            // For very large positive or negative values, the expression
+            // used to compute the error function (and therefore the
+            // cumulative probability) is very sensitive to the
+            // accumulation of round-off errors.  Since extreme values
+            // are effectively zero or one, we can use the mean and
+            // standard deviation to compute the extreme values
+            // directly.
+            return (x < mean) ? 0 : 1;
         }
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     }
\ No newline at end of file
