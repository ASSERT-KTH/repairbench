diff --git a/tmp/d6160d3e-2f41-4e38-999a-ae3591eed21e_buggy.java b/tmp/d06aa3ef-16c0-42ae-b967-deeeb079629e_fixed.java
index 3127f85..70beeeb 100644
--- a/tmp/d6160d3e-2f41-4e38-999a-ae3591eed21e_buggy.java
+++ b/tmp/d06aa3ef-16c0-42ae-b967-deeeb079629e_fixed.java
@@ -1,24 +1,31 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        if (Double.isInfinite(dev)) {
+            // For large deviations, the erf function is asymptotic to -1/(dev * sqrt(pi)) * exp(-dev^2/2)
+            // so we can use the approximation 0.5 - exp(-dev^2/2) / (sqrt(pi) * dev) without having to worry about erf's convergence.
+            final double sign = Math.copySign(1.0, dev);
+            final double ratio =  standardDeviation * FastMath.sqrt(2.0) / dev;
+            final double factor = 0.5 - sign * ratio * FastMath.exp(-dev * dev / (2 * standardDeviation * standardDeviation)) / FastMath.sqrt(Math.PI);
+            return Math.max(Math.min(factor, 1.0), 0.0); // clamp to [0, 1]
+        }
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
