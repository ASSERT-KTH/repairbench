diff --git a/tmp/2652b23a-4805-4492-90e1-e6581cac62e3_buggy.java b/tmp/06e121db-00d8-43b3-96b9-7023cf8ac667_fixed.java
index 3127f85..a093c9f 100644
--- a/tmp/2652b23a-4805-4492-90e1-e6581cac62e3_buggy.java
+++ b/tmp/06e121db-00d8-43b3-96b9-7023cf8ac667_fixed.java
@@ -1,24 +1,28 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        if (Double.isInfinite(dev)) {
+            // Avoid overflow in Erf.erf.
+            return (x < mean) ? 0.0 : 1.0;
+        }
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                     (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
             if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
             } else {
                 throw ex;
             }
         }
     }
\ No newline at end of file
