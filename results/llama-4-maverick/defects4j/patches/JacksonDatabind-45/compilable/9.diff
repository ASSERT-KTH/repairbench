diff --git a/tmp/03cb6e03-49ed-4ede-b20a-428b86c8f8b0_buggy.java b/tmp/7b2e7a13-13a8-4375-aeb2-bf001dbbba39_fixed.java
index 0dbce00..c0cf7d2 100644
--- a/tmp/03cb6e03-49ed-4ede-b20a-428b86c8f8b0_buggy.java
+++ b/tmp/7b2e7a13-13a8-4375-aeb2-bf001dbbba39_fixed.java
@@ -1,33 +1,38 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property != null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
         if (format != null) {
-
             // Simple case first: serialize as numeric timestamp?
             JsonFormat.Shape shape = format.getShape();
             if (shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
-
-                if (format.getShape() == JsonFormat.Shape.STRING) {
+            if (shape == JsonFormat.Shape.STRING) {
                 TimeZone tz = format.getTimeZone();
                 final String pattern = format.hasPattern()
                                 ? format.getPattern()
                                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                                 ? format.getLocale()
                                 : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
-            }
-        }
+            // 21-Feb-2016, tatu: ... otherwise, important to check `Shape.ANY` before
+            //    falling back to general handling (which basically reverts to "use defaults")
+            if (shape == JsonFormat.Shape.ANY) {
                 return this;
             }
+        }
+    }
+    // Default (and "Shape.ANY") handled by general configuration:
+    Boolean useTimestamp = serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+    return withFormat(useTimestamp, null);
+}
\ No newline at end of file
