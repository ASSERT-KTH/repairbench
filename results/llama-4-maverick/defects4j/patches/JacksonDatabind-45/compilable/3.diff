diff --git a/tmp/42a2ee62-6c06-4e85-8378-02f3674120ce_buggy.java b/tmp/1f23f264-c9eb-4400-81af-4ed117928af5_fixed.java
index 0dbce00..ee6b105 100644
--- a/tmp/42a2ee62-6c06-4e85-8378-02f3674120ce_buggy.java
+++ b/tmp/1f23f264-c9eb-4400-81af-4ed117928af5_fixed.java
@@ -1,33 +1,50 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property != null) {
         JsonFormat.Value format = serializers.getAnnotationIntrospector().findFormat((Annotated)property.getMember());
         if (format != null) {
-
             // Simple case first: serialize as numeric timestamp?
             JsonFormat.Shape shape = format.getShape();
             if (shape.isNumeric()) {
                 return withFormat(Boolean.TRUE, null);
             }
 
             if (format.getShape() == JsonFormat.Shape.STRING) {
                 TimeZone tz = format.getTimeZone();
                 final String pattern = format.hasPattern()
                                 ? format.getPattern()
                                 : StdDateFormat.DATE_FORMAT_STR_ISO8601;
                 final Locale loc = format.hasLocale()
                                 ? format.getLocale()
                                 : serializers.getLocale();
                 SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
                 if (tz == null) {
                     tz = serializers.getTimeZone();
                 }
                 df.setTimeZone(tz);
                 return withFormat(Boolean.FALSE, df);
             }
+
+            // But Shape.ANY is a bit different, since it means "default", basically.
+            // So, let's check that, and fall back to contextual configuration.
+            if (shape == JsonFormat.Shape.ANY) {
+                Boolean shouldWriteAsTimestamp = _defaultAsBoolean(serializers, SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+                return withFormat(shouldWriteAsTimestamp, null);
             }
         }
+    }
+    // No @JsonFormat => default to user config
+    Boolean shouldWriteAsTimestamp = _defaultAsBoolean(serializers, SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
+    if (_useTimestamp == shouldWriteAsTimestamp) {
         return this;
     }
+    return withFormat(shouldWriteAsTimestamp, null);
+}
+
+// Utility method to identify the effective value of a boolean feature
+// in a SerializerProvider (which may or may not be a DefaultSerializerProvider)
+private Boolean _defaultAsBoolean(SerializerProvider serializers, SerializationFeature feature) {
+    return serializers.isEnabled(feature);
+}
\ No newline at end of file
