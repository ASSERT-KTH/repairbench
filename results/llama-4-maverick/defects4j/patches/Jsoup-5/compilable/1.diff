diff --git a/tmp/59123839-2ad9-4202-85b1-234e6d965f95_buggy.java b/tmp/10983ae2-f432-4f45-9811-10bd9d3b0548_fixed.java
index 39dd8e7..8dcb911 100644
--- a/tmp/59123839-2ad9-4202-85b1-234e6d965f95_buggy.java
+++ b/tmp/10983ae2-f432-4f45-9811-10bd9d3b0548_fixed.java
@@ -1,30 +1,31 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
 
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
+            tq.consume(SQ); // Consume the closing quote
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
+            tq.consume(DQ); // Consume the closing quote
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
+    if (!key.isEmpty())
         return Attribute.createFromEncoded(key, value);
     else {
-            tq.consume();
-                
+        // If key is empty, it means the '=' was encountered without a key, so we should not consume the next character
         return null;
     }
 }
\ No newline at end of file
