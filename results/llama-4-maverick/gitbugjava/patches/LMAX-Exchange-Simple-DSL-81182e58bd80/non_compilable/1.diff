diff --git a/tmp/738d68b7-ae31-49d9-9d2a-1b75c18c4ad8_buggy.java b/tmp/8fb2c8e0-5377-4651-9612-0a406123fbc5_fixed.java
index f506479..633ce80 100644
--- a/tmp/738d68b7-ae31-49d9-9d2a-1b75c18c4ad8_buggy.java
+++ b/tmp/8fb2c8e0-5377-4651-9612-0a406123fbc5_fixed.java
@@ -1,64 +1,71 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            // Consume the value if it can be associated with the last arg
+            final List<String> argValues = valuesByArg.get(argsByName.values().stream().filter(SimpleDslArg::isAllowMultipleValues).findFirst().orElse(null));
+            if (argValues != null && !argValues.isEmpty()) {
+                checkValidValue(argValues.get(0), argument.originalValue);
+                argValues.add(argument.originalValue);
+                arguments.pollFirst();
+            } else {
+                break;
             }
-
+        } else {
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
             final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
+    }
 
-            // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
