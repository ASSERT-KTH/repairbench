diff --git a/tmp/a7f58bf7-ff48-4b04-ad90-9ef7758b9fe4_buggy.java b/tmp/167a0610-1677-46db-9419-c8e6171f8d2f_fixed.java
index 0583946..4aa558e 100644
--- a/tmp/a7f58bf7-ff48-4b04-ad90-9ef7758b9fe4_buggy.java
+++ b/tmp/167a0610-1677-46db-9419-c8e6171f8d2f_fixed.java
@@ -1,30 +1,36 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
+    // Special handling for empty void or self-closing tags as a last child (e.g. <foo><bar/></foo>)
+    // We want to avoid outputting whitespace in that case
+    if (trimTrailing && isBlank && nextSibling() instanceof Element && ((Element) nextSibling()).isEmpty()) {
+        trimTrailing = false;
+    }
+
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
