diff --git a/tmp/ed1fdb44-acaf-405d-87dd-0693d4ee7765_buggy.java b/tmp/035c6ced-619a-49d9-9c34-135eb5a46bc1_fixed.java
index 27f2719..89e9542 100644
--- a/tmp/ed1fdb44-acaf-405d-87dd-0693d4ee7765_buggy.java
+++ b/tmp/035c6ced-619a-49d9-9c34-135eb5a46bc1_fixed.java
@@ -1,90 +1,130 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
+    if (deviceSession == null || !(sentence.matches("![35A-D],.*") || sentence.matches("!4,.*"))) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
+    } else if (type.equals("4")) {
+
+        String[] values = sentence.split(",");
+        for (int i = 1; i < Math.min(values.length, 9); i++) {
+            String value = values[i].trim();
+            if (!value.isEmpty()) {
+                switch (i) {
+                    case 1:
+                        position.set(Position.KEY_ALARM, decodeAlarm(value));
+                        break;
+                    case 2:
+                        position.set("phone1", value);
+                        break;
+                    case 3:
+                        position.set("phone2", value);
+                        break;
+                    case 4:
+                        position.set(Position.KEY_ODOMETER, Integer.parseInt(value) * 1000);
+                        break;
+                    case 5:
+                        position.set(Position.KEY_ODOMETER_TRIP, Integer.parseInt(value) * 1000);
+                        break;
+                    case 6:
+                        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                        break;
+                    case 7:
+                        position.set("workTime", Integer.parseInt(value) * 60);
+                        break;
+                    case 8:
+                        position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(value));
+                        break;
+                    default:
+                        break;
+                }
+            }
+        }
+
+        getLastLocation(position, null);
+
+        return position;
     }
 
     return null;
 }
\ No newline at end of file
