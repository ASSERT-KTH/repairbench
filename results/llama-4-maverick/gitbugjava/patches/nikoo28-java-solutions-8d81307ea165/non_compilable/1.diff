diff --git a/tmp/cfe386c9-08fb-42cb-9990-c2c8833b67c6_buggy.java b/tmp/a538881d-bb01-49a8-b65d-7e4d33d3491e_fixed.java
index 9739964..3c52f2a 100644
--- a/tmp/cfe386c9-08fb-42cb-9990-c2c8833b67c6_buggy.java
+++ b/tmp/a538881d-bb01-49a8-b65d-7e4d33d3491e_fixed.java
@@ -1,27 +1,31 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
-        spans[i] = i - indexStack.peek();
+        spans[i] = i - indexStack.peek(); // This line is incorrect. It should be i - indexStack.peek() because the span is the difference between the current index and the index of the previous greater element. However, the correct calculation should consider the case when the stack is not empty.
+
+      // The correct calculation when the stack is not empty should be: 
+      // spans[i] = i - indexStack.peek() is correct in terms of logic, but we need to consider that the span is the number of consecutive days (including the current day) with a price less than or equal to the current price.
+      // So the correct line should be: spans[i] = (indexStack.isEmpty()) ? (i + 1) : (i - indexStack.peek()), which is already implemented. The issue seems to be elsewhere.
 
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
