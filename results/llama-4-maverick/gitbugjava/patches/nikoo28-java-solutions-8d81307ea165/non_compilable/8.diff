diff --git a/tmp/6497b883-e586-41b8-8ed0-0280f671f3d7_buggy.java b/tmp/c62c4658-41f9-436f-a386-d68a25052ec1_fixed.java
index 9739964..8b90133 100644
--- a/tmp/6497b883-e586-41b8-8ed0-0280f671f3d7_buggy.java
+++ b/tmp/c62c4658-41f9-436f-a386-d68a25052ec1_fixed.java
@@ -1,27 +1,50 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
-        spans[i] = i - indexStack.peek();
+        spans[i] = i - indexStack.peek(); // This line is incorrect. It should be spans[i] = (i - indexStack.peek()) instead of just i - indexStack.peek() because the span is the difference between the current index and the index of the previous greater element. However the issue here is the logic for calculating span when stack is not empty.
+
+      // The correct logic should be: 
+      // spans[i] = i - indexStack.peek() is almost correct but the correct logic is to consider 1 + the difference between current index and the top of stack because we need to include the current day in span count.
+      // The issue is actually in the understanding of the span. Span is the number of days (including today) for which the price was less than or equal to today's price.
+
+      indexStack.push(i);
+    }
+
+    // Fix the logic for spans[i] when indexStack is not empty. The span should be the difference between the current index and the top of the stack (which is the index of the previous greater price), plus 1 (to include the current day in the count) is not needed here as the difference itself gives the count of days.
+    // However a simple fix can be applied by changing the line where we calculate spans[i] when the stack is not empty.
+
+    // After re-evaluating the code, it seems the issue is with the line where we calculate span when the stack is not empty. Instead of directly returning i - indexStack.peek(), we should directly use this formula as it gives the correct count of consecutive days with a price less than or equal to the current day's price.
+
+    // Upon closer inspection, the actual fix is quite simple.
+
+    // Let's directly modify the buggy line.
+
+    for (int i = 1; i < prices.length; i++) {
+      while (!indexStack.isEmpty()
+          && prices[indexStack.peek()] <= prices[i])
+        indexStack.pop();
+
+      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
 
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
