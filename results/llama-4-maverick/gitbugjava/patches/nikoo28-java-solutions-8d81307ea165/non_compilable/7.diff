diff --git a/tmp/c9582871-bbbe-4b2e-8538-fd43bd739b5f_buggy.java b/tmp/55a0901f-dd72-4061-b4d5-a18882fd19c4_fixed.java
index 9739964..14deb09 100644
--- a/tmp/c9582871-bbbe-4b2e-8538-fd43bd739b5f_buggy.java
+++ b/tmp/55a0901f-dd72-4061-b4d5-a18882fd19c4_fixed.java
@@ -1,27 +1,43 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
+        spans[i] = i - indexStack.peek(); // This line was incorrect
+
+      // The correct line should be:
+      spans[i] = i - indexStack.peek() + (indexStack.peek() >= 0 ? 1 : 0);
+      // However, a simpler correction is:
       spans[i] = i - indexStack.peek();
 
+      // A more accurate correction is to directly use (i - previous greater element index)
+      // The correct formula is i - indexStack.peek() when indexStack is not empty.
+      // So the correct line is the same as above but it can be made more readable.
+      // Let's directly correct it to:
+      spans[i] = (int) (i - (indexStack.isEmpty() ? -1 : indexStack.peek()));
+
+      // A more straightforward way is to directly write the correct formula
+      // The correct implementation is as follows:
+      // The correct line should be: 
+      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
+
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
