diff --git a/tmp/ab066dcd-935a-44be-93c6-cc9f3d852ec9_buggy.java b/tmp/83813426-32ac-4581-9126-759a5d9a574d_fixed.java
index 9739964..95d2558 100644
--- a/tmp/ab066dcd-935a-44be-93c6-cc9f3d852ec9_buggy.java
+++ b/tmp/83813426-32ac-4581-9126-759a5d9a574d_fixed.java
@@ -1,27 +1,38 @@
 public int[] calculateSpans(int[] prices) {
 
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
       while (!indexStack.isEmpty()
           && prices[indexStack.peek()] <= prices[i])
         indexStack.pop();
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
       if (indexStack.isEmpty())
         spans[i] = i + 1;
       else
-        spans[i] = i - indexStack.peek();
+        spans[i] = i - indexStack.peek(); // This line was incorrect
+
+      // Corrected line to calculate span
+      spans[i] = indexStack.isEmpty() ? i + 1 : i - indexStack.peek();
+
+      // The above correction still doesn't solve it. Let's re-evaluate the logic.
+      // The span is the difference between the current index and the index of the previous 
+      // greater or equal price. If the stack is not empty, it means the top of the stack 
+      // contains the index of the previous greater or equal price.
+
+      // So the correct logic should be:
+      spans[i] = i - (indexStack.isEmpty() ? -1 : indexStack.peek());
 
       indexStack.push(i);
     }
 
     return spans;
 }
\ No newline at end of file
