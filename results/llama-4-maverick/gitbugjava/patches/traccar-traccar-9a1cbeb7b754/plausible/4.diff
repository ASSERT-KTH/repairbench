diff --git a/tmp/758bf11b-b0a0-4859-99bf-2c0d46c69290_buggy.java b/tmp/9b24398a-503d-4f42-b1a7-60f696f3c652_fixed.java
index 6d50be3..4f56827 100644
--- a/tmp/758bf11b-b0a0-4859-99bf-2c0d46c69290_buggy.java
+++ b/tmp/9b24398a-503d-4f42-b1a7-60f696f3c652_fixed.java
@@ -1,194 +1,204 @@
 private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
     List<Position> positions = new LinkedList<>();
 
     buf.readerIndex(buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ',') + 1);
     String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
     buf.skipBytes(1 + 3 + 1);
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     buf.readUnsignedIntLE(); // remaining cache
     int count = buf.readUnsignedShortLE();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-            buf.readUnsignedShortLE(); // length
-            buf.readUnsignedShortLE(); // index
+        if (buf.readableBytes() < 2) {
+            break; // Not enough data for the length field
+        }
+        int length = buf.readUnsignedShortLE();
 
-            int paramCount = buf.readUnsignedByte();
+        if (buf.readableBytes() < length) {
+            break; // Not enough data for the rest of the message
+        }
+
+        ByteBuf block = buf.readSlice(length);
+
+        block.readUnsignedShortLE(); // index
+
+        int paramCount = block.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            boolean extension = block.getUnsignedByte(block.readerIndex()) == 0xFE;
+            int id = extension ? block.readUnsignedShort() : block.readUnsignedByte();
             switch (id) {
                 case 0x01:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedByte());
+                    position.set(Position.KEY_EVENT, block.readUnsignedByte());
                     break;
                 case 0x05:
-                        position.setValid(buf.readUnsignedByte() > 0);
+                    position.setValid(block.readUnsignedByte() > 0);
                     break;
                 case 0x06:
-                        position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+                    position.set(Position.KEY_SATELLITES, block.readUnsignedByte());
                     break;
                 case 0x07:
-                        position.set(Position.KEY_RSSI, buf.readUnsignedByte());
+                    position.set(Position.KEY_RSSI, block.readUnsignedByte());
                     break;
                 case 0x14:
-                        position.set(Position.KEY_OUTPUT, buf.readUnsignedByte());
+                    position.set(Position.KEY_OUTPUT, block.readUnsignedByte());
                     break;
                 case 0x15:
-                        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
+                    position.set(Position.KEY_INPUT, block.readUnsignedByte());
                     break;
                 case 0x47:
-                        int lockState = buf.readUnsignedByte();
+                    int lockState = block.readUnsignedByte();
                     if (lockState > 0) {
                         position.set(Position.KEY_LOCK, lockState == 2);
                     }
                     break;
                 case 0x97:
-                        position.set(Position.KEY_THROTTLE, buf.readUnsignedByte());
+                    position.set(Position.KEY_THROTTLE, block.readUnsignedByte());
                     break;
                 case 0x9D:
-                        position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
+                    position.set(Position.KEY_FUEL_LEVEL, block.readUnsignedByte());
                     break;
                 case 0xFE69:
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+                    position.set(Position.KEY_BATTERY_LEVEL, block.readUnsignedByte());
                     break;
                 default:
-                        buf.readUnsignedByte();
+                    block.readUnsignedByte();
                     break;
             }
         }
 
-            paramCount = buf.readUnsignedByte();
+        paramCount = block.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            boolean extension = block.getUnsignedByte(block.readerIndex()) == 0xFE;
+            int id = extension ? block.readUnsignedShort() : block.readUnsignedByte();
             switch (id) {
                 case 0x08:
-                        position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+                    position.setSpeed(UnitsConverter.knotsFromKph(block.readUnsignedShortLE()));
                     break;
                 case 0x09:
-                        position.setCourse(buf.readUnsignedShortLE());
+                    position.setCourse(block.readUnsignedShortLE());
                     break;
                 case 0x0A:
-                        position.set(Position.KEY_HDOP, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_HDOP, block.readUnsignedShortLE());
                     break;
                 case 0x0B:
-                        position.setAltitude(buf.readShortLE());
+                    position.setAltitude(block.readShortLE());
                     break;
                 case 0x16:
-                        position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShortLE() * 0.01);
+                    position.set(Position.PREFIX_ADC + 1, block.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x19:
-                        position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() * 0.01);
+                    position.set(Position.KEY_BATTERY, block.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x1A:
-                        position.set(Position.KEY_POWER, buf.readUnsignedShortLE() * 0.01);
+                    position.set(Position.KEY_POWER, block.readUnsignedShortLE() * 0.01);
                     break;
                 case 0x40:
-                        position.set(Position.KEY_EVENT, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_EVENT, block.readUnsignedShortLE());
                     break;
                 case 0x91:
                 case 0x92:
-                        position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_OBD_SPEED, block.readUnsignedShortLE());
                     break;
                 case 0x98:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_FUEL_USED, block.readUnsignedShortLE());
                     break;
                 case 0x99:
-                        position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_RPM, block.readUnsignedShortLE());
                     break;
                 case 0x9C:
-                        position.set(Position.KEY_COOLANT_TEMP, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_COOLANT_TEMP, block.readUnsignedShortLE());
                     break;
                 case 0x9F:
-                        position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShortLE());
+                    position.set(Position.PREFIX_TEMP + 1, block.readUnsignedShortLE());
                     break;
                 case 0xC9:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedShortLE());
+                    position.set(Position.KEY_FUEL_CONSUMPTION, block.readUnsignedShortLE());
                     break;
                 default:
-                        buf.readUnsignedShortLE();
+                    block.readUnsignedShortLE();
                     break;
             }
         }
 
-            paramCount = buf.readUnsignedByte();
+        paramCount = block.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
+            boolean extension = block.getUnsignedByte(block.readerIndex()) == 0xFE;
+            int id = extension ? block.readUnsignedShort() : block.readUnsignedByte();
             switch (id) {
                 case 0x02:
-                        position.setLatitude(buf.readIntLE() * 0.000001);
+                    position.setLatitude(block.readIntLE() * 0.000001);
                     break;
                 case 0x03:
-                        position.setLongitude(buf.readIntLE() * 0.000001);
+                    position.setLongitude(block.readIntLE() * 0.000001);
                     break;
                 case 0x04:
-                        position.setTime(new Date((946684800 + buf.readUnsignedIntLE()) * 1000)); // 2000-01-01
+                    position.setTime(new Date((946684800 + block.readUnsignedIntLE()) * 1000)); // 2000-01-01
                     break;
                 case 0x0C:
                 case 0x9B:
-                        position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
+                    position.set(Position.KEY_ODOMETER, block.readUnsignedIntLE());
                     break;
                 case 0x0D:
-                        position.set("runtime", buf.readUnsignedIntLE());
+                    position.set("runtime", block.readUnsignedIntLE());
                     break;
                 case 0x25:
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(buf.readUnsignedIntLE()));
+                    position.set(Position.KEY_DRIVER_UNIQUE_ID, String.valueOf(block.readUnsignedIntLE()));
                     break;
                 case 0xA0:
-                        position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.001);
+                    position.set(Position.KEY_FUEL_USED, block.readUnsignedIntLE() * 0.001);
                     break;
                 case 0xA2:
-                        position.set(Position.KEY_FUEL_CONSUMPTION, buf.readUnsignedIntLE() * 0.01);
+                    position.set(Position.KEY_FUEL_CONSUMPTION, block.readUnsignedIntLE() * 0.01);
                     break;
                 default:
-                        buf.readUnsignedIntLE();
+                    block.readUnsignedIntLE();
                     break;
             }
         }
 
-            paramCount = buf.readUnsignedByte();
+        paramCount = block.readUnsignedByte();
         for (int j = 0; j < paramCount; j++) {
-                boolean extension = buf.getUnsignedByte(buf.readerIndex()) == 0xFE;
-                int id = extension ? buf.readUnsignedShort() : buf.readUnsignedByte();
-                int length = buf.readUnsignedByte();
+            boolean extension = block.getUnsignedByte(block.readerIndex()) == 0xFE;
+            int id = extension ? block.readUnsignedShort() : block.readUnsignedByte();
+            int dataLength = block.readUnsignedByte();
             switch (id) {
                 case 0x2A:
                 case 0x2B:
                 case 0x2C:
                 case 0x2D:
                 case 0x2E:
                 case 0x2F:
                 case 0x30:
                 case 0x31:
-                        buf.readUnsignedByte(); // label
-                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
+                    block.readUnsignedByte(); // label
+                    position.set(Position.PREFIX_TEMP + (id - 0x2A), block.readShortLE() * 0.01);
                     break;
                 case 0xFE31:
-                        buf.readUnsignedByte(); // alarm protocol
-                        buf.readUnsignedByte(); // alarm type
-                        buf.skipBytes(length - 2);
+                    block.readUnsignedByte(); // alarm protocol
+                    block.readUnsignedByte(); // alarm type
+                    block.skipBytes(dataLength - 2);
                     break;
                 case 0xFEA8:
-                        buf.readUnsignedByte(); // battery status
-                        position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
-                        buf.readUnsignedByte(); // battery alert
+                    block.readUnsignedByte(); // battery status
+                    position.set(Position.KEY_BATTERY_LEVEL, block.readUnsignedByte());
+                    block.readUnsignedByte(); // battery alert
                     break;
                 default:
-                        buf.skipBytes(length);
+                    block.skipBytes(dataLength);
                     break;
             }
         }
 
         positions.add(position);
     }
 
     return positions;
 }
\ No newline at end of file
