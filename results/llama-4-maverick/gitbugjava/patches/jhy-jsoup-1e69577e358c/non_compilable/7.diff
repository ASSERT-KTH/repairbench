diff --git a/tmp/9ac37d92-5e0d-4c2a-b4b6-7774ef52a59f_buggy.java b/tmp/23c6273e-5a1c-4f90-9850-a1f649576b20_fixed.java
index c9c77a4..c618722 100644
--- a/tmp/9ac37d92-5e0d-4c2a-b4b6-7774ef52a59f_buggy.java
+++ b/tmp/23c6273e-5a1c-4f90-9850-a1f649576b20_fixed.java
@@ -1,35 +1,55 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        // use the URI class to encode non-ascii in path, but keep already-encoded parts as-is (issue 1952)
         URI uri = new URI(
             u.getProtocol(),
             u.getUserInfo(),
             IDN.toASCII(decodePart(u.getHost())), // puny-code
             u.getPort(),
-                decodePart(u.getPath()),
+            // manually escape (not encode) the path, so that already encoded pieces stay encoded (#1952)
+            escapePath(u.getPath()),
             null, null // query and fragment appended later so as not to encode
         );
 
         String normUrl = uri.toASCIIString();
         if (q != null || u.getRef() != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
             if (q != null) {
                 sb.append('?');
                 appendToAscii(StringUtil.releaseBuilder(q), true, sb);
             }
             if (u.getRef() != null) {
                 sb.append('#');
                 appendToAscii(u.getRef(), false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
         u =  new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
         // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
         // the remote end will be able to handle it, so in prod we just pass the original URL.
         // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
+
+// new helper method to manually escape the path
+private static String escapePath(String path) throws UnsupportedEncodingException {
+    StringBuilder sb = StringUtil.borrowBuilder();
+    for (int i = 0; i < path.length(); i++) {
+        char c = path.charAt(i);
+        if (c == '%' && i + 2 < path.length()) { // already escaped, leave as is
+            sb.append('%').append(path.charAt(i + 1)).append(path.charAt(i + 2));
+            i += 2;
+        } else if (c < 0x20 || c >= 0x7F || DataUtil.ReservedUrlChars.indexOf(c) != -1) {
+            // unreserved per RFC 3986 2.3
+            // escape non-ascii and unreserved chars
+            sb.append(URLEncoder.encode(String.valueOf(c), "UTF-8"));
+        } else {
+            sb.append(c);
+        }
+    }
+    return StringUtil.releaseBuilder(sb);
+}
\ No newline at end of file
