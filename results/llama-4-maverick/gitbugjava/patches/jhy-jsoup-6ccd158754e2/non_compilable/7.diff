diff --git a/tmp/ff30024f-8dbf-488c-b8a9-59e7644a68b1_buggy.java b/tmp/2cf8d580-2033-4202-acc0-93b31d0f3813_fixed.java
index 23f078d..0c01c7f 100644
--- a/tmp/ff30024f-8dbf-488c-b8a9-59e7644a68b1_buggy.java
+++ b/tmp/2cf8d580-2033-4202-acc0-93b31d0f3813_fixed.java
@@ -1,14 +1,24 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            sb.append(encoded);
+            // in URLEncoder, astral codepoints are double-encoded as a two-character sequence; fix that
+            if (Character.isSupplementaryCodePoint(c)) {
+                sb.delete(sb.length() - 3, sb.length()); // delete the %3F (i.e. '?') that was tacked on the end
+            }
             // ^^ is a bit heavy-handed - if perf critical, we could optimize
         } else {
             sb.append((char) c);
         }
+        // URLEncoder encodes supplementary codepoints (astral unicode) as a two-character sequence, per the W3C spec
+        // for URL encoding, so we need to step over the low surrogate if we hit one
+        if (Character.isSupplementaryCodePoint(c)) {
+            i++; // next char is low surrogate, skip it
+        }
     }
 }
\ No newline at end of file
