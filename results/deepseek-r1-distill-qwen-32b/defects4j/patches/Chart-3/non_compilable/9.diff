diff --git a/tmp/4c885b72-56b0-4fcb-84ba-6d9d6b0e1b79_buggy.java b/tmp/a7a70ca1-8d54-4a00-987e-c06464f5d5fb_fixed.java
index 388771b..98ca997 100644
--- a/tmp/4c885b72-56b0-4fcb-84ba-6d9d6b0e1b79_buggy.java
+++ b/tmp/a7a70ca1-8d54-4a00-987e-c06464f5d5fb_fixed.java
@@ -1,37 +1,40 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+        // Reset the min and max Y values to ensure they are recalculated
+        copy.minY = null;
+        copy.maxY = null;
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
