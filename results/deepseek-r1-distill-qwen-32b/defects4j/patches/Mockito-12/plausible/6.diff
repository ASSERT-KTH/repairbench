diff --git a/tmp/8e2e2250-8af9-41b7-9325-f32e61e82758_buggy.java b/tmp/a36f0fd5-fe75-440c-9694-d96b147ac154_fixed.java
index bada2b6..1b995ad 100644
--- a/tmp/8e2e2250-8af9-41b7-9325-f32e61e82758_buggy.java
+++ b/tmp/a36f0fd5-fe75-440c-9694-d96b147ac154_fixed.java
@@ -1,16 +1,21 @@
 /**
-     * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
+ * Finds the generic type (parameterized type) of the field. If the field is not generic, it returns Object.class. 
+ * For nested generics, it returns the raw class of the first parameter.
  * 
  * @param field
  * @return
  */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
+public Class<?> getGenericType(Field field) {        
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];
+        // Unwrap nested ParameterizedTypes to get the raw class
+        while (actualType instanceof ParameterizedType) {
+            actualType = ((ParameterizedType) actualType).getRawType();
+        }
+        if (actualType instanceof Class<?>) {
+            return (Class<?>) actualType;
+        }
     }
-        
     return Object.class;
 }
\ No newline at end of file
