diff --git a/tmp/81b76e31-a418-4379-b94b-82e91a3881dd_buggy.java b/tmp/6b72ceb1-d9ee-4a7f-b57e-8475599aba08_fixed.java
index fb2b020..5874ab2 100644
--- a/tmp/81b76e31-a418-4379-b94b-82e91a3881dd_buggy.java
+++ b/tmp/6b72ceb1-d9ee-4a7f-b57e-8475599aba08_fixed.java
@@ -1,27 +1,16 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+                    // When the property is not present, infer the type directly from the constraint.
+                    typeToInfer = propType;
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
