diff --git a/tmp/26db0cf7-93aa-4481-8452-c619f52b2dc8_buggy.java b/tmp/d40015da-3507-49bf-aeba-b00ce7c7c956_fixed.java
index e0ecec8..27714e1 100644
--- a/tmp/26db0cf7-93aa-4481-8452-c619f52b2dc8_buggy.java
+++ b/tmp/d40015da-3507-49bf-aeba-b00ce7c7c956_fixed.java
@@ -1,35 +1,40 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  while (arguments.hasNext() && parameters.hasNext()) {
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
-
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Check for variadic parameters and validate remaining arguments
+  if (functionType.isVariadic()) {
+    Node restParam = functionType.getParameters().get(
+        functionType.getParameters().size() - 1);
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(restParam), call, ordinal);
+    }
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
