diff --git a/tmp/a07a0212-9c93-4d89-98a2-c29720b058fa_buggy.java b/tmp/22edf2b0-ca1b-4d81-93b8-94179e1ac6a2_fixed.java
index d666a67..64a3694 100644
--- a/tmp/a07a0212-9c93-4d89-98a2-c29720b058fa_buggy.java
+++ b/tmp/22edf2b0-ca1b-4d81-93b8-94179e1ac6a2_fixed.java
@@ -1,36 +1,34 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
 private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
-        // limit (no cache):
-        if (count > maxStringCacheLen)
-            return new String(charBuf, start, count);
+    int available = charBuf.length - start;
+    if (available <= 0 || count <= 0) {
+        return "";
+    }
+    int actualCount = Math.min(count, available);
+    if (actualCount > maxStringCacheLen) {
+        return new String(charBuf, start, actualCount);
+    }
 
     // calculate hash:
     int hash = 0;
     int offset = start;
-        for (int i = 0; i < count; i++) {
+    for (int i = 0; i < actualCount; i++) {
         hash = 31 * hash + charBuf[offset++];
     }
 
     // get from cache
-        final int index = hash & stringCache.length - 1;
+    final int index = hash & (stringCache.length - 1);
     String cached = stringCache[index];
 
     if (cached == null) { // miss, add
-            cached = new String(charBuf, start, count);
+        cached = new String(charBuf, start, actualCount);
         stringCache[index] = cached;
     } else { // hashcode hit, check equality
-            if (rangeEquals(charBuf, start, count, cached)) { // hit
+        if (rangeEquals(charBuf, start, actualCount, cached)) { // hit
             return cached;
         } else { // hashcode conflict
-                cached = new String(charBuf, start, count);
+            cached = new String(charBuf, start, actualCount);
             stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
         }
     }
     return cached;
 }
\ No newline at end of file
