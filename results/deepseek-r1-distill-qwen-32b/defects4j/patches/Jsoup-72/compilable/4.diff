diff --git a/tmp/a9474f54-d3e4-40e2-ac77-9e1adb1b8bcb_buggy.java b/tmp/070d97fa-8b1b-4b79-acaf-654bbcc25b1b_fixed.java
index d666a67..749d1be 100644
--- a/tmp/a9474f54-d3e4-40e2-ac77-9e1adb1b8bcb_buggy.java
+++ b/tmp/070d97fa-8b1b-4b79-acaf-654bbcc25b1b_fixed.java
@@ -1,36 +1,35 @@
-    /**
-     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.
-     * <p />
-     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.
-     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of
-     * some more duplicates.
-     */
     private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) {
+        // Early exit for invalid parameters to prevent exceptions
+        if (count <= 0 || start < 0 || (start + count) > charBuf.length) {
+            return new String(charBuf, start, count);
+        }
+
         // limit (no cache):
-        if (count > maxStringCacheLen)
+        if (count > maxStringCacheLen) {
             return new String(charBuf, start, count);
+        }
 
         // calculate hash:
         int hash = 0;
         int offset = start;
         for (int i = 0; i < count; i++) {
             hash = 31 * hash + charBuf[offset++];
         }
 
         // get from cache
-        final int index = hash & stringCache.length - 1;
+        final int index = hash & (stringCache.length - 1);
         String cached = stringCache[index];
 
         if (cached == null) { // miss, add
             cached = new String(charBuf, start, count);
             stringCache[index] = cached;
         } else { // hashcode hit, check equality
             if (rangeEquals(charBuf, start, count, cached)) { // hit
                 return cached;
             } else { // hashcode conflict
                 cached = new String(charBuf, start, count);
                 stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again
             }
         }
         return cached;
     }
\ No newline at end of file
