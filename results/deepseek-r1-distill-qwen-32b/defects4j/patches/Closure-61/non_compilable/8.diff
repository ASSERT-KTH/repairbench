diff --git a/tmp/78ed5f2c-3268-44ec-a031-d36ab9468b57_buggy.java b/tmp/e1ad6635-3795-4d41-8100-2f79c91cdc79_fixed.java
index b36c3f0..ec1aef7 100644
--- a/tmp/78ed5f2c-3268-44ec-a031-d36ab9468b57_buggy.java
+++ b/tmp/e1ad6635-3795-4d41-8100-2f79c91cdc79_fixed.java
@@ -1,58 +1,63 @@
-  /**
-   * Returns true if calls to this function have side effects.
-   *
-   * @param callNode The call node to inspected.
-   * @param compiler A compiler object to provide program state changing
-   *     context information. Can be null.
-   */
 static boolean functionCallHasSideEffects(
     Node callNode, @Nullable AbstractCompiler compiler) {
   if (callNode.getType() != Token.CALL) {
     throw new IllegalStateException(
         "Expected CALL node, got " + Token.name(callNode.getType()));
   }
 
   if (callNode.isNoSideEffectsCall()) {
     return false;
   }
 
   Node nameNode = callNode.getFirstChild();
 
   // Built-in functions with no side effects.
   if (nameNode.getType() == Token.NAME) {
     String name = nameNode.getString();
     if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
       return false;
     }
   } else if (nameNode.getType() == Token.GETPROP) {
+    // Check if the call is to a Math function with no side effects.
+    Node targetNode = nameNode.getFirstChild();
+    if (targetNode.getType() == Token.NAME) {
+      String target = targetNode.getString();
+      if ("Math".equals(target)) {
+        String methodName = nameNode.getLastChild().getString();
+        if (MATH_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
+          return false;
+        }
+      }
+    }
+
     if (callNode.hasOneChild()
         && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
               nameNode.getLastChild().getString())) {
       return false;
     }
 
     if (callNode.isOnlyModifiesThisCall()
         && evaluatesToLocalValue(nameNode.getFirstChild())) {
       return false;
     }
 
     // Functions in the "Math" namespace have no side effects.
-
     if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
       if (nameNode.getFirstChild().getType() == Token.REGEXP
           && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
         return false;
       } else if (nameNode.getFirstChild().getType() == Token.STRING
           && STRING_REGEXP_METHODS.contains(
               nameNode.getLastChild().getString())) {
         Node param = nameNode.getNext();
         if (param != null &&
             (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                || param.getType() == Token.REGEXP)) {
           return false;
         }
       }
     }
+  }
 
   return true;
 }
\ No newline at end of file
