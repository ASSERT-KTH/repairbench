diff --git a/tmp/b12f14d6-fe52-4152-8b86-9085aed65390_buggy.java b/tmp/9c8a90a0-17f3-48e6-bcc0-a3449f0bdae4_fixed.java
index 5f96616..cb26fda 100644
--- a/tmp/b12f14d6-fe52-4152-8b86-9085aed65390_buggy.java
+++ b/tmp/9c8a90a0-17f3-48e6-bcc0-a3449f0bdae4_fixed.java
@@ -1,20 +1,20 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    JSType[] typesToMatch;
+    if (constraint.isUnionType()) {
+      typesToMatch = constraint.toUnionType().getTypes().toArray(new JSType[0]);
+    } else {
+      typesToMatch = new JSType[]{constraint};
+    }
+
+    for (JSType type : typesToMatch) {
+      if (type.isRecordType()) {
+        matchRecordTypeConstraint(type.toObjectType());
+      }
     }
   }
\ No newline at end of file
