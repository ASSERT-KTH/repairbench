diff --git a/tmp/b506f5a3-b07c-4e06-9d24-3fb6b142420d_buggy.java b/tmp/ca7c0158-f14a-4d05-bbbc-170f1f408187_fixed.java
index 5f96616..fb3beca 100644
--- a/tmp/b506f5a3-b07c-4e06-9d24-3fb6b142420d_buggy.java
+++ b/tmp/ca7c0158-f14a-4d05-bbbc-170f1f408187_fixed.java
@@ -1,20 +1,18 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    JSType resolved = constraint.resolveType();
+    if (resolved.isUnionType()) {
+        for (JSType subtype : resolved.getUnionTypes()) {
+            if (subtype.isObjectType() && subtype.isRecordType()) {
+                matchRecordTypeConstraint(subtype.toObjectType());
+            }
+        }
+    } else if (resolved.isObjectType() && resolved.isRecordType()) {
+        matchRecordTypeConstraint(resolved.toObjectType());
     }
 }
\ No newline at end of file
