diff --git a/tmp/51d199ce-2574-4c13-b785-079e78d7b571_buggy.java b/tmp/2ab59098-e33a-4344-b567-bb694605dfe2_fixed.java
index 5f96616..58105c6 100644
--- a/tmp/51d199ce-2574-4c13-b785-079e78d7b571_buggy.java
+++ b/tmp/2ab59098-e33a-4344-b567-bb694605dfe2_fixed.java
@@ -1,20 +1,19 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    // Handle both cases where the constraint is a single record type or a union containing records.
+    if (constraint.isUnionType()) {
+        UnionType ut = constraint.toUnionType();
+        for (JSType subtype : ut.getTypes()) {
+            if (subtype.isRecordType()) {
+                matchRecordTypeConstraint(subtype.toObjectType());
+            }
+        }
+    } else if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
\ No newline at end of file
