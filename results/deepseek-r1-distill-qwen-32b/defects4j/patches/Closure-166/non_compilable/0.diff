diff --git a/tmp/dfa6e3a6-230b-4e5d-8b40-c9f8846ff787_buggy.java b/tmp/0f2d17df-36d7-4a40-ab8e-72e182e0ea06_fixed.java
index 5f96616..3ba080d 100644
--- a/tmp/dfa6e3a6-230b-4e5d-8b40-c9f8846ff787_buggy.java
+++ b/tmp/0f2d17df-36d7-4a40-ab8e-72e182e0ea06_fixed.java
@@ -1,20 +1,16 @@
 @Override
 public void matchConstraint(JSType constraint) {
-    // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+    } else if (constraint.isUnionType()) {
+        for (JSType typePart : constraint.getUnionTypes()) {
+            if (typePart.isRecordType()) {
+                matchRecordTypeConstraint(typePart.toObjectType());
+            }
+        }
     }
 }
\ No newline at end of file
