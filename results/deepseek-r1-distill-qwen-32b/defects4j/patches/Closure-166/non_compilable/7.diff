diff --git a/tmp/b986942b-4dbf-4480-b084-302f6128c69f_buggy.java b/tmp/b745c8f2-de9e-46cf-a9b6-95afba3f5e68_fixed.java
index 5f96616..efff032 100644
--- a/tmp/b986942b-4dbf-4480-b084-302f6128c69f_buggy.java
+++ b/tmp/b745c8f2-de9e-46cf-a9b6-95afba3f5e68_fixed.java
@@ -1,20 +1,22 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    List<JSType> recordTypes = new ArrayList<>();
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+      recordTypes.add(constraint);
+    } else if (constraint.isUnionType()) {
+      for (JSType subtype : constraint.asUnionType().getComponents()) {
+        if (subtype.isRecordType()) {
+          recordTypes.add(subtype);
+        }
+      }
+    }
+
+    for (JSType recordType : recordTypes) {
+      matchRecordTypeConstraint(recordType.toObjectType());
     }
   }
\ No newline at end of file
