diff --git a/tmp/afd5133a-7b2f-4d9b-9cd0-f431d4341f6c_buggy.java b/tmp/d2b66bed-19da-4440-a7a4-97af838ba5ca_fixed.java
index 1478ee1..effb342 100644
--- a/tmp/afd5133a-7b2f-4d9b-9cd0-f431d4341f6c_buggy.java
+++ b/tmp/d2b66bed-19da-4440-a7a4-97af838ba5ca_fixed.java
@@ -1,24 +1,24 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute dot products
+      double dot = v1.dotProduct(v2);
+      double dot2 = v2.dotProduct(v2);
+      if (dot2 == 0) {
+          return new Vector3D(0.0, 0.0, 0.0);
+      }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      // Compute rho as an 8-bit approximation
+      double rho = (float) (dot / dot2);
 
+      // Compute v3 = v1 - rho * v2
+      double x3 = v1.x - rho * v2.x;
+      double y3 = v1.y - rho * v2.y;
+      double z3 = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      // Compute cross product components
+      double x = y3 * v2.z - z3 * v2.y;
+      double y = z3 * v2.x - x3 * v2.z;
+      double z = x3 * v2.y - y3 * v2.x;
 
+      return new Vector3D(x, y, z);
   }
\ No newline at end of file
