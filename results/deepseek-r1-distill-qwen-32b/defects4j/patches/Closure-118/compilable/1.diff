diff --git a/tmp/670354bf-f75b-454f-bea6-5904c7209347_buggy.java b/tmp/8c9f187d-2b26-499c-89a6-3f7a751c362f_fixed.java
index 0b7c52e..55d605f 100644
--- a/tmp/670354bf-f75b-454f-bea6-5904c7209347_buggy.java
+++ b/tmp/8c9f187d-2b26-499c-89a6-3f7a751c362f_fixed.java
@@ -1,27 +1,31 @@
-    /**
-     * Processes a OBJECTLIT node.
-     */
     private void handleObjectLit(NodeTraversal t, Node n) {
       for (Node child = n.getFirstChild();
           child != null;
           child = child.getNext()) {
-        // Maybe STRING, GET, SET
+        // Each child is a PROPERTY node.
+        Node keyExpr = child.getFirstChild();
+        String name = keyExpr.getString();
+
+        if (name == null) {
+          // Handle cases where the key is not a simple string literal.
+          // For example, computed property names or symbols.
+          // Since we cannot determine the type, we skip processing.
+          continue;
+        }
 
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
         T type = typeSystem.getType(getScope(), n, name);
 
         Property prop = getProperty(name);
         if (!prop.scheduleRenaming(child,
                                    processProperty(t, prop, type, null))) {
           // TODO(user): It doesn't look like the user can do much in this
           // case right now.
           if (propertiesToErrorFor.containsKey(name)) {
             compiler.report(JSError.make(
                 t.getSourceName(), child, propertiesToErrorFor.get(name),
                 Warnings.INVALIDATION, name,
                 (type == null ? "null" : type.toString()), n.toString(), ""));
           }
         }
       }
     }
\ No newline at end of file
