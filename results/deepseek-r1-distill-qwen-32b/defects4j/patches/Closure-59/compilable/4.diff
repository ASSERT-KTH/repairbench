diff --git a/tmp/78194ae8-76a4-4e65-8903-e7f98b35bfa8_buggy.java b/tmp/11ca3e1f-29d7-4fcc-981b-87ebaa97c0e2_fixed.java
index 29fabfa..23e2df9 100644
--- a/tmp/78194ae8-76a4-4e65-8903-e7f98b35bfa8_buggy.java
+++ b/tmp/11ca3e1f-29d7-4fcc-981b-87ebaa97c0e2_fixed.java
@@ -1,67 +1,62 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
 public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
         if (outStream == null) {
             setErrorManager(
                     new LoggerErrorManager(createMessageFormatter(), logger));
         } else {
             PrintStreamErrorManager printer =
                     new PrintStreamErrorManager(createMessageFormatter(), outStream);
             printer.setSummaryDetailLevel(options.summaryDetailLevel);
             setErrorManager(printer);
         }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
         options.checkTypes = false;
     } else if (!options.checkTypes) {
         // If DiagnosticGroups did not override the plain checkTypes
         // option, and checkTypes is enabled, then turn off the
         // parser type warnings.
         options.setWarningLevel(
                 DiagnosticGroup.forType(
                         RhinoErrorReporter.TYPE_PARSE_ERROR),
                 CheckLevel.OFF);
     }
 
-    if (options.checkGlobalThisLevel.isOn()) {
+    // Always set the GLOBAL_THIS warning level based on checkGlobalThisLevel
     options.setWarningLevel(
             DiagnosticGroups.GLOBAL_THIS,
             options.checkGlobalThisLevel);
-    }
 
     if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {
         options.setWarningLevel(
                 DiagnosticGroups.ES5_STRICT,
                 CheckLevel.ERROR);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
             new SuppressDocWarningsGuard(
                     getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);
 
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
     // checks the externs file for validity. If you don't want to warn
     // about missing variable declarations, we shut that specific
     // error off.
     if (!options.checkSymbols &&
             !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {
         composedGuards.addGuard(new DiagnosticGroupWarningsGuard(
                 DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
     }
 
     this.warningsGuard = composedGuards;
 }
\ No newline at end of file
