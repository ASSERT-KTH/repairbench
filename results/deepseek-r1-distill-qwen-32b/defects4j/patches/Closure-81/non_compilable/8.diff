diff --git a/tmp/9e0e3927-f4c4-48cd-affa-26b66e6e9c5a_buggy.java b/tmp/cff2bd49-53f6-4fed-b7e6-a1d307fef1fb_fixed.java
index 6e05e4b..0bb7ec5 100644
--- a/tmp/9e0e3927-f4c4-48cd-affa-26b66e6e9c5a_buggy.java
+++ b/tmp/cff2bd49-53f6-4fed-b7e6-a1d307fef1fb_fixed.java
@@ -1,51 +1,56 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
     Boolean isUnnamedFunction = false;
     if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
+        // If it's an unnamed function declaration, report an error.
+        if (functionNode.isFunctionDeclaration()) {
+            parseApi.error(functionNode.getLineno(), functionNode.getColumn(),
+                "function statement without name");
+        }
     }
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
     if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
         // TODO(bowdidge) Mark line number of paren correctly.
         // Same problem as below - the left paren might not be on the
         // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
     }
 
     node.addChildToBack(newName);
     Node lp = newNode(Token.LP);
     // The left paren's complicated because it's not represented by an
     // AstNode, so there's nothing that has the actual line number that it
     // appeared on.  We know the paren has to appear on the same line as the
     // function name (or else a semicolon will be inserted.)  If there's no
     // function name, assume the paren was on the same line as the function.
     // TODO(bowdidge): Mark line number of paren correctly.
     Name fnName = functionNode.getFunctionName();
     if (fnName != null) {
         lp.setLineno(fnName.getLineno());
     } else {
         lp.setLineno(functionNode.getLineno());
     }
     int lparenCharno = functionNode.getLp() +
         functionNode.getAbsolutePosition();
 
     lp.setCharno(position2charno(lparenCharno));
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
     return node;
 }
\ No newline at end of file
