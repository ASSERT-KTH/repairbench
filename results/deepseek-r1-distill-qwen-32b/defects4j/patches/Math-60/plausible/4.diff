diff --git a/tmp/586e5d60-1f95-47e8-b7e3-547dbef37f6f_buggy.java b/tmp/fe15b34e-b558-48f0-9672-eed1f5f33bd3_fixed.java
index 3127f85..141d63b 100644
--- a/tmp/586e5d60-1f95-47e8-b7e3-547dbef37f6f_buggy.java
+++ b/tmp/fe15b34e-b558-48f0-9672-eed1f5f33bd3_fixed.java
@@ -1,24 +1,14 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isInfinite(x)) {
+        return x > 0 ? 1.0 : 0.0;
+    }
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
+    final double z = dev / (standardDeviation * FastMath.sqrt(2.0));
+    final double threshold = 37.0; // Threshold beyond which to return 0 or 1
+    if (z < -threshold) {
+        return 0.0;
+    } else if (z > threshold) {
+        return 1.0;
     }
+    return 0.5 * (1.0 + Erf.erf(z));
 }
\ No newline at end of file
