diff --git a/tmp/692f1065-4b88-4134-bbc9-8677b9cae0f2_buggy.java b/tmp/3206e7b6-a03e-4a26-8980-395a91be6ffe_fixed.java
index 3127f85..263d1e6 100644
--- a/tmp/692f1065-4b88-4134-bbc9-8677b9cae0f2_buggy.java
+++ b/tmp/3206e7b6-a03e-4a26-8980-395a91be6ffe_fixed.java
@@ -1,24 +1,22 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
+    final double scaledDev = dev / (standardDeviation * FastMath.sqrt(2.0));
+    if (scaledDev > 37.8) {
+        return 1.0;
+    } else if (scaledDev < -37.8) {
+        return 0.0;
+    } else {
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf(scaledDev));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+            // This catch block is a safeguard but should typically not be reached due to the scaledDev check above.
+            if (x < (mean - 40 * standardDeviation)) {
+                return 0.0;
+            } else if (x > (mean + 40 * standardDeviation)) {
+                return 1.0;
             } else {
                 throw ex;
             }
         }
     }
+}
\ No newline at end of file
