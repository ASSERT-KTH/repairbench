diff --git a/tmp/2b1715e7-465f-4e45-b253-041e14b1ab07_buggy.java b/tmp/34a6db2f-d862-4f2e-9df5-55e3b55a75c0_fixed.java
index 3127f85..479f067 100644
--- a/tmp/2b1715e7-465f-4e45-b253-041e14b1ab07_buggy.java
+++ b/tmp/34a6db2f-d862-4f2e-9df5-55e3b55a75c0_fixed.java
@@ -1,24 +1,14 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
     final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+    if (dev < -40 * standardDeviation) {
         return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+    } else if (dev > 40 * standardDeviation) {
         return 1;
-            } else {
+    }
+    try {
+        return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));
+    } catch (MaxIterationsExceededException ex) {
+        // This catch is redundant now but kept for completeness if needed
         throw ex;
     }
 }
\ No newline at end of file
-    }
