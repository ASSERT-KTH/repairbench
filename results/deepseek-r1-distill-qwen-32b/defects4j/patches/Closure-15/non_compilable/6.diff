diff --git a/tmp/c7f4b2a7-f63d-45d3-9a8a-ee8971924cdb_buggy.java b/tmp/6cdfc9a2-e665-4a53-a0ca-09bc8949a03e_fixed.java
index b56897c..009e8f7 100644
--- a/tmp/c7f4b2a7-f63d-45d3-9a8a-ee8971924cdb_buggy.java
+++ b/tmp/6cdfc9a2-e665-4a53-a0ca-09bc8949a03e_fixed.java
@@ -1,27 +1,28 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check if the current node is a side-effecting function call, new expression, or statement.
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
+    // Added check for other effectful statements like delete, assignments, etc.
+    if (NodeUtil.isEffectfulStatement(n)) {
+        return true;
+    }
 
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
+
     return false;
 }
\ No newline at end of file
