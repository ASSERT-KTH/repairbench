diff --git a/tmp/bef68aa5-a869-4b57-9a63-30a75427da49_buggy.java b/tmp/2c21e2c7-ead5-47c6-941d-ad45a9a87df3_fixed.java
index 7e64f1d..525d39b 100644
--- a/tmp/bef68aa5-a869-4b57-9a63-30a75427da49_buggy.java
+++ b/tmp/2c21e2c7-ead5-47c6-941d-ad45a9a87df3_fixed.java
@@ -1,78 +1,71 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
             String opt = Util.stripLeadingHyphens(arg);
 
             if (options.hasOption(opt))
+            {
+                Option option = options.getOption(opt);
+                if (option != null && option.hasArg())
+                {
+                    int equalIndex = arg.indexOf('=');
+                    if (equalIndex != -1)
+                    {
+                        tokens.add(arg.substring(0, equalIndex));
+                        tokens.add(arg.substring(equalIndex + 1));
+                    }
+                    else
                     {
                         tokens.add(arg);
                     }
+                }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    tokens.add(arg);
+                }
+            }
+            else if (options.hasOption(arg.substring(0, 2)))
             {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                tokens.add(arg.substring(0, 2));
+                tokens.add(arg.substring(2));
             }
             else
             {
                 eatTheRest = stopAtNonOption;
                 tokens.add(arg);
             }
         }
-            }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
             for (i++; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
