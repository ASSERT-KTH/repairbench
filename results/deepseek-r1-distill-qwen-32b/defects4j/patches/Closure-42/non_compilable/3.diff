diff --git a/tmp/5a2dd25b-2f08-4bf7-95d6-ecb52810baee_buggy.java b/tmp/c9423517-218f-4894-abb1-bc72da65f294_fixed.java
index 4d0be80..35f34a7 100644
--- a/tmp/5a2dd25b-2f08-4bf7-95d6-ecb52810baee_buggy.java
+++ b/tmp/c9423517-218f-4894-abb1-bc72da65f294_fixed.java
@@ -1,10 +1,24 @@
     @Override
     Node processForInLoop(ForInLoop loopNode) {
 
+        // Check if this is a 'for each' loop and report an error if so.
+        if (loopNode.isForEach()) {
+            // Using getTokenRange() and gc.getErrorReporter() to report the error.
+            // getTokenRange() gives the location of the error, and reportError() logs it.
+            loopNode.getTokenRange().getMin().getLine() == -1
+                : loopNode.getTokenRange().getMin().getLine()
+            loopNode.getTokenRange().getMin().getColumn() == -1
+                : loopNode.getTokenRange().getMin().getColumn()
+            gc.getErrorReporter().reportError(
+                loopNode.getTokenRange().getMin().getLine(),
+                loopNode.getTokenRange().getMin().getColumn(),
+                "Unsupported language extension: for each");
+        }
+
         // Return the bare minimum to put the AST in a valid state.
         return newNode(
             Token.FOR,
             transform(loopNode.getIterator()),
             transform(loopNode.getIteratedObject()),
             transformBlock(loopNode.getBody()));
     }
\ No newline at end of file
