diff --git a/tmp/550aa16d-9014-4b50-8007-cb55d8422ffc_buggy.java b/tmp/cfe25ca4-de9d-4957-bf34-1ae685ef2fa0_fixed.java
index 66e3d01..ddf5ec7 100644
--- a/tmp/550aa16d-9014-4b50-8007-cb55d8422ffc_buggy.java
+++ b/tmp/cfe25ca4-de9d-4957-bf34-1ae685ef2fa0_fixed.java
@@ -1,34 +1,40 @@
-  /**
-   * Determines whether the given value may be assigned to a define.
-   *
-   * @param val The value being assigned.
-   * @param defines The list of names of existing defines.
-   */
   static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
       case Token.STRING:
       case Token.NUMBER:
       case Token.TRUE:
       case Token.FALSE:
         return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
-
-      // Uniary operators are valid if the child is valid.
+      // Unary operators are valid if their sole child is valid.
       case Token.NOT:
       case Token.NEG:
+      case Token.DEL:
         return isValidDefineValue(val.getFirstChild(), defines);
 
-      // Names are valid if and only if they are defines themselves.
+      // Binary operators are valid if both children are valid.
+      case Token.ADD:
+      case Token.SUB:
+      case Token.MUL:
+      case Token.DIV:
+      case Token.MOD:
+      case Token.BITAND:
+      case Token.BITOR:
+      case Token.BITXOR:
+      case Token.SHL:
+      case Token.SHR:
+      case Token.USHR:
+        Node firstChild = val.getFirstChild();
+        Node secondChild = val.getLastChild();
+        return isValidDefineValue(firstChild, defines) 
+            && isValidDefineValue(secondChild, defines);
+
+      // Names are valid if they are defines themselves.
       case Token.NAME:
       case Token.GETPROP:
         if (val.isQualifiedName()) {
           return defines.contains(val.getQualifiedName());
         }
     }
     return false;
   }
\ No newline at end of file
