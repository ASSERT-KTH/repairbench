diff --git a/tmp/a1d1fa33-71ab-4b27-9bf1-3a0780e2c5b1_buggy.java b/tmp/8e783687-d759-4eb6-b39f-06fc94f12454_fixed.java
index dc93be3..399ea17 100644
--- a/tmp/a1d1fa33-71ab-4b27-9bf1-3a0780e2c5b1_buggy.java
+++ b/tmp/8e783687-d759-4eb6-b39f-06fc94f12454_fixed.java
@@ -1,14 +1,16 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    // Determine if the tag is self-closing either explicitly or because it's a void element
+    Tag tag = Tag.valueOf(startTag.name());
+    boolean isSelfClosing = startTag.isSelfClosing() || tag.isVoid();
+    
+    if (isSelfClosing) {
         Element el = insertEmpty(startTag);
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
     
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
