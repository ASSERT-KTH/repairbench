diff --git a/tmp/b68e3f2f-0e22-434e-b712-384efc1663f3_buggy.java b/tmp/e1efaa5a-eef4-414e-82b0-d3fbabac071f_fixed.java
index dc93be3..1f44b8a 100644
--- a/tmp/b68e3f2f-0e22-434e-b712-384efc1663f3_buggy.java
+++ b/tmp/e1efaa5a-eef4-414e-82b0-d3fbabac071f_fixed.java
@@ -1,14 +1,17 @@
 Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+    // Extract the tag once to avoid multiple lookups
+    Tag tag = Tag.valueOf(startTag.name());
+    boolean isSelfClosing = startTag.isSelfClosing();
+    
+    // Handle as self-closing only if it's self-closing and is a void tag or unknown
+    if (isSelfClosing && (tag.isVoid() || tag.isUnknown())) {
         Element el = insertEmpty(startTag);
         stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        tokeniser.emit(new Token.EndTag(el.tagName()));
         return el;
     }
     
-        Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
+    Element el = new Element(tag, baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
