diff --git a/tmp/dd796c6e-e4bd-46a2-a348-006b20beee9d_buggy.java b/tmp/af98a07d-3a3d-42c0-b363-466d6da80567_fixed.java
index dc93be3..9670c9b 100644
--- a/tmp/dd796c6e-e4bd-46a2-a348-006b20beee9d_buggy.java
+++ b/tmp/af98a07d-3a3d-42c0-b363-466d6da80567_fixed.java
@@ -1,14 +1,22 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            Tag tag = Tag.valueOf(startTag.name());
+            if (tag.isVoid()) {
                 Element el = insertEmpty(startTag);
                 stack.add(el);
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
+            } else {
+                // For non-void self-closing tags, treat it as open tag
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el);
+                return el;
+            }
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
