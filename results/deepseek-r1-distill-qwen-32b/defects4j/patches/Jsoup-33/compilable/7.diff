diff --git a/tmp/97c16ae1-f795-441e-90a8-308201147b64_buggy.java b/tmp/bd9c1c5b-e803-46ec-855f-d7bb91cd7f87_fixed.java
index dc93be3..8183ea2 100644
--- a/tmp/97c16ae1-f795-441e-90a8-308201147b64_buggy.java
+++ b/tmp/bd9c1c5b-e803-46ec-855f-d7bb91cd7f87_fixed.java
@@ -1,14 +1,13 @@
     Element insert(Token.StartTag startTag) {
-        // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
-        if (startTag.isSelfClosing()) {
+        // Check if the tag is self-closing or is an empty element
+        if (startTag.isSelfClosing() || Tag.valueOf(startTag.name()).isEmpty()) {
             Element el = insertEmpty(startTag);
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));  // Emit end tag to pop from stack
             return el;
         }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
