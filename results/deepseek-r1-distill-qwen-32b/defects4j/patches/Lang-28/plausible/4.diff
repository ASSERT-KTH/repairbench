diff --git a/tmp/a03f9a56-8ce4-4c77-ac01-bc86df152d53_buggy.java b/tmp/ffda8b19-ddb8-4a56-9cce-695a15328050_fixed.java
index 4bbd561..d78ee78 100644
--- a/tmp/a03f9a56-8ce4-4c77-ac01-bc86df152d53_buggy.java
+++ b/tmp/ffda8b19-ddb8-4a56-9cce-695a15328050_fixed.java
@@ -1,37 +1,56 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Check if we're at an entity
+        if (index + 1 >= input.length()) {
+            // Not enough characters for & followed by something
+            return 0;
+        }
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end == input.length()) {
+                // No closing ';' found
+                return 0;
+            }
+
             int	entityValue;
             try {
                 if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
+            } catch (NumberFormatException e) {
                 return 0;
             }
 
-                out.write(entityValue);
+            if (!Character.isValidCodePoint(entityValue)) {
+                return 0;
+            }
+
+            // Convert the code point to chars and write them
+            char[] chars = Character.toChars(entityValue);
+            if (chars.length > 0) {
+                out.write(chars, 0, chars.length);
+            }
+
+            // Return the number of characters processed in the input
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
