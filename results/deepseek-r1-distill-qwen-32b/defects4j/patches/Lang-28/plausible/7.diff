diff --git a/tmp/615486ec-f003-4e45-ad43-b3bdfa20718a_buggy.java b/tmp/8133c7f8-9df9-45e1-ba92-55d361ff9e6e_fixed.java
index 4bbd561..2798d6f 100644
--- a/tmp/615486ec-f003-4e45-ad43-b3bdfa20718a_buggy.java
+++ b/tmp/8133c7f8-9df9-45e1-ba92-55d361ff9e6e_fixed.java
@@ -1,37 +1,49 @@
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index + 1 >= input.length()) {
+            return 0;
+        }
+        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+            return 0;
+        }
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < input.length()) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        } else {
+            // Not enough characters for numeric entity
+            return 0;
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
+        if (end == input.length()) {
+            // No semicolon found; return 0 as per original behavior
+            return 0;
+        }
 
         int entityValue;
         try {
             if (isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        char[] chars = Character.toChars(entityValue);
+        for (char c : chars) {
+            out.write(c);
         }
-        return 0;
+
+        return end - index + 1; // Including ';' and the starting '&'
     }
\ No newline at end of file
