diff --git a/tmp/6cfecb2c-a6c7-472c-8fc2-7b0977fadb5a_buggy.java b/tmp/5cd5f4ec-a3fb-4745-89c5-de6f07f77cca_fixed.java
index 4bbd561..2fb05e7 100644
--- a/tmp/6cfecb2c-a6c7-472c-8fc2-7b0977fadb5a_buggy.java
+++ b/tmp/5cd5f4ec-a3fb-4745-89c5-de6f07f77cca_fixed.java
@@ -1,37 +1,51 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Check if the current index is valid to prevent ArrayIndexOutOfBoundsException
+        if (index >= input.length() - 1) {
+            return 0;
+        }
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
+            if (start >= input.length()) {
+                return 0;
+            }
+
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if (end >= input.length()) {
+                return 0;
+            }
+
             int entityValue;
             try {
+                String entityString = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityString, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(entityString, 10);
                 }
             } catch (NumberFormatException nfe) {
                 return 0;
             }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Handle characters above BMP by splitting into surrogate pairs if necessary
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+            return end - index + 1;
         }
         return 0;
     }
\ No newline at end of file
