diff --git a/tmp/2b93b110-f293-45dc-86ea-be277e568d8a_buggy.java b/tmp/c9351c1f-372b-4351-9c79-ae34736b316b_fixed.java
index 4bbd561..406d9ec 100644
--- a/tmp/2b93b110-f293-45dc-86ea-be277e568d8a_buggy.java
+++ b/tmp/c9351c1f-372b-4351-9c79-ae34736b316b_fixed.java
@@ -1,37 +1,64 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    if (input == null) {
+        return 0;
+    }
+    int length = input.length();
+    if (index < 0 || index >= length) {
+        return 0;
+    }
+    if (input.charAt(index) != '&') {
+        return 0;
+    }
+    if (index + 1 >= length) {
+        return 0;
+    }
+    if (input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
     int start = index + 2;
     boolean isHex = false;
 
+    if (start < length) {
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
+    } else {
+        return 0;
+    }
 
     int end = start;
-            while(input.charAt(end) != ';') {
+    while (end < length && input.charAt(end) != ';') {
         end++;
     }
+    if (end >= length || input.charAt(end) != ';') {
+        return 0;
+    }
 
-            int entityValue;
     try {
+        int entityValue;
         if (isHex) {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
         } else {
             entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
         }
+
+        // Check for valid Unicode code point
+        if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {
+            return 0;
+        }
+
+        char[] chars = Character.toChars(entityValue);
+        for (char c : chars) {
+            out.write(c);
+        }
+
+        int processedLength = 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return processedLength;
     } catch (NumberFormatException nfe) {
         return 0;
     }
-
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
-        return 0;
 }
\ No newline at end of file
