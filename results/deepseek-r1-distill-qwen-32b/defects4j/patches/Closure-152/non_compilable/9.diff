diff --git a/tmp/48433c8a-4d9b-407a-8b5f-fcd24aee3afe_buggy.java b/tmp/fdbc6ff9-1491-4e69-8775-4ba00fed0d1d_fixed.java
index 58a1651..450b4a5 100644
--- a/tmp/48433c8a-4d9b-407a-8b5f-fcd24aee3afe_buggy.java
+++ b/tmp/fdbc6ff9-1491-4e69-8775-4ba00fed0d1d_fixed.java
@@ -1,32 +1,37 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Resolve typeOfThis only to an ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      t.error(typeOfThis.getSource(), "Type of this must be an object type, got %s",
+              resolvedTypeOfThis);
+      typeOfThis = null; // Handle the case where it's not an object
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
