diff --git a/tmp/c0a9921a-5454-4584-8996-627aec19b485_buggy.java b/tmp/0cae1393-e0cc-4394-919c-371dc836e30a_fixed.java
index d4e6d48..5c789a9 100644
--- a/tmp/c0a9921a-5454-4584-8996-627aec19b485_buggy.java
+++ b/tmp/0cae1393-e0cc-4394-919c-371dc836e30a_fixed.java
@@ -1,23 +1,32 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
         // Fold String(a) to '' + (a) on immutable literals,
         // which allows further optimizations
         //
         // We can't do this in the general case, because String(a) has
         // slightly different semantics than '' + (a). See
         // http://code.google.com/p/closure-compiler/issues/detail?id=759
         Node value = callTarget.getNext();
         if (value != null) {
+            // Check if there's more than one argument
+            Node nextArg = value.getNext();
+            if (nextArg != null) {
+                return n;
+            }
+            // Check if the argument is an immutable literal
+            if (!value.isLiteralNode()) {
+                return n;
+            }
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
                 value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
\ No newline at end of file
