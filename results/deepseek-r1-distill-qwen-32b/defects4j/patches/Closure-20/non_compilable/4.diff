diff --git a/tmp/3fb6d6f2-3046-40a2-94f7-da62d3c43b8b_buggy.java b/tmp/91fe0b24-c11e-48fd-8bfe-f7d3227cdebf_fixed.java
index d4e6d48..b9e6f32 100644
--- a/tmp/3fb6d6f2-3046-40a2-94f7-da62d3c43b8b_buggy.java
+++ b/tmp/91fe0b24-c11e-48fd-8bfe-f7d3227cdebf_fixed.java
@@ -1,23 +1,18 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+        Node args = callTarget.getNext();
+        if (args != null && args.getChildCount() == 1) {
+            Node value = args.removeChild(0); // Detach the only argument
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
-            value.detachFromParent());
+                value);
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
\ No newline at end of file
