diff --git a/tmp/523d9fcf-1d2b-4fac-85c0-f682eb0f3d1e_buggy.java b/tmp/c97a05ee-1106-41b6-88cb-71ba0b4be3a0_fixed.java
index d4e6d48..e04fb52 100644
--- a/tmp/523d9fcf-1d2b-4fac-85c0-f682eb0f3d1e_buggy.java
+++ b/tmp/c97a05ee-1106-41b6-88cb-71ba0b4be3a0_fixed.java
@@ -1,23 +1,23 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+        Node argumentsNode = callTarget.getNext();
+        if (argumentsNode != null && argumentsNode.getType() == Token.ARGUMENT_LIST) {
+            int argc = argumentsNode.getChildCount();
+            if (argc == 1) {
+                Node value = argumentsNode.getFirstChild();
+                if (value.getType() == Token.STRING || value.getType() == Token.NUMBER) {
                     Node addition = IR.add(
                             IR.string("").srcref(callTarget),
                             value.detachFromParent());
                     n.getParent().replaceChild(n, addition);
                     reportCodeChange();
                     return addition;
                 }
             }
+        }
+    }
     return n;
 }
\ No newline at end of file
