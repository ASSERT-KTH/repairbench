diff --git a/tmp/cc1b669a-6e72-4627-bb0f-62641d653a98_buggy.java b/tmp/849a5233-5b2d-417a-85eb-f002f2b96c25_fixed.java
index d4e6d48..aa06f1b 100644
--- a/tmp/cc1b669a-6e72-4627-bb0f-62641d653a98_buggy.java
+++ b/tmp/849a5233-5b2d-417a-85eb-f002f2b96c25_fixed.java
@@ -1,23 +1,29 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
         Node value = callTarget.getNext();
         if (value != null) {
+            // Check for exactly one argument.
+            if (value.getNext() != null) {
+                return n;
+            }
+            // Check if the argument is a simple literal or name.
+            boolean isSimple = value.isName() || 
+                              value.isString() || 
+                              value.isNumber() || 
+                              value.isBoolean() || 
+                              value.isNull();
+            if (!isSimple) {
+                return n;
+            }
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
                 value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
         }
     }
     return n;
 }
\ No newline at end of file
