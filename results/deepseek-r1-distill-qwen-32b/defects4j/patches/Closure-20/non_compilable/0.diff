diff --git a/tmp/ff1a2ccb-4267-41cb-9671-df316da73330_buggy.java b/tmp/43132bdc-1a8c-4064-bf9c-e62f20fa53c1_fixed.java
index d4e6d48..4490ae2 100644
--- a/tmp/ff1a2ccb-4267-41cb-9671-df316da73330_buggy.java
+++ b/tmp/43132bdc-1a8c-4064-bf9c-e62f20fa53c1_fixed.java
@@ -1,23 +1,41 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+      Node firstArg = callTarget.getNext();
+      if (firstArg == null) {
+        return n;
+      }
+      // Check for multiple arguments
+      if (firstArg.getNext() != null) {
+        return n;
+      }
+      Node value = firstArg;
+      // Check if the argument is an immutable literal
+      if (!isImmutableLiteral(value)) {
+        return n;
+      }
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
-    }
     return n;
   }
+
+  private boolean isImmutableLiteral(Node node) {
+    switch (node.getToken()) {
+      case Token.NUMBER:
+      case Token.STRING:
+      case Token.TRUE:
+      case Token.FALSE:
+      case Token.NULL:
+      case Token.UNDEFINED:
+        return true;
+      default:
+        return false;
+    }
+  }
\ No newline at end of file
