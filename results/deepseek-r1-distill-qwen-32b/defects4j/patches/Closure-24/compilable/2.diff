diff --git a/tmp/430a7581-41ba-4619-8f71-2e1bb02bc73d_buggy.java b/tmp/ca52f927-3e79-48a1-a440-f66e0683bf23_fixed.java
index 602226b..f2f2cc8 100644
--- a/tmp/430a7581-41ba-4619-8f71-2e1bb02bc73d_buggy.java
+++ b/tmp/ca52f927-3e79-48a1-a440-f66e0683bf23_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (n.hasChildren()) {
+            Node firstChild = n.getFirstChild();
+            if (firstChild.isQualifiedName()) {
+                // Correctly identify and process aliases
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
+                if (aliasVar != null) {
                     aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
-          transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+                    Node initialValue = aliasVar.getInitialValue();
+                    if (initialValue != null) {
+                        transformation.addAlias(name, initialValue.getQualifiedName());
+                    }
+                }
             } else {
-          // TODO(robbyw): Support using locals for private variables.
+                // Report error for non-alias locals
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
+        } else {
+            // Handle cases where Var node has no children (e.g., var x;)
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
