diff --git a/tmp/088bd48c-d684-470b-943a-6d8884ae0ea8_buggy.java b/tmp/1bedddf7-65a5-424b-941c-c5cad1c1084d_fixed.java
index 602226b..14d9a02 100644
--- a/tmp/088bd48c-d684-470b-943a-6d8884ae0ea8_buggy.java
+++ b/tmp/1bedddf7-65a5-424b-941c-c5cad1c1084d_fixed.java
@@ -1,26 +1,29 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
+            if (n.hasChildren()) {
+                if (n.getChildCount() > 1) {
+                    Node initializer = n.getChildAtIndex(1);
+                    if (initializer.isQualifiedName()) {
+                        String name = n.getFirstChild().getString();
                         Var aliasVar = scope.getVar(name);
                         aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                         transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
                     } else {
-          // TODO(robbyw): Support using locals for private variables.
+                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());
+                    }
+                } else {
+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getFirstChild().getString());
+                }
+            } else {
                 report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
             }
         }
     }
 }
\ No newline at end of file
