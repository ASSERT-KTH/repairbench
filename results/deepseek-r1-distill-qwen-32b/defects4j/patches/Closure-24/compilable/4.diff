diff --git a/tmp/eaf541d9-1653-4d63-9a07-e9b84ce0bbbc_buggy.java b/tmp/488d934f-c04b-4021-b411-13dc9bcd404c_fixed.java
index 602226b..1ac39a8 100644
--- a/tmp/eaf541d9-1653-4d63-9a07-e9b84ce0bbbc_buggy.java
+++ b/tmp/488d934f-c04b-4021-b411-13dc9bcd404c_fixed.java
@@ -1,26 +1,15 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
-        Node n = v.getNode();
-        int type = n.getType();
-        Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-          String name = n.getString();
-          Var aliasVar = scope.getVar(name);
-          aliases.put(name, aliasVar);
+        Node initialValue = v.getInitialValue();
+        if (initialValue != null && initialValue.isQualifiedName()) {
+            String name = v.getName();
+            aliases.put(name, v);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+            String qualifiedName = initialValue.getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-        }
+            report(t, v.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, v.getName());
         }
     }
 }
\ No newline at end of file
