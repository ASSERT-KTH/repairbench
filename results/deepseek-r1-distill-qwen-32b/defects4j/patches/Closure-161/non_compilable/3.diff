diff --git a/tmp/7422c205-de72-476e-b011-14f7d01042e5_buggy.java b/tmp/7232685d-fdae-42b1-bedb-1b73c3f82666_fixed.java
index 1303a19..7494a01 100644
--- a/tmp/7422c205-de72-476e-b011-14f7d01042e5_buggy.java
+++ b/tmp/7232685d-fdae-42b1-bedb-1b73c3f82666_fixed.java
@@ -1,45 +1,47 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
-
+    // If GETPROP/GETELEM is used as assignment target, we can't fold
+    if (parent.getType() == Token.PUTPROP || parent.getType() == Token.PUTELEM) {
+      return n;
+    }
+    // If the index is not a number, can't proceed
     if (right.getType() != Token.NUMBER) {
-      // Sometimes people like to use complex expressions to index into
-      // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    // Check if index is integer and non-negative
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
+    // Attempt to find the element at the given index
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
+    // Prepare the element for replacement
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
-    // Replace the entire GETELEM with the value
+    // Replace the GETELEM node with the element
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
