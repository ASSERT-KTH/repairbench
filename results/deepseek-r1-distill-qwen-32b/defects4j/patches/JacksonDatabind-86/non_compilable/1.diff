diff --git a/tmp/38b7599b-684c-423a-acb7-093ba3c87be4_buggy.java b/tmp/8e87ad4a-f60c-4133-a3ab-09ea8f0a0b9b_fixed.java
index e69de29..347a84f 100644
--- a/tmp/38b7599b-684c-423a-acb7-093ba3c87be4_buggy.java
+++ b/tmp/8e87ad4a-f60c-4133-a3ab-09ea8f0a0b9b_fixed.java
@@ -0,0 +1,52 @@
+protected JavaType _constructType(Class<?> type) {
+    if (type == null) {
+        return null;
+    }
+
+    // Check if we have a cached type
+    JavaType cached = _findType(type);
+    if (cached != null) {
+        return cached;
+    }
+
+    // Check if the class is a basic type, otherwise proceed
+    if (type.isPrimitive()) {
+        return constructPrimitiveType(type);
+    }
+
+    // Resolve the superclass and interfaces (if any)
+    JavaType superClass = null;
+    if (!type.isInterface()) {
+        Class<?> superClassClass = type.getSuperclass();
+        if (superClassClass != null) {
+            superClass = constructType(superClassClass);
+        }
+    }
+
+    // Collect the class properties, including those from the superclass
+    BeanDescription beanDesc = getIntrospect().getBeanDescription(type);
+
+    // Get the method creators and properties
+    BeanEnumResolver beanResolver = new BeanEnumResolver(objectMapper(), beanDesc, createCreators);
+    BeanPropertyMap creators = beanResolver.findCreators();
+
+    // Get the class's own properties
+    BeanPropertyMap props = beanDesc.findBeanProperties(null);
+
+    // If superclass has properties, include them in the current properties
+    if (superClass != null && superClass instanceof JavaTypenio.JsonSerializer) {
+        BeanPropertyMap superProps = ((JavaType)localObjectResolver.resolve(superClass)).beanDesc.findBeanProperties(null);
+        if (superProps != null && !superProps.isEmpty()) {
+            props.putAll(superProps);
+        }
+    }
+
+    // Construct the type based on the properties and superclass
+    JavaType resultType = (BeanPropertyMap.isEmpty(props)) 
+        ? constructNonBeanType(type, superClass) 
+        : constructBeanType(type, superClass, beanDesc, beanResolver, props, creators);
+
+    // Cache and return the constructed type
+    _addType(resultType);
+    return resultType;
+}
\ No newline at end of file
