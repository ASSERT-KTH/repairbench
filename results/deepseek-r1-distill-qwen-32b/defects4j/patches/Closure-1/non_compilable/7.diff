diff --git a/tmp/4bc33627-5104-412a-a655-12c66137ad74_buggy.java b/tmp/0501c649-51f1-4495-8b49-3090a1b24bf5_fixed.java
index 61ffdbf..5a459cc 100644
--- a/tmp/4bc33627-5104-412a-a655-12c66137ad74_buggy.java
+++ b/tmp/0501c649-51f1-4495-8b49-3090a1b24bf5_fixed.java
@@ -1,44 +1,25 @@
-  /**
-   * Removes unreferenced arguments from a function declaration and when
-   * possible the function's callSites.
-   *
-   * @param fnScope The scope inside the function
-   */
   private void removeUnreferencedFunctionArgs(Scope fnScope) {
-    // Notice that removing unreferenced function args breaks
-    // Function.prototype.length. In advanced mode, we don't really care
-    // about this: we consider "length" the equivalent of reflecting on
-    // the function's lexical source.
-    //
-    // Rather than create a new option for this, we assume that if the user
-    // is removing globals, then it's OK to remove unused function args.
-    //
-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253
-
     Node function = fnScope.getRootNode();
-
     Preconditions.checkState(function.isFunction());
     if (NodeUtil.isGetOrSetKey(function.getParent())) {
-      // The parameters object literal setters can not be removed.
       return;
     }
 
     Node argList = getFunctionArgList(function);
-    boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);
     if (!modifyCallers) {
-      // Strip unreferenced args off the end of the function declaration.
-      Node lastArg;
-      while ((lastArg = argList.getLastChild()) != null) {
-        Var var = fnScope.getVar(lastArg.getString());
+      List<Node> toRemove = new ArrayList<>();
+      for (Node child : argList.children()) {
+        Var var = fnScope.getVar(child.getString());
         if (!referenced.contains(var)) {
-          argList.removeChild(lastArg);
+          toRemove.add(child);
+        }
+      }
+      for (Node node : toRemove) {
+        argList.removeChild(node);
         compiler.reportCodeChange();
-        } else {
-          break;
-        }
       }
     } else {
       callSiteOptimizer.optimize(fnScope, referenced);
     }
   }
\ No newline at end of file
