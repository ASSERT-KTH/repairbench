diff --git a/tmp/7fd3f8ba-e0d9-4b58-bc6d-320f31cb3a15_buggy.java b/tmp/d944e51a-dd68-4fdd-9833-8a78450865ff_fixed.java
index 63641d0..e6373bd 100644
--- a/tmp/7fd3f8ba-e0d9-4b58-bc6d-320f31cb3a15_buggy.java
+++ b/tmp/d944e51a-dd68-4fdd-9833-8a78450865ff_fixed.java
@@ -1,33 +1,26 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // Replace all template types using a clone of fnType to avoid modifying the original
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
         registry, inferred);
-    Node callTarget = n.getFirstChild();
-
-    FunctionType replacementFnType = fnType.visit(replacer)
+    FunctionType clonedFnType = fnType.clone();
+    FunctionType replacementFnType = clonedFnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
+    Node callTarget = n.getFirstChild();
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
