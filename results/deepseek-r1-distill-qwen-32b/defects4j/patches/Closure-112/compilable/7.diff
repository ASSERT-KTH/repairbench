diff --git a/tmp/08600f91-d4c2-409f-9fa0-ecf20f966831_buggy.java b/tmp/0a64ae01-8a40-4bb4-89fe-3cd46a99be15_fixed.java
index 63641d0..713446d 100644
--- a/tmp/08600f91-d4c2-409f-9fa0-ecf20f966831_buggy.java
+++ b/tmp/0a64ae01-8a40-4bb4-89fe-3cd46a99be15_fixed.java
@@ -1,33 +1,33 @@
-  /**
-   * For functions with function(this: T, ...) and T as parameters, type
-   * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
-   */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Check if all inferred types are known (not UNKNOWN)
+  for (JSType type : inferred.values()) {
+    if (type.isUnknownType()) {
+      return false;
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+  // Replace all template types with inferred types.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
       registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
