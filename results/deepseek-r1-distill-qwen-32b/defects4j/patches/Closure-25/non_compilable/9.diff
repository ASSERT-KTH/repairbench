diff --git a/tmp/a8d835ef-ebb4-4c7c-8c96-ff431b49c6ec_buggy.java b/tmp/9bf53850-0e33-4d23-9172-c81aacd60c16_fixed.java
index b98f0a7..ee48b2d 100644
--- a/tmp/a8d835ef-ebb4-4c7c-8c96-ff431b49c6ec_buggy.java
+++ b/tmp/9bf53850-0e33-4d23-9172-c81aacd60c16_fixed.java
@@ -1,29 +1,40 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
+                // interface precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+    
+    // Infer types for arguments based on the constructor function's parameters
+    int paramIndex = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (ct != null && paramIndex < ct.getParameterCount()) {
+            FunctionType.Param param = ct.getParameter(paramIndex);
+            if (param != null && param.getType() != null) {
+                arg.setJSType(param.getType());
+            }
+        }
         scope = traverse(arg, scope);
+        paramIndex++;
     }
+    
     return scope;
 }
\ No newline at end of file
