diff --git a/tmp/bdb1d77d-8baf-438f-b5b9-4b35a86c29da_buggy.java b/tmp/9a4007f0-49cc-42f9-9e1b-750e7546ce42_fixed.java
index b98f0a7..9df4be8 100644
--- a/tmp/bdb1d77d-8baf-438f-b5b9-4b35a86c29da_buggy.java
+++ b/tmp/9a4007f0-49cc-42f9-9e1b-750e7546ce42_fixed.java
@@ -1,29 +1,40 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
+
     n.setJSType(type);
+    List<Param> params = ct != null ? ct.getParams() : null;
+
+    int iParam = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      if (params != null && iParam < params.size()) {
+        Param param = params.get(iParam);
+        JSType paramType = param.getType();
+        if (paramType != null) {
+          arg.setExpectedType(paramType);
+        }
+      }
       scope = traverse(arg, scope);
+      iParam++;
     }
+
     return scope;
   }
\ No newline at end of file
