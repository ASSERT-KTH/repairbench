diff --git a/tmp/a840688d-4e0e-4014-a971-445dbf243fca_buggy.java b/tmp/a6a4def8-9087-46f4-837c-9055fd37083f_fixed.java
index b98f0a7..8c375ce 100644
--- a/tmp/a840688d-4e0e-4014-a971-445dbf243fca_buggy.java
+++ b/tmp/a6a4def8-9087-46f4-837c-9055fd37083f_fixed.java
@@ -1,29 +1,38 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+
+    // Apply parameter types to arguments before traversing
+    FunctionType ct = constructor.getJSType() instanceof FunctionType ? (FunctionType) constructor.getJSType() : null;
+    int paramIndex = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (ct != null && paramIndex < ct.getParamCount()) {
+            JSType paramType = ct.getParamType(paramIndex);
+            if (paramType != null) {
+                arg.setJSType(paramType);
+            }
+        }
+        paramIndex++;
         scope = traverse(arg, scope);
     }
+
     return scope;
 }
\ No newline at end of file
