diff --git a/tmp/57537932-05d3-4be2-a5f5-2b58c3c65e8c_buggy.java b/tmp/ffdf361a-3e28-4e64-96b7-b97d32f808c7_fixed.java
index b98f0a7..39908eb 100644
--- a/tmp/57537932-05d3-4be2-a5f5-2b58c3c65e8c_buggy.java
+++ b/tmp/ffdf361a-3e28-4e64-96b7-b97d32f808c7_fixed.java
@@ -1,29 +1,44 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Set each argument's type based on the constructor's parameter types
+                List<JSType> paramTypes = ct.getParameterTypes();
+                int paramIndex = 0;
+                Node argNode = constructor.getNext(); // The first argument after the constructor
+                while (argNode != null) {
+                    if (paramIndex < paramTypes.size()) {
+                        JSType paramType = paramTypes.get(paramIndex);
+                        if (paramType != null) {
+                            paramType = paramType.restrictByNotNullOrUndefined();
+                            argNode.setJSType(paramType);
+                        }
+                    }
+                    paramIndex++;
+                    argNode = argNode.getNext();
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
