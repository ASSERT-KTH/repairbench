diff --git a/tmp/d7c82f71-cf5e-4c63-b055-7f8909ddc6d5_buggy.java b/tmp/d27ad607-350a-4a65-ae33-13c74af644ea_fixed.java
index e8705ac..80688c1 100644
--- a/tmp/d7c82f71-cf5e-4c63-b055-7f8909ddc6d5_buggy.java
+++ b/tmp/d27ad607-350a-4a65-ae33-13c74af644ea_fixed.java
@@ -1,24 +1,23 @@
-    /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
-     */
 private void annotateCalls(Node n) {
     Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+    Node firstChild = n.getFirstChild();
+    Node func = firstChild;
+
+    // Unwrap any surrounding Paren nodes.
+    while (func.getType() == Token.PAREN) {
+        func = func.getFirstChild();
+    }
+
+    // Keep track of the "this" context of a call. A call without an
     // explicit "this" is a free call.
-      Node first = n.getFirstChild();
-
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+    if (!NodeUtil.isGet(func)) {
         n.putBooleanProp(Node.FREE_CALL, true);
     }
 
     // Keep track of the context in which eval is called. It is important
     // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
+    if (func.isName() && "eval".equals(func.getString())) {
+        func.putBooleanProp(Node.DIRECT_EVAL, true);
     }
 }
\ No newline at end of file
