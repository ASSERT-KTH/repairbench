diff --git a/tmp/a3a93dee-b23a-438a-a400-80ee60275fc1_buggy.java b/tmp/2037d42c-720a-4558-b213-2053a50c71c7_fixed.java
index e8705ac..989688b 100644
--- a/tmp/a3a93dee-b23a-438a-a400-80ee60275fc1_buggy.java
+++ b/tmp/2037d42c-720a-4558-b213-2053a50c71c7_fixed.java
@@ -1,24 +1,24 @@
     /**
-     * There are two types of calls we are interested in calls without explicit
-     * "this" values (what we are call "free" calls) and direct call to eval.
+     * Correctly identifies free calls and direct eval calls, even when wrapped in cast nodes.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+      // Unwrap any cast nodes to find the actual function being called.
+      while (first.isCast()) {
+        first = first.getFirstChild();
+      }
 
+      // A call without an explicit "this" is a free call.
       if (!NodeUtil.isGet(first)) {
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
+      // Direct eval calls are when 'eval' is called without an explicit 'this'.
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
