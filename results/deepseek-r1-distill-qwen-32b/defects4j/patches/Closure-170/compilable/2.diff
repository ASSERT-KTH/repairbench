diff --git a/tmp/a56d3398-f25c-455c-bf91-957d37924976_buggy.java b/tmp/04e9fa11-e513-445d-a944-c9c2df5bb051_fixed.java
index 5abdeb5..cbe713e 100644
--- a/tmp/a56d3398-f25c-455c-bf91-957d37924976_buggy.java
+++ b/tmp/04e9fa11-e513-445d-a944-c9c2df5bb051_fixed.java
@@ -1,29 +1,28 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
 
       numUsesWithinCfgNode = 0;
       AbstractCfgNodeTraversalCallback gatherCb =
           new AbstractCfgNodeTraversalCallback() {
 
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          if (n.isName() && n.getString().equals(varName)) {
+            boolean isAssigned = false;
+            Node currentParent = parent;
+            while (currentParent != null) {
+              if (currentParent.isAssign() && currentParent.getFirstChild() == n) {
+                isAssigned = true;
+                break;
+              }
+              currentParent = currentParent.getParent();
+            }
+            if (!isAssigned) {
               numUsesWithinCfgNode++;
             }
           }
+        }
 
       };
 
       NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
