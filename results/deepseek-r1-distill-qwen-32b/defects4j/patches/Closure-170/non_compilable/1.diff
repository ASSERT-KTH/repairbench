diff --git a/tmp/1e0f52e0-0a5f-469f-a243-e9abf21ebf50_buggy.java b/tmp/8e47ecb0-1bf8-45e7-9816-7e52a84f96cb_fixed.java
index 5abdeb5..aa872c7 100644
--- a/tmp/1e0f52e0-0a5f-469f-a243-e9abf21ebf50_buggy.java
+++ b/tmp/8e47ecb0-1bf8-45e7-9816-7e52a84f96cb_fixed.java
@@ -1,29 +1,18 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
     numUsesWithinCfgNode = 0;
     AbstractCfgNodeTraversalCallback gatherCb =
         new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
                 if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                    !((parent.isAssign() && parent.getFirstChild() == n) ||
+                      parent.isVarDecl() || parent.isLetDecl() || parent.isConstDecl())) {
                     numUsesWithinCfgNode++;
                 }
             }
-
         };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
