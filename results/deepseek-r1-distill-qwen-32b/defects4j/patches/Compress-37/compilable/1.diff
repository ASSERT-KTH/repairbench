diff --git a/tmp/10ab01dd-ecc8-456d-88ac-9fddac8e2d56_buggy.java b/tmp/5fba90c2-8f8d-4239-9719-3d19fec57d39_fixed.java
index 4b7e1e4..318261b 100644
--- a/tmp/10ab01dd-ecc8-456d-88ac-9fddac8e2d56_buggy.java
+++ b/tmp/5fba90c2-8f8d-4239-9719-3d19fec57d39_fixed.java
@@ -1,52 +1,54 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
+                    // Found the length specifier, process
+                    break;
+                }
+                len = len * 10 + (ch - '0');
+            }
+            if (ch == -1){
+                // End of input
+                break;
+            }
+            if (len <= 0){
+                // Skip invalid line
+                while ((ch = i.read()) != '\n' && ch != -1) {
+                    // Skip until end of line
+                }
+                continue;
+            }
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while((ch = i.read()) != -1) {
-                        read++;
                 if (ch == '='){ // end of keyword
+                    break;
+                }
+                coll.write((byte) ch);
+            }
             final String keyword = coll.toString(CharsetNames.UTF_8);
             // Get rest of entry
             final int restLen = len - read;
             if (restLen == 1) { // only NL
                 headers.remove(keyword);
             } else {
                 final byte[] rest = new byte[restLen];
                 final int got = IOUtils.readFully(i, rest);
                 if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                    throw new IOException("Failed to read PAX header. Expected "
+                                          + restLen + " bytes, read " + got);
                 }
                 // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                 headers.put(keyword, value);
             }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
         }
         return headers;
     }
\ No newline at end of file
