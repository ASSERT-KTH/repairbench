diff --git a/tmp/348e4ea6-5bf0-4f6b-8364-79ebfff91a62_buggy.java b/tmp/654ef05d-820a-4acb-a00e-8b6228886549_fixed.java
index d6a560a..507de43 100644
--- a/tmp/348e4ea6-5bf0-4f6b-8364-79ebfff91a62_buggy.java
+++ b/tmp/654ef05d-820a-4acb-a00e-8b6228886549_fixed.java
@@ -1,33 +1,33 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Attempt to resolve via the registry first.
     boolean resolved = resolveViaRegistry(t, enclosing);
+    
+    // Check for cycles after registry resolution.
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
     
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolving via properties.
     resolveViaProperties(t, enclosing);
+    
+    // Check for cycles after property resolution.
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // Proceed with the remaining resolution steps.
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
