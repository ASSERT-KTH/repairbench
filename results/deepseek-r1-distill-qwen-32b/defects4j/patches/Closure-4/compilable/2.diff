diff --git a/tmp/c143390c-b005-43ef-a338-98da68f11e5f_buggy.java b/tmp/4b4f8128-ca4f-4ae3-b8fe-f97807e11675_fixed.java
index d6a560a..b3259af 100644
--- a/tmp/c143390c-b005-43ef-a338-98da68f11e5f_buggy.java
+++ b/tmp/4b4f8128-ca4f-4ae3-b8fe-f97807e11675_fixed.java
@@ -1,33 +1,31 @@
   /**
    * Resolve the referenced type within the enclosing scope.
    */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+    // First, try resolving via the registry
+    boolean resolvedRegistry = resolveViaRegistry(t, enclosing);
+    if (resolvedRegistry) {
+      // Check for implicit prototype cycle after resolving via registry
       if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return registry.isLastGeneration() ? getReferencedType() : this;
       }
-
-    if (resolved) {
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolving via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
\ No newline at end of file
