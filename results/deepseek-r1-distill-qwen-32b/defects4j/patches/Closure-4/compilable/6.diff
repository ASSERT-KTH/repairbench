diff --git a/tmp/2a1644f2-5b43-41ae-90c9-b4f8feb208cf_buggy.java b/tmp/c579869c-fc2a-4ac4-83f6-44e29978ffc6_fixed.java
index d6a560a..130eea0 100644
--- a/tmp/2a1644f2-5b43-41ae-90c9-b4f8feb208cf_buggy.java
+++ b/tmp/c579869c-fc2a-4ac4-83f6-44e29978ffc6_fixed.java
@@ -1,33 +1,28 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+        if (detectImplicitPrototypeCycle()) {
+            handleTypeCycle(t);
+            return registry.isLastGeneration() ?
+                    getReferencedType() : this;
+        }
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
                 getReferencedType() : this;
-    }
-
+    } else {
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
+            return registry.isLastGeneration() ?
+                    getReferencedType() : this;
         }
-
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
         return registry.isLastGeneration() ?
                 getReferencedType() : this;
     }
+}
\ No newline at end of file
