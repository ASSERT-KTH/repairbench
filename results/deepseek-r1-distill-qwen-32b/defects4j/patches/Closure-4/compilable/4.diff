diff --git a/tmp/583d071c-457c-4b32-96f6-10b8693b6595_buggy.java b/tmp/9ac3b617-6d3a-425e-8b9f-9c116528edb1_fixed.java
index d6a560a..523b92c 100644
--- a/tmp/583d071c-457c-4b32-96f6-10b8693b6595_buggy.java
+++ b/tmp/9ac3b617-6d3a-425e-8b9f-9c116528edb1_fixed.java
@@ -1,33 +1,29 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
+      if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return registry.isLastGeneration() ?
+            getReferencedType() : this;
+      }
       super.resolveInternal(t, enclosing);
       finishPropertyContinuations();
       return registry.isLastGeneration() ?
           getReferencedType() : this;
     }
 
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
+      return registry.isLastGeneration() ?
+          getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
       finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
\ No newline at end of file
