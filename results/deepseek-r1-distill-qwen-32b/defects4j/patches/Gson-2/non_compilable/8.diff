diff --git a/tmp/7cc12026-da38-4828-814f-72dc3a8bc1c3_buggy.java b/tmp/be28dbaa-ab37-4940-a0a3-9865def26aaa_fixed.java
index 6e45f80..00ac6ec 100644
--- a/tmp/7cc12026-da38-4828-814f-72dc3a8bc1c3_buggy.java
+++ b/tmp/be28dbaa-ab37-4940-a0a3-9865def26aaa_fixed.java
@@ -1,21 +1,39 @@
   /**
    * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
    * that the deserialized type matches the type requested.
    */
   public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
       final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
         final Class<? super T2> requestedType = typeToken.getRawType();
         if (!clazz.isAssignableFrom(requestedType)) {
           return null;
         }
-        return (TypeAdapter<T2>) typeAdapter;
+        final Class<T2> rawType = (Class<T2>) requestedType;
+        return new TypeAdapter<T2>() {
+          @Override
+          public T2 read(JsonReader in) throws IOException {
+            T1 value = typeAdapter.read(in);
+            if (!rawType.isInstance(value)) {
+              throw new JsonSyntaxException("Expected " + rawType.getName() + " but was " + value.getClass().getName());
+            }
+            return (T2) value;
+          }
 
+          @Override
+          public void write(JsonWriter out, T2 value) {
+            try {
+              typeAdapter.write(out, value);
+            } catch (ClassCastException e) {
+              throw new JsonSyntaxException("Expected " + rawType.getName() + " but was " + value.getClass().getName(), e);
+            }
+          }
+        };
       }
       @Override public String toString() {
         return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
       }
     };
   }
\ No newline at end of file
