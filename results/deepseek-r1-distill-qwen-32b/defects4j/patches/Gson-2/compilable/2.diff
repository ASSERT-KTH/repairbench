diff --git a/tmp/df0a6e23-779f-438a-9955-dab33083f10e_buggy.java b/tmp/e8d33ac8-d179-43e3-9efa-2fcc886cfe1b_fixed.java
index 6e45f80..4ff1d01 100644
--- a/tmp/df0a6e23-779f-438a-9955-dab33083f10e_buggy.java
+++ b/tmp/e8d33ac8-d179-43e3-9efa-2fcc886cfe1b_fixed.java
@@ -1,21 +1,33 @@
-  /**
-   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
-   * that the deserialized type matches the type requested.
-   */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
         final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
     return new TypeAdapterFactory() {
         @SuppressWarnings("unchecked")
         public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
             final Class<? super T2> requestedType = typeToken.getRawType();
             if (!clazz.isAssignableFrom(requestedType)) {
                 return null;
             }
-        return (TypeAdapter<T2>) typeAdapter;
+            return new TypeAdapter<T2>() {
+                @Override
+                public T2 read(JsonReader in) throws IOException {
+                    T1 obj = typeAdapter.read(in);
+                    if (obj != null && !requestedType.isInstance(obj)) {
+                        throw new JsonSyntaxException(
+                                "Expected " + requestedType.getName() + " but was " + obj.getClass().getName());
+                    }
+                    return (T2) obj;
+                }
 
+                @Override
+                public void write(JsonWriter out, T2 value) throws IOException {
+                    typeAdapter.write(out, (T1) value);
                 }
-      @Override public String toString() {
+            };
+        }
+
+        @Override
+        public String toString() {
             return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
         }
     };
 }
\ No newline at end of file
