diff --git a/tmp/5e80d6e6-add9-4305-a16a-41e83cc0adaf_buggy.java b/tmp/c4d6689e-961a-4ed3-b46e-57ceaf085521_fixed.java
index 4b163f6..3cbf7ef 100644
--- a/tmp/5e80d6e6-add9-4305-a16a-41e83cc0adaf_buggy.java
+++ b/tmp/c4d6689e-961a-4ed3-b46e-57ceaf085521_fixed.java
@@ -1,28 +1,21 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
         long available = numToSkip;
         while (numToSkip > 0) {
             long skipped = input.skip(numToSkip);
             if (skipped == 0) {
                 break;
             }
             numToSkip -= skipped;
         }
         
+        // If still bytes to skip, use read() to read and ignore them
+        if (numToSkip > 0) {
+            byte[] buffer = new byte[(int) Math.min(numToSkip, 1024)]; // Use a reasonable chunk size
+            int read;
+            while (numToSkip > 0 && (read = input.read(buffer)) != -1) {
+                numToSkip -= read;
+            }
+        }
+        
         return available - numToSkip;
     }
\ No newline at end of file
