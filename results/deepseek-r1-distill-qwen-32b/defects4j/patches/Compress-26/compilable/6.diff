diff --git a/tmp/7b7ea837-550e-48be-a9ed-553ecf0df320_buggy.java b/tmp/2692d3d8-55d4-412f-a19b-b3c4f4f7e334_fixed.java
index 4b163f6..ca8f392 100644
--- a/tmp/7b7ea837-550e-48be-a9ed-553ecf0df320_buggy.java
+++ b/tmp/2692d3d8-55d4-412f-a19b-b3c4f4f7e334_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
     public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
+        long remaining = numToSkip;
+        while (remaining > 0) {
+            long skipped = input.skip(remaining);
             if (skipped == 0) {
-                break;
+                // fall back to reading bytes
+                byte[] buffer = new byte[4096];
+                int read;
+                while (remaining > 0 && (read = input.read(buffer)) != -1) {
+                    remaining -= read;
+                    if (read == 0) {
+                        break; // No more data to read
                     }
-            numToSkip -= skipped;
                 }
-            
-        return available - numToSkip;
+                break; // exit the loop once done skipping
+            }
+            remaining -= skipped;
+        }
+        return numToSkip - remaining;
     }
\ No newline at end of file
