diff --git a/tmp/9ef8db44-cb73-47e8-9c1a-5830ff89d351_buggy.java b/tmp/7e481aad-675c-4caf-8999-361d8e8927c4_fixed.java
index 42b58d0..6d30221 100644
--- a/tmp/9ef8db44-cb73-47e8-9c1a-5830ff89d351_buggy.java
+++ b/tmp/7e481aad-675c-4caf-8999-361d8e8927c4_fixed.java
@@ -1,19 +1,31 @@
 protected void registerTypeVariablesOn(Type classType) {
+    registerTypeVariablesOn(classType, new HashSet<>());
+}
+
+private void registerTypeVariablesOn(Type classType, Set<Type> visited) {
+    if (visited.contains(classType)) {
+        return;
+    }
+    visited.add(classType);
+
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
+
+        if (actualTypeArgument instanceof ParameterizedType) {
+            registerTypeVariablesOn(actualTypeArgument, visited);
+        }
     }
 }
\ No newline at end of file
