diff --git a/tmp/e17f7903-e2e3-4689-ae52-1a96e48e6f49_buggy.java b/tmp/de2e9ace-972a-4614-9990-572f53c98ac8_fixed.java
index 3da904d..8edfa7b 100644
--- a/tmp/e17f7903-e2e3-4689-ae52-1a96e48e6f49_buggy.java
+++ b/tmp/de2e9ace-972a-4614-9990-572f53c98ac8_fixed.java
@@ -1,73 +1,82 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
-
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    int cellCount = safeParseInt(values, index++);
     if (cellCount > 0) {
-            index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        index += 1; // Timing advance
+        int mcc = safeParseInt(values, index++);
+        int mnc = safeParseInt(values, index++);
 
         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+            int lac = safeParseInt(values, index++);
+            int cid = safeParseInt(values, index++);
             String rssi = values[index++];
-                if (!rssi.isEmpty()) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
-                } else {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
-                }
+            int rssiValue = rssi.isEmpty() ? 0 : safeParseInt(rssi);
+            network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssiValue));
         }
     }
 
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+        int wifiCount = safeParseInt(values, index++);
 
         for (int i = 0; i < wifiCount; i++) {
-                index += 1; // wifi name
+            index += 1; // Skipping WIFI name
             String macAddress = values[index++];
             String rssi = values[index++];
             if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
-                    network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                int rssiValue = safeParseInt(rssi);
+                network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, rssiValue));
             }
         }
     }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
+
+private int safeParseInt(String[] values, int index) {
+    if (index >= values.length || values[index] == null) {
+        return 0;
+    }
+    String value = values[index].trim();
+    try {
+        return Integer.parseInt(value);
+    } catch (NumberFormatException e) {
+        return 0;
+    }
+}
\ No newline at end of file
