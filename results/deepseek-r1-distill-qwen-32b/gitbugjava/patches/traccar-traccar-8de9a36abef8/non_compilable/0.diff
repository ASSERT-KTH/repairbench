diff --git a/tmp/5bb2162e-b41c-4d0e-8365-90e69539b1e3_buggy.java b/tmp/fc5e3e10-9495-45ee-b854-8f1960bd734f_fixed.java
index ad77f15..f23be01 100644
--- a/tmp/5bb2162e-b41c-4d0e-8365-90e69539b1e3_buggy.java
+++ b/tmp/fc5e3e10-9495-45ee-b854-8f1960bd734f_fixed.java
@@ -1,112 +1,155 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            if (index < values.length) {
+                position.setValid("A".equals(values[index++]));
+                if (index < values.length) {
+                    int satellites = 0;
+                    if (!values[index].isEmpty()) {
+                        satellites = Integer.parseInt(values[index++]);
+                    }
+                    position.set(Position.KEY_SATELLITES, satellites);
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+                        char latDir = values[index++].charAt(0);
+                        if (latDir == 'S') {
                             position.setLatitude(-position.getLatitude());
                         }
+                        if (index < values.length && !values[index].isEmpty()) {
                             position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+                            char lonDir = values[index++].charAt(0);
+                            if (lonDir == 'W') {
                                 position.setLongitude(-position.getLongitude());
                             }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                            if (index < values.length && !values[index].isEmpty()) {
+                                String speedStr = values[index];
+                                if (!speedStr.isEmpty()) {
+                                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+                                    index++;
                                 }
+                            }
+                            if (index < values.length && !values[index].isEmpty()) {
                                 position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
+                            }
+                            if (index < values.length && !values[index].isEmpty()) {
                                 position.setAltitude(Integer.parseInt(values[index++]));
                             }
-                if (index < values.length) {
+                            if (index < values.length && !values[index].isEmpty()) {
                                 position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
                             }
-                if (index < values.length) {
+                            if (index < values.length && !values[index].isEmpty()) {
                                 position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
                             }
+                        }
+                    }
+                }
+            }
             break;
         case "GSM":
             index += 1; // registration status
             index += 1; // signal strength
+            if (index < values.length - 3) {
+                int lac = Integer.parseInt(values[index++], 16);
+                int cellId = Integer.parseInt(values[index++], 16);
+                int signal = Integer.parseInt(values[index++]);
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        position.getDeviceId(), position.getDeviceId(), lac, cellId, signal)));
+            }
             break;
         case "COT":
             if (index < values.length) {
                 position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
-                }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    int h = 0, m = 0, s = 0;
+                    if (hours.length > 0 && !hours[0].isEmpty()) h = Integer.parseInt(hours[0]);
+                    if (hours.length > 1 && !hours[1].isEmpty()) m = Integer.parseInt(hours[1]);
+                    if (hours.length > 2 && !hours[2].isEmpty()) s = Integer.parseInt(hours[2]);
+                    position.set(Position.KEY_HOURS, (h * 3600 + m * 60 + s) * 1000);
+                    index++;
+                }
             }
             break;
         case "ADC":
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+            }
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
                 position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (index < values.length && !values[index].isEmpty()) {
+                int io = Integer.parseInt(values[index++], 16);
+                position.set(Position.KEY_STATUS, io);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            if (index < values.length && !values[index].isEmpty()) {
+                position.set(Position.KEY_GEOFENCE, values[index++]);
+                String eventStatus = values[index++];
+                if (!eventStatus.isEmpty()) {
+                    position.set("eventStatus", eventStatus);
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("packetType", values[index++]);
                 }
+            }
             break;
         case "ETD":
+            if (index < values.length) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (index < values.length) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (index < values.length) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
             while (index < values.length) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
+                    index++; // Skip temperature sensor serial number
+                    if (index < values.length && !values[index].isEmpty()) {
                         position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
                     }
                 }
+            }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
