diff --git a/tmp/8cebf3e1-e70a-4829-aba9-c4ee4a31b665_buggy.java b/tmp/eebe5566-4ed4-4039-8af6-a9037753ced8_fixed.java
index 47a8941..30152b7 100644
--- a/tmp/8cebf3e1-e70a-4829-aba9-c4ee4a31b665_buggy.java
+++ b/tmp/eebe5566-4ed4-4039-8af6-a9037753ced8_fixed.java
@@ -1,53 +1,68 @@
 	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be an inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+		// Get the parent and grandparent containers
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
-		Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+		// Remove clazz from the parent's classes map to prevent duplication
+		Map<String, JDefinedClass> parentClasses = getPrivateField(parent, "classes");
+		if (parentClasses.containsKey(clazz.name())) {
+			parentClasses.remove(clazz.name());
+		}
+
+		// Determine if the grandparent is a class or a package
 		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
-			classes = getPrivateField(grandParentClass, "classes");
+			// Get the grandparent's classes map
+			Map<String, JDefinedClass> classes = getPrivateField(grandParentClass, "classes");
+
+			// Check for class name collision in the grandparent
+			if (classes.containsKey(clazz.name())) {
+				writeSummary("\tRenaming class " + clazz.fullName() + " to " + parent.name() + clazz.name());
+				setPrivateField(clazz, "name", parent.name() + clazz.name());
 			}
-		else {
+
+			// Add the class to the grandparent's classes
+			classes.put(clazz.name(), clazz);
+		} else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
-			classes = getPrivateField(grandParentPackage, "classes");
+			// Get the grandparent package's classes map
+			Map<String, JDefinedClass> classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+			// Make sure the class is not static if moving to package
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
+			// Check for class name collision in the package
+			if (classes.containsKey(clazz.name())) {
+				writeSummary("\tRenaming class " + clazz.fullName() + " to " + parent.name() + clazz.name());
+				setPrivateField(clazz, "name", parent.name() + clazz.name());
+			}
+
+			// Add the class to the grandparent package's classes
+			classes.put(clazz.name(), clazz);
+
+			// Update XML schema component if necessary
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
-
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+					if (sc instanceof XSDeclaration) {
+						XSDeclarationxsdDecl = (XSDeclaration) sc;
+						xsdDecl.setAnonymous(false);
+					}
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
-		}
-
-		classes.put(clazz.name(), clazz);
-
-		// Finally modify the class so that it refers back the container:
+		// Update the class's outer container
 		setPrivateField(clazz, "outer", grandParent);
+		clazz.setParentContainer(grandParent);
 	}
\ No newline at end of file
