diff --git a/tmp/fabd4d52-98cb-4f85-85a3-d6f21e06bad6_buggy.java b/tmp/ac208168-3cf3-412d-a4fe-cb857a6ecec2_fixed.java
index 862c60c..dda4f8b 100644
--- a/tmp/fabd4d52-98cb-4f85-85a3-d6f21e06bad6_buggy.java
+++ b/tmp/ac208168-3cf3-412d-a4fe-cb857a6ecec2_fixed.java
@@ -1,25 +1,34 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
-            trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
-                parentNode instanceof Document;
+        // Determine if previous sibling is a block element
+        boolean previousIsBlock = false;
+        Node previous = previousSibling();
+        if (previous instanceof Element) {
+            previousIsBlock = ((Element) previous).tag().isBlock();
+        }
+        trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) || previousIsBlock || (parentNode instanceof Document);
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // Determine if we can skip this text
         Node next = this.nextSibling();
         boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
             || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
         if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        // Check if we need to indent, either due to previous block element or standard conditions
+        boolean shouldIndent = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank())
+                || (out.outline() && siblingNodes().size() > 0 && !isBlank())
+                || (previousIsBlock && !isBlank());
+        if (shouldIndent) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
