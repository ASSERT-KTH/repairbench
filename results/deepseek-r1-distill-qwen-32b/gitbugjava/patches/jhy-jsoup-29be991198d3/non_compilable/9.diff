diff --git a/tmp/d59f4aac-1285-4138-b9b6-338f253469bb_buggy.java b/tmp/6e62165b-cff8-49e3-8a75-b247e26a3050_fixed.java
index 862c60c..485a968 100644
--- a/tmp/d59f4aac-1285-4138-b9b6-338f253469bb_buggy.java
+++ b/tmp/6e62165b-cff8-49e3-8a75-b247e26a3050_fixed.java
@@ -1,25 +1,37 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
+        // If this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = this.nextSibling();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) ||
+            (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank()) return;
 
-            if ((siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
-                (out.outline() && siblingNodes().size() > 0 && !isBlank()))
+        boolean shouldIndent = false;
+        shouldIndent = (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank()) ||
+            (out.outline() && siblingNodes().size() > 0 && !isBlank());
+
+        // Check if previous node is <br> and parent is block
+        Node prev = this.previousSibling();
+        if (prev instanceof Element && ((Element) prev).tag().name().equals("br")) {
+            if (parent != null && parent.tag().formatAsBlock() && !isBlank()) {
+                shouldIndent = true;
+            }
+        }
+
+        if (shouldIndent) {
             indent(accum, depth, out);
         }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
