diff --git a/tmp/977199e2-024a-4503-9079-b9b469a34051_buggy.java b/tmp/3d0bb603-e6b6-4d0a-99e9-cc92fd5cff2c_fixed.java
index c9c77a4..1d6d215 100644
--- a/tmp/977199e2-024a-4503-9079-b9b469a34051_buggy.java
+++ b/tmp/3d0bb603-e6b6-4d0a-99e9-cc92fd5cff2c_fixed.java
@@ -1,35 +1,66 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // use the URI class to encode non-ascii in path, but preserve existing % encoding
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
-                decodePart(u.getPath()),
+                preserveEncodedParts(u.getPath()),
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
+
+    private String preserveEncodedParts(String path) {
+        if (path == null) return null;
+        StringBuilder sb = new StringBuilder();
+        int start = 0;
+        while (start < path.length()) {
+            int percentIndex = path.indexOf('%', start);
+            if (percentIndex == -1) {
+                sb.append(path.substring(start));
+                break;
+            }
+            if (percentIndex + 2 >= path.length()) {
+                // Not enough characters for a valid % encoding, treat as literal
+                sb.append(path.substring(start));
+                break;
+            }
+            try {
+                // Check if the % encoding is valid
+                String encoded = path.substring(percentIndex, percentIndex + 3);
+                int codePoint = Integer.parseInt(encoded.substring(1), 16);
+                sb.append(path, start, percentIndex);
+                sb.append(encoded);
+                start = percentIndex + 3;
+            } catch (NumberFormatException e) {
+                // Invalid % encoding, treat as literal
+                sb.append(path.substring(start, percentIndex + 1));
+                start = percentIndex + 1;
+            }
+        }
+        return sb.toString();
+    }
\ No newline at end of file
