diff --git a/tmp/53f4eae7-5554-4725-b842-8a20e12103f4_buggy.java b/tmp/1af6d808-f4b7-442e-b8c0-324a2e3644c7_fixed.java
index c9c77a4..3fb217f 100644
--- a/tmp/53f4eae7-5554-4725-b842-8a20e12103f4_buggy.java
+++ b/tmp/1af6d808-f4b7-442e-b8c0-324a2e3644c7_fixed.java
@@ -1,35 +1,53 @@
     URL build() {
         try {
-            // use the URI class to encode non-ascii in path
+            // use the URI class to encode non-ascii in path, but preserve already encoded parts
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
-                decodePart(u.getPath()),
+                preserveEncodedParts(u.getPath()),
                 null, null // query and fragment appended later so as not to encode
             );
 
             String normUrl = uri.toASCIIString();
             if (q != null || u.getRef() != null) {
                 StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
                 if (q != null) {
                     sb.append('?');
                     appendToAscii(StringUtil.releaseBuilder(q), true, sb);
                 }
                 if (u.getRef() != null) {
                     sb.append('#');
                     appendToAscii(u.getRef(), false, sb);
                 }
                 normUrl = StringUtil.releaseBuilder(sb);
             }
             u =  new URL(normUrl);
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
+
+    private String preserveEncodedParts(String path) {
+        StringBuilder preservedPath = new StringBuilder();
+        String[] parts = path.split("/");
+        for (String part : parts) {
+            if (part.contains("%")) {
+                preservedPath.append(part);
+            } else {
+                preservedPath.append(decodePart(part));
+            }
+            preservedPath.append("/");
+        }
+        // remove the trailing slash if present
+        if (preservedPath.length() > 0 && preservedPath.charAt(preservedPath.length() - 1) == '/') {
+            preservedPath.deleteCharAt(preservedPath.length() - 1);
+        }
+        return preservedPath.toString();
+    }
\ No newline at end of file
