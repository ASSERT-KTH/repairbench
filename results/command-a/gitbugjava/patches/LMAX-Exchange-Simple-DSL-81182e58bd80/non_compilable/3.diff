diff --git a/tmp/7026451e-d034-4b85-b836-02ec320d206b_buggy.java b/tmp/12cb9c85-113c-4935-8f14-a0ea5f35541b_fixed.java
index f506479..789b1d2 100644
--- a/tmp/7026451e-d034-4b85-b836-02ec320d206b_buggy.java
+++ b/tmp/12cb9c85-113c-4935-8f14-a0ea5f35541b_fixed.java
@@ -1,64 +1,62 @@
-        void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
-        {
+void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments) {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
-            for (SimpleDslArg dslArg : groupArg.getOtherArgs())
-            {
-                if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
-                {
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
+    for (SimpleDslArg dslArg : groupArg.getOtherArgs()) {
+        if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null) {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
-            while (!arguments.isEmpty())
-            {
+    while (!arguments.isEmpty()) {
         final NameValuePair argument = arguments.peekFirst();
-                if (argument == NameValuePair.NULL)
-                {
+        if (argument == NameValuePair.NULL) {
             arguments.pollFirst();
             continue;
         }
 
-                if (argument.name == null)
-                {
+        if (argument.name == null) {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
-                {
+        if (arg == null) {
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
-                {
-                    break;
+        if (!argValues.isEmpty() && !arg.isAllowMultipleValues()) {
+            throw new IllegalArgumentException("Multiple values not allowed for parameter '" + arg.getName() + "' in group " + groupArg.getName());
         }
 
+        if (arg.isAllowMultipleValues() && argument.value.contains(",")) {
+            String[] values = argument.value.split(",");
+            for (String value : values) {
+                checkValidValue(arg, value.trim());
+                argValues.add(value.trim());
+            }
+        } else {
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
+        }
+
         arguments.pollFirst();
     }
 
-            // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
-            for (final SimpleDslArg simpleDslArg : argsByName.values())
-            {
+    for (final SimpleDslArg simpleDslArg : argsByName.values()) {
         final SimpleDslParam param = processor.collect(simpleDslArg);
-                if (param.hasValue())
-                {
+        if (param.hasValue()) {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
\ No newline at end of file
