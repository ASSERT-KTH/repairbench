diff --git a/tmp/f7fbbc62-18ff-4a74-b0b2-4157a0488da5_buggy.java b/tmp/bc89c740-cb16-441b-8aee-3d80fc79a140_fixed.java
index 23f078d..e323218 100644
--- a/tmp/f7fbbc62-18ff-4a74-b0b2-4157a0488da5_buggy.java
+++ b/tmp/bc89c740-cb16-441b-8aee-3d80fc79a140_fixed.java
@@ -1,14 +1,28 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
     // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
     for (int i = 0; i < s.length(); i++) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
         } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // Remove the '?' character that is incorrectly appended by URLEncoder for supplementary characters
+            if (encoded.endsWith("%3F")) {
+                sb.append(encoded.substring(0, encoded.length() - 3));
+            } else {
+                sb.append(encoded);
+            }
         } else {
             sb.append((char) c);
         }
+        // Handle supplementary characters (surrogate pairs) correctly
+        if (Character.isHighSurrogate((char) c)) {
+            if (i + 1 < s.length()) {
+                int nextChar = s.codePointAt(i + 1);
+                if (Character.isLowSurrogate((char) nextChar)) {
+                    i++; // Skip the next character as it's part of the surrogate pair
+                }
+            }
+        }
     }
 }
\ No newline at end of file
