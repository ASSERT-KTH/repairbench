diff --git a/tmp/cf03d073-83db-48ef-a1e0-116fb99943a1_buggy.java b/tmp/dae638c9-df7b-4e1b-9731-a3571d2340af_fixed.java
index 9739964..96629c4 100644
--- a/tmp/cf03d073-83db-48ef-a1e0-116fb99943a1_buggy.java
+++ b/tmp/dae638c9-df7b-4e1b-9731-a3571d2340af_fixed.java
@@ -1,27 +1,32 @@
+import java.util.Stack;
+
+public class Solution {
   public int[] calculateSpans(int[] prices) {
-
     int[] spans = new int[prices.length];
     spans[0] = 1; // Span of first element is always 1
 
     Stack<Integer> indexStack = new Stack<>();
 
     // Push the index of first element
     indexStack.push(0);
 
     for (int i = 1; i < prices.length; i++) {
-      while (!indexStack.isEmpty()
-          && prices[indexStack.peek()] <= prices[i])
+      while (!indexStack.isEmpty() && prices[indexStack.peek()] < prices[i]) {
         indexStack.pop();
+      }
 
       // If index stack is empty, the price at index 'i'
       // is greater than all previous values
-      if (indexStack.isEmpty())
+      if (indexStack.isEmpty()) {
         spans[i] = i + 1;
-      else
+      } else {
         spans[i] = i - indexStack.peek();
+      }
 
+      // Always push the current index to the stack
       indexStack.push(i);
     }
 
     return spans;
   }
+}
\ No newline at end of file
