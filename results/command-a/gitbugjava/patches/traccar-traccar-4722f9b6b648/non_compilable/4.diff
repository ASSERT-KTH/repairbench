diff --git a/tmp/94c9c710-ee1c-41c0-a05e-2ca10b273e77_buggy.java b/tmp/e38545b2-bb59-4aed-b3f2-0df6b253b34c_fixed.java
index c84c989..8bfb479 100644
--- a/tmp/94c9c710-ee1c-41c0-a05e-2ca10b273e77_buggy.java
+++ b/tmp/e38545b2-bb59-4aed-b3f2-0df6b253b34c_fixed.java
@@ -1,27 +1,47 @@
     private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
         buf.readUnsignedShortLE(); // length
 
         buf.skipBytes(3); // identification header
         buf.readUnsignedIntLE(); // index
 
         DeviceSession deviceSession = getDeviceSession(
                 channel, remoteAddress, buf.readSlice(15).toString(StandardCharsets.US_ASCII));
         if (deviceSession == null) {
             return null;
         }
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
         buf.readUnsignedByte(); // session status
         buf.skipBytes(4); // reserved
-        buf.readUnsignedIntLE(); // date and time
+        long time = buf.readUnsignedIntLE(); // date and time
+        if (time < 0x01d4f180) { // 01 01 01 00 00 00
+            time += 0x100000000L; // add 2^32
+        }
+        position.setTime(new Date(time * 1000));
 
-        buf.skipBytes(23); // coordinates block
+        int positionType = buf.readUnsignedByte();
+        if (positionType == 0xc8) {
+            buf.skipBytes(3); // lon high
+            buf.skipBytes(3); // lat high
+            position.setLongitude(buf.readUnsignedIntLE() / 300000.0);
+            position.setLatitude(buf.readUnsignedIntLE() / 300000.0);
+            buf.skipBytes(1); // ext block count
+        } else if (positionType == 0xd0) {
+            buf.skipBytes(3); // lon high
+            buf.skipBytes(3); // lat high
+            position.setLongitude(buf.readUnsignedIntLE() / 300.0);
+            position.setLatitude(buf.readUnsignedIntLE() / 300.0);
+            buf.skipBytes(1); // ext block count
+        } else if (positionType == 0xe0) {
+            buf.skipBytes(14); // coordinates block
+            buf.skipBytes(1); // ext block count
+        }
 
         buf.skipBytes(3); // data tag header
         decodeMinimalDataSet(position, buf);
 
         return position;
     }
\ No newline at end of file
