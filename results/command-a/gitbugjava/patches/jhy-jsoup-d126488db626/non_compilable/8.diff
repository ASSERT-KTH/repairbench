diff --git a/tmp/d67025b4-a477-46fb-a610-60c35b3f9629_buggy.java b/tmp/b90212ce-bfd3-4727-94e2-722613560bdf_fixed.java
index 5bf31b1..832752b 100644
--- a/tmp/d67025b4-a477-46fb-a610-60c35b3f9629_buggy.java
+++ b/tmp/b90212ce-bfd3-4727-94e2-722613560bdf_fixed.java
@@ -1,17 +1,28 @@
     private String consumeSubQuery() {
         StringBuilder sq = StringUtil.borrowBuilder();
+        boolean inSubQuery = false;
         while (!tq.isEmpty()) {
-            if (tq.matches("("))
-                sq.append("(").append(tq.chompBalanced('(', ')')).append(")");
-            else if (tq.matches("["))
-                sq.append("[").append(tq.chompBalanced('[', ']')).append("]");
-            else if (tq.matchesAny(Combinators))
-                if (sq.length() > 0)
+            if (tq.matches("(")) {
+                sq.append("(");
+                sq.append(tq.chompBalanced('(', ')'));
+                sq.append(")");
+                inSubQuery = true;
+            } else if (tq.matches("[")) {
+                sq.append("[");
+                sq.append(tq.chompBalanced('[', ']'));
+                sq.append("]");
+            } else if (tq.matchesAny(Combinators)) {
+                if (inSubQuery && sq.length() > 0) {
                     break;
-                else
+                } else {
                     tq.consume();
-            else
+                }
+            } else {
                 sq.append(tq.consume());
             }
+        }
+        if (inSubQuery && sq.length() > 0 && sq.charAt(sq.length() - 1) != ')') {
+            throw new SelectorParseException("Unclosed subquery");
+        }
         return StringUtil.releaseBuilder(sq);
     }
\ No newline at end of file
