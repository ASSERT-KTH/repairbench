diff --git a/tmp/7ed18683-9f9f-4101-9973-09302a5df7ff_buggy.java b/tmp/53c68735-37fd-413b-a671-4c4b3f635fba_fixed.java
index eb9ce9f..5f2426d 100644
--- a/tmp/7ed18683-9f9f-4101-9973-09302a5df7ff_buggy.java
+++ b/tmp/53c68735-37fd-413b-a671-4c4b3f635fba_fixed.java
@@ -1,60 +1,60 @@
 /**
      * Look for a type declaration on a property assignment
      * (in an ASSIGN or an object literal key).
      *
      * @param info The doc info for this property.
      * @param lValue The l-value node.
      * @param rValue The node that {@code n} is being initialized to,
      *     or {@code null} if this is a stub declaration.
      */
     private JSType getDeclaredType(String sourceName, JSDocInfo info,
         Node lValue, @Nullable Node rValue) {
       if (info != null && info.hasType()) {
         return getDeclaredTypeInAnnotation(sourceName, lValue, info);
       } else if (rValue != null && rValue.isFunction() &&
           shouldUseFunctionLiteralType(
               JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue)) {
         return rValue.getJSType();
       } else if (info != null) {
         if (info.hasEnumParameterType()) {
           if (rValue != null && rValue.isObjectLit()) {
             return rValue.getJSType();
           } else {
             return createEnumTypeFromNodes(
                 rValue, lValue.getQualifiedName(), info, lValue);
           }
         } else if (info.isConstructor() || info.isInterface()) {
           return createFunctionTypeFromNodes(
               rValue, lValue.getQualifiedName(), info, lValue);
-        } else {
-          // Check if this is constant, and if it has a known type.
-          if (info.isConstant()) {
+        } else if (info.isConstant()) {
           JSType knownType = null;
           if (rValue != null) {
             if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
               // If rValue has a type-cast, we use the type in the type-cast.
               // If rValue's type was already computed during scope creation,
               // then we can safely use that.
-                return rValue.getJSType();
+              knownType = rValue.getJSType();
             } else if (rValue.isOr()) {
               // Check for a very specific JS idiom:
               // var x = x || TYPE;
               // This is used by Closure's base namespace for esoteric
               // reasons.
               Node firstClause = rValue.getFirstChild();
               Node secondClause = firstClause.getNext();
               boolean namesMatch = firstClause.isName()
                   && lValue.isName()
                   && firstClause.getString().equals(lValue.getString());
               if (namesMatch && secondClause.getJSType() != null
                   && !secondClause.getJSType().isUnknownType()) {
-                  return secondClause.getJSType();
-                }
+                knownType = secondClause.getJSType();
               }
             }
           }
+          // If we found a known type, return it. Otherwise, fall back to
+          // getDeclaredTypeInAnnotation.
+          return knownType != null ? knownType : getDeclaredTypeInAnnotation(sourceName, lValue, info);
         }
       }
 
       return getDeclaredTypeInAnnotation(sourceName, lValue, info);
     }
\ No newline at end of file
