diff --git a/tmp/bd3bd542-76ac-463d-b818-254387328e6f_buggy.java b/tmp/ad4ba283-1ff1-40ba-b311-729f56a43c85_fixed.java
index fa6828a..7a6e4b4 100644
--- a/tmp/bd3bd542-76ac-463d-b818-254387328e6f_buggy.java
+++ b/tmp/ad4ba283-1ff1-40ba-b311-729f56a43c85_fixed.java
@@ -1,5 +1,32 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+    List<MockCandidateFilter.MockCandidate> candidates = new ArrayList<>();
+    
+    for (Field field : fields) {
+        MockCandidateFilter.MockCandidate candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);
+        if (candidate != null) {
+            candidates.add(candidate);
+        }
+    }
+    
+    // Sort candidates by type match priority (exact match first, then ancestors)
+    candidates.sort((c1, c2) -> {
+        Class<?> type1 = c1.getField().getType();
+        Class<?> type2 = c2.getField().getType();
+        
+        if (type1.equals(type2)) {
+            return 0;
+        } else if (type1.isAssignableFrom(type2)) {
+            return -1; // type1 is a parent of type2, so it has higher priority
+        } else if (type2.isAssignableFrom(type1)) {
+            return 1; // type2 is a parent of type1, so it has higher priority
+        } else {
+            return 0; // unrelated types, keep original order
+        }
+    });
+    
+    // Inject only the best matching candidate
+    if (!candidates.isEmpty()) {
+        candidates.get(0).thenInject();
     }
 }
\ No newline at end of file
