diff --git a/tmp/766c6ffc-4e9b-49f2-9de7-1117e151f84e_buggy.java b/tmp/e3408ed9-1630-4bfb-b42e-a61a87af160c_fixed.java
index 01967cc..931f2c3 100644
--- a/tmp/766c6ffc-4e9b-49f2-9de7-1117e151f84e_buggy.java
+++ b/tmp/e3408ed9-1630-4bfb-b42e-a61a87af160c_fixed.java
@@ -1,35 +1,34 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
+    // First, handle array types by getting to the content type
+    while (t.isArrayType()) {
+        t = t.getContentType();
+    }
+
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
-                }
-                // fall through
+            // For NON_CONCRETE_AND_ARRAYS, we already handled arrays, now check for non-concrete types
+            return !t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
-                return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+            // For OBJECT_AND_NON_CONCRETE, check if it's Object.class or non-concrete
+            return (t.getRawClass() == Object.class) || 
+                   (!t.isConcrete() && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
         case NON_FINAL:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
-                }
-                // [Issue#88] Should not apply to JSON tree models:
+            // For NON_FINAL, check if it's not final and not a TreeNode
             return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+
         default:
-            //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
-                return (t.getRawClass() == Object.class);
+            // For JAVA_LANG_OBJECT, check if it's exactly Object.class
+            return t.getRawClass() == Object.class;
     }
 }
\ No newline at end of file
