diff --git a/tmp/e3935ae7-e9e8-4e19-8c92-db04ede046dc_buggy.java b/tmp/68f47a81-d20f-4504-9cb1-29468bcca974_fixed.java
index 01967cc..00940c6 100644
--- a/tmp/e3935ae7-e9e8-4e19-8c92-db04ede046dc_buggy.java
+++ b/tmp/68f47a81-d20f-4504-9cb1-29468bcca974_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
 public boolean useForType(JavaType t)
 {
+    // First, handle array types by peeling off the array layer
+    if (t.isArrayType()) {
+        t = t.getContentType();
+    }
+
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
-                }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+            // [databind#793]: Do not apply default typing to JsonNode and its subtypes
+            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                return false;
+            }
             return (t.getRawClass() == Object.class)
-                        || (!t.isConcrete()
-                                // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                    || (!t.isConcrete());
 
         case NON_FINAL:
-                while (t.isArrayType()) {
-                    t = t.getContentType();
+            // [databind#793]: Do not apply default typing to JsonNode and its subtypes
+            if (TreeNode.class.isAssignableFrom(t.getRawClass())) {
+                return false;
             }
-                // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+            return !t.isFinal();
         default:
             //case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
             return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
