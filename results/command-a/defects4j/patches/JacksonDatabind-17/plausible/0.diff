diff --git a/tmp/8328cb16-ebfa-4c95-8924-16fdcd730185_buggy.java b/tmp/21b71e46-f770-4681-b490-e4d45f8b2979_fixed.java
index 01967cc..aa65a94 100644
--- a/tmp/8328cb16-ebfa-4c95-8924-16fdcd730185_buggy.java
+++ b/tmp/21b71e46-f770-4681-b490-e4d45f8b2979_fixed.java
@@ -1,35 +1,37 @@
 /**
  * Method called to check if the default type handler should be
  * used for given type.
  * Note: "natural types" (String, Boolean, Integer, Double) will never
  * use typing; that is both due to them being concrete and final,
  * and since actual serializers and deserializers will also ignore any
  * attempts to enforce typing.
  */
-        public boolean useForType(JavaType t)
-        {
+public boolean useForType(JavaType t) {
+    // First, check if the type is a JsonNode or its subtype
+    if (JsonNode.class.isAssignableFrom(t.getRawClass())) {
+        return false; // Do not apply default typing for JsonNode and its subtypes
+    }
+
     switch (_appliesFor) {
         case NON_CONCRETE_AND_ARRAYS:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // fall through
         case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
             return (t.getRawClass() == Object.class)
                     || (!t.isConcrete()
                             // [databind#88] Should not apply to JSON tree models:
                             || TreeNode.class.isAssignableFrom(t.getRawClass()));
 
         case NON_FINAL:
             while (t.isArrayType()) {
                 t = t.getContentType();
             }
             // [Issue#88] Should not apply to JSON tree models:
             return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
         default:
             // case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
             return (t.getRawClass() == Object.class);
     }
 }
\ No newline at end of file
