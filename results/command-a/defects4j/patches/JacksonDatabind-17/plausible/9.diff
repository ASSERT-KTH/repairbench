diff --git a/tmp/b8c17698-255a-4d7c-a10b-23b99bfb620c_buggy.java b/tmp/69b09b4e-8ad6-4eee-a221-6f324a5530b5_fixed.java
index 01967cc..21940d4 100644
--- a/tmp/b8c17698-255a-4d7c-a10b-23b99bfb620c_buggy.java
+++ b/tmp/69b09b4e-8ad6-4eee-a221-6f324a5530b5_fixed.java
@@ -1,35 +1,28 @@
-        /**
-         * Method called to check if the default type handler should be
-         * used for given type.
-         * Note: "natural types" (String, Boolean, Integer, Double) will never
-         * use typing; that is both due to them being concrete and final,
-         * and since actual serializers and deserializers will also ignore any
-         * attempts to enforce typing.
-         */
-        public boolean useForType(JavaType t)
-        {
+        public boolean useForType(JavaType t) {
             switch (_appliesFor) {
                 case NON_CONCRETE_AND_ARRAYS:
                     while (t.isArrayType()) {
                         t = t.getContentType();
                     }
                     // fall through
                 case OBJECT_AND_NON_CONCRETE:
-//                return t.isJavaLangObject() || 
+                    // Added check for JsonNode to prevent default typing
                     return (t.getRawClass() == Object.class)
                             || (!t.isConcrete()
+                                && !JsonNode.class.isAssignableFrom(t.getRawClass())
                                 // [databind#88] Should not apply to JSON tree models:
-                        || TreeNode.class.isAssignableFrom(t.getRawClass()));
+                                && !TreeNode.class.isAssignableFrom(t.getRawClass()));
 
                 case NON_FINAL:
                     while (t.isArrayType()) {
                         t = t.getContentType();
                     }
                     // [Issue#88] Should not apply to JSON tree models:
-                return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass());
+                    return !t.isFinal() 
+                            && !JsonNode.class.isAssignableFrom(t.getRawClass())
+                            && !TreeNode.class.isAssignableFrom(t.getRawClass());
                 default:
                     // case JAVA_LANG_OBJECT:
-//                return t.isJavaLangObject();
                     return (t.getRawClass() == Object.class);
             }
         }
\ No newline at end of file
