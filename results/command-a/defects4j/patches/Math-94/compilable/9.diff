diff --git a/tmp/c9c17f67-3554-4a5e-a665-c24e6b92227e_buggy.java b/tmp/a71e1bb9-0901-45d8-adf3-e9e9e22ca98a_fixed.java
index ce55b5f..2e646c5 100644
--- a/tmp/c9c17f67-3554-4a5e-a665-c24e6b92227e_buggy.java
+++ b/tmp/a71e1bb9-0901-45d8-adf3-e9e9e22ca98a_fixed.java
@@ -1,63 +1,54 @@
 /**
  * <p>
  * Gets the greatest common divisor of the absolute value of two numbers,
  * using the "binary gcd" method which avoids division and modulo
  * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
  * Stein (1961).
  * </p>
  * 
-     * @param u a non-zero number
-     * @param v a non-zero number
+ * @param u a number
+ * @param v a number
  * @return the greatest common divisor, never zero
  * @since 1.1
  */
 public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+    if (u == 0 || v == 0) {
+        return Math.abs(u) + Math.abs(v);
     }
     // keep u and v negative, as negative integers range down to
     // -2^31, while positive numbers can only be as large as 2^31-1
     // (i.e. we can't necessarily negate a negative number without
     // overflow)
     /* assert u!=0 && v!=0; */
-        if (u > 0) {
-            u = -u;
-        } // make u negative
-        if (v > 0) {
-            v = -v;
-        } // make v negative
+    u = Math.abs(u);
+    v = Math.abs(v);
     // B1. [Find power of 2]
     int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
+    while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are both even...
         u /= 2;
         v /= 2;
         k++; // cast out twos.
     }
     if (k == 31) {
         throw new ArithmeticException("overflow: gcd is 2^31");
     }
     // B2. Initialize: u and v have been divided by 2^k and at least
     // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
+    int t = (u < v) ? v : u; // t is the larger of u and v
+    u = (u < v) ? u : v; // u is the smaller of u and v
+    v = t;
+    // B3.
     do {
         /* assert u<0 && v<0; */
         // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
+        while ((u & 1) == 0) { // while u is even..
+            u /= 2; // cast out twos
         }
         // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
-            } else {
-                v = t;
-            }
+        t = v;
+        v = u;
+        u = t - u;
         // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
+    } while (u != 0);
+    return v * (1 << k); // gcd is v*2^k
 }
\ No newline at end of file
