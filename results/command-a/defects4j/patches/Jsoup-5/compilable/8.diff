diff --git a/tmp/0173331a-c683-4afd-9860-289bb1bff894_buggy.java b/tmp/1641c84d-bd19-4f5e-b7b2-b1ed3d49902b_fixed.java
index 39dd8e7..e509720 100644
--- a/tmp/0173331a-c683-4afd-9860-289bb1bff894_buggy.java
+++ b/tmp/1641c84d-bd19-4f5e-b7b2-b1ed3d49902b_fixed.java
@@ -1,30 +1,43 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
+                if (!tq.matchChomp(SQ)) { // if unclosed, chompTo will suck up rest (closed by normaliser)
+                    tq.chompTo(">");
+                }
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
+                if (!tq.matchChomp(DQ)) {
+                    tq.chompTo(">");
+                }
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
+        } else if (key.length() != 0) { // unquoted value (or truly empty) so consume up to next tag or space
+            tq.consumeWhitespace();
+            while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                value += tq.consume();
             }
+            tq.consumeWhitespace();
+        }
+            
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
             tq.consume();
                 
             return null;
         }
     }
\ No newline at end of file
