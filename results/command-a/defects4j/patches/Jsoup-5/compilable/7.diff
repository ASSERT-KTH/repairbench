diff --git a/tmp/a3ed2966-fad7-4865-849a-66e56ce0300e_buggy.java b/tmp/ddb9654d-e72f-41a3-a211-7d594c5391d3_fixed.java
index 39dd8e7..f3d4f0e 100644
--- a/tmp/a3ed2966-fad7-4865-849a-66e56ce0300e_buggy.java
+++ b/tmp/ddb9654d-e72f-41a3-a211-7d594c5391d3_fixed.java
@@ -1,30 +1,30 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
+    if (key.length() == 0) {
+        tq.consume(); // discard the empty key character
+        return null;
+    }
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+            while (!tq.matchesAny("<", "/>", ">", "=") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                if (tq.matchesAny(".", "..", "...", "....", ".....", "......", ".......", "........", ".........", "..........")) {
+                    tq.consume(); // discard invalid characters
+                } else {
                     valueAccum.append(tq.consume());
                 }
+            }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
     return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
 }
\ No newline at end of file
