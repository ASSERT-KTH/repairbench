diff --git a/tmp/ea9bfebc-3841-4eab-9759-c65513731130_buggy.java b/tmp/9b257210-60c0-4130-bd9a-1e25bac02231_fixed.java
index 39dd8e7..1ef7e5c 100644
--- a/tmp/ea9bfebc-3841-4eab-9759-c65513731130_buggy.java
+++ b/tmp/9b257210-60c0-4130-bd9a-1e25bac02231_fixed.java
@@ -1,30 +1,37 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
+                if (!tq.matchChomp(SQ)) { // if unclosed, eat rest of string (advances to next attribute, or closes tag)
+                    value += tq.chompTo(new char[]{'>', '<', ' '});
+                    // todo - if ends with />, jump to end of attribute (of tag if closing)
+                }
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
+                if (!tq.matchChomp(DQ)) {
+                    value += tq.chompTo(new char[]{'>', '<', ' '});
+                }
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
             tq.consume();
                 
             return null;
         }
     }
\ No newline at end of file
