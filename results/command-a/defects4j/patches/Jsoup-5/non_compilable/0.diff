diff --git a/tmp/e0149e68-f4f2-4f0b-a48f-e8e4712a1ec4_buggy.java b/tmp/fb97d0d5-e9ca-47a1-b756-48bac652bc5b_fixed.java
index 39dd8e7..fb25f3c 100644
--- a/tmp/e0149e68-f4f2-4f0b-a48f-e8e4712a1ec4_buggy.java
+++ b/tmp/fb97d0d5-e9ca-47a1-b756-48bac652bc5b_fixed.java
@@ -1,30 +1,28 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
+    if (key.length() == 0) {
+        tq.consume(); // skip empty key
+        return null;
+    }
     String value = "";
     tq.consumeWhitespace();
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
-            if (tq.matchChomp(SQ)) {
-                value = tq.chompTo(SQ);
-            } else if (tq.matchChomp(DQ)) {
-                value = tq.chompTo(DQ);
+        if (tq.matchesAny(SQ, DQ)) {
+            char quote = tq.consume();
+            value = tq.chompTo(quote);
+            if (tq.matches(quote)) {
+                tq.consume(); // consume closing quote
+            }
         } else {
             StringBuilder valueAccum = new StringBuilder();
-                // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+            while (!tq.matchesAny("<", "/>", ">", "=") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
-        if (key.length() != 0)
     return Attribute.createFromEncoded(key, value);
-        else {
-            tq.consume();
-                
-            return null;
-        }
 }
\ No newline at end of file
