diff --git a/tmp/a9551363-01f6-4a57-bd15-5a371dc424f9_buggy.java b/tmp/e6676874-682a-4d98-8327-448a282128d3_fixed.java
index 39dd8e7..aaac37c 100644
--- a/tmp/a9551363-01f6-4a57-bd15-5a371dc424f9_buggy.java
+++ b/tmp/e6676874-682a-4d98-8327-448a282128d3_fixed.java
@@ -1,30 +1,45 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
+                if (!tq.matchChomp(SQ)) {
+                    // unclosed quote, treat remaining input as value
+                    value += tq.consumeToken();
+                }
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
+                if (!tq.matchChomp(DQ)) {
+                    // unclosed quote, treat remaining input as value
+                    value += tq.consumeToken();
+                }
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
                 while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
-        }
-        if (key.length() != 0)
-            return Attribute.createFromEncoded(key, value);
-        else {
+        } else if (key.length() != 0) {
+            // if there's no '=' but key is not empty, treat it as a boolean attribute with value ""
+            return Attribute.createFromEncoded(key, "");
+        } else {
+            // if key is empty, consume the next character and return null
             tq.consume();
+            return null;
+        }
 
+        if (key.length() != 0) {
+            return Attribute.createFromEncoded(key, value);
+        } else {
+            // if key is still empty after parsing, return null
             return null;
         }
     }
\ No newline at end of file
