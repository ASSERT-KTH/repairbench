diff --git a/tmp/35a4be7b-7c85-4679-90f3-d08057fa2ce0_buggy.java b/tmp/76c70bc0-4acf-44de-b43f-275271174e6f_fixed.java
index e5ad041..24840ac 100644
--- a/tmp/35a4be7b-7c85-4679-90f3-d08057fa2ce0_buggy.java
+++ b/tmp/76c70bc0-4acf-44de-b43f-275271174e6f_fixed.java
@@ -1,19 +1,25 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
         //    placeholder values, so no.
-        /*
+        // However, we should not create a new SimpleType if the subclass is not a subclass of _class
         if (!_class.isAssignableFrom(subclass)) {
             throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                     +_class.getName());
         }
-        */
         // 15-Jan-2015, tatu: Not correct; should really re-resolve...
+        // But we should keep the original bindings, superClass, superInterfaces, etc.
+        // unless the subclass is a different type (e.g., a Collection or Map type)
+        if (isCollectionLikeType() || isMapLikeType()) {
             return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
                     _valueHandler, _typeHandler, _asStatic);
+        } else {
+            // If it's a simple type, we should just create a new SimpleType with the subclass
+            return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+                    _valueHandler, _typeHandler, _asStatic, _factory, _mixInAnnotations);
+        }
     }
\ No newline at end of file
