diff --git a/tmp/0b59bfd6-2113-4572-90b1-6cd2aaa78055_buggy.java b/tmp/21786cc4-2c14-43a0-b882-7f46c27f8a6a_fixed.java
index e5ad041..2b8eb3c 100644
--- a/tmp/0b59bfd6-2113-4572-90b1-6cd2aaa78055_buggy.java
+++ b/tmp/21786cc4-2c14-43a0-b882-7f46c27f8a6a_fixed.java
@@ -1,19 +1,16 @@
     @Override
     protected JavaType _narrow(Class<?> subclass)
     {
         if (_class == subclass) {
             return this;
         }
-        // Should we check that there is a sub-class relationship?
         // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+        //    placeholder values, so no explicit check for sub-class relationship.
+        // However, we should ensure that the new type is compatible with the original type.
+        // This is particularly important for handling cases where the subclass might not
+        // be a direct subclass but is still compatible in the context of deserialization.
+        // Therefore, we re-resolve the type to ensure compatibility.
+        
+        return TypeFactory.defaultInstance().constructType(subclass, _bindings, _superClass, _superInterfaces,
                 _valueHandler, _typeHandler, _asStatic);
     }
\ No newline at end of file
