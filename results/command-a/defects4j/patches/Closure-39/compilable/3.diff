diff --git a/tmp/abdf6903-bef9-4b5b-8cd0-2d0adde95d58_buggy.java b/tmp/c6dc7a8f-35c4-4e2f-9a5f-e92e2ed41e6b_fixed.java
index e4d90e7..35007b8 100644
--- a/tmp/abdf6903-bef9-4b5b-8cd0-2d0adde95d58_buggy.java
+++ b/tmp/c6dc7a8f-35c4-4e2f-9a5f-e92e2ed41e6b_fixed.java
@@ -1,45 +1,54 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+        JSType propertyType = getPropertyType(property);
+        if (propertyType == this) {
+          sb.append(forAnnotations ? "?" : "{...}");
+        } else {
+          sb.append(propertyType.toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
           sb.append(", ...");
           break;
         }
       }
 
+      if (forAnnotations && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+        sb.append(", ...");
+      }
+
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
       return "{...}";
     }
 }
\ No newline at end of file
