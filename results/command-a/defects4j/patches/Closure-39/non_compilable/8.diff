diff --git a/tmp/539b9b42-afcf-490c-86db-6be8001214bb_buggy.java b/tmp/28576e9f-6491-4015-baab-fd712f3c4fe3_fixed.java
index e4d90e7..6f672a2 100644
--- a/tmp/539b9b42-afcf-490c-86db-6be8001214bb_buggy.java
+++ b/tmp/28576e9f-6491-4015-baab-fd712f3c4fe3_fixed.java
@@ -1,45 +1,57 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
     } else if (prettyPrint) {
       // Don't pretty print recursively.
+      boolean originalPrettyPrint = prettyPrint;
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+        JSType propertyType = getPropertyType(property);
+        if (propertyType.isStructType() && propertyType.toMaybeStructType().hasProperty("loop") 
+            && propertyType.toMaybeStructType().getPropertyType("loop").isEquivalentTo(this)) {
+          sb.append(forAnnotations ? "?" : "{...}");
+        } else {
+          sb.append(propertyType.toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
           sb.append(", ...");
           break;
         }
       }
 
+      if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
+        sb.append(", ...");
+      }
+
       sb.append("}");
 
-      prettyPrint = true;
+      prettyPrint = originalPrettyPrint;
       return sb.toString();
     } else {
       return "{...}";
     }
 }
\ No newline at end of file
