diff --git a/tmp/9620f3fb-7e07-474f-ba38-debf3a07d67a_buggy.java b/tmp/11f7f36a-85d8-46b8-aa89-ce48c15444ca_fixed.java
index e4d90e7..3acea8c 100644
--- a/tmp/9620f3fb-7e07-474f-ba38-debf3a07d67a_buggy.java
+++ b/tmp/11f7f36a-85d8-46b8-aa89-ce48c15444ca_fixed.java
@@ -1,45 +1,69 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
       return getReferenceName();
-    } else if (prettyPrint) {
+    } else if (prettyPrint && !forAnnotations) {
       // Don't pretty print recursively.
       prettyPrint = false;
 
       // Use a tree set so that the properties are sorted.
       Set<String> propertyNames = Sets.newTreeSet();
       for (ObjectType current = this;
            current != null && !current.isNativeObjectType() &&
                propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
            current = current.getImplicitPrototype()) {
         propertyNames.addAll(current.getOwnPropertyNames());
       }
 
       StringBuilder sb = new StringBuilder();
       sb.append("{");
 
       int i = 0;
       for (String property : propertyNames) {
         if (i > 0) {
           sb.append(", ");
         }
 
         sb.append(property);
         sb.append(": ");
+        
+        // Check for recursive types and truncate accordingly
+        if (getPropertyType(property).isSubtypeOf(this) && !forAnnotations) {
+          sb.append("{...}");
+        } else {
           sb.append(getPropertyType(property).toString());
+        }
 
         ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
           sb.append(", ...");
           break;
         }
       }
 
       sb.append("}");
 
       prettyPrint = true;
       return sb.toString();
     } else {
-      return "{...}";
+      // For annotations, print all properties without truncation
+      StringBuilder sb = new StringBuilder();
+      sb.append("{");
+
+      boolean first = true;
+      for (String property : getOwnPropertyNames()) {
+        if (!first) {
+          sb.append(", ");
+        }
+
+        sb.append(property);
+        sb.append(": ");
+        sb.append(getPropertyType(property).toAnnotationString());
+
+        first = false;
+      }
+
+      sb.append("}");
+      return sb.toString();
     }
 }
\ No newline at end of file
