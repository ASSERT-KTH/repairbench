diff --git a/tmp/ce984e35-5a13-4835-afb6-a2c57693e501_buggy.java b/tmp/136fb5e4-3ca0-4709-9e89-a37c468bdc45_fixed.java
index 229b3e7..6894396 100644
--- a/tmp/ce984e35-5a13-4835-afb6-a2c57693e501_buggy.java
+++ b/tmp/136fb5e4-3ca0-4709-9e89-a37c468bdc45_fixed.java
@@ -1,55 +1,43 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // If there's no room for the description, just append the remaining text
+        // without padding or further wrapping.
+        sb.append(text.substring(pos).trim());
+        return sb;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
+    text = padding + text.substring(pos).trim();
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(rtrim(text));
             return sb;
         }
 
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = padding + text.substring(pos).trim();
     }
 }
\ No newline at end of file
