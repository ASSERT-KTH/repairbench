diff --git a/tmp/d8821ff8-e253-4b6c-a892-1e19412dcae2_buggy.java b/tmp/f17e9322-1ed1-4879-9932-c91f547a13f9_fixed.java
index 229b3e7..101758d 100644
--- a/tmp/d8821ff8-e253-4b6c-a892-1e19412dcae2_buggy.java
+++ b/tmp/f17e9322-1ed1-4879-9932-c91f547a13f9_fixed.java
@@ -1,55 +1,56 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
+    // Handle the case where the first line cannot fit the text and padding
     if (nextLineTabStop >= width)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        // If no room for padding, just wrap without padding
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    else
+    {
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // Create padding for subsequent lines
         final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
         text = padding + text.substring(pos).trim();
+    }
+
+    while (true)
+    {
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
-                sb.append(text);
-
+            sb.append(rtrim(text));
             return sb;
         }
 
         if ((text.length() > width) && (pos == nextLineTabStop - 1)) 
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = text.substring(pos).trim();
     }
 }
\ No newline at end of file
