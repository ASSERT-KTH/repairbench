diff --git a/tmp/b817868b-ff9e-45d2-89b2-4179f0f96c28_buggy.java b/tmp/77a64c29-b6d1-450f-99c6-4b1eb9b1c86d_fixed.java
index ef65dd9..1568423 100644
--- a/tmp/b817868b-ff9e-45d2-89b2-4179f0f96c28_buggy.java
+++ b/tmp/77a64c29-b6d1-450f-99c6-4b1eb9b1c86d_fixed.java
@@ -1,92 +1,95 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
-    List<Node> arrayFoldedChildren = Lists.newLinkedList();
+    List<Node> arrayFoldedChildren = new ArrayList<>();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+    boolean hasNonString = false;
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
+        hasNonString = true;
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length() + 2; // + 2 for the quotes.
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldedSize += sb.length() + 2; // + 2 for the quotes.
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
+    // One for each comma, but only if there are non-string elements or more than one element.
+    if (hasNonString || arrayFoldedChildren.size() > 1) {
       foldedSize += arrayFoldedChildren.size() - 1;
+    }
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
-        Node foldedStringNode = arrayFoldedChildren.remove(0);
+        Node foldedStringNode = arrayFoldedChildren.get(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
+        if (arrayFoldedChildren.size() == arrayNode.getChildCount() && !hasNonString) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
