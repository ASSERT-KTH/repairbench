diff --git a/tmp/45a15f0d-2e86-4026-938b-9383b8600a58_buggy.java b/tmp/57eb656d-0cf4-4fc7-bc0a-189773ecc7dc_fixed.java
index ef65dd9..5ce3b57 100644
--- a/tmp/45a15f0d-2e86-4026-938b-9383b8600a58_buggy.java
+++ b/tmp/57eb656d-0cf4-4fc7-bc0a-189773ecc7dc_fixed.java
@@ -1,92 +1,107 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+    Node prevElement = null;
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
+        String currValue = NodeUtil.getStringValue(elem);
+        if (prevElement != null && NodeUtil.isImmutableValue(prevElement)) {
+          String prevValue = NodeUtil.getStringValue(prevElement);
+          if (currValue.equals("") && prevValue.equals("")) {
+            joinString = ",";
             if (sb.length() > 0) {
               sb.append(joinString);
             }
-        sb.append(NodeUtil.getStringValue(elem));
+          } else if (prevValue.equals("")) {
+            if (sb.length() > 0) {
+              sb.append(joinString);
+            }
+          }
+        }
+        sb.append(currValue);
       } else {
         if (sb.length() > 0) {
-          // + 2 for the quotes.
-          foldedSize += sb.length() + 2;
+          foldedSize += sb.length();
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
+      prevElement = elem;
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
-      // + 2 for the quotes.
-      foldedSize += sb.length() + 2;
+      foldedSize += sb.length();
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
+    // one for each comma or joinString.
+    foldedSize += (arrayFoldedChildren.size() - 1) * joinString.length();
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
         // No folding could actually be performed.
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
         foldedSize += InlineCostEstimator.getCost(right);
         if (foldedSize > originalSize) {
           return;
         }
         arrayNode.detachChildren();
+        Node newJoinNode = new Node(Token.GETPROP, arrayNode, Node.newString("join"));
+        newJoinNode.setQualifiedName("join");
+        Node newCallNode = new Node(Token.CALL, newJoinNode, Node.newString(joinString));
         for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
+          newCallNode.addChildToBack(node);
         }
+        parent.replaceChild(n, newCallNode);
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
