diff --git a/tmp/bfb6d97e-66cd-4eda-97f2-65dac72cbb83_buggy.java b/tmp/43405581-d357-46ab-abe1-44f5514e1e86_fixed.java
index 29a9d2f..b47e577 100644
--- a/tmp/bfb6d97e-66cd-4eda-97f2-65dac72cbb83_buggy.java
+++ b/tmp/43405581-d357-46ab-abe1-44f5514e1e86_fixed.java
@@ -1,43 +1,48 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
         String ns = arg.getString();
         ProvidedName provided = providedNames.get(ns);
         if (provided == null || !provided.isExplicitlyProvided()) {
             unrecognizedRequires.add(
                 new UnrecognizedRequire(n, ns, t.getSourceName()));
         } else {
             JSModule providedModule = provided.explicitModule;
 
             // This must be non-null, because there was an explicit provide.
             Preconditions.checkNotNull(providedModule);
 
             JSModule module = t.getModule();
             if (moduleGraph != null &&
                 module != providedModule &&
                 !moduleGraph.dependsOn(module, providedModule)) {
                 compiler.report(
                     t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                         providedModule.getName(),
                         module.getName()));
             }
         }
 
         maybeAddToSymbolTable(left);
         maybeAddStringNodeToSymbolTable(arg);
 
-      // Requires should be removed before further processing.
-      // Some clients run closure pass multiple times, first with
-      // the checks for broken requires turned off. In these cases, we
-      // allow broken requires to be preserved by the first run to
-      // let them be caught in the subsequent run.
-      if (provided != null) {
+        // Requires should be removed before further processing, but only if
+        // the namespace is recognized and explicitly provided. This ensures
+        // that unrecognized requires are not removed, allowing them to be
+        // caught by subsequent checks.
+        if (provided != null && provided.isExplicitlyProvided()) {
             parent.detachFromParent();
             compiler.reportCodeChange();
         }
+    } else {
+        // If the argument is not a string literal, do not remove the require
+        // statement. This ensures that the require is preserved for further
+        // processing or error reporting.
+        maybeAddToSymbolTable(left);
+        maybeAddStringNodeToSymbolTable(arg);
     }
 }
\ No newline at end of file
