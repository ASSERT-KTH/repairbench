diff --git a/tmp/47c05810-bbfb-4c7c-ac38-da7e2b96b39c_buggy.java b/tmp/2ce3519b-fdb1-41ee-926d-7723d9ff6fa7_fixed.java
index 939f49b..73994e8 100644
--- a/tmp/47c05810-bbfb-4c7c-ac38-da7e2b96b39c_buggy.java
+++ b/tmp/2ce3519b-fdb1-41ee-926d-7723d9ff6fa7_fixed.java
@@ -1,21 +1,25 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {
+        // Check if the assignment is to a prototype property
+        Node propertyNameNode = n.getLastChild();
+        if (propertyNameNode.getType() == Token.STRING && propertyNameNode.getString().equals("prototype")) {
+            // Check if the prototype property is being assigned to a method or another property
+            Node rhs = assign.getLastChild();
+            if (rhs.getType() == Token.FUNCTION || (rhs.getType() == Token.GETPROP && rhs.getLastChild().getType() == Token.STRING)) {
                 return true;
             }
+        } else {
+            // Check if the assignment is to a chained property that ends with 'prototype'
+            Node currentNode = n;
+            while (currentNode.getType() == Token.GETPROP) {
+                Node child = currentNode.getFirstChild().getNext();
+                if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+                    return true;
+                }
+                currentNode = currentNode.getFirstChild();
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
