diff --git a/tmp/2b40f334-c993-439f-bddc-2206652f8dd5_buggy.java b/tmp/1211ce03-af81-487e-8aa1-862d78ee210e_fixed.java
index 939f49b..e4d1dda 100644
--- a/tmp/2b40f334-c993-439f-bddc-2206652f8dd5_buggy.java
+++ b/tmp/1211ce03-af81-487e-8aa1-862d78ee210e_fixed.java
@@ -1,21 +1,26 @@
 private boolean isPrototypePropertyAssign(Node assign) {
     Node n = assign.getFirstChild();
     if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+            && n.getType() == Token.GETPROP) {
         // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;
 
         if (isChainedProperty) {
             Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
+            // Check if the parent node is also a GETPROP to handle chained assignments correctly
+            if (n.getParent().getType() == Token.GETPROP && child.getType() == Token.STRING &&
                     child.getString().equals("prototype")) {
                 return true;
             }
+        } else {
+            // Handle the case where it's a direct assignment to a prototype property
+            Node lhs = n.getFirstChild();
+            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getType() == Token.STRING &&
+                    lhs.getLastChild().getString().equals("prototype")) {
+                return true;
+            }
         }
     }
 
     return false;
 }
\ No newline at end of file
