diff --git a/tmp/3a7fe579-1c2e-4806-97b5-9cb346451a74_buggy.java b/tmp/39dbc224-8f67-46de-8cab-29e92f399255_fixed.java
index b56897c..fd57c12 100644
--- a/tmp/3a7fe579-1c2e-4806-97b5-9cb346451a74_buggy.java
+++ b/tmp/39dbc224-8f67-46de-8cab-29e92f399255_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+    // When the node is null, it means we reached the implicit return
+    // where the function returns (possibly without a return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+    // Check for FOR_IN statements which have side effects
+    if (n.isForIn()) {
+        return true;
+    }
+
+    // Check for calls to functions that pass one of the dependent variables
+    // to a non-side-effect free function.
     if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
         return true;
     }
 
+    // Check for constructor calls that have side effects.
     if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
         return true;
     }
 
-
+    // Recursively check child nodes, skipping new CFG nodes.
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
