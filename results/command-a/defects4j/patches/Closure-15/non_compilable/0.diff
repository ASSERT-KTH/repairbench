diff --git a/tmp/f2e677bd-47e9-4081-afba-867eb4905e3f_buggy.java b/tmp/45f4d62c-f00b-43ee-b88f-cfc91fe2db0f_fixed.java
index b56897c..11bd9a5 100644
--- a/tmp/f2e677bd-47e9-4081-afba-867eb4905e3f_buggy.java
+++ b/tmp/45f4d62c-f00b-43ee-b88f-cfc91fe2db0f_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // When the node is null, it means we reached the implicit return
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
+  // Handle FOR_IN statements explicitly as they have side effects
+  if (n.isForIn()) {
+    return true;
+  }
+
   // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // pass one of the dependent variables to a non-side-effect free function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
-
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
