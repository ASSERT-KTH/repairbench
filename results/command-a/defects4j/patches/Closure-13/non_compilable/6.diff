diff --git a/tmp/9a890d0f-1cfe-45ff-b13e-861332493ec2_buggy.java b/tmp/d1228fb3-f785-4285-bc17-9abd98d3efe3_fixed.java
index b5d94e0..230330f 100644
--- a/tmp/9a890d0f-1cfe-45ff-b13e-861332493ec2_buggy.java
+++ b/tmp/d1228fb3-f785-4285-bc17-9abd98d3efe3_fixed.java
@@ -1,26 +1,29 @@
 private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
-    int visits = 0;
+    boolean changed = false;
     do {
+      changed = false;
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
         Node next = c.getNext();
+        traverse(c);
+        if (c.getParent() != node) {
+          // If the node was replaced or removed, adjust the current child.
+          c = node.getFirstChild();
+        } else {
           c = next;
         }
+      }
 
-      visit(node);
-      visits++;
+      if (visit(node)) {
+        changed = true;
+      }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      Preconditions.checkState(!changed || visits < 10000, "too many iterations");
+    } while (changed && shouldRetraverse(node));
 
     exitNode(node);
   }
\ No newline at end of file
