diff --git a/tmp/a7ce0994-cbf9-4f7c-ad82-3b0a64067754_buggy.java b/tmp/24eed4a1-2efa-4a2f-a1a7-46b418e54bd3_fixed.java
index b5d94e0..d921066 100644
--- a/tmp/a7ce0994-cbf9-4f7c-ad82-3b0a64067754_buggy.java
+++ b/tmp/24eed4a1-2efa-4a2f-a1a7-46b418e54bd3_fixed.java
@@ -1,26 +1,63 @@
 private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
+    boolean changed = true;
     int visits = 0;
-    do {
+    while (changed && visits < 10000) {
+      changed = false;
       Node c = node.getFirstChild();
       while (c != null) {
-        traverse(c);
         Node next = c.getNext();
+        if (traverse(c)) {
+          changed = true;
+        }
         c = next;
       }
 
-      visit(node);
+      if (visit(node)) {
+        changed = true;
+      }
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      Preconditions.checkState(visits < 10000, "too many iterations");
+    }
 
     exitNode(node);
   }
+
+  private boolean traverse(Node node) {
+    boolean changed = false;
+    if (shouldVisit(node)) {
+      changed = traverseChildren(node);
+      if (visit(node)) {
+        changed = true;
+      }
+    }
+    return changed;
+  }
+
+  private boolean traverseChildren(Node node) {
+    boolean changed = false;
+    Node c = node.getFirstChild();
+    while (c != null) {
+      Node next = c.getNext();
+      if (traverse(c)) {
+        changed = true;
+      }
+      c = next;
+    }
+    return changed;
+  }
+
+  private boolean visit(Node node) {
+    // This method should return true if the node was modified, false otherwise.
+    // The actual implementation depends on the specific requirements of the visitor.
+    // For the purpose of this example, we'll assume it always returns false.
+    return false;
+  }
\ No newline at end of file
