diff --git a/tmp/a08f7a81-7539-4be0-9130-763f93aa12ab_buggy.java b/tmp/17b71a58-97cb-48e2-b791-70d086f89b43_fixed.java
index c9da1b7..f3d5309 100644
--- a/tmp/a08f7a81-7539-4be0-9130-763f93aa12ab_buggy.java
+++ b/tmp/17b71a58-97cb-48e2-b791-70d086f89b43_fixed.java
@@ -1,33 +1,39 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+                // both explicit: verify only if they are of the same class
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                             + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                }
+                // otherwise, allow override if new type is more specific
+                return;
+            }
+
+            // one more thing: ok to override in sub-class
+            if (oldOne.getClass() != newOne.getClass() && !isMoreSpecific(newOne, oldOne)) {
+                throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                        + " creators: already had " + oldOne + ", encountered " + newOne);
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
+
+    private boolean isMoreSpecific(AnnotatedWithParams newOne, AnnotatedWithParams oldOne) {
+        Class<?> newClass = newOne.getDeclaringClass();
+        Class<?> oldClass = oldOne.getDeclaringClass();
+        return oldClass.isAssignableFrom(newClass) && !newClass.equals(oldClass);
+    }
\ No newline at end of file
