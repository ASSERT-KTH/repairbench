diff --git a/tmp/391af177-cb21-44a4-9743-92289b5a3c67_buggy.java b/tmp/b904569e-3409-40f7-bc02-1edf4d8d1eea_fixed.java
index c9da1b7..6e938dc 100644
--- a/tmp/391af177-cb21-44a4-9743-92289b5a3c67_buggy.java
+++ b/tmp/b904569e-3409-40f7-bc02-1edf4d8d1eea_fixed.java
@@ -1,33 +1,37 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+        // already had an explicitly marked one?
+        if ((_explicitCreators & mask) != 0) {
+            // already had explicitly annotated, leave as-is
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // both explicit: verify only if they are not of the same class
+            if (oldOne.getClass() != newOne.getClass()) {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+        } else {
+            // neither was explicit, or only new one is explicit: override
+            // but only if the new one is not a subclass of the old one
+            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {
+                return;
             }
+            // otherwise, throw exception if they are not of the same class
+            if (oldOne.getClass() != newOne.getClass()) {
+                throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
+                        + " creators: already had " + oldOne + ", encountered " + newOne);
+            }
+        }
+    }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
