diff --git a/tmp/a2f584bd-dfec-438e-b07a-8162bb557e38_buggy.java b/tmp/73dee6b9-2a87-47aa-9e9a-f4620df08e02_fixed.java
index c9da1b7..7a74e7c 100644
--- a/tmp/a2f584bd-dfec-438e-b07a-8162bb557e38_buggy.java
+++ b/tmp/73dee6b9-2a87-47aa-9e9a-f4620df08e02_fixed.java
@@ -1,33 +1,34 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+                // both explicit: verify only if they are of the same class
                 if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                }
+                // otherwise, new type more specific, use it
+            } else {
+                // only verify if neither explicitly annotated
+                if (!explicit) {
+                    if (oldOne.getClass() == newOne.getClass()) {
+                        throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                                +" creators: already had "+oldOne+", encountered "+newOne);
+                    }
+                }
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
