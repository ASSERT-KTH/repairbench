diff --git a/tmp/3d1e459e-0ac5-46f8-8837-7568d3e720fe_buggy.java b/tmp/22586cdf-4b29-4878-b262-b87e4ff6f8de_fixed.java
index c9da1b7..f5b59b0 100644
--- a/tmp/3d1e459e-0ac5-46f8-8837-7568d3e720fe_buggy.java
+++ b/tmp/22586cdf-4b29-4878-b262-b87e4ff6f8de_fixed.java
@@ -1,33 +1,28 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+    
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated
             if (!explicit) {
-                    return;
+                return; // skip if new one is not explicit
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // both are explicit, verify compatibility
+            if (oldOne.getClass() != newOne.getClass()) {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
             }
+        } else if (explicit) { // new one is explicit, old one is not
+            // override non-explicit with explicit
+            _explicitCreators |= mask;
+        } else if (oldOne.getClass() == newOne.getClass()) {
+            // if same class and neither is explicit, avoid duplicate
+            return;
         }
-        if (explicit) {
+    } else if (explicit) { // no old creator, new one is explicit
         _explicitCreators |= mask;
     }
+    
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
