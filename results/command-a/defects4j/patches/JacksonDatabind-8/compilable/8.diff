diff --git a/tmp/6a0fa814-ea2b-40d7-8141-c4266e96d5bf_buggy.java b/tmp/26ba9cb1-c6c4-4f8d-bba6-c698dee72e99_fixed.java
index c9da1b7..a029a09 100644
--- a/tmp/6a0fa814-ea2b-40d7-8141-c4266e96d5bf_buggy.java
+++ b/tmp/26ba9cb1-c6c4-4f8d-bba6-c698dee72e99_fixed.java
@@ -1,33 +1,35 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+
     // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
+        // already had explicitly annotated, leave as-is
+        if ((_explicitCreators & mask) != 0) {
             // but skip, if new one not annotated
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // both explicit: verify only if they are of the same class
+            if (oldOne.getClass() != newOne.getClass()) {
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
-            }
             }
+        } else {
+            // neither was explicit, or only one was explicit: replace if new one is more specific
+            if (newOne.getClass().isAssignableFrom(oldOne.getClass())) {
+                _creators[typeIndex] = _fixAccess(newOne);
                 if (explicit) {
                     _explicitCreators |= mask;
                 }
+            }
+        }
+    } else {
+        // no existing creator, just add the new one
         _creators[typeIndex] = _fixAccess(newOne);
+        if (explicit) {
+            _explicitCreators |= mask;
+        }
+    }
 }
\ No newline at end of file
