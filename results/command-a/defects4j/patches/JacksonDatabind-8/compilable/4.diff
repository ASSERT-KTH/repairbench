diff --git a/tmp/1e11827c-173e-443b-a34f-5cb6d66dd45e_buggy.java b/tmp/48c05415-b130-4ad8-a169-6435d2fcbb77_fixed.java
index c9da1b7..63d971e 100644
--- a/tmp/1e11827c-173e-443b-a34f-5cb6d66dd45e_buggy.java
+++ b/tmp/48c05415-b130-4ad8-a169-6435d2fcbb77_fixed.java
@@ -1,33 +1,41 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+    
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+        // If both are not explicit or both are explicit, check for conflicts
+        if (((_explicitCreators & mask) != 0) == explicit) {
+            // Check if the new creator is more specific (i.e., not the same class)
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            } else {
+                // If newOne is more specific, replace oldOne
+                if (isMoreSpecific(newOne, oldOne)) {
+                    _creators[typeIndex] = _fixAccess(newOne);
+                    if (explicit) {
+                        _explicitCreators |= mask;
+                    }
                 }
+                // Otherwise, keep oldOne and do not update _explicitCreators
+                return;
             }
+        } else if (!explicit) {
+            // If oldOne is explicit and newOne is not, keep oldOne
+            return;
+        }
+    }
+    
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
+
+private boolean isMoreSpecific(AnnotatedWithParams newOne, AnnotatedWithParams oldOne) {
+    // This method should compare the specificity of the creators.
+    // For simplicity, we assume that if the newOne is not of the same class as oldOne,
+    // it is more specific. This logic can be refined based on actual requirements.
+    return newOne.getClass() != oldOne.getClass();
+}
\ No newline at end of file
