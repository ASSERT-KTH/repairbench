diff --git a/tmp/f996fa70-9afe-492f-8630-f640f2910c39_buggy.java b/tmp/e229218b-8964-4d76-a705-1048ccec2747_fixed.java
index c9da1b7..65053f2 100644
--- a/tmp/f996fa70-9afe-492f-8630-f640f2910c39_buggy.java
+++ b/tmp/e229218b-8964-4d76-a705-1048ccec2747_fixed.java
@@ -1,33 +1,28 @@
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
-    {
+protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit) {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
+    
     // already had an explicitly marked one?
     if (oldOne != null) {
+        // Check if both are of the same class and explicitly marked
+        if (oldOne.getClass() == newOne.getClass() && 
+            ((_explicitCreators & mask) != 0 || explicit)) {
             
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
+            // If both are explicitly marked or the new one is explicitly marked,
+            // throw an exception for conflicting creators
+            if (explicit || (_explicitCreators & mask) != 0) {
+                throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex] +
+                        " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
+    
+    // Update explicit creators mask if the new creator is explicitly marked
     if (explicit) {
         _explicitCreators |= mask;
     }
+    
+    // Always update the creator, allowing subclass overrides
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
