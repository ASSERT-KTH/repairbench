diff --git a/tmp/0dc5b7e2-72dc-4127-8388-b3f9a0b24c52_buggy.java b/tmp/d6d4e460-e46d-45c5-a2e0-b0ceb68e25cc_fixed.java
index 139579d..f17ef4a 100644
--- a/tmp/0dc5b7e2-72dc-4127-8388-b3f9a0b24c52_buggy.java
+++ b/tmp/d6d4e460-e46d-45c5-a2e0-b0ceb68e25cc_fixed.java
@@ -1,43 +1,53 @@
-    // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
+    if (classAttr == null) {
+        return false;
+    }
     final int len = classAttr.length();
     final int wantLen = className.length();
 
     if (len == 0 || len < wantLen) {
         return false;
     }
 
     // if both lengths are equal, only need compare the className with the attribute
     if (len == wantLen) {
         return className.equalsIgnoreCase(classAttr);
     }
 
     // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
     boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
         if (Character.isWhitespace(classAttr.charAt(i))) {
             if (inClass) {
                 // white space ends a class name, compare it with the requested one, ignore case
                 if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                     return true;
                 }
                 inClass = false;
             }
         } else {
             if (!inClass) {
                 // we're in a class name : keep the start of the substring
                 inClass = true;
                 start = i;
             }
         }
     }
 
     // check the last entry
     if (inClass && len - start == wantLen) {
         return classAttr.regionMatches(true, start, className, 0, wantLen);
     }
 
+    // if not found, try to find it in a case-insensitive manner
+    String[] classes = classAttr.split("\\s+");
+    for (String cls : classes) {
+        if (cls.equalsIgnoreCase(className)) {
+            return true;
+        }
+    }
+
     return false;
 }
\ No newline at end of file
