diff --git a/tmp/a5f35617-93ff-4a6c-8eb8-417732adfc86_buggy.java b/tmp/53f6a0f5-7a06-4727-b06e-2ffae8ce8c80_fixed.java
index 233a867..2703502 100644
--- a/tmp/a5f35617-93ff-4a6c-8eb8-417732adfc86_buggy.java
+++ b/tmp/53f6a0f5-7a06-4727-b06e-2ffae8ce8c80_fixed.java
@@ -1,73 +1,120 @@
 /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
 
           // Check for arguments that are evaluated more than once.
           // Note: Unlike block inlining, there it is not possible that a
           // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+          if (mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        if (mayHaveSideEffects(cArg, compiler)) {
+          // Also, arguments may not modify parameters that are referenced
+          // elsewhere.
+          Node param = findParameterModifiedByCallArgument(block, cArg);
+          if (param != null) {
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
+
+  /**
+   * Determines if a call argument might modify a function parameter.
+   * @param block the function block.
+   * @param argument the argument to the call.
+   * @return parameter that is modified or {@code null} if not modifed.
+   */
+  private static Node findParameterModifiedByCallArgument(
+      Node block, Node argument) {
+    List<Ref> paramRefs = getParameterReferenceInfo(block);
+    for (Ref paramRef : paramRefs) {
+      CodingConvention convention = paramRef.getJSType().getCodingConvention();
+      if (convention.canBeModifiedByCallToMethod(
+          argument, paramRef.getName())) {
+        return NodeUtil.getNameNode(paramRef.getNode());
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Determines if a node might modify the state of the mutable object
+   * (objects, arrays, functions)
+   * @param n the function node.
+   * @param compiler The compiler.
+   * @return whether this node has side-effect or not.
+   */
+  private static boolean mayEffectMutableState(Node n, AbstractCompiler compiler) {
+    if (NodeUtil.mayHaveSideEffects(n, compiler)) {
+      return true;
+    }
+    if (n.isGetProp()) {
+      Node obj = n.getFirstChild();
+      JSType type = obj.getJSType();
+      CodingConvention convention = type.getCodingConvention();
+      String prop = n.getLastChild().getString();
+      if (convention.canPropertyNodeBeModified(obj, n, prop)) {
+        return true;
+      }
+    }
+
+    return false;
+  }
\ No newline at end of file
