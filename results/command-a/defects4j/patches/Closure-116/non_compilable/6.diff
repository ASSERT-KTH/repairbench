diff --git a/tmp/07265926-3993-45ac-9432-0c14f153f76b_buggy.java b/tmp/25252fb8-42c9-464d-9f98-66bf90824688_fixed.java
index 233a867..15c7d6b 100644
--- a/tmp/07265926-3993-45ac-9432-0c14f153f76b_buggy.java
+++ b/tmp/25252fb8-42c9-464d-9f98-66bf90824688_fixed.java
@@ -1,73 +1,87 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+  boolean hasSideEffects = false;
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+        // If the argument has side effects, we need to check if the function
+        // body has more than one reference to the parameter.
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          hasSideEffects = true;
+        }
       }
 
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
-          return CanInlineResult.NO;
+        hasSideEffects = true;
       }
       cArg = cArg.getNext();
     }
   }
 
+  // If there are side effects in the arguments and the function body has more
+  // than one reference to any parameter, we cannot inline.
+  if (hasSideEffects && hasMultipleParameterReferences(block)) {
+    return CanInlineResult.NO;
+  }
+
   return CanInlineResult.YES;
 }
+
+private boolean hasMultipleParameterReferences(Node block) {
+  Set<String> paramNames = new HashSet<>();
+  Node param = NodeUtil.getFunctionParameters(block.getParent()).getFirstChild();
+  while (param != null) {
+    paramNames.add(param.getString());
+    param = param.getNext();
+  }
+
+  for (String paramName : paramNames) {
+    if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {
+      return true;
+    }
+  }
+  return false;
+}
\ No newline at end of file
