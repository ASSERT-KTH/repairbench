diff --git a/tmp/8b5d9828-5e0d-413d-a831-2eb795f2d7ea_buggy.java b/tmp/4c06a5ae-7aca-4848-8f6a-7fe3c0df5385_fixed.java
index 03b03d7..8c7f4d0 100644
--- a/tmp/8b5d9828-5e0d-413d-a831-2eb795f2d7ea_buggy.java
+++ b/tmp/4c06a5ae-7aca-4848-8f6a-7fe3c0df5385_fixed.java
@@ -1,25 +1,29 @@
 /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long targetInstant = earlierOrLater ? instantAfter : instantBefore;
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // determine the correct offset to use
+        long earlierOffset = getOffset(instant - 1);
+        long laterOffset = getOffset(instant + 1);
+        
+        // adjust the local time to the correct offset
+        long adjustedLocal = local - (earlierOrLater ? laterOffset : earlierOffset);
+        return convertLocalToUTC(adjustedLocal, false, targetInstant);
     }
\ No newline at end of file
