diff --git a/tmp/3d2b0bba-a5b1-409e-ba5b-e6b3e4a5a87b_buggy.java b/tmp/d8cc4c75-d59c-485f-ba5c-b5055e70cdaf_fixed.java
index 03b03d7..ff36c78 100644
--- a/tmp/3d2b0bba-a5b1-409e-ba5b-e6b3e4a5a87b_buggy.java
+++ b/tmp/d8cc4c75-d59c-485f-ba5c-b5055e70cdaf_fixed.java
@@ -1,25 +1,23 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        long instantLocal = convertUTCToLocal(instant);
+        
+        if (instantBefore == instantAfter || (instantLocal == instantBefore && instantLocal == instantAfter)) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        long targetInstant = earlierOrLater ? (instantLocal - instantBefore) + instant : (instantAfter - instantLocal) + instant;
+        return convertLocalToUTC(instantLocal, false, targetInstant);
     }
\ No newline at end of file
