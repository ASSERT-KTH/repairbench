diff --git a/tmp/1d0816bf-baff-4132-828a-82ba5defdb3d_buggy.java b/tmp/1fdbe3f7-f571-4b18-bdcc-7013f1666db2_fixed.java
index 03b03d7..8a2fd91 100644
--- a/tmp/1d0816bf-baff-4132-828a-82ba5defdb3d_buggy.java
+++ b/tmp/1fdbe3f7-f571-4b18-bdcc-7013f1666db2_fixed.java
@@ -1,25 +1,31 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long targetInstant = earlierOrLater ? instantAfter : instantBefore;
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // calculate the correct UTC instant that maps to the desired local time
+    long adjustedInstant = convertLocalToUTC(local, earlierOrLater, targetInstant);
+    
+    // ensure the adjusted instant is within the overlap range
+    if (earlierOrLater) {
+        return Math.max(instant, adjustedInstant);
+    } else {
+        return Math.min(instant, adjustedInstant);
+    }
 }
\ No newline at end of file
