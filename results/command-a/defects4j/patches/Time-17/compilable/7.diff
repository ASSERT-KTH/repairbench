diff --git a/tmp/27e687d3-d6d7-415a-bca9-695e87e96ca3_buggy.java b/tmp/1d626d12-6373-40fc-b5a7-5808beb537a9_fixed.java
index 03b03d7..f2589e1 100644
--- a/tmp/27e687d3-d6d7-415a-bca9-695e87e96ca3_buggy.java
+++ b/tmp/1d626d12-6373-40fc-b5a7-5808beb537a9_fixed.java
@@ -1,25 +1,30 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long targetInstant = earlierOrLater ? instantAfter : instantBefore;
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // If the target instant is after the current instant, we need to adjust for the later offset
+    if (earlierOrLater && targetInstant > instant) {
+        return convertLocalToUTC(local, true, targetInstant);
+    } else if (!earlierOrLater && targetInstant < instant) {
+        return convertLocalToUTC(local, false, targetInstant);
+    } else {
+        return convertLocalToUTC(local, earlierOrLater, targetInstant);
+    }
 }
\ No newline at end of file
