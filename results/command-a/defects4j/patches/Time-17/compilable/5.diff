diff --git a/tmp/1d9d426a-1333-4335-9d0e-7c5b477b7af2_buggy.java b/tmp/ce360d6d-2fd0-4375-8099-7020662095b1_fixed.java
index 03b03d7..dbfc8b1 100644
--- a/tmp/1d9d426a-1333-4335-9d0e-7c5b477b7af2_buggy.java
+++ b/tmp/ce360d6d-2fd0-4375-8099-7020662095b1_fixed.java
@@ -1,25 +1,31 @@
 /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
         
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long targetInstant = earlierOrLater ? instantAfter : instantBefore;
+        long adjustedInstant = convertLocalToUTC(local, false, targetInstant);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // determine the correct offset to use
+        long offsetBefore = getOffset(instant - 1);
+        long offsetAfter = getOffset(instant + 1);
+        if (earlierOrLater) {
+            return adjustedInstant + (offsetAfter - offsetBefore);
+        } else {
+            return adjustedInstant + (offsetBefore - offsetAfter);
+        }
     }
\ No newline at end of file
