diff --git a/tmp/c35910ba-0570-4071-8f4c-3f286205a665_buggy.java b/tmp/b6cf7053-f7e0-4edb-984f-f3779e0cec60_fixed.java
index 20123a4..ac79100 100644
--- a/tmp/c35910ba-0570-4071-8f4c-3f286205a665_buggy.java
+++ b/tmp/b6cf7053-f7e0-4edb-984f-f3779e0cec60_fixed.java
@@ -1,129 +1,130 @@
 /**
  * Parses the externs and main inputs.
  *
  * @return A synthetic root node whose two children are the externs root
  *     and the main root
  */
 Node parseInputs() {
     boolean devMode = options.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
     if (externsRoot != null) {
         externsRoot.detachChildren();
     }
     if (jsRoot != null) {
         jsRoot.detachChildren();
     }
 
     // Parse main JS sources.
     jsRoot = IR.block();
     jsRoot.setIsSyntheticBlock(true);
 
     externsRoot = IR.block();
     externsRoot.setIsSyntheticBlock(true);
 
     externAndJsRoot = IR.block(externsRoot, jsRoot);
     externAndJsRoot.setIsSyntheticBlock(true);
 
     if (options.tracer.isOn()) {
         tracker = new PerformanceTracker(jsRoot, options.tracer);
         addChangeHandler(tracker.getCodeChangeHandler());
     }
 
     Tracer tracer = newTracer("parseInputs");
 
     try {
         // Parse externs sources.
         for (CompilerInput input : externs) {
             Node n = input.getAstRoot(this);
             if (hasErrors()) {
                 return null;
             }
             externsRoot.addChildToBack(n);
         }
 
         // Modules inferred in ProcessCommonJS pass.
         if (options.transformAMDToCJSModules || options.processCommonJSModules) {
             processAMDAndCommonJSModules();
         }
 
         hoistExterns(externsRoot);
 
         // Check if the sources need to be re-ordered.
         boolean staleInputs = false;
+        List<CompilerInput> sortedInputs = inputs; // Initialize with the original inputs
+
         if (options.dependencyOptions.needsManagement() && options.closurePass) {
             for (CompilerInput input : inputs) {
                 // Forward-declare all the provided types, so that they
                 // are not flagged even if they are dropped from the process.
                 for (String provide : input.getProvides()) {
                     getTypeRegistry().forwardDeclareType(provide);
                 }
             }
 
             try {
-          inputs =
-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
+                sortedInputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
                         .manageDependencies(options.dependencyOptions, inputs);
                 staleInputs = true;
             } catch (CircularDependencyException e) {
                 report(JSError.make(
                         JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
 
                 // If in IDE mode, we ignore the error and keep going.
                 if (hasErrors()) {
                     return null;
                 }
             } catch (MissingProvideException e) {
                 report(JSError.make(
                         MISSING_ENTRY_ERROR, e.getMessage()));
 
                 // If in IDE mode, we ignore the error and keep going.
                 if (hasErrors()) {
                     return null;
                 }
             }
         }
 
         hoistNoCompileFiles();
 
         if (staleInputs) {
             repartitionInputs();
         }
 
-      // Build the AST.
-      for (CompilerInput input : inputs) {
+        // Build the AST using the sorted inputs if dependency management is enabled.
+        for (CompilerInput input : sortedInputs) {
             Node n = input.getAstRoot(this);
             if (n == null) {
                 continue;
             }
 
             if (devMode) {
                 runSanityCheck();
                 if (hasErrors()) {
                     return null;
                 }
             }
 
             if (options.sourceMapOutputPath != null ||
                     options.nameReferenceReportPath != null) {
 
                 // Annotate the nodes in the tree with information from the
                 // input file. This information is used to construct the SourceMap.
                 SourceInformationAnnotator sia =
                         new SourceInformationAnnotator(
                                 input.getName(), options.devMode != DevMode.OFF);
                 NodeTraversal.traverse(this, n, sia);
             }
 
             jsRoot.addChildToBack(n);
         }
 
         if (hasErrors()) {
             return null;
         }
         return externAndJsRoot;
     } finally {
         stopTracer(tracer, "parseInputs");
     }
 }
\ No newline at end of file
