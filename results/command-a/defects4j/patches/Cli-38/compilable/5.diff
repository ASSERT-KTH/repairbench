diff --git a/tmp/36ff5da3-c14d-40f7-9e57-09a26890e36f_buggy.java b/tmp/be981ee9-8e17-4783-a2ca-1cb5926600e1_fixed.java
index 81a6e8b..2f6f370 100644
--- a/tmp/36ff5da3-c14d-40f7-9e57-09a26890e36f_buggy.java
+++ b/tmp/be981ee9-8e17-4783-a2ca-1cb5926600e1_fixed.java
@@ -1,19 +1,26 @@
 /**
  * Tells if the token looks like a short option.
  * 
  * @param token
  */
-    private boolean isShortOption(String token)
-    {
+private boolean isShortOption(String token) {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        if (!token.startsWith("-") || token.length() == 1)
-        {
+    if (!token.startsWith("-") || token.length() == 1) {
         return false;
     }
 
-        // remove leading "-" and "=value"
-        int pos = token.indexOf("=");
-        String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);
-        return options.hasShortOption(optName);
-        // check for several concatenated short options
+    // remove leading "-"
+    String optName = token.substring(1);
+
+    // check if the token contains concatenated short options
+    for (int i = 0; i < optName.length(); i++) {
+        String shortOpt = String.valueOf(optName.charAt(i));
+        if (!options.hasShortOption(shortOpt)) {
+            // if any character is not a valid short option, return false
+            return false;
+        }
+    }
+
+    // if all characters are valid short options, return true
+    return true;
 }
\ No newline at end of file
