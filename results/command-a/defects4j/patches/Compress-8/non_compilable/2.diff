diff --git a/tmp/9898cee6-831a-4c11-b1ba-d16136fa9924_buggy.java b/tmp/79c81f55-91d3-4a82-8738-a59b26cd6a84_fixed.java
index e087f95..6009b5c 100644
--- a/tmp/9898cee6-831a-4c11-b1ba-d16136fa9924_buggy.java
+++ b/tmp/79c81f55-91d3-4a82-8738-a59b26cd6a84_fixed.java
@@ -1,53 +1,76 @@
 /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+     * @throws IllegalArgumentException if the trailing space/NUL is missing, if the length is less than 2, or if an invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
+        boolean hasValidDigit = false;
         int end = offset + length;
         int start = offset;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+            // Handle trailing space or NUL
+            if (i == end - 1 || i == end - 2) {
+                if (currentByte != ' ' && currentByte != 0) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (currentByte == ' ') {
+                if (!stillPadding) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            // Check for valid octal digit
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+
+            hasValidDigit = true;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        }
+
+        // If the buffer contains all NULs or spaces, return 0
+        if (!hasValidDigit && buffer.length > 0) {
+            boolean allNulsOrSpaces = true;
+            for (byte b : buffer) {
+                if (b != 0 && b != ' ') {
+                    allNulsOrSpaces = false;
+                    break;
+                }
+            }
+            if (allNulsOrSpaces) {
+                return 0L;
+            }
         }
 
         return result;
     }
\ No newline at end of file
