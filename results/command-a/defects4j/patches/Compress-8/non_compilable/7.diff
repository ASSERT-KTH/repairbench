diff --git a/tmp/8d7b002b-3fb0-4f20-97e1-d331a782c9c0_buggy.java b/tmp/34af59c7-f701-45ba-9118-2eb867978377_fixed.java
index e087f95..9143ce4 100644
--- a/tmp/8d7b002b-3fb0-4f20-97e1-d331a782c9c0_buggy.java
+++ b/tmp/34af59c7-f701-45ba-9118-2eb867978377_fixed.java
@@ -1,53 +1,90 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the length is less than 2, trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasTrailingSpaceOrNull = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
+        if (i == end - 1) {
+            if (currentByte != ' ' && currentByte != 0) {
+                throw new IllegalArgumentException("Missing trailing space or NUL");
+            }
+            hasTrailingSpaceOrNull = true;
+        }
+
         if (currentByte == 0) {
+            if (i == end - 1) {
+                hasTrailingSpaceOrNull = true;
+            }
+            if (stillPadding && i != end - 1) {
+                continue;
+            }
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == ' ') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
+            if (i == end - 1) {
+                hasTrailingSpaceOrNull = true;
+            }
             break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    if (!hasTrailingSpaceOrNull && result != 0) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+
+    if (result == 0 && !allNuls(buffer, offset, length)) {
+        throw new IllegalArgumentException("Input is not all NULs and not a valid octal number");
     }
 
     return result;
 }
+
+private static boolean allNuls(final byte[] buffer, final int offset, final int length) {
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int start, final byte currentByte) {
+    return "Invalid octal byte: " + currentByte + " at position " + (start - offset) + " in buffer of length " + length;
+}
\ No newline at end of file
