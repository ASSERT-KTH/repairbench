diff --git a/tmp/6b8c0118-00bd-4b44-ba7a-b6cc83aeefbf_buggy.java b/tmp/49206205-278b-420e-a4e7-7b5bab0006be_fixed.java
index e087f95..b397437 100644
--- a/tmp/6b8c0118-00bd-4b44-ba7a-b6cc83aeefbf_buggy.java
+++ b/tmp/49206205-278b-420e-a4e7-7b5bab0006be_fixed.java
@@ -1,53 +1,80 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the input length is less than 2, 
+ *         the trailing space/NUL is missing, or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasTrailingTerminator = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        // Check for trailing terminator (space or NUL)
+        if (i == end - 1 || i == end - 2) {
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                hasTrailingTerminator = true;
                 break;
             }
+        }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == 0)) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Check for invalid characters
         if (currentByte < '0' || currentByte > '7') {
+            if (currentByte != (byte) ' ' && currentByte != 0) {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            break;
+        }
+
+        // Convert from ASCII
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // Ensure there's a trailing terminator
+    if (!hasTrailingTerminator && !isAllNULs(buffer, offset, length)) {
+        throw new IllegalArgumentException("Missing trailing terminator");
     }
 
     return result;
 }
+
+private static boolean isAllNULs(final byte[] buffer, final int offset, final int length) {
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            return false;
+        }
+    }
+    return true;
+}
+
+private static String exceptionMessage(final byte[] buffer, final int offset, final int length, 
+                                       final int start, final byte currentByte) {
+    return "Invalid octal byte detected: " + currentByte + " at position " + (start - offset);
+}
\ No newline at end of file
