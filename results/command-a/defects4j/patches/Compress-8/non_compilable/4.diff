diff --git a/tmp/6401a1d1-ab96-4167-a7fb-6b8735837fa1_buggy.java b/tmp/c9d66384-7280-44c1-917c-75e57fb4b191_fixed.java
index e087f95..c860fca 100644
--- a/tmp/6401a1d1-ab96-4167-a7fb-6b8735837fa1_buggy.java
+++ b/tmp/c9d66384-7280-44c1-917c-75e57fb4b191_fixed.java
@@ -1,53 +1,85 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
+ * @throws IllegalArgumentException if the buffer length is less than 2, 
+ *                                  or if the trailing space/NUL is missing,
+ *                                  or if an invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasTrailingDelimiter = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
+        if (i == end - 1 || i == end - 2) {
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                hasTrailingDelimiter = true;
+                break;
+            }
+        }
+
         if (currentByte == 0) {
+            if (i == end - 1 || i == end - 2) {
+                hasTrailingDelimiter = true;
+            }
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        if (currentByte == (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+        }
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    if (!hasTrailingDelimiter && result != 0) {
+        throw new IllegalArgumentException(
+                "Missing trailing space or NUL in octal string");
+    }
+
+    if (!hasTrailingDelimiter && result == 0) {
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                throw new IllegalArgumentException(
+                        "Input contains non-NUL bytes but no trailing delimiter");
+            }
+        }
     }
 
     return result;
 }
+
+private static String exceptionMessage(final byte[] buffer, final int offset, final int length, final int start, final byte currentByte) {
+    return "Invalid octal byte detected: " + (char) currentByte + " at offset " + (start + offset) + " in buffer of length " + length;
+}
\ No newline at end of file
