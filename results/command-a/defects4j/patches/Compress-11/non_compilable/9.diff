diff --git a/tmp/98c7d052-16a0-43d9-baaa-b2db59053dbb_buggy.java b/tmp/0b07acc8-d2fd-4755-a7d7-b63a6e887f1c_fixed.java
index 6b160ef..babc3b1 100644
--- a/tmp/98c7d052-16a0-43d9-baaa-b2db59053dbb_buggy.java
+++ b/tmp/0b07acc8-d2fd-4755-a7d7-b63a6e887f1c_fixed.java
@@ -1,68 +1,74 @@
 /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      * 
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
         try {
             int signatureLength = in.read(signature);
             in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
-            signatureLength = in.read(dumpsig);
+            in.read(dumpsig, 0, Math.min(signatureLength, dumpsig.length));
+            if (signatureLength < dumpsig.length) {
+                in.read(dumpsig, signatureLength, dumpsig.length - signatureLength);
+            }
             in.reset();
-            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+            if (DumpArchiveInputStream.matches(dumpsig, dumpsig.length)) {
                 return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
             final byte[] tarheader = new byte[512];
             in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
+            in.read(tarheader, 0, Math.min(signatureLength, tarheader.length));
+            if (signatureLength < tarheader.length) {
+                in.read(tarheader, signatureLength, tarheader.length - signatureLength);
+            }
             in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
+            if (TarArchiveInputStream.matches(tarheader, tarheader.length)) {
                 return new TarArchiveInputStream(in);
             }
             // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
+            try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader))) {
+                if (tais.getNextEntry() != null) {
                     return new TarArchiveInputStream(in);
+                }
             } catch (Exception e) { // NOPMD
                 // can generate IllegalArgumentException as well as IOException
                 // autodetection, simply not a TAR
                 // ignored
             }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
         throw new ArchiveException("No Archiver found for the stream signature");
     }
\ No newline at end of file
