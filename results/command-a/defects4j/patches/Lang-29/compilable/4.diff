diff --git a/tmp/8058ac0d-2b77-4e9e-843b-859cab3ab686_buggy.java b/tmp/1d03187a-84db-43fa-a935-fc4a1b94433f_fixed.java
index 3ec995f..711a31d 100644
--- a/tmp/8058ac0d-2b77-4e9e-843b-859cab3ab686_buggy.java
+++ b/tmp/1d03187a-84db-43fa-a935-fc4a1b94433f_fixed.java
@@ -1,26 +1,46 @@
 /**
  * <p>
  * Converts the given Java version string to an <code>int</code>.
  * </p>
  * 
  * <p>
  * Example return values:
  * </p>
  * <ul>
  * <li><code>120</code> for Java 1.2</li>
  * <li><code>131</code> for Java 1.3.1</li>
  * <li><code>160</code> for Java 1.6.0_20</li>
  * </ul>
  * 
  * <p>
  * Patch releases are not reported.
  * </p>
  * <p>
  * This method is package private instead of private to support unit test invocation.
  * </p>
  * 
-     * @return the version, for example 131 for Java 1.3.1
+ * @return the version, for example 131 for Java 1.3.1, or 0 if the input is null, empty, or not a valid Java version string
  */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    String[] parts = version.split("\\.");
+    int major = 0, minor = 0, patch = 0;
+    if (parts.length > 0) {
+        String[] majorParts = parts[0].split(" ");
+        if (majorParts.length > 0 && majorParts[majorParts.length - 1].matches("\\d+")) {
+            major = Integer.parseInt(majorParts[majorParts.length - 1]);
+        }
+    }
+    if (parts.length > 1 && parts[1].matches("\\d+")) {
+        minor = Integer.parseInt(parts[1]);
+    }
+    if (parts.length > 2 && parts[2].matches("\\d+")) {
+        patch = Integer.parseInt(parts[2]);
+    }
+    if (major == 0) {
+        return 0;
+    }
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
