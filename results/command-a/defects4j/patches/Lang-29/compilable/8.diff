diff --git a/tmp/0d1ab5c1-e98c-4e96-a261-a6b55cf44c6f_buggy.java b/tmp/feed01f3-41fa-4ac1-804c-05f3b5e85c8e_fixed.java
index 3ec995f..c2305dc 100644
--- a/tmp/0d1ab5c1-e98c-4e96-a261-a6b55cf44c6f_buggy.java
+++ b/tmp/feed01f3-41fa-4ac1-804c-05f3b5e85c8e_fixed.java
@@ -1,26 +1,13 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        String[] parts = version.split("\\D+");
+        if (parts.length == 0) {
+            return 0;
+        }
+        int major = parts[0].isEmpty() ? 0 : Integer.parseInt(parts[0]);
+        int minor = parts.length > 1 && !parts[1].isEmpty() ? Integer.parseInt(parts[1]) : 0;
+        int patch = parts.length > 2 && !parts[2].isEmpty() ? Integer.parseInt(parts[2]) : 0;
+        return major * 100 + minor * 10 + patch;
     }
\ No newline at end of file
