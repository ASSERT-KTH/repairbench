diff --git a/tmp/e66f5d61-8b9a-494c-9237-f7840af2f6cb_buggy.java b/tmp/ac795344-8543-4838-bbd8-f71aa9f7fe0a_fixed.java
index 3ec995f..9cd7b7c 100644
--- a/tmp/e66f5d61-8b9a-494c-9237-f7840af2f6cb_buggy.java
+++ b/tmp/ac795344-8543-4838-bbd8-f71aa9f7fe0a_fixed.java
@@ -1,26 +1,25 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+    static int toJavaVersionInt(String version) {
+        if (version == null || version.isEmpty()) {
+            return 0;
+        }
+        String[] parts = version.split("\\.");
+        int major = 0, minor = 0                , micro = 0               ;
+        try {
+            if (parts.length > 0 && parts[0].startsWith("1.")) {
+                major = Integer.parseInt(parts[0].substring(2));
+            }
+            if (parts.length > 1) {
+                minor = Integer.parseInt(parts[1]);
+            }
+            if (parts.length > 2) {
+                micro = Integer.parseInt(parts[2].split("_")[0].split(" ")[0]);
+            } else if (parts.length == 1 && parts[                0].contains("_")) {
+                String[] subParts = parts[0].split("_");
+                minor = Integer.parseInt(subParts[0].substring(2));
+                micro = Integer.parseInt(subParts[1]);
+            }
+        } catch (NumberFormatException e) {
+            return 0;
+        }
+        return major * 100 + minor * 10 + micro;
     }
\ No newline at end of file
