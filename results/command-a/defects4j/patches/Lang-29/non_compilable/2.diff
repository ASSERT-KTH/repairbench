diff --git a/tmp/d3e5ae00-e312-434f-aed7-9cb83a20f235_buggy.java b/tmp/72472e68-d5c0-4920-a8d7-78f42f2af7e0_fixed.java
index 3ec995f..8411ca1 100644
--- a/tmp/d3e5ae00-e312-434f-aed7-9cb83a20f235_buggy.java
+++ b/tmp/72472e68-d5c0-4920-a8d7-78f42f2af7e0_fixed.java
@@ -1,26 +1,55 @@
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
 /**
  * <p>
  * Converts the given Java version string to an <code>int</code>.
  * </p>
  * 
  * <p>
  * Example return values:
  * </p>
  * <ul>
  * <li><code>120</code> for Java 1.2</li>
  * <li><code>131</code> for Java 1.3.1</li>
  * <li><code>160</code> for Java 1.6.0_20</li>
  * </ul>
  * 
  * <p>
  * Patch releases are not reported.
  * </p>
  * <p>
  * This method is package private instead of private to support unit test invocation.
  * </p>
  * 
  * @return the version, for example 131 for Java 1.3.1
  */
-    static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+static int toJavaVersionInt(String version) {
+    if (version == null || version.isEmpty()) {
+        return 0;
+    }
+    
+    // Remove any non-digit characters except for the dot
+    String cleanedVersion = version.replaceAll("[^\\d.]", "");
+    
+    // Split the version string into parts
+    String[] parts = cleanedVersion.split("\\.");
+    
+    // If the version string does not contain at least two parts, return 0
+    if (parts.length < 2) {
+        return 0;
+    }
+    
+    // Extract the major and minor version numbers
+    int major = Integer.parseInt(parts[0]);
+    int minor = Integer.parseInt(parts[1]);
+    
+    // If there is a third part, extract the patch version number
+    int patch = 0;
+    if (parts.length > 2) {
+        patch = Integer.parseInt(parts[2]);
+    }
+    
+    // Calculate the version number as major * 100 + minor * 10 + patch
+    return major * 100 + minor * 10 + patch;
 }
\ No newline at end of file
