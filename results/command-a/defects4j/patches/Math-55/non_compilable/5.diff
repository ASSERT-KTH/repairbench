diff --git a/tmp/68981b20-b8df-4bdd-9c7c-08a7cb23d734_buggy.java b/tmp/f1de8836-f169-4143-b19b-c749f93d96ec_fixed.java
index 1478ee1..fe5fe2b 100644
--- a/tmp/68981b20-b8df-4bdd-9c7c-08a7cb23d734_buggy.java
+++ b/tmp/f1de8836-f169-4143-b19b-c749f93d96ec_fixed.java
@@ -1,24 +1,35 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
+      double factor1 = FastMath.scalb(1.0, -100);
+      double factor2 = FastMath.scalb(1.0, 100);
+      Vector3D scaledV1 = new Vector3D(factor1, v1);
+      Vector3D scaledV2 = new Vector3D(factor2, v2);
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rho = (scaledV1.dotProduct(scaledV2)) / (scaledV2.dotProduct(scaledV2));
 
+      // compute v3 = v1 - rho v2
+      Vector3D v3 = new Vector3D(1.0, scaledV1);
+      v3 = v3.subtract(new Vector3D(rho, scaledV2));
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      Vector3D result = new Vector3D(v3.getY() * scaledV2.getZ() - v3.getZ() * scaledV2.getY(),
+                                     v3.getZ() * scaledV2.getX() - v3.getX() * scaledV2.getZ(),
+                                     v3.getX() * scaledV2.getY() - v3.getY() * scaledV2.getX());
 
+      // rescale the result to the original scale
+      return new Vector3D(FastMath.scalb(1.0, 100), result);
   }
\ No newline at end of file
