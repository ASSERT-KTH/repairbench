diff --git a/tmp/5422073b-3b43-47aa-a88c-7adec7478efd_buggy.java b/tmp/51a59318-d700-465a-97a6-b0acb9143693_fixed.java
index f650982..0bcb178 100644
--- a/tmp/5422073b-3b43-47aa-a88c-7adec7478efd_buggy.java
+++ b/tmp/51a59318-d700-465a-97a6-b0acb9143693_fixed.java
@@ -1,42 +1,61 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            Iterator leftIterator = (Iterator) l;
+            Iterator rightIterator = (Iterator) r;
+            while (leftIterator.hasNext() && rightIterator.hasNext()) {
+                if (!equal(leftIterator.next(), rightIterator.next())) {
+                    return false;
+                }
+            }
+            return !leftIterator.hasNext() && !rightIterator.hasNext();
         }
         return equal(l, r);
     }
+
+private boolean contains(Iterator iterator, Object value) {
+    while (iterator.hasNext()) {
+        if (equal(iterator.next(), value)) {
+            return true;
+        }
+    }
+    return false;
+}
+
+private boolean equal(Object o1, Object o2) {
+    if (o1 == null && o2 == null) {
+        return true;
+    }
+    if (o1 == null || o2 == null) {
+        return false;
+    }
+    return o1.equals(o2);
+}
\ No newline at end of file
