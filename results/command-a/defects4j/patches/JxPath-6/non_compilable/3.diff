diff --git a/tmp/e82f7fbc-97a7-4287-94b2-b334947b08f5_buggy.java b/tmp/ab8b3c36-a3e1-4ad5-a686-6483ab88e766_fixed.java
index f650982..5f68c23 100644
--- a/tmp/e82f7fbc-97a7-4287-94b2-b334947b08f5_buggy.java
+++ b/tmp/ab8b3c36-a3e1-4ad5-a686-6483ab88e766_fixed.java
@@ -1,42 +1,77 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            // Iterate through both iterators and check if any pair of elements are equal
+            Iterator leftIter = (Iterator) l;
+            Iterator rightIter = (Iterator) r;
+            while (leftIter.hasNext() && rightIter.hasNext()) {
+                if (equal(leftIter.next(), rightIter.next())) {
+                    return true;
+                }
+            }
+            // If one iterator has more elements than the other, check if the remaining elements are equal to the last element of the shorter iterator
+            Iterator longerIter = leftIter.hasNext() ? leftIter : rightIter;
+            Object lastElement = leftIter.hasNext() ? rightIter.next() : leftIter.next();
+            while (longerIter.hasNext()) {
+                if (equal(longerIter.next(), lastElement)) {
+                    return true;
+                }
+            }
+            return false;
         }
         return equal(l, r);
     }
+
+    private boolean contains(Iterator iterator, Object value) {
+        while (iterator.hasNext()) {
+            if (equal(iterator.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean equal(Object l, Object r) {
+        if (l == null && r == null) {
+            return true;
+        }
+        if (l == null || r == null) {
+            return false;
+        }
+        return l.equals(r);
+    }
\ No newline at end of file
