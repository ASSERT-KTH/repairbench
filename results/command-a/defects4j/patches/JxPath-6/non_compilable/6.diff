diff --git a/tmp/0bdc7629-4150-4b4e-acbf-2eeac6d0320f_buggy.java b/tmp/e558dd6f-6221-4af7-8bda-54101492652f_fixed.java
index f650982..53381a8 100644
--- a/tmp/0bdc7629-4150-4b4e-acbf-2eeac6d0320f_buggy.java
+++ b/tmp/e558dd6f-6221-4af7-8bda-54101492652f_fixed.java
@@ -1,42 +1,75 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            // The issue was here: we should check if both iterators contain the same elements
+            // in any order, not just if they match exactly.
+            return iteratorsEqual((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
+
+    private boolean iteratorsEqual(Iterator iter1, Iterator iter2) {
+        List list1 = new ArrayList();
+        List list2 = new ArrayList();
+        while (iter1.hasNext()) {
+            list1.add(iter1.next());
+        }
+        while (iter2.hasNext()) {
+            list2.add(iter2.next());
+        }
+        return list1.containsAll(list2) && list2.containsAll(list1);
+    }
+
+    private boolean contains(Iterator iterator, Object value) {
+        while (iterator.hasNext()) {
+            if (equal(iterator.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean equal(Object o1, Object o2) {
+        if (o1 == null && o2 == null) {
+            return true;
+        }
+        if (o1 == null || o2 == null) {
+            return false;
+        }
+        return o1.equals(o2);
+    }
\ No newline at end of file
