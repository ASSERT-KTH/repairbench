diff --git a/tmp/58b63171-0602-47b9-a73e-41bc781106c8_buggy.java b/tmp/faa686e5-a9c3-4127-9e27-b1c0e5815027_fixed.java
index f650982..59591a6 100644
--- a/tmp/58b63171-0602-47b9-a73e-41bc781106c8_buggy.java
+++ b/tmp/faa686e5-a9c3-4127-9e27-b1c0e5815027_fixed.java
@@ -1,42 +1,64 @@
 /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            Iterator lit = (Iterator) l;
+            Iterator rit = (Iterator) r;
+            while (lit.hasNext() && rit.hasNext()) {
+                if (!equal(lit.next(), rit.next())) {
+                    return false;
+                }
+            }
+            return !lit.hasNext() && !rit.hasNext();
         }
         return equal(l, r);
     }
+
+    private boolean contains(Iterator it, Object value) {
+        while (it.hasNext()) {
+            if (equal(it.next(), value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean equal(Object l, Object r) {
+        if (l == null && r == null) {
+            return true;
+        }
+        if (l == null || r == null) {
+            return false;
+        }
+        return l.equals(r);
+    }
\ No newline at end of file
