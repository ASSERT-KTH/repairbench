diff --git a/tmp/fc3e05a7-55d7-4b10-a248-02b63ee5a2e0_buggy.java b/tmp/a17f3e0c-5da9-48cb-8f0d-b8a9241d20f8_fixed.java
index f650982..69411f3 100644
--- a/tmp/fc3e05a7-55d7-4b10-a248-02b63ee5a2e0_buggy.java
+++ b/tmp/a17f3e0c-5da9-48cb-8f0d-b8a9241d20f8_fixed.java
@@ -1,42 +1,75 @@
-    /**
-     * Compares two values
-     */
 protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        // Fix: Use containsAny to check if any element in one iterator matches any in the other
+        return containsAny((Iterator) l, (Iterator) r);
     }
-        return equal(l, r);
+    // Fix: Handle primitive types and null values correctly
+    return areEqual(l, r);
+}
+
+private boolean containsAny(Iterator iter1, Iterator iter2) {
+    while (iter1.hasNext()) {
+        Object obj1 = iter1.next();
+        while (iter2.hasNext()) {
+            Object obj2 = iter2.next();
+            if (areEqual(obj1, obj2)) {
+                return true;
+            }
+        }
+        // Reset iter2 for the next iteration of iter1
+        iter2 = getIterator(iter2);
+    }
+    return false;
+}
+
+private Iterator getIterator(Iterator iter) {
+    if (iter instanceof ListIterator) {
+        ListIterator listIter = (ListIterator) iter;
+        listIter.previous(); // Move back to the start
+        return listIter;
+    }
+    // For other types of iterators, we cannot reset them, so we assume they are single-use
+    return Collections.emptyIterator();
+}
+
+private boolean areEqual(Object obj1, Object obj2) {
+    if (obj1 == null && obj2 == null) {
+        return true;
+    }
+    if (obj1 == null || obj2 == null) {
+        return false;
+    }
+    if (obj1 instanceof Number && obj2 instanceof Number) {
+        return ((Number) obj1).doubleValue() == ((Number) obj2).doubleValue();
+    }
+    return obj1.equals(obj2);
 }
\ No newline at end of file
