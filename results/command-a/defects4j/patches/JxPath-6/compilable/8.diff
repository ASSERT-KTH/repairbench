diff --git a/tmp/3970ae45-2adb-49e8-b344-19f2b8f66cec_buggy.java b/tmp/cd692233-41a8-4434-80fb-83bd22373658_fixed.java
index f650982..e20a20d 100644
--- a/tmp/3970ae45-2adb-49e8-b344-19f2b8f66cec_buggy.java
+++ b/tmp/cd692233-41a8-4434-80fb-83bd22373658_fixed.java
@@ -1,42 +1,44 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right) 
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
-        if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        if (l instanceof Collection && !(r instanceof Collection)) {
+            return contains(((Collection) l).iterator(), r);
         }
 
-        if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        if (r instanceof Collection && !(l instanceof Collection)) {
+            return contains(((Collection) r).iterator(), l);
         }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+        if (l instanceof Collection && r instanceof Collection) {
+            Iterator lit = ((Collection) l).iterator();
+            Iterator rit = ((Collection) r).iterator();
+            while (lit.hasNext() && rit.hasNext()) {
+                if (!equal(lit.next(), rit.next())) {
+                    return false;
                 }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
             }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+            return !lit.hasNext() && !rit.hasNext();
         }
+
         return equal(l, r);
     }
\ No newline at end of file
