diff --git a/tmp/c88e0df2-816e-415c-ae25-8753afb97bc0_buggy.java b/tmp/37528be0-1e3b-41d8-bcfe-1509d033f24e_fixed.java
index 21f64c6..8e623ac 100644
--- a/tmp/c88e0df2-816e-415c-ae25-8753afb97bc0_buggy.java
+++ b/tmp/37528be0-1e3b-41d8-bcfe-1509d033f24e_fixed.java
@@ -1,23 +1,37 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            if (startChar != input[offset]) {
+                while (++offset < length && startChar != input[offset]) {
+                    // Do nothing, just skip characters
+                }
+                if (offset >= length) {
+                    return -1; // Start char not found
+                }
+            }
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last >= length) {
+                return -1; // Not enough characters left for the sequence
+            }
+            boolean found = true;
+            for (int j = 1; i <= last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    found = false;
+                    break;
+                }
+            }
+            if (found) { // found full sequence
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
