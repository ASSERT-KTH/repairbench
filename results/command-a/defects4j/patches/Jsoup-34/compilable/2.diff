diff --git a/tmp/29b2e6a3-d754-45c8-9b43-f89a012b996a_buggy.java b/tmp/176de3a6-2110-4a6a-872d-8ffdfc55c1e9_fixed.java
index 21f64c6..7f83a42 100644
--- a/tmp/29b2e6a3-d754-45c8-9b43-f89a012b996a_buggy.java
+++ b/tmp/176de3a6-2110-4a6a-872d-8ffdfc55c1e9_fixed.java
@@ -1,23 +1,27 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+        }
+        if (offset >= length) break; // exit if we reached the end while scanning for the start char
+
         int i = offset + 1;
-            int last = i + seq.length()-1;
+        int last = Math.min(i + seq.length() - 1, length - 1); // prevent out of bounds
         if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            for (int j = 1; i <= last && j < seq.length() && seq.charAt(j) == input[i]; i++, j++);
+            if (i + seq.length() - 2 <= last) { // found full sequence
                 return offset - pos;
             }
         }
+    }
     return -1;
 }
\ No newline at end of file
