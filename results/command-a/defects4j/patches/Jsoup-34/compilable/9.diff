diff --git a/tmp/f40d4302-f868-447b-92f6-57b73ec9b892_buggy.java b/tmp/189dc5ba-ebba-41c1-85fe-d08a06c0a8fc_fixed.java
index 21f64c6..5a85f32 100644
--- a/tmp/f40d4302-f868-447b-92f6-57b73ec9b892_buggy.java
+++ b/tmp/189dc5ba-ebba-41c1-85fe-d08a06c0a8fc_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+            if (offset >= length) {
+                return -1; // not found, and no more characters to check
+            }
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last >= length) {
+                return -1; // sequence cannot fit in remaining characters
+            }
+            boolean found = true;
+            for (int j = 1; i < last; i++, j++) {
+                if (seq.charAt(j) != input[i]) {
+                    found = false;
+                    break;
+                }
+            }
+            if (found) {
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
