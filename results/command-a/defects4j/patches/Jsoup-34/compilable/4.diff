diff --git a/tmp/d05943a0-d3d5-43ea-9732-c006bc4ebb72_buggy.java b/tmp/02c07fdf-f404-454d-b8db-4c18759c8c2e_fixed.java
index 21f64c6..8ec5074 100644
--- a/tmp/d05943a0-d3d5-43ea-9732-c006bc4ebb72_buggy.java
+++ b/tmp/02c07fdf-f404-454d-b8db-4c18759c8c2e_fixed.java
@@ -1,23 +1,32 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while (++offset < length && startChar != input[offset]);
+            }
+            if (offset >= length) {
+                return -1; // reached the end without finding the startChar
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
+            int last = Math.min(i + seq.length() - 1, length - 1); // prevent out of bounds
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                for (int j = 1; i <= last && j < seq.length(); i++, j++) {
+                    if (seq.charAt(j) != input[i]) {
+                        break;
+                    }
+                }
+                if (i - 1 == last && seq.length() == (i - offset)) { // found full sequence
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
