diff --git a/tmp/1d3222e8-0248-4047-944e-a0b96c13bd35_buggy.java b/tmp/5080c23e-a61b-4f3a-ae41-410711627442_fixed.java
index bf9c086..09a4f81 100644
--- a/tmp/1d3222e8-0248-4047-944e-a0b96c13bd35_buggy.java
+++ b/tmp/5080c23e-a61b-4f3a-ae41-410711627442_fixed.java
@@ -1,54 +1,54 @@
-  /**
-   * Visits a CALL node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   */
 private void visitCall(NodeTraversal t, Node n) {
     Node child = n.getFirstChild();
     JSType childType = getJSType(child).restrictByNotNullOrUndefined();
 
     if (!childType.canBeCalled()) {
         report(t, n, NOT_CALLABLE, childType.toString());
         ensureTyped(t, n);
         return;
     }
 
     // A couple of types can be called as if they were functions.
     // If it is a function type, then validate parameters.
     if (childType instanceof FunctionType) {
         FunctionType functionType = (FunctionType) childType;
 
         boolean isExtern = false;
         JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
         if (functionJSDocInfo != null) {
             String sourceName = functionJSDocInfo.getSourceName();
             CompilerInput functionSource = compiler.getInput(sourceName);
-        isExtern = functionSource.isExtern();
+            isExtern = functionSource != null && functionSource.isExtern();
         }
 
         // Non-native constructors should not be called directly
         // unless they specify a return type and are defined
         // in an extern.
         if (functionType.isConstructor() &&
                 !functionType.isNativeObjectType() &&
                 (functionType.getReturnType().isUnknownType() ||
                         functionType.getReturnType().isVoidType() ||
                         !isExtern)) {
             report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
         }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
+        // Check if the function has an explicit 'this' type
+        if (functionType.getTypeOfThis() != null && !isGetPropOrGetElem(n)) {
+            report(t, n, FUNCTION_TYPE_EXPECTED_THIS_OBJECT, functionType.toString());
+        }
 
         visitParameterList(t, n, functionType);
         ensureTyped(t, n, functionType.getReturnType());
     } else {
         ensureTyped(t, n);
     }
 
     // TODO: Add something to check for calls of RegExp objects, which is not
     // supported by IE.  Either say something about the return type or warn
     // about the non-portability of the call or both.
 }
+
+private boolean isGetPropOrGetElem(Node n) {
+    Node parent = n.getParent();
+    return parent != null && (parent.isGetProp() || parent.isGetElem());
+}
\ No newline at end of file
