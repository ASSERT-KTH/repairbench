diff --git a/tmp/21cb6cbe-755c-415a-89a5-1b79e8a501d8_buggy.java b/tmp/7cc5f4fd-52a5-4834-8671-45bd86c31d60_fixed.java
index 98d89dc..4918226 100644
--- a/tmp/21cb6cbe-755c-415a-89a5-1b79e8a501d8_buggy.java
+++ b/tmp/7cc5f4fd-52a5-4834-8671-45bd86c31d60_fixed.java
@@ -1,23 +1,38 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Handle NaN comparison separately
+    boolean isLeftNaN = left instanceof Double && ((Double) left).isNaN();
+    boolean isRightNaN = right instanceof Double && ((Double) right).isNaN();
+    
+    if (isLeftNaN || isRightNaN) {
+        if (isLeftNaN && isRightNaN) {
+            // NaN equals NaN is true
+            return operator == CoreOperationEqual.class;
+        } else {
+            // Any comparison involving NaN is false
+            return false;
+        }
+    }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
