diff --git a/tmp/bbb10cc0-0ee4-4b16-b937-2ce056fad181_buggy.java b/tmp/a07ed008-6b16-4a73-8011-e4f183ec1130_fixed.java
index 98d89dc..321b2bf 100644
--- a/tmp/bbb10cc0-0ee4-4b16-b937-2ce056fad181_buggy.java
+++ b/tmp/a07ed008-6b16-4a73-8011-e4f183ec1130_fixed.java
@@ -1,23 +1,35 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
+    
+    // Check for NaN before converting to double
+    if (left instanceof Double && ((Double) left).isNaN() || 
+        right instanceof Double && ((Double) right).isNaN()) {
+        // NaN comparisons
+        if (left.equals(right)) {
+            return evaluateCompare(0); // NaN == NaN is true
+        } else {
+            return evaluateCompare(-1); // All other NaN comparisons are false
+        }
+    }
+
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
-        return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
+    return evaluateCompare(Double.compare(ld, rd));
 }
\ No newline at end of file
