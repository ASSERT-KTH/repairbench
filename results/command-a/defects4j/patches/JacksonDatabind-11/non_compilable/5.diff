diff --git a/tmp/a9d2598e-7e3c-4931-b62b-088734990b65_buggy.java b/tmp/538b5791-a8b0-4256-9c38-6bd8d36515cd_fixed.java
index fe73b81..112cd9d 100644
--- a/tmp/a9d2598e-7e3c-4931-b62b-088734990b65_buggy.java
+++ b/tmp/538b5791-a8b0-4256-9c38-6bd8d36515cd_fixed.java
@@ -1,42 +1,43 @@
     protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
     {
         final String name = type.getName();
         // 19-Mar-2015: Without context, all we can check are bounds.
         if (context == null) {
             // And to prevent infinite loops, now need this:
+            JavaType boundType = _fromBounds(type.getBounds(), null);
+            if (boundType == null || boundType.equals(Object.class)) {
                 return _unknownType();
+            }
+            return boundType;
         } else {
             // Ok: here's where context might come in handy!
             /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
              *   unresolved type variables to handle some cases where bounds
              *   are enough. Let's hope it does not hide real fail cases.
              */
             JavaType actualType = context.findType(name);
             if (actualType != null) {
                 return actualType;
             }
+            // If not found in context, fall back to bounds
+            return _fromBounds(type.getBounds(), context);
+        }
     }
 
-        /* 29-Jan-2010, tatu: We used to throw exception here, if type was
-         *   bound: but the problem is that this can occur for generic "base"
-         *   method, overridden by sub-class. If so, we will want to ignore
-         *   current type (for method) since it will be masked.
-         */
-        Type[] bounds = type.getBounds();
-
-        // With type variables we must use bound information.
-        // Theoretically this gets tricky, as there may be multiple
-        // bounds ("... extends A & B"); and optimally we might
-        // want to choose the best match. Also, bounds are optional;
-        // but here we are lucky in that implicit "Object" is
-        // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
-
-        /* 29-Jan-2010, tatu: One more problem are recursive types
-         *   (T extends Comparable<T>). Need to add "placeholder"
-         *   for resolution to catch those.
-         */
-        context._addPlaceholder(name);
-        return _constructType(bounds[0], context);
+    private JavaType _fromBounds(Type[] bounds, TypeBindings context) {
+        if (bounds.length == 0) {
+            return _unknownType();
+        }
+        // Use the first bound as the primary type
+        Type firstBound = bounds[0];
+        if (firstBound instanceof Class) {
+            return _constructType(firstBound, context);
+        } else if (firstBound instanceof TypeVariable) {
+            return _fromVariable((TypeVariable<?>) firstBound, context);
+        } else if (firstBound instanceof ParameterizedType) {
+            return _fromParameterizedType((ParameterizedType) firstBound, context);
+        } else {
+            // Fallback to unknown type if bound type is not supported
+            return _unknownType();
+        }
     }
\ No newline at end of file
