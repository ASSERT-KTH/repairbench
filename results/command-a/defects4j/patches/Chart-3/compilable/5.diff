diff --git a/tmp/cb44c5c9-5541-43f5-84ad-6d093a512a15_buggy.java b/tmp/82a06de4-137f-48eb-a1a4-e2bd02773b99_fixed.java
index 388771b..a84dbc2 100644
--- a/tmp/cb44c5c9-5541-43f5-84ad-6d093a512a15_buggy.java
+++ b/tmp/82a06de4-137f-48eb-a1a4-e2bd02773b99_fixed.java
@@ -1,37 +1,42 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
+        if (end >= this.data.size()) {
+            throw new IllegalArgumentException("Requires end < data.size()");
+        }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+        copy.maxY = Double.NaN;
+        copy.minY = Double.NaN;
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
