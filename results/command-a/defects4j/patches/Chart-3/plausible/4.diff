diff --git a/tmp/91bec01c-d749-44d6-b6d4-046588c4c4ca_buggy.java b/tmp/bc8a189e-f131-455e-9e19-5159f4ac024e_fixed.java
index 388771b..832fbcc 100644
--- a/tmp/91bec01c-d749-44d6-b6d4-046588c4c4ca_buggy.java
+++ b/tmp/bc8a189e-f131-455e-9e19-5159f4ac024e_fixed.java
@@ -1,37 +1,39 @@
 /**
  * Creates a new timeseries by copying a subset of the data in this time
  * series.
  *
  * @param start  the index of the first time period to copy.
  * @param end  the index of the last time period to copy.
  *
  * @return A series containing a copy of this times series from start until
  *         end.
  *
  * @throws CloneNotSupportedException if there is a cloning problem.
  */
 public TimeSeries createCopy(int start, int end)
         throws CloneNotSupportedException {
     if (start < 0) {
         throw new IllegalArgumentException("Requires start >= 0.");
     }
     if (end < start) {
         throw new IllegalArgumentException("Requires start <= end.");
     }
     TimeSeries copy = (TimeSeries) super.clone();
     copy.data = new java.util.ArrayList();
+    copy.maxY = Double.NaN; // Reset maxY to ensure it's recalculated
+    copy.minY = Double.NaN; // Reset minY to ensure it's recalculated
     if (this.data.size() > 0) {
         for (int index = start; index <= end; index++) {
             TimeSeriesDataItem item
                     = (TimeSeriesDataItem) this.data.get(index);
             TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
             try {
                 copy.add(clone);
             }
             catch (SeriesException e) {
                 e.printStackTrace();
             }
         }
     }
     return copy;
 }
\ No newline at end of file
