diff --git a/tmp/7e2b7d70-466e-4a78-91e9-6d8e3ed481e5_buggy.java b/tmp/7322933a-46c8-47c6-8f20-d7161ad19ceb_fixed.java
index 388771b..3dbe054 100644
--- a/tmp/7e2b7d70-466e-4a78-91e9-6d8e3ed481e5_buggy.java
+++ b/tmp/7322933a-46c8-47c6-8f20-d7161ad19ceb_fixed.java
@@ -1,37 +1,27 @@
-    /**
-     * Creates a new timeseries by copying a subset of the data in this time
-     * series.
-     *
-     * @param start  the index of the first time period to copy.
-     * @param end  the index of the last time period to copy.
-     *
-     * @return A series containing a copy of this times series from start until
-     *         end.
-     *
-     * @throws CloneNotSupportedException if there is a cloning problem.
-     */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
+        copy.minY = Double.NaN; // Reset minY and maxY
+        copy.maxY = Double.NaN; // Reset minY and maxY
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
         return copy;
     }
\ No newline at end of file
