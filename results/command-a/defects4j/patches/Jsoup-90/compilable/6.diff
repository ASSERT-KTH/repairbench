diff --git a/tmp/efd69e7b-e410-44a4-b55a-00db18e8ea0f_buggy.java b/tmp/f2ef7c1f-f6f2-457a-a5d7-78a32560d625_fixed.java
index 373b1e8..3ca8674 100644
--- a/tmp/efd69e7b-e410-44a4-b55a-00db18e8ea0f_buggy.java
+++ b/tmp/f2ef7c1f-f6f2-457a-a5d7-78a32560d625_fixed.java
@@ -1,37 +1,45 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
     for (int j = input.length; i < j; ++i) {
-                int o = input[i];
+        int o = input[i] & 0xFF; // Ensure unsigned byte value
         if ((o & 0x80) == 0) {
             continue; // ASCII
         }
 
-                // UTF-8 leading:
+        // UTF-8 leading byte checks
+        int end;
         if ((o & 0xE0) == 0xC0) {
             end = i + 1;
         } else if ((o & 0xF0) == 0xE0) {
             end = i + 2;
         } else if ((o & 0xF8) == 0xF0) {
             end = i + 3;
         } else {
+            return false; // Invalid leading byte
+        }
+
+        // Ensure we don't go out of bounds
+        if (end > input.length) {
             return false;
         }
 
-
+        // Check continuation bytes
         while (i < end) {
             i++;
-                    o = input[i];
+            if (i >= input.length) {
+                return false; // Unexpected end of input
+            }
+            o = input[i] & 0xFF;
             if ((o & 0xC0) != 0x80) {
-                        return false;
+                return false; // Invalid continuation byte
             }
         }
     }
     return true;
 }
\ No newline at end of file
