diff --git a/tmp/3eae0c14-8d01-424f-b635-e2fddb349ad1_buggy.java b/tmp/df8f7dfd-8a54-4ecd-b746-a93f1cc2d361_fixed.java
index 1126687..7f321ac 100644
--- a/tmp/3eae0c14-8d01-424f-b635-e2fddb349ad1_buggy.java
+++ b/tmp/df8f7dfd-8a54-4ecd-b746-a93f1cc2d361_fixed.java
@@ -1,65 +1,62 @@
 /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+      // Check if the left operand is an integer within the 32-bit signed range
+      if (!(lval == (int) lval && (int) lval >= Integer.MIN_VALUE && (int) lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+      if (!(rval >= 0 && rval < 32 && rval == (int) rval)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
       int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          result = (lvalInt & 0xFFFFFFFFL) >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // Ensure the result is within the 32-bit signed range for LSH and RSH
+      if ((n.getType() == Token.LSH || n.getType() == Token.RSH) && 
+          (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, n);
+        return n;
+      }
+
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
