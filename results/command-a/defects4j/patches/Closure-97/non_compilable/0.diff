diff --git a/tmp/28e5ad43-c724-47da-9bd3-7adefbc2c8c9_buggy.java b/tmp/130210e9-9922-4a2d-b93b-bf07937a8234_fixed.java
index 1126687..938d6e1 100644
--- a/tmp/28e5ad43-c724-47da-9bd3-7adefbc2c8c9_buggy.java
+++ b/tmp/130210e9-9922-4a2d-b93b-bf07937a8234_fixed.java
@@ -1,65 +1,69 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
+      // Convert the numbers to ints, considering the JavaScript behavior for unsigned right shift
+      int lvalInt = (int) (n.getType() == Token.URSH ? (lval >>> 0) : lval);
+      if (lvalInt != lval && (n.getType() != Token.URSH || (lvalInt & 0xFFFFFFFFL) != (long)lval)) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // JavaScript unsigned right shift behavior
+          result = (lvalInt >>> rvalInt) & 0xFFFFFFFFL;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // Ensure the result is within the 32-bit signed integer range for LSH and RSH
+      if (n.getType() != Token.URSH && (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
