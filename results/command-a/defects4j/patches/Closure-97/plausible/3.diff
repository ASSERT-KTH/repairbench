diff --git a/tmp/52a1b7ae-833e-4fd3-92e9-eb00a82699e7_buggy.java b/tmp/9da55cad-c814-4f0c-825f-618c3c860e72_fixed.java
index 1126687..2eba763 100644
--- a/tmp/52a1b7ae-833e-4fd3-92e9-eb00a82699e7_buggy.java
+++ b/tmp/9da55cad-c814-4f0c-825f-618c3c860e72_fixed.java
@@ -1,65 +1,69 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // Check if the shift amount is within the valid range [0, 32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
+      // Check if the left operand is within the valid range for integers
+      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+
+      // Convert the numbers to ints, ensuring they are not fractional
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          // Ensure the result does not overflow the 32-bit integer range
+          result = (double) (lvalInt << rvalInt);
+          if (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE) {
+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+            return n;
+          }
           break;
         case Token.RSH:
+          // Signed right shift
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // Unsigned right shift
+          // JavaScript's unsigned right shift treats the number as an unsigned 32-bit integer
+          long unsignedLval = (long) lvalInt & 0xFFFFFFFFL;
+          result = (double) (unsignedLval >>> rvalInt);
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
