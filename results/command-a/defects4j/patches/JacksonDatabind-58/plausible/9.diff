diff --git a/tmp/f8c1d601-6f19-45dc-90b7-f93d36a0e17f_buggy.java b/tmp/c0bf0cd1-4d55-4c0c-9b44-734bec9b7ab7_fixed.java
index 574b43c..20b8ef4 100644
--- a/tmp/f8c1d601-6f19-45dc-90b7-f93d36a0e17f_buggy.java
+++ b/tmp/c0bf0cd1-4d55-4c0c-9b44-734bec9b7ab7_fixed.java
@@ -1,57 +1,61 @@
-    /**
-     * Method that will construct a regular bean property setter using
-     * the given setter method.
-     *
-     * @return Property constructed, if any; or null to indicate that
-     *   there should be no property based on given definitions.
-     */
 protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
             BeanDescription beanDesc, BeanPropertyDefinition propDef,
             JavaType propType0)
         throws JsonMappingException
     {
         // need to ensure method is callable (for non-public)
         AnnotatedMember mutator = propDef.getNonConstructorMutator();
 
         if (ctxt.canOverrideAccessModifiers()) {
             // [databind#877]: explicitly prevent forced access to `cause` of `Throwable`;
             // never needed and attempts may cause problems on some platforms.
             // !!! NOTE: should be handled better for 2.8 and later
+            if (mutator != null && !isCauseOfThrowable(mutator)) {
                 mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
             }
+        }
         // note: this works since we know there's exactly one argument for methods
+        if (mutator == null) {
+            return null; // [databind#877]: return null if mutator is null
+        }
         BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                 propType0, propDef.getWrapperName(),
                 beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
         JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
         // did type change?
         if (type != propType0) {
             property = property.withType(type);
         }
 
         // First: does the Method specify the deserializer to use? If so, let's use it.
         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
         type = modifyTypeByAnnotation(ctxt, mutator, type);
         TypeDeserializer typeDeser = type.getTypeHandler();
         SettableBeanProperty prop;
         if (mutator instanceof AnnotatedMethod) {
             prop = new MethodProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
         } else {
             prop = new FieldProperty(propDef, type, typeDeser,
                     beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
         }
         if (propDeser != null) {
             prop = prop.withValueDeserializer(propDeser);
         }
         // need to retain name of managed forward references:
         AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
         if (ref != null && ref.isManagedReference()) {
             prop.setManagedReferenceName(ref.getName());
         }
         ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
         if (objectIdInfo != null) {
             prop.setObjectIdInfo(objectIdInfo);
         }
         return prop;
     }
+
+    private boolean isCauseOfThrowable(AnnotatedMember member) {
+        return member.getDeclaringClass() == Throwable.class 
+                && "cause".equals(member.getName()) 
+                && member instanceof AnnotatedField;
+    }
\ No newline at end of file
