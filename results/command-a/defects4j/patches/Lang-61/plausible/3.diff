diff --git a/tmp/7ef9c4f1-3753-4f71-a5c1-680a4c33f581_buggy.java b/tmp/14fcd4ae-efd9-406e-8be0-e297ceb7256e_fixed.java
index addeb8d..3c7ebba 100644
--- a/tmp/7ef9c4f1-3753-4f71-a5c1-680a4c33f581_buggy.java
+++ b/tmp/14fcd4ae-efd9-406e-8be0-e297ceb7256e_fixed.java
@@ -1,38 +1,38 @@
     /**
      * Searches the string builder to find the first reference to the specified
      * string starting searching from the given index.
      * <p>
      * Note that a null input string will return -1, whereas the JDK throws an exception.
      * 
      * @param str  the string to find, null returns -1
      * @param startIndex  the index to start at, invalid index rounded to edge
      * @return the first index of the string, or -1 if not found
      */
     public int indexOf(String str, int startIndex) {
-        startIndex = (startIndex < 0 ? 0 : startIndex);
+        startIndex = (startIndex < 0 ? 0 : Math.min(startIndex, size)); // Ensure startIndex does not exceed size
         if (str == null || startIndex >= size) {
             return -1;
         }
         int strLen = str.length();
         if (strLen == 1) {
             return indexOf(str.charAt(0), startIndex);
         }
         if (strLen == 0) {
             return startIndex;
         }
-        if (strLen > size) {
+        if (strLen > size - startIndex) { // Adjust the check to consider startIndex
             return -1;
         }
         char[] thisBuf = buffer;
-        int len = thisBuf.length - strLen;
+        int len = size - strLen; // Use size instead of buffer length
         outer:
-        for (int i = startIndex; i < len; i++) {
+        for (int i = startIndex; i <= len; i++) { // Ensure i does not exceed len
             for (int j = 0; j < strLen; j++) {
                 if (str.charAt(j) != thisBuf[i + j]) {
                     continue outer;
                 }
             }
             return i;
         }
         return -1;
     }
\ No newline at end of file
