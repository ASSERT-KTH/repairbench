diff --git a/tmp/b17efb53-eeda-4b6c-823b-7a91257de452_buggy.java b/tmp/6911e3ee-8add-41e8-b7d4-5abbc5cee0ba_fixed.java
index 07b0792..941d981 100644
--- a/tmp/b17efb53-eeda-4b6c-823b-7a91257de452_buggy.java
+++ b/tmp/6911e3ee-8add-41e8-b7d4-5abbc5cee0ba_fixed.java
@@ -1,22 +1,40 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, considering only assignments within the same function scope.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
-      // Make sure this assignment is not in a loop.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          break;
-        } else if (block.isLoop) {
+  // Ensure the assignment is within the same function scope and not in a loop
+  BasicBlock assignmentBlock = ref.getBasicBlock();
+  BasicBlock currentFunction = assignmentBlock;
+  while (currentFunction != null && !currentFunction.isFunction) {
+    currentFunction = currentFunction.getParent();
+  }
+
+  for (BasicBlock block = assignmentBlock;
+       block != null && block != currentFunction; 
+       block = block.getParent()) {
+    if (block.isLoop) {
       return false;
     }
   }
 
+  // Check if there are any other assignments within the same function scope
+  for (Reference otherRef : getVariable().getReferences()) {
+    if (otherRef.getType() == Type.ASSIGN && otherRef != ref) {
+      BasicBlock otherBlock = otherRef.getBasicBlock();
+      while (otherBlock != null && !otherBlock.isFunction) {
+        otherBlock = otherBlock.getParent();
+      }
+      if (otherBlock == currentFunction) {
+        return false;
+      }
+    }
+  }
+
   return true;
 }
\ No newline at end of file
