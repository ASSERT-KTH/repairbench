diff --git a/tmp/80b56b7d-df00-44e8-8914-6ae489639d7a_buggy.java b/tmp/a18e7c50-24d0-465c-b828-2c25cd5df365_fixed.java
index 07b0792..9a833db 100644
--- a/tmp/80b56b7d-df00-44e8-8914-6ae489639d7a_buggy.java
+++ b/tmp/a18e7c50-24d0-465c-b828-2c25cd5df365_fixed.java
@@ -1,22 +1,40 @@
 /**
  * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
+ *     lifetime, and that assignment is not in a loop.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
-      // Make sure this assignment is not in a loop.
+  // Make sure this assignment is not in a loop and not in a function that is called recursively.
   for (BasicBlock block = ref.getBasicBlock();
        block != null; block = block.getParent()) {
+    if (block.isLoop) {
+      return false;
+    }
     if (block.isFunction) {
+      // Check if the function is called recursively
+      if (isFunctionCalledRecursively(block.getFunction())) {
+        return false;
+      }
       break;
-        } else if (block.isLoop) {
+    }
+  }
+
+  return true;
+}
+
+private boolean isFunctionCalledRecursively(Function function) {
+  for (Reference ref : function.getReferences()) {
+    if (ref.getNode().getParent().isCall() && 
+        ref.getNode().getParent().getFirstChild() == ref.getNode()) {
+      // Check if the call is within the same function
+      if (ref.getNode().getParent().getClosestFunction() == function) {
+        return true;
+      }
+    }
+  }
   return false;
 }
\ No newline at end of file
-      }
-
-      return true;
-    }
