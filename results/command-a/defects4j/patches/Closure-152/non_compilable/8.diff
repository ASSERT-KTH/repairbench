diff --git a/tmp/43b3b74a-0cfc-46ba-bb20-8d4c74425ba6_buggy.java b/tmp/cb294783-2e53-4dc6-8477-7ced882acdcb_fixed.java
index 58a1651..fea834d 100644
--- a/tmp/43b3b74a-0cfc-46ba-bb20-8d4c74425ba6_buggy.java
+++ b/tmp/cb294783-2e53-4dc6-8477-7ced882acdcb_fixed.java
@@ -1,32 +1,55 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        // Handle UnionType by checking if all alternates are ObjectTypes
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        boolean allObjectTypes = unionType.getAlternates().stream()
+                .allMatch(alt -> alt instanceof ObjectType);
+        if (allObjectTypes) {
+            typeOfThis = (ObjectType) unionType.getLeastSupertype();
+        } else {
+            // If not all alternates are ObjectTypes, report an error
+            t.report(JSError.make(null, 0, 0, 
+                    "UnionType cannot be used as @this type unless all alternates are ObjectTypes", 
+                    null, null));
+            typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+        }
+    } else {
+        // If resolvedTypeOfThis is not an ObjectType or UnionType, report an error
+        t.report(JSError.make(null, 0, 0, 
+                "@this type of a function must be an object", 
+                "Actual type: " + resolvedTypeOfThis.toString(), null));
+        typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
