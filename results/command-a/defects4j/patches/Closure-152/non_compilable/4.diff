diff --git a/tmp/9408fab2-80ef-4ebc-b712-e6533d5dce74_buggy.java b/tmp/39b7673c-6b7f-4807-acdc-09cfaa26da99_fixed.java
index 58a1651..0703942 100644
--- a/tmp/9408fab2-80ef-4ebc-b712-e6533d5dce74_buggy.java
+++ b/tmp/39b7673c-6b7f-4807-acdc-09cfaa26da99_fixed.java
@@ -1,32 +1,53 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Handle UnionType by checking if it contains at least one ObjectType
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      if (unionType.getRestrictedTypes().stream().anyMatch(type -> type instanceof ObjectType)) {
+        // If the union contains an ObjectType, we can proceed
+        typeOfThis = unionType.getRestrictedTypes().stream()
+            .filter(type -> type instanceof ObjectType)
+            .findFirst()
+            .map(type -> (ObjectType) type)
+            .orElse(null);
+      } else {
+        // If the union does not contain an ObjectType, report an error
+        t.report(JSError.make(null, "Union type does not contain an object type", resolvedTypeOfThis.toString()));
+        typeOfThis = null; // or handle appropriately
+      }
+    } else {
+      // If it's neither an ObjectType nor a UnionType, report an error
+      t.report(JSError.make(null, "@this type of a function must be an object", resolvedTypeOfThis.toString()));
+      typeOfThis = null; // or handle appropriately
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
