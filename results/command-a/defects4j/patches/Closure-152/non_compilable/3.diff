diff --git a/tmp/1e7741b1-c04d-4d81-85eb-98730a27b2ec_buggy.java b/tmp/95ccc353-a0c6-4321-b2b1-fc68b6072e10_fixed.java
index 58a1651..ff2922e 100644
--- a/tmp/1e7741b1-c04d-4d81-85eb-98730a27b2ec_buggy.java
+++ b/tmp/95ccc353-a0c6-4321-b2b1-fc68b6072e10_fixed.java
@@ -1,32 +1,52 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        // If the resolved type is a union, check if it contains at least one ObjectType
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        for (JSType alternate : unionType.getAlternates()) {
+            if (alternate instanceof ObjectType) {
+                typeOfThis = (ObjectType) alternate;
+                break;
+            }
+        }
+        // If no ObjectType is found in the union, report an error
+        if (!(typeOfThis instanceof ObjectType)) {
+            t.report(JSError.make(node, TYPE_MISMATCH, "ObjectType", resolvedTypeOfThis.toString()));
+            typeOfThis = getNativeType(OBJECT_TYPE); // Fallback to a default ObjectType
+        }
+    } else {
+        t.report(JSError.make(node, TYPE_MISMATCH, "ObjectType", resolvedTypeOfThis.toString()));
+        typeOfThis = getNativeType(OBJECT_TYPE); // Fallback to a default ObjectType
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
