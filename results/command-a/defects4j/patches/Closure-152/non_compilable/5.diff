diff --git a/tmp/c9dacc84-2568-4143-bc37-9de141e57838_buggy.java b/tmp/22d38bd3-d571-4293-abdf-0c6595ed1dcc_fixed.java
index 58a1651..6cdcffe 100644
--- a/tmp/c9dacc84-2568-4143-bc37-9de141e57838_buggy.java
+++ b/tmp/22d38bd3-d571-4293-abdf-0c6595ed1dcc_fixed.java
@@ -1,32 +1,48 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution and warn if it's not an ObjectType
+    typeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(typeOfThis instanceof ObjectType)) {
+      if (typeOfThis instanceof UnionType) {
+        UnionType unionType = (UnionType) typeOfThis;
+        if (unionType.getRestrictedType() instanceof ObjectType) {
+          typeOfThis = unionType.getRestrictedType();
+        } else {
+          t.report(JSError.make(getSourceFile(), 0, 
+                          CHECK_TYPES_THIS_TYPE_OBJECT, 
+                          typeOfThis.toString()));
+          typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        }
+      } else {
+        t.report(JSError.make(getSourceFile(), 0, 
+                        CHECK_TYPES_THIS_TYPE_OBJECT, 
+                        typeOfThis.toString()));
+        typeOfThis = getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
