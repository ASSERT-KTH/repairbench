diff --git a/tmp/30e3f583-b840-4f61-89b5-ebb2cad54ae4_buggy.java b/tmp/5c64adfc-e1ea-4966-b0f2-65b1e3321206_fixed.java
index 58a1651..7163970 100644
--- a/tmp/30e3f583-b840-4f61-89b5-ebb2cad54ae4_buggy.java
+++ b/tmp/5c64adfc-e1ea-4966-b0f2-65b1e3321206_fixed.java
@@ -1,32 +1,52 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle UnionType for typeOfThis
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      if (unionType.getRestrictedTypes().stream().allMatch(type -> type instanceof ObjectType)) {
+        typeOfThis = (ObjectType) unionType.getLeastSupertype();
+      } else {
+        // If not all types in the union are ObjectTypes, report an error
+        t.report(JSError.make(
+            null, 
+            "Union type for @this annotation must consist only of object types",
+            resolvedTypeOfThis.toString()));
+        typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+      }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // If not an ObjectType or UnionType, report an error
+      t.report(JSError.make(
+          null, 
+          "@this type of a function must be an object",
+          resolvedTypeOfThis.toString()));
+      typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
