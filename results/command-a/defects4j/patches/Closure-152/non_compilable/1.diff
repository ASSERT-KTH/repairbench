diff --git a/tmp/cb90f0a9-9d51-4dc0-8d42-c1c9fadcc63b_buggy.java b/tmp/9cbbdd8d-6b8e-4069-9b81-228d5fa58b48_fixed.java
index 58a1651..e08fcd3 100644
--- a/tmp/cb90f0a9-9d51-4dc0-8d42-c1c9fadcc63b_buggy.java
+++ b/tmp/9cbbdd8d-6b8e-4069-9b81-228d5fa58b48_fixed.java
@@ -1,32 +1,62 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (!(resolvedTypeOfThis instanceof ObjectType)) {
+      if (resolvedTypeOfThis instanceof UnionType) {
+        // If the resolved type is a union, check if any of the alternatives are ObjectTypes.
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        ObjectType objType = null;
+        for (JSType alt : unionType.getAlternates()) {
+          if (alt instanceof ObjectType) {
+            objType = (ObjectType) alt;
+            break;
+          }
+        }
+        if (objType != null) {
+          typeOfThis = objType;
+        } else {
+          // If no ObjectType is found, report an error.
+          t.report(JSError.make(EMPTY_SOURCE, 0, 0,
+                  "Type of @this annotation must be an object type",
+                  resolvedTypeOfThis.toString()));
+          typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+        }
+      } else {
+        // If the resolved type is not a union, report an error directly.
+        t.report(JSError.make(EMPTY_SOURCE, 0, 0,
+                "Type of @this annotation must be an object type",
+                resolvedTypeOfThis.toString()));
+        typeOfThis = getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
+      }
+    } else {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
