diff --git a/tmp/c990117b-c600-4f65-822a-5158fb70d5b0_buggy.java b/tmp/11a2f74c-35b7-46cf-93ee-f89dbb7b9143_fixed.java
index 58a1651..8a39d3f 100644
--- a/tmp/c990117b-c600-4f65-822a-5158fb70d5b0_buggy.java
+++ b/tmp/11a2f74c-35b7-46cf-93ee-f89dbb7b9143_fixed.java
@@ -1,32 +1,53 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        // If the resolved type is a UnionType, check if it contains at least one ObjectType
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        if (unionType.getRestrictedTypes().stream().anyMatch(type -> type instanceof ObjectType)) {
+            // If it does, set typeOfThis to the first ObjectType found
+            typeOfThis = (ObjectType) unionType.getRestrictedTypes().stream()
+                .filter(type -> type instanceof ObjectType)
+                .findFirst()
+                .orElse(null);
+        } else {
+            // If not, report an error and set typeOfThis to null
+            t.report(JSError.make(null, 0, CHECK_TYPES_RESOLVED, 
+                "@this type of a function must be an object\nActual type: " + resolvedTypeOfThis));
+            typeOfThis = null;
+        }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // If the resolved type is not an ObjectType, report an error and set typeOfThis to null
+        t.report(JSError.make(null, 0, CHECK_TYPES_RESOLVED, 
+            "@this type of a function must be an object\nActual type: " + resolvedTypeOfThis));
+        typeOfThis = null;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
