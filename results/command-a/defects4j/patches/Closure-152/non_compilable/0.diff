diff --git a/tmp/9942b1e8-4d71-469a-8e33-42b5ca19e59f_buggy.java b/tmp/7af345a5-0725-4ad9-9d8a-8931e6906cf3_fixed.java
index 58a1651..16e6146 100644
--- a/tmp/9942b1e8-4d71-469a-8e33-42b5ca19e59f_buggy.java
+++ b/tmp/7af345a5-0725-4ad9-9d8a-8931e6906cf3_fixed.java
@@ -1,32 +1,53 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution more robustly
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+        // If it's a union type, check if all alternatives are ObjectTypes
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        boolean allObjectTypes = true;
+        for (JSType alt : unionType.getAlternates()) {
+            if (!(alt instanceof ObjectType)) {
+                allObjectTypes = false;
+                break;
+            }
+        }
+        if (allObjectTypes) {
+            typeOfThis = (ObjectType) resolvedTypeOfThis;
+        } else {
+            // If not all alternatives are ObjectTypes, report an error
+            t.report(JSError.make(null, 0, TYPE_MISMATCH, "Expected an ObjectType, but got a UnionType with non-ObjectType alternatives"));
+            typeOfThis = getNativeObjectType(UNKNOWN_TYPE);
+        }
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+        // If it's not an ObjectType or UnionType, report an error
+        t.report(JSError.make(null, 0, TYPE_MISMATCH, "Expected an ObjectType, but got " + resolvedTypeOfThis.toString()));
+        typeOfThis = getNativeObjectType(UNKNOWN_TYPE);
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
+        ObjectType resolvedIface = (ObjectType) safeResolve(iface, t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
