diff --git a/tmp/0e7a9bbe-1466-4f98-ac06-dcd754c01ec8_buggy.java b/tmp/61589a92-97b8-4766-94d6-7db9ab39f8f2_fixed.java
index 42c5923..0027ad2 100644
--- a/tmp/0e7a9bbe-1466-4f98-ac06-dcd754c01ec8_buggy.java
+++ b/tmp/61589a92-97b8-4766-94d6-7db9ab39f8f2_fixed.java
@@ -1,89 +1,113 @@
     /**
      * Parses a string to produce a {@link Fraction} object.  This method
      * expects the string to be formatted as a proper fraction.
      * <p>
      * Minus signs are only allowed in the whole number part - i.e.,
      * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
      * will result in a <code>ParseException</code>.
      * 
      * @param source the string to parse
      * @param pos input/ouput parsing parameter.
      * @return the parsed {@link Fraction} object.
      */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
+        // Check for minus sign in whole number
+        if (whole.intValue() < 0) {
+            // If whole number is negative, ensure no minus signs in numerator or denominator
+            int startIndex = pos.getIndex();
+            int endIndex = source.length();
+            if (source.indexOf('-', startIndex) != -1) {
+                pos.setIndex(initialIndex);
+                pos.setErrorIndex(startIndex);
+                return null;
+            }
+        }
+
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
+        // Check for minus sign in numerator
+        if (num.intValue() < 0) {
+            // If numerator is negative, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(pos.getErrorIndex());
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Check for minus sign in denominator
+        if (den.intValue() < 0) {
+            // If denominator is negative, invalid expression
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(pos.getErrorIndex());
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
