diff --git a/tmp/1132756b-ee0c-40f1-8a50-8eaf9e4decb9_buggy.java b/tmp/71a33d26-0b29-4de7-b43e-152d4b69240a_fixed.java
index 42c5923..f3fb7d8 100644
--- a/tmp/1132756b-ee0c-40f1-8a50-8eaf9e4decb9_buggy.java
+++ b/tmp/71a33d26-0b29-4de7-b43e-152d4b69240a_fixed.java
@@ -1,89 +1,104 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
         
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
+        // Check for leading minus sign in whole number
+        boolean isWholeNegative = whole.intValue() < 0;
+
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
         
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
-
-        // parse '/'
+        // Check for minus sign in numerator
         int startIndex = pos.getIndex();
+        int numValue = num.intValue();
+        boolean isNumNegative = numValue < 0;
+        if (isNumNegative) {
+            // Check if minus sign is leading
+            if (startIndex - 1 >= 0 && source.charAt(startIndex - 1) != '-') {
+                // invalid minus sign in numerator
+                pos.setIndex(initialIndex);
+                pos.setErrorIndex(startIndex - 1);
+                return null;
+            }
+        }
+
+        // parse '/'
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
-            return new Fraction(num.intValue(), 1);
+            return new Fraction(numValue * MathUtils.sign(isWholeNegative ? -1 : 1), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // Check for minus sign in denominator
+        int denValue = den.intValue();
+        boolean isDenNegative = denValue < 0;
+        if (isDenNegative) {
+            // Check if minus sign is leading
+            int denStartIndex = pos.getIndex();
+            if (denStartIndex - 1 >= 0 && source.charAt(denStartIndex - 1) != '-') {
+                // invalid minus sign in denominator
+                pos.setIndex(initialIndex);
+                pos.setErrorIndex(denStartIndex - 1);
+                return null;
+            }
+        }
 
         int w = whole.intValue();
-        int n = num.intValue();
-        int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+        int n = Math.abs(numValue);
+        int d = Math.abs(denValue);
+        int sign = MathUtils.sign(isWholeNegative ? -1 : 1) * MathUtils.sign(isNumNegative ? -1 : 1) * MathUtils.sign(isDenNegative ? -1 : 1);
+        return new Fraction(((Math.abs(w) * d) + n) * sign, d);
     }
\ No newline at end of file
