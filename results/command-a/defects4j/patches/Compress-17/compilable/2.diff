diff --git a/tmp/36c5ae42-104b-4760-b5ab-95dcd3b47081_buggy.java b/tmp/b7d19b56-cd6d-43d1-a2e1-7286f1bf7bca_fixed.java
index 3b9a3c0..0003209 100644
--- a/tmp/36c5ae42-104b-4760-b5ab-95dcd3b47081_buggy.java
+++ b/tmp/b7d19b56-cd6d-43d1-a2e1-7286f1bf7bca_fixed.java
@@ -1,71 +1,70 @@
 /**
  * Parse an octal string from a buffer.
  *
  * <p>Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.</p>
  *
  * <p>The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).</p>
  *
  * <p>To work-around some tar implementations that insert a
  * leading NUL this method returns 0 if it detects a leading NUL
  * since Commons Compress 1.4.</p>
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
+    // Handle leading NUL case
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+    while (start < end && buffer[start] == ' ') {
         start++;
-            } else {
-                break;
     }
+
+    // Check for empty string after spaces
+    if (start == end) {
+        return 0L;
+    }
+
+    // Ensure trailing NUL or space
+    if (buffer[end - 1] != 0 && buffer[end - 1] != ' ') {
+        throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, end - 1, buffer[end - 1]));
     }
 
-        // Must have trailing NUL or space
-        byte trailer;
-        trailer = buffer[end-1];
-        if (trailer == 0 || trailer == ' '){
+    // Adjust end if trailing character is NUL or space
+    if (buffer[end - 1] == 0 || buffer[end - 1] == ' ') {
         end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
     }
-        // May have additional NULs or spaces
-        trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
+
+    // Handle additional trailing NUL or space
+    if (end > start && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
         end--;
     }
 
     for (; start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+        byte currentByte = buffer[start];
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
 
     return result;
 }
\ No newline at end of file
