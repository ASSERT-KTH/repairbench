diff --git a/tmp/f2acb3c4-4d4c-4ca7-b62f-1959116200c9_buggy.java b/tmp/3309f67c-4671-431c-a092-a5e566ba4c8e_fixed.java
index a9a5e27..a95764a 100644
--- a/tmp/f2acb3c4-4d4c-4ca7-b62f-1959116200c9_buggy.java
+++ b/tmp/3309f67c-4671-431c-a092-a5e566ba4c8e_fixed.java
@@ -1,24 +1,33 @@
     /**
      * Multiply two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
     public static long safeMultiply(long val1, int val2) {
         switch (val2) {
             case -1:
+                if (val1 == Long.MIN_VALUE) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
+        long total = val1 * (long)val2; // Cast val2 to long before multiplication
+        if (total / (long)val2 != val1) { // Cast val2 to long for division
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if ((val2 > 0) && (total < 0L)) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+        if ((val2 < 0) && (total > 0L)) {
             throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
\ No newline at end of file
