diff --git a/tmp/bd66b988-409f-4ba9-9016-e0d05d2c4c1d_buggy.java b/tmp/9ada4b19-0511-4c59-bfc6-728aebfbdad1_fixed.java
index a9a5e27..a3f3af6 100644
--- a/tmp/bd66b988-409f-4ba9-9016-e0d05d2c4c1d_buggy.java
+++ b/tmp/9ada4b19-0511-4c59-bfc6-728aebfbdad1_fixed.java
@@ -1,24 +1,43 @@
 /**
  * Multiply two values throwing an exception if overflow occurs.
  * 
  * @param val1  the first value
  * @param val2  the second value
  * @return the new total
  * @throws ArithmeticException if the value is too big or too small
  * @since 1.2
  */
 public static long safeMultiply(long val1, int val2) {
+    long total;
     switch (val2) {
         case -1:
+            if (val1 == Long.MIN_VALUE) {
+                throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            }
             return -val1;
         case 0:
             return 0L;
         case 1:
             return val1;
     }
-        long total = val1 * val2;
+    if (val1 == 0) {
+        return 0L;
+    }
+
+    // Check for overflow
+    if (val1 > 0) {
+        if (Long.MAX_VALUE / val1 < val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    } else {
+        if (Long.MIN_VALUE / val1 > val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    }
+
+    total = val1 * val2;
     if (total / val2 != val1) {
         throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
     }
     return total;
 }
\ No newline at end of file
