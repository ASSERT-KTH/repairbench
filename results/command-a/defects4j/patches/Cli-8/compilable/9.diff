diff --git a/tmp/6d8a38bc-a20c-4696-9f15-4071d699de26_buggy.java b/tmp/8535441e-e2b0-4fee-9053-33862c95da6f_fixed.java
index 8e93a5e..9fd916f 100644
--- a/tmp/6d8a38bc-a20c-4696-9f15-4071d699de26_buggy.java
+++ b/tmp/8535441e-e2b0-4fee-9053-33862c95da6f_fixed.java
@@ -1,43 +1,42 @@
 /**
  * <p>Render the specified text and return the rendered Options
  * in a StringBuffer.</p>
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
+    // characters, but only if there's enough room
+    final String padding = nextLineTabStop > width ? "" : createPadding(nextLineTabStop);
 
-        while (true)
-        {
     text = padding + text.substring(pos).trim();
     pos = findWrapPos(text, width, nextLineTabStop);
 
-            if (pos == -1)
+    while (pos != -1)
     {
+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = padding + text.substring(pos).trim();
+        pos = findWrapPos(text, width, nextLineTabStop);
+    }
+
     sb.append(text);
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
