diff --git a/tmp/0b55c99b-ca2b-4fb4-a6a8-3f3972b859ca_buggy.java b/tmp/3447f9c5-c4af-44ff-ab10-2574de525588_fixed.java
index e8705ac..3856cb6 100644
--- a/tmp/0b55c99b-ca2b-4fb4-a6a8-3f3972b859ca_buggy.java
+++ b/tmp/3447f9c5-c4af-44ff-ab10-2574de525588_fixed.java
@@ -1,24 +1,26 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
-      // ignore cast nodes.
-
-      if (!NodeUtil.isGet(first)) {
+      if (first.isGetProp() || first.isGetElem()) {
+        // If the call is a property access (e.g., obj.prop() or obj['prop']()),
+        // it is not a free call.
+        n.putBooleanProp(Node.FREE_CALL, false);
+      } else {
+        // Otherwise, it's a free call.
         n.putBooleanProp(Node.FREE_CALL, true);
       }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
+      if (first.isName() && "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
