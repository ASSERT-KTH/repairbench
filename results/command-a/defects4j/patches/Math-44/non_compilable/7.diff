diff --git a/tmp/4224c003-13b5-4308-9b2f-5dfb44bd6014_buggy.java b/tmp/30f6c9a5-0c03-4ad2-8bb1-a0de783e9ede_fixed.java
index 2c4ed06..2238c10 100644
--- a/tmp/4224c003-13b5-4308-9b2f-5dfb44bd6014_buggy.java
+++ b/tmp/30f6c9a5-0c03-4ad2-8bb1-a0de783e9ede_fixed.java
@@ -1,111 +1,145 @@
 /** Accept a step, triggering events and step handlers.
  * @param interpolator step interpolator
  * @param y state vector at step end time, must be reset if an event
  * asks for resetting or if an events stops integration during the step
  * @param yDot placeholder array where to put the time derivative of the state vector
  * @param tEnd final integration time
  * @return time at end of step
  * @exception MathIllegalStateException if the value of one event state cannot be evaluated
  * @since 2.2
  */
 protected double acceptStep(final AbstractStepInterpolator interpolator,
                             final double[] y, final double[] yDot, final double tEnd)
     throws MathIllegalStateException {
 
     double previousT = interpolator.getGlobalPreviousTime();
-            final double currentT = interpolator.getGlobalCurrentTime();
+    double currentT = interpolator.getGlobalCurrentTime();
     resetOccurred = false;
 
     // initialize the events states if needed
     if (! statesInitialized) {
         for (EventState state : eventsStates) {
             state.reinitializeBegin(interpolator);
         }
         statesInitialized = true;
     }
 
     // search for next events that may occur during the step
     final int orderingSign = interpolator.isForward() ? +1 : -1;
     SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
 
         /** {@inheritDoc} */
         public int compare(EventState es0, EventState es1) {
-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
+            double t0 = es0.getEventTime();
+            double t1 = es1.getEventTime();
+            if (t0 == t1) {
+                // two events occur at the same time, we need to keep them
+                // ordered in such a way that iteration over the set always
+                // return first the one coming from the event handler having
+                // the smallest index (i.e. the one having been added first)
+                return orderingSign * Double.compare(getIndex(es0), getIndex(es1));
+            } else {
+                return orderingSign * Double.compare(t0, t1);
+            }
+        }
+
+        /** Get the index of an event state.
+         * @param es event state
+         * @return index of the underlying event handler
+         */
+        private int getIndex(EventState es) {
+            for (int index = 0; index < eventsStates.size(); ++index) {
+                if (eventsStates.get(index) == es) {
+                    return index;
+                }
+            }
+            return Integer.MAX_VALUE;
         }
 
     });
 
     for (final EventState state : eventsStates) {
         if (state.evaluateStep(interpolator)) {
             // the event occurs during the current step
             occuringEvents.add(state);
         }
     }
 
     while (!occuringEvents.isEmpty()) {
 
         // handle the chronologically first event
         final Iterator<EventState> iterator = occuringEvents.iterator();
         final EventState currentEvent = iterator.next();
         iterator.remove();
 
         // restrict the interpolator to the first part of the step, up to the event
         final double eventT = currentEvent.getEventTime();
+        if (eventT <= previousT) {
+            // this should not happen, we get too close to previous event
+            throw new MathIllegalStateException(interpolator.getFilteredTime(),
+                                                LocalizedFormats.BACKWARD_INTEGRATION);
+        }
         interpolator.setSoftPreviousTime(previousT);
         interpolator.setSoftCurrentTime(eventT);
 
         // trigger the event
         interpolator.setInterpolatedTime(eventT);
         final double[] eventY = interpolator.getInterpolatedState();
         currentEvent.stepAccepted(eventT, eventY);
         isLastStep = currentEvent.stop();
 
         // handle the first part of the step, up to the event
         for (final StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, isLastStep);
         }
 
         if (isLastStep) {
             // the event asked to stop integration
             System.arraycopy(eventY, 0, y, 0, y.length);
             return eventT;
         }
 
         if (currentEvent.reset(eventT, eventY)) {
             // some event handler has triggered changes that
             // invalidate the derivatives, we need to recompute them
             System.arraycopy(eventY, 0, y, 0, y.length);
             computeDerivatives(eventT, y, yDot);
             resetOccurred = true;
             return eventT;
         }
 
         // prepare handling of the remaining part of the step
         previousT = eventT;
+        currentT  = interpolator.getGlobalCurrentTime();
         interpolator.setSoftPreviousTime(eventT);
         interpolator.setSoftCurrentTime(currentT);
 
-                // check if the same event occurs again in the remaining part of the step
-                if (currentEvent.evaluateStep(interpolator)) {
+        // check if some switch has occurred
+        boolean forward = interpolator.isForward();
+        for (final EventState state : eventsStates) {
+            boolean reused = state.reinitialize(interpolator, forward);
+            while (reused && state.evaluateStep(interpolator)) {
                 // the event occurs during the current step
-                    occuringEvents.add(currentEvent);
+                occuringEvents.add(state);
+                reused = state.reinitialize(interpolator, forward);
+            }
         }
 
     }
 
     interpolator.setInterpolatedTime(currentT);
     final double[] currentY = interpolator.getInterpolatedState();
     for (final EventState state : eventsStates) {
         state.stepAccepted(currentT, currentY);
         isLastStep = isLastStep || state.stop();
     }
     isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
 
     // handle the remaining part of the step, after all events if any
     for (StepHandler handler : stepHandlers) {
         handler.handleStep(interpolator, isLastStep);
     }
 
     return currentT;
 
 }
\ No newline at end of file
