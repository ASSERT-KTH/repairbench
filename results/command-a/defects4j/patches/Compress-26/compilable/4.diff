diff --git a/tmp/fceff232-0cfd-4247-9d24-9d1c132d48d0_buggy.java b/tmp/8730dc70-b23b-4fa4-bb43-0c0c2da153d4_fixed.java
index 4b163f6..0041931 100644
--- a/tmp/fceff232-0cfd-4247-9d24-9d1c132d48d0_buggy.java
+++ b/tmp/8730dc70-b23b-4fa4-bb43-0c0c2da153d4_fixed.java
@@ -1,28 +1,36 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
+    long totalSkipped = 0;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+        if (skipped > 0) {
+            totalSkipped += skipped;
             numToSkip -= skipped;
+        } else {
+            // Fallback to read if skip returns 0
+            int read = input.read();
+            if (read == -1) {
+                // End of stream reached
+                break;
             }
-            
-        return available - numToSkip;
+            totalSkipped++;
+            numToSkip--;
+        }
+    }
+    return totalSkipped;
 }
\ No newline at end of file
