diff --git a/tmp/3a7c0cda-0453-44c2-b70f-b4259ea4d94b_buggy.java b/tmp/2a1344c7-a34b-45c3-a94b-16e829972504_fixed.java
index 4b163f6..9a1504a 100644
--- a/tmp/3a7c0cda-0453-44c2-b70f-b4259ea4d94b_buggy.java
+++ b/tmp/2a1344c7-a34b-45c3-a94b-16e829972504_fixed.java
@@ -1,28 +1,35 @@
 /**
  * Skips the given number of bytes by repeatedly invoking skip on
  * the given input stream if necessary.
  *
  * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
+ * the requested number of bytes has been skipped, this implementation
  * will fall back to using the read() method.</p>
  *
  * <p>This method will only skip less than the requested number of
  * bytes if the end of the input stream has been reached.</p>
  *
  * @param input stream to skip bytes in
  * @param numToSkip the number of bytes to skip
  * @return the number of bytes actually skipped
  * @throws IOException
  */
 public static long skip(InputStream input, long numToSkip) throws IOException {
     long available = numToSkip;
     while (numToSkip > 0) {
         long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
-                break;
-            }
+        if (skipped > 0) {
             numToSkip -= skipped;
+        } else {
+            // Fallback to read if skip returns 0
+            int read = input.read();
+            if (read == -1) {
+                // End of stream reached
+                break;
+            }
+            numToSkip--;
+        }
     }
     
     return available - numToSkip;
 }
\ No newline at end of file
