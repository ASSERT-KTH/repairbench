diff --git a/tmp/a54eb14b-798b-4ff3-9144-0d5a964d1931_buggy.java b/tmp/019abc00-d305-4cb8-b294-d02c18303135_fixed.java
index efa499e..e92421e 100644
--- a/tmp/a54eb14b-798b-4ff3-9144-0d5a964d1931_buggy.java
+++ b/tmp/019abc00-d305-4cb8-b294-d02c18303135_fixed.java
@@ -1,35 +1,30 @@
-    /**
-     * Get the current solution.
-     *
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
     Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
-      Set<Integer> basicRows = new HashSet<Integer>();
+    Set<Integer> basicRows = new HashSet<>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
-          if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+        if (basicRow == null) {
+            coefficients[i] = 0;
+        } else if (basicRows.contains(basicRow)) {
+            // If multiple variables can take a given value, we choose the first and set the rest equal to 0
+            coefficients[i] = 0;
         } else {
             basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+            // Ensure non-negativity if required
+            if (restrictToNonNegative && coefficients[i] < 0) {
+                coefficients[i] = 0;
+            }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
