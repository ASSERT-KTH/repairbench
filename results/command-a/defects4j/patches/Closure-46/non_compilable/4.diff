diff --git a/tmp/2e732d0e-860b-45c4-b35f-ba8c6c80ba73_buggy.java b/tmp/8e548410-99d5-423d-8bb1-e71616fe885e_fixed.java
index 46817a7..0831e62 100644
--- a/tmp/2e732d0e-860b-45c4-b35f-ba8c6c80ba73_buggy.java
+++ b/tmp/8e548410-99d5-423d-8bb1-e71616fe885e_fixed.java
@@ -1,16 +1,28 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+    for (String property : allProperties) {
+        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+            JSType thisType = getPropertyType(property);
+            JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+            if (thisType.isEquivalentTo(thatType)) {
+                builder.addProperty(property, thisType, getPropertyNode(property));
+            } else {
+                builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
             }
+        } else if (properties.containsKey(property)) {
+            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+        } else if (that.toMaybeRecordType().hasProperty(property)) {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));
+        }
+    }
+    if (builder.getProperties().isEmpty()) {
+        return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
     }
     return builder.build();
 }
\ No newline at end of file
