diff --git a/tmp/3b791a12-5985-42cc-90df-10a16461a3be_buggy.java b/tmp/2b20091b-8042-4e5f-a6c4-0aa5212990af_fixed.java
index 46817a7..c34fbb7 100644
--- a/tmp/3b791a12-5985-42cc-90df-10a16461a3be_buggy.java
+++ b/tmp/2b20091b-8042-4e5f-a6c4-0aa5212990af_fixed.java
@@ -1,16 +1,33 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+        if (thatRecord.hasProperty(property)) {
+            JSType thisPropertyType = getPropertyType(property);
+            JSType thatPropertyType = thatRecord.getPropertyType(property);
+            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+                builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+            } else {
+                // If property types are not equivalent, the least supertype will not have this property
+                // unless it's present in both records with equivalent types, which we already checked.
+                // Therefore, we skip adding this property to the builder.
             }
         }
-    return builder.build();
+    }
+    // Add properties from 'that' which are not in 'this'
+    for (String property : thatRecord.getProperties().keySet()) {
+        if (!properties.containsKey(property)) {
+            builder.addProperty(property, thatRecord.getPropertyType(property), thatRecord.getPropertyNode(property));
+        }
+    }
+    JSType result = builder.build();
+    if (result.getProperties().isEmpty()) {
+        // If no common properties, return the union of both record types
+        return registry.createUnionType(this, that);
+    }
+    return result;
 }
\ No newline at end of file
