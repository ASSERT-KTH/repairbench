diff --git a/tmp/3b5cdc01-14cf-49d5-a625-762f84240b8f_buggy.java b/tmp/c7c2e35a-33e3-480f-a64e-25f2a9ca35b5_fixed.java
index 46817a7..53386b2 100644
--- a/tmp/3b5cdc01-14cf-49d5-a625-762f84240b8f_buggy.java
+++ b/tmp/c7c2e35a-33e3-480f-a64e-25f2a9ca35b5_fixed.java
@@ -1,16 +1,30 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+      if (thatRecord.hasProperty(property)) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = thatRecord.getPropertyType(property);
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+        } else {
+          builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
         }
+      } else {
+        builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
+    for (String property : thatRecord.getPropertyNames()) {
+      if (!properties.containsKey(property)) {
+        builder.addProperty(property, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
+    if (builder.getPropertyCount() == 0) {
+      return registry.getNativeType(JSTypeNative.VOID_TYPE);
     }
     return builder.build();
   }
\ No newline at end of file
