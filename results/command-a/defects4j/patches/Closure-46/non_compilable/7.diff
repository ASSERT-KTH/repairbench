diff --git a/tmp/f930ec84-6e80-4452-b692-a69da9398af3_buggy.java b/tmp/8994c331-0918-41d5-9694-f5113d2138b0_fixed.java
index 46817a7..72f198d 100644
--- a/tmp/f930ec84-6e80-4452-b692-a69da9398af3_buggy.java
+++ b/tmp/8994c331-0918-41d5-9694-f5113d2138b0_fixed.java
@@ -1,16 +1,23 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().properties.keySet());
+    for (String property : allProperties) {
+      if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+        JSType commonType = properties.get(property).getLeastSupertype(that.toMaybeRecordType().getPropertyType(property));
+        if (commonType != null) {
+          builder.addProperty(property, commonType, getPropertyNode(property));
         }
+      } else if (properties.containsKey(property)) {
+        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+      } else if (that.toMaybeRecordType().hasProperty(property)) {
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));
       }
-    return builder.build();
+    }
+    JSType result = builder.build();
+    return result.getLeastSupertype(that); // Ensure the result is the least supertype with the original 'that' type
 }
\ No newline at end of file
