diff --git a/tmp/6d307d53-add5-471a-9909-1ad149eadd6b_buggy.java b/tmp/aa568f16-f1bb-46be-93ba-3374fde31006_fixed.java
index 46817a7..b72f9e2 100644
--- a/tmp/6d307d53-add5-471a-9909-1ad149eadd6b_buggy.java
+++ b/tmp/aa568f16-f1bb-46be-93ba-3374fde31006_fixed.java
@@ -1,16 +1,21 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+    for (String property : allProperties) {
+        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+            JSType commonType = properties.get(property).getGreatestSubtype(that.toMaybeRecordType().getPropertyType(property));
+            if (commonType != null) {
+                builder.addProperty(property, commonType, getPropertyNode(property));
             }
         }
+    }
+    if (builder.getProperties().isEmpty()) {
+        return registry.getNativeType(JSTypeNative.OBJECT_TYPE);
+    }
     return builder.build();
 }
\ No newline at end of file
