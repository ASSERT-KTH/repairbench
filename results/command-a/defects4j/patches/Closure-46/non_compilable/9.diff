diff --git a/tmp/670e0d80-f351-4319-b5db-38eac7e8ed76_buggy.java b/tmp/1cc3ce0b-e02a-403c-b9c5-ca480a4a9a4f_fixed.java
index 46817a7..cc95e78 100644
--- a/tmp/670e0d80-f351-4319-b5db-38eac7e8ed76_buggy.java
+++ b/tmp/1cc3ce0b-e02a-403c-b9c5-ca480a4a9a4f_fixed.java
@@ -1,16 +1,39 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    RecordType thatRecord = that.toMaybeRecordType();
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
+      if (thatRecord.hasProperty(property)) {
+        JSType thisPropertyType = getPropertyType(property);
+        JSType thatPropertyType = thatRecord.getPropertyType(property);
+        if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+          builder.addProperty(property, thisPropertyType,
               getPropertyNode(property));
+        } else {
+          // If property types are not equivalent, the least supertype for this property
+          // is the least supertype of the two property types.
+          builder.addProperty(property, 
+              thisPropertyType.getLeastSupertype(thatPropertyType),
+              getPropertyNode(property));
+        }
+      }
+    }
+    for (String property : thatRecord.getProperties().keySet()) {
+      if (!properties.containsKey(property)) {
+        // Add properties from 'that' that are not in 'this' as optional properties
+        // with their respective types, as they contribute to the least supertype.
+        builder.addProperty(property, thatRecord.getPropertyType(property),
+            thatRecord.getPropertyNode(property));
+      }
     }
+    JSType result = builder.build();
+    // If the resulting record type is not more specific than either input,
+    // the least supertype should be the union of the two record types.
+    if (!result.isSubtypeOf(this) || !result.isSubtypeOf(that)) {
+      return registry.createUnionType(this, that);
     }
-    return builder.build();
+    return result;
   }
\ No newline at end of file
