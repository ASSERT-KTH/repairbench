diff --git a/tmp/53c609e5-8b92-4d9c-865d-82a38d0f7804_buggy.java b/tmp/432f6320-909a-4e69-9abf-99542fbd7a7f_fixed.java
index 46817a7..16efb27 100644
--- a/tmp/53c609e5-8b92-4d9c-865d-82a38d0f7804_buggy.java
+++ b/tmp/432f6320-909a-4e69-9abf-99542fbd7a7f_fixed.java
@@ -1,16 +1,37 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  
+  RecordType otherRecord = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+  
+  // Add properties common to both records with equivalent types
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (otherRecord.hasProperty(property) &&
+        otherRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
     }
   }
+  
+  // Add unique properties from both records
+  for (String property : properties.keySet()) {
+    if (!otherRecord.hasProperty(property)) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+    }
+  }
+  
+  for (String property : otherRecord.getProperties().keySet()) {
+    if (!properties.containsKey(property)) {
+      builder.addProperty(property, otherRecord.getPropertyType(property), otherRecord.getPropertyNode(property));
+    }
+  }
+  
+  // If no common properties, return union of both records
+  if (builder.getProperties().isEmpty()) {
+    return registry.createUnionType(this, that);
+  }
+  
   return builder.build();
 }
\ No newline at end of file
