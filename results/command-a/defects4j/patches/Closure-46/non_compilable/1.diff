diff --git a/tmp/adcefffd-c68f-4dab-9ece-4491ef2b1236_buggy.java b/tmp/4d70b105-f669-4d57-b6cc-a447e3bd9d6f_fixed.java
index 46817a7..e45c2af 100644
--- a/tmp/adcefffd-c68f-4dab-9ece-4491ef2b1236_buggy.java
+++ b/tmp/4d70b105-f669-4d57-b6cc-a447e3bd9d6f_fixed.java
@@ -1,16 +1,25 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+    for (String property : allProperties) {
+        if (properties.containsKey(property) && that.toMaybeRecordType().hasProperty(property)) {
+            JSType thisPropertyType = getPropertyType(property);
+            JSType thatPropertyType = that.toMaybeRecordType().getPropertyType(property);
+            if (thisPropertyType.isEquivalentTo(thatPropertyType)) {
+                builder.addProperty(property, thisPropertyType, getPropertyNode(property));
+            } else {
+                builder.addProperty(property, registry.getLeastSupertype(thisPropertyType, thatPropertyType), getPropertyNode(property));
+            }
+        } else if (properties.containsKey(property)) {
+            builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+        } else {
+            builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property), that.toMaybeRecordType().getPropertyNode(property));
         }
     }
     return builder.build();
 }
\ No newline at end of file
