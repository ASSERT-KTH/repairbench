diff --git a/tmp/0e99c263-a034-4699-822c-c29bed3f3927_buggy.java b/tmp/055f31a9-4dee-4ad7-9521-26919c83865e_fixed.java
index 227a4ef..cebbcb1 100644
--- a/tmp/0e99c263-a034-4699-822c-c29bed3f3927_buggy.java
+++ b/tmp/055f31a9-4dee-4ad7-9521-26919c83865e_fixed.java
@@ -1,48 +1,39 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+                                         int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
+    // Handle the first line separately to avoid leading whitespace
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+    // Use a StringBuilder to efficiently build the padded text
+    StringBuilder paddedText = new StringBuilder(padding);
+    paddedText.append(text.substring(pos).trim());
+
+    // Ensure that the remaining text is wrapped correctly
+    while (true) {
+        text = paddedText.toString();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
-                sb.append(text);
-
+        if (pos == -1) {
+            sb.append(rtrim(text));
             return sb;
-            } else
-            if (pos == lastPos)
-            {
+        }
+
+        // Check if the wrap position is at the beginning, indicating no progress
+        if (pos <= padding.length()) {
             throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        paddedText.replace(0, pos, padding);
+        paddedText.delete(padding.length(), paddedText.length()).append(text.substring(pos).trim());
     }
 }
\ No newline at end of file
