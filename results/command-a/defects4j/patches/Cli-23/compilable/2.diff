diff --git a/tmp/da54e775-e06d-42a1-ac47-cecd94801f11_buggy.java b/tmp/72d5c51a-ac1b-41eb-9224-9a28dbda30a5_fixed.java
index 227a4ef..a9b542a 100644
--- a/tmp/da54e775-e06d-42a1-ac47-cecd94801f11_buggy.java
+++ b/tmp/72d5c51a-ac1b-41eb-9224-9a28dbda30a5_fixed.java
@@ -1,48 +1,49 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            int lastPos = pos;
-            text = padding + text.substring(pos).trim();
+            text = text.substring(pos).trim();
+            if (text.length() == 0) {
+                break;
+            }
+            pos = findWrapPos(padding + text, width, 0);
+
+            if (pos == -1)
+            {
+                sb.append(padding).append(text);
+
+                return sb;
+            }
+            if (pos <= nextLineTabStop) {
                 pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
+                if (pos == -1) {
+                    sb.append(padding).append(text);
                     return sb;
-            } else
-            if (pos == lastPos)
-            {
+                }
+                if (pos == 0) {
                     throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
                 }
+            }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            sb.append(padding).append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            if (pos >= text.length()) {
+                break;
             }
         }
+        return sb;
+    }
\ No newline at end of file
