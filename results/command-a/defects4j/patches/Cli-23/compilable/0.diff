diff --git a/tmp/b290c3b6-ee09-4a6e-b00a-2210b9590fc0_buggy.java b/tmp/85fdfcea-1145-468e-ab2b-a270134f6e52_fixed.java
index 227a4ef..e80cd21 100644
--- a/tmp/b290c3b6-ee09-4a6e-b00a-2210b9590fc0_buggy.java
+++ b/tmp/85fdfcea-1145-468e-ab2b-a270134f6e52_fixed.java
@@ -1,48 +1,60 @@
 /**
      * Render the specified text and return the rendered Options
      * in a StringBuffer.
      *
      * @param sb The StringBuffer to place the rendered text into.
      * @param width The number of characters to display per line
      * @param nextLineTabStop The position on the next line for the first tab.
      * @param text The text to be rendered.
      *
      * @return the StringBuffer with the rendered Options contents.
      */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
+        if (width <= 0) {
+            throw new IllegalArgumentException("width must be greater than 0");
+        }
+        
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             int lastPos = pos;
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+            String textPart = text.substring(pos).trim();
             
-            if (pos == -1)
-            {
-                sb.append(text);
+            // If the remaining text is longer than the allowed width, we need to wrap it
+            if (textPart.length() > width) {
+                pos = findWrapPos(textPart, width, 0);
+                if (pos == -1) {
+                    pos = width; // wrap at the width if no better position is found
+                }
+            } else {
+                pos = textPart.length();
+            }
+            
+            sb.append(padding).append(rtrim(textPart.substring(0, pos))).append(defaultNewLine);
+
+            // Check if we have processed all text
+            if (pos == textPart.length()) {
+                break;
+            }
+
+            // Update the remaining text
+            text = padding + textPart.substring(pos).trim();
+        }
 
         return sb;
-            } else
-            if (pos == lastPos)
-            {
-                throw new RuntimeException("Text too long for line - throwing exception to avoid infinite loop [CLI-162]: " + text);
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
     }
\ No newline at end of file
