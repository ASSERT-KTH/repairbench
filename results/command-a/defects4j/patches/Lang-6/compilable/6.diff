diff --git a/tmp/8f9a3e59-b7a9-49b4-8a80-3689da17e23b_buggy.java b/tmp/f684dfb7-7a76-4989-855b-61ab97d65493_fixed.java
index 4c1ed27..d31d162 100644
--- a/tmp/8f9a3e59-b7a9-49b4-8a80-3689da17e23b_buggy.java
+++ b/tmp/f684dfb7-7a76-4989-855b-61ab97d65493_fixed.java
@@ -1,32 +1,44 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
-            int consumed = translate(input, pos, out);
+        int consumed = 0;
+        try {
+            consumed = translate(input, pos, out);
+        } catch (StringIndexOutOfBoundsException e) {
+            // Handle the case where the input is a surrogate pair at the end of the string
+            if (pos < len - 1 && Character.isHighSurrogate(input.charAt(pos)) && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                char[] c = new char[] {input.charAt(pos), input.charAt(pos + 1)};
+                out.write(c);
+                pos += 2;
+                continue;
+            } else {
+                throw e;
+            }
+        }
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            int codePoint = Character.codePointAt(input, pos);
+            char[] c = Character.toChars(codePoint);
             out.write(c);
-                pos+= c.length;
+            pos += Character.charCount(codePoint);
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
+        // contract with translators is that they have to understand codepoints 
+        // and they just took care of a surrogate pair
+        pos += consumed;
     }
 }
\ No newline at end of file
