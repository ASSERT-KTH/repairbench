diff --git a/tmp/ded68be3-7057-4ad9-a307-c72137532ff0_buggy.java b/tmp/1172c509-7ce9-4688-a8c7-a7752818a1fa_fixed.java
index cfdcd9c..90ce2bd 100644
--- a/tmp/ded68be3-7057-4ad9-a307-c72137532ff0_buggy.java
+++ b/tmp/1172c509-7ce9-4688-a8c7-a7752818a1fa_fixed.java
@@ -1,51 +1,54 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
     if (isAssignmentTarget(n)) {
       return n;
     }
 
     if (!right.isNumber()) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
+    if (intIndex != index || intIndex < 0) {
       if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
-      return n;
-    }
-
-    if (intIndex < 0) {
+      } else {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      }
       return n;
     }
 
     Node current = left.getFirstChild();
     Node elem = null;
-    for (int i = 0; current != null && i < intIndex; i++) {
+    int count = 0;
+    while (current != null && count <= intIndex) {
+      if (count == intIndex) {
         elem = current;
-
+        break;
+      }
       current = current.getNext();
+      count++;
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.isEmpty()) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
\ No newline at end of file
