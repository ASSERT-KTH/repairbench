diff --git a/tmp/deb3e538-68ab-4226-a97e-5b776bc37527_buggy.java b/tmp/41cf6a12-2dcc-4d12-b8ef-892a9c30d609_fixed.java
index 3127f85..9c8913f 100644
--- a/tmp/deb3e538-68ab-4226-a97e-5b776bc37527_buggy.java
+++ b/tmp/41cf6a12-2dcc-4d12-b8ef-892a9c30d609_fixed.java
@@ -1,24 +1,26 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x} is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
      */
-    public double cumulativeProbability(double x) throws MathException {
+    public double cumulativeProbability(double x) {
         final double dev = x - mean;
+        if (Double.isInfinite(dev / (standardDeviation * FastMath.sqrt(2.0)))) {
+            return dev > 0 ? 1 : 0;
+        }
         try {
             return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 40 * standardDeviation)) {
                 return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
+            } else if (x > (mean + 40 * standardDeviation)) {
                 return 1;
             } else {
-                throw ex;
+                throw new MathException(ex);
             }
         }
     }
\ No newline at end of file
