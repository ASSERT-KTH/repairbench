diff --git a/tmp/e88bdd76-ed6e-4b38-9b0a-80801de316dc_buggy.java b/tmp/ce90f5ad-ab71-4aaf-907f-ca10cfc42381_fixed.java
index 4d0be80..fcb3b1c 100644
--- a/tmp/e88bdd76-ed6e-4b38-9b0a-80801de316dc_buggy.java
+++ b/tmp/ce90f5ad-ab71-4aaf-907f-ca10cfc42381_fixed.java
@@ -1,10 +1,19 @@
 @Override
 Node processForInLoop(ForInLoop loopNode) {
+    if (loopNode.isForEach()) {
+        reportUnsupportedLanguageExtension(loopNode, "for each");
+        // Return a valid AST structure for 'for each' loop, typically by converting it to a standard 'for...in' loop.
+        // However, since 'for each' is not supported, we need to ensure the AST is valid.
+        // Here, we simulate a standard 'for...in' loop structure as a fallback.
+        return newNode(
+            Token.FOR,
+            newNode(Token.IN, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject())),
+            transformBlock(loopNode.getBody()));
+    }
 
-        // Return the bare minimum to put the AST in a valid state.
+    // Standard 'for...in' loop processing
     return newNode(
         Token.FOR,
-          transform(loopNode.getIterator()),
-          transform(loopNode.getIteratedObject()),
+        newNode(Token.IN, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject())),
         transformBlock(loopNode.getBody()));
 }
\ No newline at end of file
