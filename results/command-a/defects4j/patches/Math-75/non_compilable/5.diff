diff --git a/tmp/4c3ba280-d2ac-4477-baae-d7edd068f807_buggy.java b/tmp/74655499-1582-430e-bf82-5f1d6f9c7008_fixed.java
index 877a1a1..5fdfe3e 100644
--- a/tmp/4c3ba280-d2ac-4477-baae-d7edd068f807_buggy.java
+++ b/tmp/74655499-1582-430e-bf82-5f1d6f9c7008_fixed.java
@@ -1,14 +1,123 @@
 /**
   * Returns the percentage of values that are equal to v
  * (as a proportion between 0 and 1).
  * <p>
  * Returns <code>Double.NaN</code> if no values have been added.</p>
  *
  * @param v the value to lookup
  * @return the proportion of values equal to v
  * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
  */
 @Deprecated
 public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+    if (v == null) {
+        throw new NullPointerException("Input value cannot be null");
+    }
+    return getCumPct((Comparable<? super Object>) v) - 
+           getCumPct(findPreviousValue((Comparable<? super Object>) v));
+}
+
+private Comparable<? super Object> findPreviousValue(Comparable<? super Object> v) {
+    // Assuming the frequency map is sorted, find the previous value
+    // This is a placeholder for the actual implementation
+    // You should replace this with the correct logic to find the previous value
+    return null;
+}
+
+// Alternatively, if you want to keep the original logic and just fix the issue:
+/**
+  * Returns the percentage of values that are equal to v
+ * (as a proportion between 0 and 1).
+ * <p>
+ * Returns <code>Double.NaN</code> if no values have been added.</p>
+ *
+ * @param v the value to lookup
+ * @return the proportion of values equal to v
+ * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
+ */
+@Deprecated
+public double getPct(Object v) {
+    if (v == null) {
+        throw new NullPointerException("Input value cannot be null");
+    }
+    return getPct((Comparable<? super Object>) v);
+}
+
+// And then ensure that getPct(Comparable) is correctly implemented:
+public double getPct(Comparable<?> v) {
+    // Correct implementation of getPct
+    // This should return the proportion of values equal to v
+    // You should replace this with the correct logic
+    return getCumPct(v) - getCumPct(findPreviousValue(v));
+}
+
+// However, based on the test failure, the most straightforward fix is:
+/**
+  * Returns the percentage of values that are equal to v
+ * (as a proportion between 0 and 1).
+ * <p>
+ * Returns <code>Double.NaN</code> if no values have been added.</p>
+ *
+ * @param v the value to lookup
+ * @return the proportion of values equal to v
+ * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
+ */
+@Deprecated
+public double getPct(Object v) {
+    if (v == null) {
+        throw new NullPointerException("Input value cannot be null");
+    }
+    return getPct((Comparable<?>) v);
+}
+
+// Assuming getPct(Comparable) is already correctly implemented.
+
+// The correct fix is actually:
+/**
+  * Returns the percentage of values that are equal to v
+ * (as a proportion between 0 and 1).
+ * <p>
+ * Returns <code>Double.NaN</code> if no values have been added.</p>
+ *
+ * @param v the value to lookup
+ * @return the proportion of values equal to v
+ * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
+ */
+@Deprecated
+public double getPct(Object v) {
+    if (v == null) {
+        throw new NullPointerException("Input value cannot be null");
+    }
+    return getCumPct((Comparable<? super Object>) v) - getCumPct(findPreviousValue((Comparable<? super Object>) v));
+    
+    // However, the actual fix should be to ensure that getCumPct is not used for this calculation
+    // Instead, calculate the frequency of the value and divide by the total frequency
+    double totalFreq = getSumFreq();
+    if (totalFreq == 0) {
+        return Double.NaN;
+    }
+    return getCount(v) / totalFreq;
+}
+
+// The correct and simplest fix is:
+/**
+  * Returns the percentage of values that are equal to v
+ * (as a proportion between 0 and 1).
+ * <p>
+ * Returns <code>Double.NaN</code> if no values have been added.</p>
+ *
+ * @param v the value to lookup
+ * @return the proportion of values equal to v
+ * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
+ */
+@Deprecated
+public double getPct(Object v) {
+    if (v == null) {
+        throw new NullPointerException("Input value cannot be null");
+    }
+    double totalFreq = getSumFreq();
+    if (totalFreq == 0) {
+        return Double.NaN;
+    }
+    return getCount(v) / totalFreq;
 }
\ No newline at end of file
