diff --git a/tmp/59506741-bc59-48e9-b182-36e898af7759_buggy.java b/tmp/b2166042-11ca-4c6a-aeff-3c24f3706d80_fixed.java
index 08a41cf..9e17578 100644
--- a/tmp/59506741-bc59-48e9-b182-36e898af7759_buggy.java
+++ b/tmp/b2166042-11ca-4c6a-aeff-3c24f3706d80_fixed.java
@@ -1,12 +1,44 @@
     /**
      * Overloaded version of {@link #readValue(InputStream)}.
      */
     public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)
         throws IOException, JsonProcessingException
     {
         if (_dataFormatReaders != null) {
             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);
         }
-        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),
+        // Ensure the byte array is a valid UTF-8 sequence before creating the parser
+        if (!isUtf8(src, offset, length)) {
+            throw new CharConversionException("Invalid UTF-8 sequence");
+        }
+        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),
                 true));
     }
+
+    private boolean isUtf8(byte[] bytes, int offset, int length) {
+        int end = offset + length;
+        for (int i = offset; i < end; ) {
+            int b = bytes[i] & 0xFF;
+            if ((b & 0x80) == 0) {
+                i++;
+            } else if ((b & 0xE0) == 0xC0) {
+                if (i + 1 >= end || (bytes[i + 1] & 0xC0) != 0x80) {
+                    return false;
+                }
+                i += 2;
+            } else if ((b & 0xF0) == 0xE0) {
+                if (i + 2 >= end || (bytes[i + 1] & 0xC0) != 0x80 || (bytes[i + 2] & 0xC0) != 0x80) {
+                    return false;
+                }
+                i += 3;
+            } else if ((b & 0xF8) == 0xF0) {
+                if (i + 3 >= end || (bytes[i + 1] & 0xC0) != 0x80 || (bytes[i + 2] & 0xC0) != 0x80 || (bytes[i + 3] & 0xC0) != 0x80) {
+                    return false;
+                }
+                i += 4;
+            } else {
+                return false;
+            }
+        }
+        return true;
+    }
\ No newline at end of file
