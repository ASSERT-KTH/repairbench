diff --git a/tmp/caa55057-c3ad-4a64-a05f-1a7c07f39d7d_buggy.java b/tmp/54e5c724-8ce7-4381-8433-b18dc64dce17_fixed.java
index 5abdeb5..e1ad0b1 100644
--- a/tmp/caa55057-c3ad-4a64-a05f-1a7c07f39d7d_buggy.java
+++ b/tmp/54e5c724-8ce7-4381-8433-b18dc64dce17_fixed.java
@@ -1,29 +1,28 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+          // Also, we need to handle the case where the variable is used inside a hook (conditional expression).
+          !(parent.isAssign() && (parent.getFirstChild() == n)) &&
+          !(parent.isHook() && (parent.getParent().isExprResult() || parent.getParent().isReturn()))) {
+            // Don't count lhs of top-level assignment chain or hook
             numUsesWithinCfgNode++;
         }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
