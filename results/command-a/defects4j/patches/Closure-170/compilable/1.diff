diff --git a/tmp/cdd06273-b543-482f-97af-4de68ae3ee3f_buggy.java b/tmp/dad7bdc0-0262-4929-be56-5fdd6b0ac18a_fixed.java
index 5abdeb5..c2b1cd4 100644
--- a/tmp/cdd06273-b543-482f-97af-4de68ae3ee3f_buggy.java
+++ b/tmp/dad7bdc0-0262-4929-be56-5fdd6b0ac18a_fixed.java
@@ -1,29 +1,32 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
         // We make a special exception when the entire cfgNode is a chain
         // of assignments, since in that case the assignment statements
         // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+        // We also need to consider the case where the variable is used
+        // inside a hook (conditional expression), as the assignment
+        // might be part of the condition or the consequence/alternative.
+        // Therefore, we exclude the case where the parent is a hook and
+        // the current node is the condition.
+        !(parent.isAssign() && (parent.getFirstChild() == n)) &&
+        !(parent.isHook() && parent.getFirstChild() == n)) {
+          // Don't count lhs of top-level assignment chain or condition in hook
           numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
