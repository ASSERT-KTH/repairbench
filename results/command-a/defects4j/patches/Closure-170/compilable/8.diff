diff --git a/tmp/cd54391b-4974-43ca-be11-acbb43aac510_buggy.java b/tmp/138157e3-83cd-4964-994f-bfc5c273dbaa_fixed.java
index 5abdeb5..0a461de 100644
--- a/tmp/cd54391b-4974-43ca-be11-acbb43aac510_buggy.java
+++ b/tmp/138157e3-83cd-4964-994f-bfc5c273dbaa_fixed.java
@@ -1,29 +1,29 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
           // We make a special exception when the entire cfgNode is a chain
           // of assignments, since in that case the assignment statements
           // will happen after the inlining of the right hand side.
           // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
           //   and remove this special case.
-              !(parent.isAssign() &&
+          !(parent != null && parent.isAssign() &&
             (parent.getFirstChild() == n))) {
             // Don't count lhs of top-level assignment chain
             numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
