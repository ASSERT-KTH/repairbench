diff --git a/tmp/89d72211-5a17-4086-91e3-945bfc077d03_buggy.java b/tmp/d76a12c4-622b-45d7-bd6d-d4f5cda9a371_fixed.java
index 5abdeb5..bdb1206 100644
--- a/tmp/89d72211-5a17-4086-91e3-945bfc077d03_buggy.java
+++ b/tmp/d76a12c4-622b-45d7-bd6d-d4f5cda9a371_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
             if (n.isName() && n.getString().equals(varName) &&
                 // We make a special exception when the entire cfgNode is a chain
                 // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                // will happen after the inlining of the right-hand side.
+                // Also, we need to exclude cases where the variable is assigned
+                // inside a conditional expression (hook) to avoid incorrect inlining.
+                !(parent.isAssign() && parent.getFirstChild() == n) &&
+                !(NodeUtil.isHook(NodeUtil.getEnclosingStatement(n)) && NodeUtil.isAssignmentOp(parent))) {
                 numUsesWithinCfgNode++;
             }
         }
-
     };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
