diff --git a/tmp/4f7f3d6d-a993-4382-970a-7c08db7e2918_buggy.java b/tmp/302c70b4-40ec-4c99-ac08-511a5e7b942f_fixed.java
index 5abdeb5..84e1a2d 100644
--- a/tmp/4f7f3d6d-a993-4382-970a-7c08db7e2918_buggy.java
+++ b/tmp/302c70b4-40ec-4c99-ac08-511a5e7b942f_fixed.java
@@ -1,29 +1,20 @@
-    /**
-     * Computes the number of uses of the variable varName and store it in
-     * numUseWithinUseCfgNode.
-     */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
-
     numUsesWithinCfgNode = 0;
-      AbstractCfgNodeTraversalCallback gatherCb =
-          new AbstractCfgNodeTraversalCallback() {
-
+    AbstractCfgNodeTraversalCallback gatherCb = new AbstractCfgNodeTraversalCallback() {
         @Override
         public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            if (n.isName() && n.getString().equals(varName)) {
+                if (parent.isAssign() && parent.getFirstChild() == n) {
+                    // Do not count the variable if it's on the left-hand side of an assignment
+                    // and is the first child of the assignment node, unless it's within a hook (conditional expression).
+                    if (!NodeUtil.isHook(parent.getParent())) {
+                        return;
+                    }
+                }
                 numUsesWithinCfgNode++;
             }
         }
-
     };
 
     NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
