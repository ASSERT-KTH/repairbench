diff --git a/tmp/1f04290a-d659-465b-87c6-f0309cf70a27_buggy.java b/tmp/2e9d9fd3-768a-4b0d-a3b9-1b62b6364374_fixed.java
index 3effef5..0c5d943 100644
--- a/tmp/1f04290a-d659-465b-87c6-f0309cf70a27_buggy.java
+++ b/tmp/2e9d9fd3-768a-4b0d-a3b9-1b62b6364374_fixed.java
@@ -1,73 +1,108 @@
 @SuppressWarnings("resource")
 protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
         DeserializationContext ctxt)
     throws IOException, JsonProcessingException
 {
     final PropertyBasedCreator creator = _propertyBasedCreator;
     PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
     TokenBuffer tokens = new TokenBuffer(p, ctxt);
     tokens.writeStartObject();
 
     JsonToken t = p.getCurrentToken();
+    boolean creatorPropertiesProcessed = false; // Flag to track if creator properties are processed
+
     for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
         String propName = p.getCurrentName();
         p.nextToken(); // to point to value
+
         // creator property?
         SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
         if (creatorProp != null) {
             if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
-                    t = p.nextToken();
+                creatorPropertiesProcessed = true; // Mark creator properties as processed
                 Object bean;
                 try {
                     bean = creator.build(ctxt, buffer);
                 } catch (Exception e) {
                     wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                     continue;
                 }
+                // Continue processing remaining properties
                 while (t == JsonToken.FIELD_NAME) {
+                    propName = p.getCurrentName();
                     p.nextToken();
+                    SettableBeanProperty prop = _beanProperties.find(propName);
+                    if (prop != null) {
+                        prop.deserializeSetAndReturn(p, ctxt, bean);
+                    } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                        handleIgnoredProperty(p, ctxt, handledType(), propName);
+                    } else if (_anySetter != null) {
+                        _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+                    } else {
+                        tokens.writeFieldName(propName);
                         tokens.copyCurrentStructure(p);
+                    }
                     t = p.nextToken();
                 }
                 tokens.writeEndObject();
                 if (bean.getClass() != _beanType.getRawClass()) {
                     ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                     return null;
                 }
                 return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
             }
             continue;
         }
+
         // Object Id property?
         if (buffer.readIdProperty(propName)) {
             continue;
         }
-            // regular property? needs buffering
+
+        // If creator properties are not yet processed, buffer all properties
+        if (!creatorPropertiesProcessed) {
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
-            // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
+        } else {
+            // Creator properties are processed, directly set properties on the bean
+            Object bean = creator.build(ctxt, buffer);
+            SettableBeanProperty prop = _beanProperties.find(propName);
+            if (prop != null) {
+                prop.deserializeSetAndReturn(p, ctxt, bean);
+            } else if (_ignorableProps != null && _ignorableProps.contains(propName)) {
+                handleIgnoredProperty(p, ctxt, handledType(), propName);
+            } else if (_anySetter != null) {
+                _anySetter.deserializeAndSet(p, ctxt, bean, propName);
+            } else {
+                tokens.writeFieldName(propName);
+                tokens.copyCurrentStructure(p);
+            }
+        }
     }
 
-        // We hit END_OBJECT, so:
+    // If creator properties were not processed, build the bean now
+    if (!creatorPropertiesProcessed) {
         Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
         try {
             bean = creator.build(ctxt, buffer);
         } catch (Exception e) {
             return wrapInstantiationProblem(e, ctxt);
         }
         return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
     }
+
+    return null; // Should not reach here
+}
\ No newline at end of file
