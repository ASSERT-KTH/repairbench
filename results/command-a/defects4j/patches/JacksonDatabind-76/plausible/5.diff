diff --git a/tmp/ef80eabf-c35f-4970-a92a-c5c28a8d69fe_buggy.java b/tmp/a22e9c56-8eea-4583-b107-5b4ad0265b5c_fixed.java
index 3effef5..3add405 100644
--- a/tmp/ef80eabf-c35f-4970-a92a-c5c28a8d69fe_buggy.java
+++ b/tmp/a22e9c56-8eea-4583-b107-5b4ad0265b5c_fixed.java
@@ -1,73 +1,88 @@
     @SuppressWarnings("resource")
     protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,
     		DeserializationContext ctxt)
         throws IOException, JsonProcessingException
     {
         final PropertyBasedCreator creator = _propertyBasedCreator;
         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);
 
         TokenBuffer tokens = new TokenBuffer(p, ctxt);
         tokens.writeStartObject();
 
         JsonToken t = p.getCurrentToken();
+        boolean creatorPropertiesFound = false;
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
+                creatorPropertiesFound = true;
                 if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {
                     t = p.nextToken();
                     Object bean;
                     try {
                         bean = creator.build(ctxt, buffer);
                     } catch (Exception e) {
                         wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);
                         continue;
                     }
+                    // Continue processing remaining properties
                     while (t == JsonToken.FIELD_NAME) {
-                        p.nextToken();
+                        String remainingPropName = p.getCurrentName();
+                        p.nextToken(); // to point to value
+                        SettableBeanProperty prop = _beanProperties.find(remainingPropName);
+                        if (prop != null) {
+                            prop.deserializeAndSet(p, ctxt, bean);
+                        } else if (_ignorableProps != null && _ignorableProps.contains(remainingPropName)) {
+                            handleIgnoredProperty(p, ctxt, handledType(), remainingPropName);
+                        } else {
+                            tokens.writeFieldName(remainingPropName);
                             tokens.copyCurrentStructure(p);
+                        }
                         t = p.nextToken();
                     }
                     tokens.writeEndObject();
                     if (bean.getClass() != _beanType.getRawClass()) {
                         ctxt.reportMappingException("Can not create polymorphic instances with unwrapped values");
                         return null;
                     }
                     return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
                 }
                 continue;
             }
             // Object Id property?
             if (buffer.readIdProperty(propName)) {
                 continue;
             }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
                 buffer.bufferProperty(prop, prop.deserialize(p, ctxt));
                 continue;
             }
             if (_ignorableProps != null && _ignorableProps.contains(propName)) {
                 handleIgnoredProperty(p, ctxt, handledType(), propName);
                 continue;
             }
             tokens.writeFieldName(propName);
             tokens.copyCurrentStructure(p);
             // "any property"?
             if (_anySetter != null) {
                 buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));
             }
         }
 
-        // We hit END_OBJECT, so:
+        // If no creator properties were found, handle the case where all properties are regular
+        if (!creatorPropertiesFound) {
             Object bean;
-        // !!! 15-Feb-2012, tatu: Need to modify creator to use Builder!
             try {
                 bean = creator.build(ctxt, buffer);
             } catch (Exception e) {
                 return wrapInstantiationProblem(e, ctxt);
             }
             return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);
         }
+
+        return null; // Should not reach here
+    }
\ No newline at end of file
