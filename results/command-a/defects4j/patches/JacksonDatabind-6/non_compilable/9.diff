diff --git a/tmp/2b3b0d13-c2f5-40ba-bf47-49b8f2eaf9b5_buggy.java b/tmp/30d21052-004e-4793-964f-50bc623a11c1_fixed.java
index cd412d2..408dc89 100644
--- a/tmp/2b3b0d13-c2f5-40ba-bf47-49b8f2eaf9b5_buggy.java
+++ b/tmp/30d21052-004e-4793-964f-50bc623a11c1_fixed.java
@@ -1,76 +1,86 @@
-    protected Date parseAsISO8601(String dateStr, ParsePosition pos)
-    {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
+protected Date parseAsISO8601(String dateStr, ParsePosition pos) {
     int len = dateStr.length();
-        char c = dateStr.charAt(len-1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
-        if (len <= 10 && Character.isDigit(c)) {
-            df = _formatPlain;
-            if (df == null) {
-                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
-            }
-        } else if (c == 'Z') {
-            df = _formatISO8601_z;
-            if (df == null) {
-                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
-            }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+    // Handle plain date format
+    if (len <= 10 && Character.isDigit(dateStr.charAt(len - 1))) {
+        df = getPlainDateFormat();
+    } else if (dateStr.charAt(len - 1) == 'Z') {
+        df = getISO8601ZDateFormat();
+        // Handle missing milliseconds for 'Z' format
         if (dateStr.charAt(len - 4) == ':') {
-                StringBuilder sb = new StringBuilder(dateStr);
-                sb.insert(len-1, ".000");
-                dateStr = sb.toString();
+            dateStr = insertMilliseconds(dateStr, len - 1);
         }
-        } else {
-            // Let's see if we have timezone indicator or not...
-            if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
-                    dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
+    } else if (hasTimeZone(dateStr)) {
+        df = getISO8601DateFormat();
+        // Handle time zone with optional colon and missing minutes
+        if (dateStr.charAt(len - 3) == ':') {
+            dateStr = removeColon(dateStr, len - 3);
+        } else if (dateStr.charAt(len - 3) == '+' || dateStr.charAt(len - 3) == '-') {
+            dateStr = appendMinutes(dateStr);
         }
-                df = _formatISO8601;
-                if (_formatISO8601 == null) {
-                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+        // Handle missing or partial milliseconds
+        if (Character.isDigit(dateStr.charAt(len - 9))) {
+            dateStr = insertMilliseconds(dateStr, len - 5);
         }
     } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
-                StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
+        df = getISO8601ZDateFormat();
+        // Append 'Z' and handle missing milliseconds for non-time zone format
         int timeLen = len - dateStr.lastIndexOf('T') - 1;
         if (timeLen <= 8) {
-                        sb.append(".000");
-                }
-                sb.append('Z');
-                dateStr = sb.toString();
-                df = _formatISO8601_z;
-                if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
-                }
+            dateStr = appendMillisecondsAndZ(dateStr);
+        } else {
+            dateStr += 'Z';
         }
     }
+
     return df.parse(dateStr, pos);
 }
+
+private DateFormat getPlainDateFormat() {
+    if (_formatPlain == null) {
+        _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
+    }
+    return _formatPlain;
+}
+
+private DateFormat getISO8601ZDateFormat() {
+    if (_formatISO8601_z == null) {
+        _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
+    }
+    return _formatISO8601_z;
+}
+
+private DateFormat getISO8601DateFormat() {
+    if (_formatISO8601 == null) {
+        _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
+    }
+    return _formatISO8601;
+}
+
+private String insertMilliseconds(String dateStr, int index) {
+    StringBuilder sb = new StringBuilder(dateStr);
+    sb.insert(index, ".000");
+    return sb.toString();
+}
+
+private String removeColon(String dateStr, int index) {
+    StringBuilder sb = new StringBuilder(dateStr);
+    sb.delete(index, index + 1);
+    return sb.toString();
+}
+
+private String appendMinutes(String dateStr) {
+    return dateStr + "00";
+}
+
+private String appendMillisecondsAndZ(String dateStr) {
+    StringBuilder sb = new StringBuilder(dateStr);
+    sb.append(".000Z");
+    return sb.toString();
+}
+
+private boolean hasTimeZone(String dateStr) {
+    int len = dateStr.length();
+    return len >= 6 && (dateStr.charAt(len - 6) == '+' || dateStr.charAt(len - 6) == '-');
+}
\ No newline at end of file
