diff --git a/tmp/6d889a92-92d8-46fa-a463-c1dd245a0784_buggy.java b/tmp/9b764640-9bbd-4cb0-a9ab-7d0570e7b102_fixed.java
index 4be01ab..1898bf3 100644
--- a/tmp/6d889a92-92d8-46fa-a463-c1dd245a0784_buggy.java
+++ b/tmp/9b764640-9bbd-4cb0-a9ab-7d0570e7b102_fixed.java
@@ -1,115 +1,138 @@
 /**
  * Extracts the text found on the current line and all subsequent
  * until either an annotation, end of comment or end of file is reached.
  * Note that if this method detects an end of line as the first token, it
  * will quit immediately (indicating that there is no text where it was
  * expected).  Note that token = info.token; should be called after this
  * method is used to update the token properly in the parser.
  *
  * @param token The start token.
  * @param option How to handle whitespace.
  *
  * @return The extraction information.
  */
 @SuppressWarnings("fallthrough")
 private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,
                                                     WhitespaceOption option) {
 
   if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
       token == JsDocToken.EOF) {
     return new ExtractionInfo("", token);
   }
 
   stream.update();
   int startLineno = stream.getLineno();
   int startCharno = stream.getCharno() + 1;
 
-    // Read the content from the first line.
+  // Read the content from the first line, excluding the initial token.
   String line = stream.getRemainingJSDocLine();
   if (option != WhitespaceOption.PRESERVE) {
-      line = line.trim();
+    line = trimStart(line);
   }
 
   StringBuilder builder = new StringBuilder();
   builder.append(line);
 
   state = State.SEARCHING_ANNOTATION;
   token = next();
 
   boolean ignoreStar = false;
 
   // Track the start of the line to count whitespace that
   // the tokenizer skipped. Because this case is rare, it's easier
   // to do this here than in the tokenizer.
 
   do {
     switch (token) {
       case STAR:
         if (ignoreStar) {
           // Mark the position after the star as the new start of the line.
+          int skipped = stream.getCharno() - 1;
+          if (skipped > 0 && builder.length() > 0 &&
+              builder.charAt(builder.length() - 1) != '\n') {
+            builder.append("\n");
+          }
+          while (skipped-- > 0) {
+            builder.append(' ');
+          }
         } else {
           // The star is part of the comment.
           if (builder.length() > 0) {
             builder.append(' ');
           }
-
           builder.append('*');
         }
 
         token = next();
         continue;
 
       case EOL:
         if (option != WhitespaceOption.SINGLE_LINE) {
           builder.append("\n");
         }
 
         ignoreStar = true;
         token = next();
         continue;
 
       default:
         ignoreStar = false;
         state = State.SEARCHING_ANNOTATION;
 
-              // All tokens must be separated by a space.
-
+        // Handle tokens that signal the end of the block.
         if (token == JsDocToken.EOC ||
             token == JsDocToken.EOF ||
             // When we're capturing a license block, annotations
-              // in the block are ok.
+            // in the block are ok, unless we're preserving whitespace.
             (token == JsDocToken.ANNOTATION &&
              option != WhitespaceOption.PRESERVE)) {
           String multilineText = builder.toString();
 
           if (option != WhitespaceOption.PRESERVE) {
             multilineText = multilineText.trim();
           }
 
           int endLineno = stream.getLineno();
           int endCharno = stream.getCharno();
 
           if (multilineText.length() > 0) {
             jsdocBuilder.markText(multilineText, startLineno, startCharno,
                 endLineno, endCharno);
           }
 
           return new ExtractionInfo(multilineText, token);
         }
 
+        // Append the token and the remaining line content.
         if (builder.length() > 0) {
           builder.append(' ');
         }
         builder.append(toString(token));
 
         line = stream.getRemainingJSDocLine();
 
         if (option != WhitespaceOption.PRESERVE) {
           line = trimEnd(line);
         }
 
         builder.append(line);
         token = next();
     }
   } while (true);
 }
+
+private String trimStart(String str) {
+  int i = 0;
+  while (i < str.length() && Character.isWhitespace(str.charAt(i))) {
+    i++;
+  }
+  return str.substring(i);
+}
+
+private String trimEnd(String str) {
+  int i = str.length() - 1;
+  while (i >= 0 && Character.isWhitespace(str.charAt(i))) {
+    i--;
+  }
+  return str.substring(0, i + 1);
+}
\ No newline at end of file
