diff --git a/tmp/e06f8c5b-0c92-46ee-aff5-ad1ca642474f_buggy.java b/tmp/8d749457-4026-410a-91a0-1ac0c794f07e_fixed.java
index 875b31b..b67bb10 100644
--- a/tmp/e06f8c5b-0c92-46ee-aff5-ad1ca642474f_buggy.java
+++ b/tmp/8d749457-4026-410a-91a0-1ac0c794f07e_fixed.java
@@ -1,54 +1,47 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
     int pos = findWrapPos(text, width, 0);
 
-        if (pos == -1)
-        {
+    if (pos == -1) {
         sb.append(rtrim(text));
-
         return sb;
     }
+
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
+    if (nextLineTabStop >= width) {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
-        while (true)
-        {
+    while (true) {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
-            if (pos == -1)
-            {
+        if (pos == -1) {
+            // Append the remaining text without trimming or adding padding if it fits on the current line
+            if (text.length() <= width) {
                 sb.append(text);
-
+            } else {
+                // If the remaining text exceeds the width, wrap it properly
+                int remainingPos = findWrapPos(text, width, 0);
+                if (remainingPos != -1) {
+                    sb.append(rtrim(text.substring(0, remainingPos))).append(defaultNewLine);
+                    text = padding + text.substring(remainingPos).trim();
+                    sb.append(text);
+                } else {
+                    sb.append(rtrim(text));
+                }
+            }
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
+        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
