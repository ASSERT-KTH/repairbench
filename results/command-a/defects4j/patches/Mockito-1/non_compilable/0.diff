diff --git a/tmp/f22030f6-8c84-4150-80fb-8bba3d5260d9_buggy.java b/tmp/545f96d0-f415-42c8-89aa-aed0ad1239e1_fixed.java
index 1c875ad..ef45da2 100644
--- a/tmp/f22030f6-8c84-4150-80fb-8bba3d5260d9_buggy.java
+++ b/tmp/545f96d0-f415-42c8-89aa-aed0ad1239e1_fixed.java
@@ -1,31 +1,40 @@
 public void captureArgumentsFrom(Invocation invocation) {
+    List<Matcher<?>> varargMatchers = new ArrayList<>();
+    List<Object> varargValues = new ArrayList<>();
+
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        int varargPosition = invocation.getRawArguments().length - 1;
+        Matcher<?> varargMatcher = matchers.get(varargPosition);
+        if (varargMatcher instanceof CapturesVarargArguments) {
+            ((CapturesVarargArguments) varargMatcher).captureFrom(invocation.getRawArguments()[varargPosition]);
+        } else if (varargMatcher instanceof CapturesArguments) {
+            Object array = invocation.getRawArguments()[varargPosition];
+            for (int i = 0; i < Array.getLength(array); i++) {
+                ((CapturesArguments) varargMatcher).captureFrom(Array.get(array, i));
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+            Matcher<?> m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    // Handle vararg matchers separately
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher<?> m = matchers.get(position);
+        if (m instanceof CapturesVarargArguments) {
+            varargMatchers.add(m);
+            Object[] varargs = (Object[]) invocation.getRawArguments()[position];
+            for (Object vararg : varargs) {
+                varargValues.add(vararg);
+            }
+            // Capture all vararg values
+            ((CapturesVarargArguments) m).captureFrom(varargValues.toArray());
+            // Break after handling varargs
+            break;
+        }
+    }
 }
\ No newline at end of file
