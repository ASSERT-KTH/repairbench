diff --git a/tmp/f026b1d3-28df-4b20-97ff-621a916974d6_buggy.java b/tmp/d7d895fa-3185-4060-9eb4-c8bda8ba7818_fixed.java
index 1c875ad..f1e9d56 100644
--- a/tmp/f026b1d3-28df-4b20-97ff-621a916974d6_buggy.java
+++ b/tmp/d7d895fa-3185-4060-9eb4-c8bda8ba7818_fixed.java
@@ -1,31 +1,25 @@
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+            Matcher varargMatcher = lastVarargMatcher();
+            if (varargMatcher instanceof CapturesArguments) {
+                ((CapturesArguments) varargMatcher).captureFrom(invocation.getVarargs());
+            }
         } else {
             for (int position = 0; position < matchers.size(); position++) {
                 Matcher m = matchers.get(position);
                 if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                    ((CapturesArguments) m).captureFrom(invocation.getArgument(position));
+                }
             }
         }
     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    private Matcher lastVarargMatcher() {
+        for (int i = matchers.size() - 1; i >= 0; i--) {
+            Matcher matcher = matchers.get(i);
+            if (matcher instanceof VarargMatcher) {
+                return matcher;
+            }
+        }
+        throw new IllegalStateException("No vararg matcher found");
     }
\ No newline at end of file
