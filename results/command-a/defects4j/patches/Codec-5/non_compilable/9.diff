diff --git a/tmp/abf80f49-4d65-4bb4-89a4-d0838bbb4010_buggy.java b/tmp/da684bda-1775-49bf-81d8-d8016a84a7b3_fixed.java
index cb1fb60..0cc82aa 100644
--- a/tmp/abf80f49-4d65-4bb4-89a4-d0838bbb4010_buggy.java
+++ b/tmp/da684bda-1775-49bf-81d8-d8016a84a7b3_fixed.java
@@ -1,73 +1,57 @@
-    /**
-     * <p>
-     * Decodes all of the provided data, starting at inPos, for inAvail bytes. Should be called at least twice: once
-     * with the data to decode, and once with inAvail set to "-1" to alert decoder that EOF has been reached. The "-1"
-     * call is not necessary when decoding, but it doesn't hurt, either.
-     * </p>
-     * <p>
-     * Ignores all non-base64 characters. This is how chunked (e.g. 76 character) data is handled, since CR and LF are
-     * silently ignored, but has implications for other bytes, too. This method subscribes to the garbage-in,
-     * garbage-out philosophy: it will not check the provided data for validity.
-     * </p>
-     * <p>
-     * Thanks to "commons" project in ws.apache.org for the bitwise operations, and general approach.
-     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/
-     * </p>
-     * 
-     * @param in
-     *            byte[] array of ascii data to base64 decode.
-     * @param inPos
-     *            Position to start reading data from.
-     * @param inAvail
-     *            Amount of bytes available from input for encoding.
-     */
     void decode(byte[] in, int inPos, int inAvail) {
         if (eof) {
             return;
         }
         if (inAvail < 0) {
             eof = true;
         }
+        if (buffer == null) {
+            buffer = new byte[0];
+            pos = 0;
+        }
         for (int i = 0; i < inAvail; i++) {
-            if (buffer == null || buffer.length - pos < decodeSize) {
+            if (buffer.length - pos < decodeSize) {
                 resizeBuffer();
             }
             byte b = in[inPos++];
             if (b == PAD) {
                 // We're done.
                 eof = true;
                 break;
             } else {
                 if (b >= 0 && b < DECODE_TABLE.length) {
                     int result = DECODE_TABLE[b];
                     if (result >= 0) {
                         modulus = (++modulus) % 4;
                         x = (x << 6) + result;
                         if (modulus == 0) {
                             buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                             buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                             buffer[pos++] = (byte) (x & MASK_8BITS);
                         }
                     }
                 }
             }
         }
 
         // Two forms of EOF as far as base64 decoder is concerned: actual
         // EOF (-1) and first time '=' character is encountered in stream.
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
             
-            x = x << 6;
+            x = x << (6 - modulus * 2); // Shift according to the remaining modulus
             switch (modulus) {
+                case 1:
+                    // Handle the case where only one byte was decoded
+                    buffer = Arrays.copyOf(buffer, pos); // Ensure buffer is correctly sized
+                    break;
                 case 2:
-                    x = x << 6;
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     break;
                 case 3:
                     buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
                     buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
                     break;
             }
         }
     }
\ No newline at end of file
