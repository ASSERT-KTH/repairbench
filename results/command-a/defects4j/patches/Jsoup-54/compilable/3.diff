diff --git a/tmp/f2f19338-b1c1-409a-9739-8815249555a0_buggy.java b/tmp/3c49faba-b81a-45b8-8030-eebd459d7f81_fixed.java
index d5b3da9..b3c0616 100644
--- a/tmp/f2f19338-b1c1-409a-9739-8815249555a0_buggy.java
+++ b/tmp/3c49faba-b81a-45b8-8030-eebd459d7f81_fixed.java
@@ -1,7 +1,46 @@
 private void copyAttributes(org.jsoup.nodes.Node source, Element el) {
     for (Attribute attribute : source.attributes()) {
-                // valid xml attribute names are: ^[a-zA-Z_:][-a-zA-Z0-9_:.]
-                String key = attribute.getKey().replaceAll("[^-a-zA-Z0-9_:.]", "");
+        String key = attribute.getKey();
+        if (!isValidXmlAttributeName(key)) {
+            key = makeValidXmlAttributeName(key);
+        }
         el.setAttribute(key, attribute.getValue());
     }
 }
+
+private boolean isValidXmlAttributeName(String key) {
+    // XML attribute names must start with a letter or underscore, and can contain letters, digits, hyphens, underscores, colons, or periods.
+    // However, the first character cannot be a colon.
+    if (key.isEmpty() || key.charAt(0) == ':' || !Character.isLetterOrDigit(key.charAt(0)) && key.charAt(0) != '_') {
+        return false;
+    }
+    for (int i = 1; i < key.length(); i++) {
+        char c = key.charAt(i);
+        if (!Character.isLetterOrDigit(c) && c != '-' && c != '_' && c != ':' && c != '.') {
+            return false;
+        }
+    }
+    return true;
+}
+
+private String makeValidXmlAttributeName(String key) {
+    StringBuilder validKey = new StringBuilder();
+    if (key.isEmpty()) {
+        validKey.append('_'); // Ensure the key is not empty
+    } else {
+        if (!Character.isLetterOrDigit(key.charAt(0)) && key.charAt(0) != '_') {
+            validKey.append('_');
+        } else {
+            validKey.append(key.charAt(0));
+        }
+        for (int i = 1; i < key.length(); i++) {
+            char c = key.charAt(i);
+            if (Character.isLetterOrDigit(c) || c == '-' || c == '_' || c == ':' || c == '.') {
+                validKey.append(c);
+            } else {
+                validKey.append('_'); // Replace invalid characters with underscores
+            }
+        }
+    }
+    return validKey.toString();
+}
\ No newline at end of file
