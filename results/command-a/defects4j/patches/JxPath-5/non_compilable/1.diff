diff --git a/tmp/34d14215-4f5f-41ad-8458-17fcc70c3e88_buggy.java b/tmp/fff66743-d2f9-4324-9b43-8067a0271eda_fixed.java
index 5f8ac1a..218ea6b 100644
--- a/tmp/34d14215-4f5f-41ad-8458-17fcc70c3e88_buggy.java
+++ b/tmp/fff66743-d2f9-4324-9b43-8067a0271eda_fixed.java
@@ -1,34 +1,42 @@
 private int compareNodePointers(
         NodePointer p1,
         int depth1,
         NodePointer p2,
         int depth2) 
 {
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
 
+    // Handle the case where one pointer is a variable and the other is a node
+    if ((p1 == null || p1.getNode() == null) && (p2 == null || p2.getNode() == null)) {
+        return p1 == null ? (p2 == null ? 0 : -1) : (p2 == null ? 1 : p1.toString().compareTo(p2.toString()));
+    }
+
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
     if (depth1 == 1) {
+        // Check if both pointers belong to the same root
+        if (p1 != null && p2 != null && !p1.getRootNodePointer().equals(p2.getRootNodePointer())) {
             throw new JXPathException(
                     "Cannot compare pointers that do not belong to the same tree: '"
                             + p1 + "' and '" + p2 + "'");
         }
+    }
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
