diff --git a/tmp/cc5fa6fd-8c30-4d27-b227-14f1fe3b6132_buggy.java b/tmp/21b8688c-dada-490f-b45f-b339dfaef826_fixed.java
index e69de29..b215d86 100644
--- a/tmp/cc5fa6fd-8c30-4d27-b227-14f1fe3b6132_buggy.java
+++ b/tmp/21b8688c-dada-490f-b45f-b339dfaef826_fixed.java
@@ -0,0 +1,25 @@
+protected Object _deserializeWithNativeTypeId(JsonParser p, DeserializationContext ctxt,
+        Object typeId, JavaType baseType) throws IOException
+{
+    // First: optimizations for the case where we don't care about type id
+    if (typeId == null) { // ok iff no subtype handling needed
+        return _deserialize(p, ctxt);
+    }
+    // Then: could it be that we actually don't have subtypes?
+    if (baseType.getValueHandler() == null) {
+        return _deserialize(p, ctxt);
+    }
+
+    JavaType subType = findSubType(ctxt, typeId, baseType);
+    // One way to get null; error if so (or if just not visible)
+    if (subType == null) {
+        throw ctxt.mappingException("Can not find polymorphic type handler for type %s, problem: no registered subtype mapper", typeId);
+    }
+
+    // Still need visible handler, although it is less common here
+    JsonDeserializer<Object> deser = _findNullifiedDeserializer(ctxt, subType, _valueDeserializer);
+    if (deser != null) {
+        return deser.deserialize(p, ctxt);
+    }
+    return _deserialize(p, ctxt, subType);
+}
\ No newline at end of file
