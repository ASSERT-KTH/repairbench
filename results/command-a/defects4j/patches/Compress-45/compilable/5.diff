diff --git a/tmp/531c5df1-7852-4d95-a8fe-fc4c4054c78a_buggy.java b/tmp/8266693a-f00c-4dc4-849e-ec91585c3b49_fixed.java
index 1bbc082..b533d7f 100644
--- a/tmp/531c5df1-7852-4d95-a8fe-fc4c4054c78a_buggy.java
+++ b/tmp/8266693a-f00c-4dc4-849e-ec91585c3b49_fixed.java
@@ -1,36 +1,43 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        final long absValue = Math.abs(value);
+
+        if (!negative && absValue <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
-        if (length < 9) {
+        if (length < 9 && absValue <= (1L << (length * 8))) { // Check if value fits in binary format
             formatLongBinary(value, buf, offset, length, negative);
+            return offset + length;
         }
+
+        if (absValue > (1L << (length * 8 - 1))) {
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+        }
+
         formatBigIntegerBinary(value, buf, offset, length, negative);
-
         buf[offset] = (byte) (negative ? 0xff : 0x80);
         return offset + length;
     }
\ No newline at end of file
