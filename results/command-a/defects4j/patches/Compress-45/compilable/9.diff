diff --git a/tmp/6824608f-64d5-4367-8764-b1a2c5f5549a_buggy.java b/tmp/465787eb-e405-4823-aa81-f5340a4abf68_fixed.java
index 1bbc082..735c5ea 100644
--- a/tmp/6824608f-64d5-4367-8764-b1a2c5f5549a_buggy.java
+++ b/tmp/465787eb-e405-4823-aa81-f5340a4abf68_fixed.java
@@ -1,36 +1,42 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      * 
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      * 
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
-        if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
+        final long absValue = Math.abs(value);
+
+        if (!negative && absValue <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
         if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
         }
-        formatBigIntegerBinary(value, buf, offset, length, negative);
 
-        buf[offset] = (byte) (negative ? 0xff : 0x80);
+        formatBigIntegerBinary(absValue, buf, offset, length, negative);
+        if (negative) {
+            buf[offset] = (byte) 0xff;
+        } else {
+            buf[offset + length - 1] = (byte) 0x80;
+        }
         return offset + length;
     }
\ No newline at end of file
