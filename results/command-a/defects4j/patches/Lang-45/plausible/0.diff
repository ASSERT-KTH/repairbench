diff --git a/tmp/39746ee2-4ff4-42d6-8510-aac3d949671c_buggy.java b/tmp/1c43a8ca-fbb9-4b5b-b881-47187ba2880a_fixed.java
index 1b36a4f..1ae9690 100644
--- a/tmp/39746ee2-4ff4-42d6-8510-aac3d949671c_buggy.java
+++ b/tmp/1c43a8ca-fbb9-4b5b-b881-47187ba2880a_fixed.java
@@ -1,58 +1,55 @@
 /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // Adjust lower and upper bounds based on string length
+        lower = Math.min(lower, str.length());
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
-        }
+        // Ensure upper is not less than lower
+        upper = Math.max(upper, lower);
 
-        StringBuffer result = new StringBuffer();
+        // Find the first space after the lower limit
         int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
+        if (index == -1 || index > upper) {
+            // No space found within the bounds or space is after upper limit
+            String abbreviated = str.substring(0, Math.min(upper, str.length()));
+            if (upper < str.length()) {
+                abbreviated += StringUtils.defaultString(appendToEnd);
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+            return abbreviated;
         } else {
-            result.append(str.substring(0, index));
-            result.append(StringUtils.defaultString(appendToEnd));
+            // Space found within bounds
+            String abbreviated = str.substring(0, index);
+            if (index < str.length()) {
+                abbreviated += StringUtils.defaultString(appendToEnd);
+            }
+            return abbreviated;
         }
-        return result.toString();
     }
\ No newline at end of file
