diff --git a/tmp/4c5e4ac3-b59f-49a5-a4a5-e38f80dbe35b_buggy.java b/tmp/a744f816-98c1-4011-b718-0522497e0fa6_fixed.java
index 1b36a4f..85b6817 100644
--- a/tmp/4c5e4ac3-b59f-49a5-a4a5-e38f80dbe35b_buggy.java
+++ b/tmp/a744f816-98c1-4011-b718-0522497e0fa6_fixed.java
@@ -1,58 +1,56 @@
     /**
      * Abbreviates a string nicely.
      * 
      * This method searches for the first space after the lower limit and abbreviates
      * the String there. It will also append any String passed as a parameter
      * to the end of the String. The upper limit can be specified to forcibly
      * abbreviate a String.
      * 
      * @param str         the string to be abbreviated. If null is passed, null is returned.
      *                    If the empty String is passed, the empty string is returned.
      * @param lower       the lower limit.
      * @param upper       the upper limit; specify -1 if no limit is desired.
      *                    If the upper limit is lower than the lower limit, it will be
      *                    adjusted to be the same as the lower limit.
      * @param appendToEnd String to be appended to the end of the abbreviated string.
      *                    This is appended ONLY if the string was indeed abbreviated.
      *                    The append does not count towards the lower or upper limits.
      * @return the abbreviated String.
      * @since 2.4
      */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+        // adjust upper limit if necessary
         if (upper == -1 || upper > str.length()) {
             upper = str.length();
         }
-        // if upper is less than lower, raise it to lower
         if (upper < lower) {
-            upper = lower;
+            upper = Math.max(lower, str.length());
         }
 
+        // adjust lower limit if necessary
+        lower = Math.min(lower, str.length());
+
         StringBuffer result = new StringBuffer();
         int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
+        if (index == -1 || index > upper) {
             result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
+            // only if abbreviation has occurred do we append the appendToEnd value
             if (upper != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
         } else {
             result.append(str.substring(0, index));
+            if (index < str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
+        }
         return result.toString();
     }
\ No newline at end of file
