diff --git a/tmp/1a314419-1b12-4a63-ac20-1964061736d3_buggy.java b/tmp/1d1af1e5-f34b-4e05-8a41-a66e7044ba54_fixed.java
index 3c69e10..fdf6089 100644
--- a/tmp/1a314419-1b12-4a63-ac20-1964061736d3_buggy.java
+++ b/tmp/1d1af1e5-f34b-4e05-8a41-a66e7044ba54_fixed.java
@@ -1,27 +1,28 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0 - (n1 * n2 * (n1 + n2 + 1) * (n1 + n2 + 1)) / (12.0 * (n1 + n2));
+    final double correctedVarU = Math.max(VarU, 1e-10); // Avoid division by zero or very small values
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    final double z = (Umin - EU) / FastMath.sqrt(correctedVarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
     return 2 * standardNormal.cumulativeProbability(z);
 }
\ No newline at end of file
