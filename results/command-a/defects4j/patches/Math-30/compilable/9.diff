diff --git a/tmp/525b359a-1ab5-49d7-a6a1-4c299bcf73c6_buggy.java b/tmp/77037a7e-e943-411a-8fd3-9c9b8574633f_fixed.java
index 3c69e10..1315a40 100644
--- a/tmp/525b359a-1ab5-49d7-a6a1-4c299bcf73c6_buggy.java
+++ b/tmp/77037a7e-e943-411a-8fd3-9c9b8574633f_fixed.java
@@ -1,27 +1,22 @@
-    /**
-     * @param Umin smallest Mann-Whitney U value
-     * @param n1 number of subjects in first sample
-     * @param n2 number of subjects in second sample
-     * @return two-sided asymptotic p-value
-     * @throws ConvergenceException if the p-value can not be computed
-     * due to a convergence error
-     * @throws MaxCountExceededException if the maximum number of
-     * iterations is exceeded
-     */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // Correction for large datasets: Use the minimum of U and U' for Z calculation
+    final double Umax = n1n2prod - Umin;
+    final double U = Math.min(Umin, Umax);
+
+    final double z = (U - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    // Return the two-tailed p-value
+    return 2 * standardNormal.cumulativeProbability(-Math.abs(z));
 }
\ No newline at end of file
