diff --git a/tmp/72eacb56-4d70-4c3a-a220-1e8449db341a_buggy.java b/tmp/e12e6d89-3f50-43b6-94a7-dddcc02bc13c_fixed.java
index cc69d41..02784f6 100644
--- a/tmp/72eacb56-4d70-4c3a-a220-1e8449db341a_buggy.java
+++ b/tmp/e12e6d89-3f50-43b6-94a7-dddcc02bc13c_fixed.java
@@ -1,29 +1,46 @@
 /**
  * Create an Option using the current settings and with
  * the specified Option <code>char</code>.
  *
  * @param opt the <code>java.lang.String</code> representation
  * of the Option
  * @return the Option instance
  * @throws IllegalArgumentException if <code>opt</code> is not
  * a valid character.  See Option.
  */
-    public static Option create(String opt) throws IllegalArgumentException
-    {
-            // create the option
+public static Option create(String opt) throws IllegalArgumentException {
+    // Check if the option character is valid
+    if (opt == null || opt.length() != 1) {
+        throw new IllegalArgumentException("Invalid option character: '" + opt + "'");
+    }
+
+    // Create the option
     Option option = new Option(opt, description);
 
-            // set the option properties
+    // Set the option properties
     option.setLongOpt(longopt);
     option.setRequired(required);
     option.setOptionalArg(optionalArg);
     option.setArgs(numberOfArgs);
     option.setType(type);
     option.setValueSeparator(valuesep);
     option.setArgName(argName);
-            // reset the OptionBuilder properties
+
+    // Reset the OptionBuilder properties to ensure no state leakage
     OptionBuilder.reset();
 
-        // return the Option instance
+    // Return the Option instance
     return option;
 }
+
+// Ensure the reset method is correctly implemented in OptionBuilder
+public static void reset() {
+    description = null;
+    longopt = null;
+    required = false;
+    optionalArg = false;
+    numberOfArgs = Option.UNINITIALIZED_NON_ZERO_ARG_VALUE;
+    type = null;
+    valuesep = null;
+    argName = null;
+}
\ No newline at end of file
