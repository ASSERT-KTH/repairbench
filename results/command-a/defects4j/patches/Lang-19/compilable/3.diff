diff --git a/tmp/a7d2464c-3902-4e0c-b0f6-ee4273b80a65_buggy.java b/tmp/4a63b397-fd8f-4cb4-b907-9e441fb40e5f_fixed.java
index 72a422c..f93490e 100644
--- a/tmp/a7d2464c-3902-4e0c-b0f6-ee4273b80a65_buggy.java
+++ b/tmp/4a63b397-fd8f-4cb4-b907-9e441fb40e5f_fixed.java
@@ -1,51 +1,52 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if (index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while (end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            if (end == seqEnd) {
+                // Handle the case where ';' is missing
+                return 0;
+            }
+
+            if (end <= start) {
+                // Invalid entity, return 0 to indicate no translation
+                return 0;
+            }
+
             try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
+                int entityValue = isHex ? 
+                        Integer.parseInt(input.subSequence(start, end).toString(), 16) : 
+                        Integer.parseInt(input.subSequence(start, end).toString(), 10);
 
                 if (entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            } catch (NumberFormatException nfe) {
+                // Handle invalid number format, return 0 to indicate no translation
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
