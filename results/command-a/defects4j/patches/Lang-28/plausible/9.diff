diff --git a/tmp/dc071feb-7c19-4dc1-8bbe-571fee89ea49_buggy.java b/tmp/f01ca27b-1741-4d91-a516-a5a23c13b7d0_fixed.java
index 4bbd561..e97ac0c 100644
--- a/tmp/dc071feb-7c19-4dc1-8bbe-571fee89ea49_buggy.java
+++ b/tmp/f01ca27b-1741-4d91-a516-a5a23c13b7d0_fixed.java
@@ -1,37 +1,49 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if (index < 0 || index >= input.length() || input.charAt(index) != '&' || index + 1 >= input.length() || input.charAt(index + 1) != '#') {
+            return 0;
+        }
+
         int start = index + 2;
+        if (start >= input.length()) {
+            return 0;
+        }
+
         boolean isHex = false;
-
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if (start >= input.length()) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = isHex ? Integer.parseInt(input.subSequence(start, end).toString(), 16) : Integer.parseInt(input.subSequence(start, end).toString(), 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue > 0xFFFF) {
+            out.write(new String(Character.toChars(entityValue)));
+        } else {
             out.write(entityValue);
+        }
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
\ No newline at end of file
-        return 0;
-    }
