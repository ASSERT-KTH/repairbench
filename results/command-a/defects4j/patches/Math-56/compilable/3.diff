diff --git a/tmp/634b2592-df20-4625-a59c-9c21445bb895_buggy.java b/tmp/2bb885b6-d898-4b4e-b763-c491d5f5a19d_fixed.java
index 2608424..e8e97bd 100644
--- a/tmp/634b2592-df20-4625-a59c-9c21445bb895_buggy.java
+++ b/tmp/2bb885b6-d898-4b4e-b763-c491d5f5a19d_fixed.java
@@ -1,39 +1,50 @@
 /**
  * Convert to multidimensional counter.
  *
  * @param index Index in unidimensional counter.
  * @return the multidimensional counts.
  * @throws OutOfRangeException if {@code index} is not between
  * {@code 0} and the value returned by {@link #getSize()} (excluded).
  */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
+    if (index < 0 || index >= totalSize) {
         throw new OutOfRangeException(index, 0, totalSize);
     }
 
     final int[] indices = new int[dimension];
 
     int count = 0;
     for (int i = 0; i < last; i++) {
         int idx = 0;
         final int offset = uniCounterOffset[i];
-            while (count <= index) {
+        while (count + offset <= index) {
             count += offset;
             ++idx;
         }
-            --idx;
-            count -= offset;
         indices[i] = idx;
     }
 
     int idx = 1;
     while (count < index) {
         count += idx;
         ++idx;
     }
     --idx;
     indices[last] = idx;
 
+    // Adjust the last dimension index if necessary
+    if (count != index) {
+        indices[last]++;
+        for (int i = last - 1; i >= 0; i--) {
+            if (indices[i] < uniCounterOffset[i]) {
+                indices[i]++;
+                for (int j = i + 1; j < dimension; j++) {
+                    indices[j] = 0;
+                }
+                break;
+            }
+        }
+    }
+
     return indices;
 }
\ No newline at end of file
