diff --git a/tmp/1f184867-a37b-4fe5-a50c-1a200bfde194_buggy.java b/tmp/36d9fd0b-aa4c-49a0-bb33-3ea4b5a98af5_fixed.java
index 71189c3..ef72c74 100644
--- a/tmp/1f184867-a37b-4fe5-a50c-1a200bfde194_buggy.java
+++ b/tmp/36d9fd0b-aa4c-49a0-bb33-3ea4b5a98af5_fixed.java
@@ -1,46 +1,57 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // if the child option is present then validate it and count it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
-
+            // Validate the option only once when it is first encountered
+            if (option.isRequired() || option instanceof Group) {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        // Ensure the value is correctly retrieved and validated
+        Object value = commandLine.getValue(option);
+        if (value instanceof File) {
+            // Handle File objects correctly
+            File file = (File) value;
+            if (!file.exists()) {
+                throw new OptionException(option, ResourceConstants.FILE_NOT_FOUND, file.getPath());
+            }
+        } else {
             option.validate(commandLine);
         }
     }
+}
\ No newline at end of file
