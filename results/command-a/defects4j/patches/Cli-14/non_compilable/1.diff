diff --git a/tmp/70c794f2-92d1-49cf-ab4d-4e79c3d500bf_buggy.java b/tmp/e578c547-5d61-4859-a290-9b60842a5757_fixed.java
index 71189c3..e130b41 100644
--- a/tmp/70c794f2-92d1-49cf-ab4d-4e79c3d500bf_buggy.java
+++ b/tmp/e578c547-5d61-4859-a290-9b60842a5757_fixed.java
@@ -1,46 +1,55 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
-        for (final Iterator i = options.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
+    for (final Iterator<Option> i = options.iterator(); i.hasNext();) {
+        final Option option = i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            // Ensure that the value is validated as the correct type
+            if (option.getArgument() != null) {
+                Object value = commandLine.getValue(option);
+                if (value != null && !(value instanceof String) && !(value instanceof File)) {
+                    throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
+                            option.getPreferredName());
+                }
                 option.validate(commandLine);
+            } else {
+                option.validate(commandLine);
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                 unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
-        for (final Iterator i = anonymous.iterator(); i.hasNext();) {
-            final Option option = (Option) i.next();
+    for (final Iterator<Option> i = anonymous.iterator(); i.hasNext();) {
+        final Option option = i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
