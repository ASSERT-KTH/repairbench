diff --git a/tmp/06080fb4-a2f3-4ac4-b352-443873ac1c14_buggy.java b/tmp/d84e05cb-399c-46d4-82f5-7f2164a92ccd_fixed.java
index 19fd63e..139ed2d 100644
--- a/tmp/06080fb4-a2f3-4ac4-b352-443873ac1c14_buggy.java
+++ b/tmp/d84e05cb-399c-46d4-82f5-7f2164a92ccd_fixed.java
@@ -1,24 +1,31 @@
   /**
    * @return Whether the node is a block with a single statement that is
-   *     an expression.
+   *     an expression, and that expression is not an EXPR_RESULT that could be
+   *     affected by the IE bug described in
+   *     http://code.google.com/p/closure-compiler/issues/detail?id=291
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
+        if (maybeExpr.getType() == Token.EXPR_RESULT) {
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+          Node expr = maybeExpr.getFirstChild();
+          if (expr.getType() == Token.CALL) {
+            Node callee = expr.getFirstChild();
+            if (callee.getType() == Token.GETPROP &&
+                callee.getString().equals("onchange")) {
+              return false;
+            }
+          }
+        }
         return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
-
     return false;
   }
\ No newline at end of file
