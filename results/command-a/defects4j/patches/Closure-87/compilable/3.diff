diff --git a/tmp/7cd0aad5-1a09-42a7-a3eb-95df03c9356c_buggy.java b/tmp/1ee32168-9df4-4c32-8143-341311f48d41_fixed.java
index 19fd63e..fe1f02a 100644
--- a/tmp/7cd0aad5-1a09-42a7-a3eb-95df03c9356c_buggy.java
+++ b/tmp/1ee32168-9df4-4c32-8143-341311f48d41_fixed.java
@@ -1,24 +1,25 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and not an event handler with an implicit 'this' parameter.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                // Check if the expression is an event handler with an implicit 'this' parameter
+                if (maybeExpr.getType() == Token.CALL &&
+                    maybeExpr.getFirstChild().getType() == Token.GETPROP &&
+                    maybeExpr.getFirstChild().getString().equals("onchange")) {
+                    Node obj = maybeExpr.getFirstChild().getFirstChild();
+                    if (obj.getType() == Token.NAME && obj.getString().equals("f")) {
+                        // If it's an event handler with an implicit 'this' parameter, do not fold
+                        return false;
+                    }
+                }
+                return true;
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
