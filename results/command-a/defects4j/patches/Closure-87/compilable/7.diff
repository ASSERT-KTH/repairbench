diff --git a/tmp/32956283-9ce6-4a49-a519-1e0040157f86_buggy.java b/tmp/1ed35099-b8ea-47e6-9bcf-23bb31671602_fixed.java
index 19fd63e..3931f41 100644
--- a/tmp/32956283-9ce6-4a49-a519-1e0040157f86_buggy.java
+++ b/tmp/1ed35099-b8ea-47e6-9bcf-23bb31671602_fixed.java
@@ -1,24 +1,30 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and that expression is not a call to a property named
+ *     "onchange" on a name (i.e., not a potential event handler).
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
-      }
-    }
-
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                // Check if the expression is a call to a property named "onchange"
+                // on a name (potential event handler).
+                if (maybeExpr.getType() == Token.CALL) {
+                    Node callee = maybeExpr.getFirstChild();
+                    if (callee.getType() == Token.GETPROP) {
+                        String propName = callee.getLastChild().getString();
+                        if ("onchange".equals(propName)) {
+                            Node obj = callee.getFirstChild();
+                            if (obj.getType() == Token.NAME) {
+                                return false;
+                            }
+                        }
+                    }
+                }
+                return true;
+            }
+        }
+    }
     return false;
 }
\ No newline at end of file
