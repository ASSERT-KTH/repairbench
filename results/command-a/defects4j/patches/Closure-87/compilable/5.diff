diff --git a/tmp/5a3f9df1-93b2-452a-8e80-549ab8ae3474_buggy.java b/tmp/092c7c16-601f-4689-84db-859c9b6555ea_fixed.java
index 19fd63e..516a936 100644
--- a/tmp/5a3f9df1-93b2-452a-8e80-549ab8ae3474_buggy.java
+++ b/tmp/092c7c16-601f-4689-84db-859c9b6555ea_fixed.java
@@ -1,24 +1,45 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and the expression is not an EXPR_RESULT that could
+ *     trigger the IE bug related to event handlers.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+            // Check if the expression is an EXPR_RESULT that could trigger the IE bug
+            if (maybeExpr.getType() == Token.EXPR_RESULT) {
+                Node expr = maybeExpr.getFirstChild();
+                // The IE bug is triggered when the expression is a CALL node
+                // with a GETPROP or GETELEM parent that has a special property name
+                // like 'onchange'.
+                if (expr.getType() == Token.CALL) {
+                    Node callee = expr.getFirstChild();
+                    if (callee.getType() == Token.GETPROP || callee.getType() == Token.GETELEM) {
+                        String propName = callee.getLastChild().getString();
+                        if (isEventHandlerProperty(propName)) {
+                            return false;
+                        }
+                    }
+                }
             }
+            return true;
+        }
+    }
+    return false;
 }
 
+private boolean isEventHandlerProperty(String propName) {
+    // List of common event handler properties that could trigger the IE bug
+    String[] eventHandlerProps = {
+        "onchange", "onclick", "onkeydown", "onkeyup", "onkeypress",
+        "onload", "onmousedown", "onmousemove", "onmouseout", "onmouseover",
+        "onmouseup", "onreset", "onselect", "onsubmit", "onunload"
+    };
+    for (String prop : eventHandlerProps) {
+        if (prop.equals(propName)) {
+            return true;
+        }
+    }
     return false;
 }
\ No newline at end of file
