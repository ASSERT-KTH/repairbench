diff --git a/tmp/59e34e83-5850-406e-91b9-ae5ffc6dc615_buggy.java b/tmp/94b5e1b0-3db8-4192-9127-cc809e458e5a_fixed.java
index 19fd63e..af227f2 100644
--- a/tmp/59e34e83-5850-406e-91b9-ae5ffc6dc615_buggy.java
+++ b/tmp/94b5e1b0-3db8-4192-9127-cc809e458e5a_fixed.java
@@ -1,24 +1,23 @@
 /**
  * @return Whether the node is a block with a single statement that is
-   *     an expression.
+ *     an expression, and the expression is not a method call with an implicit 'this' parameter.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                // Check if the expression is a method call with an implicit 'this' parameter
+                if (maybeExpr.getType() == Token.CALL &&
+                    maybeExpr.getFirstChild().getType() == Token.GETPROP &&
+                    maybeExpr.getFirstChild().getQualifiedName() != null &&
+                    maybeExpr.getFirstChild().getQualifiedName().contains("on")) {
+                    // If it's a method call with an implicit 'this' parameter, don't fold
+                    return false;
+                }
+                return true;
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
