diff --git a/tmp/a22a9d56-0611-49f4-b88b-407230111d40_buggy.java b/tmp/b0b89bbb-064f-47b0-aa63-ed184d12c614_fixed.java
index 9d69396..3a77d8e 100644
--- a/tmp/a22a9d56-0611-49f4-b88b-407230111d40_buggy.java
+++ b/tmp/b0b89bbb-064f-47b0-aa63-ed184d12c614_fixed.java
@@ -1,46 +1,58 @@
 /**
  * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
  * <blockquote>
  * The checksum is calculated by taking the sum of the unsigned byte values
  * of the header block with the eight checksum bytes taken to be ascii
  * spaces (decimal value 32). It is stored as a six digit octal number with
  * leading zeroes followed by a NUL and then a space. Various
  * implementations do not adhere to this format. For better compatibility,
  * ignore leading and trailing whitespace, and get the first six digits. In
  * addition, some historic tar implementations treated bytes as signed.
  * Implementations typically calculate the checksum both ways, and treat it
  * as good if either the signed or unsigned sum matches the included
  * checksum.
  * </blockquote>
  * <p>
  * The return value of this method should be treated as a best-effort
  * heuristic rather than an absolute and final truth. The checksum
  * verification logic may well evolve over time as more special cases
  * are encountered.
  *
  * @param header tar header
  * @return whether the checksum is reasonably good
  * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
  * @since 1.5
  */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
     int digits = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+            if ('0' <= b && b <= '7' && digits < 6) {
+                storedSum = storedSum * 8 + (b - '0');
+                digits++;
+            } else if (b == ' ' || b == '\0') {
+                // Allow space or NUL after the checksum
+                continue;
+            } else {
+                // Invalid character in checksum field, break early
+                break;
             }
+            // Replace checksum bytes with spaces for sum calculation
             b = ' ';
         }
         unsignedSum += 0xff & b;
         signedSum += b;
     }
+
+    // Ensure we have exactly 6 digits for a valid checksum
+    if (digits != 6) {
+        return false;
+    }
+
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
