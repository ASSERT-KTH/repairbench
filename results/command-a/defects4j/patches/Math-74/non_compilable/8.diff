diff --git a/tmp/b3453006-7441-4014-a209-9ca98698205b_buggy.java b/tmp/ea5de8e8-58fc-4583-a94e-9ea673b84250_fixed.java
index eb491d5..9aae231 100644
--- a/tmp/b3453006-7441-4014-a209-9ca98698205b_buggy.java
+++ b/tmp/ea5de8e8-58fc-4583-a94e-9ea673b84250_fixed.java
@@ -1,170 +1,185 @@
 /** {@inheritDoc} */
 @Override
 public double integrate(final FirstOrderDifferentialEquations equations,
                         final double t0, final double[] y0,
                         final double t, final double[] y)
     throws DerivativeException, IntegratorException {
 
     sanityChecks(equations, t0, y0, t, y);
     setEquations(equations);
     resetEvaluations();
     final boolean forward = t > t0;
 
-    // create some internal working arrays
+    // Create some internal working arrays
     final int stages = c.length + 1;
     if (y != y0) {
         System.arraycopy(y0, 0, y, 0, y0.length);
     }
     final double[][] yDotK = new double[stages][y0.length];
     final double[] yTmp = new double[y0.length];
 
-    // set up an interpolator sharing the integrator arrays
+    // Set up an interpolator sharing the integrator arrays
     AbstractStepInterpolator interpolator;
     if (requiresDenseOutput() || (!eventsHandlersManager.isEmpty())) {
         final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
         rki.reinitialize(this, yTmp, yDotK, forward);
         interpolator = rki;
     } else {
         interpolator = new DummyStepInterpolator(yTmp, forward);
     }
     interpolator.storeTime(t0);
 
-    // set up integration control objects
+    // Set up integration control objects
     stepStart = t0;
     double hNew = 0;
     boolean firstTime = true;
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
     CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
-    // main integration loop
+    // Initialize the Adams predictor-corrector method
+    if (nSteps > 1) {
+        // Initialize the Adams method history
+        for (int i = 1; i < nSteps; i++) {
+            stepSize = (t - t0) / nSteps;
+            stepStart = t0 + i * stepSize;
+            computeDerivatives(stepStart, y, yDotK[0]);
+            for (int j = 0; j < y0.length; ++j) {
+                yTmp[j] = y[j] + stepSize * yDotK[0][j];
+            }
+            System.arraycopy(yTmp, 0, y, 0, y0.length);
+        }
+        stepStart = t0 + (nSteps - 1) * stepSize;
+        firstTime = false;
+    }
+
+    // Main integration loop
     while (!lastStep) {
 
         interpolator.shift();
 
         double error = 0;
         for (boolean loop = true; loop;) {
 
             if (firstTime || !fsal) {
-          // first stage
+                // First stage
                 computeDerivatives(stepStart, y, yDotK[0]);
             }
 
             if (firstTime) {
                 final double[] scale;
                 if (vecAbsoluteTolerance == null) {
                     scale = new double[y0.length];
                     java.util.Arrays.fill(scale, scalAbsoluteTolerance);
                 } else {
                     scale = vecAbsoluteTolerance;
                 }
                 hNew = initializeStep(equations, forward, getOrder(), scale,
                                       stepStart, y, yDotK[0], yTmp, yDotK[1]);
                 firstTime = false;
             }
 
             stepSize = hNew;
 
-        // next stages
-        for (int k = 1; k < stages; ++k) {
-
+            // Adams predictor
             for (int j = 0; j < y0.length; ++j) {
-            double sum = a[k-1][0] * yDotK[0][j];
-            for (int l = 1; l < k; ++l) {
-              sum += a[k-1][l] * yDotK[l][j];
+                double sum = 0;
+                for (int l = 0; l < nSteps; ++l) {
+                    sum += bHat[l] * yDotK[l][j];
                 }
                 yTmp[j] = y[j] + stepSize * sum;
             }
 
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
-
-        }
-
-        // estimate the state at the end of the step
+            // Corrector iterations
+            for (int iter = 0; iter < correctorIterations; ++iter) {
+                computeDerivatives(stepStart + stepSize, yTmp, yDotK[nSteps]);
                 for (int j = 0; j < y0.length; ++j) {
-          double sum    = b[0] * yDotK[0][j];
-          for (int l = 1; l < stages; ++l) {
+                    double sum = 0;
+                    for (int l = 0; l < nSteps; ++l) {
                         sum += b[l] * yDotK[l][j];
                     }
+                    sum += b[nSteps] * yDotK[nSteps][j];
                     yTmp[j] = y[j] + stepSize * sum;
                 }
+            }
 
-        // estimate the error at the end of the step
+            // Estimate the error at the end of the step
             error = estimateError(yDotK, y, yTmp, stepSize);
             if (error <= 1.0) {
 
-          // discrete events handling
+                // Discrete events handling
                 interpolator.storeTime(stepStart + stepSize);
                 if (manager.evaluateStep(interpolator)) {
                     final double dt = manager.getEventTime() - stepStart;
                     if (Math.abs(dt) <= Math.ulp(stepStart)) {
-                  // rejecting the step would lead to a too small next step, we accept it
+                        // Rejecting the step would lead to a too small next step, we accept it
                         loop = false;
                     } else {
-                  // reject the step to match exactly the next switch time
+                        // Reject the step to match exactly the next switch time
                         hNew = dt;
                     }
                 } else {
-            // accept the step
+                    // Accept the step
                     loop = false;
                 }
 
             } else {
-          // reject the step and attempt to reduce error by stepsize control
+                // Reject the step and attempt to reduce error by stepsize control
                 final double factor =
                     Math.min(maxGrowth,
                              Math.max(minReduction, safety * Math.pow(error, exp)));
                 hNew = filterStep(stepSize * factor, forward, false);
             }
 
         }
 
-      // the step has been accepted
+        // Update the history of derivatives
+        System.arraycopy(yDotK[0], 0, yDotK[nSteps], 0, y0.length);
+        for (int i = 0; i < nSteps - 1; ++i) {
+            System.arraycopy(yDotK[i + 1], 0, yDotK[i], 0, y0.length);
+        }
+
+        // The step has been accepted
         final double nextStep = stepStart + stepSize;
         System.arraycopy(yTmp, 0, y, 0, y0.length);
         manager.stepAccepted(nextStep, y);
         lastStep = manager.stop();
 
-      // provide the step data to the step handler
+        // Provide the step data to the step handler
         interpolator.storeTime(nextStep);
         for (StepHandler handler : stepHandlers) {
             handler.handleStep(interpolator, lastStep);
         }
         stepStart = nextStep;
 
-      if (fsal) {
-        // save the last evaluation for the next step
-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);
-      }
-
         if (manager.reset(stepStart, y) && !lastStep) {
-        // some event handler has triggered changes that
+            // Some event handler has triggered changes that
             // invalidate the derivatives, we need to recompute them
             computeDerivatives(stepStart, y, yDotK[0]);
         }
 
         if (!lastStep) {
-        // in some rare cases we may get here with stepSize = 0, for example
+            // In some rare cases we may get here with stepSize = 0, for example
             // when an event occurs at integration start, reducing the first step
-        // to zero; we have to reset the step to some safe non zero value
+            // to zero; we have to reset the step to some safe non-zero value
             stepSize = filterStep(stepSize, forward, true);
 
-        // stepsize control for next step
+            // Stepsize control for next step
             final double factor = Math.min(maxGrowth,
                                            Math.max(minReduction,
                                                     safety * Math.pow(error, exp)));
             final double scaledH = stepSize * factor;
             final double nextT = stepStart + scaledH;
             final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
             hNew = filterStep(scaledH, forward, nextIsLast);
         }
 
     }
 
     final double stopTime = stepStart;
     resetInternalState();
     return stopTime;
 
 }
\ No newline at end of file
