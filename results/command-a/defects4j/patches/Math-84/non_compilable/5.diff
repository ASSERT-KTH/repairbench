diff --git a/tmp/ab7ce624-3f73-405d-9aa6-63e0a933fe08_buggy.java b/tmp/48992a15-b1ee-4d4d-a796-2a6319a847a6_fixed.java
index 5f1dcf2..9c3d0da 100644
--- a/tmp/ab7ce624-3f73-405d-9aa6-63e0a933fe08_buggy.java
+++ b/tmp/48992a15-b1ee-4d4d-a796-2a6319a847a6_fixed.java
@@ -1,41 +1,77 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = replaceWorstPoint(original, reflected, comparator);
+            } else {
+                // accept the expanded simplex
+                simplex = replaceWorstPoint(original, expanded, comparator);
             }
 
+            // check convergence
+            if (checkConvergence(simplex, comparator)) {
                 return;
+            }
 
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = replaceWorstPoint(original, contracted, comparator);
 
             // check convergence
+            if (checkConvergence(simplex, comparator)) {
                 return;
             }
+        } else {
+            // go to the next iteration with a smaller simplex
+            reduceStepSize();
+        }
+    }
 
+    // max iterations exceeded
+    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
 }
 
+private RealPointValuePair[] replaceWorstPoint(final RealPointValuePair[] original, 
+                                               final RealPointValuePair replacement,
+                                               final Comparator<RealPointValuePair> comparator) {
+    RealPointValuePair[] newSimplex = original.clone();
+    int worstIndex = 0;
+    for (int i = 1; i < newSimplex.length; i++) {
+        if (comparator.compare(newSimplex[i], newSimplex[worstIndex]) > 0) {
+            worstIndex = i;
+        }
+    }
+    newSimplex[worstIndex] = replacement;
+    return newSimplex;
+}
+
+private boolean checkConvergence(final RealPointValuePair[] simplex, 
+                                 final Comparator<RealPointValuePair> comparator) {
+    final double[] values = new double[simplex.length];
+    for (int i = 0; i < simplex.length; i++) {
+        values[i] = simplex[i].getValue();
+    }
+    return getConvergenceChecker().converged(0, values);
 }
\ No newline at end of file
