diff --git a/tmp/6ba15d2b-9578-4f6d-9bb9-e96eb3db508e_buggy.java b/tmp/6fa5abbc-ca49-4983-a07e-cc58d032b24b_fixed.java
index 5f1dcf2..878a203 100644
--- a/tmp/6ba15d2b-9578-4f6d-9bb9-e96eb3db508e_buggy.java
+++ b/tmp/6fa5abbc-ca49-4983-a07e-cc58d032b24b_fixed.java
@@ -1,41 +1,61 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    simplex = new RealPointValuePair[] { expanded };
                 }
 
+                // check convergence
+                if (checkConvergence()) {
                     return;
+                }
+
+                continue;
 
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] { contracted };
 
                 // check convergence
+                if (checkConvergence()) {
                     return;
                 }
+            } else {
+                // contract the simplex through its best point
+                simplex = contractOutside(best, comparator);
 
+                // check convergence
+                if (checkConvergence()) {
+                    return;
+                }
             }
 
         }
+
+        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
+
+    }
\ No newline at end of file
