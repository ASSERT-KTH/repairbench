diff --git a/tmp/6cefc558-c0cb-4576-8c51-f789fbe9c5d0_buggy.java b/tmp/4647cd8f-6687-404e-8abe-6a1961c23dc3_fixed.java
index 5f1dcf2..858a98e 100644
--- a/tmp/6cefc558-c0cb-4576-8c51-f789fbe9c5d0_buggy.java
+++ b/tmp/4647cd8f-6687-404e-8abe-6a1961c23dc3_fixed.java
@@ -1,41 +1,58 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean improved = true;
 
+        while (improved) {
+
+            improved = false;
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
+                improved = true;
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = evaluateNewSimplex(original, khi, comparator);
                 }
-
-                return;
-
-            }
-
+            } else {
                 // compute the contracted simplex
                 final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
                 if (comparator.compare(contracted, best) < 0) {
                     // accept the contracted simplex
-
+                    simplex = evaluateNewSimplex(original, gamma, comparator);
+                    improved = true;
+                } else {
                     // check convergence
-                return;
+                    if (comparator.compare(contracted, best) >= 0) {
+                        throw new OptimizationException(new ConvergenceException(
+                            Localization.TRANSLATION_UNABLE_TO_FIND_IMPROVING_POINT,
+                            getEvaluations(),
+                            getIterations()));
+                    }
                 }
-
             }
 
+            // Check for convergence based on maximal iterations or evaluations
+            if (getIterations() >= getMaxIterations() || getEvaluations() >= getMaxEvaluations()) {
+                throw new OptimizationException(new MaxIterationsExceededException(
+                    getMaxIterations(),
+                    getEvaluations(),
+                    getIterations()));
+            }
+        }
     }
\ No newline at end of file
