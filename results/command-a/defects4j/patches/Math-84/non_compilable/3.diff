diff --git a/tmp/974bb469-bd4a-4bc3-9021-372f8085b7be_buggy.java b/tmp/9da1232d-2d0e-4456-b190-56d290ee09fb_fixed.java
index 5f1dcf2..81e21bb 100644
--- a/tmp/974bb469-bd4a-4bc3-9021-372f8085b7be_buggy.java
+++ b/tmp/9da1232d-2d0e-4456-b190-56d290ee09fb_fixed.java
@@ -1,41 +1,48 @@
 /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
             incrementIterationsCounter();
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
 
                 // compute the expanded simplex
                 final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
                     simplex = reflectedSimplex;
+                } else {
+                    // accept the expanded simplex
+                    simplex = computeSimplex(original, expanded, comparator);
                 }
-
                 return;
-
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
+                simplex = computeSimplex(original, contracted, comparator);
                 // check convergence
                 return;
             }
 
+            // check convergence
+            if (isConverged(comparator)) {
+                return;
+            }
         }
 
+        // max iterations or evaluations exceeded
+        throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
     }
\ No newline at end of file
