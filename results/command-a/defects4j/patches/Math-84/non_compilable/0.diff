diff --git a/tmp/106f1b6a-8b46-4c3b-addb-1c71e05f351e_buggy.java b/tmp/c91f463b-00a1-471f-b33f-4d2da4fab8c0_fixed.java
index 5f1dcf2..5c308ea 100644
--- a/tmp/106f1b6a-8b46-4c3b-addb-1c71e05f351e_buggy.java
+++ b/tmp/c91f463b-00a1-471f-b33f-4d2da4fab8c0_fixed.java
@@ -1,41 +1,46 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                simplex = evaluateNewSimplex(original, 1.0, comparator);
+            } else {
+                // accept the expanded simplex
+                simplex = evaluateNewSimplex(original, khi, comparator);
             }
-
             return;
-
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            simplex = evaluateNewSimplex(original, gamma, comparator);
+            return;
+        }
 
         // check convergence
+        if (hasConverged(comparator)) {
             return;
         }
-
     }
 
+    // max iterations reached without convergence
+    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
 }
\ No newline at end of file
