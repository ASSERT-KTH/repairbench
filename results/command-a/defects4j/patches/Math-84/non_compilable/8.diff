diff --git a/tmp/3b58b72c-4348-426f-a4be-7a54a591a515_buggy.java b/tmp/34c67257-43fb-4902-b615-361da09b7998_fixed.java
index 5f1dcf2..a7d5b68 100644
--- a/tmp/3b58b72c-4348-426f-a4be-7a54a591a515_buggy.java
+++ b/tmp/34c67257-43fb-4902-b615-361da09b7998_fixed.java
@@ -1,41 +1,53 @@
     /** {@inheritDoc} */
     @Override
     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+        boolean improved = true;
+        
+        while (improved) {
 
             incrementIterationsCounter();
+            improved = false;
 
             // save the original vertex
             final RealPointValuePair[] original = simplex;
             final RealPointValuePair best = original[0];
 
             // perform a reflection step
             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
             if (comparator.compare(reflected, best) < 0) {
+                improved = true;
 
                 // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                 if (comparator.compare(reflected, expanded) <= 0) {
                     // accept the reflected simplex
-                    simplex = reflectedSimplex;
+                    simplex = replaceWorstPoint(simplex, reflected, comparator);
+                } else {
+                    // accept the expanded simplex
+                    simplex = replaceWorstPoint(simplex, expanded, comparator);
                 }
 
-                return;
-
+                continue; // Skip contraction as we've improved
             }
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = replaceWorstPoint(simplex, contracted, comparator);
+                improved = true;
+            } else {
+                // perform a shrink step
+                simplex = shrinkSimplex(original, comparator);
+            }
 
             // check convergence
+            if (!improved || hasConverged()) {
                 return;
             }
 
         }
 
     }
\ No newline at end of file
