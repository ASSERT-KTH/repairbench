diff --git a/tmp/503aad62-2653-49f0-adc3-0fefe5213989_buggy.java b/tmp/633566c0-2432-43a1-9804-74922b41d459_fixed.java
index 5f1dcf2..6666806 100644
--- a/tmp/503aad62-2653-49f0-adc3-0fefe5213989_buggy.java
+++ b/tmp/633566c0-2432-43a1-9804-74922b41d459_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+                if (checkConvergence(comparator)) {
+                    return;
                 }
-
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] { expanded };
+                if (checkConvergence(comparator)) {
                     return;
-
+                }
+            }
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = new RealPointValuePair[] { contracted };
+            if (checkConvergence(comparator)) {
+                return;
+            }
+        } else {
+            // perform a shrink step
+            simplex = shrinkSimplex(comparator);
+            if (checkConvergence(comparator)) {
                 return;
             }
+        }
+    }
 
+    // max iterations or evaluations exceeded
+    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
 }
 
+private boolean checkConvergence(final Comparator<RealPointValuePair> comparator) {
+    if (getConvergenceChecker() != null) {
+        return getConvergenceChecker().converged(getIterations(), simplex, comparator);
+    }
+    return false;
 }
\ No newline at end of file
