diff --git a/tmp/e28f4952-cf50-43e0-bcbb-f3589be6d4b5_buggy.java b/tmp/2cc7dedb-903e-4034-8053-e23addd57643_fixed.java
index 5f1dcf2..f0639cb 100644
--- a/tmp/e28f4952-cf50-43e0-bcbb-f3589be6d4b5_buggy.java
+++ b/tmp/2cc7dedb-903e-4034-8053-e23addd57643_fixed.java
@@ -1,41 +1,65 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (getIterations() < getMaxIterations() && getEvaluations() < getMaxEvaluations()) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
+            } else {
+                // accept the expanded simplex
+                simplex = new RealPointValuePair[] {expanded};
             }
 
+            // check convergence
+            if (isConverged(best, reflected)) {
                 return;
-
             }
 
+        } else {
+
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
+                simplex = new RealPointValuePair[] {contracted};
 
                 // check convergence
+                if (isConverged(best, contracted)) {
                     return;
                 }
+            } else {
+                // reset the simplex to the best point
+                simplex = new RealPointValuePair[] {best};
 
+                // check convergence
+                if (isConverged(best, best)) {
+                    return;
+                }
+            }
+        }
+    }
+
+    // max iterations or evaluations exceeded
+    throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));
 }
 
+private boolean isConverged(final RealPointValuePair best, final RealPointValuePair point) {
+    return Math.abs(point.getValue() - best.getValue()) <= getConvergenceChecker().getRelativeThreshold() * Math.abs(best.getValue())
+        || Math.abs(point.getValue() - best.getValue()) <= getConvergenceChecker().getAbsoluteThreshold();
 }
\ No newline at end of file
