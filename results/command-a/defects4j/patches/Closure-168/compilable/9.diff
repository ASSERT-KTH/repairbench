diff --git a/tmp/fb90ef27-fa89-4d9c-b04e-d3c5426a3839_buggy.java b/tmp/8263c3da-af9f-47cd-80bf-d2ecf27db0b9_fixed.java
index b12de99..4cdff5e 100644
--- a/tmp/fb90ef27-fa89-4d9c-b04e-d3c5426a3839_buggy.java
+++ b/tmp/8263c3da-af9f-47cd-80bf-d2ecf27db0b9_fixed.java
@@ -1,52 +1,65 @@
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (t.inGlobalScope()) {
     return;
   }
 
   if (n.isReturn() && n.getFirstChild() != null) {
     data.get(t.getScopeRoot()).recordNonEmptyReturn();
   }
 
   if (t.getScopeDepth() <= 2) {
     // The first-order function analyzer looks at two types of variables:
     //
     // 1) Local variables that are assigned in inner scopes ("escaped vars")
     //
     // 2) Local variables that are assigned more than once.
     //
     // We treat all global variables as escaped by default, so there's
     // no reason to do this extra computation for them.
     return;
   }
 
   if (n.isName() && NodeUtil.isLValue(n) &&
       // Be careful of bleeding functions, which create variables
       // in the inner scope, not the scope where the name appears.
       !NodeUtil.isBleedingFunctionName(n)) {
     String name = n.getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
       if (ownerScope.isLocal()) {
         data.get(ownerScope.getRootNode()).recordAssignedName(name);
       }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      if (scope != ownerScope && ownerScope.isLocal() &&
+          !isCapturedByFunction(n, t)) {
         data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
       }
     }
   } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
              NodeUtil.isLValue(n)) {
     String name = NodeUtil.getRootOfQualifiedName(n).getString();
     Scope scope = t.getScope();
     Var var = scope.getVar(name);
     if (var != null) {
       Scope ownerScope = var.getScope();
-          if (scope != ownerScope && ownerScope.isLocal()) {
+      if (scope != ownerScope && ownerScope.isLocal() &&
+          !isCapturedByFunction(n, t)) {
         data.get(ownerScope.getRootNode())
             .recordEscapedQualifiedName(n.getQualifiedName());
       }
     }
   }
 }
+
+private boolean isCapturedByFunction(Node n, NodeTraversal t) {
+  Node current = n;
+  while (current != null && current != t.getScopeRoot().getParent()) {
+    if (current.isFunction()) {
+      return true;
+    }
+    current = current.getParent();
+  }
+  return false;
+}
\ No newline at end of file
