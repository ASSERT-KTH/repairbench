diff --git a/tmp/d8ea1cb4-bcd4-4ee1-8d04-c9698d44fc8b_buggy.java b/tmp/8fe755f7-3768-4075-af6f-7b9414a7a224_fixed.java
index e69de29..cbef388 100644
--- a/tmp/d8ea1cb4-bcd4-4ee1-8d04-c9698d44fc8b_buggy.java
+++ b/tmp/8fe755f7-3768-4075-af6f-7b9414a7a224_fixed.java
@@ -0,0 +1,52 @@
+public SortedMap<K, V> prefixMap(final K key) {
+    if (key == null) {
+        throw new NullPointerException("Null prefix key is not allowed");
+    }
+
+    final ByteTuple prefix = toByteTuple(key);
+
+    return new TriePrefixMap<>(this, prefix, subTrie(prefix));
+}
+
+private static class TriePrefixMap<K, V> extends AbstractSortedMapDecorator<K, V> {
+    private final PatriciaTrie<V> trie;
+    private final ByteTuple prefix;
+    private final PatriciaTrie<V> subTrie;
+
+    public TriePrefixMap(final PatriciaTrie<V> trie, final ByteTuple prefix, final PatriciaTrie<V> subTrie) {
+        super(new TreeMap<>());
+        this.trie = trie;
+        this.prefix = prefix;
+        this.subTrie = subTrie;
+        initialize();
+    }
+
+    private void initialize() {
+        if (subTrie != null) {
+            final Iterator<Map.Entry<ByteTuple, V>> iter = subTrie.entrySet().iterator();
+            while (iter.hasNext()) {
+                final Map.Entry<ByteTuple, V> entry = iter.next();
+                final ByteTuple key = entry.getKey();
+                final V value = entry.getValue();
+                decorated().put(trie.toKey(concatenate(prefix, key)), value);
+            }
+        }
+    }
+
+    @Override
+    public void clear() {
+        decorated().clear();
+        if (subTrie != null) {
+            for (final ByteTuple key : subTrie.keySet()) {
+                trie.remove(concatenate(prefix, key));
+            }
+        }
+    }
+
+    private ByteTuple concatenate(final ByteTuple prefix, final ByteTuple key) {
+        final byte[] result = new byte[prefix.length() + key.length()];
+        System.arraycopy(prefix.getBytes(), 0, result, 0, prefix.length());
+        System.arraycopy(key.getBytes(), 0, result, prefix.length(), key.length());
+        return new ByteTuple(result);
+    }
+}
\ No newline at end of file
