diff --git a/tmp/6ccb02aa-5f29-4d6f-8cc5-edcb1af5f6c6_buggy.java b/tmp/179632c0-794e-4773-9039-12b7712aa514_fixed.java
index e69de29..14eac93 100644
--- a/tmp/6ccb02aa-5f29-4d6f-8cc5-edcb1af5f6c6_buggy.java
+++ b/tmp/179632c0-794e-4773-9039-12b7712aa514_fixed.java
@@ -0,0 +1,58 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    AbstractMapEntry<K, V> entry = getEntry(prefix);
+    if (entry == null) {
+        // prefix doesn't match any key in the trie, return empty map
+        return Collections.emptySortedMap();
+    }
+
+    final BitSet prefixBitSet = toBitSet(prefix, entry.getKey());
+    if (!isPrefix(prefixBitSet, entry.getKeyBitSet())) {
+        // prefix doesn't match any key in the trie, return empty map
+        return Collections.emptySortedMap();
+    }
+
+    final NavigableMap<AbstractMapEntry<K, V>, V> subMap = navigableMap.tailMap(entry, true);
+    return new PrefixSubMap<>(subMap, prefixBitSet, comparator);
+}
+
+private static class PrefixSubMap<K, V> extends NavigableSubMap<K, V> {
+    private final BitSet prefixBitSet;
+
+    PrefixSubMap(final NavigableMap<AbstractMapEntry<K, V>, V> subMap, final BitSet prefixBitSet,
+                 final Comparator<? super K> comparator) {
+        super(subMap, comparator);
+        this.prefixBitSet = prefixBitSet;
+    }
+
+    @Override
+    public void clear() {
+        // Do not allow clearing the prefix map as it would modify the underlying trie
+        throw new UnsupportedOperationException("Prefix map does not support clear operation");
+    }
+
+    @Override
+    protected AbstractMapEntry<K, V> toMapEntry(final AbstractMapEntry<K, V> entry) {
+        return new PrefixMapEntry<>(entry, prefixBitSet);
+    }
+
+    private static class PrefixMapEntry<K, V> extends AbstractMapEntry<K, V> {
+        private final AbstractMapEntry<K, V> entry;
+        private final BitSet prefixBitSet;
+
+        PrefixMapEntry(final AbstractMapEntry<K, V> entry, final BitSet prefixBitSet) {
+            this.entry = entry;
+            this.prefixBitSet = prefixBitSet;
+        }
+
+        @Override
+        public K getKey() {
+            return fromBitSet(prefixBitSet, entry.getKey(), entry.getKeyBitSet());
+        }
+
+        @Override
+        public V getValue() {
+            return entry.getValue();
+        }
+    }
+}
\ No newline at end of file
