diff --git a/tmp/0264f461-13f3-4ff7-be64-40dde4e1627c_buggy.java b/tmp/dae88d1d-d3d5-4f3b-bf5b-5f6483a987b9_fixed.java
index e69de29..b3ddb42 100644
--- a/tmp/0264f461-13f3-4ff7-be64-40dde4e1627c_buggy.java
+++ b/tmp/dae88d1d-d3d5-4f3b-bf5b-5f6483a987b9_fixed.java
@@ -0,0 +1,72 @@
+public SortedMap<K, V> prefixMap(final K prefix) {
+    final BitSet bitset = toBitSet(prefix);
+    final PatriciaTrie.Entry<K, V> entry = findAncestor(root, bitset, bitIndex(prefix));
+    if (entry == null) {
+        return Collections.emptySortedMap();
+    }
+
+    final NavigableMap<BitSet, PatriciaTrie.Entry<K, V>> navigableSubMap = this.map.tailMap(bitset, true);
+    final NavigableMap<K, V> result = new TreeMap<>();
+    for (final PatriciaTrie.Entry<K, V> e : navigableSubMap.values()) {
+        if (e.bitset.startsWith(bitset)) {
+            result.put(fromBitSet(e.bitset), e.getValue());
+        } else {
+            break;
+        }
+    }
+
+    return new PrefixSortedMap<>(result, this);
+}
+
+private class PrefixSortedMap<K, V> extends ForwardingSortedMap<K, V> {
+    private final PatriciaTrie<K, V> trie;
+
+    public PrefixSortedMap(final NavigableMap<K, V> delegate, final PatriciaTrie<K, V> trie) {
+        super(delegate);
+        this.trie = trie;
+    }
+
+    @Override
+    public void clear() {
+        // Do not clear the underlying trie, just clear the delegate map
+        delegate.clear();
+    }
+
+    @Override
+    public Set<K> keySet() {
+        return new PrefixKeySet<>(trie, delegate.keySet());
+    }
+
+    @Override
+    public Collection<V> values() {
+        return new PrefixValues<>(trie, delegate.values());
+    }
+}
+
+private class PrefixKeySet<K> extends ForwardingSet<K> {
+    private final PatriciaTrie<K, V> trie;
+
+    public PrefixKeySet(final PatriciaTrie<K, V> trie, final Set<K> delegate) {
+        super(delegate);
+        this.trie = trie;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return delegate.isEmpty();
+    }
+}
+
+private class PrefixValues<V> extends ForwardingCollection<V> {
+    private final PatriciaTrie<K, V> trie;
+
+    public PrefixValues(final PatriciaTrie<K, V> trie, final Collection<V> delegate) {
+        super(delegate);
+        this.trie = trie;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return delegate.isEmpty();
+    }
+}
\ No newline at end of file
