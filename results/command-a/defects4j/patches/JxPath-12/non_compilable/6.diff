diff --git a/tmp/e536761c-da5c-49cc-a245-b23bbe8fb21f_buggy.java b/tmp/5f578a41-29c6-4118-aaaf-aa05da42b178_fixed.java
index 40f74f7..9dc6cd4 100644
--- a/tmp/e536761c-da5c-49cc-a245-b23bbe8fb21f_buggy.java
+++ b/tmp/5f578a41-29c6-4118-aaaf-aa05da42b178_fixed.java
@@ -1,50 +1,63 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String localName = DOMNodePointer.getLocalName(node);
         String nodeNS = DOMNodePointer.getNamespaceURI(node);
+        
+        // Fix: Correctly handle namespace comparison and wildcard matching
+        if (wildcard) {
             return equalStrings(namespaceURI, nodeNS);
+        } else if (testName.getName().equals(localName)) {
+            // Fix: Properly compare namespace URIs, considering null cases
+            return equalStrings(namespaceURI, nodeNS) &&
+                   equalStrings(testPrefix, node.getPrefix());
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
-                    return nodeType == Node.ELEMENT_NODE
-                            || nodeType == Node.DOCUMENT_NODE;
+                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
-                    return nodeType == Node.CDATA_SECTION_NODE
-                        || nodeType == Node.TEXT_NODE;
+                return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
+
+private static boolean equalStrings(String s1, String s2) {
+    if (s1 == null && s2 == null) {
+        return true;
+    }
+    if (s1 == null || s2 == null) {
+        return false;
+    }
+    return s1.equals(s2);
+}
\ No newline at end of file
