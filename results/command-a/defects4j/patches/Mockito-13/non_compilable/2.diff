diff --git a/tmp/58318b4b-1210-49aa-81f4-e4c366c88759_buggy.java b/tmp/0f671250-3b49-4c2e-806e-29be03d78ed6_fixed.java
index 5481b94..7a8c829 100644
--- a/tmp/58318b4b-1210-49aa-81f4-e4c366c88759_buggy.java
+++ b/tmp/0f671250-3b49-4c2e-806e-29be03d78ed6_fixed.java
@@ -1,49 +1,68 @@
 public Object handle(Invocation invocation) throws Throwable {
     if (invocationContainerImpl.hasAnswersForStubbing()) {
         // stubbing voids with stubVoid() or doAnswer() style
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress
                 .getArgumentMatcherStorage(), invocation);
         invocationContainerImpl.setMethodForStubbing(invocationMatcher);
         return null;
     }
     VerificationMode verificationMode = mockingProgress.pullVerificationMode();
 
     InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),
             invocation);
 
     mockingProgress.validateState();
 
     // if verificationMode is not null then someone is doing verify()
     if (verificationMode != null) {
         // We need to check if verification was started on the correct mock
         // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {
+        if (verificationMode instanceof MockAwareVerificationMode) {
+            MockAwareVerificationMode mockAwareVerificationMode = (MockAwareVerificationMode) verificationMode;
+            if (mockAwareVerificationMode.getMock() == invocation.getMock()) {
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
+                try {
                     verificationMode.verify(data);
+                } catch (VerificationMode.VerificationError e) {
+                    // Re-throw the exception to fail the test
+                    throw e;
+                }
+                return null;
+            } else {
+                // Re-add the verification mode for the correct mock
+                mockingProgress.pushVerificationMode(mockAwareVerificationMode);
+            }
+        } else {
+            // For non-MockAwareVerificationMode, proceed with verification
+            VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);
+            try {
+                verificationMode.verify(data);
+            } catch (VerificationMode.VerificationError e) {
+                // Re-throw the exception to fail the test
+                throw e;
+            }
             return null;
-                // this means there is an invocation on a different mock. Re-adding verification mode 
-                // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
         }
     }
 
     invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);
     OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl);
     mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
     StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);
 
     if (stubbedInvocation != null) {
         stubbedInvocation.captureArgumentsFrom(invocation);
         return stubbedInvocation.answer(invocation);
     } else {
         Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
         // redo setting invocation for potential stubbing in case of partial
         // mocks / spies.
         // Without it, the real method inside 'when' might have delegated
         // to other self method and overwrite the intended stubbed method
         // with a different one. The reset is required to avoid runtime exception that validates return type with stubbed method signature.
         invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher);
         return ret;
     }
 }
\ No newline at end of file
