diff --git a/tmp/e38aacae-6434-44eb-bb39-809173ebd8ef_buggy.java b/tmp/4d6fc0d6-05fe-4ef5-98fc-e68e6da75aa0_fixed.java
index 757067a..1cd4da4 100644
--- a/tmp/e38aacae-6434-44eb-bb39-809173ebd8ef_buggy.java
+++ b/tmp/4d6fc0d6-05fe-4ef5-98fc-e68e6da75aa0_fixed.java
@@ -1,63 +1,72 @@
 /**
  * Find a zero in the given interval with an initial guess.
  * <p>Throws <code>IllegalArgumentException</code> if the values of the
  * function at the three points have the same sign (note that it is
  * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
+ * opposite sign function-wise), or if the initial guess is not between min and max.</p>
  *
  * @param f function to solve.
  * @param min the lower bound for the interval.
  * @param max the upper bound for the interval.
  * @param initial the start value to use (must be set to min if no
  * initial point is known).
  * @return the value where the function is zero
  * @throws MaxIterationsExceededException the maximum iteration count
  * is exceeded
  * @throws FunctionEvaluationException if an error occurs evaluating
  *  the function
  * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+ * (even if it <em>is</em> a root), or if the function values at min, max, and initial do not bracket a root.
  */
 public double solve(final UnivariateRealFunction f,
                     final double min, final double max, final double initial)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
     clearResult();
     verifySequence(min, initial, max);
 
+    // Check if the initial guess is within the interval
+    if (initial < min || initial > max) {
+        throw new IllegalArgumentException("Initial guess must be between min and max");
+    }
+
     // return the initial guess if it is good enough
     double yInitial = f.value(initial);
     if (Math.abs(yInitial) <= functionValueAccuracy) {
         setResult(initial, 0);
         return result;
     }
 
     // return the first endpoint if it is good enough
     double yMin = f.value(min);
     if (Math.abs(yMin) <= functionValueAccuracy) {
         setResult(yMin, 0);
         return result;
     }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+    // Check if min and initial bracket the root
+    if (yInitial * yMin >= 0) {
+        throw new IllegalArgumentException("Function values at min and initial do not bracket a root");
     }
 
     // return the second endpoint if it is good enough
     double yMax = f.value(max);
     if (Math.abs(yMax) <= functionValueAccuracy) {
         setResult(yMax, 0);
         return result;
     }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+    // Check if initial and max bracket the root
+    if (yInitial * yMax >= 0) {
+        throw new IllegalArgumentException("Function values at initial and max do not bracket a root");
     }
 
-
     // full Brent algorithm starting with provided initial guess
     return solve(f, min, yMin, max, yMax, initial, yInitial);
+}
 
+private void verifySequence(double start, double midpoint, double end) {
+    if (start >= midpoint || midpoint >= end) {
+        throw new IllegalArgumentException("Endpoints and initial guess must be in increasing order");
+    }
 }
\ No newline at end of file
