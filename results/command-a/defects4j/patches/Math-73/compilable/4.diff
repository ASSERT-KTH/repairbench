diff --git a/tmp/2eb4c595-23f0-44c5-aedf-9cc0337752c6_buggy.java b/tmp/e7a2a955-6b7c-4ea4-af8d-cf2083cf2bde_fixed.java
index 757067a..3c32bd0 100644
--- a/tmp/2eb4c595-23f0-44c5-aedf-9cc0337752c6_buggy.java
+++ b/tmp/e7a2a955-6b7c-4ea4-af8d-cf2083cf2bde_fixed.java
@@ -1,63 +1,66 @@
 /**
      * Find a zero in the given interval with an initial guess.
      * <p>Throws <code>IllegalArgumentException</code> if the values of the
      * function at the three points have the same sign (note that it is
      * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
+     * opposite sign function-wise). Also, the initial guess must be between
+     * the min and max endpoints.</p>
      *
      * @param f function to solve.
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
+     * @param initial the start value to use (must be between min and max if provided).
      * @return the value where the function is zero
      * @throws MaxIterationsExceededException the maximum iteration count
      * is exceeded
      * @throws FunctionEvaluationException if an error occurs evaluating
      *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
+     * @throws IllegalArgumentException if the initial guess is not between min and max,
+     * or if the function values at the endpoints do not bracket a root.
      */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
+        // Check if initial guess is within bounds
+        if (initial < min || initial > max) {
+            throw new IllegalArgumentException("Initial guess must be between min and max.");
+        }
+
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+        // Check if min and initial bracket the root
+        if (yInitial * yMin >= 0) {
+            throw new IllegalArgumentException("Function values at min and initial do not bracket a root.");
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
+        // Check if initial and max bracket the root
+        if (yInitial * yMax >= 0) {
+            throw new IllegalArgumentException("Function values at initial and max do not bracket a root.");
         }
 
-
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
