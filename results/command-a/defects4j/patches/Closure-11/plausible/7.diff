diff --git a/tmp/f5ba0080-0416-4f08-a3bf-f23f9d550d96_buggy.java b/tmp/79deb6b0-95cd-4abb-9bb6-dbb84c53b443_fixed.java
index 57c40b2..caf4dd4 100644
--- a/tmp/f5ba0080-0416-4f08-a3bf-f23f9d550d96_buggy.java
+++ b/tmp/79deb6b0-95cd-4abb-9bb6-dbb84c53b443_fixed.java
@@ -1,27 +1,32 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
         report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
             "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        if (parent.isAssign() && parent.getFirstChild() == n) {
+            // If the parent is an assignment and the GETPROP is the left-hand side,
+            // we should not check property access here. The check will be done
+            // when visiting the assignment node.
+            ensureTyped(t, n);
+            return;
+        }
         checkPropertyAccess(childType, property.getString(), t, n);
     }
     ensureTyped(t, n);
 }
\ No newline at end of file
