diff --git a/tmp/fa8988a8-e528-4e6a-9e13-942d11e0d5d5_buggy.java b/tmp/f16c084c-2a04-457a-8185-b310709d2b1f_fixed.java
index 57c40b2..eb49f19 100644
--- a/tmp/fa8988a8-e528-4e6a-9e13-942d11e0d5d5_buggy.java
+++ b/tmp/f16c084c-2a04-457a-8185-b310709d2b1f_fixed.java
@@ -1,27 +1,37 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
+    } else if (n.getJSType() != null && parent.isAssign() && parent.getFirstChild() == n) {
+      // Do nothing if this is an assignment to a property of a typed object
+      // and the GETPROP is the left-hand side of the assignment.
     } else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      if (!childType.isUnknownType() && !childType.isObjectType()) {
+        // If the type is not an object type, we can't check property access.
+        // However, we should still check if the property exists on the object.
+        if (!childType.hasProperty(property.getString())) {
+          report(t, property, TypeValidator.INEXISTENT_PROPERTY,
+              childType.toString(), property.getString());
+        }
+      } else {
         checkPropertyAccess(childType, property.getString(), t, n);
       }
+    }
     ensureTyped(t, n);
   }
\ No newline at end of file
