diff --git a/tmp/2f12ffc5-2374-4f3e-b021-a8d2f2151c14_buggy.java b/tmp/ed837484-96ec-4733-b443-af87dfed2165_fixed.java
index 57c40b2..f663339 100644
--- a/tmp/2f12ffc5-2374-4f3e-b021-a8d2f2151c14_buggy.java
+++ b/tmp/ed837484-96ec-4733-b443-af87dfed2165_fixed.java
@@ -1,27 +1,31 @@
 /**
  * Visits a GETPROP node.
  *
  * @param t The node traversal object that supplies context, such as the
  * scope chain to use in name lookups as well as error reporting.
  * @param n The node being visited.
  * @param parent The parent of <code>n</code>
  */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
   // Lots of types can appear on the left, a call to a void function can
   // never be on the left. getPropertyType will decide what is acceptable
   // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
+  } else if (parent.isAssign() && parent.getFirstChild() == n) {
+    // If the parent is an assignment and the GETPROP is the left-hand side,
+    // we don't need to check the property access here.
     return;
   } else if (validator.expectNotNullOrUndefined(t, n, childType,
       "No properties on this expression", getNativeType(OBJECT_TYPE))) {
     checkPropertyAccess(childType, property.getString(), t, n);
+  } else if (childType.isNullType() || childType.isVoidType()) {
+    report(t, n, NULL_DEREF_ERROR, childType.toString());
   }
   ensureTyped(t, n);
 }
\ No newline at end of file
