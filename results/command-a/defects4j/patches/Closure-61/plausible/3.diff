diff --git a/tmp/991fd0c5-80f7-4152-bfaa-4a40c2586eef_buggy.java b/tmp/339bea88-2e39-45ba-830a-8d870ad55814_fixed.java
index b36c3f0..22e9df1 100644
--- a/tmp/991fd0c5-80f7-4152-bfaa-4a40c2586eef_buggy.java
+++ b/tmp/339bea88-2e39-45ba-830a-8d870ad55814_fixed.java
@@ -1,58 +1,62 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+      Node objNode = nameNode.getFirstChild();
+      String propName = nameNode.getLastChild().getString();
+
+      if (OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(propName)) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && evaluatesToLocalValue(objNode)) {
         return false;
       }
 
       // Functions in the "Math" namespace have no side effects.
+      if (objNode.getType() == Token.NAME && "Math".equals(objNode.getString())) {
+        return false;
+      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        if (objNode.getType() == Token.REGEXP
+            && REGEXP_METHODS.contains(propName)) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        } else if (objNode.getType() == Token.STRING
+            && STRING_REGEXP_METHODS.contains(propName)) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
+                  || param.getType() == Token.REGEXP)) {
             return false;
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
