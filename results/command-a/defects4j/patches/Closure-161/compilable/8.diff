diff --git a/tmp/1e43a31c-f29c-4101-b4a8-a719e5a96e86_buggy.java b/tmp/6544f04e-aa0a-418d-9c36-b7dcfa4fb273_fixed.java
index 1303a19..181deb0 100644
--- a/tmp/1e43a31c-f29c-4101-b4a8-a719e5a96e86_buggy.java
+++ b/tmp/6544f04e-aa0a-418d-9c36-b7dcfa4fb273_fixed.java
@@ -1,45 +1,56 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    if (parent != null && parent.getType() == Token.ASSIGN) {
+        return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+    int count = 0;
+    while (elem != null && count < intIndex) {
         elem = elem.getNext();
+        count++;
     }
 
     if (elem == null) {
+        if (parent != null && parent.getType() == Token.EXPR_RESULT) {
+            // If the parent is an expression statement, it's safe to ignore the out-of-bounds error
+            // and just return undefined, as the assignment would be ignored anyway.
+            return NodeUtil.newUndefinedNode(n);
+        } else {
             error(INDEX_OUT_OF_BOUNDS_ERROR, right);
             return n;
         }
+    }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
