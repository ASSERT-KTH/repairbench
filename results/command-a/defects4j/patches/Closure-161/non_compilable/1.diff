diff --git a/tmp/6fccbd8e-6f46-4015-842d-997983f37190_buggy.java b/tmp/020e1520-5be9-40c9-b7fc-c8e19cbeadc0_fixed.java
index 1303a19..3e79dec 100644
--- a/tmp/6fccbd8e-6f46-4015-842d-997983f37190_buggy.java
+++ b/tmp/020e1520-5be9-40c9-b7fc-c8e19cbeadc0_fixed.java
@@ -1,45 +1,61 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+    if (parent.isAssign() && parent.getFirstChild() == n) {
+        return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
         // Sometimes people like to use complex expressions to index into
         // arrays, or strings to index into array methods.
         return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
         error(INVALID_GETELEM_INDEX_ERROR, right);
         return n;
     }
 
     if (intIndex < 0) {
         error(INDEX_OUT_OF_BOUNDS_ERROR, right);
         return n;
     }
 
     Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+    int count = 0;
+    while (elem != null && count < intIndex) {
         elem = elem.getNext();
+        count++;
     }
 
     if (elem == null) {
+        if (parent.isAssign() && parent.getLastChild() == n) {
+            // Allow assignment to create a new element in the array
+            Node newValue = parent.getLastChild().getNext();
+            Node newElem = new Node(Token.EMPTY);
+            newElem.addChildToBack(newValue.cloneNode());
+            left.addChildToBack(newElem);
+            n.getParent().replaceChild(n, newElem);
+            reportCodeChange();
+            return newElem;
+        } else {
             error(INDEX_OUT_OF_BOUNDS_ERROR, right);
             return n;
         }
+    }
 
     if (elem.getType() == Token.EMPTY) {
         elem = NodeUtil.newUndefinedNode(elem);
     } else {
         left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
