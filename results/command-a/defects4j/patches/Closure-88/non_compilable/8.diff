diff --git a/tmp/caed3576-3b24-4986-bb41-d236db3fe082_buggy.java b/tmp/f9ec022b-1a11-416c-ab1c-39fdf98e5aa0_fixed.java
index 9353941..956a0cd 100644
--- a/tmp/caed3576-3b24-4986-bb41-d236db3fe082_buggy.java
+++ b/tmp/f9ec022b-1a11-416c-ab1c-39fdf98e5aa0_fixed.java
@@ -1,30 +1,43 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
+      if (isInsideLogicalExpression(n)) {
+        // In a logical expression, the assignment might be part of a
+        // short-circuit evaluation, so we cannot definitively say it's a KILL
+        // until we know the context.
+        return VariableLiveness.MAYBE_LIVE;
+      } else {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
+      }
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
+
+// Helper method to check if a node is inside a logical expression
+private boolean isInsideLogicalExpression(Node n) {
+  Node parent = n.getParent();
+  return parent != null && (parent.isAnd() || parent.isOr());
+}
\ No newline at end of file
