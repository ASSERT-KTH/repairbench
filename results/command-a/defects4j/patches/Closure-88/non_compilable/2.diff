diff --git a/tmp/359514db-e3ba-4506-9fc7-db17a52e9146_buggy.java b/tmp/1746a091-1583-4cf6-88a6-8da21a437abf_fixed.java
index 9353941..192807c 100644
--- a/tmp/359514db-e3ba-4506-9fc7-db17a52e9146_buggy.java
+++ b/tmp/1746a091-1583-4cf6-88a6-8da21a437abf_fixed.java
@@ -1,30 +1,35 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        // However, if the assignment is part of a comma expression, the KILL
+        // should not be considered until after the entire comma expression is evaluated.
+        if (NodeUtil.isComma(n.getParent().getParent())) {
+          return VariableLiveness.MAYBE_LIVE;
+        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
