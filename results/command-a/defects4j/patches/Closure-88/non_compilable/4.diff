diff --git a/tmp/9e507118-2faf-4a8d-8443-ce4b94c1b1bc_buggy.java b/tmp/8fb5f64f-d708-4cb2-98f3-20435f053b49_fixed.java
index 9353941..1695457 100644
--- a/tmp/9e507118-2faf-4a8d-8443-ce4b94c1b1bc_buggy.java
+++ b/tmp/8fb5f64f-d708-4cb2-98f3-20435f053b49_fixed.java
@@ -1,30 +1,38 @@
 /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    if (n.isAssign() && n.getFirstChild().isName() &&
+        variable.equals(n.getFirstChild().getString())) {
       return VariableLiveness.KILL;
-      } else {
-        return VariableLiveness.READ;
-      }
     }
 
-    // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
+      if (ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        continue; // Not a FUNCTION
+      }
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
+        if (state == VariableLiveness.KILL && n.isName() &&
+            variable.equals(n.getString()) &&
+            NodeUtil.isLhs(n, n.getParent())) {
+          // If the first reference is a KILL in the RHS, but the current node
+          // is the LHS of an assignment, then the first reference is actually
+          // a read.
+          continue;
+        }
         return state;
       }
     }
+
+    if (n.isName() && variable.equals(n.getString()) &&
+        !NodeUtil.isLhs(n, n.getParent())) {
+      return VariableLiveness.READ;
     }
+
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
