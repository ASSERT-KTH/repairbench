diff --git a/tmp/2e8ca1be-8a40-460c-b8ac-0506081c88fc_buggy.java b/tmp/83af4533-2e59-4714-9cba-eb6e5f588130_fixed.java
index 9353941..d42d83b 100644
--- a/tmp/2e8ca1be-8a40-460c-b8ac-0506081c88fc_buggy.java
+++ b/tmp/83af4533-2e59-4714-9cba-eb6e5f588130_fixed.java
@@ -1,30 +1,32 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
+      // However, if the assignment is part of a comma expression or a logical
+      // expression, the kill should not be considered until after the entire
+      // expression is evaluated.
+      Node parent = n.getParent();
+      if (parent.isComma() || parent.isAnd() || parent.isOr()) {
+        return VariableLiveness.MAYBE_LIVE;
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
