diff --git a/tmp/026a92d4-e057-4d4f-9aa2-f567e73da471_buggy.java b/tmp/a318ecee-a152-4218-9a91-50f48c08f058_fixed.java
index 9353941..f7e4262 100644
--- a/tmp/026a92d4-e057-4d4f-9aa2-f567e73da471_buggy.java
+++ b/tmp/a318ecee-a152-4218-9a91-50f48c08f058_fixed.java
@@ -1,30 +1,40 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
+ * 
+ * The function now correctly handles cases where the assignment is part of a 
+ * logical expression (e.g., && or ||). It checks if the current node is part of
+ * a logical expression and, if so, treats the assignment as a read for the 
+ * purpose of liveness analysis. This prevents incorrect optimizations in cases
+ * where the assignment is not guaranteed to execute.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+        // Check if the assignment is part of a logical expression
+        Node parent = n.getParent();
+        if (parent.isAnd() || parent.isOr()) {
+          // Treat the assignment as a read in logical expressions
+          return VariableLiveness.READ;
+        } else {
           return VariableLiveness.KILL;
+        }
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
