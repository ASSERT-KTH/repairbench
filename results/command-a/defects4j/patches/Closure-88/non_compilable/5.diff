diff --git a/tmp/61908b92-1b3c-43a9-bf35-8925be345da8_buggy.java b/tmp/bfff53cd-7dd7-47b3-82ac-c07f14c22e9e_fixed.java
index 9353941..7197044 100644
--- a/tmp/61908b92-1b3c-43a9-bf35-8925be345da8_buggy.java
+++ b/tmp/bfff53cd-7dd7-47b3-82ac-c07f14c22e9e_fixed.java
@@ -1,30 +1,46 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
+  // However, in logical expressions (&&, ||), the right side is not evaluated
+  // if the left side determines the result. We need to handle these cases
+  // differently to avoid incorrect liveness analysis.
+  if (n.isLogicalOp()) {
+    VariableLiveness leftState = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    if (leftState == VariableLiveness.READ || leftState == VariableLiveness.KILL) {
+      // If the left side already determines the liveness, return that state.
+      return leftState;
+    }
+    // Otherwise, continue to the right side only if necessary.
+    Node rightChild = n.getLastChild();
+    if (rightChild != null) {
+      return isVariableReadBeforeKill(rightChild, variable);
+    }
+  } else {
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
+  }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
