diff --git a/tmp/2c9e9b3c-6d5e-4b00-8ae6-3d384fb12423_buggy.java b/tmp/56ffdfad-4b9c-4561-8d0b-21fb768df1fc_fixed.java
index 56b2d66..12f7c0d 100644
--- a/tmp/2c9e9b3c-6d5e-4b00-8ae6-3d384fb12423_buggy.java
+++ b/tmp/56ffdfad-4b9c-4561-8d0b-21fb768df1fc_fixed.java
@@ -1,45 +1,61 @@
-    /**
-     * Removes the phase 1 objective function, positive cost non-artificial variables,
-     * and the non-basic artificial variables from this tableau.
-     */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
-        List<Integer> columnsToDrop = new ArrayList<Integer>();
+    List<Integer> columnsToDrop = new ArrayList<>();
     columnsToDrop.add(0);
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
-        for (int i = 1; i < getHeight(); i++) {
-          int col = 0;
+    // Adjust the matrix dimensions and copy data, excluding columns to drop
+    int newHeight = getHeight() - 1; // Exclude the objective function row
+    int newWidth = getWidth() - columnsToDrop.size();
+    double[][] matrix = new double[newHeight][newWidth];
+
+    for (int i = 1; i < getHeight(); i++) { // Start from 1 to exclude the objective function row
+        int colIndex = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
-              matrix[i - 1][col++] = tableau.getEntry(i, j);
+                matrix[i - 1][colIndex++] = tableau.getEntry(i, j);
             }
         }
     }
 
+    // Remove dropped columns from column labels
     for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
         columnLabels.remove((int) columnsToDrop.get(i));
     }
 
+    // Update the tableau and reset the number of artificial variables
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
+
+    // Adjust the variable offsets after dropping columns
+    adjustVariableOffsets();
+}
+
+private void adjustVariableOffsets() {
+    int newWidth = getWidth();
+    int originalWidth = tableau.getColumnDimension();
+    int numDropped = originalWidth - newWidth;
+
+    // Adjust the artificial variable offset if necessary
+    if (getArtificialVariableOffset() > 0) {
+        this.artificialVariableOffset -= numDropped;
+    }
 }
\ No newline at end of file
