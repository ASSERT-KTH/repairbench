diff --git a/tmp/7ad1be7c-c856-4553-b8c2-2e0cde130aac_buggy.java b/tmp/42cd858d-68f5-441d-a6d6-fd35585b0f83_fixed.java
index 56b2d66..214c7d2 100644
--- a/tmp/7ad1be7c-c856-4553-b8c2-2e0cde130aac_buggy.java
+++ b/tmp/42cd858d-68f5-441d-a6d6-fd35585b0f83_fixed.java
@@ -1,45 +1,64 @@
 /**
      * Removes the phase 1 objective function, positive cost non-artificial variables,
      * and the non-basic artificial variables from this tableau.
      */
     protected void dropPhase1Objective() {
         if (getNumObjectiveFunctions() == 1) {
             return;
         }
 
         List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+        columnsToDrop.add(0); // drop the phase 1 objective function
 
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
 
         // non-basic artificial variables
         for (int i = 0; i < getNumArtificialVariables(); i++) {
             int col = i + getArtificialVariableOffset();
             if (getBasicRow(col) == null) {
                 columnsToDrop.add(col);
             }
         }
 
+        // Create a new matrix excluding the columns to drop
         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
         for (int i = 1; i < getHeight(); i++) {
             int col = 0;
             for (int j = 0; j < getWidth(); j++) {
                 if (!columnsToDrop.contains(j)) {
                     matrix[i - 1][col++] = tableau.getEntry(i, j);
                 }
             }
         }
 
+        // Update column labels by removing the dropped columns
         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+            int colToRemove = columnsToDrop.get(i);
+            if (colToRemove < columnLabels.size()) {
+                columnLabels.remove(colToRemove);
             }
+        }
+
+        // Update the objective function row by removing the dropped columns
+        double[] objectiveRow = new double[getWidth() - columnsToDrop.size()];
+        int col = 0;
+        for (int j = 0; j < getWidth(); j++) {
+            if (!columnsToDrop.contains(j)) {
+                objectiveRow[col++] = tableau.getEntry(0, j);
+            }
+        }
+
+        // Create a new tableau with the updated objective row and matrix
+        double[][] newTableau = new double[getHeight() - 1][];
+        newTableau[0] = objectiveRow;
+        System.arraycopy(matrix, 0, newTableau, 1, matrix.length);
 
-        this.tableau = new Array2DRowRealMatrix(matrix);
+        this.tableau = new Array2DRowRealMatrix(newTableau);
         this.numArtificialVariables = 0;
     }
\ No newline at end of file
