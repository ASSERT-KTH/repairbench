diff --git a/tmp/d93fbe74-34ff-44bb-9620-8551f44ca809_buggy.java b/tmp/7099c394-433c-418c-b4f7-9925497b45ea_fixed.java
index 56b2d66..699812b 100644
--- a/tmp/d93fbe74-34ff-44bb-9620-8551f44ca809_buggy.java
+++ b/tmp/7099c394-433c-418c-b4f7-9925497b45ea_fixed.java
@@ -1,45 +1,66 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
-        columnsToDrop.add(0);
+    columnsToDrop.add(0); // Drop the phase 1 objective function column
 
-        // positive cost non-artificial variables
+    // Drop positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
-        // non-basic artificial variables
+    // Drop non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
+    // Create a new matrix excluding the columns to drop
     double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
     for (int i = 1; i < getHeight(); i++) {
         int col = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
                 matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
         }
     }
 
+    // Update column labels
     for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
         columnLabels.remove((int) columnsToDrop.get(i));
     }
 
+    // Update the tableau and reset the number of artificial variables
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
+
+    // Re-create the objective function row excluding dropped columns
+    double[] newObjectiveRow = new double[getWidth() - columnsToDrop.size()];
+    int col = 0;
+    for (int j = 0; j < getWidth(); j++) {
+        if (!columnsToDrop.contains(j)) {
+            newObjectiveRow[col++] = tableau.getEntry(0, j);
+        }
+    }
+    this.tableau = new Array2DRowRealMatrix(addRow(matrix, newObjectiveRow));
+}
+
+// Helper method to add a row to the matrix
+private double[][] addRow(double[][] matrix, double[] row) {
+    double[][] newMatrix = new double[matrix.length + 1][matrix[0].length];
+    System.arraycopy(matrix, 0, newMatrix, 1, matrix.length);
+    System.arraycopy(row, 0, newMatrix[0], 0, row.length);
+    return newMatrix;
 }
\ No newline at end of file
