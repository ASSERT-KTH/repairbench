diff --git a/tmp/96b5d14f-cad7-4912-a303-84101f986ab0_buggy.java b/tmp/970885a5-054c-4e8e-98be-8b54d477f1d3_fixed.java
index 4b7e1e4..82a3253 100644
--- a/tmp/96b5d14f-cad7-4912-a303-84101f986ab0_buggy.java
+++ b/tmp/970885a5-054c-4e8e-98be-8b54d477f1d3_fixed.java
@@ -1,52 +1,61 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                        if (restLen <= 0) { // handle blank lines or only NL
+                            if (restLen == -1) { // blank line, just skip it
+                                continue;
+                            } else if (restLen == 0) { // only NL
                                 headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
+                                break;
+                            }
+                        }
+                        final byte[] rest = new byte[Math.max(restLen - 1, 0)]; // ensure non-negative size
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
+                        if (got != rest.length) {
+                            throw new IOException("Failed to read Paxheader. Expected "
+                                    + rest.length
                                     + " bytes, read "
                                     + got);
                         }
-                                // Drop trailing NL
+                        // Drop trailing NL if present
                         final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                rest.length, CharsetNames.UTF_8);
                         headers.put(keyword, value);
-                            }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
+            if (ch < '0' || ch > '9') { // invalid character, skip to next line
+                while ((ch = i.read()) != -1 && ch != '\n') {
+                }
+                read = 0;
+                len = 0;
+                continue;
+            }
+            len = len * 10 + (ch - '0');
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
