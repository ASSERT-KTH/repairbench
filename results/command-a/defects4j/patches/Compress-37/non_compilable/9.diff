diff --git a/tmp/849a9d57-f53b-4fd4-8bb6-fc57a40d25dd_buggy.java b/tmp/0f2be298-0f5f-46e2-a4f1-026e0c991dc6_fixed.java
index 4b7e1e4..bc6b783 100644
--- a/tmp/849a9d57-f53b-4fd4-8bb6-fc57a40d25dd_buggy.java
+++ b/tmp/0f2be298-0f5f-46e2-a4f1-026e0c991dc6_fixed.java
@@ -1,52 +1,60 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+        final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while (true) { // get length
             int ch;
             int len = 0;
             int read = 0;
             while ((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' ') {
                     // Get keyword
                     final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                     while ((ch = i.read()) != -1) {
                         read++;
                         if (ch == '=') { // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
+                            final String keyword = coll.toString(StandardCharsets.UTF_8);
                             // Get rest of entry
                             final int restLen = len - read;
                             if (restLen == 1) { // only NL
                                 headers.remove(keyword);
-                            } else {
+                            } else if (restLen > 0) { // Ensure restLen is positive
                                 final byte[] rest = new byte[restLen];
                                 final int got = IOUtils.readFully(i, rest);
                                 if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
+                                    throw new IOException("Failed to read Paxheader. Expected "
                                                           + restLen
                                                           + " bytes, read "
                                                           + got);
                                 }
                                 // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                                final String value = new String(rest, 0, restLen - 1, StandardCharsets.UTF_8);
                                 headers.put(keyword, value);
+                            } else {
+                                // Handle invalid length by skipping the rest of the line
+                                while ((ch = i.read()) != -1 && ch != '\n') {
+                                    // Skip characters until newline or EOF
+                                }
                             }
                             break;
                         }
                         coll.write((byte) ch);
                     }
                     break; // Processed single header
+                } else if (ch < '0' || ch > '9') {
+                    // Handle invalid character by skipping the rest of the line
+                    while ((ch = i.read()) != -1 && ch != '\n') {
+                        // Skip characters until newline or EOF
                     }
-                len *= 10;
-                len += ch - '0';
+                    break;
+                }
+                len = len * 10 + (ch - '0');
             }
             if (ch == -1) { // EOF
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
