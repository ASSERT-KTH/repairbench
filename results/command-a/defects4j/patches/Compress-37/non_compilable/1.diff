diff --git a/tmp/ad92b44d-6086-46c9-8fe8-0a549abfdf88_buggy.java b/tmp/1081e15c-3c69-4fb3-a848-4cd4a36e0417_fixed.java
index 4b7e1e4..4d78305 100644
--- a/tmp/ad92b44d-6086-46c9-8fe8-0a549abfdf88_buggy.java
+++ b/tmp/1081e15c-3c69-4fb3-a848-4cd4a36e0417_fixed.java
@@ -1,52 +1,61 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
-        final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
+    final Map<String, String> headers = new HashMap<>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
                 while ((ch = i.read()) != -1) {
                     read++;
                     if (ch == '=') { // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                        if (restLen <= 0) { // handle blank lines or invalid entries
+                            if (restLen == 0) {
+                                // Blank line, skip to next line
+                                while ((ch = i.read()) != -1 && ch != '\n') {
+                                    // Skip characters until newline
+                                }
+                            } else {
+                                throw new IOException("Invalid Pax header format: rest length is negative");
+                            }
+                            break;
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
+                                throw new IOException("Failed to read Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
                 break; // Processed single header
             }
-                len *= 10;
-                len += ch - '0';
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid Pax header format: non-numeric length character");
+            }
+            len = len * 10 + (ch - '0');
         }
         if (ch == -1) { // EOF
             break;
         }
     }
     return headers;
 }
\ No newline at end of file
