diff --git a/tmp/4ce33a2e-08c6-4fbb-a9d1-ad7f99377ae7_buggy.java b/tmp/53bba22b-a866-4307-8b62-eeaa4be66343_fixed.java
index f9a9b5b..7c73ca3 100644
--- a/tmp/4ce33a2e-08c6-4fbb-a9d1-ad7f99377ae7_buggy.java
+++ b/tmp/53bba22b-a866-4307-8b62-eeaa4be66343_fixed.java
@@ -1,30 +1,69 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
     T mockInstance = null;
     try {
+        // Check if the settings require constructor instantiation
+        if (settings.getInstanceSettings() != null && settings.getInstanceSettings().useConstructor()) {
+            Constructor<?> constructor = findConstructor(mockedProxyType, settings);
+            if (constructor == null) {
+                throw new MockitoException("Unable to find a suitable constructor for " + mockedProxyType.getSimpleName());
+            }
+            mockInstance = instantiateMockWithConstructor(mockedProxyType, constructor, settings);
+        } else {
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSimpleName() + "'", e);
+    }
+}
+
+private <T> Constructor<?> findConstructor(Class<? extends T> mockedProxyType, MockCreationSettings<T> settings) {
+    if (settings.getInstanceSettings().getOuterInstance() != null) {
+        try {
+            return mockedProxyType.getConstructor(settings.getInstanceSettings().getOuterInstance().getClass());
+        } catch (NoSuchMethodException e) {
+            throw new MockitoException("Unable to find a suitable constructor for " + mockedProxyType.getSimpleName() + 
+                    " with outer instance of type " + settings.getInstanceSettings().getOuterInstance().getClass().getSimpleName(), e);
+        }
+    } else {
+        try {
+            return mockedProxyType.getConstructor();
+        } catch (NoSuchMethodException e) {
+            throw new MockitoException("Unable to find a 0-arg constructor for " + mockedProxyType.getSimpleName(), e);
+        }
+    }
+}
+
+private <T> T instantiateMockWithConstructor(Class<? extends T> mockedProxyType, Constructor<?> constructor, MockCreationSettings<T> settings) {
+    try {
+        if (settings.getInstanceSettings().getOuterInstance() != null) {
+            return mockedProxyType.cast(constructor.newInstance(settings.getInstanceSettings().getOuterInstance()));
+        } else {
+            return mockedProxyType.cast(constructor.newInstance());
+        }
+    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {
+        throw new MockitoException("Unable to instantiate mock using constructor", e);
     }
 }
\ No newline at end of file
