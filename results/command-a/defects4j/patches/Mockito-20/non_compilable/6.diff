diff --git a/tmp/dbf68c1b-2ab5-4f91-ad18-464d1a9b19ef_buggy.java b/tmp/e59007b2-7bf1-4191-910e-c46fb269b33c_fixed.java
index f9a9b5b..d9192fe 100644
--- a/tmp/dbf68c1b-2ab5-4f91-ad18-464d1a9b19ef_buggy.java
+++ b/tmp/e59007b2-7bf1-4191-910e-c46fb269b33c_fixed.java
@@ -1,30 +1,90 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
+    
+    // Check if the type to mock is an abstract class or interface
+    boolean isAbstractOrInterface = Modifier.isAbstract(settings.getTypeToMock().getModifiers()) || settings.getTypeToMock().isInterface();
+    
+    // If the type is abstract or interface and no constructor is specified, use default mocking
+    if (isAbstractOrInterface && !settings.getConstructorArgs().isPresent()) {
+        return createMockWithoutConstructor(settings, handler);
+    }
+    
+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
+            settings.getTypeToMock(),
+            settings.getExtraInterfaces()
+    );
+    
+    T mockInstance = null;
+    try {
+        // Use the specified constructor if present, otherwise use the default constructor
+        if (settings.getConstructorArgs().isPresent()) {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getConstructorArgs().get());
+        } else {
+            mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
+        
+        // Handle inner classes by setting the outer instance if specified
+        if (settings.getOuterInstance().isPresent()) {
+            setOuterInstance(mockInstance, settings.getOuterInstance().get());
+        }
+        
+        MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
+        mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
+
+        return ensureMockIsAssignableToMockedType(settings, mockInstance);
+    } catch (ClassCastException cce) {
+        throw new MockitoException(join(
+                "ClassCastException occurred while creating the mockito mock :",
+                "  class to mock : " + describeClass(mockedProxyType),
+                "  created class : " + describeClass(settings.getTypeToMock()),
+                "  proxy instance class : " + describeClass(mockInstance),
+                "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                "",
+                "You might experience classloading issues, please ask the mockito mailing-list.",
+                ""
+        ), cce);
+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
+    }
+}
+
+private <T> T createMockWithoutConstructor(MockCreationSettings<T> settings, MockHandler handler) {
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
+    
     T mockInstance = null;
     try {
         mockInstance = classInstantiator.instantiate(mockedProxyType);
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
                 "  proxy instance class : " + describeClass(mockInstance),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
+    }
+}
+
+private <T> void setOuterInstance(T mockInstance, Object outerInstance) {
+    try {
+        Field outerField = mockInstance.getClass().getDeclaredField("this$0");
+        outerField.setAccessible(true);
+        outerField.set(mockInstance, outerInstance);
+    } catch (NoSuchFieldException | IllegalAccessException e) {
+        throw new MockitoException("Unable to set outer instance for inner class mock", e);
     }
 }
\ No newline at end of file
