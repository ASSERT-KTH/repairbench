diff --git a/tmp/024017c8-9126-415a-bee3-86d9a558bb90_buggy.java b/tmp/e1f219a1-6816-414c-a0cb-3edf2457dede_fixed.java
index f9a9b5b..52fa8d6 100644
--- a/tmp/024017c8-9126-415a-bee3-86d9a558bb90_buggy.java
+++ b/tmp/e1f219a1-6816-414c-a0cb-3edf2457dede_fixed.java
@@ -1,30 +1,93 @@
+import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.instance.InstantiationException;
+import org.mockito.internal.handlers.MockHandlerImpl;
+import org.mockito.internal.util.MockUtil;
+import org.mockito.mock.SerializableMode;
+
+import java.lang.reflect.Constructor;
+import java.util.Arrays;
+
+import static org.mockito.internal.util.StringUtil.join;
+
+public class ByteBuddyMockMaker {
+
+    private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();
+    private final ClassInstantiator classInstantiator = new ClassInstantiator();
+
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
             throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
         }
+
         Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
                 settings.getTypeToMock(),
                 settings.getExtraInterfaces()
         );
+
         T mockInstance = null;
         try {
+            if (settings.getConstructorArgs() != null) {
+                // Try to instantiate with provided constructor args
+                Constructor<? extends T> constructor = findMatchingConstructor(mockedProxyType, settings.getConstructorArgs());
+                mockInstance = constructor.newInstance(settings.getConstructorArgs());
+            } else if (settings.getOuterInstance() != null) {
+                // Try to instantiate with outer instance
+                mockInstance = classInstantiator.instantiate(mockedProxyType, settings.getOuterInstance());
+            } else {
+                // Fallback to default instantiation
                 mockInstance = classInstantiator.instantiate(mockedProxyType);
+            }
+
             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
             return ensureMockIsAssignableToMockedType(settings, mockInstance);
-        } catch (ClassCastException cce) {
+        } catch (InstantiationException e) {
+            throw new MockitoException("Unable to create mock instance of type '" + settings.getTypeToMock().getSimpleName() + "'", e);
+        } catch (Exception e) {
             throw new MockitoException(join(
-                    "ClassCastException occurred while creating the mockito mock :",
+                    "Exception occurred while creating the mockito mock :",
                     "  class to mock : " + describeClass(mockedProxyType),
                     "  created class : " + describeClass(settings.getTypeToMock()),
                     "  proxy instance class : " + describeClass(mockInstance),
                     "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
+                    "  cause: " + e.getMessage(),
                     "",
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
-            ),cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+            ), e);
+        }
+    }
+
+    private <T> Constructor<? extends T> findMatchingConstructor(Class<? extends T> clazz, Object[] args) throws NoSuchMethodException {
+        Constructor<? extends T> constructor = clazz.getDeclaredConstructor(getArgumentTypes(args));
+        constructor.setAccessible(true);
+        return constructor;
+    }
+
+    private Class<?>[] getArgumentTypes(Object[] args) {
+        return Arrays.stream(args).map(Object::getClass).toArray(Class<?>[]::new);
+    }
+
+    private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {
+        if (!settings.getTypeToMock().isInstance(mock)) {
+            throw new MockitoException(join(
+                    "Created mock instance is not assignable to the mocked type.",
+                    "  mock type : " + describeClass(settings.getTypeToMock()),
+                    "  created mock type : " + describeClass(mock.getClass()),
+                    "",
+                    "Please ensure that the mocked type is a valid class or interface.",
+                    ""
+            ));
+        }
+        return mock;
+    }
+
+    private String describeClass(Class<?> clazz) {
+        return clazz != null ? clazz.getName() : "null";
+    }
+
+    private MockHandler asInternalMockHandler(MockHandler handler) {
+        return handler instanceof MockHandlerImpl ? (MockHandlerImpl) handler : new MockHandlerImpl(handler);
     }
 }
\ No newline at end of file
