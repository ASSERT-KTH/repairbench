diff --git a/tmp/3f27f554-60af-44fc-be1e-960a1a9e47a4_buggy.java b/tmp/f9fc92ac-ed41-4f85-a5b3-af23b2d89602_fixed.java
index a7d0787..d6e6d15 100644
--- a/tmp/3f27f554-60af-44fc-be1e-960a1a9e47a4_buggy.java
+++ b/tmp/f9fc92ac-ed41-4f85-a5b3-af23b2d89602_fixed.java
@@ -1,54 +1,40 @@
 /**
  * Returns the <code>Object</code> of type <code>clazz</code>
  * with the value of <code>str</code>.
  *
  * @param str the command line value
  * @param clazz the type of argument
  * @return The instance of <code>clazz</code> initialised with
  * the value of <code>str</code>.
  * @throws ParseException if the value creation for the given class failed
  */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+    if (PatternOptionBuilder.STRING_VALUE == clazz) {
         return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
         return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
         return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
         return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
         return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
         return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
         return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
         return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
         return (T) createURL(str);
+    } else if (Number.class.isAssignableFrom(clazz)) {
+        try {
+            return clazz.getConstructor(String.class).newInstance(str);
+        } catch (Exception e) {
+            throw new ParseException("Could not create " + clazz + " from " + str);
         }
-        else
-        {
-            return null;
+    } else {
+        throw new ParseException("Unsupported class: " + clazz);
     }
 }
\ No newline at end of file
