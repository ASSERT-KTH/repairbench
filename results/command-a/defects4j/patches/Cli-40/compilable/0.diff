diff --git a/tmp/1ea5321c-d153-4ae8-9bc8-570f2b480f8d_buggy.java b/tmp/761b6102-df1e-4fdf-b6e6-5f5aef008a9c_fixed.java
index a7d0787..4d67dba 100644
--- a/tmp/1ea5321c-d153-4ae8-9bc8-570f2b480f8d_buggy.java
+++ b/tmp/761b6102-df1e-4fdf-b6e6-5f5aef008a9c_fixed.java
@@ -1,54 +1,51 @@
     /**
      * Returns the <code>Object</code> of type <code>clazz</code>
      * with the value of <code>str</code>.
      *
      * @param str the command line value
      * @param clazz the type of argument
      * @return The instance of <code>clazz</code> initialised with
      * the value of <code>str</code>.
      * @throws ParseException if the value creation for the given class failed
      */
     @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
-    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
-    {
-        if (PatternOptionBuilder.STRING_VALUE == clazz)
-        {
+    public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
+        if (clazz.equals(String.class)) {
             return (T) str;
-        }
-        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
-        {
+        } else if (clazz.equals(Object.class)) {
             return (T) createObject(str);
-        }
-        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
-        {
+        } else if (clazz.equals(Number.class)) {
             return (T) createNumber(str);
-        }
-        else if (PatternOptionBuilder.DATE_VALUE == clazz)
-        {
+        } else if (clazz.equals(Date.class)) {
             return (T) createDate(str);
-        }
-        else if (PatternOptionBuilder.CLASS_VALUE == clazz)
-        {
+        } else if (clazz.equals(Class.class)) {
             return (T) createClass(str);
-        }
-        else if (PatternOptionBuilder.FILE_VALUE == clazz)
-        {
+        } else if (clazz.equals(File.class)) {
             return (T) createFile(str);
-        }
-        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
-        {
+        } else if (clazz.equals(File.class) && PatternOptionBuilder.EXISTING_FILE_VALUE.isAssignableFrom(clazz)) {
             return (T) openFile(str);
-        }
-        else if (PatternOptionBuilder.FILES_VALUE == clazz)
-        {
+        } else if (clazz.equals(File[].class)) {
             return (T) createFiles(str);
-        }
-        else if (PatternOptionBuilder.URL_VALUE == clazz)
-        {
+        } else if (clazz.equals(URL.class)) {
             return (T) createURL(str);
+        } else {
+            try {
+                if (clazz.equals(Integer.class)) {
+                    return clazz.cast(Integer.parseInt(str));
+                } else if (clazz.equals(Long.class)) {
+                    return clazz.cast(Long.parseLong(str));
+                } else if (clazz.equals(Double.class)) {
+                    return clazz.cast(Double.parseDouble(str));
+                } else if (clazz.equals(Float.class)) {
+                    return clazz.cast(Float.parseFloat(str));
+                } else if (clazz.equals(Short.class)) {
+                    return clazz.cast(Short.parseShort(str));
+                } else if (clazz.equals(Byte.class)) {
+                    return clazz.cast(Byte.parseByte(str));
                 }
-        else
-        {
-            return null;
+            } catch (NumberFormatException e) {
+                throw new ParseException("Cannot parse [" + str + "] to type " + clazz.getName());
+            }
+            throw new ParseException("Unsupported class type: " + clazz.getName());
         }
     }
\ No newline at end of file
