diff --git a/tmp/242b34f4-927e-48c5-a847-4b954efb59d7_buggy.java b/tmp/de1fc319-c8c7-4ec6-ba78-a1fb47630501_fixed.java
index c51c8b1..f19d6d5 100644
--- a/tmp/242b34f4-927e-48c5-a847-4b954efb59d7_buggy.java
+++ b/tmp/de1fc319-c8c7-4ec6-ba78-a1fb47630501_fixed.java
@@ -1,31 +1,35 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
+            // Fixed: recordDepScope should be called with recordNode instead of nameNode
+            // to correctly handle assignments in FOR loops.
+            recordDepScope(recordNode, ns);
+          }
+        } else if (parent.isCall() && parent.getFirstChild() == n) {
+          // Fixed: Handle the case where the assignment is the callee of a function call.
+          // In this case, we should not associate the assignment with the LHS.
+          // This fixes the issue where the assignment is the caller expression.
+          // See testAssignWithCall for an example of this.
           recordDepScope(nameNode, ns);
-          }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
-          // FYI: this fixes only the specific case where the assignment is the
-          // caller expression, but it could be nested deeper in the caller and
-          // we would still get a bug.
-          // See testAssignWithCall2 for an example of this.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
