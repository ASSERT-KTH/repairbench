diff --git a/tmp/757fe575-ed60-43db-b3f9-848ec064413a_buggy.java b/tmp/b7dd4070-6c71-4739-a7fb-6dc94332cfa6_fixed.java
index 39981f0..4543608 100644
--- a/tmp/757fe575-ed60-43db-b3f9-848ec064413a_buggy.java
+++ b/tmp/b7dd4070-6c71-4739-a7fb-6dc94332cfa6_fixed.java
@@ -1,65 +1,72 @@
 /**
  * Given a node, get a human-readable name for the type of that node so
  * that will be easy for the programmer to find the original declaration.
  *
  * For example, if SubFoo's property "bar" might have the human-readable
  * name "Foo.prototype.bar".
  *
  * @param n The node.
  * @param dereference If true, the type of the node will be dereferenced
  *     to an Object type, if possible.
  */
 String getReadableJSTypeName(Node n, boolean dereference) {
 
     // The best type name is the actual type name.
 
     // If we're analyzing a GETPROP, the property may be inherited by the
     // prototype chain. So climb the prototype chain and find out where
     // the property was originally defined.
     if (n.isGetProp()) {
       ObjectType objectType = getJSType(n.getFirstChild()).dereference();
       if (objectType != null) {
         String propName = n.getLastChild().getString();
         if (objectType.getConstructor() != null &&
             objectType.getConstructor().isInterface()) {
           objectType = FunctionType.getTopDefiningInterface(
               objectType, propName);
         } else {
           // classes
           while (objectType != null && !objectType.hasOwnProperty(propName)) {
             objectType = objectType.getImplicitPrototype();
           }
         }
 
         // Don't show complex function names or anonymous types.
         // Instead, try to get a human-readable type name.
         if (objectType != null &&
             (objectType.getConstructor() != null ||
              objectType.isFunctionPrototypeType())) {
+          // Fix: Use the original type name from the GETPROP node's first child
+          // instead of the potentially dereferenced type name.
+          JSType originalType = getJSType(n.getFirstChild());
+          if (originalType.isObjectType() && originalType.toObjectType().hasOwnProperty(propName)) {
+            return originalType.toString() + "." + propName;
+          } else {
             return objectType.toString() + "." + propName;
           }
         }
       }
+    }
 
     JSType type = getJSType(n);
     if (dereference) {
       ObjectType dereferenced = type.dereference();
       if (dereferenced != null) {
         type = dereferenced;
       }
     }
     if (type.isFunctionPrototypeType() ||
         (type.toObjectType() != null &&
          type.toObjectType().getConstructor() != null)) {
       return type.toString();
     }
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
       return qualifiedName;
     } else if (type.isFunctionType()) {
       // Don't show complex function names.
       return "function";
     } else {
       return type.toString();
     }
   }
\ No newline at end of file
