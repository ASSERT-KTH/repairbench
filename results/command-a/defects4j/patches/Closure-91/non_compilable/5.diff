diff --git a/tmp/a0c2a63e-7002-4da7-8ed9-04b24a97e21e_buggy.java b/tmp/13c78135-6f18-410b-ae05-aa431fe1929a_fixed.java
index 30d7266..5053aef 100644
--- a/tmp/a0c2a63e-7002-4da7-8ed9-04b24a97e21e_buggy.java
+++ b/tmp/13c78135-6f18-410b-ae05-aa431fe1929a_fixed.java
@@ -1,69 +1,76 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+           jsDoc.isOverride() ||
+           jsDoc.hasLendsAnnotation())) { // Added check for @lends annotation
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
 
             // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
 
       // Don't traverse functions that are getting lent to a prototype.
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
         if (NodeUtil.isGet(lhs)) {
           if (lhs.getType() == Token.GETPROP &&
               lhs.getLastChild().getString().equals("prototype")) {
+            JSDocInfo lhsJsDoc = NodeUtil.getBestJSDocInfo(lhs);
+            if (lhsJsDoc == null || !lhsJsDoc.hasLendsAnnotation()) {
               return false;
             }
+          }
           Node llhs = lhs.getFirstChild();
           if (llhs.getType() == Token.GETPROP &&
               llhs.getLastChild().getString().equals("prototype")) {
+            JSDocInfo llhsJsDoc = NodeUtil.getBestJSDocInfo(llhs);
+            if (llhsJsDoc == null || !llhsJsDoc.hasLendsAnnotation()) {
               return false;
             }
           }
         }
       }
+    }
 
     return true;
   }
\ No newline at end of file
