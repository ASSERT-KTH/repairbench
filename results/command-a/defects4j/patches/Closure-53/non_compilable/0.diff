diff --git a/tmp/01458128-7a3d-458d-82d7-b5c6e25570d5_buggy.java b/tmp/346eefdd-e857-4a24-a462-6d912fb5baf4_fixed.java
index 41ea16c..8bed6f3 100644
--- a/tmp/01458128-7a3d-458d-82d7-b5c6e25570d5_buggy.java
+++ b/tmp/346eefdd-e857-4a24-a462-6d912fb5baf4_fixed.java
@@ -1,63 +1,48 @@
-    /**
-     * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
-     * Note that the resulting expression will always evaluate to
-     * true, as would the x = {...} expression.
-     */
-    private void replaceAssignmentExpression(Var v, Reference ref,
-                                             Map<String, String> varmap) {
+private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {
     // Compute all of the assignments necessary
-      List<Node> nodes = Lists.newArrayList();
+    List<Node> nodes = new ArrayList<>();
     Node val = ref.getAssignedValue();
     blacklistVarReferencesInTree(val, v.scope);
     Preconditions.checkState(val.getType() == Token.OBJECTLIT);
-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
-      for (Node key = val.getFirstChild(); key != null;
-           key = key.getNext()) {
+    Set<String> all = new LinkedHashSet<>(varmap.keySet());
+    for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)), value));
+        nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
     }
 
-      // TODO(user): Better source information.
+    // Add assignments for variables not present in the object literal
     for (String var : all) {
-        nodes.add(
-          new Node(Token.ASSIGN,
-                   Node.newString(Token.NAME, varmap.get(var)),
-                   NodeUtil.newUndefinedNode(null)));
+        nodes.add(new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), NodeUtil.newUndefinedNode(null)));
     }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+    // Ensure the expression evaluates to true
     nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
-          cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
-        }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
+    // Build the replacement expression
+    Node replacement = buildCommaExpression(nodes);
 
+    // Replace the original assignment
     Node replace = ref.getParent();
     replacement.copyInformationFromForTree(replace);
 
     if (replace.getType() == Token.VAR) {
-        replace.getParent().replaceChild(
-            replace, NodeUtil.newExpr(replacement));
+        replace.getParent().replaceChild(replace, NodeUtil.newExpr(replacement));
     } else {
         replace.getParent().replaceChild(replace, replacement);
     }
 }
+
+private Node buildCommaExpression(List<Node> nodes) {
+    if (nodes.isEmpty()) {
+        return new Node(Token.TRUE);
+    }
+    Node result = nodes.remove(nodes.size() - 1);
+    while (!nodes.isEmpty()) {
+        Node next = nodes.remove(nodes.size() - 1);
+        result = new Node(Token.COMMA, next, result);
+    }
+    return result;
+}
\ No newline at end of file
