diff --git a/tmp/8eadb29b-f8ed-469b-985a-b84c31bfa5b8_buggy.java b/tmp/04eee577-e0d8-47cc-9c6a-f5f4f6905ce9_fixed.java
index b91f7de..4970db6 100644
--- a/tmp/8eadb29b-f8ed-469b-985a-b84c31bfa5b8_buggy.java
+++ b/tmp/04eee577-e0d8-47cc-9c6a-f5f4f6905ce9_fixed.java
@@ -1,69 +1,71 @@
     /**
      * Parse an octal string from a buffer.
      *
      * <p>Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.</p>
      *
      * <p>The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).</p>
      *
      * <p>To work-around some tar implementations that insert a
      * leading NUL this method returns 0 if it detects a leading NUL
      * since Commons Compress 1.4.</p>
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long result = 0;
         int end = offset + length;
         int start = offset;
 
         if (length < 2) {
             throw new IllegalArgumentException("Length " + length + " must be at least 2");
         }
 
         if (buffer[start] == 0) {
+            // Check for all NULs
+            for (int i = start; i < end; i++) {
+                if (buffer[i] != 0) {
+                    throw new IllegalArgumentException("Embedded NUL or invalid byte detected");
+                }
+            }
             return 0L;
         }
 
         // Skip leading spaces
-        while (start < end){
-            if (buffer[start] == ' '){
+        while (start < end && buffer[start] == ' ') {
             start++;
-            } else {
-                break;
         }
+
+        // Check for trailing space or NUL
+        if (buffer[end - 1] != ' ' && buffer[end - 1] != 0) {
+            throw new IllegalArgumentException("Missing trailing space or NUL");
         }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        while (start < end && (trailer == 0 || trailer == ' ')) {
+        // Trim all trailing NULs and spaces
+        while (start < end && (buffer[end - 1] == 0 || buffer[end - 1] == ' ')) {
             end--;
-            trailer = buffer[end - 1];
         }
 
         for (; start < end; start++) {
             final byte currentByte = buffer[start];
             if (currentByte == 0) {
-                break;
+                throw new IllegalArgumentException("Embedded NUL detected");
             }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
