diff --git a/tmp/7fd84db7-9a0c-4658-836c-2657e1404922_buggy.java b/tmp/3ab2a230-349c-41d5-887a-2c5ab226a34d_fixed.java
index ec6c9ee..ce15213 100644
--- a/tmp/7fd84db7-9a0c-4658-836c-2657e1404922_buggy.java
+++ b/tmp/3ab2a230-349c-41d5-887a-2c5ab226a34d_fixed.java
@@ -1,21 +1,44 @@
-    //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
         return new PeriodFormatter(sep, sep);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        // Ensure that both printer and parser are correctly assigned
+        PeriodPrinter printer = (PeriodPrinter) comp[0];
+        PeriodParser parser = (PeriodParser) comp[1];
+        // Adjust the parser to handle large values correctly
+        parser = new PeriodParser() {
+            @Override
+            public int parseInto(ReadablePeriod period, String periodStr, int position) {
+                try {
+                    return parser.parseInto(period, periodStr, position);
+                } catch (IllegalArgumentException e) {
+                    // Handle large values by parsing them as separate components
+                    if (periodStr.substring(position).matches("\\d+")) {
+                        int value = Integer.parseInt(periodStr.substring(position));
+                        // Determine the field based on the context
+                        // This is a simplified example; actual logic may vary
+                        if (period instanceof Days) {
+                            ((Days) period).setDays(value);
+                            return position + String.valueOf(value).length();
+                        }
+                    }
+                    throw e;
+                }
+            }
+        };
+        return new PeriodFormatter(printer, parser);
     }
 }
\ No newline at end of file
