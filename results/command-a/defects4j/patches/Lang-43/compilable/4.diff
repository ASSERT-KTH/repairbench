diff --git a/tmp/902f52c5-32fd-4083-94dc-4eddea588562_buggy.java b/tmp/16efb49d-9246-44a6-8dba-f7bd1f2c0e98_fixed.java
index b6b11b6..974b87a 100644
--- a/tmp/902f52c5-32fd-4083-94dc-4eddea588562_buggy.java
+++ b/tmp/16efb49d-9246-44a6-8dba-f7bd1f2c0e98_fixed.java
@@ -1,38 +1,45 @@
     /**
      * Consume a quoted string, adding it to <code>appendTo</code> if
      * specified.
      * 
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuffer to append
      * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
-            return appendTo == null ? null : appendTo.append(QUOTE);
+            pos.setIndex(start + 1); // Move index past the opening quote
+            if (appendTo != null) {
+                appendTo.append(QUOTE);
+            }
+        }
+        int lastHold = pos.getIndex();
+        for (int i = pos.getIndex(); i < pattern.length(); i = pos.getIndex()) { // Use pos.getIndex() to avoid re-evaluation
+            if (escapingOn && i + ESCAPED_QUOTE.length() <= pattern.length() && 
+                    pattern.substring(i, i + ESCAPED_QUOTE.length()).equals(ESCAPED_QUOTE)) {
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
                 }
-        int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
                 pos.setIndex(i + ESCAPED_QUOTE.length());
                 lastHold = pos.getIndex();
                 continue;
             }
             switch (c[pos.getIndex()]) {
             case QUOTE:
+                if (appendTo != null) {
+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold);
+                }
                 next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                return appendTo;
             default:
                 next(pos);
             }
         }
         throw new IllegalArgumentException(
                 "Unterminated quoted string at position " + start);
     }
\ No newline at end of file
