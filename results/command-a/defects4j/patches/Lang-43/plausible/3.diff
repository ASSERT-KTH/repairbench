diff --git a/tmp/0ea698ce-dd94-45e4-8b25-ddecb4c167cf_buggy.java b/tmp/8ddb9f72-9ef6-46bd-a0a5-f1a00399868b_fixed.java
index b6b11b6..d197751 100644
--- a/tmp/0ea698ce-dd94-45e4-8b25-ddecb4c167cf_buggy.java
+++ b/tmp/8ddb9f72-9ef6-46bd-a0a5-f1a00399868b_fixed.java
@@ -1,38 +1,35 @@
-    /**
-     * Consume a quoted string, adding it to <code>appendTo</code> if
-     * specified.
-     * 
-     * @param pattern pattern to parse
-     * @param pos current parse position
-     * @param appendTo optional StringBuffer to append
-     * @param escapingOn whether to process escaped quotes
-     * @return <code>appendTo</code>
-     */
     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,
             StringBuffer appendTo, boolean escapingOn) {
         int start = pos.getIndex();
         char[] c = pattern.toCharArray();
         if (escapingOn && c[start] == QUOTE) {
+            pos.setIndex(start + 1); // Adjust the position to skip the initial quote
             return appendTo == null ? null : appendTo.append(QUOTE);
         }
         int lastHold = start;
-        for (int i = pos.getIndex(); i < pattern.length(); i++) {
-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
-                        QUOTE);
-                pos.setIndex(i + ESCAPED_QUOTE.length());
+        for (int i = pos.getIndex(); i < pattern.length(); i = pos.getIndex()) { // Adjust loop to use pos.getIndex()
+            char currentChar = c[i];
+            if (escapingOn && i + 1 < pattern.length() && currentChar == QUOTE && c[i + 1] == QUOTE) {
+                appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                pos.setIndex(i + 2); // Skip the escaped quote
                 lastHold = pos.getIndex();
                 continue;
             }
-            switch (c[pos.getIndex()]) {
+            switch (currentChar) {
             case QUOTE:
+                if (escapingOn && i + 1 < pattern.length() && c[i + 1] == QUOTE) {
+                    // Handle escaped quote
+                    appendTo.append(c, lastHold, i - lastHold).append(QUOTE);
+                    pos.setIndex(i + 2); // Skip the escaped quote
+                    lastHold = pos.getIndex();
+                } else {
                     next(pos);
-                return appendTo == null ? null : appendTo.append(c, lastHold,
-                        pos.getIndex() - lastHold);
+                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1);
+                }
+                break;
             default:
                 next(pos);
             }
         }
-        throw new IllegalArgumentException(
-                "Unterminated quoted string at position " + start);
+        throw new IllegalArgumentException("Unterminated quoted string at position " + start);
     }
\ No newline at end of file
