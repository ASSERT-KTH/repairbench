diff --git a/tmp/e345aec8-f194-46b8-bcdf-cec4199bbab2_buggy.java b/tmp/a1a25087-2255-4191-a8db-aa7df9b3f718_fixed.java
index 6c9090f..3623e28 100644
--- a/tmp/e345aec8-f194-46b8-bcdf-cec4199bbab2_buggy.java
+++ b/tmp/a1a25087-2255-4191-a8db-aa7df9b3f718_fixed.java
@@ -1,45 +1,59 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
+                    if (!_collectionType.isConcrete()) {
+                        // [databind#1043]: May be OK if type is abstract, as long as there
+                        //   is a default implementation available (which is only the case
+                        //   for Lists and Sets)
+                        delegateType = CollectionDefaults.collectionTypeDefault(_collectionType);
+                        if (delegateType == null) {
+                            throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
+                                    +": value instantiator ("+_valueInstantiator.getClass().getName()
+                                    +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'"
+                                    +"; additionally, type "+_collectionType
+                                    +" is not a concrete type, and no default implementation registered");
+                        }
+                    } else {
                         throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                                 +": value instantiator ("+_valueInstantiator.getClass().getName()
                                 +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                     }
+                }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
