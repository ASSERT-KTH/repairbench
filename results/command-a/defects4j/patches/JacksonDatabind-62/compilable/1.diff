diff --git a/tmp/eb65255e-259c-41f5-a5dc-077e65993a8a_buggy.java b/tmp/7cef50ed-2a14-4be3-b191-c167687bd90a_fixed.java
index 6c9090f..544cf81 100644
--- a/tmp/eb65255e-259c-41f5-a5dc-077e65993a8a_buggy.java
+++ b/tmp/7cef50ed-2a14-4be3-b191-c167687bd90a_fixed.java
@@ -1,45 +1,54 @@
     /**
      * Method called to finalize setup of this deserializer,
      * when it is known for which property deserializer is needed
      * for.
      */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
-                    throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
-                            +": value instantiator ("+_valueInstantiator.getClass().getName()
-                            +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
+                    // [databind#1043]: If no delegate type is specified, we need to handle it
+                    // by defaulting to the collection type itself. This is necessary for
+                    // unmodifiable collections where the delegate type might not be explicitly
+                    // defined.
+                    delegateType = _collectionType;
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
         
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+        // Handle the case where the collection is unmodifiable by ensuring the delegate deserializer
+        // is properly set up to handle the collection type.
+        if (_collectionType.isTypeOrSubTypeOf(Collections.unmodifiableSet(Collections.emptySet()).getClass())) {
+            if (delegateDeser == null) {
+                delegateDeser = ctxt.findRootValueDeserializer(_collectionType);
+            }
+        }
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
\ No newline at end of file
