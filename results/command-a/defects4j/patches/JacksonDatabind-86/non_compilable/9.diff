diff --git a/tmp/0592aa54-3c9f-4d9c-82d6-7c39a1848f65_buggy.java b/tmp/fc9c2e31-eab4-49e5-9703-e38b64394cd0_fixed.java
index e69de29..9a49891 100644
--- a/tmp/0592aa54-3c9f-4d9c-82d6-7c39a1848f65_buggy.java
+++ b/tmp/fc9c2e31-eab4-49e5-9703-e38b64394cd0_fixed.java
@@ -0,0 +1,53 @@
+protected JavaType _findSuperType(JavaType type, Class<?> rawTarget)
+{
+    // When we get the initial call, we can't find the
+    // super class yet so let's return `null` to indicate that:
+    if (type == null || type.getRawClass() == rawTarget) {
+        return null;
+    }
+    // We either have the target or a different super class. In both cases,
+    // that type should be registered with the type factory so that it
+    // can be resolved by `_typeFromId`:
+    JavaType superType = type.getSuperClass();
+    if (superType == null) {
+        // Type does not have a super class so there is no more types
+        // to check:
+        return null;
+    }
+    Class<?> rawSuperClass = superType.getRawClass();
+    if (rawSuperClass == rawTarget) {
+        return superType;
+    }
+    // Must be a different super class so let's mark that id in the
+    // type factory and check if that super class is our target:
+    String superTypeId = idFrom(superType);
+    if (_typeFactory.hasSharedType(superTypeId)) {
+        return null;
+    }
+    _typeFactory.addSharedType(superType, superTypeId);
+    JavaType found = _findSuperType(superType, rawTarget);
+    if (found != null) {
+        // We've found the target super class, let's rebuild the types.
+        // If the super class of found type is found in type factory, use that:
+        // if not found, pass a null as the parent: 
+        JavaType parentType = found.getSuperClass() == null ? null : _typeFactory._typeFromId(idFrom(found));
+        JavaType resolvedType = ResolvedRecursiveType.forBogusClass(
+                _typeFactory, rawSuperClass, parentType, idFrom(type));
+        // Need to also create all intermediate types:
+        JavaType currType = type;
+        while (currType.getSuperClass() != null) {
+            Class<?> currRawType = currType.getRawClass();
+            if (currRawType == rawSuperClass) {
+                break;
+            }
+            JavaType nextType = ResolvedRecursiveType.forBogusClass(
+                    _typeFactory, currRawType, resolvedType, idFrom(currType));
+            // Need to ensure we replace it as a registered type for
+            // case of caching:
+            _typeFactory.addSharedType(nextType, idFrom(currType));
+            resolvedType = nextType;
+            currType = currType.getSuperClass();
+        }
+    }
+    return found;
+}
\ No newline at end of file
