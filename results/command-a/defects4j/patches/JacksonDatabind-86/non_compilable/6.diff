diff --git a/tmp/68362625-a550-4283-854f-2db6e64389a6_buggy.java b/tmp/6c6b6b1f-3f35-41ce-993e-570e92100d47_fixed.java
index e69de29..7d7b5b4 100644
--- a/tmp/68362625-a550-4283-854f-2db6e64389a6_buggy.java
+++ b/tmp/6c6b6b1f-3f35-41ce-993e-570e92100d47_fixed.java
@@ -0,0 +1,111 @@
+protected JavaType _findSuperTypeForResolution(Class<?> cls, boolean forceLookup)
+{
+    // First: do we already have a type definition
+    JavaType supertype = _superTypeCache.get(cls);
+    if (supertype != null) {
+        // If it's already resolved: great!
+        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {
+            return supertype;
+        }
+    }
+    // If not, must find:
+    supertype = _findSuperTypeForResolution2(cls, forceLookup);
+    // As per [databind#2490], might have been resolved in the meantime
+    if (supertype != null && !supertype.isContainerType()) {
+        return supertype;
+    }
+    // If not, we need to resolve it now
+    if (supertype == null) {
+        supertype = _findSuperTypeForResolution2(cls, forceLookup);
+    }
+    // and if we still don't have it, we need to fail
+    if (supertype == null) {
+        throw new IllegalArgumentException("Could not find super type for " + cls.getName());
+    }
+    // Finally, if it's a container type, we need to resolve its content type
+    if (supertype.isContainerType()) {
+        ContainerType<?> containerType = (ContainerType<?>) supertype;
+        if (containerType.getContentType() == null) {
+            JavaType contentType = _findSuperTypeForResolution(containerType.getContentTypeHandler().handledType(), forceLookup);
+            if (contentType == null) {
+                throw new IllegalArgumentException("Could not find content type for " + containerType.getName());
+            }
+            supertype = containerType.withContentType(contentType);
+        }
+    }
+    // and if it's still not resolved, we need to resolve it now
+    if (supertype.isContainerType() && ((ContainerType<?>) supertype).getContentType() == null) {
+        throw new IllegalArgumentException("Could not resolve content type for " + supertype.getName());
+    }
+    return supertype;
+}
+
+private JavaType _findSuperTypeForResolution2(Class<?> cls, boolean forceLookup) {
+    // First: do we already have a type definition
+    JavaType supertype = _superTypeCache.get(cls);
+    if (supertype != null) {
+        // If it's already resolved: great!
+        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {
+            return supertype;
+        }
+    }
+    // If not, must find:
+    for (Class<?> curr = cls; curr != null; curr = curr.getSuperclass()) {
+        // First: see if there's a type definition for the class itself
+        supertype = _findSuperType(curr, forceLookup);
+        if (supertype != null) {
+            break;
+        }
+    }
+    return supertype;
+}
+
+private JavaType _findSuperType(Class<?> cls, boolean forceLookup) {
+    // First: do we already have a type definition
+    JavaType supertype = _superTypeCache.get(cls);
+    if (supertype != null) {
+        // If it's already resolved: great!
+        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {
+            return supertype;
+        }
+    }
+    // If not, must find:
+    TypeVariable<?>[] vars = cls.getTypeParameters();
+    if (vars.length == 0) { // no type variables, can't be recursive
+        return null;
+    }
+    // Then: see if there's a type definition for any of its type variables
+    for (TypeVariable<?> var : vars) {
+        JavaType type = _findSuperTypeForVariable(cls, var, forceLookup);
+        if (type != null) {
+            return type;
+        }
+    }
+    return null;
+}
+
+private JavaType _findSuperTypeForVariable(Class<?> cls, TypeVariable<?> var, boolean forceLookup) {
+    // First: do we already have a type definition
+    JavaType supertype = _superTypeCache.get(cls);
+    if (supertype != null) {
+        // If it's already resolved: great!
+        if (!supertype.isContainerType() || ((ContainerType<?>) supertype).getContentType() != null) {
+            return supertype;
+        }
+    }
+    // If not, must find:
+    for (Type bound : var.getBounds()) {
+        if (bound instanceof Class) {
+            Class<?> boundClass = (Class<?>) bound;
+            if (boundClass.equals(cls) || boundClass.isAssignableFrom(cls)) {
+                return _findSuperType(boundClass, forceLookup);
+            }
+        } else if (bound instanceof ParameterizedType) {
+            ParameterizedType parameterizedType = (ParameterizedType) bound;
+            if (parameterizedType.getRawType().equals(cls)) {
+                return _findSuperType(cls, forceLookup);
+            }
+        }
+    }
+    return null;
+}
\ No newline at end of file
