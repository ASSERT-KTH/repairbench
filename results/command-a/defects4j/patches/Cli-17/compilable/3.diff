diff --git a/tmp/c053f641-a214-49fc-9410-c50fd056a15f_buggy.java b/tmp/2a0d196c-d10e-4895-a948-db83c7bfb02d_fixed.java
index 43fb5fd..62f458c 100644
--- a/tmp/c053f641-a214-49fc-9410-c50fd056a15f_buggy.java
+++ b/tmp/2a0d196c-d10e-4895-a948-db83c7bfb02d_fixed.java
@@ -1,55 +1,37 @@
-    /**
-     * <p>Breaks <code>token</code> into its constituent parts
-     * using the following algorithm.
-     * <ul>
-     *  <li>ignore the first character ("<b>-</b>")</li>
-     *  <li>foreach remaining character check if an {@link Option}
-     *  exists with that id.</li>
-     *  <li>if an {@link Option} does exist then add that character
-     *  prepended with "<b>-</b>" to the list of processed tokens.</li>
-     *  <li>if the {@link Option} can have an argument value and there 
-     *  are remaining characters in the token then add the remaining 
-     *  characters as a token to the list of processed tokens.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
-     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
-     *  "<b>--</b>" followed by the remaining characters and also 
-     *  the remaining tokens directly to the processed tokens list.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
-     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
-     *  character prepended with "<b>-</b>".</li>
-     * </ul>
-     * </p>
-     *
-     * @param token The current token to be <b>burst</b>
-     * @param stopAtNonOption Specifies whether to stop processing
-     * at the first non-Option encountered.
-     */
-    protected void burstToken(String token, boolean stopAtNonOption)
-    {
-        for (int i = 1; i < token.length(); i++)
-        {
+protected void burstToken(String token, boolean stopAtNonOption) {
+    StringBuilder currentToken = new StringBuilder();
+    boolean inArgument = false;
+
+    for (int i = 1; i < token.length(); i++) {
         String ch = String.valueOf(token.charAt(i));
 
-            if (options.hasOption(ch))
-            {
+        if (!inArgument && options.hasOption(ch)) {
+            if (currentToken.length() > 0) {
+                tokens.add(currentToken.toString());
+                currentToken.setLength(0);
+            }
             tokens.add("-" + ch);
             currentOption = options.getOption(ch);
 
-                if (currentOption.hasArg() && (token.length() != (i + 1)))
-                {
-                    tokens.add(token.substring(i + 1));
-
-                    break;
+            if (currentOption.hasArg() && (token.length() != (i + 1))) {
+                inArgument = true;
+                currentToken.append(token.charAt(i + 1));
             }
+        } else if (inArgument) {
+            currentToken.append(token.charAt(i));
+        } else if (stopAtNonOption) {
+            if (currentToken.length() > 0) {
+                tokens.add(currentToken.toString());
+                currentToken.setLength(0);
             }
-            else if (stopAtNonOption)
-            {
             process(token.substring(i));
-            }
-            else
-            {
-                tokens.add(token);
             break;
+        } else {
+            currentToken.append(token.charAt(i));
         }
     }
+
+    if (currentToken.length() > 0) {
+        tokens.add(currentToken.toString());
+    }
 }
\ No newline at end of file
