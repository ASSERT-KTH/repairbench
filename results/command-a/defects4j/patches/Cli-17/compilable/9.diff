diff --git a/tmp/beb6ce2c-c869-4624-8922-950693c752e7_buggy.java b/tmp/9fa8a623-308a-4445-a80c-00502a287b69_fixed.java
index 43fb5fd..7f3cfeb 100644
--- a/tmp/beb6ce2c-c869-4624-8922-950693c752e7_buggy.java
+++ b/tmp/9fa8a623-308a-4445-a80c-00502a287b69_fixed.java
@@ -1,55 +1,47 @@
-    /**
-     * <p>Breaks <code>token</code> into its constituent parts
-     * using the following algorithm.
-     * <ul>
-     *  <li>ignore the first character ("<b>-</b>")</li>
-     *  <li>foreach remaining character check if an {@link Option}
-     *  exists with that id.</li>
-     *  <li>if an {@link Option} does exist then add that character
-     *  prepended with "<b>-</b>" to the list of processed tokens.</li>
-     *  <li>if the {@link Option} can have an argument value and there 
-     *  are remaining characters in the token then add the remaining 
-     *  characters as a token to the list of processed tokens.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> 
-     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
-     *  "<b>--</b>" followed by the remaining characters and also 
-     *  the remaining tokens directly to the processed tokens list.</li>
-     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
-     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
-     *  character prepended with "<b>-</b>".</li>
-     * </ul>
-     * </p>
-     *
-     * @param token The current token to be <b>burst</b>
-     * @param stopAtNonOption Specifies whether to stop processing
-     * at the first non-Option encountered.
-     */
     protected void burstToken(String token, boolean stopAtNonOption)
     {
+        StringBuilder currentOption = new StringBuilder("");
+        
         for (int i = 1; i < token.length(); i++)
         {
             String ch = String.valueOf(token.charAt(i));
 
             if (options.hasOption(ch))
             {
+                if (currentOption.length() > 0)
+                {
+                    process(currentOption.toString());
+                    currentOption = new StringBuilder("");
+                }
+                
                 tokens.add("-" + ch);
-                currentOption = options.getOption(ch);
+                currentOption = new StringBuilder("-" + ch);
 
-                if (currentOption.hasArg() && (token.length() != (i + 1)))
+                if (options.getOption(ch).hasArg() && (token.length() != (i + 1)))
                 {
                     tokens.add(token.substring(i + 1));
 
                     break;
                 }
             }
             else if (stopAtNonOption)
             {
+                if (currentOption.length() > 0)
+                {
+                    process(currentOption.toString());
+                }
+                
                 process(token.substring(i));
+                break;
             }
             else
             {
-                tokens.add(token);
-                break;
+                currentOption.append(ch);
             }
         }
+
+        if (currentOption.length() > 0)
+        {
+            process(currentOption.toString());
+        }
     }
\ No newline at end of file
