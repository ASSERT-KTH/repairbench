diff --git a/tmp/6a8d78e1-7317-4904-9206-e77d8ed61ca7_buggy.java b/tmp/f87d5f19-d3ce-41c1-bf91-67f30d1a0a7c_fixed.java
index 111ba5e..b68105f 100644
--- a/tmp/6a8d78e1-7317-4904-9206-e77d8ed61ca7_buggy.java
+++ b/tmp/f87d5f19-d3ce-41c1-bf91-67f30d1a0a7c_fixed.java
@@ -1,9 +1,93 @@
 public static boolean areEqual(Object o1, Object o2) {
     if (o1 == null || o2 == null) {
         return o1 == null && o2 == null;
     } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+        if (!isArray(o2) || arrayLength(o1) != arrayLength(o2)) {
+            return false;
+        }
+        if (o1.getClass() != o2.getClass()) {
+            if (!(o1 instanceof Object[] && o2 instanceof Object[])) {
+                return arrayEquals(o1, o2);
+            }
+        }
+        for (int i = 0; i < arrayLength(o1); i++) {
+            if (!areEqual(arrayGet(o1, i), arrayGet(o2, i))) {
+                return false;
+            }
+        }
+        return true;
     } else {
         return o1.equals(o2);
     }
 }
+
+private static boolean isArray(Object obj) {
+    return obj != null && obj.getClass().isArray();
+}
+
+private static int arrayLength(Object array) {
+    if (array instanceof Object[]) {
+        return ((Object[]) array).length;
+    } else if (array instanceof boolean[]) {
+        return ((boolean[]) array).length;
+    } else if (array instanceof byte[]) {
+        return ((byte[]) array).length;
+    } else if (array instanceof char[]) {
+        return ((char[]) array).length;
+    } else if (array instanceof double[]) {
+        return ((double[]) array).length;
+    } else if (array instanceof float[]) {
+        return ((float[]) array).length;
+    } else if (array instanceof int[]) {
+        return ((int[]) array).length;
+    } else if (array instanceof long[]) {
+        return ((long[]) array).length;
+    } else if (array instanceof short[]) {
+        return ((short[]) array).length;
+    }
+    throw new RuntimeException("Unsupported array type");
+}
+
+private static Object arrayGet(Object array, int index) {
+    if (array instanceof Object[]) {
+        return ((Object[]) array)[index];
+    } else if (array instanceof boolean[]) {
+        return ((boolean[]) array)[index] ? Boolean.TRUE : Boolean.FALSE;
+    } else if (array instanceof byte[]) {
+        return ((byte[]) array)[index];
+    } else if (array instanceof char[]) {
+        return ((char[]) array)[index];
+    } else if (array instanceof double[]) {
+        return ((double[]) array)[index];
+    } else if (array instanceof float[]) {
+        return ((float[]) array)[index];
+    } else if (array instanceof int[]) {
+        return ((int[]) array)[index];
+    } else if (array instanceof long[]) {
+        return ((long[]) array)[index];
+    } else if (array instanceof short[]) {
+        return ((short[]) array)[index];
+    }
+    throw new RuntimeException("Unsupported array type");
+}
+
+private static boolean arrayEquals(Object o1, Object o2) {
+    if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
+        return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+    } else if (o1 instanceof byte[] && o2 instanceof byte[]) {
+        return Arrays.equals((byte[]) o1, (byte[]) o2);
+    } else if (o1 instanceof char[] && o2 instanceof char[]) {
+        return Arrays.equals((char[]) o1, (char[]) o2);
+    } else if (o1 instanceof double[] && o2 instanceof double[]) {
+        return Arrays.equals((double[]) o1, (double[]) o2);
+    } else if (o1 instanceof float[] && o2 instanceof float[]) {
+        return Arrays.equals((float[]) o1, (float[]) o2);
+    } else if (o1 instanceof int[] && o2 instanceof int[]) {
+        return Arrays.equals((int[]) o1, (int[]) o2);
+    } else if (o1 instanceof long[] && o2 instanceof long[]) {
+        return Arrays.equals((long[]) o1, (long[]) o2);
+    } else if (o1 instanceof short[] && o2 instanceof short[]) {
+        return Arrays.equals((short[]) o1, (short[]) o2);
+    }
+    throw new RuntimeException("Unsupported array type");
+}
\ No newline at end of file
