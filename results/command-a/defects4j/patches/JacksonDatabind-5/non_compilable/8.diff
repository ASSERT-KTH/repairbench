diff --git a/tmp/f6fbb88d-035b-4aa8-be57-f4bd2168508b_buggy.java b/tmp/4a3ec10b-e865-49c3-9565-018cea59d415_fixed.java
index b2db1d6..5ca1805 100644
--- a/tmp/f6fbb88d-035b-4aa8-be57-f4bd2168508b_buggy.java
+++ b/tmp/4a3ec10b-e865-49c3-9565-018cea59d415_fixed.java
@@ -1,29 +1,30 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                // Fix for [Issue#515]: Always add the mixin method, even if it's not 
+                // directly from the target class, to ensure proper merging across levels.
+                mixIns.add(_constructMethod(m, mixin));
             }
         }
     }
 }
\ No newline at end of file
