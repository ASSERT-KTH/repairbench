diff --git a/tmp/6d3be79f-0a8a-4ffa-8159-212d2a10428e_buggy.java b/tmp/4ceed7de-c59c-4a09-9dfd-217c243b9702_fixed.java
index b2db1d6..f15396f 100644
--- a/tmp/6d3be79f-0a8a-4ffa-8159-212d2a10428e_buggy.java
+++ b/tmp/4ceed7de-c59c-4a09-9dfd-217c243b9702_fixed.java
@@ -1,29 +1,48 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
             Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
     for (Class<?> mixin : parents) {
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
             /* Do we already have a method to augment (from sub-class
              * that will mask this mixIn)? If so, add if visible
              * without masking (no such annotation)
              */
             if (am != null) {
                 _addMixUnders(m, am);
                 /* Otherwise will have precedence, but must wait
                  * until we find the real method (mixIn methods are
                  * just placeholder, can't be called)
                  */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
-                        mixIns.add(_constructMethod(m));
+                // As per [Issue#515], we need to ensure that mixIns are correctly merged
+                // even when there are multiple levels of mixins.
+                AnnotatedMethod mixinMethod = _constructMethod(m);
+                AnnotatedMethod existingMixin = mixIns.find(m);
+                if (existingMixin != null) {
+                    // Merge the new mixin with the existing one
+                    AnnotatedMethod mergedMethod = _mergeAnnotatedMethods(existingMixin, mixinMethod);
+                    mixIns.add(mergedMethod);
+                } else {
+                    mixIns.add(mixinMethod);
                 }
             }
         }
     }
+}
+
+private AnnotatedMethod _mergeAnnotatedMethods(AnnotatedMethod existing, AnnotatedMethod newMethod) {
+    // Merge annotations and other properties from newMethod into existing
+    // This is a simplified example; actual merging logic may be more complex
+    AnnotatedMethod merged = new AnnotatedMethod(existing.getMember(), existing.getType());
+    merged.addAnnotations(existing.getAnnotations());
+    merged.addAnnotations(newMethod.getAnnotations());
+    // Add other merging logic as needed
+    return merged;
+}
\ No newline at end of file
