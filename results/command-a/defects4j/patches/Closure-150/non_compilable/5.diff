diff --git a/tmp/47c9b27a-4d95-4608-aba0-3d1c4e93ad05_buggy.java b/tmp/7a80ac13-5335-4943-afb3-3726254dd475_fixed.java
index 800e6e1..080b8dd 100644
--- a/tmp/47c9b27a-4d95-4608-aba0-3d1c4e93ad05_buggy.java
+++ b/tmp/7a80ac13-5335-4943-afb3-3726254dd475_fixed.java
@@ -1,32 +1,61 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+      if (parent.getType() == Token.NAME && NodeUtil.isNamespacedFunction(parent)) {
+        handleNamespacedFunction(parent);
+      } else if (parent.getType() == Token.ASSIGN && parent.getParent().getType() == Token.NAME) {
+        handleCollectedFunction(parent);
+      } else if (parent.getType() == Token.EXPR_RESULT && parent.getParent().getType() == Token.BLOCK) {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
+
+private void handleNamespacedFunction(Node parent) {
+  Node fnNode = parent.getFirstChild();
+  String ns = parent.getParent().getString();
+  String propName = parent.getString();
+  defineNamespacedFunction(fnNode, ns, propName);
+}
+
+private void handleCollectedFunction(Node parent) {
+  Node fnNode = parent.getFirstChild();
+  Node assignParent = parent.getParent();
+  String varName = assignParent.getString();
+  defineCollectedFunction(fnNode, varName);
+}
+
+private void defineNamespacedFunction(Node fnNode, String ns, String propName) {
+  JSType type = getNativeType(FUNCTION_TYPE);
+  ObjectType fnType = (ObjectType) type;
+  scope.getVar(ns).getPropertyType(propName).setDeclaredType(fnType);
+}
+
+private void defineCollectedFunction(Node fnNode, String varName) {
+  JSType type = getNativeType(FUNCTION_TYPE);
+  ObjectType fnType = (ObjectType) type;
+  scope.getVar(varName).setDeclaredType(fnType);
+}
\ No newline at end of file
