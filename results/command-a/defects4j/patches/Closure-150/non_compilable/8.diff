diff --git a/tmp/128216f0-4d15-4fed-92d5-9ca11981c2f3_buggy.java b/tmp/81ed20dc-7647-4f5c-bdd3-bfc852815ee0_fixed.java
index 800e6e1..8e0df64 100644
--- a/tmp/128216f0-4d15-4fed-92d5-9ca11981c2f3_buggy.java
+++ b/tmp/81ed20dc-7647-4f5c-bdd3-bfc852815ee0_fixed.java
@@ -1,32 +1,87 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+          if (NodeUtil.isNameDeclaration(parent)) {
+            handleNameDeclaration(t, n, parent);
+          } else {
             defineDeclaredFunction(n, parent);
+          }
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
+
+    private void handleNameDeclaration(NodeTraversal t, Node n, Node parent) {
+      Node grandparent = parent.getParent();
+      if (grandparent != null && grandparent.getType() == Token.ASSIGN) {
+        // Handle namespaced function stubs
+        if (grandparent.getFirstChild() == parent &&
+            grandparent.getLastChild().getType() == Token.OBJECTLIT) {
+          defineNamespacedFunctionStub(t, n, grandparent);
+        } else {
+          // Handle collected function stubs
+          defineCollectedFunctionStub(t, n, grandparent);
+        }
+      }
+    }
+
+    private void defineNamespacedFunctionStub(NodeTraversal t, Node n, Node assign) {
+      Node objectLit = assign.getLastChild();
+      for (Node key : objectLit.children()) {
+        String propertyName = key.getString();
+        Node value = key.getFirstChild();
+        if (value != null && value.getType() == Token.FUNCTION) {
+          JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(t.getCompiler(), value);
+          if (jsdoc != null) {
+            String namespace = assign.getFirstChild().getQualifiedName();
+            if (namespace != null) {
+              String qualifiedName = namespace + "." + propertyName;
+              ObjectType namespaceType = (ObjectType) findNameType(namespace, scope);
+              if (namespaceType != null) {
+                JSType type = getFunctionTypeFromJSDoc(jsdoc, t.getScope());
+                namespaceType.defineDeclaredProperty(propertyName, type, t.getScope());
+                scope.declare(qualifiedName, type, t.getLineno(n), t.getCharno(n), n);
+              }
+            }
+          }
+        }
+      }
+    }
+
+    private void defineCollectedFunctionStub(NodeTraversal t, Node n, Node assign) {
+      JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(t.getCompiler(), n);
+      if (jsdoc != null) {
+        String name = n.getFirstChild().getString();
+        JSType type = getFunctionTypeFromJSDoc(jsdoc, t.getScope());
+        scope.declare(name, type, t.getLineno(n), t.getCharno(n), n);
+      }
+    }
+
+    private JSType getFunctionTypeFromJSDoc(JSDocInfo jsdoc, StaticScope<JSType> scope) {
+      JSTypeRegistry registry = scope.getScope().getJSTypeRegistry();
+      FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);
+      builder.withParamsNode(jsdoc.getParameterCount(), jsdoc.getParameterType(0));
+      builder.withReturnType(jsdoc.getReturnType());
+      return builder.build();
+    }
\ No newline at end of file
