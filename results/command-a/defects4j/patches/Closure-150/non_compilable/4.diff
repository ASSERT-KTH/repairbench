diff --git a/tmp/c1fb1940-74a9-4ebe-84a7-80e6aa2edfc1_buggy.java b/tmp/31e8a609-d0a2-4bd8-b08c-4f59c54ed688_fixed.java
index 800e6e1..418923e 100644
--- a/tmp/c1fb1940-74a9-4ebe-84a7-80e6aa2edfc1_buggy.java
+++ b/tmp/31e8a609-d0a2-4bd8-b08c-4f59c54ed688_fixed.java
@@ -1,32 +1,53 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
+      if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.ASSIGN) {
+        // Handle namespaced function stubs
+        Node assign = parent.getParent();
+        Node name = assign.getFirstChild();
+        if (name.getType() == Token.GETPROP) {
+          String namespace = name.getFirstChild().getString();
+          String propertyName = name.getLastChild().getString();
+          ObjectType namespaceType = (ObjectType) scope.getVar(namespace).getType();
+          if (namespaceType != null && !namespaceType.hasProperty(propertyName)) {
+            namespaceType.defineDeclaredProperty(propertyName, getFunctionType(n), n);
           }
+        }
+      } else if (parent.getType() == Token.VAR) {
+        // Handle constructor function stubs
+        String varName = parent.getFirstChild().getString();
+        ObjectType instanceType = ObjectType.cast(scope.getVar(varName).getType());
+        if (instanceType != null && n.getFirstChild().getType() == Token.NAME) {
+          String methodName = n.getFirstChild().getString();
+          if (!instanceType.hasProperty(methodName)) {
+            instanceType.defineDeclaredProperty(methodName, getFunctionType(n), n);
+          }
+        }
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
