diff --git a/tmp/52beb282-b561-43af-b494-2b08e8d23b3b_buggy.java b/tmp/560bd0d1-c178-493a-80f2-54e56e96e3ec_fixed.java
index 800e6e1..c12ecab 100644
--- a/tmp/52beb282-b561-43af-b494-2b08e8d23b3b_buggy.java
+++ b/tmp/560bd0d1-c178-493a-80f2-54e56e96e3ec_fixed.java
@@ -1,32 +1,53 @@
     /**
      * Visit a node in a local scope, and add any local variables or catch
      * parameters into the local symbol table.
      *
      * @param t The node traversal.
      * @param n The node being visited.
      * @param parent The parent of n
      */
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (n == scope.getRootNode()) return;
 
       if (n.getType() == Token.LP && parent == scope.getRootNode()) {
         handleFunctionInputs(parent);
         return;
       }
 
       attachLiteralTypes(n);
       switch (n.getType()) {
         case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
+          if (NodeUtil.isNameDeclaration(parent)) {
+            // Handle namespaced function declarations
+            if (parent.getType() == Token.ASSIGN &&
+                parent.getFirstChild().getType() == Token.GETPROP) {
+              defineNamespacedFunction(parent);
               return;
             }
+          }
           defineDeclaredFunction(n, parent);
           break;
         case Token.CATCH:
           defineCatch(n, parent);
           break;
         case Token.VAR:
           defineVar(n, parent);
           break;
       }
     }
+
+    private void defineNamespacedFunction(Node n) {
+      Node propNode = n.getFirstChild();
+      String propName = propNode.getLastChild().getString();
+      Node objNode = propNode.getFirstChild();
+      String objName = objNode.getString();
+
+      JSType objType = scope.getVar(objName).getType();
+      if (objType instanceof ObjectType) {
+        ObjectType objObjectType = (ObjectType) objType;
+        Node functionNode = n.getLastChild();
+        JSType functionType = getFunctionType(functionNode);
+        objObjectType.defineDeclaredProperty(
+            propName, functionType, n);
+      }
+    }
\ No newline at end of file
