diff --git a/tmp/08d9a071-8d52-4281-9f69-4e50ffedeb9e_buggy.java b/tmp/f966af81-f58d-44d0-abb4-82d7cd40c3e0_fixed.java
index 800e6e1..adf3c12 100644
--- a/tmp/08d9a071-8d52-4281-9f69-4e50ffedeb9e_buggy.java
+++ b/tmp/f966af81-f58d-44d0-abb4-82d7cd40c3e0_fixed.java
@@ -1,32 +1,62 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
-          if (parent.getType() == Token.NAME) {
-            return;
-          }
+      if (parent != null && parent.getType() == Token.NAME) {
+        // Handle namespaced functions
+        defineNamespacedFunction(n, parent);
+      } else if (parent != null && parent.getType() == Token.ASSIGN) {
+        // Handle collected functions
+        defineCollectedFunction(n, parent);
+      } else {
         defineDeclaredFunction(n, parent);
+      }
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
+
+private void defineNamespacedFunction(Node functionNode, Node parent) {
+  String namespace = parent.getString();
+  String functionName = functionNode.getFirstChild().getString();
+  String fullName = namespace + "." + functionName;
+
+  JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);
+  JSType type = getFunctionTypeFromJSDoc(info);
+
+  scope.declareNamespaceFunction(fullName, type, functionNode);
+}
+
+private void defineCollectedFunction(Node functionNode, Node parent) {
+  Node lhs = parent.getFirstChild();
+  if (lhs.getType() == Token.GETPROP) {
+    String namespace = lhs.getFirstChild().getString();
+    String functionName = lhs.getLastChild().getString();
+    String fullName = namespace + "." + functionName;
+
+    JSDocInfo info = NodeUtil.getBestJSDocInfo(functionNode);
+    JSType type = getFunctionTypeFromJSDoc(info);
+
+    scope.declareCollectedFunction(fullName, type, functionNode);
+  }
+}
\ No newline at end of file
