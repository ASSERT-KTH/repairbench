diff --git a/tmp/e18653d0-1719-4536-b737-aa501ceb296e_buggy.java b/tmp/5b2911e8-6d76-4850-8ed4-d652da8417d0_fixed.java
index c4b260c..2f142aa 100644
--- a/tmp/e18653d0-1719-4536-b737-aa501ceb296e_buggy.java
+++ b/tmp/5b2911e8-6d76-4850-8ed4-d652da8417d0_fixed.java
@@ -1,51 +1,56 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
         // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.mark(); // mark the current position to allow reset after initial parse
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
             } else {
                 foundCharset = meta.attr("charset");
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.reset(); // reset to the beginning to re-decode with the correct charset
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
+        } else {
+            byteData.reset(); // reset to the beginning if no meta charset is found
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+    
+    // Check for UTF-8 BOM and handle it appropriately
     if (docData.length() > 0 && docData.charAt(0) == 65279) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
+        docData = docData.substring(1); // Remove the BOM
         charsetName = defaultCharset;
+        doc = null; // Force reparse
     }
+    
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
