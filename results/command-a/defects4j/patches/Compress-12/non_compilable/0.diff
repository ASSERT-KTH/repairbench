diff --git a/tmp/7bd8d956-485f-421b-96a2-7118e160fca3_buggy.java b/tmp/3cfa6cce-e5ad-4de4-918c-c70363796723_fixed.java
index b5a206b..77d473d 100644
--- a/tmp/7bd8d956-485f-421b-96a2-7118e160fca3_buggy.java
+++ b/tmp/3cfa6cce-e5ad-4de4-918c-c70363796723_fixed.java
@@ -1,80 +1,86 @@
 /**
  * Get the next entry in this tar archive. This will skip
  * over any remaining data in the current entry, if there
  * is one, and place the input stream at the header of the
  * next entry, and read the header and instantiate a new
  * TarEntry from the header bytes and return that entry.
  * If there are no more entries in the archive, null will
  * be returned to indicate that the end of the archive has
  * been reached.
  *
  * @return The next TarEntry in the archive, or null.
  * @throws IOException on error
  */
 public TarArchiveEntry getNextTarEntry() throws IOException {
     if (hasHitEOF) {
         return null;
     }
 
     if (currEntry != null) {
         long numToSkip = entrySize - entryOffset;
 
-            while (numToSkip > 0) {
+        if (numToSkip > 0) {
             long skipped = skip(numToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
+            if (skipped != numToSkip) {
+                throw new IOException("Failed to skip " + numToSkip + " bytes, skipped " + skipped);
             }
-                numToSkip -= skipped;
         }
 
         readBuf = null;
     }
 
     byte[] headerBuf = getRecord();
 
-        if (hasHitEOF) {
+    if (headerBuf == null) {
+        hasHitEOF = true;
         currEntry = null;
         return null;
     }
 
+    if (TarArchiveEntry.matchesCheckBytes(headerBuf)) {
         currEntry = new TarArchiveEntry(headerBuf);
         entryOffset = 0;
         entrySize = currEntry.getSize();
 
         if (currEntry.isGNULongNameEntry()) {
             // read in the name
             StringBuffer longName = new StringBuffer();
             byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
+            int length;
             while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+                if (length == 0) {
+                    break; // End of stream
+                }
+                longName.append(new String(buf, 0, length, StandardCharsets.UTF_8));
             }
             getNextEntry();
             if (currEntry == null) {
                 // Bugzilla: 40334
                 // Malformed tar file - long entry name not followed by entry
-                return null;
+                throw new IOException("Malformed tar file: long entry name not followed by entry");
             }
             // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
+            if (longName.length() > 0 && longName.charAt(longName.length() - 1) == 0) {
                 longName.deleteCharAt(longName.length() - 1);
             }
             currEntry.setName(longName.toString());
         }
 
         if (currEntry.isPaxHeader()) { // Process Pax headers
             paxHeaders();
         }
 
         if (currEntry.isGNUSparse()) { // Process sparse files
             readGNUSparse();
         }
 
         // If the size of the next element in the archive has changed
         // due to a new size being reported in the posix header
         // information, we update entrySize here so that it contains
         // the correct value.
         entrySize = currEntry.getSize();
         return currEntry;
+    } else {
+        throw new IOException("Invalid tar header: " + TarArchiveEntry.parseOctal(headerBuf, 128, 8));
+    }
 }
\ No newline at end of file
