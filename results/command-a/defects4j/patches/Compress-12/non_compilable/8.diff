diff --git a/tmp/c1cbd5e6-4744-4a38-8408-a9648c004e0b_buggy.java b/tmp/a3cb7a24-4aa1-4b5c-9c0d-ac0c8edb8050_fixed.java
index b5a206b..19556a4 100644
--- a/tmp/c1cbd5e6-4744-4a38-8408-a9648c004e0b_buggy.java
+++ b/tmp/a3cb7a24-4aa1-4b5c-9c0d-ac0c8edb8050_fixed.java
@@ -1,80 +1,85 @@
     /**
      * Get the next entry in this tar archive. This will skip
      * over any remaining data in the current entry, if there
      * is one, and place the input stream at the header of the
      * next entry, and read the header and instantiate a new
      * TarEntry from the header bytes and return that entry.
      * If there are no more entries in the archive, null will
      * be returned to indicate that the end of the archive has
      * been reached.
      *
      * @return The next TarEntry in the archive, or null.
      * @throws IOException on error
      */
     public TarArchiveEntry getNextTarEntry() throws IOException {
         if (hasHitEOF) {
             return null;
         }
 
         if (currEntry != null) {
             long numToSkip = entrySize - entryOffset;
 
-            while (numToSkip > 0) {
+            if (numToSkip > 0) {
                 long skipped = skip(numToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip current tar entry");
+                if (skipped != numToSkip) {
+                    throw new IOException("Failed to skip " + numToSkip + " bytes, only skipped " + skipped);
                 }
-                numToSkip -= skipped;
             }
 
             readBuf = null;
         }
 
         byte[] headerBuf = getRecord();
 
-        if (hasHitEOF) {
+        if (headerBuf == null) {
+            hasHitEOF = true;
             currEntry = null;
             return null;
         }
 
+        if (TarArchiveEntry.matchesHeader(headerBuf)) {
             currEntry = new TarArchiveEntry(headerBuf);
             entryOffset = 0;
             entrySize = currEntry.getSize();
 
             if (currEntry.isGNULongNameEntry()) {
                 // read in the name
-            StringBuffer longName = new StringBuffer();
+                ByteArrayOutputStream longName = new ByteArrayOutputStream();
                 byte[] buf = new byte[SMALL_BUFFER_SIZE];
-            int length = 0;
+                int length;
                 while ((length = read(buf)) >= 0) {
-                longName.append(new String(buf, 0, length));
+                    longName.write(buf, 0, length);
                 }
                 getNextEntry();
                 if (currEntry == null) {
                     // Bugzilla: 40334
                     // Malformed tar file - long entry name not followed by entry
-                return null;
+                    throw new IOException("Malformed tar file - long entry name not followed by entry");
                 }
                 // remove trailing null terminator
-            if (longName.length() > 0
-                && longName.charAt(longName.length() - 1) == 0) {
-                longName.deleteCharAt(longName.length() - 1);
+                byte[] longNameBytes = longName.toByteArray();
+                if (longNameBytes.length > 0 && longNameBytes[longNameBytes.length - 1] == 0) {
+                    currEntry.setName(new String(longNameBytes, 0, longNameBytes.length - 1, "UTF-8"));
+                } else {
+                    currEntry.setName(new String(longNameBytes, "UTF-8"));
                 }
-            currEntry.setName(longName.toString());
             }
 
             if (currEntry.isPaxHeader()) { // Process Pax headers
                 paxHeaders();
             }
 
             if (currEntry.isGNUSparse()) { // Process sparse files
                 readGNUSparse();
             }
 
             // If the size of the next element in the archive has changed
             // due to a new size being reported in the posix header
             // information, we update entrySize here so that it contains
             // the correct value.
             entrySize = currEntry.getSize();
             return currEntry;
+        } else {
+            throw new IllegalArgumentException("Invalid tar header: " + new String(headerBuf, 0, headerBuf.length < 100 ? headerBuf.length : 100));
+        }
     }
\ No newline at end of file
