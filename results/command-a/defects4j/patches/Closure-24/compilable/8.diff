diff --git a/tmp/3a1aa089-91e7-42f7-a314-08bcb56469ff_buggy.java b/tmp/a4d93ba9-f239-423d-a942-7850d3780af8_fixed.java
index 602226b..5cf49fb 100644
--- a/tmp/3a1aa089-91e7-42f7-a314-08bcb56469ff_buggy.java
+++ b/tmp/a4d93ba9-f239-423d-a942-7850d3780af8_fixed.java
@@ -1,26 +1,26 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Handle the case where aliasVar is null, possibly due to the variable not being an alias.
+          // This is where the issue lies in the testNonAliasLocal test case.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
+        // The variable is not an alias, report the error.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
