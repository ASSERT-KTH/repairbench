diff --git a/tmp/c69300df-171d-4a45-abcf-68c445f7f3de_buggy.java b/tmp/e896ed60-1f32-4fbc-b2fe-6bc80f979fc9_fixed.java
index 602226b..9f53d4e 100644
--- a/tmp/c69300df-171d-4a45-abcf-68c445f7f3de_buggy.java
+++ b/tmp/e896ed60-1f32-4fbc-b2fe-6bc80f979fc9_fixed.java
@@ -1,26 +1,30 @@
 private void findAliases(NodeTraversal t) {
     Scope scope = t.getScope();
     for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
             if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
                 String name = n.getString();
                 Var aliasVar = scope.getVar(name);
+                if (aliasVar != null) { // Added null check
                     aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+                    String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
                     transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
                 } else {
-          // TODO(robbyw): Support using locals for private variables.
+                    // If aliasVar is null, it means the variable is not an alias
                     report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
                 }
+            } else {
+                // If the node does not have children or the first child is not a qualified name,
+                // it's not an alias
+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+            }
+        } else {
+            // If the parent is not a VAR node, it's not an alias
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
     }
 }
\ No newline at end of file
