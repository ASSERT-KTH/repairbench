diff --git a/tmp/6f89336f-2ef9-4f56-a6f2-f9e701090353_buggy.java b/tmp/790c4786-25b9-4346-bab4-1a64bb480071_fixed.java
index 602226b..4a142d5 100644
--- a/tmp/6f89336f-2ef9-4f56-a6f2-f9e701090353_buggy.java
+++ b/tmp/790c4786-25b9-4346-bab4-1a64bb480071_fixed.java
@@ -1,26 +1,23 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) { // Check if aliasVar exists
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
