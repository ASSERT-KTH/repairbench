diff --git a/tmp/7f2f9808-aee7-478c-8e0d-83198e12008d_buggy.java b/tmp/b3d90e58-6e10-4f02-ad73-66a74ff45118_fixed.java
index 602226b..1f974e6 100644
--- a/tmp/7f2f9808-aee7-478c-8e0d-83198e12008d_buggy.java
+++ b/tmp/b3d90e58-6e10-4f02-ad73-66a74ff45118_fixed.java
@@ -1,26 +1,32 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
     if (parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
         String name = n.getString();
         Var aliasVar = scope.getVar(name);
+        if (aliasVar != null) {
           aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Handle the case where aliasVar is null, meaning it's not an alias
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
+        // Handle non-alias locals
+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+      }
+    } else {
+      // Handle other cases, e.g., function declarations
+      if (parent.isFunction()) {
+        // Do nothing for function declarations
+      } else {
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
