diff --git a/tmp/f0024a21-323d-4d87-9da7-cfb9ac6f6940_buggy.java b/tmp/bba4b23d-1c15-4dae-984c-a2a8f3a5d59e_fixed.java
index 851ffc2..c99ca0b 100644
--- a/tmp/f0024a21-323d-4d87-9da7-cfb9ac6f6940_buggy.java
+++ b/tmp/bba4b23d-1c15-4dae-984c-a2a8f3a5d59e_fixed.java
@@ -1,70 +1,83 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
 void replace() {
   if (firstNode == null) {
     // Don't touch the base case ('goog').
     replacementNode = candidateDefinition;
     return;
   }
 
   // Handle the case where there is a duplicate definition for an explicitly
   // provided symbol.
   if (candidateDefinition != null && explicitNode != null) {
     explicitNode.detachFromParent();
     compiler.reportCodeChange();
 
     // Does this need a VAR keyword?
     replacementNode = candidateDefinition;
     if (NodeUtil.isExpressionNode(candidateDefinition)) {
       candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
       Node assignNode = candidateDefinition.getFirstChild();
       Node nameNode = assignNode.getFirstChild();
       if (nameNode.getType() == Token.NAME) {
         // Need to convert this assign to a var declaration.
         Node valueNode = nameNode.getNext();
         assignNode.removeChild(nameNode);
         assignNode.removeChild(valueNode);
-            nameNode.addChildToFront(valueNode);
         Node varNode = new Node(Token.VAR, nameNode);
         varNode.copyInformationFrom(candidateDefinition);
         candidateDefinition.getParent().replaceChild(
             candidateDefinition, varNode);
         nameNode.setJSDocInfo(assignNode.getJSDocInfo());
         compiler.reportCodeChange();
         replacementNode = varNode;
       }
     }
   } else {
     // Handle the case where there's not a duplicate definition.
     replacementNode = createDeclarationNode();
     if (firstModule == minimumModule) {
       firstNode.getParent().addChildBefore(replacementNode, firstNode);
     } else {
       // In this case, the name was implicitly provided by two independent
       // modules. We need to move this code up to a common module.
       int indexOfDot = namespace.indexOf('.');
       if (indexOfDot == -1) {
         // Any old place is fine.
         compiler.getNodeForCodeInsertion(minimumModule)
             .addChildToBack(replacementNode);
       } else {
         // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+        String parentNamespace = namespace.substring(0, indexOfDot);
+        ProvidedName parentName = providedNames.get(parentNamespace);
+        if (parentName == null || parentName.replacementNode == null) {
+          // If the parent namespace is not explicitly provided, find the earliest module
+          // that provides a prefix of the namespace.
+          String prefix = "";
+          for (int i = 0; i < indexOfDot; i++) {
+            prefix += namespace.charAt(i);
+            if (namespace.charAt(i) == '.') {
+              parentName = providedNames.get(prefix);
+              if (parentName != null && parentName.replacementNode != null) {
+                break;
+              }
+            }
+          }
+          if (parentName == null || parentName.replacementNode == null) {
+            // If no prefix is found, add it to the earliest module.
+            compiler.getNodeForCodeInsertion(minimumModule)
+                .addChildToBack(replacementNode);
+          } else {
             parentName.replacementNode.getParent().addChildAfter(
                 replacementNode, parentName.replacementNode);
           }
+        } else {
+          parentName.replacementNode.getParent().addChildAfter(
+              replacementNode, parentName.replacementNode);
+        }
+      }
     }
     if (explicitNode != null) {
       explicitNode.detachFromParent();
     }
     compiler.reportCodeChange();
   }
 }
\ No newline at end of file
