diff --git a/tmp/e19fc551-4305-4537-abe5-77942caa237e_buggy.java b/tmp/f8068a97-3a0f-47bd-b560-a9887f3133b0_fixed.java
index f47d784..f70ea82 100644
--- a/tmp/e19fc551-4305-4537-abe5-77942caa237e_buggy.java
+++ b/tmp/f8068a97-3a0f-47bd-b560-a9887f3133b0_fixed.java
@@ -1,12 +1,29 @@
 @Override
 public void process(Node externs, Node root) {
     NodeTraversal.traverse(compiler, root, this);
     if (MAKE_LOCAL_NAMES_UNIQUE) {
         MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
         NodeTraversal t = new NodeTraversal(compiler, renamer);
         t.traverseRoots(externs, root);
     }
     removeDuplicateDeclarations(root);
+    // Ensure 'arguments' is not renamed or modified in specific cases
+    preserveArgumentsObject(root);
     new PropogateConstantAnnotations(compiler, assertOnChange)
         .process(externs, root);
 }
+
+private void preserveArgumentsObject(Node root) {
+    NodeTraversal.traverse(compiler, root, new NodeTraversal.AbstractPostOrderCallback() {
+        @Override
+        public void visit(NodeTraversal t, Node n, Node parent) {
+            if (n.isName() && "arguments".equals(n.getString())) {
+                Node scope = t.getScope();
+                if (scope.isFunction() && scope.getFirstChild().isName()) {
+                    // Prevent renaming or modification of 'arguments' in this scope
+                    scope.putBooleanProp(Node.PRESERVE_ARGUMENTS_OBJECT, true);
+                }
+            }
+        }
+    });
+}
\ No newline at end of file
