diff --git a/tmp/70dbff40-6f5e-475b-9a27-961bedacf81e_buggy.java b/tmp/68cbca4c-d4cd-4061-a843-39db93eb447d_fixed.java
index 4e21866..5369b3a 100644
--- a/tmp/70dbff40-6f5e-475b-9a27-961bedacf81e_buggy.java
+++ b/tmp/68cbca4c-d4cd-4061-a843-39db93eb447d_fixed.java
@@ -1,10 +1,35 @@
     /**
-     * Computes the square-root of the weight matrix.
+     * Computes the square-root of the weight matrix using a more memory-efficient approach.
      *
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+        final int n = m.getRowDimension();
+        RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);
+        
+        for (int i = 0; i < n; i++) {
+            for (int j = 0; j < n; j++) {
+                if (i == j) {
+                    // Calculate the diagonal elements using the Cholesky decomposition
+                    double sum = 0;
+                    for (int k = 0; k < j; k++) {
+                        sum += sqrtM.getEntry(j, k) * sqrtM.getEntry(j, k);
+                    }
+                    sqrtM.setEntry(j, j, Math.sqrt(Math.max(0, m.getEntry(j, j) - sum)));
+                } else if (i < j) {
+                    // Calculate the upper triangular elements
+                    double sum = 0;
+                    for (int k = 0; k < i; k++) {
+                        sum += sqrtM.getEntry(i, k) * sqrtM.getEntry(j, k);
+                    }
+                    sqrtM.setEntry(i, j, (1.0 / sqrtM.getEntry(i, i)) * (m.getEntry(i, j) - sum));
+                } else {
+                    // Lower triangular elements are zero
+                    sqrtM.setEntry(i, j, 0.0);
+                }
+            }
+        }
+        
+        return sqrtM.transpose().multiply(sqrtM); // Return the square root matrix
     }
\ No newline at end of file
