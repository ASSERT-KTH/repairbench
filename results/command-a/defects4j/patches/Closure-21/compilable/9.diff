diff --git a/tmp/293a26ec-d20b-49c1-acaf-b8cf314c445d_buggy.java b/tmp/eb11fca3-4e03-46c7-bb71-86f65a1000f9_fixed.java
index 49a5702..31e05d4 100644
--- a/tmp/293a26ec-d20b-49c1-acaf-b8cf314c445d_buggy.java
+++ b/tmp/eb11fca3-4e03-46c7-bb71-86f65a1000f9_fixed.java
@@ -1,66 +1,77 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
     // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+    if (n.isEmpty() || n.isComma()) {
         return;
     }
 
     if (parent == null) {
         return;
     }
 
     // Do not try to remove a block or an expr result. We already handle
     // these cases when we visit the child, and the peephole passes will
     // fix up the tree in more clever ways when these are removed.
     if (n.isExprResult()) {
         return;
     }
 
     // This no-op statement was there so that JSDoc information could
     // be attached to the name. This check should not complain about it.
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
         return;
     }
 
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
+    // Check if the node is in a comma expression
     if (parent.getType() == Token.COMMA) {
         if (isResultUsed) {
             return;
         }
+        // If it's the last child in a comma expression, check ancestors
         if (n == parent.getLastChild()) {
+            boolean isInBlockOrExprResult = false;
             for (Node an : parent.getAncestors()) {
                 int ancestorType = an.getType();
                 if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+                if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+                    isInBlockOrExprResult = true;
+                    break;
+                } else {
+                    break;
+                }
+            }
+            if (!isInBlockOrExprResult) {
+                return;
             }
         }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        // Special case for FOR loops
+        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 && 
+              (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
             return;
         }
     }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+    // Check if the node is a simple operation or has no side effects
+    if ((isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) && !isResultUsed) {
         String msg = "This code lacks side-effects. Is there a bug?";
         if (n.isString()) {
             msg = "Is there a missing '+' on the previous line?";
         } else if (isSimpleOp) {
             msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
                   "' operator is not being used.";
         }
 
         t.getCompiler().report(
             t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
         if (!NodeUtil.isStatement(n)) {
             problemNodes.add(n);
         }
     }
 }
\ No newline at end of file
