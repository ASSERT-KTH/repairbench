diff --git a/tmp/4c712a82-3a64-4270-b358-1cfc0445d788_buggy.java b/tmp/67578ac0-f3be-4141-85e7-708750b22767_fixed.java
index fb2b020..1454996 100644
--- a/tmp/4c712a82-3a64-4270-b358-1cfc0445d788_buggy.java
+++ b/tmp/67578ac0-f3be-4141-85e7-708750b22767_fixed.java
@@ -1,27 +1,20 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
+    // We only want to match constraints on anonymous types.
+    if (isAnonymousType()) {
         // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
         if (constraintObj.isRecordType()) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!hasProperty(prop)) {
                         typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                                 .getLeastSupertype(propType);
                     }
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
\ No newline at end of file
