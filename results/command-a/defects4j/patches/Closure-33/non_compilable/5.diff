diff --git a/tmp/28d2ff85-d2cc-4f66-a18a-5229dc4bbdda_buggy.java b/tmp/ecb57378-603a-42c4-9793-ed739d6c01e7_fixed.java
index fb2b020..ffcd1f8 100644
--- a/tmp/28d2ff85-d2cc-4f66-a18a-5229dc4bbdda_buggy.java
+++ b/tmp/ecb57378-603a-42c4-9793-ed739d6c01e7_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
+    if (!isAnonymousType()) {
+        return;
+    }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
+                    // Ensure we don't infer a more specific type than necessary
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
+                } else {
+                    // If the property exists, ensure the inferred type is compatible
+                    JSType existingType = getPropertyType(prop);
+                    typeToInfer = existingType.getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
