diff --git a/tmp/0c215b3b-4d6e-4030-9bbd-5e6f93570667_buggy.java b/tmp/6fd5e4ee-5f9f-45de-908c-58ba38d73ca5_fixed.java
index fb2b020..d3317f8 100644
--- a/tmp/0c215b3b-4d6e-4030-9bbd-5e6f93570667_buggy.java
+++ b/tmp/6fd5e4ee-5f9f-45de-908c-58ba38d73ca5_fixed.java
@@ -1,27 +1,38 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
+
+    // Also handle the case where the constraint object is a union type.
+    if (constraintObj.isUnionType()) {
+        for (JSType alternate : constraintObj.getUnionMembers()) {
+            if (alternate.isRecordType()) {
+                for (String prop : alternate.toMaybeObjectType().getOwnPropertyNames()) {
+                    JSType propType = alternate.toMaybeObjectType().getPropertyType(prop);
+                    if (!isPropertyTypeDeclared(prop)) {
+                        JSType typeToInfer = propType;
+                        if (!hasProperty(prop)) {
+                            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                                    .getLeastSupertype(propType);
+                        }
+                        defineInferredProperty(prop, typeToInfer, null);
+                    }
+                }
+            }
+        }
+    }
 }
\ No newline at end of file
