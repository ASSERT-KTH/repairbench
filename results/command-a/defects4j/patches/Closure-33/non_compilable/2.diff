diff --git a/tmp/80b821da-57cf-4247-a7f9-818b12bd9306_buggy.java b/tmp/a46decf9-856f-436d-a25a-013819fe4e6c_fixed.java
index fb2b020..af14608 100644
--- a/tmp/80b821da-57cf-4247-a7f9-818b12bd9306_buggy.java
+++ b/tmp/a46decf9-856f-436d-a25a-013819fe4e6c_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
+                if (propType.isUnionType() && propType.toMaybeUnionType().hasUndefinedType()) {
+                    // If the property type includes 'undefined', we should consider it optional.
+                    // Therefore, we should not infer a type if the property is not present.
                     if (!hasProperty(prop)) {
+                        continue;
+                    }
+                } else if (!hasProperty(prop)) {
+                    // If the property is not present and it's not optional, infer the least supertype with VOID_TYPE.
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
