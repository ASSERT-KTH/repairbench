diff --git a/tmp/6cba4b54-76d5-47f6-a309-a2e2a5f24de6_buggy.java b/tmp/25053932-833b-46a7-8b9d-f6fcfdb761c9_fixed.java
index fb2b020..b79134e 100644
--- a/tmp/6cba4b54-76d5-47f6-a309-a2e2a5f24de6_buggy.java
+++ b/tmp/25053932-833b-46a7-8b9d-f6fcfdb761c9_fixed.java
@@ -1,27 +1,27 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
+    if (!isAnonymousType()) {
+      return;
+    }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
+            // Ensure we handle nullable types correctly by using the least supertype with VOID_TYPE.
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
+          } else {
+            // If the property already exists, ensure the inferred type is compatible with the existing type.
+            JSType existingType = getPropertyType(prop);
+            typeToInfer = existingType.getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
