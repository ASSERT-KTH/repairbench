diff --git a/tmp/6c229b4e-9ee3-4850-a2eb-aaa443310363_buggy.java b/tmp/ef859e54-5d64-45ab-aa55-f4c8d25731e1_fixed.java
index fb2b020..b706dcf 100644
--- a/tmp/6c229b4e-9ee3-4850-a2eb-aaa443310363_buggy.java
+++ b/tmp/ef859e54-5d64-45ab-aa55-f4c8d25731e1_fixed.java
@@ -1,27 +1,38 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+  // taking each property on the record and trying to match
+  // properties on this object, while respecting the existing properties.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
+        } else {
+          // If the property already exists, ensure the type is compatible
+          JSType existingType = getPropertyNamed(prop).getType();
+          typeToInfer = existingType.getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property is declared, ensure the declared type is compatible
+        JSType declaredType = getPropertyNamed(prop).getType();
+        if (!declaredType.isSubtype(propType)) {
+          report(JSError.make(getPropertyNamed(prop).getSource(),
+              "inferred type does not match declared type"));
+        }
       }
     }
   }
 }
\ No newline at end of file
