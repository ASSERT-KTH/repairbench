diff --git a/tmp/cc7928f7-5ad4-4d6a-b7f1-29627e8caf9b_buggy.java b/tmp/5219d56b-3147-4417-b5a7-cd1f96b8c0f0_fixed.java
index fb2b020..a19dae7 100644
--- a/tmp/cc7928f7-5ad4-4d6a-b7f1-29627e8caf9b_buggy.java
+++ b/tmp/5219d56b-3147-4417-b5a7-cd1f96b8c0f0_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // taking each property on the record and trying to match
+    // properties on this object, but only if the property is optional
+    // or if it's already present on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
+            boolean isOptional = constraintObj.isPropertyTypeDeclared(prop) &&
+                                 constraintObj.getPropertyNode(prop).isOptionalArg();
+            if (!isPropertyTypeDeclared(prop) || isOptional || hasProperty(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
