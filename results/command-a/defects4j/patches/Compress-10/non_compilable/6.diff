diff --git a/tmp/99662cd9-32e0-40c1-86df-752f80ee0615_buggy.java b/tmp/f0a56d38-b541-4b0d-b1e4-bb5fef5e9038_fixed.java
index 85e6a42..e77ecae 100644
--- a/tmp/99662cd9-32e0-40c1-86df-752f80ee0615_buggy.java
+++ b/tmp/f0a56d38-b541-4b0d-b1e4-bb5fef5e9038_fixed.java
@@ -1,50 +1,54 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
+            // Ensure that the entry's name is updated correctly
+            // and the InputStream is not null after processing
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
+            // Ensure the entry is properly initialized and InputStream is set
+            ze.getInputStream(); // This ensures the InputStream is initialized
         }
     }
 }
\ No newline at end of file
