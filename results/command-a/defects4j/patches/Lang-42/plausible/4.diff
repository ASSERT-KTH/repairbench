diff --git a/tmp/dbbc24fb-7ad4-4b75-84c2-36795d57840f_buggy.java b/tmp/b6a17a09-7c26-429f-a765-194788535422_fixed.java
index 822447c..1cab6de 100644
--- a/tmp/dbbc24fb-7ad4-4b75-84c2-36795d57840f_buggy.java
+++ b/tmp/b6a17a09-7c26-429f-a765-194788535422_fixed.java
@@ -1,37 +1,42 @@
 /**
  * <p>
  * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
  * passed.
  * </p>
  * 
  * @param writer
  *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
  * @param str
  *            The <code>String</code> to escape. Assumed to be a non-null value.
  * @throws IOException
  *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
  *             methods.
  * 
  * @see #escape(String)
  * @see Writer
  */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
         if (entityName == null) {
             if (c > 0x7F) {
+                // Use the correct Unicode code point for high Unicode characters
                 writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
+                writer.write(Integer.toString(str.codePointAt(i), 10));
+                if (Character.isHighSurrogate(c)) {
+                    // Skip the low surrogate if it exists
+                    i++;
+                }
                 writer.write(';');
             } else {
                 writer.write(c);
             }
         } else {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
         }
     }
 }
\ No newline at end of file
