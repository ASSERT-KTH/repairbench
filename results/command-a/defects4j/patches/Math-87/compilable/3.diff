diff --git a/tmp/2ead426c-0ef8-4ac3-b308-dde329cdf06d_buggy.java b/tmp/c7ab8f56-697a-48ef-928c-a30af0d7bff9_fixed.java
index 70cafe0..38efe0c 100644
--- a/tmp/2ead426c-0ef8-4ac3-b308-dde329cdf06d_buggy.java
+++ b/tmp/c7ab8f56-697a-48ef-928c-a30af0d7bff9_fixed.java
@@ -1,18 +1,22 @@
-    /**
-     * Checks whether the given column is basic.
-     * @param col index of the column to check
-     * @return the row that the variable is basic in.  null if the column is not basic
-     */
 private Integer getBasicRow(final int col) {
     Integer row = null;
     for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
         if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
             if (row == null) {
                 row = i;
             } else {
-                return null;
+                // If another non-zero entry is found in the same column,
+                // the column is not basic. But we should continue searching
+                // in case the column has only one non-zero entry.
+                // However, the correct fix is to return the first non-zero row
+                // and ignore subsequent non-zero entries, as the original 
+                // implementation was overly strict.
+                // The issue was that it returned null as soon as it found a 
+                // second non-zero entry, which was incorrect.
+                // The correct approach is to return the first non-zero row,
+                // as that indicates the column is basic in that row.
             }
         }
     }
     return row;
 }
\ No newline at end of file
