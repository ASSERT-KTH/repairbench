diff --git a/tmp/cc57628c-59d4-4526-9ae6-8702665c0f95_buggy.java b/tmp/03a4e8b3-a8ab-46d4-b22f-bc69798116dd_fixed.java
index d3b3ebf..304287c 100644
--- a/tmp/cc57628c-59d4-4526-9ae6-8702665c0f95_buggy.java
+++ b/tmp/03a4e8b3-a8ab-46d4-b22f-bc69798116dd_fixed.java
@@ -1,62 +1,51 @@
     /**
      * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
      * from this InputStream.
      * 
      * @param b
      *            destination byte array
      * @param offset
      *            where to start writing the bytes
      * @param len
      *            maximum number of bytes to read
      * 
-     * @return number of bytes read
+     * @return number of bytes read, or -1 if end of stream is reached
      * @throws IOException
      *             if an I/O error occurs.
      * @throws NullPointerException
      *             if the byte array parameter is null
      * @throws IndexOutOfBoundsException
      *             if offset, len or buffer size are invalid
      */
     public int read(byte b[], int offset, int len) throws IOException {
         if (b == null) {
             throw new NullPointerException();
         } else if (offset < 0 || len < 0) {
             throw new IndexOutOfBoundsException();
         } else if (offset > b.length || offset + len > b.length) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return 0;
         } else {
-            /*
-             Rationale for while-loop on (readLen == 0):
-             -----
-             Base64.readResults() usually returns > 0 or EOF (-1).  In the
-             rare case where it returns 0, we just keep trying.
-
-             This is essentially an undocumented contract for InputStream
-             implementors that want their code to work properly with
-             java.io.InputStreamReader, since the latter hates it when
-             InputStream.read(byte[]) returns a zero.  Unfortunately our
-             readResults() call must return 0 if a large amount of the data
-             being decoded was non-base64, so this while-loop enables proper
-             interop with InputStreamReader for that scenario.
-             -----
-             This is a fix for CODEC-101
-            */
-                if (!base64.hasData()) {
+            int readLen = 0;
+            while (readLen == 0 && !base64.hasData()) {
                 byte[] buf = new byte[doEncode ? 4096 : 8192];
                 int c = in.read(buf);
+                if (c == -1) {
+                    break; // End of stream reached
+                }
                 // A little optimization to avoid System.arraycopy()
                 // when possible.
                 if (c > 0 && b.length == len) {
                     base64.setInitialBuffer(b, offset, len);
                 }
                 if (doEncode) {
                     base64.encode(buf, 0, c);
                 } else {
                     base64.decode(buf, 0, c);
                 }
             }
-            return base64.readResults(b, offset, len);
+            readLen = base64.readResults(b, offset, len);
+            return readLen == 0 && !base64.hasData() ? -1 : readLen;
         }
     }
\ No newline at end of file
