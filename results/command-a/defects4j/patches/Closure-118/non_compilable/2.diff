diff --git a/tmp/403769fd-d945-482f-a3c6-4f77577a49a5_buggy.java b/tmp/6b02541a-3e6c-4c02-8665-4dbe3b7b4a51_fixed.java
index 0b7c52e..c313930 100644
--- a/tmp/403769fd-d945-482f-a3c6-4f77577a49a5_buggy.java
+++ b/tmp/6b02541a-3e6c-4c02-8665-4dbe3b7b4a51_fixed.java
@@ -1,27 +1,38 @@
 /**
  * Processes a OBJECTLIT node.
  */
 private void handleObjectLit(NodeTraversal t, Node n) {
   for (Node child = n.getFirstChild();
       child != null;
       child = child.getNext()) {
     // Maybe STRING, GET, SET
 
     // We should never see a mix of numbers and strings.
     String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
+    Node parent = n.getParent();
+    boolean isPrototype = parent.isAssign() && 
+        parent.getFirstChild().matchesQualifiedName("prototype");
+    
+    // If this is a prototype assignment, get the type from the constructor.
+    T type = null;
+    if (isPrototype) {
+      Node constructorNode = parent.getFirstChild().getFirstChild();
+      type = typeSystem.getType(getScope(), constructorNode, name);
+    } else {
+      type = typeSystem.getType(getScope(), n, name);
+    }
 
     Property prop = getProperty(name);
     if (!prop.scheduleRenaming(child,
                                processProperty(t, prop, type, null))) {
       // TODO(user): It doesn't look like the user can do much in this
       // case right now.
       if (propertiesToErrorFor.containsKey(name)) {
         compiler.report(JSError.make(
             t.getSourceName(), child, propertiesToErrorFor.get(name),
             Warnings.INVALIDATION, name,
             (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
   }
 }
\ No newline at end of file
