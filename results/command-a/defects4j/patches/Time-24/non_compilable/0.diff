diff --git a/tmp/a338cd90-4959-45bc-b676-baf0bfb4fd4a_buggy.java b/tmp/bcb3f99f-34b3-4327-a817-e065639d4f85_fixed.java
index 99d6a44..fb4571a 100644
--- a/tmp/a338cd90-4959-45bc-b676-baf0bfb4fd4a_buggy.java
+++ b/tmp/bcb3f99f-34b3-4327-a817-e065639d4f85_fixed.java
@@ -1,58 +1,93 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
-            DurationField months = DurationFieldType.months().getField(iChrono);
-            DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
-                return computeMillis(resetFields, text);
-            }
+    
+    // Handle week-based parsing specially to avoid incorrect results
+    if (count > 0 && savedFields[0].iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+        return computeMillisWithWeekAdjust(resetFields, text, savedFields, count);
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
     
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
     
     return millis;
 }
+
+private long computeMillisWithWeekAdjust(boolean resetFields, String text, SavedField[] savedFields, int count) {
+    // Extract relevant fields
+    int weekYear = iDefaultYear;
+    int week = 0;
+    int month = 0;
+    for (int i = 0; i < count; i++) {
+        DateTimeField field = savedFields[i].iField;
+        if (field.getType() == DateTimeFieldType.weekyear()) {
+            weekYear = savedFields[i].get(iMillis, resetFields);
+        } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {
+            week = savedFields[i].get(iMillis, resetFields);
+        } else if (field.getType() == DateTimeFieldType.monthOfYear()) {
+            month = savedFields[i].get(iMillis, resetFields);
+        }
+    }
+
+    // Adjust for the first week of the year possibly starting in the previous year
+    LocalDate firstWeek = new LocalDate(weekYear, 1, 1, iChrono);
+    int firstWeekWeekYear = firstWeek.weekyear().get();
+    int firstWeekOfWeekYear = firstWeek.weekOfWeekyear().get();
+
+    if (week == 1 && firstWeekOfWeekYear > 1) {
+        weekYear = firstWeekWeekYear - 1;
+        int weeksInPreviousYear = iChrono.year().getMaximumValue(weekYear) - firstWeekOfWeekYear + 1;
+        if (week > weeksInPreviousYear) {
+            week -= weeksInPreviousYear;
+        }
+    }
+
+    // Compute the date based on week and weekYear
+    LocalDate date = new LocalDate(weekYear, 1, 1, iChrono).withWeekOfWeekyear(week);
+
+    // Adjust for month if necessary
+    if (month != 0) {
+        date = date.withMonthOfYear(month);
+    }
+
+    return date.toDateTimeAtStartOfDay(iZone).getMillis();
+}
\ No newline at end of file
