diff --git a/tmp/deb89a06-c222-49c0-9854-aa03a78e9131_buggy.java b/tmp/f9d72eaa-d800-486d-bb11-80953214bd77_fixed.java
index 99d6a44..76fecef 100644
--- a/tmp/deb89a06-c222-49c0-9854-aa03a78e9131_buggy.java
+++ b/tmp/f9d72eaa-d800-486d-bb11-80953214bd77_fixed.java
@@ -1,58 +1,105 @@
 /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
+            // Check if the first saved field is a week-based field
+            if (savedFields[0].iField.getType() == DateTimeFieldType.weekOfWeekyear() ||
+                savedFields[0].iField.getType() == DateTimeFieldType.weekyear()) {
+                // If week-based, ensure year is set correctly
+                saveField(DateTimeFieldType.year(), iDefaultYear);
+                return computeMillisWithWeekAdjustment(resetFields, text, savedFields, count);
+            } else {
                 // alter base year for parsing if first field is month or day
                 DurationField months = DurationFieldType.months().getField(iChrono);
                 DurationField days = DurationFieldType.days().getField(iChrono);
                 DurationField first = savedFields[0].iField.getDurationField();
                 if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                     saveField(DateTimeFieldType.year(), iDefaultYear);
                     return computeMillis(resetFields, text);
                 }
             }
+        }
+
+        long millis = iMillis;
+        try {
+            for (int i = 0; i < count; i++) {
+                millis = savedFields[i].set(millis, resetFields);
+            }
+        } catch (IllegalFieldValueException e) {
+            if (text != null) {
+                e.prependMessage("Cannot parse \"" + text + '"');
+            }
+            throw e;
+        }
+        
+        if (iZone == null) {
+            millis -= iOffset;
+        } else {
+            int offset = iZone.getOffsetFromLocal(millis);
+            millis -= offset;
+            if (offset != iZone.getOffset(millis)) {
+                String message =
+                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+                if (text != null) {
+                    message = "Cannot parse \"" + text + "\": " + message;
+                }
+                throw new IllegalArgumentException(message);
+            }
+        }
         
+        return millis;
+    }
+
+    private long computeMillisWithWeekAdjustment(boolean resetFields, String text, SavedField[] savedFields, int count) {
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
+                if (savedFields[i].iField.getType() == DateTimeFieldType.weekyear()) {
+                    // Set the weekyear first to establish the correct year context
                     millis = savedFields[i].set(millis, resetFields);
                 }
+            }
+            for (int i = 0; i < count; i++) {
+                if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear()) {
+                    millis = savedFields[i].set(millis, resetFields);
+                }
+            }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
\ No newline at end of file
