diff --git a/tmp/4d555573-860c-4172-b43e-99eda6468c1a_buggy.java b/tmp/2ffeb8ac-1216-4713-8c0b-890a60ca05a1_fixed.java
index b98f0a7..a12cf0b 100644
--- a/tmp/4d555573-860c-4172-b43e-99eda6468c1a_buggy.java
+++ b/tmp/2ffeb8ac-1216-4713-8c0b-890a60ca05a1_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    
+    // Traverse the arguments and infer types backwards
+    Node arg = constructor.getNext();
+    while (arg != null) {
         scope = traverse(arg, scope);
+        if (type != null && type.isObjectType() && arg.getJSType() != null) {
+            ObjectType objType = (ObjectType) type;
+            JSType argType = arg.getJSType();
+            if (arg.isName() && argType != null) {
+                String propName = arg.getString();
+                objType.defineInferredProperty(propName, argType, n);
+                scope.inferSlotType(arg, argType);
             }
+        }
+        arg = arg.getNext();
+    }
+    
     return scope;
 }
\ No newline at end of file
