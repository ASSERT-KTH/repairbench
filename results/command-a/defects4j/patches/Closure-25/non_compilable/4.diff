diff --git a/tmp/2979c366-a1d5-4d55-a97f-bff9ee7f21a4_buggy.java b/tmp/f19b837c-d784-4012-bfdb-52faebe227b7_fixed.java
index b98f0a7..ecbbd36 100644
--- a/tmp/2979c366-a1d5-4d55-a97f-bff9ee7f21a4_buggy.java
+++ b/tmp/f19b837c-d784-4012-bfdb-52faebe227b7_fixed.java
@@ -1,29 +1,39 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Perform backwards inference for constructor parameters
+          for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+            JSType argType = arg.getJSType();
+            if (argType != null && ct.getParameters().size() > 0) {
+              JSType paramType = ct.getParameters().get(0).getJSType();
+              if (paramType != null) {
+                scope = scope.inferSlotType(arg, paramType);
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
