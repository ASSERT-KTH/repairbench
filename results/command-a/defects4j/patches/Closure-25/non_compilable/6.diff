diff --git a/tmp/5cf8a9c3-c6a0-4404-96fe-d895aba6061e_buggy.java b/tmp/154b7e6e-3dcd-40f3-bfd3-7dc807cdc3df_fixed.java
index b98f0a7..59220ab 100644
--- a/tmp/5cf8a9c3-c6a0-4404-96fe-d895aba6061e_buggy.java
+++ b/tmp/154b7e6e-3dcd-40f3-bfd3-7dc807cdc3df_fixed.java
@@ -1,29 +1,45 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Infer type for arguments
+                Node arg = constructor.getNext();
+                if (arg != null) {
+                    JSType[] argTypes = ct.getParameterTypes();
+                    for (int i = 0; i < argTypes.length && arg != null; i++, arg = arg.getNext()) {
+                        JSType argType = argTypes[i];
+                        if (argType != null) {
+                            scope = inferTypesForNode(arg, argType, scope);
                         }
-      }
-    }
-    n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
                         scope = traverse(arg, scope);
                     }
+                }
+            }
+        }
+    }
+    n.setJSType(type);
+    return scope;
+}
+
+private FlowScope inferTypesForNode(Node node, JSType type, FlowScope scope) {
+    if (node.isAssign() && node.getFirstChild().isName()) {
+        String varName = node.getFirstChild().getString();
+        scope.inferSlotType(varName, type);
+    }
     return scope;
 }
\ No newline at end of file
