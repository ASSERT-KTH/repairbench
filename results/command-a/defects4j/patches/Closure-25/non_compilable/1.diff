diff --git a/tmp/38578ffd-dfee-4991-898d-bffaa4b8bd5c_buggy.java b/tmp/867a0b2e-c973-429a-848b-597360cdb41f_fixed.java
index b98f0a7..eaae1bc 100644
--- a/tmp/38578ffd-dfee-4991-898d-bffaa4b8bd5c_buggy.java
+++ b/tmp/867a0b2e-c973-429a-848b-597360cdb41f_fixed.java
@@ -1,29 +1,43 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
+    // Infer type for the arguments of the constructor call
+    if (type != null && type.isObjectType()) {
+      ObjectType objectType = (ObjectType) type;
+      Node arg = constructor.getNext();
+      for (String paramName : objectType.getPropertyNames()) {
+        if (arg != null) {
+          JSType paramType = objectType.getPropertyType(paramName);
+          if (paramType != null) {
+            arg.setJSType(paramType);
+          }
+          arg = arg.getNext();
+        }
+      }
+    }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
