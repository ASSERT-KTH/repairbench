diff --git a/tmp/71cea509-b5e5-4784-80cd-cf45ffa00cc6_buggy.java b/tmp/dfb518a6-c365-4983-b1c4-bed676dc093c_fixed.java
index b98f0a7..ed9d6e5 100644
--- a/tmp/71cea509-b5e5-4784-80cd-cf45ffa00cc6_buggy.java
+++ b/tmp/dfb518a6-c365-4983-b1c4-bed676dc093c_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backwards inference on the constructor arguments
+                if (constructor.hasChildren()) {
+                    Node arg = constructor.getNext();
+                    if (arg != null && ct.getParameters().length > 0) {
+                        for (int i = 0; i < ct.getParameters().length && arg != null; i++) {
+                            JSType argType = ct.getParameters()[i].getJSType();
+                            if (argType != null) {
+                                arg.setJSType(argType);
+                                scope = inferTypesForNode(arg, scope);
+                            }
+                            arg = arg.getNext();
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
