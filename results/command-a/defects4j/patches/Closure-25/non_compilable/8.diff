diff --git a/tmp/30251c8a-28ef-4498-aa97-b5343de56491_buggy.java b/tmp/6b6113dd-df8a-42ca-a1de-f02a944b4b4a_fixed.java
index b98f0a7..2519c7e 100644
--- a/tmp/30251c8a-28ef-4498-aa97-b5343de56491_buggy.java
+++ b/tmp/6b6113dd-df8a-42ca-a1de-f02a944b4b4a_fixed.java
@@ -1,29 +1,57 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+    
+    // Perform backwards inference for the arguments of the constructor
+    Node arg = constructor.getNext();
+    if (arg != null) {
+        JSType inferredType = type;
+        while (arg != null) {
+            if (inferredType != null && inferredType.isSubtype(getNativeType(OBJECT_TYPE))) {
+                ObjectType objType = (ObjectType) inferredType;
+                String propName = arg.getString();
+                JSType propType = objType.getPropertyType(propName);
+                if (propType != null) {
+                    scope = inferPropertyTypes(arg, propType, scope);
+                }
+            }
+            arg = arg.getNext();
+        }
+    }
+    
+    return scope;
+}
+
+private FlowScope inferPropertyTypes(Node arg, JSType propType, FlowScope scope) {
+    // Infer the type of the argument based on the property type
+    JSType argType = arg.getJSType();
+    if (argType == null || argType.isUnknownType()) {
+        arg.setJSType(propType);
+        scope = scope.inferSlotType(arg, propType);
+    } else if (!argType.isSubtype(propType)) {
+        // If the argument type is not a subtype of the property type, refine the argument type
+        arg.setJSType(propType.getLeastSupertype(argType));
+        scope = scope.inferSlotType(arg, propType.getLeastSupertype(argType));
     }
     return scope;
 }
\ No newline at end of file
