diff --git a/tmp/aea75c2f-7920-495a-afc7-12648093b464_buggy.java b/tmp/1df12702-090c-4213-bc86-9557210f1f71_fixed.java
index b98f0a7..16e669b 100644
--- a/tmp/aea75c2f-7920-495a-afc7-12648093b464_buggy.java
+++ b/tmp/1df12702-090c-4213-bc86-9557210f1f71_fixed.java
@@ -1,29 +1,46 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+    
+    // Infer types for arguments
+    Node arg = constructor.getNext();
+    if (arg != null) {
+        JSType inferredArgType = null;
+        if (constructorType instanceof FunctionType) {
+            FunctionType ctorFunction = (FunctionType) constructorType;
+            Node parameters = ctorFunction.getParametersNode();
+            if (parameters != null) {
+                for (Node param = parameters.getFirstChild(); param != null && arg != null; param = param.getNext(), arg = arg.getNext()) {
+                    JSType paramType = param.getJSType();
+                    if (paramType != null) {
+                        inferredArgType = paramType.getGreatestSubtype(scope.getTypeOf(arg));
+                        scope = scope.inferSlotType(arg, inferredArgType);
+                    }
+                }
+            }
+        }
+        // Continue traversing remaining arguments if any
+        for (; arg != null; arg = arg.getNext()) {
             scope = traverse(arg, scope);
         }
+    }
+
     return scope;
 }
\ No newline at end of file
