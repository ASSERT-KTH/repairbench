diff --git a/tmp/24b5e3de-9165-4b7f-92fc-ec31c041c04d_buggy.java b/tmp/c3b58dd6-69b6-4f2f-b22d-f11b8306eea2_fixed.java
index b98f0a7..c3103ef 100644
--- a/tmp/24b5e3de-9165-4b7f-92fc-ec31c041c04d_buggy.java
+++ b/tmp/c3b58dd6-69b6-4f2f-b22d-f11b8306eea2_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Perform backwards inference on the constructor's parameters
+                Node arg = constructor.getNext();
+                if (arg != null) {
+                    JSType inferredType = ct.getParameters()[0].getJSType();
+                    if (inferredType != null) {
+                        arg.setJSType(inferredType);
+                        scope = traverse(arg, scope);
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+        if (arg.getJSType() == null) {
             scope = traverse(arg, scope);
         }
+    }
     return scope;
 }
\ No newline at end of file
