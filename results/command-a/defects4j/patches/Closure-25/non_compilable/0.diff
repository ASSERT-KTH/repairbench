diff --git a/tmp/fb555450-87c8-47f7-9d72-5fd448480c1f_buggy.java b/tmp/2d828c6a-a488-4c23-a04c-84528b54c26c_fixed.java
index b98f0a7..399f6d2 100644
--- a/tmp/fb555450-87c8-47f7-9d72-5fd448480c1f_buggy.java
+++ b/tmp/2d828c6a-a488-4c23-a04c-84528b54c26c_fixed.java
@@ -1,29 +1,37 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
             }
         }
     }
     n.setJSType(type);
+    
+    // The fix is here: traverse the arguments and update their types in the scope
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
+        if (type != null && type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {
+            JSType argType = arg.getJSType();
+            if (argType != null) {
+                scope = scope.inferSlotType(arg, argType);
             }
+        }
+    }
+    
     return scope;
 }
\ No newline at end of file
