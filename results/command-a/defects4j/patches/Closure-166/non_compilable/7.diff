diff --git a/tmp/f681568e-df1c-4b33-a3bb-8a5f28b3c58a_buggy.java b/tmp/b6a90728-e4df-4c31-820b-5a09807b085c_fixed.java
index 5f96616..8d77a43 100644
--- a/tmp/f681568e-df1c-4b33-a3bb-8a5f28b3c58a_buggy.java
+++ b/tmp/b6a90728-e4df-4c31-820b-5a09807b085c_fixed.java
@@ -1,20 +1,38 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        matchRecordTypeConstraint(constraint.toMaybeObjectType());
+        return;
+    }
+
+    // Handle the case where the constraint is a union type.
+    if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toMaybeObjectType());
+            }
+        }
+        return;
+    }
+
+    // If the constraint is not a record or union type, do nothing.
+}
+
+private void matchRecordTypeConstraint(ObjectType constraint) {
+    if (constraint == null) {
+        return;
+    }
+
+    for (String propName : constraint.getOwnPropertyNames()) {
+        JSType propType = constraint.getPropertyType(propName);
+        if (propType != null) {
+            defineInferredProperty(propName, propType, null, null);
+        }
     }
 }
\ No newline at end of file
