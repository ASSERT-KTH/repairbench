diff --git a/tmp/fcd1ffc7-2619-48cf-9fd6-a50b794a353a_buggy.java b/tmp/e2449ef7-9f75-46c8-b0bb-a5fc88b17279_fixed.java
index 5f96616..879878a 100644
--- a/tmp/fcd1ffc7-2619-48cf-9fd6-a50b794a353a_buggy.java
+++ b/tmp/e2449ef7-9f75-46c8-b0bb-a5fc88b17279_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    // Handle the case where the constraint object is a record type or a union of record types.
+    if (constraint.isRecordType() || (constraint.isUnionType() && constraint.toMaybeUnionType().getAlternates().stream().allMatch(JSType::isRecordType))) {
       if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+      } else {
+        constraint.toMaybeUnionType().getAlternates().forEach(alternate -> matchRecordTypeConstraint(alternate.toObjectType()));
       }
+    } else if (constraint.isUnionType()) {
+      // If the constraint is a union type but not all alternates are record types, we need to handle each alternate separately.
+      constraint.toMaybeUnionType().getAlternates().forEach(this::matchConstraint);
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType recordType) {
+    // Iterate over the properties of the record type and try to match them with this object's properties.
+    recordType.getOwnPropertyNames().forEach(propertyName -> {
+        JSType propertyType = recordType.getPropertyType(propertyName);
+        if (propertyType != null && !hasProperty(propertyName)) {
+            defineProperty(propertyName, propertyType, null);
+        }
+    });
 }
\ No newline at end of file
