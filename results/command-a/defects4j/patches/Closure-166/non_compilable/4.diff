diff --git a/tmp/acd9a7af-c64f-4c52-8617-32dbe9337783_buggy.java b/tmp/74faf749-49e8-475f-8614-ccd531dac3d0_fixed.java
index 5f96616..8227c2d 100644
--- a/tmp/acd9a7af-c64f-4c52-8617-32dbe9337783_buggy.java
+++ b/tmp/74faf749-49e8-475f-8614-ccd531dac3d0_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
         if (constraint.isRecordType()) {
             matchRecordTypeConstraint(constraint.toObjectType());
+        } else if (constraint.isUnionType()) {
+            for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+                if (alternate.isRecordType()) {
+                    matchRecordTypeConstraint(alternate.toObjectType());
+                }
+            }
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType constraint) {
+    for (String propName : constraint.getOwnPropertyNames()) {
+        JSType propType = constraint.getPropertyType(propName);
+        if (propType != null) {
+            defineInferredProperty(propName, propType, null, null);
+        }
     }
 }
\ No newline at end of file
