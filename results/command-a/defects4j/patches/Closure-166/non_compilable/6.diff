diff --git a/tmp/354f3b8f-b24f-4252-a165-c1f9169849cd_buggy.java b/tmp/936ab2ac-dffc-4797-89cd-b3b3b4e2299c_fixed.java
index 5f96616..96e5b22 100644
--- a/tmp/354f3b8f-b24f-4252-a165-c1f9169849cd_buggy.java
+++ b/tmp/936ab2ac-dffc-4797-89cd-b3b3b4e2299c_fixed.java
@@ -1,20 +1,31 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+        if (constraint.isUnionType()) {
+            for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+                if (alternate.isRecordType()) {
+                    matchRecordTypeConstraint(alternate.toMaybeObjectType());
+                }
+            }
+        } else {
+            matchRecordTypeConstraint(constraint.toMaybeObjectType());
+        }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType constraint) {
+    if (constraint != null) {
+        for (String prop : constraint.getOwnPropertyNames()) {
+            JSType propType = constraint.getPropertyType(prop);
+            if (propType != null) {
+                defineInferredProperty(prop, propType, null, null);
+            }
+        }
     }
 }
\ No newline at end of file
