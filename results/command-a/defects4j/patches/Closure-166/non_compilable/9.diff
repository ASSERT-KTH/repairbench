diff --git a/tmp/b3e9b3d2-1021-48b9-ada5-5fc3f095e09c_buggy.java b/tmp/964bb4f5-a55c-44c4-b99f-fa97e1125fa1_fixed.java
index 5f96616..4aa6a8b 100644
--- a/tmp/b3e9b3d2-1021-48b9-ada5-5fc3f095e09c_buggy.java
+++ b/tmp/964bb4f5-a55c-44c4-b99f-fa97e1125fa1_fixed.java
@@ -1,20 +1,29 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraint.isRecordType()) {
+    if (constraint.isRecordType() || constraint.isUnionType()) {
+        if (constraint.isUnionType()) {
+            for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+                if (alternate.isRecordType()) {
+                    matchRecordTypeConstraint(alternate.toObjectType());
+                }
+            }
+        } else {
             matchRecordTypeConstraint(constraint.toObjectType());
         }
     }
+}
+
+private void matchRecordTypeConstraint(ObjectType constraint) {
+    for (String propName : constraint.getPropertyNames()) {
+        JSType propType = constraint.getPropertyType(propName);
+        if (propType != null && !hasProperty(propName)) {
+            defineProperty(propName, propType, null);
+        }
+    }
+}
\ No newline at end of file
