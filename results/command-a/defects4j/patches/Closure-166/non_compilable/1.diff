diff --git a/tmp/1ca38389-4bcf-442f-b683-1400ec42860d_buggy.java b/tmp/8b362a8d-5ccb-42a9-8d24-778bd66c6c7d_fixed.java
index 5f96616..52da5e2 100644
--- a/tmp/1ca38389-4bcf-442f-b683-1400ec42860d_buggy.java
+++ b/tmp/8b362a8d-5ccb-42a9-8d24-778bd66c6c7d_fixed.java
@@ -1,20 +1,31 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
       if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
+      } else if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+          if (alternate.isRecordType()) {
+            matchRecordTypeConstraint(alternate.toObjectType());
+          }
+        }
+      }
+    }
+}
+
+private void matchRecordTypeConstraint(ObjectType constraint) {
+    for (String prop : constraint.getOwnPropertyNames()) {
+      JSType propType = constraint.getPropertyType(prop);
+      if (!hasProperty(prop)) {
+        defineInferredProperty(prop, propType, null);
+      } else {
+        getOwnPropertyType(prop).matchConstraint(propType);
+      }
     }
 }
\ No newline at end of file
