diff --git a/tmp/803100ee-2118-403c-9f6d-9c5474000f21_buggy.java b/tmp/a6d13d75-cb14-4825-ac58-35c3915cdfb2_fixed.java
index 5f96616..09d9b44 100644
--- a/tmp/803100ee-2118-403c-9f6d-9c5474000f21_buggy.java
+++ b/tmp/a6d13d75-cb14-4825-ac58-35c3915cdfb2_fixed.java
@@ -1,20 +1,32 @@
 @Override
 public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
         return;
     }
 
+    // Handle the case where the constraint object is a union type.
+    if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+            if (alternate.isRecordType()) {
+                matchRecordTypeConstraint(alternate.toObjectType());
+            }
+        }
+        return;
+    }
+
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraint {{prop: (number|undefined)}}
-    // function f(constraint) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraint.isRecordType()) {
         matchRecordTypeConstraint(constraint.toObjectType());
     }
 }
+
+private void matchRecordTypeConstraint(ObjectType constraintType) {
+    for (String propName : constraintType.getOwnPropertyNames()) {
+        JSType propType = constraintType.getPropertyType(propName);
+        if (propType != null && propType.isUnionType() && 
+            propType.toMaybeUnionType().getAlternates().contains(getNativeType(JSTypeNative.VOID_TYPE))) {
+            defineProperty(propName, propType, null);
+        }
+    }
+}
\ No newline at end of file
