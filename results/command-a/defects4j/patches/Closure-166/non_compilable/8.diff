diff --git a/tmp/f1c28438-8a90-414d-ad90-5dfb26fbaf46_buggy.java b/tmp/f9edb996-d194-4a78-8fa7-6e729cee2f7a_fixed.java
index 5f96616..ce8ea9c 100644
--- a/tmp/f1c28438-8a90-414d-ad90-5dfb26fbaf46_buggy.java
+++ b/tmp/f9edb996-d194-4a78-8fa7-6e729cee2f7a_fixed.java
@@ -1,20 +1,39 @@
   @Override
   public void matchConstraint(JSType constraint) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
     }
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraint {{prop: (number|undefined)}}
     // function f(constraint) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
+    // taking each property on the record and trying to match
     // properties on this object.
+    if (constraint.isRecordType() || constraint.isUnionType()) {
       if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
+        matchRecordTypeConstraint(constraint.toMaybeObjectType());
+      } else if (constraint.isUnionType()) {
+        for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+          if (alternate.isRecordType()) {
+            matchRecordTypeConstraint(alternate.toMaybeObjectType());
+          }
+        }
+      }
+    }
+  }
+
+  private void matchRecordTypeConstraint(ObjectType constraint) {
+    if (constraint == null) {
+      return;
+    }
+
+    for (String property : constraint.getOwnPropertyNames()) {
+      JSType propertyType = constraint.getPropertyType(property);
+      defineInferredProperty(property, propertyType, null);
     }
   }
\ No newline at end of file
