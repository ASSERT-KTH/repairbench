diff --git a/tmp/87df2d75-c217-4c4f-91ca-fc71384482ae_buggy.java b/tmp/3b7b2509-796e-48dd-87c1-d9ea318f8cde_fixed.java
index 7b89a27..a541f59 100644
--- a/tmp/87df2d75-c217-4c4f-91ca-fc71384482ae_buggy.java
+++ b/tmp/3b7b2509-796e-48dd-87c1-d9ea318f8cde_fixed.java
@@ -1,76 +1,61 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
         String qName, Node n, JSDocInfo info,
         Node rhsValue, JSType valueType) {
       if (valueType == null) {
         return true;
       }
 
       // Prototypes of constructors and interfaces are always declared.
       if (qName != null && qName.endsWith(".prototype")) {
           return false;
       }
 
       boolean inferred = true;
       if (info != null) {
         inferred = !(info.hasType()
             || info.hasEnumParameterType()
             || (isConstantSymbol(info, n) && valueType != null
                 && !valueType.isUnknownType())
             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
       }
 
       if (inferred && rhsValue != null && rhsValue.isFunction()) {
         if (info != null) {
           return false;
         } else if (!scope.isDeclared(qName, false) &&
-            n.isUnscopedQualifiedName()) {
+            n.isUnscopedQualifiedName() &&
+            !isPrototypeAssignment(n)) {
 
           // Check if this is in a conditional block.
           // Functions assigned in conditional blocks are inferred.
           for (Node current = n.getParent();
                !(current.isScript() || current.isFunction());
                current = current.getParent()) {
             if (NodeUtil.isControlStructure(current)) {
               return true;
             }
           }
 
           // Check if this is assigned in an inner scope.
           // Functions assigned in inner scopes are inferred.
           AstFunctionContents contents =
               getFunctionAnalysisResults(scope.getRootNode());
           if (contents == null ||
               !contents.getEscapedQualifiedNames().contains(qName)) {
             return false;
           }
         }
       }
       return inferred;
     }
+
+    private boolean isPrototypeAssignment(Node n) {
+        Node parent = n.getParent();
+        if (parent.isAssign()) {
+            Node lhs = parent.getFirstChild();
+            if (lhs.isGetProp() && lhs.getLastChild().getString().equals("prototype")) {
+                return true;
+            }
+        }
+        return false;
+    }
\ No newline at end of file
