diff --git a/tmp/38a5aa06-419a-4880-899f-e46ebae30d13_buggy.java b/tmp/44e1041c-9720-47c4-af97-6eaea1f24878_fixed.java
index 98f719c..995f7d0 100644
--- a/tmp/38a5aa06-419a-4880-899f-e46ebae30d13_buggy.java
+++ b/tmp/44e1041c-9720-47c4-af97-6eaea1f24878_fixed.java
@@ -1,72 +1,74 @@
   /** Helper to escape javascript string as well as regular expression */
   static String strEscape(String s, char quote,
                           String doublequoteEscape,
                           String singlequoteEscape,
                           String backslashEscape,
                           CharsetEncoder outputCharsetEncoder) {
     StringBuilder sb = new StringBuilder(s.length() + 2);
     sb.append(quote);
     for (int i = 0; i < s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
         case '\0': sb.append("\\0"); break;
         case '\n': sb.append("\\n"); break;
         case '\r': sb.append("\\r"); break;
         case '\t': sb.append("\\t"); break;
         case '\\': sb.append(backslashEscape); break;
         case '\"': sb.append(doublequoteEscape); break;
         case '\'': sb.append(singlequoteEscape); break;
         case '>':                       // Break --> into --\> or ]]> into ]]\>
           if (i >= 2 &&
               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
             sb.append("\\>");
           } else {
             sb.append(c);
           }
           break;
         case '<':
           // Break </script into <\/script
           final String END_SCRIPT = "/script";
 
           // Break <!-- into <\!--
           final String START_COMMENT = "!--";
 
           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
                               END_SCRIPT.length())) {
             sb.append("<\\");
           } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,
                                      START_COMMENT.length())) {
             sb.append("<\\");
           } else {
             sb.append(c);
           }
           break;
         default:
           // If we're given an outputCharsetEncoder, then check if the
           //  character can be represented in this character set.
           if (outputCharsetEncoder != null) {
             if (outputCharsetEncoder.canEncode(c)) {
+              if (c <= 0x1f || c > 0x7f) {
+                // Unicode-escape non-printable ASCII and non-ASCII characters
+                appendHexJavaScriptRepresentation(sb, c);
+              } else {
                 sb.append(c);
+              }
             } else {
-              // Unicode-escape the character.
+              // Unicode-escape the character if it cannot be encoded
               appendHexJavaScriptRepresentation(sb, c);
             }
           } else {
             // No charsetEncoder provided - pass straight latin characters
-            // through, and escape the rest.  Doing the explicit character
-            // check is measurably faster than using the CharsetEncoder.
+            // through, and escape the rest.
             if (c > 0x1f && c <= 0x7f) {
               sb.append(c);
             } else {
-              // Other characters can be misinterpreted by some js parsers,
-              // or perhaps mangled by proxies along the way,
-              // so we play it safe and unicode escape them.
+              // Unicode-escape non-ASCII and non-printable ASCII characters
               appendHexJavaScriptRepresentation(sb, c);
             }
           }
       }
     }
     sb.append(quote);
     return sb.toString();
   }
\ No newline at end of file
