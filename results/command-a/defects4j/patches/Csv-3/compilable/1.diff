diff --git a/tmp/4bdb1bf5-c090-4d5e-95fc-87e64004b69e_buggy.java b/tmp/f31fa345-0f5f-4b25-885c-c0b544896378_fixed.java
index 1ad070d..c8bec91 100644
--- a/tmp/4bdb1bf5-c090-4d5e-95fc-87e64004b69e_buggy.java
+++ b/tmp/f31fa345-0f5f-4b25-885c-c0b544896378_fixed.java
@@ -1,38 +1,32 @@
     /**
      * Handle an escape sequence.
      * The current character must be the escape character.
      * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
      * on the input stream.
      * 
-     * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
+     * @return the unescaped character (as an int) or the original escape sequence if not a recognized escape sequence.
      * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+     * the escape character is not allowed at end of stream
      */
     int readEscape() throws IOException {
         // the escape char has just been read (normally a backslash)
         final int c = in.read();
         switch (c) {
             case 'r':
                 return CR;
             case 'n':
                 return LF;
             case 't':
                 return TAB;
             case 'b':
                 return BACKSPACE;
             case 'f':
                 return FF;
-        case CR:
-        case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
-            return c;
-        case END_OF_STREAM:
-            throw new IOException("EOF whilst processing escape sequence");
+            case 'N': // MySQL null value escape sequence
+                return '\\'; // return the escape character and let the caller handle the 'N'
             default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+                // If not a recognized escape sequence, return the original escape character followed by the current character
+                in.getLastChar(); // peek at the last character
+                return '\\'; // return the escape character
         }
     }
\ No newline at end of file
