diff --git a/tmp/9e979958-d838-4204-8f74-994806b854f6_buggy.java b/tmp/ebbe8490-6751-46ce-890e-5a7e92ef1c4c_fixed.java
index a3709ee..64328a2 100644
--- a/tmp/9e979958-d838-4204-8f74-994806b854f6_buggy.java
+++ b/tmp/ebbe8490-6751-46ce-890e-5a7e92ef1c4c_fixed.java
@@ -1,71 +1,85 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
                 || (locals.apply(value)
                     && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
                 return evaluatesToLocalValue(value.getFirstChild(), locals);
             } else {
                 return true;
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
             return locals.apply(value);
         case Token.CALL:
+            // For method calls, check if the call is to a known local object
+            boolean isMethodCall = value.getFirstChild().getType() == Token.GETPROP
+                || value.getFirstChild().getType() == Token.GETELEM;
+            if (isMethodCall) {
+                Node obj = value.getFirstChild().getFirstChild();
+                if (evaluatesToLocalValue(obj, locals)) {
+                    return true;
+                }
+            }
             return callHasLocalResult(value)
                 || isToStringMethodCall(value)
                 || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
+            // If the constructor call is to a known local constructor,
+            // and the constructor does not have side effects,
+            // then the result is local.
+            if (locals.apply(value.getFirstChild())) {
                 return true;
+            }
+            // Otherwise, we cannot be sure the value was never aliased from inside
+            // the constructor.
+            return false;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
             // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
             // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
             return true;
         default:
             // Other op force a local value:
             //  x = '' + g (x is now an local string)
             //  x -= g (x is now an local number)
             if (isAssignmentOp(value)
                 || isSimpleOperator(value)
                 || isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
                 "Unexpected expression node" + value +
                 "\n parent:" + value.getParent());
     }
 }
\ No newline at end of file
