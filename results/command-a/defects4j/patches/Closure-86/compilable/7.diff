diff --git a/tmp/93a6a924-2b95-4c4b-8f74-c6b40df994ad_buggy.java b/tmp/e74bdc23-3f9e-4a1e-a4a9-93080136cdf9_fixed.java
index a3709ee..47d92fd 100644
--- a/tmp/93a6a924-2b95-4c4b-8f74-c6b40df994ad_buggy.java
+++ b/tmp/e74bdc23-3f9e-4a1e-a4a9-93080136cdf9_fixed.java
@@ -1,71 +1,74 @@
 /**
  * @param locals A predicate to apply to unknown local values.
  * @return Whether the node is known to be a value that is not a reference
  *     outside the expression scope.
  */
 static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
     switch (value.getType()) {
         case Token.ASSIGN:
             // A result that is aliased by a non-local name, is the effectively the
             // same as returning a non-local name, but this doesn't matter if the
             // value is immutable.
             return NodeUtil.isImmutableValue(value.getLastChild())
-            || (locals.apply(value)
+                    || (locals.apply(value.getFirstChild())
                         && evaluatesToLocalValue(value.getLastChild(), locals));
         case Token.COMMA:
+            // Only the rightmost expression in a comma-separated list matters
             return evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.AND:
         case Token.OR:
+            // Both operands of AND and OR matter, as they can be evaluated conditionally
             return evaluatesToLocalValue(value.getFirstChild(), locals)
                     && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.HOOK:
+            // Only the result of the conditional (second and third operands) matters
             return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
                     && evaluatesToLocalValue(value.getLastChild(), locals);
         case Token.INC:
         case Token.DEC:
             if (value.getBooleanProp(Node.INCRDECR_PROP)) {
-          return evaluatesToLocalValue(value.getFirstChild(), locals);
+                // Pre-increment/decrement results in a primitive number
+                return true;
             } else {
-          return true;
+                // Post-increment/decrement depends on the previous value
+                return evaluatesToLocalValue(value.getFirstChild(), locals);
             }
         case Token.THIS:
             return locals.apply(value);
         case Token.NAME:
             return isImmutableValue(value) || locals.apply(value);
         case Token.GETELEM:
         case Token.GETPROP:
             // There is no information about the locality of object properties.
             return locals.apply(value);
         case Token.CALL:
             return callHasLocalResult(value)
                     || isToStringMethodCall(value)
                     || locals.apply(value);
         case Token.NEW:
-        // TODO(nicksantos): This needs to be changed so that it
-        // returns true iff we're sure the value was never aliased from inside
-        // the constructor (similar to callHasLocalResult)
+            // Assume new objects are local unless we know they alias themselves
             return true;
         case Token.FUNCTION:
         case Token.REGEXP:
         case Token.ARRAYLIT:
         case Token.OBJECTLIT:
             // Literals objects with non-literal children are allowed.
             return true;
         case Token.IN:
-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
+            // IN operator always results in a local boolean value
             return true;
         default:
-        // Other op force a local value:
-        //  x = '' + g (x is now an local string)
-        //  x -= g (x is now an local number)
+            // Other operators force a local value:
+            //  x = '' + g (x is now a local string)
+            //  x -= g (x is now a local number)
             if (isAssignmentOp(value)
                     || isSimpleOperator(value)
                     || isImmutableValue(value)) {
                 return true;
             }
 
             throw new IllegalStateException(
                     "Unexpected expression node" + value +
                     "\n parent:" + value.getParent());
     }
 }
\ No newline at end of file
