diff --git a/tmp/70780c6f-ebcb-4caf-a27d-7276edb76650_buggy.java b/tmp/374df97b-23c3-4d6b-b69a-7269cdde8c40_fixed.java
index 940af3f..8b8ffef 100644
--- a/tmp/70780c6f-ebcb-4caf-a27d-7276edb76650_buggy.java
+++ b/tmp/374df97b-23c3-4d6b-b69a-7269cdde8c40_fixed.java
@@ -1,82 +1,66 @@
-        /**
-         * Estimate a first guess of the amplitude and angular frequency.
-         * This method assumes that the {@link #sortObservations()} method
-         * has been called previously.
-         *
-         * @throws ZeroException if the abscissa range is zero.
-         * @throws MathIllegalStateException when the guessing procedure cannot
-         * produce sensible results.
-         */
 private void guessAOmega() {
-            // initialize the sums for the linear model between the two integrals
-            double sx2 = 0;
-            double sy2 = 0;
-            double sxy = 0;
-            double sxz = 0;
-            double syz = 0;
+    // Initialize sums and integrals
+    double sx2 = 0, sy2 = 0, sxy = 0, sxz = 0, syz = 0;
+    double f2Integral = 0, fPrime2Integral = 0;
+    double currentX = observations[0].getX(), currentY = observations[0].getY();
+    double startX = currentX;
 
-            double currentX = observations[0].getX();
-            double currentY = observations[0].getY();
-            double f2Integral = 0;
-            double fPrime2Integral = 0;
-            final double startX = currentX;
+    // Iterate through observations to compute integrals and sums
     for (int i = 1; i < observations.length; ++i) {
-                // one step forward
-                final double previousX = currentX;
-                final double previousY = currentY;
+        double previousX = currentX, previousY = currentY;
         currentX = observations[i].getX();
         currentY = observations[i].getY();
 
-                // update the integrals of f<sup>2</sup> and f'<sup>2</sup>
-                // considering a linear model for f (and therefore constant f')
-                final double dx = currentX - previousX;
-                final double dy = currentY - previousY;
-                final double f2StepIntegral =
-                    dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
-                final double fPrime2StepIntegral = dy * dy / dx;
+        double dx = currentX - previousX;
+        double dy = currentY - previousY;
 
-                final double x = currentX - startX;
+        // Update integrals using linear approximation
+        double f2StepIntegral = dx * (previousY * previousY + previousY * currentY + currentY * currentY) / 3;
+        double fPrime2StepIntegral = dy * dy / dx;
+
+        double x = currentX - startX;
         f2Integral += f2StepIntegral;
         fPrime2Integral += fPrime2StepIntegral;
 
         sx2 += x * x;
         sy2 += f2Integral * f2Integral;
         sxy += x * f2Integral;
         sxz += x * fPrime2Integral;
         syz += f2Integral * fPrime2Integral;
     }
 
-            // compute the amplitude and pulsation coefficients
+    // Compute coefficients for amplitude and angular frequency
     double c1 = sy2 * sxz - sxy * syz;
     double c2 = sxy * sxz - sx2 * syz;
     double c3 = sx2 * sy2 - sxy * sxy;
-            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {
-                final int last = observations.length - 1;
-                // Range of the observations, assuming that the
-                // observations are sorted.
-                final double xRange = observations[last].getX() - observations[0].getX();
+
+    // Check if coefficients indicate ill-conditioned case
+    if (c2 == 0 || c3 == 0 || c1 / c2 < 0 || c2 / c3 < 0) {
+        int last = observations.length - 1;
+        double xRange = observations[last].getX() - observations[0].getX();
+        
         if (xRange == 0) {
             throw new ZeroException();
         }
+        
+        // Fallback to range-based estimation
         omega = 2 * Math.PI / xRange;
+        double yMin = Double.POSITIVE_INFINITY, yMax = Double.NEGATIVE_INFINITY;
         
-                double yMin = Double.POSITIVE_INFINITY;
-                double yMax = Double.NEGATIVE_INFINITY;
-                for (int i = 1; i < observations.length; ++i) {
-                    final double y = observations[i].getY();
-                    if (y < yMin) {
-                        yMin = y;
-                    }
-                    if (y > yMax) {
-                        yMax = y;
-                    }
+        for (WeightedObservedPoint point : observations) {
+            double y = point.getY();
+            if (y < yMin) yMin = y;
+            if (y > yMax) yMax = y;
         }
+        
         a = 0.5 * (yMax - yMin);
     } else {
-                    // In some ill-conditioned cases (cf. MATH-844), the guesser
-                    // procedure cannot produce sensible results.
+        // Compute amplitude and angular frequency
+        a = FastMath.sqrt(FastMath.abs(c1 / c2));
+        omega = FastMath.sqrt(FastMath.abs(c2 / c3));
         
-                a = FastMath.sqrt(c1 / c2);
-                omega = FastMath.sqrt(c2 / c3);
+        // Ensure non-negative values
+        if (a < 0) a = -a;
+        if (omega < 0) omega = -omega;
     }
 }
\ No newline at end of file
