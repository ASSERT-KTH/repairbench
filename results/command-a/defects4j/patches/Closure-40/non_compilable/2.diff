diff --git a/tmp/3a746d63-2ef1-4a80-bf41-c821b6b85f59_buggy.java b/tmp/c950058d-a3e1-495e-86d8-99693deb9cc1_fixed.java
index 670114d..56876de 100644
--- a/tmp/3a746d63-2ef1-4a80-bf41-c821b6b85f59_buggy.java
+++ b/tmp/c950058d-a3e1-495e-86d8-99693deb9cc1_fixed.java
@@ -1,48 +1,64 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
 
       // Record global variable and function declarations
       if (t.inGlobalScope()) {
         if (NodeUtil.isVarDeclaration(n)) {
           NameInformation ns = createNameInformation(t, n, parent);
-          Preconditions.checkNotNull(ns);
+          if (ns != null) {
             recordSet(ns.name, n);
+          }
         } else if (NodeUtil.isFunctionDeclaration(n)) {
           Node nameNode = n.getFirstChild();
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null) {
             JsName nameInfo = getName(nameNode.getString(), true);
+            if (nameInfo != null) {
               recordSet(nameInfo.name, nameNode);
             }
+          }
         } else if (NodeUtil.isObjectLitKey(n, parent)) {
           NameInformation ns = createNameInformation(t, n, parent);
           if (ns != null) {
             recordSet(ns.name, n);
           }
         }
       }
 
       // Record assignments and call sites
       if (n.isAssign()) {
         Node nameNode = n.getFirstChild();
-
         NameInformation ns = createNameInformation(t, nameNode, n);
         if (ns != null) {
           if (ns.isPrototype) {
             recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
           } else {
             recordSet(ns.name, nameNode);
           }
         }
-      } else if (n.isCall()) {
+      } else if (n.isCall() && NodeUtil.isName(n.getFirstChild())) {
         Node nameNode = n.getFirstChild();
+        String callName = nameNode.getString();
+        if ("goog.inherits".equals(callName)) {
+          // Handle goog.inherits specifically
+          Node subclassNode = n.getSecondChild();
+          Node superclassNode = n.getLastChild();
+          if (subclassNode != null && superclassNode != null) {
+            NameInformation subclassNs = createNameInformation(t, subclassNode, n);
+            NameInformation superclassNs = createNameInformation(t, superclassNode, n);
+            if (subclassNs != null && superclassNs != null) {
+              recordInheritance(subclassNs.name, superclassNs.name);
+            }
+          }
+        } else {
           NameInformation ns = createNameInformation(t, nameNode, n);
           if (ns != null && ns.onlyAffectsClassDef) {
             JsName name = getName(ns.name, false);
             if (name != null) {
               refNodes.add(new ClassDefiningFunctionNode(
                   name, n, parent, parent.getParent()));
             }
           }
         }
       }
+    }
\ No newline at end of file
