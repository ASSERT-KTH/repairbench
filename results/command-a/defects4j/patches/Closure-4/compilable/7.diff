diff --git a/tmp/67aca035-1ca2-41a9-86e1-19e29f27680a_buggy.java b/tmp/e9aa899a-7f07-464d-ae78-c9f2660b1b0c_fixed.java
index d6a560a..476cfc2 100644
--- a/tmp/67aca035-1ca2-41a9-86e1-19e29f27680a_buggy.java
+++ b/tmp/e9aa899a-7f07-464d-ae78-c9f2660b1b0c_fixed.java
@@ -1,33 +1,36 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles before attempting resolution
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return registry.isLastGeneration() ? 
+            getReferencedType() : this;
+    }
+
+    // Attempt resolution via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ? 
             getReferencedType() : this;
     }
 
+    // If not resolved via registry, attempt via properties
     resolveViaProperties(t, enclosing);
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return registry.isLastGeneration() ? 
+            getReferencedType() : this;
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ? 
         getReferencedType() : this;
 }
\ No newline at end of file
