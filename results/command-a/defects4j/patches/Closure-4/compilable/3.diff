diff --git a/tmp/095da574-4c0d-4295-8f8a-404eaf40e8b4_buggy.java b/tmp/923ed1a4-cbeb-42c3-92ed-47480df9b7ad_fixed.java
index d6a560a..1cdc6e6 100644
--- a/tmp/095da574-4c0d-4295-8f8a-404eaf40e8b4_buggy.java
+++ b/tmp/923ed1a4-cbeb-42c3-92ed-47480df9b7ad_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
+    boolean resolved = false;
+    // Try to resolve via registry first to avoid triggering warnings in property resolution
+    resolved = resolveViaRegistry(t, enclosing);
     
     if (resolved) {
+        if (detectImplicitPrototypeCycle()) {
+            handleTypeCycle(t);
+        }
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return registry.isLastGeneration() ? getReferencedType() : this;
     }
 
+    // If not resolved via registry, try resolving via properties
     resolveViaProperties(t, enclosing);
+    
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
     }
 
-    super.resolveInternal(t, enclosing);
+    // Only proceed if the type is actually resolved
     if (isResolved()) {
+        super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
     }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
