diff --git a/tmp/3228ecfc-782e-4b1e-82e0-70ed81c13274_buggy.java b/tmp/cbe97c0e-addf-4578-8970-40d97879bbf3_fixed.java
index d6a560a..06c677f 100644
--- a/tmp/3228ecfc-782e-4b1e-82e0-70ed81c13274_buggy.java
+++ b/tmp/cbe97c0e-addf-4578-8970-40d97879bbf3_fixed.java
@@ -1,33 +1,38 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Introduce a visited set to detect and handle cyclic dependencies
+    Set<String> visited = new HashSet<>();
+    if (!resolveWithCycleCheck(t, enclosing, visited)) {
+        return this;
+    }
+
+    super.resolveInternal(t, enclosing);
+    finishPropertyContinuations();
+    return registry.isLastGeneration() ?
+            getReferencedType() : this;
+}
+
+private boolean resolveWithCycleCheck(ErrorReporter t, StaticScope<JSType> enclosing, Set<String> visited) {
+    if (visited.contains(referenceName)) {
+        handleTypeCycle(t);
+        return false;
+    }
+    visited.add(referenceName);
+
+    // First, try to resolve via registry
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
-
     if (resolved) {
-      super.resolveInternal(t, enclosing);
-      finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+        return true;
     }
 
+    // If not resolved via registry, try via properties
     resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
+    return isResolved();
 }
 
-    super.resolveInternal(t, enclosing);
-    if (isResolved()) {
-      finishPropertyContinuations();
-    }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+private void handleTypeCycle(ErrorReporter t) {
+    t.report(JSError.make(referenceName, CYCLIC_INHERITANCE, referenceName));
 }
\ No newline at end of file
