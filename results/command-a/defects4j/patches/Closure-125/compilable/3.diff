diff --git a/tmp/1cd50cfd-73c8-4d5d-aacf-0a2dc12728f1_buggy.java b/tmp/2117abfb-598f-4cc9-b52b-5f13d07a011a_fixed.java
index 7e43c1c..dcb1ceb 100644
--- a/tmp/1cd50cfd-73c8-4d5d-aacf-0a2dc12728f1_buggy.java
+++ b/tmp/2117abfb-598f-4cc9-b52b-5f13d07a011a_fixed.java
@@ -1,19 +1,30 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
     FunctionType fnType = type.toMaybeFunctionType();
     if (fnType != null) {
       visitParameterList(t, n, fnType);
       ensureTyped(t, n, fnType.getInstanceType());
     } else {
       ensureTyped(t, n);
     }
+  } else if (type.isInterface()) {
+    // Interfaces are not constructable, but their implementations are.
+    // If the interface type is the result of a union, we can't determine
+    // the actual implementation being constructed, so we just ensure the
+    // node is typed as the interface.
+    if (type.isUnionType()) {
+      ensureTyped(t, n, type);
+    } else {
+      report(t, n, NOT_A_CONSTRUCTOR);
+      ensureTyped(t, n);
+    }
   } else {
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
