diff --git a/tmp/805fb9c7-46e3-4fe9-ae13-2fefe1ca24d2_buggy.java b/tmp/f665db9b-4038-448a-9978-29d1c0755c43_fixed.java
index 730ab7d..45c243e 100644
--- a/tmp/805fb9c7-46e3-4fe9-ae13-2fefe1ca24d2_buggy.java
+++ b/tmp/f665db9b-4038-448a-9978-29d1c0755c43_fixed.java
@@ -1,48 +1,49 @@
 /**
  * Parses the raw bytes read from the central directory extra
  * field with knowledge which fields are expected to be there.
  *
  * <p>All four fields inside the zip64 extended information extra
  * field are optional and must only be present if their corresponding
  * entry inside the central directory contains the correct magic
-     * value.</p>
+ * value. Any additional data beyond the expected fields should be ignored.</p>
  */
 public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
     if (rawCentralDirectoryData != null) {
         int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+        
+        // Allow for extra data beyond the expected fields
+        if (rawCentralDirectoryData.length < expectedLength) {
             throw new ZipException("central directory zip64 extended"
-                                       + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
-                                       + expectedLength + " but is "
+                    + " information extra field's length is less than expected."
+                    + " Expected at least " + expectedLength + " but is "
                     + rawCentralDirectoryData.length);
         }
+
         int offset = 0;
         if (hasUncompressedSize) {
             size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasCompressedSize) {
             compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
                     offset);
             offset += DWORD;
         }
         if (hasRelativeHeaderOffset) {
             relativeHeaderOffset =
                     new ZipEightByteInteger(rawCentralDirectoryData, offset);
             offset += DWORD;
         }
         if (hasDiskStart) {
             diskStart = new ZipLong(rawCentralDirectoryData, offset);
             offset += WORD;
         }
     }
 }
\ No newline at end of file
