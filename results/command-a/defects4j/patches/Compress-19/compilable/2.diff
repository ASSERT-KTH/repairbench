diff --git a/tmp/e3653af7-6161-4e35-84c4-108dc91a9864_buggy.java b/tmp/36529852-6a88-440b-9c83-9e50294180ab_fixed.java
index 730ab7d..c688570 100644
--- a/tmp/e3653af7-6161-4e35-84c4-108dc91a9864_buggy.java
+++ b/tmp/36529852-6a88-440b-9c83-9e50294180ab_fixed.java
@@ -1,48 +1,51 @@
     /**
      * Parses the raw bytes read from the central directory extra
      * field with knowledge which fields are expected to be there.
      *
      * <p>All four fields inside the zip64 extended information extra
      * field are optional and must only be present if their corresponding
      * entry inside the central directory contains the correct magic
      * value.</p>
+     *
+     * <p>If the actual length of the raw data is greater than the expected length,
+     * the excess data is ignored.</p>
      */
     public void reparseCentralDirectoryData(boolean hasUncompressedSize,
                                             boolean hasCompressedSize,
                                             boolean hasRelativeHeaderOffset,
                                             boolean hasDiskStart)
         throws ZipException {
         if (rawCentralDirectoryData != null) {
             int expectedLength = (hasUncompressedSize ? DWORD : 0)
                 + (hasCompressedSize ? DWORD : 0)
                 + (hasRelativeHeaderOffset ? DWORD : 0)
                 + (hasDiskStart ? WORD : 0);
-            if (rawCentralDirectoryData.length != expectedLength) {
+            if (rawCentralDirectoryData.length < expectedLength) {
                 throw new ZipException("central directory zip64 extended"
                                        + " information extra field's length"
-                                       + " doesn't match central directory"
-                                       + " data.  Expected length "
+                                       + " is less than expected.  Expected length "
                                        + expectedLength + " but is "
                                        + rawCentralDirectoryData.length);
             }
             int offset = 0;
+            byte[] dataToUse = new byte[expectedLength];
+            System.arraycopy(rawCentralDirectoryData, 0, dataToUse, 0, Math.min(rawCentralDirectoryData.length, expectedLength));
             if (hasUncompressedSize) {
-                size = new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                size = new ZipEightByteInteger(dataToUse, offset);
                 offset += DWORD;
             }
             if (hasCompressedSize) {
-                compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,
-                                                         offset);
+                compressedSize = new ZipEightByteInteger(dataToUse, offset);
                 offset += DWORD;
             }
             if (hasRelativeHeaderOffset) {
                 relativeHeaderOffset =
-                    new ZipEightByteInteger(rawCentralDirectoryData, offset);
+                    new ZipEightByteInteger(dataToUse, offset);
                 offset += DWORD;
             }
             if (hasDiskStart) {
-                diskStart = new ZipLong(rawCentralDirectoryData, offset);
+                diskStart = new ZipLong(dataToUse, offset);
                 offset += WORD;
             }
         }
     }
\ No newline at end of file
