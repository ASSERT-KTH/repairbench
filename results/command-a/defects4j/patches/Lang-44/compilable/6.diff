diff --git a/tmp/f6c26103-1497-46e0-a448-0f1fdead103e_buggy.java b/tmp/f672adef-c046-4888-ac38-c7980be780f8_fixed.java
index 4a05f03..d7cc826 100644
--- a/tmp/f6c26103-1497-46e0-a448-0f1fdead103e_buggy.java
+++ b/tmp/f672adef-c046-4888-ac38-c7980be780f8_fixed.java
@@ -1,170 +1,173 @@
 /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>First, the value is examined for a type qualifier on the end
      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts 
      * trying to create successively larger types from the type specified
      * until one is found that can hold the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
      * <code>BigDecimal</code>.</p>
      *
      * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it
      * will be interpreted as a hexadecimal integer.  Values with leading
      * <code>0</code>'s will not be interpreted as octal.</p>
      *
      * @param val String containing a number
      * @return Number created from the string
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(String val) throws NumberFormatException {
         if (val == null) {
             return null;
         }
         if (val.length() == 0) {
             throw new NumberFormatException("\"\" is not a valid number.");
         }
         if (val.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
             // it accepts this as a legal value, but it does not appear 
             // to be in specification of class. OS X Java parses it to 
             // a wrong value.
-            return null;
+            throw new NumberFormatException(val + " is not a valid number.");
         }
         if (val.startsWith("0x") || val.startsWith("-0x")) {
             return createInteger(val);
         }
+        String orig = val;
         char lastChar = val.charAt(val.length() - 1);
         String mant;
         String dec;
         String exp;
         int decPos = val.indexOf('.');
         int expPos = val.indexOf('e') + val.indexOf('E') + 1;
 
         if (decPos > -1) {
-
             if (expPos > -1) {
-                if (expPos < decPos) {
+                if (expPos < decPos || expPos > val.length()) {
                     throw new NumberFormatException(val + " is not a valid number.");
                 }
                 dec = val.substring(decPos + 1, expPos);
             } else {
                 dec = val.substring(decPos + 1);
             }
             mant = val.substring(0, decPos);
         } else {
             if (expPos > -1) {
+                if (expPos > val.length()) {
+                    throw new NumberFormatException(val + " is not a valid number.");
+                }
                 mant = val.substring(0, expPos);
             } else {
                 mant = val;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar)) {
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
-            String numeric = val.substring(0, val.length() - 1);
+            val = val.substring(0, val.length() - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                        && (val.charAt(0) == '-' && isDigits(val.substring(1)) || isDigits(val))) {
                         try {
-                            return createLong(numeric);
+                            return createLong(val);
                         } catch (NumberFormatException nfe) {
                             //Too big for a long
                         }
-                        return createBigInteger(numeric);
+                        return createBigInteger(val);
 
                     }
-                    throw new NumberFormatException(val + " is not a valid number.");
+                    throw new NumberFormatException(orig + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
-                        Float f = NumberUtils.createFloat(numeric);
+                        Float f = NumberUtils.createFloat(val);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
                     //Fall through
                 case 'd' :
                 case 'D' :
                     try {
-                        Double d = NumberUtils.createDouble(numeric);
+                        Double d = NumberUtils.createDouble(val);
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (NumberFormatException nfe) {
                         // empty catch
                     }
                     try {
-                        return createBigDecimal(numeric);
+                        return createBigDecimal(val);
                     } catch (NumberFormatException e) {
                         // empty catch
                     }
                     //Fall through
                 default :
-                    throw new NumberFormatException(val + " is not a valid number.");
+                    throw new NumberFormatException(orig + " is not a valid number.");
 
             }
         } else {
             //User doesn't have a preference on the return type, so let's start
             //small and go from there...
             if (expPos > -1 && expPos < val.length() - 1) {
                 exp = val.substring(expPos + 1, val.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
                 //Must be an int,long,bigint
                 try {
-                    return createInteger(val);
+                    return createInteger(orig);
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
                 try {
-                    return createLong(val);
+                    return createLong(orig);
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
-                return createBigInteger(val);
+                return createBigInteger(orig);
 
             } else {
                 //Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
-                    Float f = createFloat(val);
+                    Float f = createFloat(orig);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                         return f;
                     }
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
                 try {
-                    Double d = createDouble(val);
+                    Double d = createDouble(orig);
                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
                 } catch (NumberFormatException nfe) {
                     // empty catch
                 }
 
-                return createBigDecimal(val);
+                return createBigDecimal(orig);
 
             }
 
         }
     }
\ No newline at end of file
