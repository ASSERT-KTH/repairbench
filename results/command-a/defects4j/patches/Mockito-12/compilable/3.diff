diff --git a/tmp/9e282a99-ee20-4245-8f31-3600536ba6c1_buggy.java b/tmp/1fba8eb4-01e1-4605-a05e-6ff8e276ad33_fixed.java
index bada2b6..125146a 100644
--- a/tmp/9e282a99-ee20-4245-8f31-3600536ba6c1_buggy.java
+++ b/tmp/1fba8eb4-01e1-4605-a05e-6ff8e276ad33_fixed.java
@@ -1,16 +1,40 @@
 /**
  * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class.
+ * Handles nested generics by recursively resolving the type arguments.
  *
  * @param field
  * @return
  */
 public Class getGenericType(Field field) {
     Type generic = field.getGenericType();
     if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        Type[] actualTypeArguments = ((ParameterizedType) generic).getActualTypeArguments();
+        if (actualTypeArguments.length > 0) {
+            Type actual = actualTypeArguments[0];
+            if (actual instanceof Class) {
                 return (Class) actual;
-                //in case of nested generics we don't go deep
+            } else if (actual instanceof ParameterizedType) {
+                // Handle nested generics by recursively resolving the type
+                return getGenericTypeFromType(actual);
+            }
+        }
+    }
+    return Object.class;
 }
 
+private Class getGenericTypeFromType(Type type) {
+    if (type instanceof Class) {
+        return (Class) type;
+    } else if (type instanceof ParameterizedType) {
+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
+        if (actualTypeArguments.length > 0) {
+            Type actual = actualTypeArguments[0];
+            if (actual instanceof Class) {
+                return (Class) actual;
+            } else if (actual instanceof ParameterizedType) {
+                return getGenericTypeFromType(actual);
+            }
+        }
+    }
     return Object.class;
 }
\ No newline at end of file
