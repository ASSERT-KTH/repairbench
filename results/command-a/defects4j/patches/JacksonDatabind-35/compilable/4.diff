diff --git a/tmp/a50b788b-0a16-4668-8add-7229cd824f80_buggy.java b/tmp/f9bcaf16-102a-4dc4-8ea1-3ddfcbadfc29_fixed.java
index 7d8d756..b774f08 100644
--- a/tmp/a50b788b-0a16-4668-8add-7229cd824f80_buggy.java
+++ b/tmp/f9bcaf16-102a-4dc4-8ea1-3ddfcbadfc29_fixed.java
@@ -1,48 +1,64 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        
+        // Check if we are at the start of the JSON object
+        if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
-            if (p.nextToken() != JsonToken.FIELD_NAME) {
-                throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
-                        "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
+
+        // If we are at a FIELD_NAME, it might be the type id or the start of the object
+        if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            // Check if the field name matches the type property name
+            if (!p.getText().equals(_typePropertyName)) {
+                // If not, assume we are at the start of the object and proceed
+                p.nextToken();
             }
+        }
+
+        // Now, we should be at the type id field or the start of the object
+        if (p.getCurrentToken() == JsonToken.FIELD_NAME && p.getText().equals(_typePropertyName)) {
+            p.nextToken(); // Move to the type id value
             final String typeId = p.getText();
             JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
+            p.nextToken(); // Move to the start of the object
 
-        // Minor complication: we may need to merge type id in?
+            // Handle type id visibility
             if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
                 TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+                tb.writeStartObject();
                 tb.writeFieldName(_typePropertyName);
                 tb.writeString(typeId);
-            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+                p.nextToken(); // Move to the first field of the object
+                tb.copyCurrentStructure(p);
+                p = tb.asParser(p);
                 p.nextToken();
             }
 
             Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+            // Check for the closing END_OBJECT
             if (p.nextToken() != JsonToken.END_OBJECT) {
                 throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                         "expected closing END_OBJECT after type information and deserialized value");
             }
             return value;
+        } else {
+            // If we didn't find the type id field, assume the type is the base type
+            JsonDeserializer<Object> deser = _findDeserializer(ctxt, baseTypeName());
+            Object value = deser.deserialize(p, ctxt);
+            return value;
+        }
     }
\ No newline at end of file
