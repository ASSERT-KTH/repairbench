diff --git a/tmp/3b272618-fb0b-41b6-a342-693f751ea351_buggy.java b/tmp/7a02d29c-50cf-4a8b-a822-d87c744d3d7d_fixed.java
index 7d8d756..5a96973 100644
--- a/tmp/3b272618-fb0b-41b6-a342-693f751ea351_buggy.java
+++ b/tmp/7a02d29c-50cf-4a8b-a822-d87c744d3d7d_fixed.java
@@ -1,48 +1,71 @@
 /**
  * Method that handles type information wrapper, locates actual
  * subtype deserializer to use, and calls it to do actual
  * deserialization.
  */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
+
+    // Handle the case where the JSON structure is a simple object without wrapping
+    if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+        // Consume the START_OBJECT token
+        p.nextToken();
+        
+        // If the first token is not a FIELD_NAME, it's likely a simple object without wrapping
+        if (p.getCurrentToken() != JsonToken.FIELD_NAME) {
+            // Assume it's a simple object and try to deserialize directly
+            JsonDeserializer<Object> deser = _findDeserializer(ctxt, baseTypeName());
+            Object value = deser.deserialize(p, ctxt);
+            
+            // Ensure the object is closed properly
+            if (p.nextToken() != JsonToken.END_OBJECT) {
+                throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                        "expected closing END_OBJECT after deserialized value");
+            }
+            return value;
+        }
+    }
+
+    // Original logic for wrapped objects
     if (p.getCurrentToken() != JsonToken.START_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                 "need JSON Object to contain As.WRAPPER_OBJECT type information for class " + baseTypeName());
     }
+
     // should always get field name, but just in case...
     if (p.nextToken() != JsonToken.FIELD_NAME) {
         throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                 "need JSON String that contains type id (for subtype of " + baseTypeName() + ")");
     }
+
     final String typeId = p.getText();
     JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
     p.nextToken();
 
     // Minor complication: we may need to merge type id in?
     if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
         // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
         TokenBuffer tb = new TokenBuffer(null, false);
         tb.writeStartObject(); // recreate START_OBJECT
         tb.writeFieldName(_typePropertyName);
         tb.writeString(typeId);
         p = JsonParserSequence.createFlattened(tb.asParser(p), p);
         p.nextToken();
     }
 
     Object value = deser.deserialize(p, ctxt);
     // And then need the closing END_OBJECT
     if (p.nextToken() != JsonToken.END_OBJECT) {
         throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                 "expected closing END_OBJECT after type information and deserialized value");
     }
     return value;
 }
\ No newline at end of file
