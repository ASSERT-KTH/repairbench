diff --git a/tmp/e590084d-16ef-4f88-9b25-3f6874fc7a39_buggy.java b/tmp/4c1493eb-5fdc-4d44-9593-19334fef4063_fixed.java
index 7d8d756..979ef14 100644
--- a/tmp/e590084d-16ef-4f88-9b25-3f6874fc7a39_buggy.java
+++ b/tmp/4c1493eb-5fdc-4d44-9593-19334fef4063_fixed.java
@@ -1,48 +1,59 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+        
+        // Check if we are at the start of an object
+        if (p.getCurrentToken() != JsonToken.START_OBJECT && p.getCurrentToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
-            // should always get field name, but just in case...
+
+        // If we are at a field name, it means the object has already started
+        // and the field name is the type id
+        String typeId;
+        if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+            typeId = p.getText();
+            p.nextToken(); // Move to the value
+        } else {
+            // If we are at the start of an object, the next token should be a field name
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
-        final String typeId = p.getText();
+            typeId = p.getText();
+            p.nextToken(); // Move to the value
+        }
+
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
-        p.nextToken();
 
-        // Minor complication: we may need to merge type id in?
+        // Handle the case where the type id is visible and needs to be merged
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
+
+        // Ensure we have the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
