diff --git a/tmp/993e0928-4528-43e1-be35-3bea31718f07_buggy.java b/tmp/eb61f48a-d0ba-41e4-b577-15c14e4d50e2_fixed.java
index 0eef537..bb267d0 100644
--- a/tmp/993e0928-4528-43e1-be35-3bea31718f07_buggy.java
+++ b/tmp/eb61f48a-d0ba-41e4-b577-15c14e4d50e2_fixed.java
@@ -1,74 +1,82 @@
 /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = new double[order][order];
         cachedL  = null;
         cachedLT = null;
 
-        // check the matrix before transformation
-        for (int i = 0; i < order; ++i) {
+        // Copy the input matrix into lTData
+        for (int i = 0; i < order; i++) {
+            System.arraycopy(matrix.getRow(i), 0, lTData[i], 0, order);
+        }
 
+        // Check the matrix before transformation
+        for (int i = 0; i < order; ++i) {
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+            // Check diagonal element for positive definiteness
+            if (lI[i] <= absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
-            // check off-diagonal elements (and reset them to 0)
+
+            // Check off-diagonal elements for symmetry
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+                final double maxDelta = relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                // Ensure symmetry by setting off-diagonal elements to their average
+                lI[j] = lJI[i] = (lIJ + lJI) / 2;
             }
         }
 
-        // transform the matrix
+        // Perform Cholesky decomposition
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
 
-            // check diagonal element
-
+            // Calculate the square root of the diagonal element
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
+            // Update the remaining elements in the column
+            for (int q = i + 1; q < order; ++q) {
                 ltI[q] *= inverse;
-                final double[] ltQ = lTData[q];
-                for (int p = q; p < order; ++p) {
-                    ltQ[p] -= ltI[q] * ltI[p];
-                }
             }
 
+            // Update the remaining rows
+            for (int j = i + 1; j < order; ++j) {
+                final double[] ltJ = lTData[j];
+                final double coefficient = ltJ[i];
+                for (int q = j; q < order; ++q) {
+                    ltJ[q] -= ltI[q] * coefficient;
+                }
+            }
         }
-
     }
\ No newline at end of file
