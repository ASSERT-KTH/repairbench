diff --git a/tmp/3e3b634a-8bc5-460a-abf7-dc6927bbe1cf_buggy.java b/tmp/50b4d449-c22e-4c66-84f6-ace688e1e6a0_fixed.java
index 0eef537..2810540 100644
--- a/tmp/3e3b634a-8bc5-460a-abf7-dc6927bbe1cf_buggy.java
+++ b/tmp/50b4d449-c22e-4c66-84f6-ace688e1e6a0_fixed.java
@@ -1,74 +1,85 @@
 /**
      * Calculates the Cholesky decomposition of the given matrix.
      * @param matrix the matrix to decompose
      * @param relativeSymmetryThreshold threshold above which off-diagonal
      * elements are considered too different and matrix not symmetric
      * @param absolutePositivityThreshold threshold below which diagonal
      * elements are considered null and matrix not positive definite
      * @exception NonSquareMatrixException if matrix is not square
      * @exception NotSymmetricMatrixException if matrix is not symmetric
      * @exception NotPositiveDefiniteMatrixException if the matrix is not
      * strictly positive definite
      * @see #CholeskyDecompositionImpl(RealMatrix)
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
     public CholeskyDecompositionImpl(final RealMatrix matrix,
                                      final double relativeSymmetryThreshold,
                                      final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
         if (!matrix.isSquare()) {
             throw new NonSquareMatrixException(matrix.getRowDimension(),
                                                matrix.getColumnDimension());
         }
 
         final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
+        lTData   = new double[order][order];
         cachedL  = null;
         cachedLT = null;
 
+        // Copy the input matrix to lTData
+        for (int i = 0; i < order; i++) {
+            for (int j = 0; j < order; j++) {
+                lTData[i][j] = matrix.getEntry(i, j);
+            }
+        }
+
         // check the matrix before transformation
         for (int i = 0; i < order; ++i) {
 
             final double[] lI = lTData[i];
 
-            if (lTData[i][i] < absolutePositivityThreshold) {
+            if (lI[i] < absolutePositivityThreshold) {
                 throw new NotPositiveDefiniteMatrixException();
             }
             // check off-diagonal elements (and reset them to 0)
             for (int j = i + 1; j < order; ++j) {
                 final double[] lJ = lTData[j];
                 final double lIJ = lI[j];
                 final double lJI = lJ[i];
                 final double maxDelta =
                     relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
                 if (Math.abs(lIJ - lJI) > maxDelta) {
                     throw new NotSymmetricMatrixException();
                 }
-                lJ[i] = 0;
+                lI[j] = lJI; // Ensure symmetry
+                lJ[i] = 0;   // Reset off-diagonal elements to 0 after checking
            }
         }
 
         // transform the matrix
         for (int i = 0; i < order; ++i) {
 
             final double[] ltI = lTData[i];
 
             // check diagonal element
+            if (ltI[i] <= 0) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
-            for (int q = order - 1; q > i; --q) {
+            for (int q = i + 1; q < order; ++q) { // Start from i+1 to avoid modifying ltI[i]
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
             }
 
         }
 
     }
\ No newline at end of file
