diff --git a/tmp/c3fe168c-598b-4438-a095-4d0d2282b5d9_buggy.java b/tmp/91aa31e3-2446-4478-bb91-644f8c2e0f59_fixed.java
index 10616db..f291cf8 100644
--- a/tmp/c3fe168c-598b-4438-a095-4d0d2282b5d9_buggy.java
+++ b/tmp/91aa31e3-2446-4478-bb91-644f8c2e0f59_fixed.java
@@ -1,19 +1,31 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+            // Validate the result to handle edge cases like leap years and end of month adjustments
+            for (int i = 0; i < partial.size(); i++) {
+                DateTimeField field = partial.getFieldType(i).getField(iChronology);
+                int value = result[i];
+                if (!field.isLenient() && !field.isValidValue(result[i])) {
+                    result[i] = field.getMaximumValue();
+                    if (!field.isValidValue(result[i])) {
+                        result[i] = field.getMinimumValue();
+                    }
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
