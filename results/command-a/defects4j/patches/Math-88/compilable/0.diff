diff --git a/tmp/edd45216-8c73-412a-8bb7-2254b2145d9a_buggy.java b/tmp/0de13756-3de3-4fc8-b433-cf980e355e7c_fixed.java
index 544303b..14db84f 100644
--- a/tmp/edd45216-8c73-412a-8bb7-2254b2145d9a_buggy.java
+++ b/tmp/0de13756-3de3-4fc8-b433-cf980e355e7c_fixed.java
@@ -1,29 +1,34 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
                 // if multiple variables can take a given value 
                 // then we choose the first and set the rest equal to 0
                 coefficients[i] =
                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                    (restrictToNonNegative ? Math.min(0, mostNegative) : mostNegative);
             if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
+                boolean isBasicVariable = false;
+                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
+                        isBasicVariable = true;
+                        break;
+                    }
+                }
+                if (!isBasicVariable) {
                     coefficients[i] = 0;
                 }
             }
         }
-        }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
\ No newline at end of file
