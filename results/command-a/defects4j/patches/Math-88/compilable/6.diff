diff --git a/tmp/f1578224-da5c-4960-843f-def6124541ea_buggy.java b/tmp/e381bbf4-b318-4766-a1d1-e989a9355f72_fixed.java
index 544303b..cb533b7 100644
--- a/tmp/f1578224-da5c-4960-843f-def6124541ea_buggy.java
+++ b/tmp/e381bbf4-b318-4766-a1d1-e989a9355f72_fixed.java
@@ -1,29 +1,29 @@
-    /**
-     * Get the current solution.
-     * <p>
-     * {@link #solve} should be called first for this to be the optimal solution.
-     * </p>
-     * @return current solution
-     */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     Integer basicRow =
         getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
     double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
     for (int i = 0; i < coefficients.length; i++) {
         basicRow = getBasicRow(getNumObjectiveFunctions() + i);
         // if multiple variables can take a given value 
         // then we choose the first and set the rest equal to 0
         coefficients[i] =
             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
             (restrictToNonNegative ? 0 : mostNegative);
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
+            boolean isBasicVariable = false;
+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); j++) {
+                if (tableau.getEntry(basicRow, j) == 1 && j == getNumObjectiveFunctions() + i) {
+                    isBasicVariable = true;
+                } else if (tableau.getEntry(basicRow, j) == 1) {
                     coefficients[i] = 0;
+                    break;
                 }
             }
+            if (isBasicVariable) {
+                coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);
+            }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
