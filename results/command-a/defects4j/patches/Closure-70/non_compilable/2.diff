diff --git a/tmp/e7429b5e-7695-4a91-a688-a6debaf3c3f6_buggy.java b/tmp/ef6dc065-a05e-41f3-8730-d7c9cdf298e1_fixed.java
index 1530b34..eac5bc8 100644
--- a/tmp/e7429b5e-7695-4a91-a688-a6debaf3c3f6_buggy.java
+++ b/tmp/ef6dc065-a05e-41f3-8730-d7c9cdf298e1_fixed.java
@@ -1,23 +1,50 @@
 /**
  * Declares all of a function's arguments.
  */
 private void declareArguments(Node functionNode) {
   Node astParameters = functionNode.getFirstChild().getNext();
   Node body = astParameters.getNext();
   FunctionType functionType = (FunctionType) functionNode.getJSType();
   if (functionType != null) {
     Node jsDocParameters = functionType.getParametersNode();
     if (jsDocParameters != null) {
       Node jsDocParameter = jsDocParameters.getFirstChild();
       for (Node astParameter : astParameters.children()) {
         if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
+          // Check if the parameter is already declared in the function's scope
+          if (scope.isDeclared(astParameter.getString(), false)) {
+            // If it's already declared, handle the duplicate declaration
+            handleDuplicateDeclaration(astParameter, functionNode, jsDocParameter.getJSType());
+          } else {
+            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);
+          }
           jsDocParameter = jsDocParameter.getNext();
         } else {
           defineSlot(astParameter, functionNode, null, true);
         }
       }
     }
   }
 } // end declareArguments
+
+private void handleDuplicateDeclaration(Node astParameter, Node functionNode, JSType type) {
+  String paramName = astParameter.getString();
+  if (scope.isDeclared(paramName, false)) {
+    // Check if the previous declaration was in the same function
+    Var previousVar = scope.getVar(paramName);
+    if (previousVar.getScope().getRootNode() == functionNode) {
+      // If it was in the same function, report a duplicate variable declaration
+      reportDuplicateVarDeclaration(astParameter, paramName, previousVar.getType());
+    } else {
+      // Otherwise, it's a different scope, so just redefine the slot
+      defineSlot(astParameter, functionNode, type, true);
+    }
+  }
+}
+
+private void reportDuplicateVarDeclaration(Node node, String varName, JSType originalType) {
+  JSType newType = node.getJSType();
+  if (originalType != null && newType != null && !originalType.isEquivalentTo(newType)) {
+    warning(DUPLICATE_VAR_DECLARATION, node, varName, originalType.toString(), newType.toString());
+  }
+}
\ No newline at end of file
