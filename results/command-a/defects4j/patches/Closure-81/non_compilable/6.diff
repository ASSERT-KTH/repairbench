diff --git a/tmp/c9bbfcac-efda-4d77-ab99-15bb9bc33eee_buggy.java b/tmp/06057384-594b-40fb-8cbf-e4f0d7b0142b_fixed.java
index 6e05e4b..5d5c9af 100644
--- a/tmp/c9bbfcac-efda-4d77-ab99-15bb9bc33eee_buggy.java
+++ b/tmp/06057384-594b-40fb-8cbf-e4f0d7b0142b_fixed.java
@@ -1,51 +1,49 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
         newName.setCharno(position2charno(lpColumn));
+      } else {
+        // For named functions, ensure the name's line number matches the function's
+        newName.setLineno(functionNode.getLineno());
+        newName.setCharno(functionNode.getCharno());
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
       // The left paren's complicated because it's not represented by an
       // AstNode, so there's nothing that has the actual line number that it
       // appeared on. We know the paren has to appear on the same line as the
       // function name (or else a semicolon will be inserted.) If there's no
       // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
+      int lparenLineno = functionNode.getLp() > 0 ? 
+          functionNode.getLineno() : 
+          functionNode.getLineno();
       int lparenCharno = functionNode.getLp() +
           functionNode.getAbsolutePosition();
 
+      lp.setLineno(lparenLineno);
       lp.setCharno(position2charno(lparenCharno));
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
       return node;
     }
\ No newline at end of file
