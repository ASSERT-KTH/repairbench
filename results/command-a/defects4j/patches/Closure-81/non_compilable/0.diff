diff --git a/tmp/331caf67-d464-4dad-8179-7c0eaf2e3f43_buggy.java b/tmp/ad7ca8fb-0627-49ba-96dc-c9d0eb48f1fb_fixed.java
index 6e05e4b..41ae664 100644
--- a/tmp/331caf67-d464-4dad-8179-7c0eaf2e3f43_buggy.java
+++ b/tmp/ad7ca8fb-0627-49ba-96dc-c9d0eb48f1fb_fixed.java
@@ -1,51 +1,54 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
     Name name = functionNode.getFunctionName();
     Boolean isUnnamedFunction = false;
     if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
+    } else {
+        isUnnamedFunction = false;
     }
+
     Node node = newNode(Token.FUNCTION);
     Node newName = transform(name);
     if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
-        int lpColumn = functionNode.getAbsolutePosition() +
-            functionNode.getLp();
-        newName.setCharno(position2charno(lpColumn));
+        // Set the character position based on the function keyword position.
+        int fnKeywordPosition = functionNode.getAbsolutePosition();
+        newName.setCharno(position2charno(fnKeywordPosition));
+    } else {
+        newName.setLineno(name.getLineno());
+        newName.setCharno(name.getCharno());
     }
 
     node.addChildToBack(newName);
+
     Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
-        lp.setLineno(functionNode.getLineno());
-      }
-      int lparenCharno = functionNode.getLp() +
-          functionNode.getAbsolutePosition();
+    int lpColumn = functionNode.getLp() + functionNode.getAbsolutePosition();
+    lp.setLineno(functionNode.getLineno()); // Use functionNode's line number for paren
+    lp.setCharno(position2charno(lpColumn));
 
-      lp.setCharno(position2charno(lparenCharno));
     for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
     }
     node.addChildToBack(lp);
 
     Node bodyNode = transform(functionNode.getBody());
     parseDirectives(bodyNode);
     node.addChildToBack(bodyNode);
+
+    // Check if it's an unnamed function statement and throw an error if necessary
+    if (isUnnamedFunction && parentIsScriptOrBlock(node)) {
+        throw new IllegalArgumentException("unnamed function statement");
+    }
+
     return node;
 }
+
+private boolean parentIsScriptOrBlock(Node node) {
+    Node parent = node.getParent();
+    return parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK);
+}
\ No newline at end of file
