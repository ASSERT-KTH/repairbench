diff --git a/tmp/b8ec7407-22cc-4357-a7a0-1b441eef78dc_buggy.java b/tmp/2f0e5fc4-6e6e-46e2-b705-6b2ca7a73eb1_fixed.java
index 6e05e4b..5f7c372 100644
--- a/tmp/b8ec7407-22cc-4357-a7a0-1b441eef78dc_buggy.java
+++ b/tmp/2f0e5fc4-6e6e-46e2-b705-6b2ca7a73eb1_fixed.java
@@ -1,51 +1,54 @@
     @Override
     Node processFunctionNode(FunctionNode functionNode) {
       Name name = functionNode.getFunctionName();
       Boolean isUnnamedFunction = false;
       if (name == null) {
         name = new Name();
         name.setIdentifier("");
         isUnnamedFunction = true;
       }
       Node node = newNode(Token.FUNCTION);
       Node newName = transform(name);
       if (isUnnamedFunction) {
         // Old Rhino tagged the empty name node with the line number of the
         // declaration.
         newName.setLineno(functionNode.getLineno());
-        // TODO(bowdidge) Mark line number of paren correctly.
-        // Same problem as below - the left paren might not be on the
-        // same line as the function keyword.
+        // Mark the column position correctly for unnamed functions.
         int lpColumn = functionNode.getAbsolutePosition() +
             functionNode.getLp();
+        if (lpColumn < 0) {
+          lpColumn = functionNode.getAbsolutePosition();
+        }
         newName.setCharno(position2charno(lpColumn));
+      } else {
+        // For named functions, ensure the name node retains its original position.
+        newName.setLineno(name.getLineno());
+        newName.setCharno(position2charno(name.getAbsolutePosition()));
       }
 
       node.addChildToBack(newName);
       Node lp = newNode(Token.LP);
-      // The left paren's complicated because it's not represented by an
-      // AstNode, so there's nothing that has the actual line number that it
-      // appeared on.  We know the paren has to appear on the same line as the
-      // function name (or else a semicolon will be inserted.)  If there's no
-      // function name, assume the paren was on the same line as the function.
-      // TODO(bowdidge): Mark line number of paren correctly.
-      Name fnName = functionNode.getFunctionName();
-      if (fnName != null) {
-        lp.setLineno(fnName.getLineno());
-      } else {
+      // The left paren's position is based on the function keyword if unnamed.
+      if (isUnnamedFunction) {
         lp.setLineno(functionNode.getLineno());
-      }
         int lparenCharno = functionNode.getLp() +
             functionNode.getAbsolutePosition();
-
+        if (lparenCharno < 0) {
+          lparenCharno = functionNode.getAbsolutePosition();
+        }
         lp.setCharno(position2charno(lparenCharno));
+      } else {
+        // For named functions, ensure the left paren's position is correctly set.
+        lp.setLineno(name.getLineno());
+        lp.setCharno(position2charno(functionNode.getLp() + name.getAbsolutePosition()));
+      }
       for (AstNode param : functionNode.getParams()) {
         lp.addChildToBack(transform(param));
       }
       node.addChildToBack(lp);
 
       Node bodyNode = transform(functionNode.getBody());
       parseDirectives(bodyNode);
       node.addChildToBack(bodyNode);
      return node;
     }
\ No newline at end of file
