diff --git a/tmp/76d82a12-9cb3-4101-b819-0ea5e9f7481b_buggy.java b/tmp/8a746832-08b4-4afb-b723-5b00d5561c27_fixed.java
index e0ecec8..1690123 100644
--- a/tmp/76d82a12-9cb3-4101-b819-0ea5e9f7481b_buggy.java
+++ b/tmp/8a746832-08b4-4afb-b723-5b00d5561c27_fixed.java
@@ -1,35 +1,53 @@
-  /**
-   * Visits the parameters of a CALL or a NEW node.
-   */
-  private void visitParameterList(NodeTraversal t, Node call,
-      FunctionType functionType) {
+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {
     Iterator<Node> arguments = call.children().iterator();
     arguments.next(); // skip the function name
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
     Node parameter = null;
     Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    
+    // Handle required parameters first
+    while (arguments.hasNext() && parameters.hasNext()) {
         parameter = parameters.next();
         argument = arguments.next();
         ordinal++;
 
         validator.expectArgumentMatchesParameter(t, argument,
                 getJSType(argument), getJSType(parameter), call, ordinal);
     }
 
+    // Handle var_args if the function allows it
+    if (functionType.isVarArgs()) {
+        JSType varArgsType = functionType.getVarArgsType();
+        while (arguments.hasNext()) {
+            argument = arguments.next();
+            ordinal++;
+
+            validator.expectArgumentMatchesParameter(t, argument,
+                    getJSType(argument), varArgsType, call, ordinal);
+        }
+    } else if (arguments.hasNext()) {
+        // If there are more arguments than parameters and it's not var_args, report an error
+        argument = arguments.next();
+        report(t, argument, UNEXPECTED_ARGUMENT_FOR_NON_VAR_ARGS,
+                validator.getReadableJSTypeName(call.getFirstChild(), false),
+                String.valueOf(ordinal + 1));
+        // Consume remaining arguments to avoid further errors
+        while (arguments.hasNext()) {
+            arguments.next();
+        }
+    }
+
+    // Check for missing required arguments
     int numArgs = call.getChildCount() - 1;
     int minArgs = functionType.getMinArguments();
     int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+    if (minArgs > numArgs) {
         report(t, call, WRONG_ARGUMENT_COUNT,
                 validator.getReadableJSTypeName(call.getFirstChild(), false),
                 String.valueOf(numArgs), String.valueOf(minArgs),
                 maxArgs != Integer.MAX_VALUE ?
                         " and no more than " + maxArgs + " argument(s)" : "");
     }
 }
\ No newline at end of file
