diff --git a/tmp/4a5487dd-dfbe-4c92-8393-fd4611773081_buggy.java b/tmp/0918fb62-1282-4f0e-8a0f-6fcf7bbb4e39_fixed.java
index e0ecec8..dab1ffc 100644
--- a/tmp/4a5487dd-dfbe-4c92-8393-fd4611773081_buggy.java
+++ b/tmp/0918fb62-1282-4f0e-8a0f-6fcf7bbb4e39_fixed.java
@@ -1,35 +1,42 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
   while (arguments.hasNext() &&
          parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+    // For var_args functions, the last parameter is a repeat of the 
+    // parameter type. So if we see the last parameter, we just continue 
+    // to the next argument.
     parameter = parameters.next();
+    if (functionType.isVarArgs() &&
+        !parameters.hasNext()) {
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), getJSType(parameter), call, ordinal);
+      continue;
+    }
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
