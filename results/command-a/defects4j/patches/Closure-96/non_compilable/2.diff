diff --git a/tmp/d076d4ce-5e4b-45a3-82c3-da66a0c5c763_buggy.java b/tmp/249a9ec7-1c83-4d8b-8a42-34927870a1d1_fixed.java
index e0ecec8..09f31b7 100644
--- a/tmp/d076d4ce-5e4b-45a3-82c3-da66a0c5c763_buggy.java
+++ b/tmp/249a9ec7-1c83-4d8b-8a42-34927870a1d1_fixed.java
@@ -1,35 +1,46 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
   while (arguments.hasNext() &&
          parameters.hasNext()) {
     // If there are no parameters left in the list, then the while loop
     // above implies that this must be a var_args function.
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Check for any remaining arguments if it's a var_args function
+  if (functionType.isVarArgs() && arguments.hasNext()) {
+    JSType varArgsType = functionType.getVarArgsType();
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    }
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
