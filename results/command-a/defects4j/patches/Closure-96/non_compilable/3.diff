diff --git a/tmp/ccc84e19-5765-40a5-ad58-43336ab9cf80_buggy.java b/tmp/4a9ef3d3-dfa2-4256-a8f9-e7d28bd93417_fixed.java
index e0ecec8..88122aa 100644
--- a/tmp/ccc84e19-5765-40a5-ad58-43336ab9cf80_buggy.java
+++ b/tmp/4a9ef3d3-dfa2-4256-a8f9-e7d28bd93417_fixed.java
@@ -1,35 +1,56 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
   while (arguments.hasNext() &&
          parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
+  // Handle var_args functions
+  if (functionType.isVarArgs()) {
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+
+      // In var_args functions, additional arguments should match the type of the last parameter
+      // or be undefined.
+      JSType varArgsType = functionType.getParameters().isEmpty() ?
+          getNativeType(UNKNOWN_TYPE) : getJSType(parameter);
+      validator.expectArgumentMatchesParameter(t, argument,
+          getJSType(argument), varArgsType.getUnionType(getNativeType(UNDEFINED_TYPE)),
+          call, ordinal);
+    }
+  } else if (arguments.hasNext()) {
+    // If there are more arguments than parameters and it's not a var_args function, report an error.
+    argument = arguments.next();
+    ordinal++;
+    report(t, argument, EXTRA_ARGUMENT,
+        validator.getReadableJSTypeName(call.getFirstChild(), false),
+        String.valueOf(ordinal));
+  }
+
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
-    if (minArgs > numArgs || maxArgs < numArgs) {
+  if (minArgs > numArgs || (maxArgs != Integer.MAX_VALUE && maxArgs < numArgs)) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
