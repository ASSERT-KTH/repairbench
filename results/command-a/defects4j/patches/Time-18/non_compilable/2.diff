diff --git a/tmp/60df4113-d165-477d-9948-3953bcb860e6_buggy.java b/tmp/237f1b76-574d-40ad-b4ca-1a3082834800_fixed.java
index be2af16..32232dc 100644
--- a/tmp/60df4113-d165-477d-9948-3953bcb860e6_buggy.java
+++ b/tmp/237f1b76-574d-40ad-b4ca-1a3082834800_fixed.java
@@ -1,29 +1,50 @@
     public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
         throws IllegalArgumentException
     {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
         long instant;
+        try {
+            // First, try with Gregorian chronology
             instant = iGregorianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+                // If the date is before the cutover, it might be Julian
+                try {
                     instant = iJulianChronology.getDateTimeMillis
                         (year, monthOfYear, dayOfMonth,
                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
                     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+                        // If Julian date is after or equal to cutover, it's in the illegal gap
                         throw new IllegalArgumentException("Specified date does not exist");
                     }
+                } catch (IllegalFieldValueException e) {
+                    // If Julian chronology throws an exception, rethrow the original Gregorian exception
+                    throw new IllegalFieldValueException(e.getFieldName(), e.getValue(), e.getMessage());
+                }
+            }
+        } catch (IllegalFieldValueException e) {
+            // If Gregorian chronology throws an exception, try Julian chronology
+            try {
+                instant = iJulianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                     hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (instant >= iCutoverMillis) {
+                    // If Julian date is after or equal to cutover, it's in the illegal gap
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+            } catch (IllegalFieldValueException ex) {
+                // If both chronologies throw an exception, rethrow the original exception
+                throw e;
+            }
         }
         return instant;
     }
\ No newline at end of file
