diff --git a/tmp/d6a2e983-65f0-4e50-b628-827db5cbd2f5_buggy.java b/tmp/bd8cfab3-55c3-414f-9e78-114b359b6acf_fixed.java
index c6b65da..d6511e2 100644
--- a/tmp/d6a2e983-65f0-4e50-b628-827db5cbd2f5_buggy.java
+++ b/tmp/bd8cfab3-55c3-414f-9e78-114b359b6acf_fixed.java
@@ -1,25 +1,36 @@
 /**
  * Returns the options with a long name starting with the name specified.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
-    public List<String> getMatchingOptions(String opt)
-    {
+public List<String> getMatchingOptions(String opt) {
     opt = Util.stripLeadingHyphens(opt);
     
     List<String> matchingOpts = new ArrayList<String>();
 
-        // for a perfect match return the single option only
+    // Check for a perfect match first
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.equals(opt)) {
+            matchingOpts.add(longOpt);
+            return matchingOpts; // Return immediately if a perfect match is found
+        }
+    }
 
-        for (String longOpt : longOpts.keySet())
-        {
-            if (longOpt.startsWith(opt))
-            {
+    // If no perfect match, look for partial matches
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.startsWith(opt) && !longOpt.equals(opt)) {
             matchingOpts.add(longOpt);
         }
     }
     
+    // If only one partial match, return it; otherwise, throw an AmbiguousOptionException if multiple matches
+    if (matchingOpts.size() == 1) {
+        return matchingOpts;
+    } else if (matchingOpts.size() > 1) {
+        throw new AmbiguousOptionException("Ambiguous option: '--" + opt + "' (could be: " + String.join(", ", matchingOpts) + ")");
+    }
+    
     return matchingOpts;
 }
\ No newline at end of file
