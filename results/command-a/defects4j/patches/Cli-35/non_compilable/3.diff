diff --git a/tmp/e5f57efa-697d-4231-be3e-ce780b22e17c_buggy.java b/tmp/71565cd1-f448-44d3-af8e-3883d399af6d_fixed.java
index c6b65da..e23fe50 100644
--- a/tmp/e5f57efa-697d-4231-be3e-ce780b22e17c_buggy.java
+++ b/tmp/71565cd1-f448-44d3-af8e-3883d399af6d_fixed.java
@@ -1,25 +1,29 @@
 /**
  * Returns the options with a long name starting with the name specified.
  * 
  * @param opt the partial name of the option
  * @return the options matching the partial name specified, or an empty list if none matches
  * @since 1.3
  */
-    public List<String> getMatchingOptions(String opt)
-    {
+public List<String> getMatchingOptions(String opt) {
     opt = Util.stripLeadingHyphens(opt);
 
-        List<String> matchingOpts = new ArrayList<String>();
+    List<String> matchingOpts = new ArrayList<>();
 
-        // for a perfect match return the single option only
+    // First, check for a perfect match
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.equals(opt)) {
+            matchingOpts.add(longOpt);
+            return matchingOpts; // Return immediately if a perfect match is found
+        }
+    }
 
-        for (String longOpt : longOpts.keySet())
-        {
-            if (longOpt.startsWith(opt))
-            {
+    // If no perfect match, look for partial matches
+    for (String longOpt : longOpts.keySet()) {
+        if (longOpt.startsWith(opt) && !longOpt.equals(opt)) {
             matchingOpts.add(longOpt);
         }
     }
 
     return matchingOpts;
 }
\ No newline at end of file
