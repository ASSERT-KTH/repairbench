diff --git a/tmp/8e6dc127-87a2-4215-851e-64ad9a52b8d8_buggy.java b/tmp/7e44e544-ef93-47fb-9c1b-bb64eb655414_fixed.java
index c9c77a4..0aef36c 100644
--- a/tmp/8e6dc127-87a2-4215-851e-64ad9a52b8d8_buggy.java
+++ b/tmp/7e44e544-ef93-47fb-9c1b-bb64eb655414_fixed.java
@@ -1,35 +1,45 @@
 URL build() {
     try {
-            // use the URI class to encode non-ascii in path
+        String host = u.getHost();
+        String userInfo = u.getUserInfo();
+        int port = u.getPort();
+        String query = q;
+        String ref = u.getRef();
+        String protocol = u.getProtocol();
+
+        // Get the raw path string, to avoid undesired decoding/encoding
+        String rawPath = u.getPath();
+        String pathComponent = rawPath;
+
         URI uri = new URI(
-                u.getProtocol(),
-                u.getUserInfo(),
-                IDN.toASCII(decodePart(u.getHost())), // puny-code
-                u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+            protocol,
+            userInfo,
+            IDN.toASCII(host),
+            port,
+            pathComponent,
+            null,
+            null
         );
 
         String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
+
+        if (query != null || ref != null) {
             StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
-                if (q != null) {
+            if (query != null) {
                 sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                appendToAscii(StringUtil.releaseBuilder(query), true, sb);
             }
-                if (u.getRef() != null) {
+            if (ref != null) {
                 sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                appendToAscii(ref, false, sb);
             }
             normUrl = StringUtil.releaseBuilder(sb);
         }
+
         u = new URL(normUrl);
         return u;
     } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
-            // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
-            // the remote end will be able to handle it, so in prod we just pass the original URL.
-            // The UnsupportedEncodingException would never happen as always UTF8
         assert Validate.assertFail(e.toString());
         return u;
     }
 }
\ No newline at end of file
