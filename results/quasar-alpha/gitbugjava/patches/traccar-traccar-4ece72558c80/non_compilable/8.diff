diff --git a/tmp/b2dadece-a2e2-4b35-ae66-c2fea08e6e0f_buggy.java b/tmp/60d6c40c-b15f-4133-b3c2-415345d9c6c2_fixed.java
index 0a8838d..e064039 100644
--- a/tmp/b2dadece-a2e2-4b35-ae66-c2fea08e6e0f_buggy.java
+++ b/tmp/60d6c40c-b15f-4133-b3c2-415345d9c6c2_fixed.java
@@ -1,61 +1,77 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+    Device device = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    String model = device != null ? device.getModel() : null;
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
-                buf.readUnsignedByte(); // type
+            int type = buf.readUnsignedByte();
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
-                if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L));
+            String text = buf.toString(buf.readerIndex(), length, StandardCharsets.US_ASCII);
+            boolean printable = isPrintable(buf, length);
+            if (printable) {
+                text = text.trim();
+                position.set(Position.KEY_RESULT, text);
+                if (type == 6 && !text.isEmpty()) {
+                    // attempt to extract id from text e.g. "TSL|...|12749884|..." for driver unique id
+                    String normalized = text.replace("\0", "");
+                    String[] parts = normalized.split("\\|");
+                    for (String part : parts) {
+                        part = part.trim();
+                        if (!part.isEmpty() && part.matches("\\d+")) {
+                            // heuristic: first number longer than 3 digits
+                            position.set(Position.KEY_DRIVER_UNIQUE_ID, part);
+                            break;
+                        }
+                    }
+                }
             } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.slice(buf.readerIndex(), length)));
             }
+            buf.skipBytes(length);
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
