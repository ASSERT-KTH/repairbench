diff --git a/tmp/f16772dd-1048-492c-8b9d-0c6b00df22c2_buggy.java b/tmp/2dc1b82b-8998-4670-85e0-a0fe64b4a952_fixed.java
index 0a8838d..8ad948c 100644
--- a/tmp/f16772dd-1048-492c-8b9d-0c6b00df22c2_buggy.java
+++ b/tmp/2dc1b82b-8998-4670-85e0-a0fe64b4a952_fixed.java
@@ -1,61 +1,69 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
-        String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
+
+    String model = null;
+    Object deviceObject = getCacheManager().getObject(Device.class, deviceSession.getDeviceId());
+    if (deviceObject != null) {
+        model = ((Device) deviceObject).getModel();
+    }
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
-                getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000L));
             if (isPrintable(buf, length)) {
                 position.set(Position.KEY_RESULT,
                         buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
             } else {
                 position.set(Position.KEY_RESULT,
                         ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
-            if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
+        // Add position only if it's outdated is false OR has some attributes OR contains driver unique id
+        Object driverUniqueId = position.get(Position.KEY_DRIVER_UNIQUE_ID);
+        if (!position.getOutdated() || !position.getAttributes().isEmpty()
+                || (driverUniqueId != null && !driverUniqueId.toString().isEmpty())) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
