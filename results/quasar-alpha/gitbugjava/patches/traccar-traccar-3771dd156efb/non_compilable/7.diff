diff --git a/tmp/8dc4264b-c902-40f6-8c3f-1ec829e1f7d9_buggy.java b/tmp/ad4464e4-0e0c-4c4d-8427-fdd5d338a2b5_fixed.java
index 3da904d..415d78e 100644
--- a/tmp/8dc4264b-c902-40f6-8c3f-1ec829e1f7d9_buggy.java
+++ b/tmp/ad4464e4-0e0c-4c4d-8427-fdd5d338a2b5_fixed.java
@@ -1,73 +1,140 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
-        int cellCount = Integer.parseInt(values[index++]);
+    int cellCount = 0;
+    if (index < values.length && !values[index].isEmpty()) {
+        try {
+            cellCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            cellCount = 0;
+            index++;
+        }
+    } else {
+        index++;
+    }
+
     if (cellCount > 0) {
         index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+        int mcc = 0;
+        int mnc = 0;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                mcc = Integer.parseInt(values[index]);
+            } catch (NumberFormatException ignored) {
+            }
+        }
+        index++;
+        if (index < values.length && !values[index].isEmpty()) {
+            try {
+                mnc = Integer.parseInt(values[index]);
+            } catch (NumberFormatException ignored) {
+            }
+        }
+        index++;
 
         for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
-                String rssi = values[index++];
-                if (!rssi.isEmpty()) {
+            int lac = 0;
+            int cid = 0;
+            String rssi = "";
+
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    lac = Integer.parseInt(values[index]);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length && !values[index].isEmpty()) {
+                try {
+                    cid = Integer.parseInt(values[index]);
+                } catch (NumberFormatException ignored) {
+                }
+            }
+            index++;
+            if (index < values.length) {
+                rssi = values[index];
+            }
+            index++;
+
+            if (rssi != null && !rssi.isEmpty()) {
+                try {
                     network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
+                } catch (NumberFormatException ignored) {
+                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
+                }
             } else {
                 network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
             }
         }
     }
 
+    int wifiCount = 0;
     if (index < values.length && !values[index].isEmpty()) {
-            int wifiCount = Integer.parseInt(values[index++]);
+        try {
+            wifiCount = Integer.parseInt(values[index++]);
+        } catch (NumberFormatException e) {
+            wifiCount = 0;
+            index++;
+        }
+    } else {
+        index++;
+    }
 
     for (int i = 0; i < wifiCount; i++) {
         index += 1; // wifi name
-                String macAddress = values[index++];
-                String rssi = values[index++];
-                if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+        String macAddress = "";
+        String rssi = "";
+        if (index < values.length) {
+            macAddress = values[index++];
+        }
+        if (index < values.length) {
+            rssi = values[index++];
+        }
+        if (macAddress != null && !macAddress.isEmpty() && !macAddress.equals("0") && rssi != null && !rssi.isEmpty()) {
+            try {
                 network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+            } catch (NumberFormatException ignored) {
             }
         }
     }
 
-        if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
+    if ((network.getCellTowers() != null && !network.getCellTowers().isEmpty()) || 
+        (network.getWifiAccessPoints() != null && !network.getWifiAccessPoints().isEmpty())) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
