diff --git a/tmp/b3612090-cf13-40f2-933c-b93351e4bb1b_buggy.java b/tmp/90bba4d1-f84f-4376-b9bb-576f30d4f895_fixed.java
index 0583946..02027a3 100644
--- a/tmp/b3612090-cf13-40f2-933c-b93351e4bb1b_buggy.java
+++ b/tmp/90bba4d1-f84f-4376-b9bb-576f30d4f895_fixed.java
@@ -1,30 +1,37 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
 
     boolean trimLeading = false;
     boolean trimTrailing = false;
     if (normaliseWhite) {
         trimLeading = (siblingIndex == 0 && parent != null && parent.tag().isBlock()) ||
             parentNode instanceof Document;
         trimTrailing = nextSibling() == null && parent != null && parent.tag().isBlock();
 
         // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
-            if (couldSkip && isBlank) return;
+
+        // adjust couldSkip to not skip blanks before inline custom elements, fixes #1852
+        boolean nextIsElement = next instanceof Element;
+        boolean nextIsInlineCust = nextIsElement && !((Element) next).tag().isBlock(); // inline, not block
+        boolean nextIndents = nextIsElement && ((Element) next).shouldIndent(out);
+        boolean nextBlankText = next instanceof TextNode && ((TextNode) next).isBlank();
+        boolean couldSkip = ((nextIndents && !nextIsInlineCust) || nextBlankText) && isBlank;
+
+        if (couldSkip)
+            return;
 
         Node prev = previousSibling();
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
             (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
         )
             indent(accum, depth, out);
     }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
