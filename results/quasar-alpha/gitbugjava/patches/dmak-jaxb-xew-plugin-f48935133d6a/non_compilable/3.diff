diff --git a/tmp/dfce1070-8fbc-4c34-bb3c-477e6de2756f_buggy.java b/tmp/89255822-6b22-4776-84e8-328d25877c51_fixed.java
index 47a8941..767e87e 100644
--- a/tmp/dfce1070-8fbc-4c34-bb3c-477e6de2756f_buggy.java
+++ b/tmp/89255822-6b22-4776-84e8-328d25877c51_fixed.java
@@ -1,53 +1,69 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
-		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    // Obtain the current container hierarchy
+    JClassContainer parent = clazz.parentContainer();
+    JClassContainer grandParent;
+
+    // Support nested inner classes (more than 1 level), climb levels until grandparent is not a JDefinedClass
+    if (parent instanceof JDefinedClass) {
+        grandParent = ((JDefinedClass) parent).parentContainer();
+    } else {
+        // Defensive fallback (should normally not happen)
+        return;
+    }
+    // We'll update the grandparent's class map
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
-			// Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // Clear STATIC modifier after moving to package (otherwise invalid code)
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
+                // Inner class is always a local declaration
                 assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
-
                 break;
             }
         }
     }
 
+    // Remove from old parent's inner class map
+    Map<String, JDefinedClass> parentClasses = null;
+    if (parent instanceof JDefinedClass) {
+        parentClasses = getPrivateField((JDefinedClass) parent, "classes");
+    } else if (parent instanceof JPackage) {
+        parentClasses = getPrivateField((JPackage) parent, "classes");
+    }
+    if (parentClasses != null) {
+        parentClasses.remove(clazz.name());
+    }
+
+    // Rename if collision
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
+        writeSummary("\tRenaming class " + clazz.fullName() + " to " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Update the container of the class
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
