diff --git a/tmp/7cf62b5e-da07-45d3-a420-8d664822b45c_buggy.java b/tmp/680dcc07-a99b-4c55-924c-8ee458d4620d_fixed.java
index a4ebaaa..f5242fd 100644
--- a/tmp/7cf62b5e-da07-45d3-a420-8d664822b45c_buggy.java
+++ b/tmp/680dcc07-a99b-4c55-924c-8ee458d4620d_fixed.java
@@ -1,63 +1,89 @@
 private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int type) {
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     Jt600ProtocolDecoder.decodeBinaryLocation(buf, position);
     position.setValid(type != MSG_LOCATION_REPORT_BLIND);
 
     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
     position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000L);
 
     int battery = buf.readUnsignedByte();
     if (battery <= 100) {
         position.set(Position.KEY_BATTERY_LEVEL, battery);
     } else if (battery == 0xAA) {
         position.set(Position.KEY_CHARGE, true);
     }
 
     position.setNetwork(new Network(CellTower.fromCidLac(
             getConfig(), buf.readUnsignedInt(), buf.readUnsignedShort())));
 
     int product = buf.readUnsignedByte();
     int status = buf.readUnsignedShort();
     int alarm = buf.readUnsignedShort();
 
     if (product == 1 || product == 2) {
         if (BitUtil.check(alarm, 0)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
     } else if (product == 3) {
         position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
         if (BitUtil.check(alarm, 1)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
         }
         if (BitUtil.check(alarm, 2)) {
             position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
         }
         if (BitUtil.check(alarm, 3)) {
             position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
         }
     }
 
     position.set(Position.KEY_STATUS, status);
 
     while (buf.readableBytes() > 2) {
         int id = buf.readUnsignedByte();
         int length = buf.readUnsignedByte();
         switch (id) {
             case 0x02:
                 position.setAltitude(buf.readShort());
                 break;
             case 0x0C:
-                    position.set("gyro", ByteBufUtil.hexDump(buf.readSlice(6)));
+                ByteBuf gyroBuf = buf.readSlice(length);
+                if (length == 6) {
+                    byte[] gyroBytes = new byte[length / 2];
+                    boolean valid = true;
+                    for (int i = 0; i < 3; i++) {
+                        short value = gyroBuf.readShort();
+                        gyroBytes[i] = (byte) (value >> 8);
+                        if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
+                            valid = false;
+                        }
+                    }
+                    if (valid) {
+                        // convert the short to 3 signed bytes
+                        int[] gyro = new int[3];
+                        gyroBuf.readerIndex(gyroBuf.readerIndex() - 6);
+                        for (int i = 0; i < 3; i++) {
+                            short value = gyroBuf.readShort();
+                            gyro[i] = value;
+                        }
+                        position.set("tilt", String.format("[%d,%d,%d]", gyro[0], gyro[1], gyro[2]));
+                    } else {
+                        gyroBuf.readerIndex(gyroBuf.readerIndex() - 6);
+                        position.set("gyro", ByteBufUtil.hexDump(gyroBuf.readSlice(6)));
+                    }
+                } else {
+                    position.set("gyro", ByteBufUtil.hexDump(gyroBuf));
+                }
                 break;
             default:
                 buf.skipBytes(length);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
