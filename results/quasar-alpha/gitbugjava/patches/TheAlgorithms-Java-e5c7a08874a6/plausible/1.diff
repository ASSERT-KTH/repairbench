diff --git a/tmp/3d2c3be6-6307-4cc4-bc6f-4dc100edd587_buggy.java b/tmp/71990b04-61d0-4a40-bd06-8f20a6e26ab8_fixed.java
index 2444d12..4b55310 100644
--- a/tmp/3d2c3be6-6307-4cc4-bc6f-4dc100edd587_buggy.java
+++ b/tmp/71990b04-61d0-4a40-bd06-8f20a6e26ab8_fixed.java
@@ -1,29 +1,37 @@
 // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
     Stack<Integer> s = new Stack<Integer>();
     Scanner tokens = new Scanner(exp);
 
+    try {
         while (tokens.hasNext()) {
             if (tokens.hasNextInt()) {
                 s.push(tokens.nextInt()); // If int then push to stack
             } else { // else pop top two values and perform the operation
+                String op = tokens.next();
+
+                if (s.size() < 2) {
+                    throw new IllegalArgumentException("exp is not a proper postfix expression.");
+                }
+
                 int num2 = s.pop();
                 int num1 = s.pop();
-                String op = tokens.next();
 
                 switch (op) {
                     case "+" -> s.push(num1 + num2);
                     case "-" -> s.push(num1 - num2);
                     case "*" -> s.push(num1 * num2);
                     case "/" -> s.push(num1 / num2);
                     default -> throw new IllegalArgumentException("exp contains an unknown operation.");
                 }
                 //  "+", "-", "*", "/"
             }
         }
-        tokens.close();
         if (s.size() != 1) {
             throw new IllegalArgumentException("exp is not a proper postfix expression.");
         }
         return s.pop();
+    } finally {
+        tokens.close();
+    }
 }
\ No newline at end of file
