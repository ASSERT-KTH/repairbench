diff --git a/tmp/2bdfd347-3a9c-4b25-8ee1-22de459afc41_buggy.java b/tmp/7371133a-f79d-4fb7-8ed1-133d413ad5ed_fixed.java
index ad77f15..63d244c 100644
--- a/tmp/2bdfd347-3a9c-4b25-8ee1-22de459afc41_buggy.java
+++ b/tmp/7371133a-f79d-4fb7-8ed1-133d413ad5ed_fixed.java
@@ -1,112 +1,206 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
     int index = 0;
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
         case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+            position.setValid(values.length > index && values[index++].equals("A"));
+            position.set(Position.KEY_SATELLITES, values.length > index ? Integer.parseInt(values[index++]) : null);
+
+            if (values.length > index) {
+                if (!values[index].isEmpty()) {
                     position.setLatitude(Double.parseDouble(values[index].substring(1)));
                     if (values[index++].charAt(0) == 'S') {
                         position.setLatitude(-position.getLatitude());
                     }
+                } else {
+                    index++;
+                }
+            }
+
+            if (values.length > index) {
+                if (!values[index].isEmpty()) {
                     position.setLongitude(Double.parseDouble(values[index].substring(1)));
                     if (values[index++].charAt(0) == 'W') {
                         position.setLongitude(-position.getLongitude());
                     }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                } else {
+                    index++;
                 }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+
+            if (values.length > index) {
+                String speedStr = values[index++];
+                if (!speedStr.isEmpty()) {
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
                 }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
             }
+
+            if (values.length > index) {
+                String courseStr = values[index++];
+                if (!courseStr.isEmpty()) {
+                    position.setCourse(Integer.parseInt(courseStr));
+                }
+            }
+
+            if (values.length > index) {
+                String altitudeStr = values[index++];
+                if (!altitudeStr.isEmpty()) {
+                    position.setAltitude(Integer.parseInt(altitudeStr));
+                }
+            }
+
+            if (values.length > index) {
+                String hdopStr = values[index++];
+                if (!hdopStr.isEmpty()) {
+                    position.set(Position.KEY_HDOP, Double.parseDouble(hdopStr));
+                }
+            }
+
+            if (values.length > index) {
+                String vdopStr = values[index++];
+                if (!vdopStr.isEmpty()) {
+                    position.set(Position.KEY_VDOP, Double.parseDouble(vdopStr));
+                }
+            }
+
             break;
         case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
+            index += 2; // skip registration status and signal strength
+            if (values.length - index >= 5) {
                 position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+                        Integer.parseInt(values[index++]),
+                        Integer.parseInt(values[index++]),
+                        Integer.parseInt(values[index++], 16),
+                        Integer.parseInt(values[index++], 16),
+                        Integer.parseInt(values[index++])
+                )));
+            }
             break;
         case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+            if (values.length > index) {
+                String odoStr = values[index++];
+                if (!odoStr.isEmpty()) {
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(odoStr));
                 }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
+            }
+            if (values.length > index) {
+                String hoursStr = values[index++];
+                if (!hoursStr.isEmpty()) {
+                    String[] hours = hoursStr.split("-");
+                    int totalSeconds = Integer.parseInt(hours[0]) * 3600
                             + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0);
+                    position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                }
             }
             break;
         case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String powerStr = values[index++];
+                if (!powerStr.isEmpty()) {
+                    position.set(Position.KEY_POWER, Double.parseDouble(powerStr));
                 }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+            if (values.length > index) {
+                String battStr = values[index++];
+                if (!battStr.isEmpty()) {
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(battStr));
+                }
+            }
+            if (values.length > index) {
+                String adc1 = values[index++];
+                if (!adc1.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(adc1));
+                }
+            }
+            if (values.length > index) {
+                String adc2 = values[index++];
+                if (!adc2.isEmpty()) {
+                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(adc2));
+                }
             }
             break;
         case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+            if (values.length > index) {
+                String statusStr = values[index++];
+                if (!statusStr.isEmpty()) {
+                    position.set(Position.KEY_STATUS, Integer.parseInt(statusStr, 16));
+                }
+            }
+            if (values.length > index) {
+                String ioStr = values[index++];
+                if (!ioStr.isEmpty()) {
+                    int io = Integer.parseInt(ioStr, 16);
                     position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                     position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                     position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                     position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                     position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                     position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                     position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                     position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                 }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+            }
+
+            StringBuilder geofence = new StringBuilder();
+            int gfCount = 2;
+            for (int i = 0; i < gfCount && values.length > index; i++) {
+                geofence.append(values[index++]);
+            }
+            position.set(Position.KEY_GEOFENCE, geofence.toString());
+
+            if (values.length > index) {
                 position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+            }
+
+            if (values.length > index) {
                 position.set("packetType", values[index++]);
             }
+
             break;
         case "ETD":
+            if (values.length > index) {
                 position.set("eventData", values[index++]);
+            }
             break;
         case "OBD":
+            if (values.length > index) {
                 position.set("obd", values[index++]);
+            }
             break;
         case "TAG":
+            if (values.length > index) {
                 position.set("tagData", values[index++]);
+            }
             break;
         case "IWD":
-                while (index < values.length) {
+            while (values.length > index + 1) {
                 int sensorIndex = Integer.parseInt(values[index++]);
                 int dataType = Integer.parseInt(values[index++]);
                 if (dataType == 0) {
+                    if (values.length > index) {
                         position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                    }
                 } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                    index++; // skip sensor serial number
+                    if (values.length > index) {
+                        String tempStr = values[index++];
+                        if (!tempStr.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempStr));
+                        }
+                    }
                 }
             }
             break;
         default:
             break;
     }
 }
\ No newline at end of file
