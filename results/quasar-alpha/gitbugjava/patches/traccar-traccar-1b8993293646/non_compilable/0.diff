diff --git a/tmp/9640a30f-25f3-4f79-b737-7450983709c7_buggy.java b/tmp/9322be5f-d3bb-4192-bf1c-3f6437b79be0_fixed.java
index 7374e5f..d5358fe 100644
--- a/tmp/9640a30f-25f3-4f79-b737-7450983709c7_buggy.java
+++ b/tmp/9322be5f-d3bb-4192-bf1c-3f6437b79be0_fixed.java
@@ -1,61 +1,80 @@
 private Object decodeLocationNew(
         Channel channel, SocketAddress remoteAddress, String sentence) {
 
     Parser parser = new Parser(PATTERN_NEW, sentence);
     if (!parser.matches()) {
         return null;
     }
 
     String imei = parser.next();
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
 
     String index = parser.next();
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
 
     position.setDeviceTime(parser.nextDateTime());
 
     Network network = new Network();
     network.addCellTower(CellTower.from(
             parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
     position.set(Position.KEY_BATTERY, parser.nextDouble());
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
     position.set(Position.KEY_STATUS, parser.nextHexInt());
 
     if (parser.hasNext(5)) {
 
         position.setValid(parser.next().equals("A"));
         position.setFixTime(position.getDeviceTime());
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
 
     } else {
 
-            String[] points = parser.next().split("\\|");
+        position.setValid(false); // Explicitly mark invalid since no fix info present
+
+        // Do not consume the next() string yet; it may contain satellite info in cellular+wifi case
+        String pointData = parser.next();
+
+        // Attempt to extract satellites count embedded before the wifi data
+        // Split by '|' as that's wifi delimiter
+        String[] parts = pointData.split("\\|", 2);
+        if (parts.length > 1 && parts[0].matches("\\d+")) {
+            try {
+                int satellites = Integer.parseInt(parts[0]);
+                position.set(Position.KEY_SATELLITES, satellites);
+            } catch (NumberFormatException e) {
+                // Ignore if not integer
+            }
+        }
+
+        // Now parse wifi points, they are separated by '|' in the full string
+        String[] points = pointData.split("\\|");
         for (String point : points) {
             String[] wifi = point.split(":");
-                String mac = wifi[0].replaceAll("(..)", "$1:");
+            if (wifi.length == 2) {
+                String mac = wifi[0].replaceAll("(..)", "$1:"); // mac with colons
                 network.addWifiAccessPoint(WifiAccessPoint.from(
                         mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
             }
-
+        }
     }
 
     position.setNetwork(network);
 
     DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
     String response = index + ",A03," + dateFormat.format(new Date());
     sendResponse(channel, remoteAddress, imei, response);
 
     return position;
 }
\ No newline at end of file
