diff --git a/tmp/662e1327-c463-4a1c-936f-3cce4b38ca0c_buggy.java b/tmp/455dd43d-98d9-4a32-ab5e-bf99cf1bfae5_fixed.java
index d87dd79..7b0aea8 100644
--- a/tmp/662e1327-c463-4a1c-936f-3cce4b38ca0c_buggy.java
+++ b/tmp/455dd43d-98d9-4a32-ab5e-bf99cf1bfae5_fixed.java
@@ -1,47 +1,79 @@
 @Override
 protected Object decode(
         ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
+    if (!buf.isReadable()) {
+        return null;
+    }
+
+    int startIndex = -1;
     int endIndex = -1;
-        for (int i = buf.writerIndex() - 1; i >= buf.readerIndex(); i--) {
+
+    // Find start delimiter '['
+    for (int i = buf.readerIndex(); i < buf.writerIndex(); i++) {
+        if (buf.getByte(i) == '[') {
+            startIndex = i;
+            break;
+        }
+    }
+
+    if (startIndex < 0) {
+        // No start delimiter found, discard all data
+        buf.skipBytes(buf.readableBytes());
+        return null;
+    }
+
+    // Find end delimiter ']'
+    for (int i = startIndex + 1; i < buf.writerIndex(); i++) {
         if (buf.getByte(i) == ']') {
-                endIndex = i + 1;
+            endIndex = i + 1; // include the ']'
             break;
         }
     }
 
-        if (endIndex > 0) {
+    if (endIndex < 0) {
+        // No end delimiter yet, wait for more data
+        return null;
+    }
+
+    // Skip bytes before start of message
+    buf.readerIndex(startIndex);
+    ByteBuf data = buf.readSlice(endIndex - startIndex);
+
     ByteBuf frame = Unpooled.buffer();
-            while (buf.readerIndex() < endIndex) {
-                byte b1 = buf.readByte();
+
+    while (data.isReadable()) {
+        byte b1 = data.readByte();
         if (b1 == '}') {
-                    byte b2 = buf.readByte();
+            // escape sequence
+            if (!data.isReadable()) {
+                break;
+            }
+            byte b2 = data.readByte();
             switch (b2) {
                 case 0x01:
                     frame.writeByte('}');
                     break;
                 case 0x02:
                     frame.writeByte('[');
                     break;
                 case 0x03:
                     frame.writeByte(']');
                     break;
                 case 0x04:
                     frame.writeByte(',');
                     break;
                 case 0x05:
                     frame.writeByte('*');
                     break;
                 default:
                     throw new IllegalArgumentException(String.format(
-                                    "unexpected byte at %d: 0x%02x", buf.readerIndex() - 1, b2));
+                            "unexpected byte in escape sequence: 0x%02x", b2));
             }
         } else {
             frame.writeByte(b1);
         }
     }
+
     return frame;
 }
\ No newline at end of file
-
-        return null;
-    }
