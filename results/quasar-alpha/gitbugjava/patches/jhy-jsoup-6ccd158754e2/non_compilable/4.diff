diff --git a/tmp/46df0183-9d68-416a-a7f7-08fa49427a51_buggy.java b/tmp/d5f07983-74c0-474c-87be-fbe71606b9a0_fixed.java
index 23f078d..f2ae076 100644
--- a/tmp/46df0183-9d68-416a-a7f7-08fa49427a51_buggy.java
+++ b/tmp/d5f07983-74c0-474c-87be-fbe71606b9a0_fixed.java
@@ -1,14 +1,17 @@
 private static void appendToAscii(String s, boolean spaceAsPlus, StringBuilder sb) throws UnsupportedEncodingException {
-        // minimal normalization of Unicode -> Ascii, and space normal. Existing escapes are left as-is.
-        for (int i = 0; i < s.length(); i++) {
+    for (int i = 0; i < s.length(); ) {
         int c = s.codePointAt(i);
         if (c == ' ') {
             sb.append(spaceAsPlus ? '+' : "%20");
-            } else if (c > 127) { // out of ascii range
-                sb.append(URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name()));
-                // ^^ is a bit heavy-handed - if perf critical, we could optimize
+        } else if (c > 127) {
+            String encoded = URLEncoder.encode(new String(Character.toChars(c)), UTF_8.name());
+            // URL-encode may encode the char plus add a trailing '?' if given a single supplementary char;
+            // so trim any trailing '?' per codepoint
+            if (encoded.endsWith("?")) encoded = encoded.substring(0, encoded.length() - 1);
+            sb.append(encoded);
         } else {
             sb.append((char) c);
         }
+        i += Character.charCount(c);
     }
 }
\ No newline at end of file
