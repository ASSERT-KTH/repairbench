diff --git a/tmp/139c2635-c70f-4202-a66a-8059e643a451_buggy.java b/tmp/c9c72411-c51c-4c44-a194-fd428b554608_fixed.java
index f506479..2eaac7e 100644
--- a/tmp/139c2635-c70f-4202-a66a-8059e643a451_buggy.java
+++ b/tmp/c9c72411-c51c-4c44-a194-fd428b554608_fixed.java
@@ -1,64 +1,113 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
     final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
     final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
 
     processor.consume(groupArg.getIdentity(), arguments);
 
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    boolean foundOne = false;
     while (!arguments.isEmpty())
     {
         final NameValuePair argument = arguments.peekFirst();
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
         if (argument.name == null)
         {
             throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
         }
 
         final DslArg arg = argsByName.get(argument.name.toLowerCase());
         if (arg == null)
         {
             break;
         }
 
         final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
         if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
         {
             break;
         }
 
         checkValidValue(arg, argument.value);
         argValues.add(argument.value);
         arguments.pollFirst();
+        foundOne = true;
+    }
+
+    // after consuming explicitly named group params, now handle multi-values with default separator attached in last explicitly named param (if allowed)
+    if (!foundOne)
+    {
+        // nothing more matched, finish
+    }
+    else
+    {
+        // find params in group that allow multiple values
+        for (SimpleDslArg dslArg : groupArg.getOtherArgs())
+        {
+            if (dslArg.isAllowMultipleValues())
+            {
+                final List<String> existingValues = valuesByArg.get(dslArg);
+                if (existingValues != null && !existingValues.isEmpty())
+                {
+                    if (existingValues.size() == 1)
+                    {
+                        List<String> split = splitCommaSeparated(existingValues.get(0));
+                        // if split yields more than 1 element, replace existing with split
+                        if (split.size() > 1)
+                        {
+                            existingValues.clear();
+                            for (String s : split)
+                            {
+                                checkValidValue(dslArg, s);
+                                existingValues.add(s);
+                            }
+                        }
+                    }
+                    else
+                    {
+                        // multi values already, nothing to do
+                    }
+                }
+            }
+        }
     }
 
-            // TODO: this whole thing here is a bit hacky!
     final Map<String, List<String>> valuesByName = new HashMap<>();
     for (final SimpleDslArg simpleDslArg : argsByName.values())
     {
         final SimpleDslParam param = processor.collect(simpleDslArg);
         if (param.hasValue())
         {
             valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
         }
     }
 
     final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
     dslArgs[0] = groupArg.getIdentity();
     System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
     groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
 }
+
+private List<String> splitCommaSeparated(String s)
+{
+    List<String> result = new ArrayList<>();
+    for (String v : s.split(","))
+    {
+        result.add(v.trim());
+    }
+    return result;
+}
\ No newline at end of file
