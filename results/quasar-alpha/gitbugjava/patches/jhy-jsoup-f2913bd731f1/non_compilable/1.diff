diff --git a/tmp/2ae9b34e-7ba2-4b0f-a0ca-169974b277ab_buggy.java b/tmp/b1cfcfe4-f870-460d-9eec-86c9df6b6aca_fixed.java
index 016a7f6..a9a74e6 100644
--- a/tmp/2ae9b34e-7ba2-4b0f-a0ca-169974b277ab_buggy.java
+++ b/tmp/b1cfcfe4-f870-460d-9eec-86c9df6b6aca_fixed.java
@@ -1,29 +1,37 @@
 void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
     final boolean prettyPrint = out.prettyPrint();
     final Element parent = parentNode instanceof Element ? ((Element) parentNode) : null;
     final boolean normaliseWhite = prettyPrint && !Element.preserveWhitespace(parentNode);
     final boolean trimLikeBlock = parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock());
     boolean trimLeading = false, trimTrailing = false;
 
     if (normaliseWhite) {
         trimLeading = (trimLikeBlock && siblingIndex == 0) || parentNode instanceof Document;
         trimTrailing = trimLikeBlock && nextSibling() == null;
 
-            // if this text is just whitespace, and the next node will cause an indent, skip this text:
         Node next = nextSibling();
         boolean isBlank = isBlank();
-            boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out)) // next will indent
-                || (next instanceof TextNode && (((TextNode) next).isBlank())); // next is blank text, from re-parenting
+        boolean couldSkip = (next instanceof Element && ((Element) next).shouldIndent(out))
+            || (next instanceof TextNode && (((TextNode) next).isBlank()));
         if (couldSkip && isBlank) return;
 
         Node prev = previousSibling();
+        boolean lastInParentIsBlock = (parent != null && (parent.tag().isBlock() || parent.tag().formatAsBlock()))
+                && (siblingIndex > 0 && prev != null
+                    && (prev instanceof Element) && (((Element) prev).tag().isBlock() || ((Element) prev).tag().formatAsBlock()));
+
         if (
             (siblingIndex == 0 && parent != null && parent.tag().formatAsBlock() && !isBlank) ||
             (out.outline() && siblingNodes().size() > 0 && !isBlank) ||
-                (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br")) // special case wrap on inline <br> - doesn't make sense as a block tag
-            )
+            (siblingIndex > 0 && prev instanceof Element && ((Element) prev).normalName().equals("br"))
+        ) {
             indent(accum, depth, out);
         }
+        // Avoid inserting extra space before inline elements immediately following blocks
+        else if (lastInParentIsBlock && !isBlank) {
+            // do not append indent or space
+        }
+    }
 
     Entities.escape(accum, coreValue(), out, false, normaliseWhite, trimLeading, trimTrailing);
 }
\ No newline at end of file
