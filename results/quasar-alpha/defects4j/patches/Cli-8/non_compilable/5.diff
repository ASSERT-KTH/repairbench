diff --git a/tmp/c58c36b9-9b37-4fc7-bf20-d81ac4de80c2_buggy.java b/tmp/9dec0db3-ee54-45f6-898f-0f680cdc02dc_fixed.java
index 8e93a5e..1a0876a 100644
--- a/tmp/c58c36b9-9b37-4fc7-bf20-d81ac4de80c2_buggy.java
+++ b/tmp/9dec0db3-ee54-45f6-898f-0f680cdc02dc_fixed.java
@@ -1,43 +1,35 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
+    StringTokenizer tokens = new StringTokenizer(text, defaultNewLine, true);
+    while (tokens.hasMoreTokens())
     {
-            sb.append(rtrim(text));
-
-            return sb;
+        String line = tokens.nextToken();
+        if (line.equals(defaultNewLine))
+        {
+            sb.append(defaultNewLine);
+            continue;
         }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
 
+        int pos = 0;
         while (true)
         {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            int wrapPos = findWrapPos(line, width, pos);
 
-            if (pos == -1)
+            if (wrapPos == -1)
             {
-                sb.append(text);
+                sb.append(rtrim(line.substring(pos)));
+                break;
+            }
+            else
+            {
+                sb.append(rtrim(line.substring(pos, wrapPos)));
+                sb.append(defaultNewLine);
+                line = createPadding(nextLineTabStop) + line.substring(wrapPos).trim();
+                pos = 0;
+            }
+        }
+    }
 
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
