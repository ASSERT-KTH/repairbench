diff --git a/tmp/cfda0e26-8256-4d31-895b-80215f45dd18_buggy.java b/tmp/351d5f92-b7bc-4d88-9f8e-68faa46b76c6_fixed.java
index 8e93a5e..525954e 100644
--- a/tmp/cfda0e26-8256-4d31-895b-80215f45dd18_buggy.java
+++ b/tmp/351d5f92-b7bc-4d88-9f8e-68faa46b76c6_fixed.java
@@ -1,43 +1,46 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
 
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         // all following lines must be padded with nextLineTabStop space 
         // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
             text = padding + text.substring(pos).trim();
+            
+            // Handle embedded newlines
+            int newlinePos = text.indexOf(defaultNewLine);
+            if (newlinePos != -1 && newlinePos <= width) {
+                sb.append(text.substring(0, newlinePos)).append(defaultNewLine);
+                text = text.substring(newlinePos + defaultNewLine.length());
+                pos = findWrapPos(text, width, nextLineTabStop);
+                if (pos == -1) {
+                    sb.append(text);
+                    return sb;
+                }
+                continue;
+            }
+
             pos = findWrapPos(text, width, nextLineTabStop);
 
             if (pos == -1)
             {
                 sb.append(text);
 
                 return sb;
             }
 
             sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
         }
     }
\ No newline at end of file
