diff --git a/tmp/c06ff0e8-3db8-4cea-8722-bb741bd72fe2_buggy.java b/tmp/a56eb689-b234-46ef-b9fc-ff97532d62cd_fixed.java
index 8e93a5e..a92e6ac 100644
--- a/tmp/c06ff0e8-3db8-4cea-8722-bb741bd72fe2_buggy.java
+++ b/tmp/a56eb689-b234-46ef-b9fc-ff97532d62cd_fixed.java
@@ -1,43 +1,66 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
+    if (text == null) {
         return sb;
     }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+    int start = 0;
+    while (true)
+    {
+        int newline = text.indexOf('\n', start);
+        String line;
+        if (newline != -1)
+        {
+            line = text.substring(start, newline);
+        }
+        else
+        {
+            line = text.substring(start);
+        }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+        int pos = findWrapPos(line, width, 0);
+
+        if (pos == -1)
+        {
+            sb.append(rtrim(line));
+        }
+        else
+        {
+            sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+
+            // All following lines must be padded with nextLineTabStop spaces
             final String padding = createPadding(nextLineTabStop);
 
+            line = padding + line.substring(pos).trim();
+
             while (true)
             {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+                pos = findWrapPos(line, width, nextLineTabStop);
 
                 if (pos == -1)
                 {
-                sb.append(text);
+                    sb.append(line);
+                    break;
+                }
 
+                sb.append(rtrim(line.substring(0, pos))).append(defaultNewLine);
+                line = padding + line.substring(pos).trim();
+            }
+        }
+
+        if (newline != -1)
+        {
+            sb.append(defaultNewLine);
+            start = newline + 1;
+            if (start >= text.length())
+            {
+                break;
+            }
+        }
+        else
+        {
+            break;
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
