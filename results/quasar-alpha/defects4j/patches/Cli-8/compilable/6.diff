diff --git a/tmp/518bfb20-466f-4e52-8a0b-e0c57e7282af_buggy.java b/tmp/868bb98a-a9b3-43a0-9714-9cdd5ce75c4d_fixed.java
index 8e93a5e..91f6df6 100644
--- a/tmp/518bfb20-466f-4e52-8a0b-e0c57e7282af_buggy.java
+++ b/tmp/868bb98a-a9b3-43a0-9714-9cdd5ce75c4d_fixed.java
@@ -1,43 +1,39 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
+    // all following lines must be padded with nextLineTabStop space characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        // remaining text after current line
+        text = text.substring(pos).trim();
+
+        // if the remaining text starts already padded due to newlines, preserve it
+        if (nextLineTabStop > 0)
+        {
+            text = padding + text;
+        }
+
         pos = findWrapPos(text, width, nextLineTabStop);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+
+        // prepare for the next iteration
     }
 }
\ No newline at end of file
