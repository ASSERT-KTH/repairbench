diff --git a/tmp/8bad4566-7e76-461f-8221-4733b92e642c_buggy.java b/tmp/ac6d8c5d-7d6f-465a-a1ca-c604280d3c52_fixed.java
index 8e93a5e..5dd28cb 100644
--- a/tmp/8bad4566-7e76-461f-8221-4733b92e642c_buggy.java
+++ b/tmp/ac6d8c5d-7d6f-465a-a1ca-c604280d3c52_fixed.java
@@ -1,43 +1,41 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
-        int pos = findWrapPos(text, width, 0);
+    int lineStart = 0;
+    while (true) {
+        // check for pre-existing newline
+        int newline = text.indexOf('\n', lineStart);
+        int wrapPos = findWrapPos(text, width, lineStart);
 
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
+        if (newline != -1 && (newline <= wrapPos || wrapPos == -1)) {
+            // newline occurs before wrapPos (or no wrap needed)
+            sb.append(text.substring(lineStart, newline));
+            sb.append(defaultNewLine);
+            lineStart = newline + 1;
+            if (lineStart >= text.length()) {
+                break;
             }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+            // pad subsequent lines
+            sb.append(createPadding(nextLineTabStop));
+            continue;
+        }
+        if (wrapPos == -1) {
+            sb.append(text.substring(lineStart));
+            break;
+        }
+        sb.append(rtrim(text.substring(lineStart, wrapPos)));
+        sb.append(defaultNewLine);
 
-            if (pos == -1)
-            {
-                sb.append(text);
+        lineStart = wrapPos;
 
-                return sb;
+        // skip leading spaces after wrap position
+        while (lineStart < text.length() && text.charAt(lineStart) == ' ') {
+            lineStart++;
         }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        // pad all subsequent lines
+        sb.append(createPadding(nextLineTabStop));
     }
+    return sb;
 }
\ No newline at end of file
