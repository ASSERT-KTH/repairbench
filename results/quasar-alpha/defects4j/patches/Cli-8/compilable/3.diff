diff --git a/tmp/5e6048ca-1f46-4ce2-a698-82ffd55491b0_buggy.java b/tmp/9be28680-ab72-4a19-b305-915faed99a04_fixed.java
index 8e93a5e..31d9990 100644
--- a/tmp/5e6048ca-1f46-4ce2-a698-82ffd55491b0_buggy.java
+++ b/tmp/9be28680-ab72-4a19-b305-915faed99a04_fixed.java
@@ -1,43 +1,69 @@
-    /**
-     * <p>Render the specified text and return the rendered Options
-     * in a StringBuffer.</p>
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, nextLineTabStop);
+        text = padding + rtrim(text.substring(pos).trim());
         
+        // if the text to be wrapped contains newlines, handle each line separately
+        int newLineIndex = text.indexOf(defaultNewLine);
+        if (newLineIndex != -1)
+        {
+            // render text up to the newline as a separate wrap segment
+            String lineSegment = text.substring(0, newLineIndex);
+            pos = findWrapPos(lineSegment, width, nextLineTabStop);
+            if (pos == -1)
+            {
+                sb.append(lineSegment).append(defaultNewLine);
+            }
+            else
+            {
+                sb.append(rtrim(lineSegment.substring(0, pos))).append(defaultNewLine);
+                text = padding + rtrim(lineSegment.substring(pos).trim()) + text.substring(newLineIndex);
+                continue;
+            }
+            // move to the rest after newline
+            text = text.substring(newLineIndex + defaultNewLine.length());
+            if (text.length() == 0)
+            {
+                break;
+            }
+            else
+            {
+                sb.append(padding);
+                pos = findWrapPos(text, width, nextLineTabStop);
                 if (pos == -1)
                 {
                     sb.append(text);
-
+                    break;
+                }
+                sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+                continue;
+            }
+        }  
+        else
+        {
+            pos = findWrapPos(text, width, nextLineTabStop);
+            if (pos == -1)
+            {
+                sb.append(text);
+                break;
+            }
+            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        }
+    }
     return sb;
 }
\ No newline at end of file
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
