diff --git a/tmp/d0b893d7-d0e6-469e-99d3-e48285c455f7_buggy.java b/tmp/b95e00e8-fb1c-4680-b626-c6159872d105_fixed.java
index 6b160ef..5675797 100644
--- a/tmp/d0b893d7-d0e6-469e-99d3-e48285c455f7_buggy.java
+++ b/tmp/b95e00e8-fb1c-4680-b626-c6159872d105_fixed.java
@@ -1,68 +1,81 @@
 /**
  * Create an archive input stream from an input stream, autodetecting
  * the archive type from the first few bytes of the stream. The InputStream
  * must support marks, like BufferedInputStream.
  * 
  * @param in the input stream
  * @return the archive input stream
  * @throws ArchiveException if the archiver name is not known
  * @throws IllegalArgumentException if the stream is null or does not support mark
  */
 public ArchiveInputStream createArchiveInputStream(final InputStream in)
         throws ArchiveException {
     if (in == null) {
         throw new IllegalArgumentException("Stream must not be null.");
     }
 
     if (!in.markSupported()) {
         throw new IllegalArgumentException("Mark is not supported.");
     }
 
     final byte[] signature = new byte[12];
     in.mark(signature.length);
     try {
         int signatureLength = in.read(signature);
         in.reset();
+        if (signatureLength > 0) {
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
                 return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
                 return new CpioArchiveInputStream(in);
             }
+        }
 
         // Dump needs a bigger buffer to check the signature;
         final byte[] dumpsig = new byte[32];
         in.mark(dumpsig.length);
         signatureLength = in.read(dumpsig);
         in.reset();
+        if (signatureLength > 0) {
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
                 return new DumpArchiveInputStream(in);
             }
+        }
 
         // Tar needs an even bigger buffer to check the signature; read the first block
         final byte[] tarheader = new byte[512];
         in.mark(tarheader.length);
         signatureLength = in.read(tarheader);
         in.reset();
+        boolean tarHit = false;
+        if (signatureLength == tarheader.length) {
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
+                tarHit = true;
+            } else {
                 // COMPRESS-117 - improve auto-recognition
                 try {
                     TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
+                    ArchiveEntry ae = tais.getNextEntry();
+                    if (ae != null) {
+                        tarHit = true;
+                    }
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well as IOException
                     // autodetection, simply not a TAR
                     // ignored
                 }
+            }
+        }
+        if (tarHit) {
+            return new TarArchiveInputStream(in);
+        }
     } catch (IOException e) {
         throw new ArchiveException("Could not use reset and mark operations.", e);
     }
 
     throw new ArchiveException("No Archiver found for the stream signature");
 }
\ No newline at end of file
