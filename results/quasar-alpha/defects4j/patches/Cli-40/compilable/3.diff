diff --git a/tmp/ac1f8a79-8667-4205-9871-ec3216eed3e4_buggy.java b/tmp/a5e9cecc-0e49-4325-b39a-89d468b71192_fixed.java
index a7d0787..86a6f9f 100644
--- a/tmp/ac1f8a79-8667-4205-9871-ec3216eed3e4_buggy.java
+++ b/tmp/a5e9cecc-0e49-4325-b39a-89d468b71192_fixed.java
@@ -1,54 +1,76 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
+    try {
         if (PatternOptionBuilder.STRING_VALUE == clazz)
         {
             return (T) str;
         }
         else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
         {
             return (T) createObject(str);
         }
         else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
         {
             return (T) createNumber(str);
         }
         else if (PatternOptionBuilder.DATE_VALUE == clazz)
         {
             return (T) createDate(str);
         }
         else if (PatternOptionBuilder.CLASS_VALUE == clazz)
         {
             return (T) createClass(str);
         }
         else if (PatternOptionBuilder.FILE_VALUE == clazz)
         {
             return (T) createFile(str);
         }
         else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
         {
             return (T) openFile(str);
         }
         else if (PatternOptionBuilder.FILES_VALUE == clazz)
         {
             return (T) createFiles(str);
         }
         else if (PatternOptionBuilder.URL_VALUE == clazz)
         {
             return (T) createURL(str);
         }
+        else if (clazz != null && Number.class.isAssignableFrom(clazz))
+        {
+            // attempt to create a Number instance compatible with clazz
+            Number number = createNumber(str);
+            if (clazz.isInstance(number)) {
+                return (T) number;
+            } else {
+                // try converting to specific subclass
+                if (clazz == Integer.class) {
+                    return (T) Integer.valueOf(number.intValue());
+                } else if (clazz == Long.class) {
+                    return (T) Long.valueOf(number.longValue());
+                } else if (clazz == Short.class) {
+                    return (T) Short.valueOf(number.shortValue());
+                } else if (clazz == Byte.class) {
+                    return (T) Byte.valueOf(number.byteValue());
+                } else if (clazz == Float.class) {
+                    return (T) Float.valueOf(number.floatValue());
+                } else if (clazz == Double.class) {
+                    return (T) Double.valueOf(number.doubleValue());
+                } else {
+                    throw new ParseException("Unsupported number type: " + clazz);
+                }
+            }
+        }
         else
         {
             return null;
         }
+    } catch (Exception e) {
+        if (e instanceof ParseException) {
+            throw (ParseException) e;
+        }
+        throw new ParseException("Unable to create value: " + str);
+    }
 }
\ No newline at end of file
