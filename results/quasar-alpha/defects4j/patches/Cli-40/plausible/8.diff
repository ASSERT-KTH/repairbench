diff --git a/tmp/daa59a2c-9bed-4c87-a628-35dfdbac482b_buggy.java b/tmp/33c4cef4-6e8e-4350-8d05-0c720397732d_fixed.java
index a7d0787..73d7ae4 100644
--- a/tmp/daa59a2c-9bed-4c87-a628-35dfdbac482b_buggy.java
+++ b/tmp/33c4cef4-6e8e-4350-8d05-0c720397732d_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
+    else {
+        // attempt to handle Number subclasses such as Integer, Long, Double, etc.
+        if (Number.class.isAssignableFrom(clazz))
         {
-            return null;
+            try {
+                Number n = createNumber(str);
+                if (clazz == Integer.class) {
+                    return (T) Integer.valueOf(n.intValue());
+                } else if (clazz == Long.class) {
+                    return (T) Long.valueOf(n.longValue());
+                } else if (clazz == Short.class) {
+                    return (T) Short.valueOf(n.shortValue());
+                } else if (clazz == Byte.class) {
+                    return (T) Byte.valueOf(n.byteValue());
+                } else if (clazz == Double.class) {
+                    return (T) Double.valueOf(n.doubleValue());
+                } else if (clazz == Float.class) {
+                    return (T) Float.valueOf(n.floatValue());
+                } else {
+                    throw new ParseException("Unsupported numeric type: " + clazz);
+                }
+            } catch (Exception e) {
+                throw new ParseException("Failed to create number: " + e.getMessage());
+            }
+        }
+        // for unsupported types, throw ParseException
+        throw new ParseException("Unsupported type: " + clazz);
     }
 }
\ No newline at end of file
