diff --git a/tmp/fc2c8ced-e001-4b8c-bbeb-68914108bc9e_buggy.java b/tmp/95ebaba0-edcd-4698-b2fe-53d43fe2a11d_fixed.java
index a7d0787..2472d83 100644
--- a/tmp/fc2c8ced-e001-4b8c-bbeb-68914108bc9e_buggy.java
+++ b/tmp/95ebaba0-edcd-4698-b2fe-53d43fe2a11d_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
-        {
-            return null;
+    else {
+        // If clazz is an unknown type but is a subclass of Number (e.g., Integer/Double/etc), handle accordingly
+        if (Number.class.isAssignableFrom(clazz)) {
+            try {
+                Number number = createNumber(str);
+
+                if (clazz == Integer.class) {
+                    return (T) Integer.valueOf(number.intValue());
+                } else if (clazz == Long.class) {
+                    return (T) Long.valueOf(number.longValue());
+                } else if (clazz == Float.class) {
+                    return (T) Float.valueOf(number.floatValue());
+                } else if (clazz == Double.class) {
+                    return (T) Double.valueOf(number.doubleValue());
+                } else if (clazz == Short.class) {
+                    return (T) Short.valueOf(number.shortValue());
+                } else if (clazz == Byte.class) {
+                    return (T) Byte.valueOf(number.byteValue());
+                } else {
+                    // Unknown subclass of Number
+                    throw new ParseException("Unsupported number type: " + clazz);
+                }
+            } catch (NumberFormatException e) {
+                throw new ParseException("Unable to parse the value '" + str + "' as " + clazz.getSimpleName());
+            }
+        }
+        throw new ParseException("Unsupported type: " + clazz);
     }
 }
\ No newline at end of file
