diff --git a/tmp/4dcc3cfe-93c9-418f-b1b4-f6e3f6ccb351_buggy.java b/tmp/1c830b90-7a8f-4a55-9c41-d40aeadd1d81_fixed.java
index a7d0787..6f32a50 100644
--- a/tmp/4dcc3cfe-93c9-418f-b1b4-f6e3f6ccb351_buggy.java
+++ b/tmp/1c830b90-7a8f-4a55-9c41-d40aeadd1d81_fixed.java
@@ -1,54 +1,70 @@
-    /**
-     * Returns the <code>Object</code> of type <code>clazz</code>
-     * with the value of <code>str</code>.
-     *
-     * @param str the command line value
-     * @param clazz the type of argument
-     * @return The instance of <code>clazz</code> initialised with
-     * the value of <code>str</code>.
-     * @throws ParseException if the value creation for the given class failed
-     */
 @SuppressWarnings("unchecked") // returned value will have type T because it is fixed by clazz
 public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException
 {
     if (PatternOptionBuilder.STRING_VALUE == clazz)
     {
         return (T) str;
     }
     else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
     {
         return (T) createObject(str);
     }
     else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
     {
         return (T) createNumber(str);
     }
     else if (PatternOptionBuilder.DATE_VALUE == clazz)
     {
         return (T) createDate(str);
     }
     else if (PatternOptionBuilder.CLASS_VALUE == clazz)
     {
         return (T) createClass(str);
     }
     else if (PatternOptionBuilder.FILE_VALUE == clazz)
     {
         return (T) createFile(str);
     }
     else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
     {
         return (T) openFile(str);
     }
     else if (PatternOptionBuilder.FILES_VALUE == clazz)
     {
         return (T) createFiles(str);
     }
     else if (PatternOptionBuilder.URL_VALUE == clazz)
     {
         return (T) createURL(str);
     }
-        else
-        {
-            return null;
+    else {
+        // attempt to support primitive wrapper types like Integer, Double, Long etc.
+        // Add specific conversions or throw ParseException if unsupported.
+        try {
+            if (clazz == Integer.class) {
+                return (T) Integer.valueOf(str);
+            } else if (clazz == Long.class) {
+                return (T) Long.valueOf(str);
+            } else if (clazz == Short.class) {
+                return (T) Short.valueOf(str);
+            } else if (clazz == Byte.class) {
+                return (T) Byte.valueOf(str);
+            } else if (clazz == Double.class) {
+                return (T) Double.valueOf(str);
+            } else if (clazz == Float.class) {
+                return (T) Float.valueOf(str);
+            } else if (clazz == Boolean.class) {
+                return (T) Boolean.valueOf(str);
+            } else if (clazz == Character.class) {
+                if (str.length() != 1) {
+                    throw new ParseException("Cannot convert \"" + str + "\" to Character");
+                }
+                return (T) Character.valueOf(str.charAt(0));
+            } else {
+                throw new ParseException("Unsupported type: " + clazz);
+            }
+        } catch (Exception e) {
+            throw new ParseException("Unable to convert \"" + str + "\" to type: " + clazz.getSimpleName());
+        }
     }
 }
\ No newline at end of file
