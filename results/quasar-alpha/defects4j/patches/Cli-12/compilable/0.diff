diff --git a/tmp/e15f56eb-9f41-48fe-be32-110a54e853a0_buggy.java b/tmp/730bc80b-080e-4524-b733-63e30527f1a5_fixed.java
index 7e64f1d..103a1e3 100644
--- a/tmp/e15f56eb-9f41-48fe-be32-110a54e853a0_buggy.java
+++ b/tmp/730bc80b-080e-4524-b733-63e30527f1a5_fixed.java
@@ -1,78 +1,117 @@
-    /**
-     * <p>This flatten method does so using the following rules:
-     * <ol>
-     *  <li>If an {@link Option} exists for the first character of 
-     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} 
-     *  does not exist for the whole <code>argument</code> then
-     *  add the first character as an option to the processed tokens
-     *  list e.g. "-D" and add the rest of the entry to the also.</li>
-     *  <li>Otherwise just add the token to the processed tokens list.
-     *  </li>
-     * </ol>
-     * </p>
-     *
-     * @param options The Options to parse the arguments by.
-     * @param arguments The arguments that have to be flattened.
-     * @param stopAtNonOption specifies whether to stop 
-     * flattening when a non option has been encountered
-     * @return a String array of the flattened arguments
-     */
 protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
 {
     List tokens = new ArrayList();
 
     boolean eatTheRest = false;
 
     for (int i = 0; i < arguments.length; i++)
     {
         String arg = arguments[i];
 
         if ("--".equals(arg))
         {
             eatTheRest = true;
             tokens.add("--");
         }
         else if ("-".equals(arg))
         {
             tokens.add("-");
         }
         else if (arg.startsWith("-"))
         {
-                String opt = Util.stripLeadingHyphens(arg);
+            int equalSignIndex = arg.indexOf('=');
 
-                if (options.hasOption(opt))
+            String opt = null;
+            String value = null;
+
+            if (equalSignIndex != -1)
+            {
+                opt = arg.substring(0, equalSignIndex);
+                value = arg.substring(equalSignIndex + 1);
+            }
+            else
+            {
+                opt = arg;
+            }
+
+            String strippedOpt = Util.stripLeadingHyphens(opt);
+
+            if (options.hasOption(strippedOpt))
+            {
+                tokens.add(opt);
+                if (value != null && value.length() > 0)
+                {
+                    tokens.add(value);
+                }
+            }
+            else
+            {
+                if (opt.startsWith("--"))
+                {
+                    // handle long option with '=' sign which is not recognized
+                    tokens.add(opt);
+                    if (value != null && value.length() > 0)
+                    {
+                        tokens.add(value);
+                    }
+                }
+                else if (opt.startsWith("-") && opt.length() > 2)
+                {
+                    String shortOpt = opt.substring(0, 2);
+                    String remainder = opt.substring(2);
+
+                    String strippedShortOpt = Util.stripLeadingHyphens(shortOpt);
+
+                    if (options.hasOption(strippedShortOpt))
+                    {
+                        tokens.add(shortOpt);
+                        String argValue = remainder;
+                        if (equalSignIndex != -1)
+                        {
+                            // e.g., -f=bar
+                            argValue = value;
+                        }
+                        else if (!remainder.isEmpty())
+                        {
+                            argValue = remainder;
+                        }
+                        else
+                        {
+                            argValue = null;
+                        }
+
+                        if (argValue != null && argValue.length() > 0)
+                        {
+                            tokens.add(argValue);
+                        }
+                    }
+                    else
                     {
+                        eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
-                else
-                {
-                    if (options.hasOption(arg.substring(0, 2)))
-                    {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
                 }
                 else
                 {
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
         }
         else
         {
             tokens.add(arg);
         }
 
         if (eatTheRest)
         {
-                for (i++; i < arguments.length; i++)
+            for (i = i +1; i < arguments.length; i++)
             {
                 tokens.add(arguments[i]);
             }
+            break;
         }
     }
 
     return (String[]) tokens.toArray(new String[tokens.size()]);
 }
\ No newline at end of file
