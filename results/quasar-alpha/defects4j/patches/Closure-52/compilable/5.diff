diff --git a/tmp/b7abb4d7-bbf0-49ca-b42b-b72936fc7c71_buggy.java b/tmp/2453792d-a88e-41a5-8ca6-e68b8419e437_fixed.java
index 4b7f469..d04341d 100644
--- a/tmp/b7abb4d7-bbf0-49ca-b42b-b72936fc7c71_buggy.java
+++ b/tmp/2453792d-a88e-41a5-8ca6-e68b8419e437_fixed.java
@@ -1,10 +1,66 @@
 static boolean isSimpleNumber(String s) {
-    int len = s.length();
-    for (int index = 0; index < len; index++) {
-      char c = s.charAt(index);
-      if (c < '0' || c > '9') {
+  if (s.isEmpty()) {
+    return false;
+  }
+  // Preserve octal '0' prefix, hexadecimal '0x'/'0X' prefix, and decimals with '.' or exponent
+  char firstChar = s.charAt(0);
+  if (firstChar == '0') {
+    if (s.length() > 1) {
+      char secondChar = s.charAt(1);
+      if (secondChar == 'x' || secondChar == 'X') {
+        // Hexadecimal
+        for (int i = 2; i < s.length(); i++) {
+          char c = s.charAt(i);
+          if (!((c >= '0' && c <= '9') ||
+                (c >= 'a' && c <= 'f') ||
+                (c >= 'A' && c <= 'F'))) {
+            return false;
+          }
+        }
+        return true;
+      } else if (secondChar >= '0' && secondChar <= '9') {
+        // Octal with '0' prefix
+        for (int i = 1; i < s.length(); i++) {
+          char c = s.charAt(i);
+          if (c < '0' || c > '7') {
+            return false;
+          }
+        }
+        return true;
+      }
+    } else {
+      // Single zero '0'
+      return true;
+    }
+  }
+
+  // Check for decimal number (integer or float)
+  boolean seenDot = false;
+  boolean seenExp = false;
+  for (int i = 0; i < s.length(); i++) {
+    char c = s.charAt(i);
+    if (c >= '0' && c <= '9') {
+      continue;
+    } else if (c == '.') {
+      if (seenDot || seenExp) {
+        return false;
+      }
+      seenDot = true;
+    } else if (c == 'e' || c == 'E') {
+      if (seenExp) {
+        return false;
+      }
+      seenExp = true;
+      // Exponent may have optional sign next
+      if (i + 1 < s.length() && (s.charAt(i + 1) == '+' || s.charAt(i + 1) == '-')) {
+        i++;
+      }
+      if (i + 1 >= s.length()) {
+        return false; // must have digits after exponent
+      }
+    } else {
       return false;
     }
   }
-    return len > 0;
+  return true;
 }
\ No newline at end of file
