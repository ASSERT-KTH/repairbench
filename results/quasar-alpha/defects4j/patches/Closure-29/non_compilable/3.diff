diff --git a/tmp/68dcda8f-d68a-486d-bf93-3ef5077919a4_buggy.java b/tmp/81349220-9579-4e2e-9ccc-2e4b43c64b7c_fixed.java
index be9c8a3..ca52127 100644
--- a/tmp/68dcda8f-d68a-486d-bf93-3ef5077919a4_buggy.java
+++ b/tmp/81349220-9579-4e2e-9ccc-2e4b43c64b7c_fixed.java
@@ -1,94 +1,88 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Set<String> knownProps = null;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore indirect references, like x.y (except x.y(), since
-        // the function referenced by y might reference 'this').
-        //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
+          // If properties are known, only allow GETPROP access to known keys.
+          if (knownProps != null) {
+            String prop = parent.getLastChild().getString();
+            if (!knownProps.contains(prop)) {
+              return false;
+            }
+          }
+
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
-        // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
-            // ES5 get/set not supported.
+        // Build or check the set of properties defined on the object literal
+        if (knownProps == null) {
+          knownProps = new HashSet<>();
+          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.isGetterDef() || child.isSetterDef()) {
               return false;
             }
+            knownProps.add(child.getString());
+          }
+        } else {
+          Set<String> thisProps = new HashSet<>();
+          for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+            if (child.isGetterDef() || child.isSetterDef()) {
+              return false;
+            }
+            thisProps.add(child.getString());
+          }
+          knownProps.retainAll(thisProps);
+        }
 
-
+        // Check for self-referential assignments
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
           for (Reference t : refs) {
             Node refNode = t.getParent();
             while (!NodeUtil.isStatementBlock(refNode)) {
               if (refNode == childVal) {
-                // There's a self-referential assignment
                 return false;
               }
               refNode = refNode.getParent();
             }
           }
         }
 
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
