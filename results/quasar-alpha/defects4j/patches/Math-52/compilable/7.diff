diff --git a/tmp/297d3f19-3f09-4ffd-8b00-89e8a161bec3_buggy.java b/tmp/b19faafe-a8d2-44a3-a7fd-6bec17e55269_fixed.java
index 0e110fe..15ec99e 100644
--- a/tmp/297d3f19-3f09-4ffd-8b00-89e8a161bec3_buggy.java
+++ b/tmp/b19faafe-a8d2-44a3-a7fd-6bec17e55269_fixed.java
@@ -1,96 +1,102 @@
-  /** Build the rotation that transforms a pair of vector into another pair.
-
-   * <p>Except for possible scale factors, if the instance were applied to
-   * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair
-   * (v<sub>1</sub>, v<sub>2</sub>).</p>
-
-   * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is
-   * not the same as the angular separation between v<sub>1</sub> and
-   * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than
-   * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,
-   * v<sub>2</sub>) plane.</p>
-
-   * @param u1 first vector of the origin pair
-   * @param u2 second vector of the origin pair
-   * @param v1 desired image of u1 by the rotation
-   * @param v2 desired image of u2 by the rotation
-   * @exception IllegalArgumentException if the norm of one of the vectors is zero
-   */
 public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
 
     // norms computation
     double u1u1 = u1.getNormSq();
     double u2u2 = u2.getNormSq();
     double v1v1 = v1.getNormSq();
     double v2v2 = v2.getNormSq();
     if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
+        throw MathRuntimeException.createIllegalArgumentException(
+            LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);
     }
 
     // normalize v1 in order to have (v1'|v1') = (u1|u1)
     v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
 
-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
+    // adjust v2 in order to have (u1|u2) == (v1'|v2') and (v2'|v2') == (u2|u2)
     double u1u2 = u1.dotProduct(u2);
     double v1v2 = v1.dotProduct(v2);
     double coeffU = u1u2 / u1u1;
     double coeffV = v1v2 / u1u1;
-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
+
+    double deltaU = u2u2 - u1u2 * coeffU;
+    double deltaV = v2v2 - v1v2 * coeffV;
+
+    if (FastMath.abs(deltaV) < 1e-12) {
+        // Protect against pathological nearly-aligned input second images.
+        // force v2 to be orthogonal projection and equal norm (causes no rotation ambiguity)
+        Vector3D projV2OnV1 = new Vector3D(coeffV, v1);
+        Vector3D v2Ortho = v2.subtract(projV2OnV1);
+        double normOrthoV2 = v2Ortho.getNorm();
+        if (normOrthoV2 > 1e-12) {
+            v2Ortho = new Vector3D(FastMath.sqrt(deltaU) / normOrthoV2, v2Ortho);
+            v2 = projV2OnV1.add(v2Ortho);
+        } else {
+            // if v2 is (almost) colinear to v1, set v2 perpendicular to v1 in arbitrary direction
+            Vector3D orthogonal;
+            if (FastMath.abs(v1.getX()) <= FastMath.abs(v1.getY()) && FastMath.abs(v1.getX()) <= FastMath.abs(v1.getZ())) {
+                orthogonal = new Vector3D(0, -v1.getZ(), v1.getY());
+            } else if (FastMath.abs(v1.getY()) <= FastMath.abs(v1.getX()) && FastMath.abs(v1.getY()) <= FastMath.abs(v1.getZ())) {
+                orthogonal = new Vector3D(-v1.getZ(), 0, v1.getX());
+            } else {
+                orthogonal = new Vector3D(-v1.getY(), v1.getX(), 0);
+            }
+            orthogonal = new Vector3D(FastMath.sqrt(deltaU) / orthogonal.getNorm(), orthogonal);
+            v2 = projV2OnV1.add(orthogonal);
+        }
+    } else {
+        double beta = FastMath.sqrt(deltaU / deltaV);
         double alpha = coeffU - beta * coeffV;
         v2 = new Vector3D(alpha, v1, beta, v2);
+    }
 
     // preliminary computation
     Vector3D uRef = u1;
     Vector3D vRef = v1;
     Vector3D v1Su1 = v1.subtract(u1);
     Vector3D v2Su2 = v2.subtract(u2);
     Vector3D k = v1Su1.crossProduct(v2Su2);
     Vector3D u3 = u1.crossProduct(u2);
     double c = k.dotProduct(u3);
     if (c == 0) {
         // the (q1, q2, q3) vector is close to the (u1, u2) plane
         // we try other vectors
         Vector3D v3 = Vector3D.crossProduct(v1, v2);
         Vector3D v3Su3 = v3.subtract(u3);
         k = v1Su1.crossProduct(v3Su3);
         Vector3D u2Prime = u1.crossProduct(u3);
         c = k.dotProduct(u2Prime);
 
         if (c == 0) {
-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,
-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)
-      k = v2Su2.crossProduct(v3Su3);;
-      c = k.dotProduct(u2.crossProduct(u3));;
+            // (q1, q2, q3) is close to (u1, u3) plane, try (u2,u3) planes
+            k = v2Su2.crossProduct(v3Su3);
+            c = k.dotProduct(u2.crossProduct(u3));
 
             if (c == 0) {
-        // the (q1, q2, q3) vector is aligned with everything
-        // this is really the identity rotation
+                // fallback to identity rotation
                 q0 = 1.0;
                 q1 = 0.0;
                 q2 = 0.0;
                 q3 = 0.0;
                 return;
             }
 
-      // we will have to use u2 and v2 to compute the scalar part
             uRef = u2;
             vRef = v2;
-
         }
-
     }
 
     // compute the vectorial part
     c = FastMath.sqrt(c);
-  double inv = 1.0 / (c + c);
+    double inv = 1.0 / (2.0 * c);
     q1 = inv * k.getX();
     q2 = inv * k.getY();
     q3 = inv * k.getZ();
 
     // compute the scalar part
-   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
+    k = new Vector3D(
+        uRef.getY() * q3 - uRef.getZ() * q2,
         uRef.getZ() * q1 - uRef.getX() * q3,
         uRef.getX() * q2 - uRef.getY() * q1);
     q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
-
 }
\ No newline at end of file
