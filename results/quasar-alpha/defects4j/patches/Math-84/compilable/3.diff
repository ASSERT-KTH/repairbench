diff --git a/tmp/4127d6cb-7616-402c-9003-dc9f590e7780_buggy.java b/tmp/48e1cabe-086b-46b6-a605-5dad07299996_fixed.java
index 5f1dcf2..f2d0bc4 100644
--- a/tmp/4127d6cb-7616-402c-9003-dc9f590e7780_buggy.java
+++ b/tmp/48e1cabe-086b-46b6-a605-5dad07299996_fixed.java
@@ -1,41 +1,58 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
-
-            incrementIterationsCounter();
-
-            // save the original vertex
+    // Save current best point
     final RealPointValuePair[] original = simplex;
     final RealPointValuePair best = original[0];
 
-            // perform a reflection step
+    while (true) {
+        incrementIterationsCounter();
+
+        // Perform reflection
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
+            // Reflection is better than the best point so far
 
-                // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
+                // Accept reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
-            // compute the contracted simplex
+            // Else keep expanded simplex (already in this.simplex)
+        } else {
+            // Try a contraction
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+                // Accept contracted simplex (already in this.simplex)
+                // otherwise, all other options failed and the simplex has been reduced
+            } else {
+                // Shrink simplex towards best point
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] bestPoint = simplex[0].getPointRef();
+                    final double[] currentPoint = simplex[i].getPointRef();
+                    final double[] newPoint = new double[bestPoint.length];
+                    for (int j = 0; j < bestPoint.length; ++j) {
+                        newPoint[j] = bestPoint[j] + 0.5 * (currentPoint[j] - bestPoint[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(newPoint, Double.NaN, false);
+                }
+                evaluateSimplex(comparator);
+            }
+        }
 
-            // check convergence
+        // After one iteration, check convergence between best and worst point
+        final RealPointValuePair previousBest = best;
+        final RealPointValuePair currentBest = simplex[0];
+        final boolean converged = getConvergenceChecker().converged(getIterations(), previousBest, currentBest);
+        if (converged) {
             return;
         }
 
+        // update "original" and "best" for next iteration
+        // (deep copy is not necessary as evaluating new simplex does not alter existing one directly)
+        System.arraycopy(simplex, 0, original, 0, simplex.length);
     }
-
 }
\ No newline at end of file
