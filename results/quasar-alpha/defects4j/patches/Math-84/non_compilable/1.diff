diff --git a/tmp/1a23f9a2-415c-4610-8f54-d251f90a5d77_buggy.java b/tmp/cc89fc0e-e722-4b31-8cfe-45d5c5334b94_fixed.java
index 5f1dcf2..637eae6 100644
--- a/tmp/1a23f9a2-415c-4610-8f54-d251f90a5d77_buggy.java
+++ b/tmp/cc89fc0e-e722-4b31-8cfe-45d5c5334b94_fixed.java
@@ -1,41 +1,63 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    RealPointValuePair previous = simplex[0];
+    
     while (true) {
 
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        // save original simplex and best point
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
+            // check convergence before returning
+            if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {
+                return;
+            }
+
+            previous = simplex[0];
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
+            // contracted is better than the best point so accept it
+            // simplex is already updated in evaluateNewSimplex
+            if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {
+                return;
+            }
 
-            // check convergence
+            previous = simplex[0];
             return;
         }
 
+        // Neither reflection nor contraction improved things: shrink simplex towards best point
+        // Call evaluateNewSimplex with parameter=0 for shrinking
+        evaluateNewSimplex(original, 0.0, comparator);
+
+        // check convergence after shrink
+        if (checker != null && checker.converged(getIterations(), previous, simplex[0])) {
+            return;
         }
 
+        previous = simplex[0];
+    }
 }
\ No newline at end of file
