diff --git a/tmp/91e8932d-a6f9-49db-8baf-f4cee8dcf82e_buggy.java b/tmp/d03895d6-62cb-4a2a-90d1-ad3c574fc6c1_fixed.java
index 5f1dcf2..0eedcac 100644
--- a/tmp/91e8932d-a6f9-49db-8baf-f4cee8dcf82e_buggy.java
+++ b/tmp/d03895d6-62cb-4a2a-90d1-ad3c574fc6c1_fixed.java
@@ -1,41 +1,67 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+
     while (true) {
 
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // store current simplex
+        final RealPointValuePair[] previous = simplex.clone();
+        final RealPointValuePair best = previous[0];
 
         // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        final RealPointValuePair reflected = evaluateNewSimplex(previous, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            final RealPointValuePair expanded = evaluateNewSimplex(previous, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // else keep expanded (simplex has already been updated in evaluateNewSimplex)
 
+            // check convergence after expansion/reflection
+            if (checker != null && checker.converged(getIterations(), previous, simplex)) {
                 return;
+            }
 
+            continue;
         }
 
         // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+        final RealPointValuePair contracted = evaluateNewSimplex(previous, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
-                // accept the contracted simplex
-
-            // check convergence
+            // accept the contracted simplex (simplex has already been updated)
+            if (checker != null && checker.converged(getIterations(), previous, simplex)) {
                 return;
             }
+            continue;
+        }
 
+        // shrink simplex towards best point
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] bestPoint = simplex[0].getPointRef();
+            final double[] currPoint = simplex[i].getPointRef();
+            final double[] shrunk = new double[bestPoint.length];
+            for (int j = 0; j < bestPoint.length; ++j) {
+                shrunk[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+            }
+            simplex[i] = new RealPointValuePair(
+                    shrunk,
+                    computeObjectiveValue(shrunk),
+                    false);
         }
+        // re-sort simplex after shrink
+        Arrays.sort(simplex, comparator);
 
+        if (checker != null && checker.converged(getIterations(), previous, simplex)) {
+            return;
+        }
+    }
 }
\ No newline at end of file
