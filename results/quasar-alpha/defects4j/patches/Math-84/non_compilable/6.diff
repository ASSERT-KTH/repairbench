diff --git a/tmp/9c93837b-6152-48a1-bad7-408af131d034_buggy.java b/tmp/fdf930a1-fbdd-42e9-a050-113bae2f7215_fixed.java
index 5f1dcf2..26dbf72 100644
--- a/tmp/9c93837b-6152-48a1-bad7-408af131d034_buggy.java
+++ b/tmp/fdf930a1-fbdd-42e9-a050-113bae2f7215_fixed.java
@@ -1,41 +1,93 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+
     while (true) {
 
         incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] previous = simplex.clone();
+        final RealPointValuePair bestPrevious = previous[0];
+
+        // save the original simplex
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // else the expanded simplex is already in place (simplex updated inside evaluateNewSimplex)
 
+            // check convergence
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                if (!checker.converged(getIterations(), previous[i], simplex[i])) {
+                    converged = false;
+                    break;
+                }
+            }
+            if (converged) {
                 return;
-
+            } else {
+                continue;
+            }
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
+            // simplex updated inside evaluateNewSimplex
 
             // check convergence
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                if (!checker.converged(getIterations(), previous[i], simplex[i])) {
+                    converged = false;
+                    break;
+                }
+            }
+            if (converged) {
                 return;
+            } else {
+                continue;
+            }
         }
 
+        // shrink the simplex towards the best point
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] bestPoint = original[0].getPoint();
+            final double[] x = original[i].getPoint();
+            final double[] newX = new double[x.length];
+            for (int j = 0; j < x.length; ++j) {
+                newX[j] = bestPoint[j] + sigma * (x[j] - bestPoint[j]);
             }
+            simplex[i] = new RealPointValuePair(newX, evaluateObjective(newX), false);
+        }
+        // reordering simplex
+        Arrays.sort(simplex, comparator);
 
+        // check convergence
+        boolean converged = true;
+        for (int i = 0; i < simplex.length; ++i) {
+            if (!checker.converged(getIterations(), previous[i], simplex[i])) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
+            return;
+        }
+    }
 }
\ No newline at end of file
