diff --git a/tmp/d21ecec6-e301-4dce-a3af-0fb8f6b1646d_buggy.java b/tmp/712907c6-00c2-4ed6-b9da-78355c15c313_fixed.java
index 5f1dcf2..262ddc9 100644
--- a/tmp/d21ecec6-e301-4dce-a3af-0fb8f6b1646d_buggy.java
+++ b/tmp/712907c6-00c2-4ed6-b9da-78355c15c313_fixed.java
@@ -1,41 +1,62 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    RealPointValuePair previous = simplex[0];
+    boolean converged = false;
+
+    while (!converged) {
 
         incrementIterationsCounter();
 
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
-                return;
-
+            // optional: else, keep expanded
+            converged = checker.converged(getIterations(), previous, simplex[0]);
+            previous = simplex[0];
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
-                return;
+            // the simplex has already been updated inside evaluateNewSimplex
+            converged = checker.converged(getIterations(), previous, simplex[0]);
+            previous = simplex[0];
+            continue;
         }
 
+        // if contraction failed, shrink simplex towards best point and continue
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] bestPoint = simplex[0].getPoint();
+            final double[] currPoint = simplex[i].getPoint().clone();
+            for (int j = 0; j < currPoint.length; ++j) {
+                currPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+            }
+            final double currValue = computeObjectiveValue(currPoint);
+            simplex[i] = new RealPointValuePair(currPoint, currValue);
         }
 
+        // sort simplex
+        Arrays.sort(simplex, comparator);
+
+        converged = checker.converged(getIterations(), previous, simplex[0]);
+        previous = simplex[0];
+    }
 }
\ No newline at end of file
