diff --git a/tmp/a94174d3-e3ff-4340-b8af-0c923740a119_buggy.java b/tmp/d73ac240-a41f-4218-b5c4-2d63d512ba3d_fixed.java
index 5f1dcf2..c153a61 100644
--- a/tmp/a94174d3-e3ff-4340-b8af-0c923740a119_buggy.java
+++ b/tmp/d73ac240-a41f-4218-b5c4-2d63d512ba3d_fixed.java
@@ -1,41 +1,58 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
-            final RealPointValuePair[] original = simplex;
+        final RealPointValuePair[] original = simplex.clone();
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        final RealPointValuePair reflectedBest = simplex[0];
 
+        if (comparator.compare(reflectedBest, best) < 0) {
             // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair[] reflectedSimplex = simplex.clone();
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
+            final RealPointValuePair expandedBest = simplex[0];
+
+            if (comparator.compare(reflectedBest, expandedBest) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
-
-                return;
-
-            }
-
+            // else simplex is already set to expanded
+        } else {
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+            final RealPointValuePair contractedBest = simplex[0];
+            if (comparator.compare(contractedBest, best) < 0) {
                 // accept the contracted simplex
+                // already set
+            } else {
+                // shrink simplex towards best
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] bestPoint = best.getPointRef();
+                    final double[] currPoint = simplex[i].getPointRef();
+                    final double[] newPoint = new double[currPoint.length];
+                    for (int j = 0; j < currPoint.length; ++j) {
+                        newPoint[j] = 0.5 * (bestPoint[j] + currPoint[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(newPoint,
+                                                        computeObjectiveValue(newPoint),
+                                                        false);
+                }
+            }
+        }
 
         // check convergence
+        if (getConvergenceChecker() != null &&
+            getConvergenceChecker().converged(getIterations(), best, simplex[0])) {
             return;
         }
-
     }
-
 }
\ No newline at end of file
