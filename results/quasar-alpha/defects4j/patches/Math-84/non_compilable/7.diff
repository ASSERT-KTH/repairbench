diff --git a/tmp/fc24c100-6c25-4235-a3df-c718ecb5d34d_buggy.java b/tmp/462c6745-c000-4a9c-af48-8fc518a1ef2b_fixed.java
index 5f1dcf2..a9fe548 100644
--- a/tmp/fc24c100-6c25-4235-a3df-c718ecb5d34d_buggy.java
+++ b/tmp/462c6745-c000-4a9c-af48-8fc518a1ef2b_fixed.java
@@ -1,41 +1,67 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final RealPointValuePair[] previous = simplex.clone();
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // else expanded simplex is better and simplex has been updated in evaluateNewSimplex
 
+            // check convergence and return if satisfied
+            if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {
                 return;
-
+            }
+            System.arraycopy(simplex, 0, previous, 0, simplex.length);
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            // simplex has been updated in evaluateNewSimplex
+            if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {
                 return;
             }
+            System.arraycopy(simplex, 0, previous, 0, simplex.length);
+            continue;
+        }
 
+        // shrink simplex towards best point (original[0]) if neither reflected nor contracted improved
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] bestPoint = original[0].getPoint();
+            final double[] currPoint = simplex[i].getPoint();
+            final double[] newPoint = currPoint.clone();
+            for (int j = 0; j < newPoint.length; ++j) {
+                newPoint[j] = bestPoint[j] + sigma * (currPoint[j] - bestPoint[j]);
+            }
+            final double newValue = computeObjectiveValue(newPoint);
+            simplex[i] = new RealPointValuePair(newPoint, newValue);
         }
+        java.util.Arrays.sort(simplex, comparator);
 
+        if (checker != null && checker.converged(getIterations(), previous[0], simplex[0])) {
+            return;
+        }
+        System.arraycopy(simplex, 0, previous, 0, simplex.length);
+    }
 }
\ No newline at end of file
