diff --git a/tmp/26c61dac-56fd-42b6-8f4a-49fe56ad61a9_buggy.java b/tmp/16c334c6-125c-454f-91d5-85fbbb545d61_fixed.java
index 5f1dcf2..a71b61a 100644
--- a/tmp/26c61dac-56fd-42b6-8f4a-49fe56ad61a9_buggy.java
+++ b/tmp/16c334c6-125c-454f-91d5-85fbbb545d61_fixed.java
@@ -1,41 +1,92 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+
+    RealPointValuePair[] previousSimplex = simplex.clone();
+
     while (true) {
 
         incrementIterationsCounter();
 
-            // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // else, keep current simplex (expanded step), which is already set
 
+            // check convergence
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {
+                    converged = false;
+                    break;
+                }
+            }
+            if (converged) {
                 return;
+            }
 
+            previousSimplex = simplex.clone();
+            continue;
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
 
             // check convergence
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {
+                    converged = false;
+                    break;
+                }
+            }
+            if (converged) {
                 return;
             }
 
+            previousSimplex = simplex.clone();
+            continue;
+        }
+
+        // if we reach here, shrink the simplex towards best point, to avoid indefinite loop
+        for (int i = 1; i < simplex.length; ++i) {
+            double[] xi = simplex[0].getPoint().clone();
+            double[] xOld = simplex[i].getPoint();
+            for (int j = 0; j < xi.length; ++j) {
+                xi[j] = simplex[0].getPoint()[j] + sigma * (xOld[j] - simplex[0].getPoint()[j]);
+            }
+            final double f = computeObjectiveValue(xi);
+            simplex[i] = new RealPointValuePair(xi, f, true);
         }
 
+        // check convergence
+        boolean converged = true;
+        for (int i = 0; i < simplex.length; ++i) {
+            if (!checker.converged(getIterations(), previousSimplex[i], simplex[i])) {
+                converged = false;
+                break;
+            }
+        }
+        if (converged) {
+            return;
+        }
+
+        previousSimplex = simplex.clone();
+    }
 }
\ No newline at end of file
