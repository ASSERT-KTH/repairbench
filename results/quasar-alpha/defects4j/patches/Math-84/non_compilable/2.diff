diff --git a/tmp/1d770fc9-d64a-4d28-bec8-da8acd60374b_buggy.java b/tmp/515807fa-c00a-4f38-95fc-e90a892effba_fixed.java
index 5f1dcf2..4609daf 100644
--- a/tmp/1d770fc9-d64a-4d28-bec8-da8acd60374b_buggy.java
+++ b/tmp/515807fa-c00a-4f38-95fc-e90a892effba_fixed.java
@@ -1,41 +1,80 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final RealPointValuePair[] previous = simplex.clone();
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
+            // check convergence
+            break;
 
-                return;
-
-            }
+        } else {
 
             // compute the contracted simplex
             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
             if (comparator.compare(contracted, best) < 0) {
                 // accept the contracted simplex
-
                 // check convergence
-                return;
+                break;
+            } else {
+                // shrink simplex towards best point
+                for (int i = 1; i < simplex.length; ++i) {
+                    final double[] xBest = simplex[0].getPoint();
+                    final double[] x = simplex[i].getPoint();
+                    double[] newX = new double[x.length];
+                    for (int j = 0; j < x.length; ++j) {
+                        newX[j] = 0.5 * (xBest[j] + x[j]);
+                    }
+                    simplex[i] = new RealPointValuePair(newX,
+                                                        computeObjectiveValue(newX),
+                                                        false);
+                }
+                // check convergence
+                break;
+            }
+        }
+    }
+
+    // Check convergence: if simplex has not changed significantly, stop
+    boolean converged = true;
+    for (int i = 0; i < simplex.length; ++i) {
+        final double[] prev = previous[i].getPoint();
+        final double[] curr = simplex[i].getPoint();
+        for (int j = 0; j < prev.length; ++j) {
+            if (Math.abs(prev[j] - curr[j]) > 1e-10) {
+                converged = false;
+                break;
+            }
+        }
+        if (!converged) {
+            break;
+        }
     }
 
+    if (!converged) {
+        // Not yet converged: continue iterating in next iteration of optimize()
+        // (this will be handled by outer optimization loop)
+        // Otherwise, do nothing here: converge exit handled by outer loop via convergence checker
     }
 
 }
\ No newline at end of file
