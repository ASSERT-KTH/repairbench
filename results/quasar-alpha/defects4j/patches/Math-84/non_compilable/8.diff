diff --git a/tmp/0876e2c9-aee8-42d8-aa48-bdee2b0731a8_buggy.java b/tmp/14392d04-2296-40d9-89fe-5eb76f5fb21d_fixed.java
index 5f1dcf2..3cde3e2 100644
--- a/tmp/0876e2c9-aee8-42d8-aa48-bdee2b0731a8_buggy.java
+++ b/tmp/14392d04-2296-40d9-89fe-5eb76f5fb21d_fixed.java
@@ -1,41 +1,99 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
+    final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
+    RealPointValuePair[] previous = new RealPointValuePair[simplex.length];
+    for (int i = 0; i < simplex.length; ++i) {
+        previous[i] = simplex[i];
+    }
+
     while (true) {
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
+            // check for convergence and return if converged
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                converged &= checker.converged(getIterations(), previous[i], simplex[i]);
+            }
+            if (converged) {
                 return;
+            }
+
+            // prepare for next iteration
+            for (int i = 0; i < simplex.length; ++i) {
+                previous[i] = simplex[i];
+            }
+
+            continue;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
 
-            // check convergence
+            // check for convergence and return if converged
+            boolean converged = true;
+            for (int i = 0; i < simplex.length; ++i) {
+                converged &= checker.converged(getIterations(), previous[i], simplex[i]);
+            }
+            if (converged) {
                 return;
             }
 
+            // prepare for next iteration
+            for (int i = 0; i < simplex.length; ++i) {
+                previous[i] = simplex[i];
+            }
+
+            continue;
+        }
+
+        // neither reflection, expansion nor contraction was good enough:
+        // shrink simplex in all directions towards the best point
+        for (int i = 1; i < simplex.length; ++i) {
+            final double[] bestPoint = simplex[0].getPoint();
+            final double[] si = simplex[i].getPoint();
+            final double[] newSi = new double[si.length];
+            for (int j = 0; j < si.length; ++j) {
+                newSi[j] = bestPoint[j] + sigma * (si[j] - bestPoint[j]);
+            }
+            final double newValue = computeObjectiveValue(newSi);
+            simplex[i] = new RealPointValuePair(newSi, newValue);
+        }
+
+        // check for convergence and return if converged
+        boolean converged = true;
+        for (int i = 0; i < simplex.length; ++i) {
+            converged &= checker.converged(getIterations(), previous[i], simplex[i]);
+        }
+        if (converged) {
+            return;
         }
 
+        // prepare for next iteration
+        for (int i = 0; i < simplex.length; ++i) {
+            previous[i] = simplex[i];
+        }
+    }
 }
\ No newline at end of file
