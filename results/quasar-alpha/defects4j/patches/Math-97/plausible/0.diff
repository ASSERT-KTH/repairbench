diff --git a/tmp/84efcb80-cb66-4ebc-a723-f33bfdcf0be9_buggy.java b/tmp/13b09bbc-b042-4721-a0cd-b073108a9dce_fixed.java
index 88647d1..a307e60 100644
--- a/tmp/84efcb80-cb66-4ebc-a723-f33bfdcf0be9_buggy.java
+++ b/tmp/13b09bbc-b042-4721-a0cd-b073108a9dce_fixed.java
@@ -1,44 +1,35 @@
-    /**
-     * Find a zero in the given interval.
-     * <p>
-     * Requires that the values of the function at the endpoints have opposite
-     * signs. An <code>IllegalArgumentException</code> is thrown if this is not
-     * the case.</p>
-     * 
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function 
-     * @throws IllegalArgumentException if min is not less than max or the
-     * signs of the values of the function at the endpoints are not opposites
-     */
 public double solve(double min, double max) throws MaxIterationsExceededException, 
     FunctionEvaluationException {
 
     clearResult();
     verifyInterval(min, max);
 
-        double ret = Double.NaN;
-        
     double yMin = f.value(min);
+    if (Math.abs(yMin) < functionValueAccuracy) {
+        // min is sufficiently close to a root
+        setResult(min, 0);
+        return min;
+    }
+
     double yMax = f.value(max);
+    if (Math.abs(yMax) < functionValueAccuracy) {
+        // max is sufficiently close to a root
+        setResult(max, 0);
+        return max;
+    }
 
     // Verify bracketing
     double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
+    if (sign > 0) {
+        // neither endpoint is a (sufficiently close) root and no bracketing
         throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
             "  Endpoints: [" + min + "," + max + "]" + 
             "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
     }
 
+    // solve using the interval
+    double ret = solve(min, yMin, max, yMax, min, yMin);
+
     return ret;
 }
\ No newline at end of file
