diff --git a/tmp/3a1aa1f1-ea4e-408f-8d40-f3b9a1e59cff_buggy.java b/tmp/d7f1f05f-348d-4dd1-820f-d2b4760c3cb5_fixed.java
index 939f49b..da28735 100644
--- a/tmp/3a1aa1f1-ea4e-408f-8d40-f3b9a1e59cff_buggy.java
+++ b/tmp/d7f1f05f-348d-4dd1-820f-d2b4760c3cb5_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+      && n.getType() == Token.GETPROP) {
+    Node obj = n.getFirstChild();
+    if (obj != null && obj.getType() == Token.GETPROP) {
+      Node prop = obj.getFirstChild().getNext();
+      if (prop != null && prop.getType() == Token.STRING
+          && "prototype".equals(prop.getString())) {
         return true;
       }
     }
+    // Also handle bracket notation: e.g., e.prototype['foo']
+    Node prop = n.getLastChild();
+    if (prop != null) {
+      // Check for e.prototype['foo']
+      Node obj2 = n.getFirstChild();
+      if (obj2 != null && obj2.getType() == Token.GETPROP) {
+        Node mid = obj2.getFirstChild().getNext();
+        if (mid != null && mid.getType() == Token.STRING
+            && "prototype".equals(mid.getString())) {
+          return true;
+        }
+      }
+    }
   }
-
   return false;
 }
\ No newline at end of file
