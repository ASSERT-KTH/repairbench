diff --git a/tmp/fea2b829-0711-466c-b678-fce33750e7c2_buggy.java b/tmp/48cfaec3-c5b4-425b-aff5-981388a508f5_fixed.java
index 939f49b..36b4eb4 100644
--- a/tmp/fea2b829-0711-466c-b678-fce33750e7c2_buggy.java
+++ b/tmp/48cfaec3-c5b4-425b-aff5-981388a508f5_fixed.java
@@ -1,21 +1,27 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    Node getPropNode = n;
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    boolean isPrototype = false;
+
+    // Check for chained GETPROP to find 'prototype' property
+    while (getPropNode != null && getPropNode.getType() == Token.GETPROP) {
+      Node propName = getPropNode.getLastChild();
+      if (propName.getType() == Token.STRING &&
+          "prototype".equals(propName.getString())) {
+        isPrototype = true;
+        break;
+      }
+      getPropNode = getPropNode.getFirstChild();
+    }
+
+    if (isPrototype) {
       return true;
     }
   }
-      }
 
   return false;
 }
\ No newline at end of file
