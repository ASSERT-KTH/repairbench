diff --git a/tmp/7c31bd7c-f0fa-4991-a755-fcf2d2b60f1a_buggy.java b/tmp/fa5e3b68-5451-46bb-9da6-5294fb815277_fixed.java
index 939f49b..4c1f00a 100644
--- a/tmp/7c31bd7c-f0fa-4991-a755-fcf2d2b60f1a_buggy.java
+++ b/tmp/fa5e3b68-5451-46bb-9da6-5294fb815277_fixed.java
@@ -1,21 +1,29 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    Node propAccess = n;
 
+    // handle chained assignments like: A.prototype['alias'] = A.prototype.method = function() {}
+    // so check if propAccess's first child is also GETPROP on a prototype
+    if (propAccess.getFirstChild().getType() == Token.GETPROP) {
+      Node innerProp = propAccess.getFirstChild();
+      Node child = innerProp.getFirstChild().getNext();
+
+      if (child.getType() == Token.STRING &&
+          child.getString().equals("prototype")) {
+        return true;
+      }
+    } else {
+      // check for non-chained form: A.prototype.method = function() {}
+      Node child = propAccess.getFirstChild().getNext();
       if (child.getType() == Token.STRING &&
           child.getString().equals("prototype")) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
