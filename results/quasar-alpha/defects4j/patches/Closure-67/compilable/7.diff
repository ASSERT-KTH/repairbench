diff --git a/tmp/addb520d-125e-47f1-8ee4-3f9c5a9bdaa8_buggy.java b/tmp/5424d6b4-a19b-4f01-822f-52944c6bedf9_fixed.java
index 939f49b..c7f3bd7 100644
--- a/tmp/addb520d-125e-47f1-8ee4-3f9c5a9bdaa8_buggy.java
+++ b/tmp/5424d6b4-a19b-4f01-822f-52944c6bedf9_fixed.java
@@ -1,21 +1,28 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+      && n.getType() == Token.GETPROP) {
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    // Check if the GETPROP directly targets prototype property
+    Node target = n;
+    Node objectNode = target.getFirstChild();
+    Node propertyNode = objectNode.getNext();
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (propertyNode != null && propertyNode.getType() == Token.STRING &&
+        propertyNode.getString().equals("prototype")) {
+      return true;
+    }
+
+    // Also check if it is a chain, such as e.prototype.method1
+    if (objectNode != null && objectNode.getType() == Token.GETPROP) {
+      Node protoObj = objectNode.getFirstChild();
+      Node protoProp = protoObj.getNext();
+
+      if (protoProp != null && protoProp.getType() == Token.STRING &&
+          protoProp.getString().equals("prototype")) {
         return true;
       }
     }
   }
-
   return false;
 }
\ No newline at end of file
