diff --git a/tmp/6c670042-9e8a-434b-a8b5-a3d53810b481_buggy.java b/tmp/fead7fa8-29e8-419b-a57c-4f8ef51cd524_fixed.java
index 939f49b..d749c53 100644
--- a/tmp/6c670042-9e8a-434b-a8b5-a3d53810b481_buggy.java
+++ b/tmp/fead7fa8-29e8-419b-a57c-4f8ef51cd524_fixed.java
@@ -1,21 +1,32 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    Node getprop = n;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
+    boolean isObjPrototypeDirect =
+        getprop.getFirstChild().getType() == Token.GETPROP;
 
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
+    if (isObjPrototypeDirect) {
+      Node innerGetProp = getprop.getFirstChild();
+      Node maybePrototype = innerGetProp.getFirstChild().getNext();
+
+      if (maybePrototype != null &&
+          maybePrototype.getType() == Token.STRING &&
+          "prototype".equals(maybePrototype.getString())) {
+        return true;
+      }
+    } else {
+      // Also handle bracket notation: e.g., e.prototype['alias1'] = ...
+      Node obj = getprop.getFirstChild();
+      Node prop = obj.getNext();
+      if (prop != null && prop.getType() == Token.STRING &&
+          "prototype".equals(prop.getString())) {
         return true;
       }
     }
   }
 
   return false;
 }
\ No newline at end of file
