diff --git a/tmp/50fc1dd3-e8ba-4803-a4e1-c79265b0072c_buggy.java b/tmp/31625d04-76ea-406b-acf0-6c914095fa11_fixed.java
index 939f49b..3662c85 100644
--- a/tmp/50fc1dd3-e8ba-4803-a4e1-c79265b0072c_buggy.java
+++ b/tmp/31625d04-76ea-406b-acf0-6c914095fa11_fixed.java
@@ -1,21 +1,24 @@
 private boolean isPrototypePropertyAssign(Node assign) {
   Node n = assign.getFirstChild();
   if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
+      && n.getType() == Token.GETPROP) {
     // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
+    Node propNode = n;
+    boolean isPrototype = false;
 
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
+    while (propNode != null && propNode.getType() == Token.GETPROP) {
+      Node property = propNode.getSecondChild();
+      if (property != null &&
+          property.getType() == Token.STRING &&
+          property.getString().equals("prototype")) {
+        isPrototype = true;
+        break;
       }
+      propNode = propNode.getFirstChild();
     }
+
+    return isPrototype;
   }
 
   return false;
 }
\ No newline at end of file
