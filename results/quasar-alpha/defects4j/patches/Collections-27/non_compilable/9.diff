diff --git a/tmp/751fa2c5-2ee7-4813-a656-477eb0ea5e19_buggy.java b/tmp/e4ea7311-b94d-4dba-ac81-240282f16fad_fixed.java
index e69de29..0b8a998 100644
--- a/tmp/751fa2c5-2ee7-4813-a656-477eb0ea5e19_buggy.java
+++ b/tmp/e4ea7311-b94d-4dba-ac81-240282f16fad_fixed.java
@@ -0,0 +1,18 @@
+private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
+    in.defaultReadObject();
+    Object classObj = in.readObject();
+    if (classObj instanceof Class<?>) {
+        Class<?> clazz = (Class<?>) classObj;
+        if (!Collection.class.isAssignableFrom(clazz)) {
+            throw new UnsupportedOperationException("Collection class " + clazz.getName() + " is not a subtype of java.util.Collection");
+        }
+        // Defensive: disallow deserialization of suspicious or unsafe classes, e.g., String, Object, or non-Collection types
+        if (clazz == String.class || clazz == Object.class || !Modifier.isPublic(clazz.getModifiers())) {
+            throw new UnsupportedOperationException("Deserialization of unsafe Collection class: " + clazz.getName());
+        }
+        this.collectionClass = clazz;
+    } else {
+        throw new UnsupportedOperationException("Invalid data in stream: expected Class for collectionClass");
+    }
+    this.map = (Map<K, Collection<V>>) in.readObject();
+}
\ No newline at end of file
