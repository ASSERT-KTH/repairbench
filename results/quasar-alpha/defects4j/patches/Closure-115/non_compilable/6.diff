diff --git a/tmp/8befb821-52a8-477b-bcb4-2c7f4bb3c324_buggy.java b/tmp/46eda326-ebb9-401b-8229-e397aabc6410_fixed.java
index 3075782..1fae1d1 100644
--- a/tmp/8befb821-52a8-477b-bcb4-2c7f4bb3c324_buggy.java
+++ b/tmp/46eda326-ebb9-401b-8229-e397aabc6410_fixed.java
@@ -1,82 +1,78 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
   boolean hasSideEffects = false;
   if (block.hasChildren()) {
     Preconditions.checkState(block.hasOneChild());
     Node stmt = block.getFirstChild();
     if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+      Node retVal = stmt.getFirstChild();
+      hasSideEffects = NodeUtil.mayHaveSideEffects(retVal, compiler)
+          // Also consider property GET and element GET as side effects
+          // because simple inline replacement may create an unsequenced access 
+          // if the argument has side effects itself.
+          || retVal != null && (retVal.isGetProp() || retVal.isGetElem());
     }
   }
+
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
         if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
           return CanInlineResult.NO;
         }
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
+        int refCount = NodeUtil.getNameReferenceCount(block, fnParam.getString());
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+            && refCount > 1) {
+          return CanInlineResult.NO;
+        }
+        // For object/array parameters with a single reference, ensure
+        // the reference is not a modifying assignment.
+        if (refCount == 1
+            && NodeUtil.isObjectLitOrArrayLit(cArg)
+            && mayMutationOfName(block, fnParam.getString())) {
           return CanInlineResult.NO;
         }
       }
-
-        // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
