diff --git a/tmp/d34973ea-0a13-4a62-a839-4de1ffc985cf_buggy.java b/tmp/0fda67b8-4f9a-4901-9da8-1ab361e02d48_fixed.java
index 4c1ed27..06b8cd8 100644
--- a/tmp/d34973ea-0a13-4a62-a839-4de1ffc985cf_buggy.java
+++ b/tmp/0fda67b8-4f9a-4901-9da8-1ab361e02d48_fixed.java
@@ -1,32 +1,35 @@
 /**
  * Translate an input onto a Writer. This is intentionally final as its algorithm is 
  * tightly coupled with the abstract method of this class. 
  *
  * @param input CharSequence that is being translated
  * @param out Writer to translate the text to
  * @throws IOException if and only if the Writer produces an IOException
  */
 public final void translate(CharSequence input, Writer out) throws IOException {
     if (out == null) {
         throw new IllegalArgumentException("The Writer must not be null");
     }
     if (input == null) {
         return;
     }
     int pos = 0;
     int len = input.length();
     while (pos < len) {
         int consumed = translate(input, pos, out);
         if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+            int codepoint = Character.codePointAt(input, pos);
+            char[] c = Character.toChars(codepoint);
             out.write(c);
             pos += c.length;
             continue;
         }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        int tempPos = pos;
         for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
+            int codepoint = Character.codePointAt(input, tempPos);
+            int charCount = Character.charCount(codepoint);
+            tempPos += charCount;
         }
+        pos = tempPos;
     }
 }
\ No newline at end of file
