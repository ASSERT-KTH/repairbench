diff --git a/tmp/aa1d4a63-2792-454a-a17f-0a307a95ef1c_buggy.java b/tmp/ddd13f7c-1d65-4c03-83ab-50eb8ef1a793_fixed.java
index 7116384..c87f47b 100644
--- a/tmp/aa1d4a63-2792-454a-a17f-0a307a95ef1c_buggy.java
+++ b/tmp/ddd13f7c-1d65-4c03-83ab-50eb8ef1a793_fixed.java
@@ -1,39 +1,48 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
+        while (bitsCachedSize < count) {
+            final long nextByte = in.read();
+            if (nextByte < 0) {
+                return nextByte;
+            }
+            // prevent overflow of bitsCached: if already have >=56 bits cached, don't shift anymore
+            if (bitsCachedSize >= 56) {
+                // the cache is "full enough", stop reading bytes
+                break;
+            }
+            if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                bitsCached |= (nextByte << bitsCachedSize);
+            } else {
+                bitsCached <<= 8;
+                bitsCached |= nextByte;
+            }
+            bitsCachedSize += 8;
+        }
+
+        // Now fill bits if still not enough and possible, but without overflowing bitsCached (>63 bits)
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
                 return nextByte;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
