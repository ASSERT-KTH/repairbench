diff --git a/tmp/347ec4a9-bdb4-4796-8d48-ee8daf1d3bf1_buggy.java b/tmp/1f13e4fc-2c06-4622-9da3-23d41e3069e5_fixed.java
index 7116384..70abf94 100644
--- a/tmp/347ec4a9-bdb4-4796-8d48-ee8daf1d3bf1_buggy.java
+++ b/tmp/1f13e4fc-2c06-4622-9da3-23d41e3069e5_fixed.java
@@ -1,39 +1,60 @@
-    /**
-     * Returns at most 63 bits read from the underlying stream.
-     *
-     * @param count the number of bits to read, must be a positive
-     * number not bigger than 63.
-     * @return the bits concatenated as a long using the stream's byte order.
-     *         -1 if the end of the underlying stream has been reached before reading
-     *         the requested number of bits
-     * @throws IOException on error
-     */
 public long readBits(final int count) throws IOException {
     if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
         throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
     }
     while (bitsCachedSize < count) {
         final long nextByte = in.read();
         if (nextByte < 0) {
             return nextByte;
         }
+        // If we're about to shift more than 63 bits, we need to prevent overflow by not shifting further
+        if (bitsCachedSize <= 55) { // 55 + 8 <= 63, safe to shift
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
+        } else {
+            // Can't cache more bits safely, stop here
+            break;
+        }
+    }
+
+    if (bitsCachedSize < count) {
+        // attempt to fill one last time (stream may have ended during last loop)
+        while (bitsCachedSize < count) {
+            final long nextByte = in.read();
+            if (nextByte < 0) {
+                return -1;
+            }
+            if (bitsCachedSize <= 55) {
+                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                    bitsCached |= (nextByte << bitsCachedSize);
+                } else {
+                    bitsCached <<= 8;
+                    bitsCached |= nextByte;
+                }
+                bitsCachedSize += 8;
+            } else {
+                break;
+            }
+        }
+
+        if (bitsCachedSize < count) {
+            return -1; // couldn't read enough bits
+        }
     }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
 
     final long bitsOut;
     if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
         bitsOut = (bitsCached & MASKS[count]);
         bitsCached >>>= count;
     } else {
         bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+        bitsCached &= MASKS[bitsCachedSize - count]; // discard the consumed bits
     }
     bitsCachedSize -= count;
     return bitsOut;
 }
\ No newline at end of file
