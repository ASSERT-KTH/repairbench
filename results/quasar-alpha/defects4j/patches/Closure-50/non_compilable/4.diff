diff --git a/tmp/65991bae-89e1-4c73-8986-22b4558c94d4_buggy.java b/tmp/20d9d056-f62b-4b75-9f20-674bfbba4d61_fixed.java
index d8b0158..fc8d419 100644
--- a/tmp/65991bae-89e1-4c73-8986-22b4558c94d4_buggy.java
+++ b/tmp/20d9d056-f62b-4b75-9f20-674bfbba4d61_fixed.java
@@ -1,113 +1,142 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   private Node tryFoldArrayJoin(Node n) {
     Node callTarget = n.getFirstChild();
 
     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
       return n;
     }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+    // Bail out if call has more than one argument (only 0 or 1 supported)
+    Node argNode = callTarget.getNext();
+    if (argNode != null && argNode.getNext() != null) {
       return n;
     }
+
+    // If join argument exists but isn't immutable, bail
+    if (argNode != null && !NodeUtil.isImmutableValue(argNode)) {
+      return n;
     }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return n;
     }
 
     // "," is the default, it doesn't need to be explicit
+    String joinString = (argNode == null) ? "," : NodeUtil.getStringValue(argNode);
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
     int foldedSize = 0;
     Node prev = null;
     Node elem = arrayNode.getFirstChild();
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
         if (sb == null) {
           sb = new StringBuilder();
         } else {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getArrayElementStringValue(elem));
       } else {
         if (sb != null) {
           Preconditions.checkNotNull(prev);
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(
               Node.newString(sb.toString()).copyInformationFrom(prev));
           sb = null;
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       prev = elem;
       elem = elem.getNext();
     }
 
     if (sb != null) {
       Preconditions.checkNotNull(prev);
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(
           Node.newString(sb.toString()).copyInformationFrom(prev));
     }
-    // one for each comma.
+
+    // Adjusted folded size based on separator
+    if (",".equals(joinString)) {
+      // Default join string (comma), one comma between elements
       foldedSize += arrayFoldedChildren.size() - 1;
+    } else {
+      // explicit join string argument: length * (#elements -1)
+      int sepCount = arrayFoldedChildren.size() - 1;
+      foldedSize += sepCount * joinString.length();
+    }
 
     int originalSize = InlineCostEstimator.getCost(n);
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         n.getParent().replaceChild(n, emptyStringNode);
         reportCodeChange();
         return emptyStringNode;
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
         if (foldedSize > originalSize) {
           return n;
         }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString("").copyInformationFrom(n),
               foldedStringNode);
           foldedStringNode = replacement;
         }
         n.getParent().replaceChild(n, foldedStringNode);
         reportCodeChange();
         return foldedStringNode;
       default:
-        // No folding could actually be performed.
+        // No folding could actually be performed (arrayFoldedChildren == original array child count)
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return n;
         }
         int kJoinOverhead = "[].join()".length();
         foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+        foldedSize += (argNode != null) ? InlineCostEstimator.getCost(argNode) : 0;
         if (foldedSize > originalSize) {
           return n;
         }
+
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+
+        // Replace `join` argument with null or remove extra arg if join is ","
+        if (",".equals(joinString)) {
+          if (argNode != null) {
+            // remove explicit ',' separator argument
+            n.removeChildAfter(callTarget);
+          }
+        } else {
+          // update argument to folded immutable separator value
+          if (argNode != null) {
+            Node newArg = NodeUtil.makeImmutableValueLiteral(joinString)
+                .copyInformationFrom(argNode);
+            n.replaceChild(argNode, newArg);
+          }
+        }
         reportCodeChange();
         break;
     }
 
     return n;
   }
\ No newline at end of file
