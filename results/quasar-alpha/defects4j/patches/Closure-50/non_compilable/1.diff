diff --git a/tmp/e054ec67-86a7-408d-a83d-3fee7a9530c2_buggy.java b/tmp/559ce406-ee20-4369-83e1-78bd591933b2_fixed.java
index d8b0158..123aeb3 100644
--- a/tmp/e054ec67-86a7-408d-a83d-3fee7a9530c2_buggy.java
+++ b/tmp/559ce406-ee20-4369-83e1-78bd591933b2_fixed.java
@@ -1,113 +1,135 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 private Node tryFoldArrayJoin(Node n) {
   Node callTarget = n.getFirstChild();
 
+  // Validate that the callee is a property get
   if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
     return n;
   }
 
-    Node right = callTarget.getNext();
-    if (right != null) {
-      if (!NodeUtil.isImmutableValue(right)) {
+  // Check for a single argument in .join(), or zero argument
+  Node arg1 = callTarget.getNext();
+  Node arg2 = null;
+  if (arg1 != null) {
+    arg2 = arg1.getNext();
+    if (arg2 != null) {
+      // more than one argument to join, do not fold
+      return n;
+    }
+    if (!NodeUtil.isImmutableValue(arg1)) {
       return n;
     }
   }
 
   Node arrayNode = callTarget.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return n;
   }
 
-      // "," is the default, it doesn't need to be explicit
+  // Evaluate join separator argument: undefined => ','
+  String joinString;
+  if (arg1 == null || (arg1.isName() && "undefined".equals(arg1.getString()))) {
+    joinString = ",";
+  } else {
+    joinString = NodeUtil.getStringValue(arg1);
+  }
 
-    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = null;
   int foldedSize = 0;
   Node prev = null;
   Node elem = arrayNode.getFirstChild();
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
       if (sb == null) {
         sb = new StringBuilder();
       } else {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getArrayElementStringValue(elem));
     } else {
       if (sb != null) {
         Preconditions.checkNotNull(prev);
         // +2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(
             Node.newString(sb.toString()).copyInformationFrom(prev));
         sb = null;
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     prev = elem;
     elem = elem.getNext();
   }
 
   if (sb != null) {
     Preconditions.checkNotNull(prev);
-      // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(
         Node.newString(sb.toString()).copyInformationFrom(prev));
   }
-    // one for each comma.
+  // one for each comma or join separator between elements
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
-      case 0:
+    case 0: {
       Node emptyStringNode = Node.newString("");
       n.getParent().replaceChild(n, emptyStringNode);
       reportCodeChange();
       return emptyStringNode;
-      case 1:
+    }
+    case 1: {
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString("").copyInformationFrom(n),
             foldedStringNode);
         foldedStringNode = replacement;
       }
       n.getParent().replaceChild(n, foldedStringNode);
       reportCodeChange();
       return foldedStringNode;
+    }
     default:
-        // No folding could actually be performed.
+      // No folding could actually be performed (leave unchanged)
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return n;
       }
+
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
+      foldedSize += (arg1 != null) ? InlineCostEstimator.getCost(arg1) : 0;
       if (foldedSize > originalSize) {
         return n;
       }
       arrayNode.detachChildren();
-        for (Node node : arrayFoldedChildren) {
-          arrayNode.addChildToBack(node);
-        }
-        reportCodeChange();
-        break;
+      for (Node e : arrayFoldedChildren) {
+        arrayNode.addChildToBack(e);
       }
 
+      // transform the call to have .join() with no argument (if explicit arg is default ',')
+      if (arg1 == null || (arg1.isString() && ",".equals(arg1.getString())) ||
+          (arg1.isName() && "undefined".equals(arg1.getString()))) {
+        // remove existing arg to use default separator
+        if (arg1 != null) {
+          n.removeChild(arg1);
+        }
+      }
+      reportCodeChange();
       return n;
   }
+}
\ No newline at end of file
