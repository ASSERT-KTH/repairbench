diff --git a/tmp/b75ebd7a-e624-4ad6-958b-289bec1971aa_buggy.java b/tmp/595d7f65-eb34-4f45-934a-b20bf89d1f45_fixed.java
index 4aff4e4..681a91a 100644
--- a/tmp/b75ebd7a-e624-4ad6-958b-289bec1971aa_buggy.java
+++ b/tmp/595d7f65-eb34-4f45-934a-b20bf89d1f45_fixed.java
@@ -1,15 +1,26 @@
 private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {
-        // try to resolve relative urls to abs, and optionally update the attribute so output html has abs.
-        // rels without a baseuri get removed
-        String value = el.absUrl(attr.getKey());
+    String value;
+
+    // Attempt to resolve to absolute URL if protocol is http or https; otherwise, use raw attribute value
+    String rawVal = attr.getValue();
+    String lcRaw = rawVal.toLowerCase();
+    boolean isStandardScheme = lcRaw.startsWith("http:") || lcRaw.startsWith("https:");
+
+    if (isStandardScheme) {
+        value = el.absUrl(attr.getKey());
         if (!preserveRelativeLinks)
             attr.setValue(value);
+    } else {
+        value = rawVal;
+    }
+
+    String lcValue = value.toLowerCase();
 
     for (Protocol protocol : protocols) {
-            String prot = protocol.toString() + ":";
-            if (value.toLowerCase().startsWith(prot)) {
+        String prot = protocol.toString().toLowerCase() + ":";
+        if (lcValue.startsWith(prot)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
