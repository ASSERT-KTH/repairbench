diff --git a/tmp/46520f77-f668-4e04-b3c9-d82b743d49ae_buggy.java b/tmp/d01a9113-ac7f-48b5-81ec-783742774604_fixed.java
index 71189c3..7567496 100644
--- a/tmp/46520f77-f668-4e04-b3c9-d82b743d49ae_buggy.java
+++ b/tmp/d01a9113-ac7f-48b5-81ec-783742774604_fixed.java
@@ -1,46 +1,53 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
-            boolean validate = option.isRequired() || option instanceof Group;
-            if (validate) {
+        boolean validateNow = option.isRequired() || option instanceof Group;
+        if (validateNow) {
             option.validate(commandLine);
         }
 
-            // if the child option is present then validate it
+        // if the child option is present then validate its associated argument values
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
-                option.validate(commandLine);
+            // validate argument values of option
+            List values = commandLine.getValues(option);
+            if (values != null) {
+                for (Object value : values) {
+                    if (value instanceof String) {
+                        option.getArgument().validate((String) value);
+                    }
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
