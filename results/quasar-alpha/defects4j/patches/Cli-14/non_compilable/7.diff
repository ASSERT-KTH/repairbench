diff --git a/tmp/9e013274-c396-422d-b33b-c21065ec3482_buggy.java b/tmp/557a8771-f00d-4ee6-9466-b9f6cb6c479c_fixed.java
index 71189c3..c01ee6f 100644
--- a/tmp/9e013274-c396-422d-b33b-c21065ec3482_buggy.java
+++ b/tmp/557a8771-f00d-4ee6-9466-b9f6cb6c479c_fixed.java
@@ -1,46 +1,62 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
-                option.validate(commandLine);
+            // validate argument(s), if present
+            List values = commandLine.getValues(option);
+            if (values != null) {
+                for (Object val : values) {
+                    String strVal;
+                    if (val instanceof String) {
+                        strVal = (String) val;
+                    } else if (val != null) {
+                        strVal = val.toString();
+                    } else {
+                        strVal = null;
+                    }
+                    option.validate(strVal);
+                }
+            } else {
+                option.validate((String) null);
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
