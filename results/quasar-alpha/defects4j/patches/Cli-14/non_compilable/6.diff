diff --git a/tmp/dba37b04-0b87-46c2-a9aa-18aa31821c3e_buggy.java b/tmp/5f0a5993-413d-41c9-9870-f1d0c454d436_fixed.java
index 71189c3..6c21877 100644
--- a/tmp/dba37b04-0b87-46c2-a9aa-18aa31821c3e_buggy.java
+++ b/tmp/5f0a5993-413d-41c9-9870-f1d0c454d436_fixed.java
@@ -1,46 +1,63 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
-                option.validate(commandLine);
+            // get the value(s) associated with the option
+            Object value = commandLine.getValue(option);
+
+            if (value instanceof List) {
+                for (Object v : (List) value) {
+                    if (v instanceof File) {
+                        option.validate(commandLine, (File) v);
+                    } else {
+                        option.validate(commandLine, v != null ? v.toString() : null);
+                    }
+                }
+            } else {
+                if (value instanceof File) {
+                    option.validate(commandLine, (File) value);
+                } else {
+                    option.validate(commandLine, value != null ? value.toString() : null);
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
