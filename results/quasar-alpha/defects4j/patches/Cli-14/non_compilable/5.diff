diff --git a/tmp/5256b7ab-039f-48ed-87fe-b95c1619f9bf_buggy.java b/tmp/f2c2cee9-badf-4ff5-b578-a1bccd87c0ba_fixed.java
index 71189c3..048a54c 100644
--- a/tmp/5256b7ab-039f-48ed-87fe-b95c1619f9bf_buggy.java
+++ b/tmp/f2c2cee9-badf-4ff5-b578-a1bccd87c0ba_fixed.java
@@ -1,46 +1,60 @@
 public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
+            // fetch all values for this option
+            List values = commandLine.getValues(option);
+
+            if (values != null) {
+                for (Object value : values) {
+                    // if the value is a File, convert it to its absolute path string
+                    if (value instanceof java.io.File) {
+                        value = ((java.io.File) value).getAbsolutePath();
+                    }
+                    // apply validators that expect a string-like value
+                    option.validate(commandLine, value);
+                }
+            } else {
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
