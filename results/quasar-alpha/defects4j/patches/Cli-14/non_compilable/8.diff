diff --git a/tmp/e6142bf6-e798-49ea-a134-5b844ee5ee9a_buggy.java b/tmp/21d8b3a0-f416-4b0a-87b1-1ce0fd613da4_fixed.java
index 71189c3..c3f0271 100644
--- a/tmp/e6142bf6-e798-49ea-a134-5b844ee5ee9a_buggy.java
+++ b/tmp/21d8b3a0-f416-4b0a-87b1-1ce0fd613da4_fixed.java
@@ -1,46 +1,56 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
             option.validate(commandLine);
+
+            // validate argument values associated with the option
+            List values = commandLine.getValues(option);
+            if (values != null) {
+                for (Object value : values) {
+                    // validate string value only if possible
+                    if (value instanceof String) {
+                        option.validate(commandLine, (String) value);
+                    }
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
-        // too few option
+    // too few options
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
