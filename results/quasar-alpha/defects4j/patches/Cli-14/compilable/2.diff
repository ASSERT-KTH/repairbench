diff --git a/tmp/4e6d4ea0-9ff7-4ae6-9f04-282a16a3990c_buggy.java b/tmp/6771d4ec-9d7e-4229-854a-0a3826ac3a51_fixed.java
index 71189c3..be6ed0f 100644
--- a/tmp/4e6d4ea0-9ff7-4ae6-9f04-282a16a3990c_buggy.java
+++ b/tmp/6771d4ec-9d7e-4229-854a-0a3826ac3a51_fixed.java
@@ -1,46 +1,59 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
 
                 break;
             }
 
-                option.validate(commandLine);
+            // validate argument values associated with this option
+            Object value = commandLine.getValue(option);
+            if (value instanceof List) {
+                List<?> values = (List<?>) value;
+                for (Object item : values) {
+                    if (item instanceof Option) {
+                        ((Option) item).validate(commandLine);
+                    }
+                    // else assume primitive argument, validation done
+                }
+            } else if (value instanceof Option) {
+                ((Option) value).validate(commandLine);
+            }
+            // else assume primitive argument, validation done when setting value
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
