diff --git a/tmp/261bb364-7479-4316-83e0-0c46be0606b3_buggy.java b/tmp/9cd3b0e3-c00e-459a-8141-fd35b2b61a6a_fixed.java
index a7e6997..fd1830d 100644
--- a/tmp/261bb364-7479-4316-83e0-0c46be0606b3_buggy.java
+++ b/tmp/9cd3b0e3-c00e-459a-8141-fd35b2b61a6a_fixed.java
@@ -1,12 +1,32 @@
-    /**
-     * Tells if the token looks like a short option.
-     * 
-     * @param token
-     */
 private boolean isShortOption(String token)
 {
     // short options (-S, -SV, -S=V, -SV1=V2, -S1S2)
-        return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));
+    if (!token.startsWith("-") || token.length() < 2)
+    {
+        return false;
+    }
+
+    String tokenBody = token.substring(1);
+
+    // If token contains '=', check leading part before '='
+    String opt;
+    int eqIdx = tokenBody.indexOf('=');
+    if (eqIdx != -1)
+    {
+        opt = tokenBody.substring(0, eqIdx);
+    }
+    else
+    {
+        opt = tokenBody;
+    }
+
+    // Check if the initial segment corresponds to a known short option
+    // Try the full token body first
+    if (options.hasShortOption(opt))
+    {
+        return true;
+    }
 
-        // remove leading "-" and "=value"
+    // Fallback: check only the first character as a short option (compatible with clustering)
+    return opt.length() == 1 && options.hasShortOption(opt);
 }
\ No newline at end of file
