diff --git a/tmp/c7520a2a-8fef-4012-8894-9552c01d332e_buggy.java b/tmp/60c0cc83-f123-40c6-83cf-64fbf608a8de_fixed.java
index 1a63a66..310fde5 100644
--- a/tmp/c7520a2a-8fef-4012-8894-9552c01d332e_buggy.java
+++ b/tmp/60c0cc83-f123-40c6-83cf-64fbf608a8de_fixed.java
@@ -1,21 +1,34 @@
 @Override
 @Deprecated
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values (`Void`, `NoClass`), so can not quite do yet.
-        // TODO: fix in 2.8
-            /*
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-                    */
+    // Avoid constructing default implementations that use abstract types as super-class;
+    // may retain mix-ins and annotations. This fixes issue #1125.
+    if (_class.isAssignableFrom(subclass)) {
+        return new SimpleType(subclass, _bindings, superTypeChain(subclass), _superInterfaces,
+                _valueHandler, _typeHandler, _asStatic);
+    }
+    // no relationship; fallback
     return new SimpleType(subclass, _bindings, this, _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
-        // Otherwise, stitch together the hierarchy. First, super-class
-        // if not found, try a super-interface
-        // should not get here but...
+}
+
+// helper method to find direct super-type within hierarchy (or this)
+private JavaType superTypeChain(Class<?> subclass) {
+    if (subclass == null || subclass == _class) {
+        return this;
+    }
+    Class<?> superClass = subclass.getSuperclass();
+    if (superClass != null && _class.isAssignableFrom(superClass)) {
+        return superTypeChain(superClass);
+    }
+    for (Class<?> iface : subclass.getInterfaces()) {
+        if (_class.isAssignableFrom(iface)) {
+            return superTypeChain(iface);
+        }
+    }
+    return this;
 }
\ No newline at end of file
