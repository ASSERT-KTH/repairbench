diff --git a/tmp/d6e9abcc-cbc0-44ca-b0dd-a0a45b076c58_buggy.java b/tmp/fd5e9f7a-a82b-4192-909a-a747a34e3f65_fixed.java
index 10616db..292ab48 100644
--- a/tmp/d6e9abcc-cbc0-44ca-b0dd-a0a45b076c58_buggy.java
+++ b/tmp/fd5e9f7a-a82b-4192-909a-a747a34e3f65_fixed.java
@@ -1,19 +1,29 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
-        // overridden as superclass algorithm can't handle
-        // 2004-02-29 + 48 months -> 2008-02-29 type dates
+    // overridden as superclass algorithm can't handle leap-day edge cases
     if (valueToAdd == 0) {
         return values;
     }
-            // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
-            instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        long newInstant = add(instant, valueToAdd);
+        int[] newValues = iChronology.get(partial, newInstant);
+
+        // special adjustment for end-of-month scenarios like 31->28
+        DateTimeField addedField = partial.getField(fieldIndex);
+        int max = addedField.getMaximumValue(newInstant);
+        if (newValues[fieldIndex] > max) {
+            newValues[fieldIndex] = max;
+            // reassemble instant with adjusted field to handle days overflow
+            newInstant = addedField.set(newInstant, max);
+            newValues = iChronology.get(partial, newInstant);
+        }
+
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
