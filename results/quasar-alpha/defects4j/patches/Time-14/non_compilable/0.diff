diff --git a/tmp/f51b42ac-74de-4092-aae3-c84b5a2ec440_buggy.java b/tmp/e72ab1a2-ae5b-4599-97bc-e04e39d438e6_fixed.java
index 10616db..7121eb5 100644
--- a/tmp/f51b42ac-74de-4092-aae3-c84b5a2ec440_buggy.java
+++ b/tmp/e72ab1a2-ae5b-4599-97bc-e04e39d438e6_fixed.java
@@ -1,19 +1,46 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+        int[] newValues = iChronology.get(partial, instant);
+
+        // adjust for MonthDay-like structures where day may be invalid due to end of month handling
+        DateTimeField field = partial.getField(fieldIndex);
+        int max = field.getMaximumValue(instant);
+        if (newValues[fieldIndex] > max) {
+            newValues[fieldIndex] = max;
+            // Re-set lower-order fields to adjust instant accordingly
+            // e.g., day overflow in Feb after month addition
+            instant = 0L;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                DateTimeField f = partial.getField(i);
+                int v = newValues[i];
+                // clamp current field if necessary
+                if (i == fieldIndex) {
+                    v = newValues[i]; // already clamped day
+                } else if (i > fieldIndex) {
+                    int maxVal = f.getMaximumValue(instant);
+                    if (newValues[i] > maxVal) {
+                        v = maxVal;
+                    }
+                }
+                instant = f.set(instant, v);
+            }
+            newValues = iChronology.get(partial, instant);
+        }
+
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
