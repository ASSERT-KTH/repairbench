diff --git a/tmp/0c817320-b546-4906-aaeb-48d9af9eacd3_buggy.java b/tmp/00e6146f-f4f4-4416-8229-8a650fc38301_fixed.java
index 56b2d66..4fac1b3 100644
--- a/tmp/0c817320-b546-4906-aaeb-48d9af9eacd3_buggy.java
+++ b/tmp/00e6146f-f4f4-4416-8229-8a650fc38301_fixed.java
@@ -1,45 +1,66 @@
 /**
  * Removes the phase 1 objective function, positive cost non-artificial variables,
  * and the non-basic artificial variables from this tableau.
  */
 protected void dropPhase1Objective() {
     if (getNumObjectiveFunctions() == 1) {
         return;
     }
 
     List<Integer> columnsToDrop = new ArrayList<Integer>();
     columnsToDrop.add(0);
 
     // positive cost non-artificial variables
     for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
         final double entry = tableau.getEntry(0, i);
         if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
             columnsToDrop.add(i);
         }
     }
 
     // non-basic artificial variables
     for (int i = 0; i < getNumArtificialVariables(); i++) {
         int col = i + getArtificialVariableOffset();
         if (getBasicRow(col) == null) {
             columnsToDrop.add(col);
         }
     }
 
     double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
     for (int i = 1; i < getHeight(); i++) {
         int col = 0;
         for (int j = 0; j < getWidth(); j++) {
             if (!columnsToDrop.contains(j)) {
                 matrix[i - 1][col++] = tableau.getEntry(i, j);
             }
         }
     }
 
-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
-          columnLabels.remove((int) columnsToDrop.get(i));
+    // Remove from column labels in descending order to avoid misalignment
+    for (int idx = columnsToDrop.size() - 1; idx >= 0; idx--) {
+        columnLabels.remove((int) columnsToDrop.get(idx));
     }
 
     this.tableau = new Array2DRowRealMatrix(matrix);
     this.numArtificialVariables = 0;
+
+    // remove the discarded columns from basic variables list that referred to phase 1 info
+    Set<Integer> colSet = new HashSet<>(columnsToDrop);
+    Map<Integer, Integer> newBasicVariables = new HashMap<>();
+    for (Map.Entry<Integer, Integer> entry : basicVariables.entrySet()) {
+        int column = entry.getKey();
+        int row = entry.getValue();
+        if (!colSet.contains(column)) {
+            // compute the new column index after dropping columns to the left of it
+            int numDroppedBefore = 0;
+            for (Integer colToDrop : columnsToDrop) {
+                if (colToDrop < column) {
+                    numDroppedBefore++;
+                }
+            }
+            int newColumn = column - numDroppedBefore;
+            newBasicVariables.put(newColumn, row - 1); // shift row index as first row is removed
+        }
+    }
+    this.basicVariables = newBasicVariables;
 }
\ No newline at end of file
