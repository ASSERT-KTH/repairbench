diff --git a/tmp/e337684e-ca65-445d-8de8-aaca18efa895_buggy.java b/tmp/b8dadfd8-a0b9-4516-9276-4f310aa224a8_fixed.java
index 5f96616..cf2efa8 100644
--- a/tmp/e337684e-ca65-445d-8de8-aaca18efa895_buggy.java
+++ b/tmp/b8dadfd8-a0b9-4516-9276-4f310aa224a8_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // If the constraint is a union, try to match each alternate.
+  if (constraint.isUnionType()) {
+    for (JSType alternate : constraint.toMaybeUnionType().getAlternates()) {
+      matchConstraint(alternate);
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
