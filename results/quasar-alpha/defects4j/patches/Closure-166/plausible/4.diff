diff --git a/tmp/d790e5c5-57d8-4298-959f-5fa3ceed7566_buggy.java b/tmp/456b3558-2df2-43e5-92bd-1ed955b1b524_fixed.java
index 5f96616..fec1b6e 100644
--- a/tmp/d790e5c5-57d8-4298-959f-5fa3ceed7566_buggy.java
+++ b/tmp/456b3558-2df2-43e5-92bd-1ed955b1b524_fixed.java
@@ -1,20 +1,28 @@
 @Override
 public void matchConstraint(JSType constraint) {
   // We only want to match constraints on anonymous types.
   if (hasReferenceName()) {
     return;
   }
 
+  // If the constraint is a union, try to match all members.
+  if (constraint.isUnionType()) {
+    for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
+      matchConstraint(alt);
+    }
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
   //
   // param constraint {{prop: (number|undefined)}}
   // function f(constraint) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraint.isRecordType()) {
     matchRecordTypeConstraint(constraint.toObjectType());
   }
 }
\ No newline at end of file
