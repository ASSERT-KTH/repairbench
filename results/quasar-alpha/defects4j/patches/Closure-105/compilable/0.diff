diff --git a/tmp/87c22d15-2b72-4baa-a7bd-c246ffa88309_buggy.java b/tmp/aed92a03-faed-4252-a332-dde7f1459549_fixed.java
index ef65dd9..7fe6ecf 100644
--- a/tmp/87c22d15-2b72-4baa-a7bd-c246ffa88309_buggy.java
+++ b/tmp/aed92a03-faed-4252-a332-dde7f1459549_fixed.java
@@ -1,92 +1,108 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
   // Merges adjacent String nodes.
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
       if (sb.length() > 0) {
         // + 2 for the quotes.
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
       }
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
     // + 2 for the quotes.
     foldedSize += sb.length() + 2;
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
   // one for each comma.
   foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
         // If the Node is not a string literal, ensure that
         // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
-        // No folding could actually be performed.
-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
-          return;
+      // If any folding was performed (i.e., the folded list has fewer nodes), fold
+      boolean didFold = (arrayFoldedChildren.size() < arrayNode.getChildCount());
+
+      boolean gainByFullyFolding = didFold && (foldedSize <= originalSize);
+      boolean trivialCommaReduction = !didFold && !joinString.isEmpty();
+
+      // Special case: merge leading/trailing/multiple empty string elements
+      // turned into separators (empty string stringified to "").
+      // We want to enable folding like ['', '', foo].join(',')
+      // to [',', foo].join(','), even if it isn't a size win,
+      // but only for join strings with reasonable length (1?).
+      //
+      // So, if the only folds happening are zero-length literal merges that
+      // become joinString concatenations, accept that by default if joinString.length==1
+      if (!gainByFullyFolding && didFold &&
+          joinString.length() == 1) {
+        gainByFullyFolding = true;
       }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
+
+      if (!gainByFullyFolding) {
         return;
       }
+
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
+      foldedSize += " [].join()".length();
+      foldedSize += InlineCostEstimator.getCost(right);
+
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
