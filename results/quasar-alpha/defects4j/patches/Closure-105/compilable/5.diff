diff --git a/tmp/c090391e-0560-4c59-af69-530cc6beb8f3_buggy.java b/tmp/d36b716f-d9af-48a4-948b-df77fbca5d89_fixed.java
index ef65dd9..c322dbe 100644
--- a/tmp/c090391e-0560-4c59-af69-530cc6beb8f3_buggy.java
+++ b/tmp/d36b716f-d9af-48a4-948b-df77fbca5d89_fixed.java
@@ -1,92 +1,104 @@
 /**
  * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
  */
 void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                        Node parent) {
   if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
     return;
   }
 
   Node arrayNode = left.getFirstChild();
   Node functionName = arrayNode.getNext();
 
   if ((arrayNode.getType() != Token.ARRAYLIT) ||
       !functionName.getString().equals("join")) {
     return;
   }
 
   String joinString = NodeUtil.getStringValue(right);
   List<Node> arrayFoldedChildren = Lists.newLinkedList();
   StringBuilder sb = new StringBuilder();
   int foldedSize = 0;
   Node elem = arrayNode.getFirstChild();
-    // Merges adjacent String nodes.
+
   while (elem != null) {
     if (NodeUtil.isImmutableValue(elem)) {
       if (sb.length() > 0) {
         sb.append(joinString);
       }
       sb.append(NodeUtil.getStringValue(elem));
     } else {
       if (sb.length() > 0) {
-          // + 2 for the quotes.
+        // +2 for the quotes
         foldedSize += sb.length() + 2;
         arrayFoldedChildren.add(Node.newString(sb.toString()));
         sb = new StringBuilder();
       }
+
+      // Add separator *before* the next non-constant element if needed
+      if (!arrayFoldedChildren.isEmpty()) {  // not the first element
+        foldedSize += joinString.length();
+      }
+
       foldedSize += InlineCostEstimator.getCost(elem);
       arrayFoldedChildren.add(elem);
     }
     elem = elem.getNext();
   }
 
   if (sb.length() > 0) {
-      // + 2 for the quotes.
+    // +2 for the quotes
     foldedSize += sb.length() + 2;
+
+    if (!arrayFoldedChildren.isEmpty()) {
+      // A separator goes before any trailing folded string, if not first item
+      foldedSize += joinString.length();
+    }
+
     arrayFoldedChildren.add(Node.newString(sb.toString()));
   }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
   int originalSize = InlineCostEstimator.getCost(n);
+
   switch (arrayFoldedChildren.size()) {
     case 0:
       Node emptyStringNode = Node.newString("");
       parent.replaceChild(n, emptyStringNode);
       break;
 
     case 1:
       Node foldedStringNode = arrayFoldedChildren.remove(0);
       if (foldedSize > originalSize) {
         return;
       }
       arrayNode.detachChildren();
       if (foldedStringNode.getType() != Token.STRING) {
-          // If the Node is not a string literal, ensure that
-          // it is coerced to a string.
         Node replacement = new Node(Token.ADD,
             Node.newString(""), foldedStringNode);
         foldedStringNode = replacement;
       }
       parent.replaceChild(n, foldedStringNode);
       break;
 
     default:
-        // No folding could actually be performed.
+      // No folding if nothing is collapsed.
       if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
         return;
       }
+
       int kJoinOverhead = "[].join()".length();
       foldedSize += kJoinOverhead;
       foldedSize += InlineCostEstimator.getCost(right);
+
       if (foldedSize > originalSize) {
         return;
       }
+
       arrayNode.detachChildren();
       for (Node node : arrayFoldedChildren) {
         arrayNode.addChildToBack(node);
       }
       break;
   }
   t.getCompiler().reportCodeChange();
 }
\ No newline at end of file
