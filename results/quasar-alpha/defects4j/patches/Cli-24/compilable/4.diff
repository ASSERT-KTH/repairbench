diff --git a/tmp/ab713e92-d850-4f4d-8c04-25c2080c178d_buggy.java b/tmp/76ee0c67-bf91-45d0-a218-2c685212c245_fixed.java
index 229b3e7..dde952c 100644
--- a/tmp/ab713e92-d850-4f4d-8c04-25c2080c178d_buggy.java
+++ b/tmp/76ee0c67-bf91-45d0-a218-2c685212c245_fixed.java
@@ -1,55 +1,61 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    // Remove the early failure check: because when width < indent, we still may need to chunk text letter by letter
+    //if (nextLineTabStop >= width)
+    //{
+    //    throw new IllegalStateException("Total width is less than the width of the argument and indent " +
+    //                                    "- no room for the description");
+    //}
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
+
+        // choose max width for search on this line - if indent >= width, after indent the remaining width can be 0 or negative
+        // so for chunking we must allow wrapping at least after the indent, even if it means just 1 char per line
+        int searchWidth = Math.max(width, nextLineTabStop + 1);
+
+        pos = findWrapPos(text, searchWidth, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // if very long word forces wrapping, do not wrap at indent edge
+        if ((text.length() > searchWidth) && (pos == nextLineTabStop - 1))
         {
-                pos = width;
+            pos = searchWidth;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
