diff --git a/tmp/e43cf018-be56-4210-bcd1-061cdb5dfc84_buggy.java b/tmp/3a936770-625f-4f8d-a68d-028ef7ecf496_fixed.java
index 229b3e7..a07feed 100644
--- a/tmp/e43cf018-be56-4210-bcd1-061cdb5dfc84_buggy.java
+++ b/tmp/3a936770-625f-4f8d-a68d-028ef7ecf496_fixed.java
@@ -1,55 +1,55 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Modification: if indent exceeds width, ignore indenting on wrapped lines (CL CLI-162)
+    boolean indenting = nextLineTabStop < width;
+
+    // avoid throwing exception; instead ignore indenting if indent >= width
+    if (!indenting)
     {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
+        nextLineTabStop = 0;  // no indent
     }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        text = (indenting ? padding : "") + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
