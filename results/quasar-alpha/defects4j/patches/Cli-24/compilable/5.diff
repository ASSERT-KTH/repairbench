diff --git a/tmp/17158255-af05-4c06-9c91-e545e92103b6_buggy.java b/tmp/acb1f29d-6410-4adb-9bc2-f913b51c90d4_fixed.java
index 229b3e7..7a7b225 100644
--- a/tmp/17158255-af05-4c06-9c91-e545e92103b6_buggy.java
+++ b/tmp/acb1f29d-6410-4adb-9bc2-f913b51c90d4_fixed.java
@@ -1,55 +1,50 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            throw new IllegalStateException("Total width is less than the width of the argument and indent " +
-                                            "- no room for the description");
-        }
+    // remove this restriction which causes IllegalStateException
+    // if (nextLineTabStop >= width) ...
+    // instead accept nextLineTabStop >= width, but treat indent accordingly
 
     // all following lines must be padded with nextLineTabStop space 
     // characters
-        final String padding = createPadding(nextLineTabStop);
+    final String padding;
+    if (nextLineTabStop > 0)
+    {
+        padding = createPadding(nextLineTabStop);
+    }
+    else
+    {
+        padding = "";
+    }
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // If word is longer than line width, break forcibly at width
+        if ((text.length() > width) && (pos <= nextLineTabStop))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
