diff --git a/tmp/befcf2de-cb08-4946-a22b-a0dee73da568_buggy.java b/tmp/5a3e7ec4-9120-4315-ab87-c8e72ed4b27e_fixed.java
index 1ad070d..8be35c1 100644
--- a/tmp/befcf2de-cb08-4946-a22b-a0dee73da568_buggy.java
+++ b/tmp/5a3e7ec4-9120-4315-ab87-c8e72ed4b27e_fixed.java
@@ -1,38 +1,41 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * the escape character is not allowed at end of stream
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
         case 'r':
             return CR;
         case 'n':
             return LF;
         case 't':
             return TAB;
         case 'b':
             return BACKSPACE;
         case 'f':
             return FF;
         case CR:
         case LF:
-        case FF: // TODO is this correct?
-        case TAB: // TODO is this correct? Do tabs need to be escaped?
-        case BACKSPACE: // TODO is this correct?
+        case FF:
+        case TAB:
+        case BACKSPACE:
+            return c;
+        case 'N':
+        case 'a':
+            // treat \N or \a as escaped literal characters
             return c;
         case END_OF_STREAM:
             throw new IOException("EOF whilst processing escape sequence");
         default:
-            // Now check for meta-characters
+            // For any other character, treat as escaped literal character
             return c;
-            // indicate unexpected char - available from in.getLastChar()
     }
 }
\ No newline at end of file
