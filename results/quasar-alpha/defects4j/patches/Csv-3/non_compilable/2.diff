diff --git a/tmp/f6ec7938-3beb-47e3-9ee1-c87108191fad_buggy.java b/tmp/e091887b-ec2e-4745-b245-9de0b30add13_fixed.java
index 1ad070d..aad4410 100644
--- a/tmp/f6ec7938-3beb-47e3-9ee1-c87108191fad_buggy.java
+++ b/tmp/e091887b-ec2e-4745-b245-9de0b30add13_fixed.java
@@ -1,38 +1,42 @@
 /**
  * Handle an escape sequence.
  * The current character must be the escape character.
  * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
  * on the input stream.
  * 
  * @return the unescaped character (as an int) or {@link END_OF_STREAM} if char following the escape is invalid. 
  * @throws IOException if there is a problem reading the stream or the end of stream is detected: 
-     * the escape character is not allowed at end of strem
+ * the escape character is not allowed at end of stream
  */
 int readEscape() throws IOException {
     // the escape char has just been read (normally a backslash)
     final int c = in.read();
     switch (c) {
     case 'r':
         return CR;
     case 'n':
         return LF;
     case 't':
         return TAB;
     case 'b':
         return BACKSPACE;
     case 'f':
         return FF;
     case CR:
     case LF:
     case FF: // TODO is this correct?
     case TAB: // TODO is this correct? Do tabs need to be escaped?
     case BACKSPACE: // TODO is this correct?
         return c;
     case END_OF_STREAM:
         throw new IOException("EOF whilst processing escape sequence");
+    // special MySQL-NULL escape \N, leave escaped as is
+    case 'N':
+        return 'N';
     default:
-            // Now check for meta-characters
-                return c;
-            // indicate unexpected char - available from in.getLastChar()
+        // do NOT interpret as escape sequence, instead treat the backslash + character literally
+        // push back the read char so that the escape char is treated as normal text
+        in.unread(c);
+        return '\\';
     }
 }
\ No newline at end of file
