diff --git a/tmp/6cbae965-dc33-403a-a98c-a293d3bd9d2b_buggy.java b/tmp/e3d44a60-2274-4b68-9976-c44204c7414c_fixed.java
index b8e7fdb..59804d5 100644
--- a/tmp/6cbae965-dc33-403a-a98c-a293d3bd9d2b_buggy.java
+++ b/tmp/e3d44a60-2274-4b68-9976-c44204c7414c_fixed.java
@@ -1,15 +1,38 @@
 /**
-     * Attempt to cast this comment to an XML Declaration note.
+ * Attempt to cast this comment to an XML Declaration node.
  * @return an XML declaration if it could be parsed as one, null otherwise.
  */
 public XmlDeclaration asXmlDeclaration() {
     String data = getData();
-        Document doc = Jsoup.parse("<" + data.substring(1, data.length() -1) + ">", baseUri(), Parser.xmlParser());
-        XmlDeclaration decl = null;
-        if (doc.childNodeSize() > 0) {
-            Element el = doc.child(0);
-            decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
+    // Avoid parsing if data is empty or too short to be a declaration
+    if (data == null || data.length() < 2)
+        return null;
+    String inner;
+    try {
+        inner = data.substring(1, data.length() - 1);
+    } catch (StringIndexOutOfBoundsException e) {
+        return null;
+    }
+    Document doc = Jsoup.parse("<" + inner + ">", baseUri(), Parser.xmlParser());
+    if (doc.childNodeSize() == 0)
+        return null;
+    Node first = doc.childNode(0);
+    // Look for an element child
+    Element el = null;
+    if (first instanceof Element) {
+        el = (Element) first;
+    } else {
+        // Or search children for an element
+        for (Node n : doc.childNodes()) {
+            if (n instanceof Element) {
+                el = (Element) n;
+                break;
+            }
+        }
+    }
+    if (el == null)
+        return null;
+    XmlDeclaration decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith("!"));
     decl.attributes().addAll(el.attributes());
-        }
     return decl;
 }
\ No newline at end of file
