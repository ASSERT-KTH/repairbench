diff --git a/tmp/df216f95-f9c4-4db7-80c2-4954fe627bdb_buggy.java b/tmp/a7c47a8d-a471-4318-839f-a6e1534f0f62_fixed.java
index 3b9a3c0..3e03f2a 100644
--- a/tmp/df216f95-f9c4-4db7-80c2-4954fe627bdb_buggy.java
+++ b/tmp/a7c47a8d-a471-4318-839f-a6e1534f0f62_fixed.java
@@ -1,71 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
+    // Skip leading NULs (workaround for tar implementations that insert them)
+    while (start < end) {
+        if (buffer[start] == 0) {
+            // Leading NULs mean missing field -> treat as zero value
+            start++;
+        } else {
+            break;
+        }
+    }
+
     // Must have trailing NUL or space
     byte trailer;
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     } else {
         throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, end - 1, trailer));
     }
     // May have additional NULs or spaces
     trailer = buffer[end - 1];
     if (trailer == 0 || trailer == ' ') {
         end--;
     }
 
+    boolean foundDigit = false;
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
-            }
+        if (currentByte >= '0' && currentByte <= '7') {
+            foundDigit = true;
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        } else if (currentByte == 0 || currentByte == ' ') {
+            // ignore embedded NULs or spaces (workaround for buggy tar creators)
+            continue;
+        } else {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+        }
     }
 
-        return result;
+    // If no digits parsed or only zeros/nuls/spaces, return zero
+    return foundDigit ? result : 0L;
 }
\ No newline at end of file
