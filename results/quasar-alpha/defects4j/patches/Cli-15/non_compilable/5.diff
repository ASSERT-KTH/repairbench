diff --git a/tmp/fd3cb603-c88c-42d8-82d0-a68d293a30f8_buggy.java b/tmp/0b8eb43b-808f-434a-bcc3-88a079bd52bb_fixed.java
index 4e8b037..65b8ccc 100644
--- a/tmp/fd3cb603-c88c-42d8-82d0-a68d293a30f8_buggy.java
+++ b/tmp/0b8eb43b-808f-434a-bcc3-88a079bd52bb_fixed.java
@@ -1,20 +1,33 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
-        // initialize the return list
+public List getValues(final Option option, List defaultValues) {
     List valueList = (List) values.get(option);
 
-        // grab the correct default values
+    // If no values were provided, start with defaultValues
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = defaultValues;
     }
 
-        // augment the list with the default values
+    // If still empty, try global defaults
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = (List) this.defaultValues.get(option);
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
 
-        return valueList == null ? Collections.EMPTY_LIST : valueList;
+    if (valueList == null) {
+        return Collections.EMPTY_LIST;
+    }
+
+    // Defensive copy so as not to modify original list
+    List combined = new ArrayList(valueList);
+
+    // Find additional fallback default values, typically from option's default list.
+    List optionDefaults = (List) this.defaultValues.get(option);
+    if (optionDefaults != null && !optionDefaults.isEmpty()) {
+        int currentSize = combined.size();
+        int maximum = option.getArgument().getMaximum();
+
+        for (int i = currentSize; i < maximum && i < optionDefaults.size(); i++) {
+            combined.add(optionDefaults.get(i));
+        }
+    }
+
+    return combined;
 }
\ No newline at end of file
