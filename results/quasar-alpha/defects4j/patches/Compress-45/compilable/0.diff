diff --git a/tmp/9af1bbd8-d4a5-4f27-b137-c4031c60c0e7_buggy.java b/tmp/8fdea625-c8b5-4acc-b7db-7eed9dd7945d_fixed.java
index 1bbc082..b4798a4 100644
--- a/tmp/9af1bbd8-d4a5-4f27-b137-c4031c60c0e7_buggy.java
+++ b/tmp/8fdea625-c8b5-4acc-b7db-7eed9dd7945d_fixed.java
@@ -1,36 +1,29 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
     if (length < 9) {
+        // Small binary numeric field (<=8 bytes)
+        // check value fits in the given signed long size
+        // The value must fit in (length-1)*8 bits (excluding marker byte)
+        int bits = (length - 1) * 8;
+        long max = (1L << (bits - 1)) - 1;
+        long min = -1L << (bits -1);
+        if (value < min || value > max) {
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+        }
         formatLongBinary(value, buf, offset, length, negative);
-        }
+    } else {
         formatBigIntegerBinary(value, buf, offset, length, negative);
+    }
 
     buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
