diff --git a/tmp/3bc978cc-4057-47a0-af8c-5879be1e90d7_buggy.java b/tmp/18e0730e-6bbc-4e64-b0b1-5df29beb8b91_fixed.java
index 1bbc082..52f5462 100644
--- a/tmp/3bc978cc-4057-47a0-af8c-5879be1e90d7_buggy.java
+++ b/tmp/18e0730e-6bbc-4e64-b0b1-5df29beb8b91_fixed.java
@@ -1,36 +1,20 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
-        // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
     if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // can't encode negative or large values as binary in less than 9 bytes
+        throw new IllegalArgumentException(
+            "Value " + value + " is too large for " + length + " byte field.");
     }
+
     formatBigIntegerBinary(value, buf, offset, length, negative);
-
     buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
