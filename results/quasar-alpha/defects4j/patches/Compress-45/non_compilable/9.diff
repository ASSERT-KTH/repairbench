diff --git a/tmp/337140c6-ba3a-4e56-ab58-b6b5684aef47_buggy.java b/tmp/3308decf-01cf-41c6-8d46-1b0f5b942045_fixed.java
index 1bbc082..ca5d359 100644
--- a/tmp/337140c6-ba3a-4e56-ab58-b6b5684aef47_buggy.java
+++ b/tmp/3308decf-01cf-41c6-8d46-1b0f5b942045_fixed.java
@@ -1,36 +1,26 @@
-    /**
-     * Write an long integer into a buffer as an octal string if this
-     * will fit, or as a binary number otherwise.
-     * 
-     * Uses {@link #formatUnsignedOctalString} to format
-     * the value as an octal string with leading zeros.
-     * The converted number is followed by a space.
-     * 
-     * @param value The value to write into the buffer.
-     * @param buf The destination buffer.
-     * @param offset The starting offset into the buffer.
-     * @param length The length of the buffer.
-     * @return The updated offset.
-     * @throws IllegalArgumentException if the value (and trailer)
-     * will not fit in the buffer.
-     * @since 1.4
-     */
 public static int formatLongOctalOrBinaryBytes(
     final long value, final byte[] buf, final int offset, final int length) {
 
     // Check whether we are dealing with UID/GID or SIZE field
     final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
     final boolean negative = value < 0;
     if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
         return formatLongOctalBytes(value, buf, offset, length);
     }
 
+    // Value is too big for octal, write binary
     if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+        // use standard binary encoding
+        boolean success = formatLongBinary(value, buf, offset, length, negative);
+        if (!success) {
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
         }
+    } else {
+        // use big integer binary
         formatBigIntegerBinary(value, buf, offset, length, negative);
+    }
 
     buf[offset] = (byte) (negative ? 0xff : 0x80);
     return offset + length;
 }
\ No newline at end of file
