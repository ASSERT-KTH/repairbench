diff --git a/tmp/45a7e77f-b50c-4858-89a0-8fa55341d0cd_buggy.java b/tmp/d47af765-fdca-4d98-8a6c-236cc0413b99_fixed.java
index de9af32..bb19944 100644
--- a/tmp/45a7e77f-b50c-4858-89a0-8fa55341d0cd_buggy.java
+++ b/tmp/d47af765-fdca-4d98-8a6c-236cc0413b99_fixed.java
@@ -1,18 +1,26 @@
   /**
    * @see #findCalledFunctions(Node)
    */
   private void findCalledFunctions(
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+      if (child != null && child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
+      // Do not traverse into the callee, only into CALL's argument list
+      // because in JS, the callee may be a function expression which
+      // we'll analyze separately
+      // (e.g., "var f = function() {}; f();" -- f() shouldn't cause inline inside "f = function()")
+      for (Node c = child.getNext(); c != null; c = c.getNext()) {
+        findCalledFunctions(c, changed);
+      }
+      return;
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
\ No newline at end of file
