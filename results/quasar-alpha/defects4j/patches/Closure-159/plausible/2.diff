diff --git a/tmp/e78488ec-15f9-492a-8656-a6373d994ba5_buggy.java b/tmp/61abdd44-1c2a-4004-8f91-8858aadb1cab_fixed.java
index de9af32..c1b474a 100644
--- a/tmp/e78488ec-15f9-492a-8656-a6373d994ba5_buggy.java
+++ b/tmp/61abdd44-1c2a-4004-8f91-8858aadb1cab_fixed.java
@@ -1,18 +1,27 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+    if (child != null && child.getType() == Token.NAME) {
       changed.add(child.getString());
     }
   }
 
+  // If the node is a CALL, don't traverse into the callee child again to avoid double counting
+  // Instead, only recurse on arguments
+  if (node.getType() == Token.CALL) {
+    Node firstArg = node.getFirstChild().getNext();
+    for (Node c = firstArg; c != null; c = c.getNext()) {
+      findCalledFunctions(c, changed);
+    }
+  } else {
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
+}
\ No newline at end of file
