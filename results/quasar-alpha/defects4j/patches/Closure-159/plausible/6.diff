diff --git a/tmp/4ad0b3c6-3e86-454b-9a25-9d4e786d9a10_buggy.java b/tmp/f7eeb2fa-c613-4ca5-acb3-f54c90f4dd91_fixed.java
index de9af32..6d5e756 100644
--- a/tmp/4ad0b3c6-3e86-454b-9a25-9d4e786d9a10_buggy.java
+++ b/tmp/f7eeb2fa-c613-4ca5-acb3-f54c90f4dd91_fixed.java
@@ -1,18 +1,33 @@
 /**
  * @see #findCalledFunctions(Node)
  */
 private void findCalledFunctions(
     Node node, Set<String> changed) {
   Preconditions.checkArgument(changed != null);
   // For each referenced function, add a new reference
   if (node.getType() == Token.CALL) {
     Node child = node.getFirstChild();
+    // For CALL nodes, the callee might be a NAME or a GETPROP (e.g., foo.bar.call)
     if (child.getType() == Token.NAME) {
       changed.add(child.getString());
     }
+    // Also handle calls of the form foo.call(...) where "foo" is a property reference
+    else if (child.getType() == Token.GETPROP) {
+      Node propChild = child.getLastChild();
+      if (propChild != null && propChild.getType() == Token.STRING) {
+        String methodName = propChild.getString();
+        // Specifically detect 'call' or 'apply' as the property
+        if ("call".equals(methodName) || "apply".equals(methodName)) {
+          Node fnNode = child.getFirstChild();
+          if (fnNode != null && fnNode.getType() == Token.NAME) {
+            changed.add(fnNode.getString());
+          }
+        }
+      }
+    }
   }
 
   for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
     findCalledFunctions(c, changed);
   }
 }
\ No newline at end of file
