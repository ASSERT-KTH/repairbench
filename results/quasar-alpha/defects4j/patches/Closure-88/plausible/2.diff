diff --git a/tmp/671423e4-bc11-4388-a8dd-cb5218162691_buggy.java b/tmp/125d2725-7c83-4a85-b546-c627acdafd00_fixed.java
index 9353941..2f5ee12 100644
--- a/tmp/671423e4-bc11-4388-a8dd-cb5218162691_buggy.java
+++ b/tmp/125d2725-7c83-4a85-b546-c627acdafd00_fixed.java
@@ -1,30 +1,43 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+    if (NodeUtil.isLhs(n, n.getParent()) &&
+        !NodeUtil.isAssignmentOp(n.getParent())) {
+      // The name is being assigned to with something other than an
+      // assignment operator (e.g., ++ or --).
+      return VariableLiveness.KILL;
+    } else if (NodeUtil.isLhs(n, n.getParent()) &&
+               NodeUtil.isAssignmentOp(n.getParent())) {
+      // In "x = ..." or "x += ...", the expression on the right of 
+      // the assignment is evaluated before kill.
+      Node parent = n.getParent();
+      Node rhs = parent.getLastChild();
+      if (n != rhs) {
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state != VariableLiveness.MAYBE_LIVE) {
+          return state;
+        }
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
