diff --git a/tmp/91b7aa0b-0bd7-4f5e-a771-a04263a633ed_buggy.java b/tmp/d634418e-acaf-4232-b7cf-5936359a8e51_fixed.java
index 9353941..63e9840 100644
--- a/tmp/91b7aa0b-0bd7-4f5e-a771-a04263a633ed_buggy.java
+++ b/tmp/d634418e-acaf-4232-b7cf-5936359a8e51_fixed.java
@@ -1,30 +1,39 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      // The assignment occurs at the parent node. If the LHS is the first
+      // thing evaluated, then it's not a read, it's just a KILL.
+      // Otherwise, if the RHS is evaluated before the LHS is assigned,
+      // then the variable is read before killed.
+      Node rhs = parent.getLastChild();
+      if (rhs != null && rhs != n) {
+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
+        if (state == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        }
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
