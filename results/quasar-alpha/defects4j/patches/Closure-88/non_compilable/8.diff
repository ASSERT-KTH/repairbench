diff --git a/tmp/b2c3abe1-7b43-4dcd-86c4-96adeb0b7691_buggy.java b/tmp/25f1c570-b276-4833-9596-57aa30af3a1d_fixed.java
index 9353941..3fa319c 100644
--- a/tmp/b2c3abe1-7b43-4dcd-86c4-96adeb0b7691_buggy.java
+++ b/tmp/25f1c570-b276-4833-9596-57aa30af3a1d_fixed.java
@@ -1,30 +1,37 @@
 /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
+ * Given an expression and a variable. It returns READ if the first
+ * reference of that variable is a read. It returns KILL if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
+      // the RHS is evaluated (normal left to right evaluation), but the KILL
       // occurs after the RHS is evaluated.
+      Node parent = n.getParent();
+      if (parent.isAssign()) {
+        Node rhs = parent.getSecondChild();
+        VariableLiveness rhsLiveness = isVariableReadBeforeKill(rhs, variable);
+        if (rhsLiveness != VariableLiveness.MAYBE_LIVE) {
+          return rhsLiveness;
+        }
+      }
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
