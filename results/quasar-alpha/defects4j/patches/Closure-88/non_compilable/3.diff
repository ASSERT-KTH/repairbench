diff --git a/tmp/3c9cac50-8f47-4e7f-9a7f-50219de50546_buggy.java b/tmp/4a38991a-521c-44e3-8a90-2b826bcfac20_fixed.java
index 9353941..3406cd5 100644
--- a/tmp/3c9cac50-8f47-4e7f-9a7f-50219de50546_buggy.java
+++ b/tmp/4a38991a-521c-44e3-8a90-2b826bcfac20_fixed.java
@@ -1,30 +1,41 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
+        Node parent = n.getParent();
+        if (parent != null && parent.isAssign()) {
+          // For assignments, we need to check whether this NAME node is on the
+          // LHS or RHS.
+          Node rhs = parent.getSecondChild();
+          if (n != rhs) {
+            // If current node is not the RHS, then this is the LHS and KILL occurs after evaluating RHS.
             return VariableLiveness.KILL;
+          }
+        } else {
+          return VariableLiveness.KILL;
+        }
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
