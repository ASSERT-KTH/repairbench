diff --git a/tmp/a1154031-e49c-43d7-b801-48e64563fec7_buggy.java b/tmp/c50269e5-e0aa-4d26-9d65-ee916a1d4563_fixed.java
index 9353941..681e67a 100644
--- a/tmp/a1154031-e49c-43d7-b801-48e64563fec7_buggy.java
+++ b/tmp/c50269e5-e0aa-4d26-9d65-ee916a1d4563_fixed.java
@@ -1,30 +1,45 @@
 /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
+ * Given an expression and a variable. It returns READ if the first
+ * reference of that variable is a read. It returns KILL if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
-      if (NodeUtil.isLhs(n, n.getParent())) {
+    Node parent = n.getParent();
+    if (NodeUtil.isLhs(n, parent)) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
+
+      // If the parent is an assignment, we need to check if 'n' is the left side,
+      // but only return KILL if the assignment itself is reached.
+      // For compound assignments like +=, the variable is read first.
+      if (parent.isAssign()) {
         return VariableLiveness.KILL;
+      } else if (parent.isAssignAdd() || parent.isAssignSub()
+          || parent.isAssignMul() || parent.isAssignDiv()
+          || parent.isAssignMod() || parent.isAssignBitAnd()
+          || parent.isAssignBitOr() || parent.isAssignBitXor()
+          || parent.isAssignLsh() || parent.isAssignRsh()
+          || parent.isAssignUrsh()) {
+        // Compound assignment: variable is read before written
+        return VariableLiveness.READ;
+      } else {
+        return VariableLiveness.KILL;
+      }
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
-    for (Node child = n.getFirstChild();
-        child != null; child = child.getNext()) {
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
