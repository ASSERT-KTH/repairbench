diff --git a/tmp/a13f967d-0f85-403c-aa59-54e399978b0b_buggy.java b/tmp/835a975a-e490-499c-b942-5a817da28776_fixed.java
index 58a1651..3b444d3 100644
--- a/tmp/a13f967d-0f85-403c-aa59-54e399978b0b_buggy.java
+++ b/tmp/835a975a-e490-499c-b942-5a817da28776_fixed.java
@@ -1,32 +1,35 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Safely resolve 'typeOfThis', handling UnionType correctly.
+  JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedThis instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedThis;
+  } else {
+    typeOfThis = null;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
