diff --git a/tmp/341ea2a0-cecb-4d28-a96a-88fd5cf49b92_buggy.java b/tmp/3dd143b3-c7f5-4d68-845c-04d1939bcd18_fixed.java
index 58a1651..0563813 100644
--- a/tmp/341ea2a0-cecb-4d28-a96a-88fd5cf49b92_buggy.java
+++ b/tmp/3dd143b3-c7f5-4d68-845c-04d1939bcd18_fixed.java
@@ -1,32 +1,41 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Attempt to safely convert the resolved typeOfThis to an ObjectType,
+  // using toObjectType() to handle cases like union types properly.
+  JSType resolvedThisType = safeResolve(typeOfThis, t, scope);
+  if (resolvedThisType != null) {
+    ObjectType maybeObj = resolvedThisType.toObjectType();
+    if (maybeObj != null) {
+      typeOfThis = maybeObj;
+    } else {
+      typeOfThis = null;
+    }
+  } else {
+    typeOfThis = null;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
