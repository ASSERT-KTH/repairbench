diff --git a/tmp/fe613239-8bae-44b0-b84c-d0f997169ec4_buggy.java b/tmp/693ec66c-14a7-4382-8603-1cdb62b405b0_fixed.java
index 1c875ad..ffe8965 100644
--- a/tmp/fe613239-8bae-44b0-b84c-d0f997169ec4_buggy.java
+++ b/tmp/693ec66c-14a7-4382-8603-1cdb62b405b0_fixed.java
@@ -1,31 +1,46 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    if (!invocation.getMethod().isVarArgs()) {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
+    } else {
+        Object[] rawArguments = invocation.getRawArguments();
+        int varargPosition = invocation.getMethod().getParameterTypes().length - 1;
+        int rawArgumentsLength = rawArguments.length;
+        for (int matcherIndex = 0; matcherIndex < matchers.size(); matcherIndex++) {
+            Matcher m = matchers.get(matcherIndex);
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+            if (matcherIndex < varargPosition) {
+                if (matcherIndex >= rawArgumentsLength) {
+                    break;  // defensive, but usually safe
+                }
+                ((CapturesArguments) m).captureFrom(rawArguments[matcherIndex]);
+            } else if (matcherIndex == varargPosition) {
+                // vararg matcher
+                if (rawArgumentsLength <= varargPosition) {
+                    // no varargs given, treat as empty
+                    continue;
+                }
+                Object varargArray = rawArguments[varargPosition];
+                if (varargArray == null || !varargArray.getClass().isArray()) {
+                    // probably null vararg
+                    ((CapturesArguments) m).captureFrom(varargArray);
+                    continue;
+                }
+                int varargLength = Array.getLength(varargArray);
+                for (int i = 0; i < varargLength; i++) {
+                    ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                }
+            } else {
+                // extra matchers (anyVararg matchers expansion), shouldn't normally happen but handle gracefully
+                // There's a chance when same varargs matcher used repeatedly
+                continue;
+            }
+        }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
