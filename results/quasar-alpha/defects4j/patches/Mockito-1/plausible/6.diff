diff --git a/tmp/1d2b25f4-890c-4437-885e-9eef441e3406_buggy.java b/tmp/866b66a3-517f-42e4-ba8a-20ed3d5e6d8c_fixed.java
index 1c875ad..ae9c416 100644
--- a/tmp/1d2b25f4-890c-4437-885e-9eef441e3406_buggy.java
+++ b/tmp/866b66a3-517f-42e4-ba8a-20ed3d5e6d8c_fixed.java
@@ -1,31 +1,40 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    if (!invocation.getMethod().isVarArgs()) {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
+        return;
     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    Object[] rawArguments = invocation.getRawArguments();
+
+    int varargPosition = rawArguments.length - 1;
+
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher m = matchers.get(position);
+        if (!(m instanceof CapturesArguments)) {
+            continue;
+        }
+        if (rawArguments.length <= position) {
+            // Defensive: do not try to access beyond arguments
+            continue;
+        }
+        if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+            Object varargsArray = rawArguments[position];
+            if (varargsArray != null) {
+                int length = java.lang.reflect.Array.getLength(varargsArray);
+                for (int i = 0; i < length; i++) {
+                    Object element = java.lang.reflect.Array.get(varargsArray, i);
+                    ((CapturesArguments) m).captureFrom(element);
+                }
+            }
+            // since we've captured the entire vararg array, skip further matchers
+            return;
+        } else {
+            ((CapturesArguments) m).captureFrom(rawArguments[position]);
+        }
+    }
 }
\ No newline at end of file
