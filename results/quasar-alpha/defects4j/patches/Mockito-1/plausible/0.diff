diff --git a/tmp/fc8dbd6d-e08d-4523-9aaf-1312895d05dd_buggy.java b/tmp/be74f8ae-9b04-4e3c-844d-c6f0d472187a_fixed.java
index 1c875ad..93ba353 100644
--- a/tmp/fc8dbd6d-e08d-4523-9aaf-1312895d05dd_buggy.java
+++ b/tmp/be74f8ae-9b04-4e3c-844d-c6f0d472187a_fixed.java
@@ -1,31 +1,33 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+            if (invocation.getRawArguments().length > position) {
+                // check if this argument is the varargs array
+                boolean isVarargParameter = position == (invocation.getMethod().getParameterTypes().length - 1);
+                Object arg = invocation.getRawArguments()[position];
+                if (isVarargParameter && isVarargMatcher(m) && arg != null && arg.getClass().isArray()) {
+                    int length = Array.getLength(arg);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(arg, i));
+                    }
+                    // after capturing varargs elements, no need to proceed others
+                    return;
+                } else {
+                    ((CapturesArguments) m).captureFrom(arg);
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
