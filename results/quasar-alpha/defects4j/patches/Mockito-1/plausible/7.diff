diff --git a/tmp/22127d1d-a189-45b9-93a8-563963ebdcaa_buggy.java b/tmp/f9e0dba9-98e0-44b4-a28b-3b55cf3aebe0_fixed.java
index 1c875ad..c7a4efd 100644
--- a/tmp/22127d1d-a189-45b9-93a8-563963ebdcaa_buggy.java
+++ b/tmp/f9e0dba9-98e0-44b4-a28b-3b55cf3aebe0_fixed.java
@@ -1,31 +1,40 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        Object[] rawArguments = invocation.getRawArguments();
+        int indexOfVararg = rawArguments.length - 1;
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (m instanceof CapturesArguments) {
+                if (invocation.getRawArguments().length > position) {
+                    // Check if this matcher corresponds to the vararg parameter and if matcher is 'vararg matcher'
+                    boolean isVarargParam = isVariableArgument(invocation, position);
+                    boolean isVarargMatcher = isVarargMatcher(m);
+                    if (isVarargParam && isVarargMatcher) {
+                        Object array = rawArguments[position];
+                        if (array != null && array.getClass().isArray()) {
+                            int length = Array.getLength(array);
+                            for (int i = 0; i < length; i++) {
+                                Object element = Array.get(array, i);
+                                ((CapturesArguments) m).captureFrom(element);
+                            }
+                        } else {
+                            ((CapturesArguments) m).captureFrom(array);
+                        }
+                        // Because we've captured all varargs already for single matcher,
+                        // it does not make sense to process other matchers beyond varargs.
+                        return;
+                    } else {
+                        ((CapturesArguments) m).captureFrom(rawArguments[position]);
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
