diff --git a/tmp/ab498dc9-303e-4554-948e-a6eb7292b923_buggy.java b/tmp/e65f0f74-4832-4a7a-b520-f732b5046da6_fixed.java
index 1c875ad..8658e92 100644
--- a/tmp/ab498dc9-303e-4554-948e-a6eb7292b923_buggy.java
+++ b/tmp/e65f0f74-4832-4a7a-b520-f732b5046da6_fixed.java
@@ -1,31 +1,44 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        int rawArgumentsLength = invocation.getRawArguments().length;
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
 
+            // check we have enough arguments
+            if (rawArgumentsLength <= position) {
+                continue; // skip capturing if no argument at this position
+            }
+
+            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                Object varArgsArray = invocation.getRawArguments()[position];
+                if (varArgsArray != null) {
+                    int varArgLength = Array.getLength(varArgsArray);
+                    for (int i = 0; i < varArgLength; i++) {
+                        Object element = Array.get(varArgsArray, i);
+                        ((CapturesArguments) m).captureFrom(element);
+                    }
+                } else {
+                    ((CapturesArguments) m).captureFrom(null);
+                }
+                // since we captured all elements, don't continue with subsequent matchers
+                return;
+            } else {
+                Object arg = invocation.getRawArguments()[position];
+                ((CapturesArguments) m).captureFrom(arg);
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
+                // defensive: avoid index out of bounds
+                if (invocation.getRawArguments().length > position) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    }
 }
\ No newline at end of file
