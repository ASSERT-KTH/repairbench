diff --git a/tmp/c8641f3a-0662-4909-a6c2-72099c12fe87_buggy.java b/tmp/6ee78acd-5759-4a9b-857b-359879472b6c_fixed.java
index 1c875ad..c302fe0 100644
--- a/tmp/c8641f3a-0662-4909-a6c2-72099c12fe87_buggy.java
+++ b/tmp/6ee78acd-5759-4a9b-857b-359879472b6c_fixed.java
@@ -1,31 +1,45 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArguments = invocation.getRawArguments();
+        int indexOfVararg = rawArguments.length - 1;
 
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+
+            if (position < indexOfVararg) {
+                ((CapturesArguments) m).captureFrom(rawArguments[position]);
+            } else if (position == indexOfVararg) {
+                Object varargsArray = rawArguments[indexOfVararg];
+
+                if (isVarargMatcher(m) && varargsArray != null) {
+                    int varargLength = Array.getLength(varargsArray);
+                    for (int i = 0; i < varargLength; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargsArray, i));
+                    }
+                } else {
+                    ((CapturesArguments) m).captureFrom(varargsArray);
+                }
+            } else {
+                // defensive: matchers can be more than raw arguments (e.g., multiple matchers on varargs elements), so get last parameter repeatedly
+                Object varargsArray = rawArguments[indexOfVararg];
+                if (isVarargMatcher(m) && varargsArray != null) {
+                    int offset = position - indexOfVararg;
+                    if (offset < Array.getLength(varargsArray)) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargsArray, offset));
+                    }
+                }
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
