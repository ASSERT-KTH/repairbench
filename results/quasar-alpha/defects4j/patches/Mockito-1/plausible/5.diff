diff --git a/tmp/815526ea-d946-4be9-86a5-139bce8eb474_buggy.java b/tmp/bfd2b934-b74f-44ee-9c2d-e6f0e471becb_fixed.java
index 1c875ad..662195f 100644
--- a/tmp/815526ea-d946-4be9-86a5-139bce8eb474_buggy.java
+++ b/tmp/bfd2b934-b74f-44ee-9c2d-e6f0e471becb_fixed.java
@@ -1,31 +1,38 @@
 public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
+    if (!invocation.getMethod().isVarArgs()) {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
+        return;
     }
 
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    // handle varargs
+    Object[] rawArguments = invocation.getRawArguments();
+    int varargPosition = rawArguments.length - 1;
+
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher m = matchers.get(position);
+
+        boolean isVararg = isVariableArgument(invocation, position);
+        boolean isVarargMatcher = isVarargMatcher(m);
+
+        if (m instanceof CapturesArguments && rawArguments.length > position) {
+            if (isVararg && isVarargMatcher) {
+                Object varargArray = rawArguments[position];
+                if (varargArray != null && varargArray.getClass().isArray()) {
+                    int len = Array.getLength(varargArray);
+                    for (int i = 0; i < len; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(varargArray, i));
+                    }
+                } else {
+                    // null varargs array, nothing to capture
+                }
+            } else {
+                ((CapturesArguments) m).captureFrom(rawArguments[position]);
+            }
+        }
+    }
 }
\ No newline at end of file
