diff --git a/tmp/fc7d2d0a-0f18-48ed-bc0b-716563f7b025_buggy.java b/tmp/9b9aa9fd-db32-4cfc-8c74-dcc3b976eb6d_fixed.java
index 1c875ad..314e441 100644
--- a/tmp/fc7d2d0a-0f18-48ed-bc0b-716563f7b025_buggy.java
+++ b/tmp/9b9aa9fd-db32-4cfc-8c74-dcc3b976eb6d_fixed.java
@@ -1,31 +1,43 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArgs = invocation.getRawArguments();
+        int varargPosition = rawArgs.length - 1;
 
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+
+            // Check if this is the varargs parameter (last)
+            boolean isVarargParam = position == matchers.size() - 1;
+            
+            if (isVarargParam && varargPosition < rawArgs.length) {
+                Object varargArray = rawArgs[varargPosition];
+
+                if (varargArray != null && varargArray.getClass().isArray() && isVarargMatcher(m)) {
+                    // capture each element of the vararg array separately
+                    int length = Array.getLength(varargArray);
+                    for (int i = 0; i < length; i++) {
+                        Object varargElement = Array.get(varargArray, i);
+                        ((CapturesArguments) m).captureFrom(varargElement);
+                    }
+                    continue;
+                }
+            }
+
+            // normal parameter
+            if (position < rawArgs.length) {
+                ((CapturesArguments) m).captureFrom(rawArgs[position]);
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
                 ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
             }
         }
     }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
 }
\ No newline at end of file
