diff --git a/tmp/1bfbc866-e70c-4dac-a525-613367a3894b_buggy.java b/tmp/a8ed1963-b4d2-42f0-8868-1c0795a945fa_fixed.java
index 1c875ad..3f8c1a7 100644
--- a/tmp/1bfbc866-e70c-4dac-a525-613367a3894b_buggy.java
+++ b/tmp/a8ed1963-b4d2-42f0-8868-1c0795a945fa_fixed.java
@@ -1,31 +1,41 @@
 public void captureArgumentsFrom(Invocation invocation) {
     if (invocation.getMethod().isVarArgs()) {
         int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
 
+        for (int position = 0; position < matchers.size(); position++) {
+            Matcher m = matchers.get(position);
+
+            if (!(m instanceof CapturesArguments)) {
+                continue;
+            }
+
+            if (invocation.getRawArguments().length <= position) {
+                continue;
+            }
+
+            // if current matcher corresponds to the vararg parameter and is a vararg matcher
+            if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {
+                Object array = invocation.getRawArguments()[position];
+                if (array != null) {
+                    int length = Array.getLength(array);
+                    for (int i = 0; i < length; i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                }
+                // since we've captured all varargs already, no need to process further
+                return;
+            } else {
+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+            }
+        }
     } else {
         for (int position = 0; position < matchers.size(); position++) {
             Matcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
+                if (invocation.getRawArguments().length > position) {
                     ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
                 }
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+    }
 }
\ No newline at end of file
