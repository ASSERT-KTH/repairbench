diff --git a/tmp/03d2e476-6864-417f-935f-8368c037480f_buggy.java b/tmp/ac7efead-f5a5-4bc6-a2fe-13ef461c5d5e_fixed.java
index 3127f85..4664066 100644
--- a/tmp/03d2e476-6864-417f-935f-8368c037480f_buggy.java
+++ b/tmp/ac7efead-f5a5-4bc6-a2fe-13ef461c5d5e_fixed.java
@@ -1,24 +1,31 @@
-    /**
-     * For this distribution, {@code X}, this method returns {@code P(X < x)}.
-     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
-     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
-     *
-     * @param x Value at which the CDF is evaluated.
-     * @return CDF evaluated at {@code x}.
-     * @throws MathException if the algorithm fails to converge
-     */
 public double cumulativeProbability(double x) throws MathException {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    if (x == Double.POSITIVE_INFINITY) {
+        return 1.0;
+    }
+    if (x == Double.NEGATIVE_INFINITY) {
+        return 0.0;
+    }
     final double dev = x - mean;
+    // Protect against extreme tail cases where erf might fail or be unnecessary
+    if (x < mean - 40 * standardDeviation) {
+        return 0.0;
+    }
+    if (x > mean + 40 * standardDeviation) {
+        return 1.0;
+    }
     try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+        return 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
     } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+        // fallback threshold at 20 std deviations
+        if (x < mean - 20 * standardDeviation) {
+            return 0.0;
+        } else if (x > mean + 20 * standardDeviation) {
+            return 1.0;
         } else {
             throw ex;
         }
     }
 }
\ No newline at end of file
