diff --git a/tmp/fc6dfa6d-4210-41e1-980e-5d55cbba60b4_buggy.java b/tmp/724204ae-cf66-4d7b-8d7b-7fcd2972faf4_fixed.java
index 03b03d7..fd9e9ea 100644
--- a/tmp/fc6dfa6d-4210-41e1-980e-5d55cbba60b4_buggy.java
+++ b/tmp/724204ae-cf66-4d7b-8d7b-7fcd2972faf4_fixed.java
@@ -1,25 +1,36 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
     
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
     
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
     
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    long earlierInstant = convertLocalToUTC(local, false, instantBefore);
+    long laterInstant = convertLocalToUTC(local, false, instantAfter);
+    
+    // handle if instant is outside the transition overlap zone
+    if (instant < earlierInstant) {
+        // before overlap, so return as-is
+        return instant;
+    }
+    if (instant > laterInstant) {
+        // after overlap, so return as-is
+        return instant;
+    }
+    
+    // in overlap range, return earlier or later instant based on parameter
+    return earlierOrLater ? laterInstant : earlierInstant;
 }
\ No newline at end of file
