diff --git a/tmp/a7a1ef3c-2ee1-479a-b642-bcfcba108ead_buggy.java b/tmp/a1e15b29-75e8-463b-bac3-4761155d6775_fixed.java
index 03b03d7..0af727a 100644
--- a/tmp/a7a1ef3c-2ee1-479a-b642-bcfcba108ead_buggy.java
+++ b/tmp/a1e15b29-75e8-463b-bac3-4761155d6775_fixed.java
@@ -1,25 +1,30 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    long instantEarlier = convertLocalToUTC(local, false, instantBefore);
+    long instantLater = convertLocalToUTC(local, false, instantAfter);
+
+    // if the instant is closer to instantLater, or if earlierOrLater dictates, choose accordingly
+    if (earlierOrLater) {
+        // pick the later offset
+        return instantLater;
+    } else {
+        // pick the earlier offset
+        return instantEarlier;
+    }
 }
\ No newline at end of file
