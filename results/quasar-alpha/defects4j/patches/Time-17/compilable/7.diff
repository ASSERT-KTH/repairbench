diff --git a/tmp/6be63a53-e2db-4674-b4ce-a60acb885aaa_buggy.java b/tmp/e0b9e1e2-a03a-4ca4-aeea-7f738afbedbb_fixed.java
index 03b03d7..c97dfa2 100644
--- a/tmp/6be63a53-e2db-4674-b4ce-a60acb885aaa_buggy.java
+++ b/tmp/e0b9e1e2-a03a-4ca4-aeea-7f738afbedbb_fixed.java
@@ -1,25 +1,37 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  * 
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
+    // Evaluate 3 hours before and after to detect overlap
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        return instant;  // No overlap
     }
 
-        // work out range of instants that have duplicate local times
+    // Work out local time and possible instants for both offsets
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long adjustedEarlier = convertLocalToUTC(local, false, instantBefore);
+    long adjustedLater = convertLocalToUTC(local, false, instantAfter);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Choose which instant to return depending on flag and current instant
+    if (earlierOrLater) {
+        // Later offset requested
+        if (instant < adjustedLater) {
+            return adjustedLater;
+        } else {
+            return instant;
+        }
+    } else {
+        // Earlier offset requested
+        if (instant >= adjustedLater) {
+            return adjustedEarlier;
+        } else {
+            return instant;
+        }
+    }
 }
\ No newline at end of file
