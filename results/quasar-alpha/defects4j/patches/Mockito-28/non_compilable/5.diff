diff --git a/tmp/6ad7d9ad-94ed-47cd-ae4b-a3f665ec799d_buggy.java b/tmp/17bd6b46-3149-422c-be83-76fe2d8343f1_fixed.java
index fa6828a..157d538 100644
--- a/tmp/6ad7d9ad-94ed-47cd-ae4b-a3f665ec799d_buggy.java
+++ b/tmp/17bd6b46-3149-422c-be83-76fe2d8343f1_fixed.java
@@ -1,5 +1,28 @@
 private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
     for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // For each field, first check for exact type matches
+        boolean injected = false;
+        Iterator<Object> it = mocks.iterator();
+        while (it.hasNext()) {
+            Object mock = it.next();
+            if (field.getType().equals(mock.getClass().getInterfaces().length > 0 ? mock.getClass().getInterfaces()[0] : mock.getClass())) {
+                mockCandidateFilter.filterCandidate(Collections.singleton(mock), field, fieldInstance).thenInject();
+                it.remove();
+                injected = true;
+                break;
+            }
+        }
+        if (!injected) {
+            // Then allow assignable ancestors
+            it = mocks.iterator();
+            while (it.hasNext()) {
+                Object mock = it.next();
+                if (field.getType().isAssignableFrom(mock.getClass().getInterfaces().length > 0 ? mock.getClass().getInterfaces()[0] : mock.getClass())) {
+                    mockCandidateFilter.filterCandidate(Collections.singleton(mock), field, fieldInstance).thenInject();
+                    it.remove();
+                    break;
+                }
+            }
+        }
     }
 }
\ No newline at end of file
