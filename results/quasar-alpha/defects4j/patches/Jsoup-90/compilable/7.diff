diff --git a/tmp/e3fa6af9-df3d-4cea-bd2e-e8381df3f59a_buggy.java b/tmp/ec48f2a9-7141-4ca8-b5c8-bcc5321071e5_fixed.java
index 373b1e8..b430e39 100644
--- a/tmp/e3fa6af9-df3d-4cea-bd2e-e8381df3f59a_buggy.java
+++ b/tmp/ec48f2a9-7141-4ca8-b5c8-bcc5321071e5_fixed.java
@@ -1,37 +1,41 @@
 private static boolean looksLikeUtf8(byte[] input) {
     int i = 0;
     // BOM:
     if (input.length >= 3 && (input[0] & 0xFF) == 0xEF
-                && (input[1] & 0xFF) == 0xBB & (input[2] & 0xFF) == 0xBF) {
+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {
         i = 3;
     }
 
-            int end;
-            for (int j = input.length; i < j; ++i) {
+    int length = input.length;
+    while (i < length) {
         int o = input[i];
         if ((o & 0x80) == 0) {
-                    continue; // ASCII
+            i++; // ASCII
+            continue;
         }
 
-                // UTF-8 leading:
+        int expectedLength;
         if ((o & 0xE0) == 0xC0) {
-                    end = i + 1;
+            expectedLength = 2;
         } else if ((o & 0xF0) == 0xE0) {
-                    end = i + 2;
+            expectedLength = 3;
         } else if ((o & 0xF8) == 0xF0) {
-                    end = i + 3;
+            expectedLength = 4;
         } else {
             return false;
         }
 
+        if (i + expectedLength > length) {
+            return false; // Not enough bytes
+        }
 
-                while (i < end) {
-                    i++;
-                    o = input[i];
-                    if ((o & 0xC0) != 0x80) {
+        for (int j = 1; j < expectedLength; j++) {
+            int nextByte = input[i + j];
+            if ((nextByte & 0xC0) != 0x80) {
                 return false;
             }
         }
+        i += expectedLength;
     }
     return true;
 }
\ No newline at end of file
