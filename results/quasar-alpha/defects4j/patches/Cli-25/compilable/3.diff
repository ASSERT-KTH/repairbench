diff --git a/tmp/b9e5bf03-8672-4325-9eb7-d45b6569540e_buggy.java b/tmp/1b343fe9-7e34-40cc-8616-e1c7fb327b2e_fixed.java
index 875b31b..2cb2e09 100644
--- a/tmp/b9e5bf03-8672-4325-9eb7-d45b6569540e_buggy.java
+++ b/tmp/1b343fe9-7e34-40cc-8616-e1c7fb327b2e_fixed.java
@@ -1,54 +1,57 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
-        if (nextLineTabStop >= width)
+    // Don't reduce nextLineTabStop if it's larger than width;
+    // instead, indent must always be applied on continuation lines
+    // so the breakpoints are consistent splits every width chars
+    // without any forced indentation.
+    // So comment out or remove this block:
+    // if (nextLineTabStop >= width)
+    // {
+    //     // stops infinite loop happening
+    //     nextLineTabStop = width - 1;
+    // }
+
+    final String padding;
+
+    if (nextLineTabStop > 0)
     {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
+        padding = createPadding(nextLineTabStop);
+    }
+    else
+    {
+        padding = "";
     }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
 
             return sb;
         }
 
+        // If wrapping very long words when there is no space in chunk,
+        // enforce splitting at width rather than at indent offset
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
