diff --git a/tmp/f21edc85-1282-4963-bd05-23cd86a027b3_buggy.java b/tmp/c73006af-5930-4d4d-bb00-6ec04afeb16b_fixed.java
index dc93be3..d1c8070 100644
--- a/tmp/f21edc85-1282-4963-bd05-23cd86a027b3_buggy.java
+++ b/tmp/c73006af-5930-4d4d-bb00-6ec04afeb16b_fixed.java
@@ -1,14 +1,17 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
     // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+        // Only add to the stack if this is an unknown or non-void tag that's self-closing out of spec (scripting violates etc)
+        if (!el.tag().isKnownTag() || !el.tag().isSelfClosing()) {
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        }
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
