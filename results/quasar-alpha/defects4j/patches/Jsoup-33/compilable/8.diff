diff --git a/tmp/417cee0d-acd5-4934-ae09-0df2caf1cf81_buggy.java b/tmp/992110a9-3549-42ad-890d-9623023a2e6b_fixed.java
index dc93be3..b90cea9 100644
--- a/tmp/417cee0d-acd5-4934-ae09-0df2caf1cf81_buggy.java
+++ b/tmp/992110a9-3549-42ad-890d-9623023a2e6b_fixed.java
@@ -1,14 +1,22 @@
 Element insert(Token.StartTag startTag) {
     // handle empty unknown tags
-        // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
     if (startTag.isSelfClosing()) {
         Element el = insertEmpty(startTag);
+
+        // if the tag is a known "empty" (void) HTML tag, we emit a fake end tag for it,
+        // so that the parser correctly closes the element and adds an explicit end tag during serialization
+        Tag tag = Tag.valueOf(startTag.name());
+        if (tag.isKnownTag() && tag.isSelfClosing()) {
+            // known void tags - generate a fake end tag token to ensure it's handled as empty
+            tokeniser.emit(new Token.EndTag(el.tagName()));
+        } else {
+            // unknown tags stay as self-closing, add to stack
             stack.add(el);
-            tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
+        }
         return el;
     }
 
     Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
     insert(el);
     return el;
 }
\ No newline at end of file
