diff --git a/tmp/8e54f9b2-da09-4ce8-846e-422a2c02452f_buggy.java b/tmp/b23e3286-f132-4701-979f-0186b0f43b3a_fixed.java
index d27c40c..cb417a8 100644
--- a/tmp/8e54f9b2-da09-4ce8-846e-422a2c02452f_buggy.java
+++ b/tmp/b23e3286-f132-4701-979f-0186b0f43b3a_fixed.java
@@ -1,49 +1,54 @@
-    /** Compute two arguments arc tangent of a derivative structure.
-     * @param y array holding the first operand
-     * @param yOffset offset of the first operand in its array
-     * @param x array holding the second operand
-     * @param xOffset offset of the second operand in its array
-     * @param result array where result must be stored (for
-     * two arguments arc tangent the result array <em>cannot</em>
-     * be the input array)
-     * @param resultOffset offset of the result in its array
-     */
 public void atan2(final double[] y, final int yOffset,
                   final double[] x, final int xOffset,
                   final double[] result, final int resultOffset) {
 
+    double yh = y[yOffset];
+    double xh = x[xOffset];
+
+    if (Double.isNaN(yh) || Double.isNaN(xh)) {
+        // propagate NaN
+        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);
+        return;
+    }
+
+    if (yh == 0.0 && xh == 0.0) {
+        // handle signed zeros explicitly to match strict IEEE results
+        double atan2ZeroZero = FastMath.copySign(1.0, yh) >= 0
+                ? (FastMath.copySign(1.0, xh) >= 0 ? 0.0 : FastMath.PI)
+                : (FastMath.copySign(1.0, xh) >= 0 ? -0.0 : -FastMath.PI);
+        Arrays.fill(result, resultOffset, resultOffset + getSize(), 0.0);
+        result[resultOffset] = atan2ZeroZero;
+        return;
+    }
+
+    // regular computation
     // compute r = sqrt(x^2 + y^2)
     double[] tmp1 = new double[getSize()];
     multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
     double[] tmp2 = new double[getSize()];
     multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
     add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
     rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
 
-        if (x[xOffset] >= 0) {
+    if (xh >= 0) {
 
-            // compute atan2(y, x) = 2 atan(y / (r + x))
         add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r + x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
         for (int i = 0; i < tmp2.length; ++i) {
             result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
         }
 
     } else {
 
-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))
         subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x
         divide(y, yOffset, tmp2, 0, tmp1, 0);       // y / (r - x)
         atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))
         result[resultOffset] =
                 ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))
         for (int i = 1; i < tmp2.length; ++i) {
             result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))
         }
 
     }
-
-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
-
 }
\ No newline at end of file
