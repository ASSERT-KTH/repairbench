diff --git a/tmp/e5ef9941-be18-4290-971f-51a2e5e6ddd7_buggy.java b/tmp/fefe8ac2-7553-4b2c-9965-962bdf91ad39_fixed.java
index 2608424..1469550 100644
--- a/tmp/e5ef9941-be18-4290-971f-51a2e5e6ddd7_buggy.java
+++ b/tmp/fefe8ac2-7553-4b2c-9965-962bdf91ad39_fixed.java
@@ -1,39 +1,15 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
 public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
+    if (index < 0 || index >= totalSize) {
+        throw new OutOfRangeException(index, 0, totalSize - 1);
     }
 
     final int[] indices = new int[dimension];
-
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+    int remaining = index;
+    for (int i = 0; i < dimension; i++) {
         final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+        indices[i] = remaining / offset;
+        remaining = remaining % offset;
     }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
-        }
-
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
 
     return indices;
 }
\ No newline at end of file
