diff --git a/tmp/b1fd633c-fc95-4c82-aeab-97eac37e5496_buggy.java b/tmp/bdbdecd1-7b96-4540-a15c-8b12a599645b_fixed.java
index 5abdeb5..daf4528 100644
--- a/tmp/b1fd633c-fc95-4c82-aeab-97eac37e5496_buggy.java
+++ b/tmp/bdbdecd1-7b96-4540-a15c-8b12a599645b_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
+          // Special case: do not count the lhs of assignment at statement level,
+          // unless it is within a conditional (HOOK node), in that case it should be counted
           !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+            (parent.getFirstChild() == n) &&
+            parent.getParent() != null &&
+            !parent.getParent().isHook())) {
         numUsesWithinCfgNode++;
       }
     }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
