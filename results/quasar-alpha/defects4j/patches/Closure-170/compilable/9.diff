diff --git a/tmp/c839d518-584a-46c0-9e8a-e557d41a7c01_buggy.java b/tmp/d255671d-07d6-402e-8a8f-80c6c54e7ba8_fixed.java
index 5abdeb5..9fed8e9 100644
--- a/tmp/c839d518-584a-46c0-9e8a-e557d41a7c01_buggy.java
+++ b/tmp/d255671d-07d6-402e-8a8f-80c6c54e7ba8_fixed.java
@@ -1,29 +1,27 @@
 /**
  * Computes the number of uses of the variable varName and store it in
  * numUseWithinUseCfgNode.
  */
 private void getNumUseInUseCfgNode(final Node cfgNode) {
 
   numUsesWithinCfgNode = 0;
   AbstractCfgNodeTraversalCallback gatherCb =
       new AbstractCfgNodeTraversalCallback() {
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+      if (n.isName() && n.getString().equals(varName)) {
+        boolean isAssignLHS = parent.isAssign() && parent.getFirstChild() == n;
+        boolean isInHook = parent.isHook();
+        if (!(isAssignLHS && !isInHook)) {
+          // Don't count lhs of top-level assignment chain,
+          // EXCEPT when inside conditional (hook) operator branches
           numUsesWithinCfgNode++;
         }
       }
+    }
 
   };
 
   NodeTraversal.traverse(compiler, cfgNode, gatherCb);
 }
\ No newline at end of file
