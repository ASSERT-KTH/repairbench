diff --git a/tmp/e5f033b1-b5c5-4f58-8b3d-de42bfeefeda_buggy.java b/tmp/b7e05787-cd3b-48af-816e-c59d891067d8_fixed.java
index e5ad041..40d3fcf 100644
--- a/tmp/e5f033b1-b5c5-4f58-8b3d-de42bfeefeda_buggy.java
+++ b/tmp/b7e05787-cd3b-48af-816e-c59d891067d8_fixed.java
@@ -1,19 +1,36 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // In narrowing, we must adjust super type and interfaces to be appropriate for subclass
+
+    // resolve super-class:
+    JavaType newSuperClass = (_superClass == null) ? null : _superClass.narrowBy(subclass.getSuperclass());
+
+    // and interfaces
+    JavaType[] newSuperInterfaces = null;
+    if (_superInterfaces != null && _superInterfaces.length > 0) {
+        Class<?>[] subInterfaces = subclass.getInterfaces();
+        newSuperInterfaces = new JavaType[subInterfaces.length];
+        for (int i = 0; i < subInterfaces.length; ++i) {
+            // Attempt to find matching existing superType, fallback to simple construction
+            JavaType existing = null;
+            for (JavaType ifaceType : _superInterfaces) {
+                if (ifaceType.getRawClass() == subInterfaces[i]) {
+                    existing = ifaceType;
+                    break;
+                }
+            }
+            if (existing != null) {
+                newSuperInterfaces[i] = existing;
+            } else {
+                newSuperInterfaces[i] = SimpleType.constructUnsafe(subInterfaces[i]);
+            }
+        }
+    }
+
+    return new SimpleType(subclass, _bindings, newSuperClass, newSuperInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
