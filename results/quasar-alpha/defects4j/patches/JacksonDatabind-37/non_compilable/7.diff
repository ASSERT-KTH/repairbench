diff --git a/tmp/91fa7f19-ef8a-4917-971e-8f5526147baa_buggy.java b/tmp/4bce696a-3de7-4996-81ae-2a71ff64084f_fixed.java
index e5ad041..04fbbfc 100644
--- a/tmp/91fa7f19-ef8a-4917-971e-8f5526147baa_buggy.java
+++ b/tmp/4bce696a-3de7-4996-81ae-2a71ff64084f_fixed.java
@@ -1,19 +1,38 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
     // Should we check that there is a sub-class relationship?
     // 15-Jan-2016, tatu: Almost yes, but there are some complications with
     //    placeholder values, so no.
     /*
     if (!_class.isAssignableFrom(subclass)) {
         throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
                 +_class.getName());
     }
     */
     // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    return new SimpleType(subclass, _bindings, _narrowSuperClass(subclass), _superInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
+
+private JavaType _narrowSuperClass(Class<?> subclass) {
+    if (_superClass == null) {
+        return null;
+    }
+    Class<?> superClassRaw = _superClass.getRawClass();
+    // If subclass does not extend superClassRaw, leave unchanged
+    if (!superClassRaw.isAssignableFrom(subclass)) {
+        return _superClass;
+    }
+    if (superClassRaw == subclass.getSuperclass()) {
+        return _superClass;  // direct superclass, so leave as is
+    }
+    // Otherwise, create a new SimpleType to represent the narrowed superclass chain
+    return new SimpleType(subclass.getSuperclass(), _bindings,
+            _superClass.getSuperClass(), _superClass.getInterfaces(),
+            _superClass.getValueHandler(), _superClass.getTypeHandler(),
+            _superClass.isStatic());
+}
\ No newline at end of file
