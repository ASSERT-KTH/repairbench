diff --git a/tmp/4c43730b-3c02-46e4-b79b-4dcb3ca0195e_buggy.java b/tmp/7eea5ffc-9cd9-4e57-993d-26ff8a327a3e_fixed.java
index e5ad041..f275b61 100644
--- a/tmp/4c43730b-3c02-46e4-b79b-4dcb3ca0195e_buggy.java
+++ b/tmp/7eea5ffc-9cd9-4e57-993d-26ff8a327a3e_fixed.java
@@ -1,19 +1,28 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
-        // 15-Jan-2016, tatu: Almost yes, but there are some complications with
-        //    placeholder values, so no.
-        /*
+    // Check if subclass is actually a subclass or implementation of _class
     if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
+        throw new IllegalArgumentException("Class " + subclass.getName() + " not subtype of " + _class.getName());
     }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+    // Re-resolve super-class and interfaces for the new subtype to avoid stale type hierarchy
+    return new SimpleType(subclass, _bindings, _narrowSuper(subclass), null,
             _valueHandler, _typeHandler, _asStatic);
 }
+
+// Helper method to resolve the supertype of the subclass within this hierarchy
+protected JavaType _narrowSuper(Class<?> subclass) {
+    Class<?> superClassRaw = subclass.getSuperclass();
+    if (superClassRaw == null || superClassRaw == Object.class) {
+        return null;
+    }
+    // If superclass equals to current _class, reuse this type
+    if (superClassRaw == _class) {
+        return this;
+    }
+    // Otherwise, go recursively upwards
+    return _narrowSuper(superClassRaw);
+}
\ No newline at end of file
