diff --git a/tmp/b2828c2f-8a19-4d36-8367-14ea42866ea0_buggy.java b/tmp/7cd138e1-83f9-4742-b994-726a4a5c2fa6_fixed.java
index e5ad041..a2751a0 100644
--- a/tmp/b2828c2f-8a19-4d36-8367-14ea42866ea0_buggy.java
+++ b/tmp/7cd138e1-83f9-4742-b994-726a4a5c2fa6_fixed.java
@@ -1,19 +1,43 @@
 @Override
 protected JavaType _narrow(Class<?> subclass)
 {
     if (_class == subclass) {
         return this;
     }
-        // Should we check that there is a sub-class relationship?
     // 15-Jan-2016, tatu: Almost yes, but there are some complications with
     //    placeholder values, so no.
-        /*
-        if (!_class.isAssignableFrom(subclass)) {
-            throw new IllegalArgumentException("Class "+subclass.getName()+" not sub-type of "
-                    +_class.getName());
-        }
-        */
-        // 15-Jan-2015, tatu: Not correct; should really re-resolve...
-        return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,
+
+    // Adjust super-class and super-interfaces when narrowing to a subclass
+    JavaType newSuperClass = _superClass;
+    if (newSuperClass != null) {
+        // If current superClass is not assignable from new subclass, recalc
+        Class<?> currSuperRaw = newSuperClass.getRawClass();
+        if (!currSuperRaw.isAssignableFrom(subclass)) {
+            newSuperClass = null;
+        }
+    }
+
+    JavaType[] newSuperInterfaces = _superInterfaces;
+    if (newSuperInterfaces != null && newSuperInterfaces.length > 0) {
+        int len = newSuperInterfaces.length;
+        JavaType[] adjInterfaces = new JavaType[len];
+        int count = 0;
+        for (int i = 0; i < len; i++) {
+            JavaType iface = newSuperInterfaces[i];
+            if (iface.getRawClass().isAssignableFrom(subclass)) {
+                adjInterfaces[count++] = iface;
+            }
+        }
+        if (count != len) {
+            if (count == 0) {
+                newSuperInterfaces = null;
+            } else {
+                newSuperInterfaces = new JavaType[count];
+                System.arraycopy(adjInterfaces, 0, newSuperInterfaces, 0, count);
+            }
+        }
+    }
+
+    return new SimpleType(subclass, _bindings, newSuperClass, newSuperInterfaces,
             _valueHandler, _typeHandler, _asStatic);
 }
\ No newline at end of file
