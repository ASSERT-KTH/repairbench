diff --git a/tmp/f14cb82e-4a09-408d-b340-38493119b882_buggy.java b/tmp/3d3e1af5-126c-40fe-a99f-1e9ff4e4158e_fixed.java
index 82cd856..f7ea195 100644
--- a/tmp/f14cb82e-4a09-408d-b340-38493119b882_buggy.java
+++ b/tmp/3d3e1af5-126c-40fe-a99f-1e9ff4e4158e_fixed.java
@@ -1,213 +1,204 @@
 @Override
 public JsonToken nextToken() throws IOException
 {
-    	//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken
-    	// check for no buffered context _exposedContext - null
-    	//If all the conditions matches then check for scalar / non-scalar property
-    		//if not scalar and ended successfully, then return null
-    		//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once
-    		// then return null 
+    // First, check if we've already matched once and _allowMultipleMatches is false
+    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {
+        // If we are not buffering path anymore, and match was scalar value (not array/object)
+        if ((_currToken.isScalarValue() || _currToken == JsonToken.FIELD_NAME)
+                && !_includePath && _itemFilter == TokenFilter.INCLUDE_ALL) {
+            // Do not return more matches
+            return (_currToken = null);
+        }
+    }
+
     // Anything buffered?
     TokenFilterContext ctxt = _exposedContext;
 
     if (ctxt != null) {
         while (true) {
             JsonToken t = ctxt.nextTokenToRead();
             if (t != null) {
                 _currToken = t;
                 return t;
             }
             // all done with buffered stuff?
             if (ctxt == _headContext) {
                 _exposedContext = null;
                 if (ctxt.inArray()) {
                     t = delegate.getCurrentToken();
-// Is this guaranteed to work without further checks?
-//                        if (t != JsonToken.START_ARRAY) {
                     _currToken = t;
                     return t;
                 }
-
-                    // Almost! Most likely still have the current token;
-                    // with the sole exception of 
-                    /*
-                    t = delegate.getCurrentToken();
-                    if (t != JsonToken.FIELD_NAME) {
-                        _currToken = t;
-                        return t;
-                    }
-                    */
-                    break;
-                }
                 // If not, traverse down the context chain
+                break;
+            }
             ctxt = _headContext.findChildOf(ctxt);
             _exposedContext = ctxt;
             if (ctxt == null) { // should never occur
                 throw _constructError("Unexpected problem: chain of filtered context broken");
             }
         }
     }
 
-        // If not, need to read more. If we got any:
+    // Read more tokens from delegate
     JsonToken t = delegate.nextToken();
     if (t == null) {
         // no strict need to close, since we have no state here
         return (_currToken = t);
     }
 
-        // otherwise... to include or not?
     TokenFilter f;
 
     switch (t.id()) {
     case ID_START_ARRAY:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
             break;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
             break;
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartArray();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildArrayContext(f, true);
             return (_currToken = t);
         }
         _headContext = _headContext.createChildArrayContext(f, false);
 
-            // Also: only need buffering if parent path to be included
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
                 return t;
             }
         }
         break;
 
     case ID_START_OBJECT:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
             return (_currToken = t);
         }
-            if (f == null) { // does this occur?
+        if (f == null) {
             delegate.skipChildren();
             break;
         }
-            // Otherwise still iffy, need to check
         f = _headContext.checkValue(f);
         if (f == null) {
             delegate.skipChildren();
             break;
         }
         if (f != TokenFilter.INCLUDE_ALL) {
             f = f.filterStartObject();
         }
         _itemFilter = f;
         if (f == TokenFilter.INCLUDE_ALL) {
             _headContext = _headContext.createChildObjectContext(f, true);
             return (_currToken = t);
         }
         _headContext = _headContext.createChildObjectContext(f, false);
-            // Also: only need buffering if parent path to be included
+
         if (_includePath) {
             t = _nextTokenWithBuffering(_headContext);
             if (t != null) {
                 _currToken = t;
                 return t;
             }
         }
-            // note: inclusion of surrounding Object handled separately via
-            // FIELD_NAME
         break;
 
     case ID_END_ARRAY:
     case ID_END_OBJECT:
         {
             boolean returnEnd = _headContext.isStartHandled();
             f = _headContext.getFilter();
             if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                 f.filterFinishArray();
             }
             _headContext = _headContext.getParent();
             _itemFilter = _headContext.getFilter();
             if (returnEnd) {
                 return (_currToken = t);
             }
         }
         break;
 
     case ID_FIELD_NAME:
         {
             final String name = delegate.getCurrentName();
-                // note: this will also set 'needToHandleName'
             f = _headContext.setFieldName(name);
             if (f == TokenFilter.INCLUDE_ALL) {
                 _itemFilter = f;
                 if (!_includePath) {
-                        // Minor twist here: if parent NOT included, may need to induce output of
-                        // surrounding START_OBJECT/END_OBJECT
+                    // include parent if requested
                     if (_includeImmediateParent && !_headContext.isStartHandled()) {
-                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled
+                        t = _headContext.nextTokenToRead();
                         _exposedContext = _headContext;
                     }
                 }
                 return (_currToken = t);
             }
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             f = f.includeProperty(name);
             if (f == null) {
                 delegate.nextToken();
                 delegate.skipChildren();
                 break;
             }
             _itemFilter = f;
             if (f == TokenFilter.INCLUDE_ALL) {
                 if (_includePath) {
                     return (_currToken = t);
                 }
             }
             if (_includePath) {
                 t = _nextTokenWithBuffering(_headContext);
                 if (t != null) {
                     _currToken = t;
                     return t;
                 }
             }
             break;
         }
 
-        default: // scalar value
+    default:
         f = _itemFilter;
         if (f == TokenFilter.INCLUDE_ALL) {
             return (_currToken = t);
         }
         if (f != null) {
             f = _headContext.checkValue(f);
             if ((f == TokenFilter.INCLUDE_ALL)
                     || ((f != null) && f.includeValue(delegate))) {
                 return (_currToken = t);
             }
         }
-            // Otherwise not included (leaves must be explicitly included)
         break;
     }
 
-        // We get here if token was not yet found; offlined handling
+    // If !_allowMultipleMatches, and we did already find one match (scalar) and no context buffering,
+    // do not return any more matches
+    if (!_allowMultipleMatches && _currToken != null && _exposedContext == null) {
+        if ((_currToken.isScalarValue() || _currToken == JsonToken.FIELD_NAME)
+                && !_includePath && _itemFilter == TokenFilter.INCLUDE_ALL) {
+            return (_currToken = null);
+        }
+    }
+
     return _nextToken2();
 }
\ No newline at end of file
