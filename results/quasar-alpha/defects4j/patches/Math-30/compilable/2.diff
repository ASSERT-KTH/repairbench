diff --git a/tmp/90eb1a1e-5926-4c9e-8376-e4b6f2031b2c_buggy.java b/tmp/a5020758-fadc-4f10-9db3-b80a13279dbe_fixed.java
index 3c69e10..b8af7db 100644
--- a/tmp/90eb1a1e-5926-4c9e-8376-e4b6f2031b2c_buggy.java
+++ b/tmp/a5020758-fadc-4f10-9db3-b80a13279dbe_fixed.java
@@ -1,27 +1,36 @@
 /**
  * @param Umin smallest Mann-Whitney U value
  * @param n1 number of subjects in first sample
  * @param n2 number of subjects in second sample
  * @return two-sided asymptotic p-value
  * @throws ConvergenceException if the p-value can not be computed
  * due to a convergence error
  * @throws MaxCountExceededException if the maximum number of
  * iterations is exceeded
  */
 private double calculateAsymptoticPValue(final double Umin,
                                          final int n1,
                                          final int n2)
     throws ConvergenceException, MaxCountExceededException {
 
     final int n1n2prod = n1 * n2;
 
     // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
     final double EU = n1n2prod / 2.0;
     final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
 
     final double z = (Umin - EU) / FastMath.sqrt(VarU);
 
     final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+    double pValue;
+    if (z > 0) {
+        pValue = 2 * (1 - standardNormal.cumulativeProbability(z));
+    } else {
+        pValue = 2 * standardNormal.cumulativeProbability(z);
+    }
+    if (pValue > 1.0) {
+        pValue = 1.0;
+    }
+    return pValue;
 }
\ No newline at end of file
