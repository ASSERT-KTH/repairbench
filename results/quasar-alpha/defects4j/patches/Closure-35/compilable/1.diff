diff --git a/tmp/0f41df0f-e89e-4d32-9569-54c3e56a1ae7_buggy.java b/tmp/49a521c4-324a-48ab-b7b7-2e7b7ace7f3a_fixed.java
index d57736b..67145ce 100644
--- a/tmp/0f41df0f-e89e-4d32-9569-54c3e56a1ae7_buggy.java
+++ b/tmp/49a521c4-324a-48ab-b7b7-2e7b7ace7f3a_fixed.java
@@ -1,39 +1,23 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
-            }
+          boolean hasProp = objType.hasProperty(prop);
+          JSType currentType = hasProp ? objType.getPropertyType(prop) : getNativeType(VOID_TYPE);
+          JSType typeToInfer = currentType.getLeastSupertype(propType);
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
