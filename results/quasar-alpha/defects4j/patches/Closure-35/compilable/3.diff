diff --git a/tmp/4e9c8493-36b7-47db-9c79-02382db271cc_buggy.java b/tmp/8b7ae4f3-fdb2-462e-92c6-c422ddcf0e40_fixed.java
index d57736b..4d66501 100644
--- a/tmp/4e9c8493-36b7-47db-9c79-02382db271cc_buggy.java
+++ b/tmp/8b7ae4f3-fdb2-462e-92c6-c422ddcf0e40_fixed.java
@@ -1,39 +1,28 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
   if (type == null || constraint == null) {
     return;
   }
 
   ObjectType constraintObj =
       ObjectType.cast(constraint.restrictByNotNullOrUndefined());
   if (constraintObj != null && constraintObj.isRecordType()) {
     ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
     if (objType != null) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!objType.isPropertyTypeDeclared(prop)) {
-            JSType typeToInfer = propType;
-            if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+          JSType typeToInfer;
+          if (objType.hasProperty(prop)) {
+            // Widen existing inferred property type if necessary.
+            typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);
+          } else {
+            // Add new (possibly optional) property.
+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);
           }
           objType.defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 }
\ No newline at end of file
