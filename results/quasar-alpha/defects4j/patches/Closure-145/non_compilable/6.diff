diff --git a/tmp/8055b7a1-9cee-4694-9bc0-ccbee1ff70db_buggy.java b/tmp/a9f58f8d-f9c8-4a12-9a1f-ae894021da92_fixed.java
index 57f69c5..acf3d3e 100644
--- a/tmp/8055b7a1-9cee-4694-9bc0-ccbee1ff70db_buggy.java
+++ b/tmp/a9f58f8d-f9c8-4a12-9a1f-ae894021da92_fixed.java
@@ -1,12 +1,33 @@
 /**
  * @return Whether the Node is a DO or FUNCTION (with or without
  * labels).
  */
 private boolean isOneExactlyFunctionOrDo(Node n) {
     // For labels with block children, we need to ensure that a
     // labeled FUNCTION or DO isn't generated when extraneous BLOCKs
     // are skipped.
-          // Either a empty statement or an block with more than one child,
+    // Either an empty statement or a block with more than one child,
     // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+    if (n == null) {
+        return false;
+    }
+    if (n.isLabel()) {
+        Node labeledChild = n.getFirstChild();
+        // If the labeled statement is a BLOCK
+        if (labeledChild != null && labeledChild.isBlock()) {
+            if (labeledChild.hasOneChild()) {
+                Node firstGrandChild = labeledChild.getFirstChild();
+                return isOneExactlyFunctionOrDo(firstGrandChild);
+            } else {
+                // block with multiple children, not exactly a function or do
+                return false;
+            }
+        } else {
+            // Labeled a non-block -> check what it is
+            return isOneExactlyFunctionOrDo(labeledChild);
+        }
+    }
+    // Base case: check just this node type
+    int type = n.getType();
+    return type == Token.FUNCTION || type == Token.DO;
 }
\ No newline at end of file
