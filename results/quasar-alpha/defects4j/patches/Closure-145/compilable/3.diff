diff --git a/tmp/27957012-048b-46a2-bd48-c83ea53b3528_buggy.java b/tmp/1663a8db-374d-44bb-92b5-c5c54151ac52_fixed.java
index 57f69c5..1d53cb1 100644
--- a/tmp/27957012-048b-46a2-bd48-c83ea53b3528_buggy.java
+++ b/tmp/1663a8db-374d-44bb-92b5-c5c54151ac52_fixed.java
@@ -1,12 +1,35 @@
 /**
  * @return Whether the Node is a DO or FUNCTION (with or without
  * labels).
  */
 private boolean isOneExactlyFunctionOrDo(Node n) {
     // For labels with block children, we need to ensure that a
     // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
     // are skipped.
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
+    // Either an empty statement or a block with more than one child,
+    // it isn't a single FUNCTION or DO.
+
+    if (n.getType() == Token.LABEL) {
+        Node firstChild = n.getFirstChild();
+        if (firstChild != null && firstChild.getType() == Token.BLOCK) {
+            if (firstChild.hasOneChild()) {
+                Node onlyChild = firstChild.getFirstChild();
+                int type = onlyChild.getType();
+                return type == Token.FUNCTION || type == Token.DO;
+            }
+            return false;
+        } else {
+            int type = firstChild != null ? firstChild.getType() : -1;
+            return type == Token.FUNCTION || type == Token.DO;
+        }
+    } else if (n.getType() == Token.BLOCK) {
+        if (n.hasOneChild()) {
+            Node onlyChild = n.getFirstChild();
+            int type = onlyChild.getType();
+            return type == Token.FUNCTION || type == Token.DO;
+        }
+        return false;
+    } else {
         return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
     }
+}
\ No newline at end of file
