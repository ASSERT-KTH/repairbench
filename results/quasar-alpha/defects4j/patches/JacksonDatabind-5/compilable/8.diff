diff --git a/tmp/179f2605-5eb3-4429-9c65-5fa73fc7a649_buggy.java b/tmp/c7f999e8-8329-4e69-aef0-9dd97abc0056_fixed.java
index b2db1d6..83ec74e 100644
--- a/tmp/179f2605-5eb3-4429-9c65-5fa73fc7a649_buggy.java
+++ b/tmp/c7f999e8-8329-4e69-aef0-9dd97abc0056_fixed.java
@@ -1,29 +1,22 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
-        parents.add(mixInCls);
+    // instead of starting list with mixInCls, use empty list and collect:
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+    // and traverse in reverse so that parent mix-ins are processed before child ones
+    for (int i = parents.size() - 1; i >= 0; --i) {
+        Class<?> mixin = parents.get(i);
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
