diff --git a/tmp/5d37a4c7-ec32-485d-a7b6-0bb5e50a3f15_buggy.java b/tmp/b3e887b6-ac86-444f-a239-9701e098afe5_fixed.java
index b2db1d6..0d603cd 100644
--- a/tmp/5d37a4c7-ec32-485d-a7b6-0bb5e50a3f15_buggy.java
+++ b/tmp/b3e887b6-ac86-444f-a239-9701e098afe5_fixed.java
@@ -1,29 +1,22 @@
 protected void _addMethodMixIns(Class<?> targetClass, AnnotatedMethodMap methods,
         Class<?> mixInCls, AnnotatedMethodMap mixIns)
 {
     List<Class<?>> parents = new ArrayList<Class<?>>();
     parents.add(mixInCls);
     ClassUtil.findSuperTypes(mixInCls, targetClass, parents);
-        for (Class<?> mixin : parents) {
+    // iterate from parents DOWN-to original mix-in class (reverse order)
+    for (int i = parents.size() - 1; i >= 0; --i) {
+        Class<?> mixin = parents.get(i);
         for (Method m : mixin.getDeclaredMethods()) {
             if (!_isIncludableMemberMethod(m)) {
                 continue;
             }
             AnnotatedMethod am = methods.find(m);
-                /* Do we already have a method to augment (from sub-class
-                 * that will mask this mixIn)? If so, add if visible
-                 * without masking (no such annotation)
-                 */
             if (am != null) {
                 _addMixUnders(m, am);
-                    /* Otherwise will have precedence, but must wait
-                     * until we find the real method (mixIn methods are
-                     * just placeholder, can't be called)
-                     */
             } else {
-                    // Well, or, as per [Issue#515], multi-level merge within mixins...
                 mixIns.add(_constructMethod(m));
             }
         }
     }
 }
\ No newline at end of file
