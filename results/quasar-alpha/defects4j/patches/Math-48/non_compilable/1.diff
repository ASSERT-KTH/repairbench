diff --git a/tmp/7edf8dc7-8d29-45b9-bff8-e334ef1ad5ca_buggy.java b/tmp/899deec4-b56c-49f0-9010-eb4f2f61be2e_fixed.java
index 14b51f9..fac2352 100644
--- a/tmp/7edf8dc7-8d29-45b9-bff8-e334ef1ad5ca_buggy.java
+++ b/tmp/899deec4-b56c-49f0-9010-eb4f2f61be2e_fixed.java
@@ -1,124 +1,117 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
-        // Verify bracketing of initial solution.
+    // Verify bracketing of initial solution
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Keep track of inverted intervals
     boolean inverted = false;
 
-        // Keep finding better approximations.
+    // Track evaluation count; trigger max count if stuck
+    int stuckCounter = 0;
+
     while (true) {
-            // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
         if (fx == 0.0) {
             return x;
         }
 
-            // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
+            stuckCounter = 0; // reset stuck detection
         } else {
+            // Potentially update f0 to avoid fixed f0 behavior
             switch (method) {
             case ILLINOIS:
                 f0 *= 0.5;
+                stuckCounter = 0; // reset, since updating factor
                 break;
             case PEGASUS:
                 f0 *= f1 / (f1 + fx);
+                stuckCounter = 0; // reset, since updating factor
                 break;
             case REGULA_FALSI:
-                    // Detect early that algorithm is stuck, instead of waiting
-                    // for the maximum number of iterations to be exceeded.
+                // check for no improvement, indicating stuck condition
+                stuckCounter++;
+                if (stuckCounter >= getMaximalIterationCount()) {
+                    throw new ConvergenceException(
+                        LocalizedFormats.CONVERGENCE_FAILED);
+                }
                 break;
             default:
-                    // Should never happen.
                 throw new MathInternalError();
             }
         }
-            // Update from [x0, x1] to [x0, x].
+
         x1 = x;
         f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 if (inverted) {
                     return x1;
                 }
                 break;
             case RIGHT_SIDE:
                 if (!inverted) {
                     return x1;
                 }
                 break;
             case BELOW_SIDE:
                 if (f1 <= 0) {
                     return x1;
                 }
                 break;
             case ABOVE_SIDE:
                 if (f1 >= 0) {
                     return x1;
                 }
                 break;
             default:
                 throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
             case ANY_SIDE:
                 return x1;
             case LEFT_SIDE:
                 return inverted ? x1 : x0;
             case RIGHT_SIDE:
                 return inverted ? x0 : x1;
             case BELOW_SIDE:
                 return (f1 <= 0) ? x1 : x0;
             case ABOVE_SIDE:
                 return (f1 >= 0) ? x1 : x0;
             default:
                 throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
