diff --git a/tmp/981c4c6a-2d9c-4096-850c-12dac68877c3_buggy.java b/tmp/13acc524-fddf-4e0d-b771-debcda99d3e3_fixed.java
index 2d9cf24..30e9c4c 100644
--- a/tmp/981c4c6a-2d9c-4096-850c-12dac68877c3_buggy.java
+++ b/tmp/13acc524-fddf-4e0d-b771-debcda99d3e3_fixed.java
@@ -1,33 +1,53 @@
 public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException
 {
-        // There are certain nasty classes that could cause problems, mostly
-        // via default typing -- catch them here.
-        final Class<?> raw = type.getRawClass();
-        String full = raw.getName();
+    // Defensive check: type or raw class may be null (although null type may be unlikely)
+    if (type == null) {
+        return;
+    }
+    final Class<?> raw;
+    try {
+        raw = type.getRawClass();
+    } catch (Throwable t) {
+        // Defensive: getRawClass() could throw, though unlikely; fail-safe
+        return;
+    }
+    if (raw == null) {
+        return;
+    }
+
+    String full;
+    try {
+        full = raw.getName();
+    } catch (Throwable t) {
+        // Defensive: unlikely, just in case
+        return;
+    }
 
     main_check:
     do {
-            if (_cfgIllegalClassNames.contains(full)) {
+        // Defensive: _cfgIllegalClassNames could be null
+        if (_cfgIllegalClassNames != null && _cfgIllegalClassNames.contains(full)) {
             break;
         }
 
-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling
-            //    for some Spring framework types
-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces
         if (full.startsWith(PREFIX_STRING)) {
-                for (Class<?> cls = raw; cls != Object.class; cls = cls.getSuperclass()) {
-                    String name = cls.getSimpleName();
-                    // looking for "AbstractBeanFactoryPointcutAdvisor" but no point to allow any is there?
+            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {
+                String name;
+                try {
+                    name = cls.getSimpleName();
+                } catch (Throwable t) {
+                    // Defensive
+                    continue;
+                }
                 if ("AbstractPointcutAdvisor".equals(name)
-                            // ditto  for "FileSystemXmlApplicationContext": block all ApplicationContexts
                         || "AbstractApplicationContext".equals(name)) {
                     break main_check;
                 }
             }
         }
         return;
     } while (false);
 
     throw JsonMappingException.from(ctxt,
             String.format("Illegal type (%s) to deserialize: prevented for security reasons", full));
 }
\ No newline at end of file
