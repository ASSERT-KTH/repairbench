diff --git a/tmp/ae8e5c56-9c1a-40cc-b281-8e56f57474d7_buggy.java b/tmp/a59f2785-f3cb-46a7-8de7-d528e758991a_fixed.java
index d357c7e..5a20d7a 100644
--- a/tmp/ae8e5c56-9c1a-40cc-b281-8e56f57474d7_buggy.java
+++ b/tmp/a59f2785-f3cb-46a7-8de7-d528e758991a_fixed.java
@@ -1,16 +1,38 @@
 private InputStream getCurrentStream() throws IOException {
     if (deferredBlockStreams.isEmpty()) {
         throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
     }
 
     while (deferredBlockStreams.size() > 1) {
         // In solid compression mode we need to decompress all leading folder'
         // streams to get access to an entry. We defer this until really needed
         // so that entire blocks can be skipped without wasting time for decompression.
         final InputStream stream = deferredBlockStreams.remove(0);
         IOUtils.skip(stream, Long.MAX_VALUE);
         stream.close();
     }
 
-        return deferredBlockStreams.get(0);
+    InputStream currentStream = deferredBlockStreams.get(0);
+
+    // Fix: for empty entries the stream may immediately signal EOF,
+    // so treat empty stream similarly to having no stream at all.
+    // To avoid IllegalStateException on read, consume and remove empty streams here.
+    while (true) {
+        currentStream.mark(1);
+        int b = currentStream.read();
+        if (b != -1) {
+            currentStream.reset();
+            return currentStream;
+        } else {
+            // underlying stream is exhausted -> discard it
+            currentStream.close();
+            deferredBlockStreams.remove(0);
+            if (deferredBlockStreams.isEmpty()) {
+                // all streams exhausted
+                throw new IllegalStateException("No current 7z entry (call getNextEntry() first).");
+            } else {
+                currentStream = deferredBlockStreams.get(0);
+            }
+        }
+    }
 }
\ No newline at end of file
