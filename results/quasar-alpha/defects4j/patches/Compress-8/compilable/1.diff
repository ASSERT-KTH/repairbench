diff --git a/tmp/4eb7ae7c-0c65-4c59-b415-de9e34a32da2_buggy.java b/tmp/0cf9aa3f-0dab-43bd-a3f1-740483a9b23f_fixed.java
index e087f95..4724064 100644
--- a/tmp/4eb7ae7c-0c65-4c59-b415-de9e34a32da2_buggy.java
+++ b/tmp/0cf9aa3f-0dab-43bd-a3f1-740483a9b23f_fixed.java
@@ -1,53 +1,64 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+
     int end = offset + length;
     int start = offset;
+    boolean allNuls = true;
 
+    // Check if buffer is all NULs
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Find first trailer (space or NUL)
+    int trailerIdx = -1;
+    for (int i = start; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            trailerIdx = i;
+            break;
+        }
+    }
+    if (trailerIdx == -1) {
+        throw new IllegalArgumentException(
+            "Invalid octal byte: no trailing space or NUL found");
+    }
+
+    // Any bytes after first trailer must also be trailer (either space or NUL)
+    for (int i = trailerIdx + 1; i < end; i++) {
+        byte currentByte = buffer[i];
+        if (currentByte != 0 && currentByte != (byte) ' ') {
+            throw new IllegalArgumentException(
+                "Invalid octal byte: extra non-padding bytes after trailer");
+        }
+    }
+
+    long result = 0;
+    boolean stillPadding = true;
+    for (int i = start; i < trailerIdx; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        // Skip leading spaces and zeros
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
     }
 
     return result;
 }
\ No newline at end of file
