diff --git a/tmp/33f630b6-9f8d-4d3e-92f2-2b4560c678aa_buggy.java b/tmp/06a4ee44-a2b6-450b-819d-96b659728633_fixed.java
index e087f95..4205d5c 100644
--- a/tmp/33f630b6-9f8d-4d3e-92f2-2b4560c678aa_buggy.java
+++ b/tmp/06a4ee44-a2b6-450b-819d-96b659728633_fixed.java
@@ -1,53 +1,77 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    if (length < 2 || buffer == null || offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid buffer range or length < 2");
+    }
+
     int end = offset + length;
     int start = offset;
 
+    // Check for all NULs
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+        if (buffer[i] != 0) {
+            allNuls = false;
             break;
         }
+    }
+    if (allNuls) {
+        return 0L;
+    }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+    // check for a valid trailer: must be space or NUL in last 1 or 2 bytes
+    boolean hasTrailer = false;
+    if (length >= 2) {
+        byte last = buffer[end - 1];
+        byte secondLast = buffer[end - 2];
+        if ((last == 0 || last == (byte) ' ')) {
+            hasTrailer = true;
+        } else if ((secondLast == 0 || secondLast == (byte) ' ') &&
+                   (last == 0 || last == (byte) ' ')) {
+            hasTrailer = true;
+        }
+    }
+    if (!hasTrailer) {
+        throw new IllegalArgumentException("Invalid octal: missing trailing space or NUL");
+    }
+
+    long result = 0;
+    boolean stillPadding = true;
+    boolean seenDigit = false;
+
+    for (int i = start; i < end; i++) {
+        byte b = buffer[i];
+        if (b == 0 || b == (byte) ' ') {
+            // If still in padding, skip
             if (stillPadding) {
                 continue;
+            } else {
+                // trailing space or NUL, parsing stops here
+                // check if there are only additional trailing spaces or NULs
+                for (int j = i; j < end; j++) {
+                    byte c = buffer[j];
+                    if (c != 0 && c != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, i, c));
+                    }
                 }
-                if (currentByte == (byte) ' ') {
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+        } else if (b == '0' && stillPadding) {
+            continue;
+        } else {
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
-            if (currentByte < '0' || currentByte > '7'){
+            seenDigit = true;
+            if (b < '0' || b > '7') {
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, b));
+            }
+            result = (result << 3) + (b - '0');
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
+    if (!seenDigit) {
+        // Did not see any digit
+        return 0L;
+    }
     return result;
 }
\ No newline at end of file
