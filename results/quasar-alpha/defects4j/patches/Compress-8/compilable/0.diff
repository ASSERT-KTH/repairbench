diff --git a/tmp/41e659ad-cdbf-458a-ba71-3ea5f100f4ca_buggy.java b/tmp/038ee4e1-ff2f-4583-a24e-9874fa24a7fa_fixed.java
index e087f95..aad0c4f 100644
--- a/tmp/41e659ad-cdbf-458a-ba71-3ea5f100f4ca_buggy.java
+++ b/tmp/038ee4e1-ff2f-4583-a24e-9874fa24a7fa_fixed.java
@@ -1,53 +1,60 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
     int end = offset + length;
     int start = offset;
 
+    // Check for all NULs case
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Find actual last meaningful byte (trailer)
+    int trailerIndex = end - 1;
+    if (buffer[trailerIndex] == 0 || buffer[trailerIndex] == (byte) ' ') {
+        // ok, trailer found
+    } else if (length >= 2 && (buffer[trailerIndex - 1] == 0 || buffer[trailerIndex - 1] == (byte) ' ')) {
+        trailerIndex--;
+    } else {
+        throw new IllegalArgumentException("Invalid octal: no valid trailer found");
+    }
+
+    // Parse core bytes upto trailerIndex (exclude trailer itself)
+    long result = 0;
+    boolean stillPadding = true;
+    for (int i = start; i < trailerIndex; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
-                   continue;
+                continue; // skip leading spaces/NULs
+            } else {
+                // embedded space/NUL; terminate parse, must be padding, so invalid (embedded)
+                throw new IllegalArgumentException(
+                        "Invalid octal: embedded NUL or space at index " + i);
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    "Invalid octal digit at index " + i + ": " + currentByte);
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // After parsing digits confirm at least one digit was parsed, i.e., not only padding
+    if (stillPadding) {
+        // no digits found
+        return 0L;
     }
 
     return result;
 }
\ No newline at end of file
