diff --git a/tmp/adaf828c-2093-487c-b9a9-d2a795d2366d_buggy.java b/tmp/739e4a7f-3c43-4cfc-89c1-c1c81e071512_fixed.java
index e087f95..28c041d 100644
--- a/tmp/adaf828c-2093-487c-b9a9-d2a795d2366d_buggy.java
+++ b/tmp/739e4a7f-3c43-4cfc-89c1-c1c81e071512_fixed.java
@@ -1,53 +1,65 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes, got " + length);
+    }
+
+    final int end = offset + length;
+    int i = offset;
+
+    // Check all zeros special case (permits missing fields)
+    boolean allNuls = true;
+    for (; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Reset index to parse content
+    i = offset;
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+    boolean foundTrailer = false;
 
-        for (int i = start; i < end; i++){
+    while (i < end) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailer = true;
             break;
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) '0' || currentByte == (byte) ' ')) {
+            // skip leading zeroes or spaces
+            i++;
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+        result = (result << 3) + (currentByte - '0');
+        i++;
+    }
+
+    if (!foundTrailer) {
+        throw new IllegalArgumentException("Invalid octal string: missing trailing space or NUL");
+    }
+
+    // After trailer, check that the remaining bytes are either spaces or NULs
+    for (int j = i; j < end; j++) {
+        byte b = buffer[j];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, j, b));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
