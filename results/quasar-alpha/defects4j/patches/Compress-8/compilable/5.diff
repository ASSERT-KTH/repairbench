diff --git a/tmp/4221d512-6883-433f-8e03-9e092432841c_buggy.java b/tmp/d42ebd98-0f0a-4204-9d09-17d199e0841a_fixed.java
index e087f95..952a7d9 100644
--- a/tmp/4221d512-6883-433f-8e03-9e092432841c_buggy.java
+++ b/tmp/d42ebd98-0f0a-4204-9d09-17d199e0841a_fixed.java
@@ -1,53 +1,72 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (length < 2) {
+        throw new IllegalArgumentException("Buffer length must be at least 2");
+    }
+    if (buffer == null || offset < 0 || length < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for buffer");
+    }
+
     int start = offset;
+    int end = offset + length;
 
+    // Check for all NULs
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Must have a valid trailer (last or last two bytes)
+    int trailerPos = end - 1;
+    while (trailerPos >= start && (buffer[trailerPos] == 0 || buffer[trailerPos] == (byte) ' ')) {
+        trailerPos--;
+    }
+    trailerPos++;
+    if (trailerPos >= end) { // no trailer found
+        throw new IllegalArgumentException("Invalid trailer: missing trailing space or NUL");
+    }
+
+    long result = 0L;
+    boolean stillPadding = true;
+    for (int i = start; i < trailerPos; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
-                   continue;
+                continue; // skip leading spaces/NULs/padding zeros
+            } else {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte)); // embedded space or NUL
             }
-                if (currentByte == (byte) ' ') {
-                break;
         }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // After accumulating digits, make sure remaining chars (if any) are zeros/spaces
+    for (int i = trailerPos; i < end; i++) {
+        byte b = buffer[i];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, b));
+        }
+    }
+    // Also, ensure at least one trailer character exists
+    if (trailerPos == end) {
+        throw new IllegalArgumentException("Invalid trailer: missing trailing space or NUL");
     }
 
     return result;
 }
\ No newline at end of file
