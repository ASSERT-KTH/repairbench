diff --git a/tmp/33f07f60-4ac9-4bf7-98b7-c4dc8ae56ea7_buggy.java b/tmp/4c45b639-81ba-45ae-af8f-70ac408fcc5c_fixed.java
index e087f95..de19ea1 100644
--- a/tmp/33f07f60-4ac9-4bf7-98b7-c4dc8ae56ea7_buggy.java
+++ b/tmp/4c45b639-81ba-45ae-af8f-70ac408fcc5c_fixed.java
@@ -1,53 +1,57 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
+    if (length < 2) { // Must be at least 2 bytes long
+        throw new IllegalArgumentException(
+            "Length is less than minimum required 2 bytes: " + length);
+    }
+    final int end = offset + length;
+    if (end > buffer.length || offset < 0 || length < 0) {
+        throw new IllegalArgumentException("Invalid offset or length");
+    }
+
+    boolean allNuls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    // Check last byte(s) for valid trailer: should be 0 or space
+    int lastIdx = end - 1;
+    if (!(buffer[lastIdx] == 0 || buffer[lastIdx] == (byte) ' ')) {
+        throw new IllegalArgumentException("Invalid trailer in buffer: expected space or NUL");
+    }
+    // Optional second trailing NUL or space
+    int trailerCount = 1;
+    if (length >= 2 && lastIdx - 1 >= offset && (buffer[lastIdx - 1] == 0 || buffer[lastIdx - 1] == (byte) ' ')) {
+        trailerCount++;
+    }
+
+    int digitEnd = end - trailerCount;
+
     boolean stillPadding = true;
-        int     end = offset + length;
+    long result = 0;
     int start = offset;
-
-        for (int i = start; i < end; i++){
+    for (int i = start; i < digitEnd; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+            // Embedded NUL or space terminates digits early => INVALID
+            throw new IllegalArgumentException(
+                "Invalid embedded NUL or space in buffer at position " + i);
+        } else {
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0');
+        }
     }
-
     return result;
 }
\ No newline at end of file
