diff --git a/tmp/62721229-e3ea-48be-97f6-b66c2a15927f_buggy.java b/tmp/1d9d2c9d-4755-4da8-970b-83c8dc82493e_fixed.java
index e087f95..1955c3f 100644
--- a/tmp/62721229-e3ea-48be-97f6-b66c2a15927f_buggy.java
+++ b/tmp/1d9d2c9d-4755-4da8-970b-83c8dc82493e_fixed.java
@@ -1,53 +1,79 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
     long result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
     int start = offset;
+    int end = offset + length;
 
+    // Check if all bytes are NULs; if so, return 0
+    boolean allNuls = true;
     for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    boolean stillPadding = true;
+    int lastNonPadIndex = -1;
+    int firstDigit = -1;
+
+    // Find position of trailer char
+    int trailerPos = -1;
+    for (int i = end - 1; i >= start; i--) {
+        byte b = buffer[i];
+        if (b == 0 || b == (byte) ' ') {
+            trailerPos = i;
+        } else {
+            break;
+        }
+    }
+    if (trailerPos == -1 || trailerPos < start + 1) { // need at least 1 digit before trailer
+        throw new IllegalArgumentException("Invalid octal byte sequence: missing or insufficient trailer at offset " + offset);
+    }
+
+    for (int i = start; i < trailerPos; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == ' ' || currentByte == '0') {
             if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
+            // embedded space or zero not allowed after digits started
+            if (currentByte == ' ') {
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+        // embedded NULs not allowed
+        if (currentByte == 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, currentByte));
+        }
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // After trailerPos, the bytes (if any) are padding, all must be NUL or space
+    for (int i = trailerPos; i < end; i++) {
+        byte b = buffer[i];
+        if (b != 0 && b != (byte) ' ') {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, b));
+        }
+    }
+
+    // There must be at least one digit parsed (i.e., no all-padding before trailer)
+    if (stillPadding) {
+        throw new IllegalArgumentException("No digits found");
     }
 
     return result;
 }
\ No newline at end of file
