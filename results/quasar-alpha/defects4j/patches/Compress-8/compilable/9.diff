diff --git a/tmp/67d6871b-fca8-44ff-a16d-3f72806a9afd_buggy.java b/tmp/87f3bdfb-f466-47de-b21b-7e427eaacfa1_fixed.java
index e087f95..3a6b6f1 100644
--- a/tmp/67d6871b-fca8-44ff-a16d-3f72806a9afd_buggy.java
+++ b/tmp/87f3bdfb-f466-47de-b21b-7e427eaacfa1_fixed.java
@@ -1,53 +1,67 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        boolean stillPadding = true;
-        int     end = offset + length;
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
+    if (offset < 0 || offset + length > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset and/or length");
+    }
+
+    boolean allNuls = true;
+    for (int i = offset; i < offset + length; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
     int start = offset;
+    int end = offset + length;
+
+    // Skip leading spaces and zeros (padding)
+    while (start < end && (buffer[start] == (byte) ' ' || buffer[start] == (byte) '0')) {
+        start++;
+    }
+
+    if (start >= end) {
+        throw new IllegalArgumentException("No valid octal digits found");
+    }
+
+    long result = 0;
+    boolean digitSeen = false;
+    boolean trailerFound = false;
 
     for (int i = start; i < end; i++) {
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+        byte currentByte = buffer[i];
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            trailerFound = true;
+            // Check remaining buffer: must be only space or NUL
+            for (int j = i + 1; j < end; j++) {
+                byte b = buffer[j];
+                if (b != 0 && b != (byte) ' ') {
+                    throw new IllegalArgumentException("Invalid trailer in header: non-space/non-NUL after terminator");
                 }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
             }
-                if (currentByte == (byte) ' ') {
             break;
         }
+        if (trailerFound) {
+            throw new IllegalArgumentException("Invalid data after terminator in header");
         }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
-                throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        digitSeen = true;
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    if (!trailerFound) {
+        throw new IllegalArgumentException("Missing trailing space or NUL");
+    }
+    if (!digitSeen) {
+        throw new IllegalArgumentException("No octal digits found");
     }
 
     return result;
 }
\ No newline at end of file
