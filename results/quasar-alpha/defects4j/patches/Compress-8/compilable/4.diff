diff --git a/tmp/c09d49c5-af9d-47b9-8c01-807b2de5c85f_buggy.java b/tmp/c2a89950-5187-42d0-bf6b-a46ebacff598_fixed.java
index e087f95..2240703 100644
--- a/tmp/c09d49c5-af9d-47b9-8c01-807b2de5c85f_buggy.java
+++ b/tmp/c2a89950-5187-42d0-bf6b-a46ebacff598_fixed.java
@@ -1,53 +1,66 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2");
+    }
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
     int start = offset;
+    int end = offset + length;
 
+    // Check that the input buffer is within bounds
+    if (offset < 0 || length < 0 || end > buffer.length) {
+        throw new IllegalArgumentException("Invalid offset/length for buffer size");
+    }
+
+    // Special case: all NULs is interpreted as zero
+    boolean allNuls = true;
+    for (int i = start; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNuls = false;
+            break;
+        }
+    }
+    if (allNuls) {
+        return 0L;
+    }
+
+    boolean foundTrailer = false;
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+
+        // Accept first embedded trailer (' ' or NUL)
+        if (currentByte == 0 || currentByte == (byte) ' ') {
+            foundTrailer = true;
+
+            // Any further bytes must only be trailer bytes
+            for (int j = i + 1; j < end; j++) {
+                byte b = buffer[j];
+                if (b != 0 && b != (byte) ' ') {
+                    throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, b));
+                }
+            }
+            break; // done parsing
         }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+        if (stillPadding && (currentByte == (byte) ' ' || currentByte == (byte) '0')) {
             continue;
         }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+        // Must be an octal digit
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    if (!foundTrailer) {
+        throw new IllegalArgumentException(
+            "Invalid octal byte sequence: does not end with space or NUL");
     }
 
     return result;
 }
\ No newline at end of file
