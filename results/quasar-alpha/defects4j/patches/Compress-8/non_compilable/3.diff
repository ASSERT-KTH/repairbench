diff --git a/tmp/e155bc1d-479f-4474-942a-4df412c4cd8d_buggy.java b/tmp/c216e39a-24bf-45cd-b33c-76984cd24773_fixed.java
index e087f95..22c326b 100644
--- a/tmp/e155bc1d-479f-4474-942a-4df412c4cd8d_buggy.java
+++ b/tmp/c216e39a-24bf-45cd-b33c-76984cd24773_fixed.java
@@ -1,53 +1,61 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes, got " + length);
+    }
+    final int end = offset + length;
+
+    // Check if all bytes are NUL, if so return 0L
+    boolean allNulls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
+            break;
+        }
+    }
+    if (allNulls) {
+        return 0L;
+    }
+
     long result = 0;
     boolean stillPadding = true;
-        int     end = offset + length;
-        int     start = offset;
+    int trailerCount = 0;
+    Integer trailerPos = null;
 
-        for (int i = start; i < end; i++){
+    for (int i = offset; i < end; i++) {
         final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        if (currentByte == 0 || currentByte == (byte) ' ') {
             if (stillPadding) {
+                continue; // skip leading space or leading zero padding
+            } else {
+                if (trailerCount == 0) {
+                    trailerPos = i;
+                }
+                trailerCount++;
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        if (trailerCount > 0) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, trailerPos, currentByte));
+        }
 
         stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    if (trailerCount == 0) {
+        // missing mandatory trailer space or NUL
+        throw new IllegalArgumentException(
+                "Invalid octal byte sequence: no trailing space or NUL found");
     }
 
     return result;
 }
\ No newline at end of file
