diff --git a/tmp/4dfb99ed-7344-4f6d-9d6b-6354836b6f75_buggy.java b/tmp/507656c8-aeae-43ed-972e-26fdfd15659f_fixed.java
index fb2b020..aebd3a8 100644
--- a/tmp/4dfb99ed-7344-4f6d-9d6b-6354836b6f75_buggy.java
+++ b/tmp/507656c8-aeae-43ed-972e-26fdfd15659f_fixed.java
@@ -1,27 +1,26 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
   
+  // Only match constraints when both types are structural (anonymous or record)
+  if (!(isRecordType() || isUnnamedType()) ||
+      !(constraintObj.isRecordType() || constraintObj.isUnnamedType())) {
+    return;
+  }
+
   // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
+          // Extend the inference from void to union(void, propType) for optional props
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
