diff --git a/tmp/6f624d35-cf91-4536-bf9e-5a2dd82e55e6_buggy.java b/tmp/c6736d60-0625-4ec1-b513-f496d098424b_fixed.java
index eea9e73..8e464a8 100644
--- a/tmp/6f624d35-cf91-4536-bf9e-5a2dd82e55e6_buggy.java
+++ b/tmp/c6736d60-0625-4ec1-b513-f496d098424b_fixed.java
@@ -1,41 +1,30 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+    int csOffset = 0;
+    while (csOffset < csLength) {
+        int codePoint = Character.codePointAt(cs, csOffset);
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            char searchChar = searchChars[j];
+            if (Character.isHighSurrogate(searchChar) && (j + 1) < searchLength) {
+                char low = searchChars[j + 1];
+                if (Character.isLowSurrogate(low)) {
+                    int searchCodePoint = Character.toCodePoint(searchChar, low);
+                    if (codePoint == searchCodePoint) {
                         return true;
                     }
+                    j++; // Skip low surrogate as it's part of the current code point
+                    continue;
                 }
             }
+            if (codePoint <= Character.MAX_VALUE && searchChar == (char) codePoint) {
+                return true;
+            }
+        }
+        csOffset += Character.charCount(codePoint);
+    }
     return false;
 }
\ No newline at end of file
