diff --git a/tmp/971d808e-4c81-4740-ad55-954947929c46_buggy.java b/tmp/223e31bd-ff70-4d89-98df-192fd005c1a3_fixed.java
index eea9e73..497ab22 100644
--- a/tmp/971d808e-4c81-4740-ad55-954947929c46_buggy.java
+++ b/tmp/223e31bd-ff70-4d89-98df-192fd005c1a3_fixed.java
@@ -1,41 +1,31 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+    int csLen = cs.length();
+    int searchLen = searchChars.length;
+
+    // Iterate through codepoints of cs
+    for (int i = 0; i < csLen; ) {
+        int codePoint = Character.codePointAt(cs, i);
+        // Iterate through searchChars array
+        for (int j = 0; j < searchLen; ) {
+            int searchCodePoint;
+            // Determine if the character at position j is a high surrogate part of a supplementary codepoint
+            if (Character.isHighSurrogate(searchChars[j]) 
+                && j + 1 < searchLen 
+                && Character.isLowSurrogate(searchChars[j + 1])) {
+                searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);
+                j += 2;
+            } else {
+                searchCodePoint = searchChars[j];
+                j++;
+            }
+            if (codePoint == searchCodePoint) {
                 return true;
             }
         }
+        i += Character.charCount(codePoint);
     }
     return false;
 }
\ No newline at end of file
