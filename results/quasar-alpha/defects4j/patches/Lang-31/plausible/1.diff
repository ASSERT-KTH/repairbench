diff --git a/tmp/5e587d41-cd0e-43a1-8ce1-1eb2397333eb_buggy.java b/tmp/18b275c9-8c54-41ff-aaac-782575da6925_fixed.java
index eea9e73..4cf3b07 100644
--- a/tmp/5e587d41-cd0e-43a1-8ce1-1eb2397333eb_buggy.java
+++ b/tmp/18b275c9-8c54-41ff-aaac-782575da6925_fixed.java
@@ -1,41 +1,41 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
-		for (int i = 0; i < csLength; i++) {
-			char ch = cs.charAt(i);
+    int i = 0;
+    while (i < csLength) {
+        int cp = Character.codePointAt(cs, i);
         for (int j = 0; j < searchLength; j++) {
-				if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+            char searchChar = searchChars[j];
+            // If searchChar is a high surrogate and there's a next char, check for surrogate pair
+            if (Character.isHighSurrogate(searchChar)) {
+                if (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {
+                    int searchCp = Character.toCodePoint(searchChar, searchChars[j + 1]);
+                    if (cp == searchCp) {
                         return true;
                     }
+                    j++; // Skip the low surrogate in next iteration
+                } else {
+                    // Unpaired high surrogate, treat as character unit
+                    if (cp == searchChar) {
+                        return true;
+                    }
+                }
+            } else if (Character.isLowSurrogate(searchChar)) {
+                // Unpaired low surrogate
+                if (cp == searchChar) {
+                    return true;
+                }
+            } else {
+                // Normal BMP character
+                if (cp == searchChar) {
+                    return true;
+                }
+            }
         }
+        i += Character.charCount(cp);
     }
     return false;
 }
\ No newline at end of file
