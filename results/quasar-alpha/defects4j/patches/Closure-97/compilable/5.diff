diff --git a/tmp/4669dfdf-8087-4255-a624-a28a58ed6b5b_buggy.java b/tmp/21b136c7-5c6c-4078-86ca-e2e35c6d50ee_fixed.java
index 1126687..2bdf265 100644
--- a/tmp/4669dfdf-8087-4255-a624-a28a58ed6b5b_buggy.java
+++ b/tmp/21b136c7-5c6c-4078-86ca-e2e35c6d50ee_fixed.java
@@ -1,65 +1,64 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
     double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+    int rvalInt = (int) rval;
+    if (rvalInt != rval) {
+      error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+    // only the lower 5 bits are used when shifting, so mask to [0,31]
+    int maskedShift = rvalInt & 0x1F;
+
+    if (!(maskedShift >= 0 && maskedShift < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
-      // Convert the numbers to ints
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
+    // For LSH and RSH, require int32 range operand
+    if (n.getType() != Token.URSH) {
+      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
+    }
 
     switch (n.getType()) {
       case Token.LSH:
-          result = lvalInt << rvalInt;
+        result = lvalInt << maskedShift;
         break;
       case Token.RSH:
-          result = lvalInt >> rvalInt;
+        result = lvalInt >> maskedShift;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        long lvalUnsigned = lvalInt & 0xFFFFFFFFL;
+        result = (lvalUnsigned >>> maskedShift);
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
