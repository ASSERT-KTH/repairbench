diff --git a/tmp/addbbfa8-98f7-4c1e-82ae-4efc8b38a258_buggy.java b/tmp/1d7bf1e9-6c48-4dda-9907-50ceffbcc7ea_fixed.java
index 1126687..6908ad2 100644
--- a/tmp/addbbfa8-98f7-4c1e-82ae-4efc8b38a258_buggy.java
+++ b/tmp/1d7bf1e9-6c48-4dda-9907-50ceffbcc7ea_fixed.java
@@ -1,65 +1,67 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
-      // Convert the numbers to ints
+    // Fractional operand checks first.
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
     int rvalInt = (int) rval;
     if (rvalInt != rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
+    // Range check for left value: operand must be in int32 range.
+    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+      error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+      return n;
+    }
+
+    // Only lower 5 bits of shift amount are used; effective shift is masked.
+    // But report errors if outside JS spec defined bounds [0, 32).
+    if (!(rval >= 0 && rval < 32)) {
+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+      return n;
+    }
+
+    double result;
     switch (n.getType()) {
       case Token.LSH:
-          result = lvalInt << rvalInt;
+        result = ((int) lval) << (rvalInt & 0x1F);
         break;
       case Token.RSH:
-          result = lvalInt >> rvalInt;
+        result = ((int) lval) >> (rvalInt & 0x1F);
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        // For >>>, Java applies zero-fill on 32-bit int,
+        // JavaScript converts this unsigned 32-bit number to double
+        result = ((int) lval) >>> (rvalInt & 0x1F);
+        // Interpret as unsigned: convert to long first, mask
+        if (result < 0) {
+          result += 0x100000000L;
+        }
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
