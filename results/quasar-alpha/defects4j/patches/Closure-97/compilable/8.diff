diff --git a/tmp/72c48336-95d2-4763-bb07-bbb62c0cc581_buggy.java b/tmp/c0652959-d4fe-46c1-9db6-ad88929ff08e_fixed.java
index 1126687..6bce78b 100644
--- a/tmp/72c48336-95d2-4763-bb07-bbb62c0cc581_buggy.java
+++ b/tmp/c0652959-d4fe-46c1-9db6-ad88929ff08e_fixed.java
@@ -1,65 +1,75 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
-      }
-
     // Convert the numbers to ints
     int lvalInt = (int) lval;
+    int rvalInt = (int) rval;
+
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
-      int rvalInt = (int) rval;
     if (rvalInt != rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
+    // check ranges.
+    // For the shift amount, only lower 5 bits are relevant, so shift counts outside [0,32) are invalid
+    if (!(rvalInt >= 0 && rvalInt < 32)) {
+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+      return n;
+    }
+
+    // For left operand, in Java and JavaScript, bitwise ops work on 32-bit signed ints,
+    // so check its magnitude (only for << and >>)
+    switch (n.getType()) {
+      case Token.LSH:
+      case Token.RSH:
+        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+          error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+          return n;
+        }
+        break;
+      case Token.URSH:
+        // unsigned right shift interprets the left operand as uint32, which in JavaScript
+        // can be from 0 to 2^32 -1, including negative numbers interpreted unsigned
+        // So no range check here.
+        break;
+      default:
+        throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
+    }
+
+    double result;
     switch (n.getType()) {
       case Token.LSH:
         result = lvalInt << rvalInt;
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        // JavaScript unsigned right shift yields uint32 result
+        result = ((long) lvalInt & 0xFFFFFFFFL) >>> rvalInt;
         break;
       default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+        throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
