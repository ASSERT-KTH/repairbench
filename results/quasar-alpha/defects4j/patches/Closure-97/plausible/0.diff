diff --git a/tmp/e5dd89ae-6fe2-4754-8e48-4848dd2578e2_buggy.java b/tmp/3cd47c37-63f6-4648-bc5d-786f69de013c_fixed.java
index 1126687..6fe8b0b 100644
--- a/tmp/e5dd89ae-6fe2-4754-8e48-4848dd2578e2_buggy.java
+++ b/tmp/3cd47c37-63f6-4648-bc5d-786f69de013c_fixed.java
@@ -1,65 +1,68 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+    // Convert the right operand to int shift amount early
+    int rvalInt = (int) rval;
+    if (rvalInt != rval) {
+      error(FRACTIONAL_BITWISE_OPERAND, right);
+      return n;
+    }
+
+    // only the lower 5 bits are used when shifting, so treat shift amount modulo 32
+    if (!(rvalInt >= 0 && rvalInt < 32)) {
+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+      return n;
+    }
+
+    // JavaScript treats the left operand differently for >>> (unsigned right shift)
+    boolean isUnsignedShift = (n.getType() == Token.URSH);
+
+    if (!isUnsignedShift) {
+      // For << and >>, enforce the input is a valid int32 range
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
-
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
-        return n;
     }
 
-      // Convert the numbers to ints
+    // For fractional left operands, error unconditionally
     int lvalInt = (int) lval;
     if (lvalInt != lval) {
       error(FRACTIONAL_BITWISE_OPERAND, left);
       return n;
     }
 
-      int rvalInt = (int) rval;
-      if (rvalInt != rval) {
-        error(FRACTIONAL_BITWISE_OPERAND, right);
-        return n;
-      }
-
+    double result;
     switch (n.getType()) {
       case Token.LSH:
         result = lvalInt << rvalInt;
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
       case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+        // Special care: convert to 32-bit unsigned int as per spec, zero-fill right shift
+        long lvalUnsigned = ((long) lvalInt) & 0xFFFFFFFFL;
+        result = (lvalUnsigned >>> rvalInt);
         break;
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
