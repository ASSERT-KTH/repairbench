diff --git a/tmp/4adcb1cf-2cd3-4cc8-8a32-147354aae5ac_buggy.java b/tmp/afb6b2cc-0be7-49ee-9be6-75ce3edac637_fixed.java
index 1126687..c534395 100644
--- a/tmp/4adcb1cf-2cd3-4cc8-8a32-147354aae5ac_buggy.java
+++ b/tmp/afb6b2cc-0be7-49ee-9be6-75ce3edac637_fixed.java
@@ -1,65 +1,70 @@
 /**
  * Try to fold shift operations
  */
 private Node tryFoldShift(Node n, Node left, Node right) {
   if (left.getType() == Token.NUMBER &&
       right.getType() == Token.NUMBER) {
 
-      double result;
     double lval = left.getDouble();
     double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
-        return n;
-      }
-
     // only the lower 5 bits are used when shifting, so don't do anything
     // if the shift amount is outside [0,32)
     if (!(rval >= 0 && rval < 32)) {
       error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
       return n;
     }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
-      if (lvalInt != lval) {
-        error(FRACTIONAL_BITWISE_OPERAND, left);
-        return n;
-      }
-
+    // Convert shift amount to int
     int rvalInt = (int) rval;
     if (rvalInt != rval) {
       error(FRACTIONAL_BITWISE_OPERAND, right);
       return n;
     }
 
-      switch (n.getType()) {
+    // check ranges of the left operand. We do not do anything that would clip the double to
+    // a 32-bit range, since the user likely does not intend that. This check only applies to << and >>
+    int nodeType = n.getType();
+    if (nodeType == Token.LSH || nodeType == Token.RSH) {
+      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);
+        return n;
+      }
+    } // For >>>, JS coerces to uint32 using ToUint32 regardless the value, so no range restriction
+
+    // Check that left operand is integer
+    int lvalInt = (int) lval;
+    if (lvalInt != lval) {
+      error(FRACTIONAL_BITWISE_OPERAND, left);
+      return n;
+    }
+
+    double result;
+
+    switch (nodeType) {
       case Token.LSH:
         result = lvalInt << rvalInt;
         break;
       case Token.RSH:
         result = lvalInt >> rvalInt;
         break;
-        case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+      case Token.URSH: {
+        // JS ToUint32 conversion
+        long lvalUint32 = ((long) lvalInt) & 0xFFFFFFFFL;
+        result = (lvalUint32 >>> rvalInt);
         break;
+      }
       default:
         throw new AssertionError("Unknown shift operator: " +
             Node.tokenToName(n.getType()));
     }
 
     Node newNumber = Node.newNumber(result);
     n.getParent().replaceChild(n, newNumber);
     reportCodeChange();
 
     return newNumber;
   }
 
   return n;
 }
\ No newline at end of file
