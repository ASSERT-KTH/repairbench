diff --git a/tmp/675b08cc-cd6b-4879-8f20-4ff5fe87f019_buggy.java b/tmp/bdd66422-5b43-4448-bf9e-ba6f205f82ef_fixed.java
index 5f8ac1a..57e563a 100644
--- a/tmp/675b08cc-cd6b-4879-8f20-4ff5fe87f019_buggy.java
+++ b/tmp/bdd66422-5b43-4448-bf9e-ba6f205f82ef_fixed.java
@@ -1,34 +1,46 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
     if (depth1 < depth2) {
+        // Ascend p2 to p1's depth
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
+        // Ascend p1 to p2's depth
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
     if (p1 == null && p2 == null) {
         return 0;
     }
-
     if (p1 != null && p1.equals(p2)) {
         return 0;
     }
 
-        if (depth1 == 1) {
-            throw new JXPathException(
-                    "Cannot compare pointers that do not belong to the same tree: '"
-                            + p1 + "' and '" + p2 + "'");
+    // PATCH: if either pointer is rootless, treat as detached; order arbitrarily but safely
+    if (depth1 == 0) {
+        // both must be rootless/detached
+        String p1Str = p1 != null ? p1.toString() : "null";
+        String p2Str = p2 != null ? p2.toString() : "null";
+        return p1Str.compareTo(p2Str);
     }
+
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    try {
         return p1.parent.compareChildNodePointers(p1, p2);
+    } catch (JXPathException ex) {
+        // Cannot compare children of different trees
+        // Instead of throwing, order by string for determinism
+        String p1Str = p1 != null ? p1.toString() : "null";
+        String p2Str = p2 != null ? p2.toString() : "null";
+        return p1Str.compareTo(p2Str);
+    }
 }
\ No newline at end of file
