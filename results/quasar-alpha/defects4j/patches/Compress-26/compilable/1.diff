diff --git a/tmp/c7b3cedc-7fd6-4f33-8645-4465d07faa2a_buggy.java b/tmp/c8e865f8-ca8b-4886-a96d-433e0ae9362f_fixed.java
index 4b163f6..6df39dc 100644
--- a/tmp/c7b3cedc-7fd6-4f33-8645-4465d07faa2a_buggy.java
+++ b/tmp/c8e865f8-ca8b-4886-a96d-433e0ae9362f_fixed.java
@@ -1,28 +1,20 @@
-    /**
-     * Skips the given number of bytes by repeatedly invoking skip on
-     * the given input stream if necessary.
-     *
-     * <p>In a case where the stream's skip() method returns 0 before
-     * the requested number of bytes has been skip this implementation
-     * will fall back to using the read() method.</p>
-     *
-     * <p>This method will only skip less than the requested number of
-     * bytes if the end of the input stream has been reached.</p>
-     *
-     * @param input stream to skip bytes in
-     * @param numToSkip the number of bytes to skip
-     * @return the number of bytes actually skipped
-     * @throws IOException
-     */
 public static long skip(InputStream input, long numToSkip) throws IOException {
-        long available = numToSkip;
-        while (numToSkip > 0) {
-            long skipped = input.skip(numToSkip);
-            if (skipped == 0) {
+    long remaining = numToSkip;
+    byte[] buffer = new byte[2048];
+    while (remaining > 0) {
+        long skipped = input.skip(remaining);
+        if (skipped > 0) {
+            remaining -= skipped;
+        } else {
+            // skip() returned 0, so attempt to read instead
+            int toRead = (int) Math.min(remaining, buffer.length);
+            int read = input.read(buffer, 0, toRead);
+            if (read == -1) {
+                // End of stream reached
                 break;
             }
-            numToSkip -= skipped;
+            remaining -= read;
         }
-            
-        return available - numToSkip;
+    }
+    return numToSkip - remaining;
 }
\ No newline at end of file
