diff --git a/tmp/6100d5d8-654f-440e-b2ec-679a0327259b_buggy.java b/tmp/55c21109-84ff-46e7-8b9d-7d89718a51b6_fixed.java
index 10da689..5f6e926 100644
--- a/tmp/6100d5d8-654f-440e-b2ec-679a0327259b_buggy.java
+++ b/tmp/55c21109-84ff-46e7-8b9d-7d89718a51b6_fixed.java
@@ -1,7 +1,41 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    if (isNaN()) {
+        return nan;
+    }
+    if (x == 0) {
+        // Zero multiplicand
+        if (isZero()) {
+            // 0 * 0 = 0, unless negative zero preserved
+            Dfp result = newInstance(this);
+            result.sign = (this.sign == -1) ? -1 : 1;
+            result.zero();
+            return result;
+        }
+        if (isInfinite()) {
+            // infinity * 0 => NaN
+            return nan.newInstance(nan).dotrap(DfpField.FLAG_INVALID, "multiply", nan);
+        }
+        // finite * 0 = zero, preserve sign
+        Dfp result = newInstance(this);
+        result.sign = ((this.sign == -1 && x >= 0) || (this.sign == 1 && x < 0)) ? -1 : 1;
+        result.zero();
+        return result;
+    }
+
+    if (isInfinite()) {
+        // +/- infinity * finite number
+        Dfp result = newInstance(this);
+        result.sign = ((this.sign == -1 && x >= 0) || (this.sign == 1 && x < 0)) ? -1 : 1;
+        return result;
+    }
+
+    // finite number * integer
+    Dfp absResult = multiplyFast(Math.abs(x));
+    absResult.sign = ((this.sign == -1 && x >= 0) || (this.sign == 1 && x < 0)) ? -1 : 1;
+
+    return absResult;
 }
\ No newline at end of file
