diff --git a/tmp/7cd868cc-968e-4de1-987a-e131e841645e_buggy.java b/tmp/365c3e74-5b5a-4aa6-a9ee-0905e7654b2a_fixed.java
index 10da689..cbc1c4b 100644
--- a/tmp/7cd868cc-968e-4de1-987a-e131e841645e_buggy.java
+++ b/tmp/365c3e74-5b5a-4aa6-a9ee-0905e7654b2a_fixed.java
@@ -1,7 +1,50 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        // handle NaN
+        if (isNaN()) {
+            return newInstance(this).nan();
+        }
+        // handle zero multiplicand
+        if (x == 0) {
+            if (isZero()) {
+                final Dfp result = newInstance(this);
+                result.sign = (byte) (sign * ((x < 0) ? -1 : 1));
+                result.nan = true; // 0 * 0 or 0 * 0 = 0, but infinities multiply to NaN handled elsewhere
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return result;
+            } else if (isInfinite()) {
+                // inf * 0 = NaN
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return newInstance(this).nan();
+            } else {
+                final Dfp result = newInstance(this);
+                result.sign = (byte) ((sign * ((x < 0) ? -1 : 1)) >= 0 ? 1 : -1);
+                result.zero();
+                return result;
+            }
+        }
+        // handle infinity times non-zero
+        if (isInfinite()) {
+            final Dfp result = newInstance(this);
+            result.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);
+            return result;
+        }
+
+        final Dfp result = multiplyFast(Math.abs(x));
+
+        // handle overflow (result becomes infinite)
+        if (result.nans == FINITE && (result.exp > getField().getMaxExponent())) {
+            final Dfp inf = newInstance(this);
+            inf.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);
+            inf.infinite();
+            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
+            return inf;
+        }
+
+        result.sign = (byte) ((sign * Integer.signum(x)) >= 0 ? 1 : -1);
+
+        return result;
     }
\ No newline at end of file
