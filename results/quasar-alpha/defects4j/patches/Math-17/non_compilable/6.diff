diff --git a/tmp/4792d6cb-d5cf-4390-969b-504ea2022f15_buggy.java b/tmp/9e41fd3b-09f2-4470-967f-e11e38a75f12_fixed.java
index 10da689..2a911ed 100644
--- a/tmp/4792d6cb-d5cf-4390-969b-504ea2022f15_buggy.java
+++ b/tmp/9e41fd3b-09f2-4470-967f-e11e38a75f12_fixed.java
@@ -1,7 +1,46 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    Dfp result;
+
+    if (x == 0) {
+        // result is zero (keep sign according to IEEE rules)
+        result = newInstance(this);
+        result.sign = (byte) ((this.sign == 0) ? 0 : this.sign);
+        result.exp = 0;
+        for (int i = 0; i < result.mant.length; i++) {
+            result.mant[i] = 0;
+        }
+        // propagate NaN / zeros with correct sign
+        if (this.isNaN()) {
+            result = this.newInstance(this);
+        }
+        if (this.isInfinite()) {
+            // Inf * 0 => NaN
+            result = this.newInstance(Dfp.QNaN);
+            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+        }
+        return result;
+    }
+
+    if (this.isNaN()) {
+        return this.newInstance(this);
+    }
+
+    if (this.isInfinite()) {
+        result = newInstance(this);
+        result.sign = (byte) ((x < 0) ? (result.sign == 0 ? 1 : 0) : result.sign);
+        if (x < 0) {
+            result.sign = (byte) (1 - result.sign);
+        }
+        return result;
+    }
+
+    result = multiplyFast(Math.abs(x));
+    if (x < 0) {
+        result.sign = (byte) (1 - result.sign);
+    }
+    return result;
 }
\ No newline at end of file
