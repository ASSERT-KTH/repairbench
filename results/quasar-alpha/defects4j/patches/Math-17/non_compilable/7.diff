diff --git a/tmp/f698289b-822c-4cd1-99f0-e11202a64dbf_buggy.java b/tmp/34b2b537-bd8a-4f97-aa26-df3ad6c20b69_fixed.java
index 10da689..45d37dd 100644
--- a/tmp/f698289b-822c-4cd1-99f0-e11202a64dbf_buggy.java
+++ b/tmp/34b2b537-bd8a-4f97-aa26-df3ad6c20b69_fixed.java
@@ -1,7 +1,48 @@
 /** Multiply this by a single digit x.
  * @param x multiplicand
  * @return product of this and x
  */
 public Dfp multiply(final int x) {
-            return multiplyFast(x);
+    Dfp result;
+
+    // Handle special cases: NaN, zero, infinity
+    if (this.isNaN()) {
+        return this.newInstance(this);  // propagate NaN
+    }
+
+    if (x == 0) {
+        // multiplication by zero
+        if (this.isInfinite()) {
+            this.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            return this.nan;  // inf * 0 = NaN
+        }
+        result = this.newInstance(this.zero);
+        // set sign according to the sign of this * x
+        result.sign = (this.sign == (x < 0 ? -1 : 1)) ? 1 : -1;
+        return result;
+    }
+
+    if (this.isZero()) {
+        result = this.newInstance(this);  // zero * x = zero, preserve sign
+        result.sign = (this.sign == (x < 0 ? -1 : 1)) ? 1 : -1;
+        return result;
+    }
+
+    if (this.isInfinite()) {
+        result = this.newInstance(this);  // infinity * x = infinity or -infinity
+        result.sign = (this.sign == (x < 0 ? -1 : 1)) ? 1 : -1;
+        return result;
+    }
+
+    // else normal finite * int
+    result = multiplyFast(Math.abs(x));
+
+    // fix sign
+    if ((x < 0 && this.sign > 0) || (x > 0 && this.sign < 0)) {
+        result.sign = -1;
+    } else {
+        result.sign = 1;
+    }
+
+    return result;
 }
\ No newline at end of file
