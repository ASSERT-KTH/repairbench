diff --git a/tmp/726a196a-4ddd-4145-828a-e8831752b768_buggy.java b/tmp/1a64fea1-8d8e-406e-b44e-62c57a742788_fixed.java
index 10da689..1154446 100644
--- a/tmp/726a196a-4ddd-4145-828a-e8831752b768_buggy.java
+++ b/tmp/1a64fea1-8d8e-406e-b44e-62c57a742788_fixed.java
@@ -1,7 +1,80 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        Dfp result = newInstance(this);
+        boolean isNegative = false;
+        
+        if (x == 0) {
+            // handle special zero cases according to IEEE 754
+            if (this.isNaN()) {
+                return this.newInstance(this); // propagate NaN
+            }
+            if (this.isInfinite()) {
+                result = result.newInstance(Dfp.QNAN);
+                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                return result;
+            }
+            result.sign = (this.sign == -1) ? -1 : 1;
+            result.exp = 0;
+            Arrays.fill(result.mant, 0);
+            result.nans = FINITE;
+            return result;
+        }
+
+        if (this.isNaN()) {
+            return this.newInstance(this); // propagate NaN
+        }
+
+        if (this.isInfinite()) {
+            result = result.newInstance(this);
+            if (x < 0) {
+                result.sign = -this.sign;
+            }
+            return result;
+        }
+
+        if (x < 0) {
+            isNegative = !isNegative;
+        }
+        result.sign = (x < 0) ? -this.sign : this.sign;
+
+        int absX = Math.abs(x);
+
+        int[] tmp = new int[mant.length + 1];
+
+        long product;
+        int carry = 0;
+        for (int i = mant.length - 1; i >= 0; i--) {
+            product = ((long) mant[i]) * absX + carry;
+            tmp[i + 1] = (int) (product % RADIX);
+            carry = (int) (product / RADIX);
+        }
+        tmp[0] = carry;
+        
+        // Copy back to result, handle carry that causes normalization shift
+        if (tmp[0] != 0) {
+            for (int i = 0; i < mant.length; i++) {
+                result.mant[i] = tmp[i];
+            }
+            result.exp = this.exp + 1;
+        } else {
+            for (int i = 0; i < mant.length; i++) {
+                result.mant[i] = tmp[i + 1];
+            }
+            result.exp = this.exp;
+        }
+
+        // set non-finite flags (already handled special cases)
+        result.nans = FINITE;
+        // finalize sign
+        if (isZero(result)) {
+            result.sign = (this.sign == -1 && x != 0) ? -1 : 1;
+        }
+
+        // check for overflows/underflows
+        result = result.round();
+
+        return result;
     }
\ No newline at end of file
