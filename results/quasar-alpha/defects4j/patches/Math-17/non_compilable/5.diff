diff --git a/tmp/cce674a5-99a3-4d63-a8f7-5b50c5d8e92a_buggy.java b/tmp/524865ec-53e6-4ee5-927d-54b88aeb41c6_fixed.java
index 10da689..92e7c23 100644
--- a/tmp/cce674a5-99a3-4d63-a8f7-5b50c5d8e92a_buggy.java
+++ b/tmp/524865ec-53e6-4ee5-927d-54b88aeb41c6_fixed.java
@@ -1,7 +1,56 @@
     /** Multiply this by a single digit x.
      * @param x multiplicand
      * @return product of this and x
      */
     public Dfp multiply(final int x) {
-            return multiplyFast(x);
+        Dfp result;
+
+        // Handle special cases
+        if (isNaN()) {
+            return newInstance(getZero()).newInstance(this).nan();
+        }
+
+        if (x == 0) {
+            if (this.lessThan(getZero())) {
+                result = newInstance(getZero().negate());
+            } else {
+                result = newInstance(getZero());
+            }
+
+            if (this.isInfinite()) {
+                // infinity * 0 = NaN
+                result = newInstance(result);
+                result.field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                result = result.nan();
+            }
+
+            return result;
+        }
+
+        if (isInfinite()) {
+            if (x < 0) {
+                result = newInstance(negate());
+            } else {
+                result = newInstance(this);
+            }
+            return result;
+        }
+
+        boolean negative = false;
+        if (x < 0) {
+            negative = !negative;
+        }
+        if (this.sign < 0) {
+            negative = !negative;
+        }
+
+        int absX = Math.abs(x);
+
+        result = multiplyFast(absX);
+
+        if (negative) {
+            result = result.negate();
+        }
+
+        return result;
     }
\ No newline at end of file
