diff --git a/tmp/96048f1d-dd6c-4d22-b1ff-16e1472ca730_buggy.java b/tmp/8790d2ad-ae4f-442f-8dc1-74354d2a8631_fixed.java
index 40f74f7..2684972 100644
--- a/tmp/96048f1d-dd6c-4d22-b1ff-16e1472ca730_buggy.java
+++ b/tmp/8790d2ad-ae4f-442f-8dc1-74354d2a8631_fixed.java
@@ -1,50 +1,61 @@
 public static boolean testNode(Node node, NodeTest test) {
     if (test == null) {
         return true;
     }
     if (test instanceof NodeNameTest) {
         if (node.getNodeType() != Node.ELEMENT_NODE) {
             return false;
         }
 
         NodeNameTest nodeNameTest = (NodeNameTest) test;
         QName testName = nodeNameTest.getNodeName();
         String namespaceURI = nodeNameTest.getNamespaceURI();
         boolean wildcard = nodeNameTest.isWildcard();
         String testPrefix = testName.getPrefix();
         if (wildcard && testPrefix == null) {
             return true;
         }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+        String nodeLocalName = DOMNodePointer.getLocalName(node);
+        String testLocalName = testName.getName();
+
+        // Fix: For namespace prefix matching, ignore prefix differences and focus on URI + local name
+        boolean localNamesMatch = wildcard || testLocalName.equals(nodeLocalName);
+
+        if (localNamesMatch) {
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
-                return equalStrings(namespaceURI, nodeNS);
+            // Fix: Handle default namespace empty string vs. null
+            if (namespaceURI == null) {
+                namespaceURI = "";
+            }
+            if (nodeNS == null) {
+                nodeNS = "";
+            }
+            return namespaceURI.equals(nodeNS);
         }
         return false;
     }
     if (test instanceof NodeTypeTest) {
         int nodeType = node.getNodeType();
         switch (((NodeTypeTest) test).getNodeType()) {
             case Compiler.NODE_TYPE_NODE:
                 return nodeType == Node.ELEMENT_NODE
                         || nodeType == Node.DOCUMENT_NODE;
             case Compiler.NODE_TYPE_TEXT:
                 return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
             case Compiler.NODE_TYPE_COMMENT:
                 return nodeType == Node.COMMENT_NODE;
             case Compiler.NODE_TYPE_PI:
                 return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
         }
         return false;
     }
     if (test instanceof ProcessingInstructionTest) {
         if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
             String testPI = ((ProcessingInstructionTest) test).getTarget();
             String nodePI = ((ProcessingInstruction) node).getTarget();
             return testPI.equals(nodePI);
         }
     }
     return false;
 }
\ No newline at end of file
