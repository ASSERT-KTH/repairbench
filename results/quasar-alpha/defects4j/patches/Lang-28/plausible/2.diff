diff --git a/tmp/0a0f705d-e371-4398-9e46-1bf5651a32a1_buggy.java b/tmp/a95b5489-b77d-498f-bf50-434e80211c56_fixed.java
index 4bbd561..fef65fb 100644
--- a/tmp/0a0f705d-e371-4398-9e46-1bf5651a32a1_buggy.java
+++ b/tmp/a95b5489-b77d-498f-bf50-434e80211c56_fixed.java
@@ -1,37 +1,46 @@
-    /**
-     * {@inheritDoc}
-     */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    int inputLength = input.length();
+    if (index + 1 < inputLength && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start < inputLength) {
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
+        }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        // Find the end semicolon
+        while (end < inputLength && input.charAt(end) != ';') {
             end++;
         }
+        // If no semicolon, return 0 (no entity)
+        if (end == inputLength || input.charAt(end) != ';') {
+            return 0;
+        }
 
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String entityText = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(entityText, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        if (entityValue > 0xFFFF) {
+            // Write surrogate pair for supplementary characters
+            char[] chars = Character.toChars(entityValue);
+            out.write(chars);
+        } else {
             out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        }
+
+        return end - index + 1;
     }
     return 0;
 }
\ No newline at end of file
