diff --git a/tmp/5306ad50-20e3-480e-8871-6c51b4f8c9ac_buggy.java b/tmp/e7e20588-acc6-4a63-b701-ff6da125df60_fixed.java
index 4bbd561..273ba90 100644
--- a/tmp/5306ad50-20e3-480e-8871-6c51b4f8c9ac_buggy.java
+++ b/tmp/e7e20588-acc6-4a63-b701-ff6da125df60_fixed.java
@@ -1,37 +1,63 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+    // Protect from ArrayIndexOutOfBounds
+    if(index < 0 || index + 2 >= input.length()) {
+        return 0;
+    }
     if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+            if(start >= input.length()) {
+                return 0;
+            }
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if(end == input.length() || input.charAt(end) != ';') {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, end).toString();
+            if(number.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
+        if(Character.isValidCodePoint(entityValue)) {
+            if(entityValue > 0xFFFF) {
+                // write surrogate pair
+                char[] chars = Character.toChars(entityValue);
+                out.write(chars[0]);
+                out.write(chars[1]);
+            } else {
                 out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            }
+        } else {
+            return 0;
+        }
+
+        return end - index + 1; // number of consumed characters
     }
     return 0;
 }
\ No newline at end of file
