diff --git a/tmp/f34dc8c2-0b43-4de4-9853-f09ebb19017b_buggy.java b/tmp/49a23a77-2849-451a-a78b-a7bd419a764b_fixed.java
index 7f61a8c..f7b67b7 100644
--- a/tmp/f34dc8c2-0b43-4de4-9853-f09ebb19017b_buggy.java
+++ b/tmp/49a23a77-2849-451a-a78b-a7bd419a764b_fixed.java
@@ -1,73 +1,86 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
-    if (n.isEmpty() ||
-        n.isComma()) {
+  if (n.isEmpty()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
   if (parent.getType() == Token.COMMA) {
     Node gramps = parent.getParent();
-      if (gramps.isCall() && parent == gramps.getFirstChild()) {
-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
+    if (gramps != null && gramps.isCall() && parent == gramps.getFirstChild()) {
+      if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName()
+          && "eval".equals(n.getNext().getString())) {
         return;
       }
     }
 
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+        if (ancestorType == Token.COMMA) {
           continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+        }
+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {
           return;
-          else
+        } else {
           break;
         }
       }
+    }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
+    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&
+        (n == parent.getFirstChild() ||
          n == parent.getFirstChild().getNext().getNext())) {
+      // Allowed: init or update expressions in 'for' loop
     } else {
       return;
     }
   }
 
+  // *** FIX: preserve COMMA children even if they are useless on their own ***
+  if (n.isComma()) {
+    // Always analyze children of the comma expression, don't return early
+  } else {
     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (!isResultUsed &&
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    if (isResultUsed ||
+        (!isSimpleOp && NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+      return;
+    }
     if (n.isQualifiedName() && n.getJSDocInfo() != null) {
       return;
-      } else if (n.isExprResult()) {
+    }
+    if (n.isExprResult()) {
       return;
     }
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
-        msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
-            "' operator is not being used.";
+      msg = "The result of the '"
+          + Token.name(n.getType()).toLowerCase()
+          + "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
-      // TODO(johnlenz): determine if it is necessary to
-      // try to protect side-effect free statements as well.
+
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
+
+    return;
+  }
+
+  // For COMMA node, recursively analyze children
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    visit(t, child, n);
   }
 }
\ No newline at end of file
