diff --git a/tmp/f7a911ea-f838-4145-8914-40e461d085bb_buggy.java b/tmp/f0ebac98-cac7-4399-976e-947bcfc527d2_fixed.java
index dbda381..cfb8963 100644
--- a/tmp/f7a911ea-f838-4145-8914-40e461d085bb_buggy.java
+++ b/tmp/f0ebac98-cac7-4399-976e-947bcfc527d2_fixed.java
@@ -1,54 +1,59 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
+
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+
     int years = getYears();
     int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
+
+    // normalize years/months always, regardless of whether years/months are supported by the target type
+    int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+
+    years = 0; months = 0;
+    // If input had years or months, then recompute split according to presence of support
+    if (totalMonths != 0) {
+        boolean supportsYears = type.isSupported(DurationFieldType.years());
+        boolean supportsMonths = type.isSupported(DurationFieldType.months());
+        if (supportsYears && supportsMonths) {
+            years = totalMonths / 12;
+            months = totalMonths % 12;
+        } else if (supportsYears && !supportsMonths) {
+            years = totalMonths / 12;
+            months = totalMonths % 12;
+            // fold leftover months into years as fractional years, or ignore?
+            // But since months not supported, fold all months into years
+            // Actually, since months not supported, treat all as years
+            // treat as totalMonths / 12 years, with remainder months unsupported, so included in years as fraction
+            // but since period fields are int, better to fold everything to years
+            years = totalMonths / 12;
+            // possible fractional? probably safest to fold residual months into years as integer division only
+            // but since months unsupported, better to convert everything to months or years+months swapped above
+            // For now, fold all into years
+            // months will remain zero
+            months = 0;
+        } else if (!supportsYears && supportsMonths) {
+            // fold all into months only
+            years = 0;
+            months = totalMonths;
+        } else { // neither supported
+            if (totalMonths != 0) {
+                throw new UnsupportedOperationException("PeriodType does not support years or months");
+            }
+        }
         if (years != 0) {
             result = result.withYears(years);
         }
         if (months != 0) {
             result = result.withMonths(months);
         }
     }
+
     return result;
 }
\ No newline at end of file
