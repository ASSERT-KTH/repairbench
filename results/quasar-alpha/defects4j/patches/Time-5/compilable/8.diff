diff --git a/tmp/10858b2e-f907-427f-875f-1aef78bd2c58_buggy.java b/tmp/71b86dca-0204-48d2-8532-3d3d265f96d4_fixed.java
index dbda381..68ba1c9 100644
--- a/tmp/10858b2e-f907-427f-875f-1aef78bd2c58_buggy.java
+++ b/tmp/71b86dca-0204-48d2-8532-3d3d265f96d4_fixed.java
@@ -1,54 +1,41 @@
-    /**
-     * Normalizes this period using standard rules, assuming a 12 month year,
-     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
-     * providing control over how the result is split into fields.
-     * <p>
-     * This method allows you to normalize a period.
-     * However to achieve this it makes the assumption that all years are
-     * 12 months, all weeks are 7 days, all days are 24 hours,
-     * all hours are 60 minutes and all minutes are 60 seconds. This is not
-     * true when daylight savings time is considered, and may also not be true
-     * for some chronologies. However, it is included as it is a useful operation
-     * for many applications and business rules.
-     * <p>
-     * If the period contains years or months, then the months will be
-     * normalized to be between 0 and 11. The days field and below will be
-     * normalized as necessary, however this will not overflow into the months
-     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
-     * But a period of 1 month 40 days will remain as 1 month 40 days.
-     * <p>
-     * The PeriodType parameter controls how the result is created. It allows
-     * you to omit certain fields from the result if desired. For example,
-     * you may not want the result to include weeks, in which case you pass
-     * in <code>PeriodType.yearMonthDayTime()</code>.
-     * 
-     * @param type  the period type of the new period, null means standard type
-     * @return a normalized period equivalent to this period
-     * @throws ArithmeticException if any field is too large to be represented
-     * @throws UnsupportedOperationException if this period contains non-zero
-     *  years or months but the specified period type does not support them
-     * @since 1.5
-     */
 public Period normalizedStandard(PeriodType type) {
     type = DateTimeUtils.getPeriodType(type);
     long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
     millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
     millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
     millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
     millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
     millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
     Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
     int years = getYears();
     int months = getMonths();
     if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+        int normalizedYears = 0;
+        int normalizedMonths = totalMonths;
+        // Normalize only if both years AND months are supported, else just merge
+        boolean yearsSupported = type.isSupported(DurationFieldType.years());
+        boolean monthsSupported = type.isSupported(DurationFieldType.months());
+        if (!yearsSupported && !monthsSupported) {
+            if (totalMonths != 0) {
+                throw new UnsupportedOperationException("Period does not support years or months");
             }
-            if (months != 0) {
-                result = result.withMonths(months);
+        } else if (yearsSupported && monthsSupported) {
+            normalizedYears = totalMonths / 12;
+            normalizedMonths = totalMonths % 12;
+        } else if (yearsSupported) {  // only years supported
+            normalizedYears = totalMonths / 12;
+            normalizedMonths = 0;
+        } else if (monthsSupported) { // only months supported
+            normalizedYears = 0;
+            normalizedMonths = totalMonths;
+        }
+        if (yearsSupported && normalizedYears != 0) {
+            result = result.withYears(normalizedYears);
+        }
+        if (monthsSupported && normalizedMonths != 0) {
+            result = result.withMonths(normalizedMonths);
         }
     }
     return result;
 }
\ No newline at end of file
