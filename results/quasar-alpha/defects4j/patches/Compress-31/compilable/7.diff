diff --git a/tmp/4a24ead8-0b9a-4d03-87e4-368b49131697_buggy.java b/tmp/2dc8ebe9-7876-4862-b0a0-de6b5d86e177_fixed.java
index b91f7de..d839fe1 100644
--- a/tmp/4a24ead8-0b9a-4d03-87e4-368b49131697_buggy.java
+++ b/tmp/2dc8ebe9-7876-4862-b0a0-de6b5d86e177_fixed.java
@@ -1,69 +1,67 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
-        long    result = 0;
-        int     end = offset + length;
-        int     start = offset;
-
     if (length < 2){
         throw new IllegalArgumentException("Length "+length+" must be at least 2");
     }
 
+    int start = offset;
+    int end = offset + length;
+    long result = 0;
+
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end){
         if (buffer[start] == ' '){
             start++;
         } else {
             break;
         }
     }
 
     // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
+        // avoid underflow
+        if (end == start) {
+            break;
+        }
         trailer = buffer[end -1];
     }
 
+    boolean digitSeen = false;
+
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
-            }
-            // CheckStyle:MagicNumber OFF
+
         if (currentByte < '0' || currentByte > '7'){
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+        digitSeen = true;
+
+        // After the first digit, any embedded SP or NUL is invalid
+        if (start + 1 < end) {
+            byte nextByte = buffer[start + 1];
+            if (nextByte == 0 || nextByte == ' ') {
+                int j = start + 1;
+                // Consume trailing spaces or NULs
+                while (j < end && (buffer[j] == 0 || buffer[j] == ' ')) {
+                    j++;
+                }
+                if (j != end) {
+                    // found non-trailing junk after embedded space or NUL
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, j, buffer[j]));
+                }
+                break; // end processing digits
+            }
+        }
     }
 
     return result;
 }
\ No newline at end of file
