diff --git a/tmp/2ad95312-2c3a-4200-b40c-a88695e696bc_buggy.java b/tmp/07d4227a-a5f7-4575-864e-456cad0ba85c_fixed.java
index b91f7de..68bc05b 100644
--- a/tmp/2ad95312-2c3a-4200-b40c-a88695e696bc_buggy.java
+++ b/tmp/07d4227a-a5f7-4575-864e-456cad0ba85c_fixed.java
@@ -1,69 +1,52 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
     // Trim all trailing NULs and spaces.
     // The ustar and POSIX tar specs require a trailing NUL or
     // space but some implementations use the extra digit for big
     // sizes/uids/gids ...
     byte trailer = buffer[end - 1];
     while (start < end && (trailer == 0 || trailer == ' ')) {
         end--;
+        if (end > start) { // To avoid ArrayIndexOutOfBoundsException
             trailer = buffer[end - 1];
         }
+    }
 
+    boolean seenDigit = false;
     for (; start < end; start++) {
         final byte currentByte = buffer[start];
-            if (currentByte == 0) {
-                break;
+        if (currentByte == 0 || currentByte == ' ') {
+            // embedded NULs or spaces inside the number field are invalid
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, start, currentByte));
         }
-            // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
+        seenDigit = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
-        return result;
+    return seenDigit ? result : 0L;
 }
\ No newline at end of file
