diff --git a/tmp/fcb47ed1-e5fc-48bd-b90d-9c3fc40f0856_buggy.java b/tmp/7e1f6040-1063-4520-9f2f-0548c7dbce1b_fixed.java
index 544303b..1220ce5 100644
--- a/tmp/fcb47ed1-e5fc-48bd-b90d-9c3fc40f0856_buggy.java
+++ b/tmp/7e1f6040-1063-4520-9f2f-0548c7dbce1b_fixed.java
@@ -1,29 +1,37 @@
 /**
  * Get the current solution.
  * <p>
  * {@link #solve} should be called first for this to be the optimal solution.
  * </p>
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+
+    double mostNegative;
+    Integer mostNegativeRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+    mostNegative = (mostNegativeRow == null) ? 0 : getEntry(mostNegativeRow, getRhsOffset());
+
     for (int i = 0; i < coefficients.length; i++) {
-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+
+        double value = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
+
+        // Check if this variable is actually basic rather than just taking the RHS blindly
+        boolean basicVariableFound = false;
         if (basicRow != null) {
-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
-                    if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+            for (int col = getNumObjectiveFunctions(); col < getNumObjectiveFunctions() + getOriginalNumDecisionVariables(); col++) {
+                if (col != (getNumObjectiveFunctions() + i) && Math.abs(tableau.getEntry(basicRow, col)) > 1.0e-8) {
+                    // Not a basic variable for this original variable
+                    basicVariableFound = false;
+                    break;
                 }
+                if (col == (getNumObjectiveFunctions() + i) && Math.abs(tableau.getEntry(basicRow, col) - 1.0) < 1.0e-8) {
+                    basicVariableFound = true;
                 }
             }
         }
+        coefficients[i] = (basicVariableFound) ? value : 0.0;
+    }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
