diff --git a/tmp/0fede3ec-592d-48d7-b1e7-35dbce1650bb_buggy.java b/tmp/9120a8cb-0248-4bd4-a30d-0d08d0e6c01c_fixed.java
index 233a867..91c6917 100644
--- a/tmp/0fede3ec-592d-48d7-b1e7-35dbce1650bb_buggy.java
+++ b/tmp/9120a8cb-0248-4bd4-a30d-0d08d0e6c01c_fixed.java
@@ -1,73 +1,103 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
-      // For each named parameter check if a mutable argument use more than one.
+    // For each named parameter check if a mutable argument is used more than once
+    // or if the parameter modifies state that overlaps with argument properties.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
+        // Note: Unlike block inlining, here it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+
+        // Additional fix: check if param modifies a property of the argument
+        // For example:
+        // function foo(a) { return modifyX() + a; } foo(x);
+        // or
+        // function foo(a) { return (x.prop=2),a; } foo(x.prop);
+        //
+        // Block any inlining if:
+        // - argument is a property access or name,
+        // - AND function body modifies something that may alias it.
+        //
+        // This is done by checking if the parameter may be assigned a property
+        if (NodeUtil.mayEffectMutableState(block, compiler)) {
+          if (cArg.isGetProp() || cArg.isGetElem() || cArg.isName()) {
+            String argNameRoot = null;
+            if (cArg.isName()) {
+              argNameRoot = cArg.getString();
+            } else {
+              Node obj = cArg.getFirstChild();
+              if (obj.isName()) {
+                argNameRoot = obj.getString();
+              }
+            }
+            if (argNameRoot != null) {
+              // Check if the function modifies a property of this name (root obj).
+              if (NodeUtil.functionModifiesProperty(block, fnParam.getString(), argNameRoot, compiler)) {
+                return CanInlineResult.NO;
+              }
+            }
+          }
+        }
       }
 
-        // Move to the next name.
+      // Move to the next parameter.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
