diff --git a/tmp/489d5688-6dcd-4c87-a238-127229426be3_buggy.java b/tmp/43702148-203f-4245-94c9-64a64f7aa5c3_fixed.java
index 49a5702..8fbacce 100644
--- a/tmp/489d5688-6dcd-4c87-a238-127229426be3_buggy.java
+++ b/tmp/43702148-203f-4245-94c9-64a64f7aa5c3_fixed.java
@@ -1,66 +1,89 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
-    if (parent.getType() == Token.COMMA) {
+
+  boolean useless = false;
+
   if (isResultUsed) {
+    // The expression result is used, so it's not useless.
     return;
   }
+
+  if (parent.getType() == Token.COMMA) {
     if (n == parent.getLastChild()) {
+      // Check ancestors upwards to determine if the overall expression result is unused.
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+        if (ancestorType == Token.COMMA) {
+          continue;
         }
+        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+          // Expression is not used.
+          useless = true;
         }
-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+        break;
+      }
+    } else {
+      // Non-final child of COMMA operator and its value is unused.
+      useless = true;
+    }
+  } else if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK) {
+    // Top level in a statement or block, and unused result.
+    useless = true;
+  } else {
+    // Otherwise, check for for-loop init and incr clauses, which can have unused results.
+    if (!(parent.getType() == Token.FOR
+          && parent.getChildCount() == 4
+          && (n == parent.getFirstChild()
+              || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
+    // else, in for init or incr; check continues
+    useless = true;
   }
-    if (
-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+
+  if (useless && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
