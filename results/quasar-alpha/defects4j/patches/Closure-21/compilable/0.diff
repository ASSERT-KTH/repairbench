diff --git a/tmp/b4eeb7f2-41a7-4581-a7ca-a16d22912de5_buggy.java b/tmp/cab4597d-cbd7-4243-a12c-8116da87596a_fixed.java
index 49a5702..dbaf32f 100644
--- a/tmp/b4eeb7f2-41a7-4581-a7ca-a16d22912de5_buggy.java
+++ b/tmp/cab4597d-cbd7-4243-a12c-8116da87596a_fixed.java
@@ -1,66 +1,74 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
     if (n == parent.getLastChild()) {
       for (Node an : parent.getAncestors()) {
         int ancestorType = an.getType();
         if (ancestorType == Token.COMMA) continue;
         if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
         else break;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
     if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
   if (
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
+    // fix: don't emit warning if this is inside a COMMA expression that itself is part of a larger expression
+    // i.e., in an expression context, the subexpression might be useless but not an error.
+    Node current = n.getParent();
+    while (current != null && current.isComma()) {
+      current = current.getParent();
+    }
+    if (current == null || current.isExprResult() || current.isBlock()) {
       String msg = "This code lacks side-effects. Is there a bug?";
       if (n.isString()) {
         msg = "Is there a missing '+' on the previous line?";
       } else if (isSimpleOp) {
         msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
             "' operator is not being used.";
       }
 
       t.getCompiler().report(
           t.makeError(n, level, USELESS_CODE_ERROR, msg));
       // TODO(johnlenz): determine if it is necessary to
       // try to protect side-effect free statements as well.
       if (!NodeUtil.isStatement(n)) {
         problemNodes.add(n);
       }
     }
   }
+}
\ No newline at end of file
