diff --git a/tmp/30d19aaf-3a12-40de-a51f-5000986e76c7_buggy.java b/tmp/6007bb92-d9f4-4076-a9b6-6566a3f06c2b_fixed.java
index 49a5702..f687995 100644
--- a/tmp/30d19aaf-3a12-40de-a51f-5000986e76c7_buggy.java
+++ b/tmp/6007bb92-d9f4-4076-a9b6-6566a3f06c2b_fixed.java
@@ -1,66 +1,97 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
   // VOID nodes appear when there are extra semicolons at the BLOCK level.
   // I've been unable to think of any cases where this indicates a bug,
   // and apparently some people like keeping these semicolons around,
   // so we'll allow it.
   if (n.isEmpty() ||
       n.isComma()) {
     return;
   }
 
   if (parent == null) {
     return;
   }
 
   // Do not try to remove a block or an expr result. We already handle
   // these cases when we visit the child, and the peephole passes will
   // fix up the tree in more clever ways when these are removed.
   if (n.isExprResult()) {
     return;
   }
 
   // This no-op statement was there so that JSDoc information could
   // be attached to the name. This check should not complain about it.
   if (n.isQualifiedName() && n.getJSDocInfo() != null) {
     return;
   }
 
   boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
   boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
+
   if (parent.getType() == Token.COMMA) {
     if (isResultUsed) {
       return;
     }
+    // The difference with the original logic: we want to warn on the operands of comma,
+    // unless the comma itself is the root of an expression statement or a for loop,
+    // otherwise these operands are ALWAYS no-op if they are side-effect free.
     if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA) continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;
-          else break;
+      // last child result is used by the comma, so skip that
+      return;
+    } else {
+      // Check if comma tree is part of an expression statement or for(;,,) initializer;
+      Node ancestor = parent.getParent();
+      while (ancestor != null &&
+             (ancestor.getType() == Token.COMMA)) {
+        ancestor = ancestor.getParent();
+      }
+      if (ancestor != null) {
+        int ancestorType = ancestor.getType();
+        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+          // do nothing, fallthrough to report
+        } else if (ancestorType == Token.FOR) {
+          // FOR nodes: only warn on useless code in initializer/increment parts?
+          int childIndex = ancestor.getChildBefore(parent).getChildIndex();
+          // For statement children: VAR (optional), condition (optional), increment (optional), body
+          // Could just allow inside FOR's children generally,
+          // but for simplicity accept FOR context as one where these are tolerated.
+          // Ideally be more precise.
+          return;
+        } else {
+          // Anything else (CALL, ASSIGN, RETURN,etc), skip warning for comma children in here.
+          return;
+        }
+      } else {
+        // probably unreachable: no ancestor? ignore.
+        return;
       }
     }
   } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
+    // Also allow cases where the expression is inside a FOR statement
+    if (!(parent.getType() == Token.FOR &&
+          parent.getChildCount() == 4 &&
+          (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {
       return;
     }
   }
+
   if (
       (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {
     String msg = "This code lacks side-effects. Is there a bug?";
     if (n.isString()) {
       msg = "Is there a missing '+' on the previous line?";
     } else if (isSimpleOp) {
       msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
           "' operator is not being used.";
     }
 
     t.getCompiler().report(
         t.makeError(n, level, USELESS_CODE_ERROR, msg));
     // TODO(johnlenz): determine if it is necessary to
     // try to protect side-effect free statements as well.
     if (!NodeUtil.isStatement(n)) {
       problemNodes.add(n);
     }
   }
 }
\ No newline at end of file
