diff --git a/tmp/5932a0af-1744-47ad-96c1-50d5175d5327_buggy.java b/tmp/4492c598-371f-4dc5-b195-fccc8e788cad_fixed.java
index f650982..5f6c0a3 100644
--- a/tmp/5932a0af-1744-47ad-96c1-50d5175d5327_buggy.java
+++ b/tmp/4492c598-371f-4dc5-b195-fccc8e788cad_fixed.java
@@ -1,42 +1,62 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
-            l = ((Collection) l).iterator();
+        Collection coll = (Collection) l;
+        // If it's a collection wrapping a single string element, unwrap it
+        if (coll.size() == 1) {
+            Object single = coll.iterator().next();
+            // Unwrapping nested Collection again if needed
+            if (single instanceof Collection) {
+                l = ((Collection) single).iterator();
+            } else {
+                l = single;
+            }
+        } else {
+            l = coll.iterator();
+        }
     }
 
     if (r instanceof Collection) {
-            r = ((Collection) r).iterator();
+        Collection coll = (Collection) r;
+        // If it's a collection wrapping a single string element, unwrap it
+        if (coll.size() == 1) {
+            Object single = coll.iterator().next();
+            // Unwrapping nested Collection again if needed
+            if (single instanceof Collection) {
+                r = ((Collection) single).iterator();
+            } else {
+                r = single;
+            }
+        } else {
+            r = coll.iterator();
+        }
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
