diff --git a/tmp/74be81c0-279c-49a6-a5fe-60d42af61841_buggy.java b/tmp/42d25527-80d8-4015-b552-387bce5766de_fixed.java
index f650982..3ae7a75 100644
--- a/tmp/74be81c0-279c-49a6-a5fe-60d42af61841_buggy.java
+++ b/tmp/42d25527-80d8-4015-b552-387bce5766de_fixed.java
@@ -1,42 +1,49 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
     //        System.err.println("COMPARING: " +
     //            (l == null ? "null" : l.getClass().getName()) + " " +
     //            (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    boolean lIsColl = false;
+    boolean rIsColl = false;
+
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
+        lIsColl = true;
     }
-
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
+        rIsColl = true;
     }
 
+    // Fix: when both are Iterators that originated from Collections, compare them element-wise
+    // even if the other is not an iterator
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
     return equal(l, r);
 }
\ No newline at end of file
