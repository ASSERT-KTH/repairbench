diff --git a/tmp/dd38af52-05c8-4e7c-9351-d543881a8a43_buggy.java b/tmp/f8d96384-e3d9-46e5-b2de-ff4e6ddb025c_fixed.java
index f650982..48dc92f 100644
--- a/tmp/dd38af52-05c8-4e7c-9351-d543881a8a43_buggy.java
+++ b/tmp/f8d96384-e3d9-46e5-b2de-ff4e6ddb025c_fixed.java
@@ -1,42 +1,46 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //    System.err.println("COMPARING: " +
 //        (l == null ? "null" : l.getClass().getName()) + " " +
 //        (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Fix: if either operand is a Collection, treat it as an iterator
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    // Fix: check again after converting collections -- if either is iterator, treat accordingly
+    if ((l instanceof Iterator) || (r instanceof Iterator)) {
+        if (l instanceof Iterator && !(r instanceof Iterator)) {
             return contains((Iterator) l, r);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+        if (!(l instanceof Iterator) && r instanceof Iterator) {
             return contains((Iterator) r, l);
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
+    }
     return equal(l, r);
 }
\ No newline at end of file
