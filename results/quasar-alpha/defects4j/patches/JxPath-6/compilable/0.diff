diff --git a/tmp/9c512515-e1f9-4383-a01d-be417447c732_buggy.java b/tmp/f4c2f741-fd73-4065-baee-563d4018c60d_fixed.java
index f650982..339b0be 100644
--- a/tmp/9c512515-e1f9-4383-a01d-be417447c732_buggy.java
+++ b/tmp/f4c2f741-fd73-4065-baee-563d4018c60d_fixed.java
@@ -1,42 +1,67 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    boolean lIsIterator = (l instanceof Iterator);
+    boolean rIsIterator = (r instanceof Iterator);
+
+    // If either is an iterator, treat as a general comparison: some node equals the scalar or other nodes
+    if (lIsIterator || rIsIterator) {
+        if (!lIsIterator) {
+            l = singletonIterator(l);
+            lIsIterator = true;
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (!rIsIterator) {
+            r = singletonIterator(r);
+            rIsIterator = true;
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
     return equal(l, r);
 }
+
+private Iterator singletonIterator(final Object value) {
+    return new Iterator() {
+        private boolean hasNext = true;
+
+        public boolean hasNext() {
+            return hasNext;
+        }
+
+        public Object next() {
+            if (!hasNext) {
+                throw new java.util.NoSuchElementException();
+            }
+            hasNext = false;
+            return value;
+        }
+
+        public void remove() {
+            throw new UnsupportedOperationException();
+        }
+    };
+}
\ No newline at end of file
