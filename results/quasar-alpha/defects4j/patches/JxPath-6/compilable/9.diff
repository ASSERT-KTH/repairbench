diff --git a/tmp/838f5543-a29a-4117-b717-75b672bf72c5_buggy.java b/tmp/43515e85-0033-44a1-a2c7-9fb3a84f317f_fixed.java
index f650982..935da88 100644
--- a/tmp/838f5543-a29a-4117-b717-75b672bf72c5_buggy.java
+++ b/tmp/43515e85-0033-44a1-a2c7-9fb3a84f317f_fixed.java
@@ -1,42 +1,45 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+    // Fix: add special handling when either side is an Iterator
+    if ((l instanceof Iterator) || (r instanceof Iterator)) {
+        Iterator lit = (l instanceof Iterator) ? (Iterator) l : null;
+        Iterator rit = (r instanceof Iterator) ? (Iterator) r : null;
+
+        if (lit != null && rit != null) {
+            return findMatch(lit, rit);
         }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+        if (lit != null) {
+            return contains(lit, r);
         }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+        if (rit != null) {
+            return contains(rit, l);
         }
+    }
+
     return equal(l, r);
 }
\ No newline at end of file
