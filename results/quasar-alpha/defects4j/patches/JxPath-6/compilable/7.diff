diff --git a/tmp/0aa5ca5a-cf86-473f-863d-d158b11bf3ae_buggy.java b/tmp/1910cd1c-c5ad-4eaa-8db9-8c5f2d8b47b0_fixed.java
index f650982..7eab1a7 100644
--- a/tmp/0aa5ca5a-cf86-473f-863d-d158b11bf3ae_buggy.java
+++ b/tmp/1910cd1c-c5ad-4eaa-8db9-8c5f2d8b47b0_fixed.java
@@ -1,42 +1,46 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
-        if (l instanceof Collection) {
+    boolean lIsCol = (l instanceof Collection);
+    boolean rIsCol = (r instanceof Collection);
+
+    // If both are collections, do NOT convert to iterators but compare directly
+    if (lIsCol && rIsCol) {
+        // no unwrap here
+    }
+    else {
+        if (lIsCol) {
             l = ((Collection) l).iterator();
         }
-
-        if (r instanceof Collection) {
+        if (rIsCol) {
             r = ((Collection) r).iterator();
         }
+    }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
     return equal(l, r);
 }
\ No newline at end of file
