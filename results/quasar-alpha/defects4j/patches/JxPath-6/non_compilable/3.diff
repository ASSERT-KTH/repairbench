diff --git a/tmp/77853c83-5a83-401d-87ed-e6e75228ecd5_buggy.java b/tmp/6ff3143f-9d21-4f43-83dc-2b98dc7f9d9e_fixed.java
index f650982..8923804 100644
--- a/tmp/77853c83-5a83-401d-87ed-e6e75228ecd5_buggy.java
+++ b/tmp/6ff3143f-9d21-4f43-83dc-2b98dc7f9d9e_fixed.java
@@ -1,42 +1,59 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right) 
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
+    // Unwrap context wrappers
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
+    // Unwrap collections
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
-        if ((l instanceof Iterator) && !(r instanceof Iterator)) {
+    boolean lIsIterator = l instanceof Iterator;
+    boolean rIsIterator = r instanceof Iterator;
+
+    // If one operand is iterator, treat as multi-valued comparison: return true if any element equals the singleton
+    if (lIsIterator && !rIsIterator) {
         return contains((Iterator) l, r);
     }
-        if (!(l instanceof Iterator) && (r instanceof Iterator)) {
+    if (!lIsIterator && rIsIterator) {
         return contains((Iterator) r, l);
     }
-        if (l instanceof Iterator && r instanceof Iterator) {
-            return findMatch((Iterator) l, (Iterator) r);
+    if (lIsIterator && rIsIterator) {
+        Iterator li = (Iterator) l;
+        Iterator ri = (Iterator) r;
+        // Check if any pair (li element, ri element) are equal
+        // We need nested iteration
+        List<Object> rList = new ArrayList<>();
+        ri.forEachRemaining(rList::add);
+        while (li.hasNext()) {
+            Object le = li.next();
+            for (Object re : rList) {
+                if (equal(le, re)) {
+                    return true;
                 }
+            }
+        }
+        return false;
+    }
+    // Both are singletons: compare directly
     return equal(l, r);
 }
\ No newline at end of file
