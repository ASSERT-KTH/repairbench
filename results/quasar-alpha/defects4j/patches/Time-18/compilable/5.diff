diff --git a/tmp/ffc46f44-b6e5-48c4-b6fc-0127a81f0fb9_buggy.java b/tmp/47f42901-b3c8-4f9f-8ddf-e5d0cf2f4d84_fixed.java
index be2af16..6a3305b 100644
--- a/tmp/ffc46f44-b6e5-48c4-b6fc-0127a81f0fb9_buggy.java
+++ b/tmp/47f42901-b3c8-4f9f-8ddf-e5d0cf2f4d84_fixed.java
@@ -1,29 +1,50 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
+    // Try Julian first
     long instant;
+    try {
+        instant = iJulianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } catch (IllegalArgumentException e) {
+        // If Julian calendar rejects the date, try Gregorian
         instant = iGregorianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            // Gregorian accepts but before cutover -> invalid
+            throw e;
+        }
+        return instant;
+    }
+
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+        // Might be in Gregorian calendar, recheck
+        long gregorianInstant;
+        try {
+            gregorianInstant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
+            // Gregorian calendar rejects, so keep Julian instant
+            return instant;
         }
+        if (gregorianInstant < iCutoverMillis) {
+            return instant;
+        } else {
+            return gregorianInstant;
         }
+    } else {
         return instant;
     }
+}
\ No newline at end of file
