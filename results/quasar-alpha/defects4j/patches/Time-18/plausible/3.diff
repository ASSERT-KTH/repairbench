diff --git a/tmp/20312e5a-48d1-4f15-9b34-0e918ac13fbd_buggy.java b/tmp/7247ee8c-f9e4-4f76-a5fc-c1eee3e47c72_fixed.java
index be2af16..8859c02 100644
--- a/tmp/20312e5a-48d1-4f15-9b34-0e918ac13fbd_buggy.java
+++ b/tmp/7247ee8c-f9e4-4f76-a5fc-c1eee3e47c72_fixed.java
@@ -1,29 +1,30 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    // Try Julian first
+    long instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        // If after cutoverMillis, recalc using Gregorian
+        long gregorianInstant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (gregorianInstant < iCutoverMillis) {
+            // If Gregorian is before cutover, then date falls into the gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        instant = gregorianInstant;
     }
+
     return instant;
 }
\ No newline at end of file
