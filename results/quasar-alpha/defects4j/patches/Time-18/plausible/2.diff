diff --git a/tmp/21fca264-9539-4b22-a87e-7e238c28ed89_buggy.java b/tmp/25327f3e-d465-4cf2-a0b2-55c95e6b69ac_fixed.java
index be2af16..26f4f5c 100644
--- a/tmp/21fca264-9539-4b22-a87e-7e238c28ed89_buggy.java
+++ b/tmp/25327f3e-d465-4cf2-a0b2-55c95e6b69ac_fixed.java
@@ -1,29 +1,28 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+    // Attempt Julian first
+    long instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+        // Try Gregorian
+        long gregorianInstant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (gregorianInstant < iCutoverMillis) {
             throw new IllegalArgumentException("Specified date does not exist");
         }
+        return gregorianInstant;
     }
     return instant;
 }
\ No newline at end of file
