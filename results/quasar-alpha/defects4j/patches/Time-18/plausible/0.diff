diff --git a/tmp/04145f21-5af9-4c62-b2d8-2196d14bb84b_buggy.java b/tmp/fabbbe50-9844-45ee-bead-5e7615f22851_fixed.java
index be2af16..54840d8 100644
--- a/tmp/04145f21-5af9-4c62-b2d8-2196d14bb84b_buggy.java
+++ b/tmp/fabbbe50-9844-45ee-bead-5e7615f22851_fixed.java
@@ -1,29 +1,41 @@
 public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                               int hourOfDay, int minuteOfHour,
                               int secondOfMinute, int millisOfSecond)
     throws IllegalArgumentException
 {
     Chronology base;
     if ((base = getBase()) != null) {
         return base.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
     }
 
-        // Assume date is Gregorian.
     long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
+    try {
+        // First, try Julian (more permissive in leap years)
         instant = iJulianChronology.getDateTimeMillis
             (year, monthOfYear, dayOfMonth,
              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
+            // If result is after cutover, recompute using Gregorian chronology
+            long gregorianInstant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (gregorianInstant < iCutoverMillis) {
+                // If Gregorian instant is before cutover, then date falls within cutover gap
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            instant = gregorianInstant;
+        }
+    } catch (IllegalArgumentException exJulian) {
+        // If invalid in Julian, try Gregorian (could throw IllegalArgumentException if invalid overall)
+        instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant < iCutoverMillis) {
+            // If Gregorian instant is before cutover, but invalid in Julian, date is in gap
             throw new IllegalArgumentException("Specified date does not exist");
         }
     }
     return instant;
 }
\ No newline at end of file
