diff --git a/tmp/ebddde82-36b6-4d91-ad38-a3b8b9ba0748_buggy.java b/tmp/4c568c32-39c1-4545-8678-13f6beb58e58_fixed.java
index 6e45f80..1c2f613 100644
--- a/tmp/ebddde82-36b6-4d91-ad38-a3b8b9ba0748_buggy.java
+++ b/tmp/4c568c32-39c1-4545-8678-13f6beb58e58_fixed.java
@@ -1,21 +1,32 @@
 /**
  * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm
  * that the deserialized type matches the type requested.
  */
 public static <T1> TypeAdapterFactory newTypeHierarchyFactory(
     final Class<T1> clazz, final TypeAdapter<T1> typeAdapter) {
   return new TypeAdapterFactory() {
     @SuppressWarnings("unchecked")
     public <T2> TypeAdapter<T2> create(Gson gson, TypeToken<T2> typeToken) {
       final Class<? super T2> requestedType = typeToken.getRawType();
       if (!clazz.isAssignableFrom(requestedType)) {
         return null;
       }
-        return (TypeAdapter<T2>) typeAdapter;
-
+      return new TypeAdapter<T2>() {
+        @Override public T2 read(JsonReader in) throws IOException {
+          T1 result = typeAdapter.read(in);
+          if (result != null && !requestedType.isInstance(result)) {
+            throw new JsonSyntaxException("Expected a " + requestedType.getName()
+                + " but was " + result.getClass().getName());
+          }
+          return (T2) result;
+        }
+        @Override public void write(JsonWriter out, T2 value) throws IOException {
+          typeAdapter.write(out, value);
+        }
+      };
     }
     @Override public String toString() {
       return "Factory[typeHierarchy=" + clazz.getName() + ",adapter=" + typeAdapter + "]";
     }
   };
 }
\ No newline at end of file
