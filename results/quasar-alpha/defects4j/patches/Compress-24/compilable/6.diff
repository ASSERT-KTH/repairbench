diff --git a/tmp/807e7003-fbdf-45e2-88ca-9c179b723720_buggy.java b/tmp/187fe538-ae7b-4610-ad55-69926cd6914e_fixed.java
index d9d2789..262b0df 100644
--- a/tmp/807e7003-fbdf-45e2-88ca-9c179b723720_buggy.java
+++ b/tmp/187fe538-ae7b-4610-ad55-69926cd6914e_fixed.java
@@ -1,73 +1,66 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
     long result = 0;
     int end = offset + length;
     int start = offset;
 
     if (length < 2) {
         throw new IllegalArgumentException("Length " + length + " must be at least 2");
     }
 
     if (buffer[start] == 0) {
         return 0L;
     }
 
     // Skip leading spaces
     while (start < end) {
         if (buffer[start] == ' ') {
             start++;
         } else {
             break;
         }
     }
 
-        // Trim all trailing NULs and spaces.
-        // The ustar and POSIX tar specs require a trailing NUL or
-        // space but some implementations use the extra digit for big
-        // sizes/uids/gids ...
-        byte trailer = buffer[end - 1];
-        if (trailer == 0 || trailer == ' '){
-            end--;
-        } else {
-            throw new IllegalArgumentException(
-                    exceptionMessage(buffer, offset, length, end-1, trailer));
-        }
-        trailer = buffer[end - 1];
-        while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
-            end--;
-            trailer = buffer[end - 1];
+    // Handle didactic trailing space or NUL, but this implementation and some TAR implementations can use
+    // the last digit for a value. So we process the entire buffer first,
+    // then if after the parsing the last character is ' ' or 0, we drop that digit.
+    // So essentially - allow one trailing ' ' or 0 after digits and ignore it.
+
+    byte lastByte = buffer[end - 1];
+    boolean hasTrailingPadding = (lastByte == 0 || lastByte == ' ');
+    int limit = end;
+
+    if (hasTrailingPadding) {
+        limit = end - 1;
     }
 
-        for ( ;start < end; start++) {
-            final byte currentByte = buffer[start];
-            // CheckStyle:MagicNumber OFF
+    // See if digits fill the entire field up to limit inclusive (ignoring leading spaces skipped above).
+    // Also, some tar implementations actually use all bytes as digits (12 digits), so if the last byte is a digit, too, accept it.
+
+    boolean allZeros = true;
+    for (int i = start; i < limit; i++) {
+        final byte currentByte = buffer[i];
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
+        }
+        if (currentByte != '0') {
+            allZeros = false;
+        }
+        result = (result << 3) + (currentByte - '0');
+    }
+
+    // check last digit (trailing byte)
+    if (hasTrailingPadding && limit < end) {
+        // skip padding, done
+    } else if (limit < end) { // full length, last byte not ' ' or NUL
+        byte trailingByte = buffer[end - 1];
+        if (trailingByte >= '0' && trailingByte <= '7') {
+            result = (result << 3) + (trailingByte - '0');
+        } else {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, end - 1, trailingByte));
         }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
     }
 
     return result;
 }
\ No newline at end of file
