diff --git a/tmp/ccd5342b-b57d-45d0-abbd-f05331ab03f7_buggy.java b/tmp/9bb24513-cc7b-4499-b943-c6fe731fac3a_fixed.java
index 1b36a4f..050fd60 100644
--- a/tmp/ccd5342b-b57d-45d0-abbd-f05331ab03f7_buggy.java
+++ b/tmp/9bb24513-cc7b-4499-b943-c6fe731fac3a_fixed.java
@@ -1,58 +1,57 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
 public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
-        // initial parameter checks
     if (str == null) {
         return null;
     }
     if (str.length() == 0) {
         return StringUtils.EMPTY;
     }
 
-        // if the lower value is greater than the length of the string,
-        // set to the length of the string
-        // if the upper value is -1 (i.e. no limit) or is greater
-        // than the length of the string, set to the length of the string
+    // Adjust upper and lower bounds
     if (upper == -1 || upper > str.length()) {
         upper = str.length();
     }
-        // if upper is less than lower, raise it to lower
     if (upper < lower) {
         upper = lower;
     }
+    if (lower > str.length()) {
+        lower = str.length();
+    }
+
+    StringBuilder result = new StringBuilder();
+
+    // Special case: if lower >= str.length(), return full string without appendToEnd
+    if (lower >= str.length()) {
+        result.append(str);
+        return result.toString();
+    }
 
-        StringBuffer result = new StringBuffer();
     int index = StringUtils.indexOf(str, " ", lower);
+
+    // Determine the cut-off index (endIndex) for substring
+    int endIndex;
+    boolean abbreviated = false;
+
     if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
-                result.append(StringUtils.defaultString(appendToEnd));
+        endIndex = upper;
+        if (endIndex < str.length()) {
+            abbreviated = true;
         }
     } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
+        endIndex = upper;
+        abbreviated = true;
     } else {
-            result.append(str.substring(0, index));
+        endIndex = index;
+        abbreviated = true;
+    }
+
+    // Safe-guard to not exceed string length or go negative
+    endIndex = Math.max(0, Math.min(endIndex, str.length()));
+
+    result.append(str.substring(0, endIndex));
+
+    if (abbreviated) {
         result.append(StringUtils.defaultString(appendToEnd));
     }
+
     return result.toString();
 }
\ No newline at end of file
