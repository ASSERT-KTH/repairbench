diff --git a/tmp/33b3b15c-db7f-4554-ad48-a464d8520770_buggy.java b/tmp/12b73f35-49cc-4a22-9a70-62df44b29136_fixed.java
index ae1f3a6..7056c82 100644
--- a/tmp/33b3b15c-db7f-4554-ad48-a464d8520770_buggy.java
+++ b/tmp/12b73f35-49cc-4a22-9a70-62df44b29136_fixed.java
@@ -1,34 +1,32 @@
 protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException
 {
-        /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first
-         *    check if any generics info is added; and only then ask factory
-         *    to do translation when necessary
-         */
     TypeFactory tf = ctxt.getTypeFactory();
+    JavaType t;
+
     if (id.indexOf('<') > 0) {
-            // note: may want to try combining with specialization (esp for EnumMap)?
-            // 17-Aug-2017, tatu: As per [databind#1735] need to ensure assignment
-            //    compatibility -- needed later anyway, and not doing so may open
-            //    security issues.
-            JavaType t = tf.constructFromCanonical(id);
-                // Probably cleaner to have a method in `TypeFactory` but can't add in patch
-            return t;
-        }
+        t = tf.constructFromCanonical(id);
+    } else {
         Class<?> cls;
         try {
             cls = tf.findClass(id);
         } catch (ClassNotFoundException e) {
-            // 24-May-2016, tatu: Ok, this is pretty ugly, but we should always get
-            //   DeserializationContext, just playing it safe
             if (ctxt instanceof DeserializationContext) {
                 DeserializationContext dctxt = (DeserializationContext) ctxt;
-                // First: we may have problem handlers that can deal with it?
                 return dctxt.handleUnknownTypeId(_baseType, id, this, "no such class found");
             }
-            // ... meaning that we really should never get here.
             return null;
         } catch (Exception e) {
             throw new IllegalArgumentException("Invalid type id '"+id+"' (for id type 'Id.class'): "+e.getMessage(), e);
         }
-        return tf.constructSpecializedType(_baseType, cls);
+        t = tf.constructSpecializedType(_baseType, cls);
+    }
+
+    // 17-Aug-2017, tatu: Additional verification for databind#1735 to ensure no trust concerns
+    if (!_baseType.isJavaLangObject()) {
+        if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {
+            throw new IOException("Invalid type id '"+id+"' (not subtype of "+_baseType+ ")");
+        }
+    }
+
+    return t;
 }
\ No newline at end of file
