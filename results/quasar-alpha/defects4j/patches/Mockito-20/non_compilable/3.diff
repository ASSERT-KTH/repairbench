diff --git a/tmp/3be75ce1-38fc-4578-a3b4-bbf7a65a1449_buggy.java b/tmp/fc2eb8fd-deed-483e-9061-b7698015d4f4_fixed.java
index f9a9b5b..29110e7 100644
--- a/tmp/3be75ce1-38fc-4578-a3b4-bbf7a65a1449_buggy.java
+++ b/tmp/fc2eb8fd-deed-483e-9061-b7698015d4f4_fixed.java
@@ -1,30 +1,44 @@
 public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
     if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {
         throw new MockitoException("Serialization across classloaders not yet supported with ByteBuddyMockMaker");
     }
     Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(
             settings.getTypeToMock(),
             settings.getExtraInterfaces()
     );
-        T mockInstance = null;
+    T mockInstance;
     try {
+        boolean instantiatedWithConstructor = false;
+        try {
+            mockInstance = classInstantiator.instantiate(mockedProxyType, settings);
+            instantiatedWithConstructor = true;
+        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+            // Retry without constructor if possible (e.g., no accessible constructor)
             mockInstance = classInstantiator.instantiate(mockedProxyType);
+        }
         MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;
         mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));
 
+        // If we did instantiate with constructor, try to call the real method to initialize state
+        // However, deep constructor logic is handled by Instantiator implementation
+
         return ensureMockIsAssignableToMockedType(settings, mockInstance);
     } catch (ClassCastException cce) {
         throw new MockitoException(join(
                 "ClassCastException occurred while creating the mockito mock :",
                 "  class to mock : " + describeClass(mockedProxyType),
                 "  created class : " + describeClass(settings.getTypeToMock()),
-                    "  proxy instance class : " + describeClass(mockInstance),
+                "  proxy instance class : " + describeClass(null),
                 "  instance creation by : " + classInstantiator.getClass().getSimpleName(),
                 "",
                 "You might experience classloading issues, please ask the mockito mailing-list.",
                 ""
         ), cce);
     } catch (org.mockito.internal.creation.instance.InstantiationException e) {
-            throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
+        String msg = "Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'";
+        if (e.getCause() != null && e.getCause().getMessage() != null) {
+            msg += "\n" + e.getCause().getMessage();
+        }
+        throw new MockitoException(msg, e);
     }
 }
\ No newline at end of file
