diff --git a/tmp/60145cfd-824c-4445-903d-69cb5ec3df45_buggy.java b/tmp/1be7c7d8-3c77-4d4d-a54a-393a5035c471_fixed.java
index 7d8d756..1045019 100644
--- a/tmp/60145cfd-824c-4445-903d-69cb5ec3df45_buggy.java
+++ b/tmp/1be7c7d8-3c77-4d4d-a54a-393a5035c471_fixed.java
@@ -1,48 +1,62 @@
-    /**
-     * Method that handles type information wrapper, locates actual
-     * subtype deserializer to use, and calls it to do actual
-     * deserialization.
-     */
 @SuppressWarnings("resource")
 private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
 {
     // 02-Aug-2013, tatu: May need to use native type ids
     if (p.canReadTypeId()) {
         Object typeId = p.getTypeId();
         if (typeId != null) {
             return _deserializeWithNativeTypeId(p, ctxt, typeId);
         }
     }
-        // first, sanity checks
-        if (p.getCurrentToken() != JsonToken.START_OBJECT) {
-            throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
-                    "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
-        }
-            // should always get field name, but just in case...
+    JsonToken t = p.getCurrentToken();
+    // Accept START_OBJECT for standard wrapper-style input
+    if (t == JsonToken.START_OBJECT) {
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
-            // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
-            tb.writeStartObject(); // recreate START_OBJECT
+            tb.writeStartObject();
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
+    // Accept possible unwrapped object reference (id)
+    if (t == JsonToken.FIELD_NAME) {
+        // Not expected START_OBJECT but a FIELD_NAME: could be unwrapped Object Id ref, or unexpected
+        // let's try to detect the latter
+        final String typeId = p.getCurrentName();
+        JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+        p.nextToken(); // move to value
+
+        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+            TokenBuffer tb = new TokenBuffer(null, false);
+            tb.writeStartObject();
+            tb.writeFieldName(_typePropertyName);
+            tb.writeString(typeId);
+            p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+            p.nextToken();
+        }
+
+        Object value = deser.deserialize(p, ctxt);
+        // the FIELD_NAME wrapper does not surround value with START_OBJECT, so no END_OBJECT to expect
+        return value;
+    }
+    throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
+            "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
+}
\ No newline at end of file
