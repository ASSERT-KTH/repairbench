diff --git a/tmp/cd67f5c9-1352-4d67-98ce-7e06943cc6db_buggy.java b/tmp/fcdf4bdf-4157-4d23-ab8b-500ceb98ce2e_fixed.java
index d907b39..c0e0f21 100644
--- a/tmp/cd67f5c9-1352-4d67-98ce-7e06943cc6db_buggy.java
+++ b/tmp/fcdf4bdf-4157-4d23-ab8b-500ceb98ce2e_fixed.java
@@ -1,56 +1,79 @@
 public int read(byte[] buffer, int start, int length) throws IOException {
     if (closed) {
         throw new IOException("The stream is closed");
     }
     if (inf.finished() || current == null) {
         return -1;
     }
 
     // avoid int overflow, check null buffer
     if (start <= buffer.length && length >= 0 && start >= 0
         && buffer.length - start >= length) {
         if (current.getMethod() == ZipArchiveOutputStream.STORED) {
             int csize = (int) current.getSize();
             if (readBytesOfEntry >= csize) {
                 return -1;
             }
             if (offsetInBuffer >= lengthOfLastRead) {
                 offsetInBuffer = 0;
                 if ((lengthOfLastRead = in.read(buf)) == -1) {
-                        return -1;
+                    throw new IOException("Truncated ZIP file");
                 }
                 count(lengthOfLastRead);
                 bytesReadFromStream += lengthOfLastRead;
             }
-                int toRead = length > lengthOfLastRead
-                    ? lengthOfLastRead - offsetInBuffer
-                    : length;
+            int availableInBuf = lengthOfLastRead - offsetInBuffer;
+            int toRead = Math.min(length, availableInBuf);
             if ((csize - readBytesOfEntry) < toRead) {
                 toRead = csize - readBytesOfEntry;
             }
             System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);
             offsetInBuffer += toRead;
             readBytesOfEntry += toRead;
             crc.update(buffer, start, toRead);
             return toRead;
         }
         if (inf.needsInput()) {
             fill();
             if (lengthOfLastRead > 0) {
                 bytesReadFromStream += lengthOfLastRead;
+            } else if (lengthOfLastRead == -1) {
+                throw new IOException("Truncated ZIP file");
             }
         }
-            int read = 0;
+        int read;
+        try {
+            read = inf.inflate(buffer, start, length);
+        } catch (DataFormatException e) {
+            throw new ZipException(e.getMessage());
+        }
+        if (read == 0) {
+            if (inf.finished()) {
+                return -1;
+            } else if (inf.needsInput()) {
+                fill();
+                if (lengthOfLastRead > 0) {
+                    bytesReadFromStream += lengthOfLastRead;
+                } else if (lengthOfLastRead == -1) {
+                    throw new IOException("Truncated ZIP file");
+                }
                 try {
                     read = inf.inflate(buffer, start, length);
                 } catch (DataFormatException e) {
                     throw new ZipException(e.getMessage());
                 }
                 if (read == 0 && inf.finished()) {
                     return -1;
                 }
+                if (read == 0) {
+                    throw new IOException("Truncated ZIP file");
+                }
+            } else {
+                throw new IOException("Truncated ZIP file");
+            }
+        }
         crc.update(buffer, start, read);
         return read;
     }
     throw new ArrayIndexOutOfBoundsException();
 }
\ No newline at end of file
