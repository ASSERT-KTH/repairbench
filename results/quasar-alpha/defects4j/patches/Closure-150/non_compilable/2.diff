diff --git a/tmp/6e569283-0225-4ffb-af71-da8f22396017_buggy.java b/tmp/7110ce96-c717-48f0-b2ac-ce375fd6c8a6_fixed.java
index 800e6e1..502a54e 100644
--- a/tmp/6e569283-0225-4ffb-af71-da8f22396017_buggy.java
+++ b/tmp/7110ce96-c717-48f0-b2ac-ce375fd6c8a6_fixed.java
@@ -1,32 +1,45 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Collect function property information before recursive traversal,
+  // so that JSDoc on property assignments are properly attached.
+  // This is important for stub declarations on properties.
+  if (n.getJSDocInfo() != null &&
+      parent != null &&
+      parent.getType() == Token.EXPR_RESULT &&
+      n.getType() == Token.ASSIGN) {
+    Node lhs = n.getFirstChild();
+    if (lhs.getType() == Token.GETPROP) {
+      defineSlot(lhs, n.getJSDocInfo(), lhs);
+    }
+  } else if (parent != null &&
+      parent.getType() == Token.EXPR_RESULT &&
+      (n.getType() == Token.GETPROP || n.getType() == Token.NAME) &&
+      n.getJSDocInfo() != null) {
+    // Handle stub declaration like /** @type {Foo} */ goog.bar;
+    defineSlot(n, n.getJSDocInfo(), n);
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
