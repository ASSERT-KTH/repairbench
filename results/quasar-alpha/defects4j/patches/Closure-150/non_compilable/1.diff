diff --git a/tmp/2560a840-360b-434e-92b9-602a7e438f9a_buggy.java b/tmp/87e23fe4-9ec1-447e-a572-62225affc6e4_fixed.java
index 800e6e1..0562fc7 100644
--- a/tmp/2560a840-360b-434e-92b9-602a7e438f9a_buggy.java
+++ b/tmp/87e23fe4-9ec1-447e-a572-62225affc6e4_fixed.java
@@ -1,32 +1,37 @@
-    /**
-     * Visit a node in a local scope, and add any local variables or catch
-     * parameters into the local symbol table.
-     *
-     * @param t The node traversal.
-     * @param n The node being visited.
-     * @param parent The parent of n
-     */
-    @Override public void visit(NodeTraversal t, Node n, Node parent) {
+@Override
+public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
+    default:
+      // Handle stub declaration on qualified names or property accesses,
+      // e.g., "goog.foo;" or "this.foo;" with JSDoc property declarations.
+      if ((n.getType() == Token.GETPROP || n.getType() == Token.GETELEM) &&
+          parent != null && parent.getType() != Token.ASSIGN) {
+        JSDocInfo info = n.getJSDocInfo();
+        if (info != null && (info.hasType() || info.hasEnumParameterType() ||
+            info.isConstant() || info.containsDeclaration())) {
+          defineSlot(n, parent, info);
+        }
+      }
+      break;
   }
 }
\ No newline at end of file
