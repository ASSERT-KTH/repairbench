diff --git a/tmp/4235f7b9-af45-4bec-bd38-9e1a6c399fc8_buggy.java b/tmp/f1c12479-328f-4951-93de-71959f0ca6e3_fixed.java
index 800e6e1..a73e617 100644
--- a/tmp/4235f7b9-af45-4bec-bd38-9e1a6c399fc8_buggy.java
+++ b/tmp/f1c12479-328f-4951-93de-71959f0ca6e3_fixed.java
@@ -1,32 +1,61 @@
 /**
  * Visit a node in a local scope, and add any local variables or catch
  * parameters into the local symbol table.
  *
  * @param t The node traversal.
  * @param n The node being visited.
  * @param parent The parent of n
  */
 @Override public void visit(NodeTraversal t, Node n, Node parent) {
   if (n == scope.getRootNode()) return;
 
   if (n.getType() == Token.LP && parent == scope.getRootNode()) {
     handleFunctionInputs(parent);
     return;
   }
 
   attachLiteralTypes(n);
+
+  // Handle function type annotations before variable definition.
+  if (n.getJSType() != null) {
+    JSType type = n.getJSType();
+    if (n.isQualifiedName() && type.isFunctionType()) {
+      String qualifiedName = n.getQualifiedName();
+      // Define a stub for the qualified name if it already exists as an object
+      TypedVar var = scope.getVar(qualifiedName);
+      if (var != null) {
+        JSType existingType = var.getType();
+        if (existingType != null && existingType.isObject()) {
+          ObjectType objType = (ObjectType) existingType;
+          String propName = n.getLastChild().getString();
+          objType.defineDeclaredProperty(propName, type, n);
+        }
+      } else {
+        // No var declaration yet, define a stub VAR for this qualified name
+        defineSlot(n, scope.getRootNode(), type, /*inferred=*/ false);
+      }
+    } else if (n.isGetProp() && type.isFunctionType()) {
+      String leftMostName = n.getFirstChild().getQualifiedName();
+      TypedVar var = scope.getVar(leftMostName);
+      if (var != null && var.getType() != null && var.getType().isObjectType()) {
+        ObjectType objectType = (ObjectType) var.getType();
+        objectType.defineDeclaredProperty(n.getLastChild().getString(), type, n);
+      }
+    }
+  }
+
   switch (n.getType()) {
     case Token.FUNCTION:
       if (parent.getType() == Token.NAME) {
         return;
       }
       defineDeclaredFunction(n, parent);
       break;
     case Token.CATCH:
       defineCatch(n, parent);
       break;
     case Token.VAR:
       defineVar(n, parent);
       break;
   }
 }
\ No newline at end of file
