diff --git a/tmp/24ea80a3-8e4c-4489-a709-0075cb8d8e85_buggy.java b/tmp/7f279a16-6734-41e7-b6bb-823f2bd3c20b_fixed.java
index e1fc51f..52b09fe 100644
--- a/tmp/24ea80a3-8e4c-4489-a709-0075cb8d8e85_buggy.java
+++ b/tmp/7f279a16-6734-41e7-b6bb-823f2bd3c20b_fixed.java
@@ -1,9 +1,37 @@
 public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+    // Not using method.equals() for 1 good reason:
+    // sometimes Java generates forwarding methods when generics are in play (see JavaGenericsForwardingMethodsTest)
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    if (m1.equals(m2)) {
+        return true;
+    }
+
+    // For bridge methods created by compiler to handle type erasure in generics
+    if (m1.isBridge() && !m2.isBridge()) {
+        return isBridgeMethodFor(m1, m2);
+    }
+    if (!m1.isBridge() && m2.isBridge()) {
+        return isBridgeMethodFor(m2, m1);
+    }
+
+    return false;
+}
+
+private boolean isBridgeMethodFor(Method bridgeMethod, Method targetMethod) {
+    if (!bridgeMethod.getName().equals(targetMethod.getName())) {
+        return false;
+    }
+    if (bridgeMethod.getParameterCount() != targetMethod.getParameterCount()) {
+        return false;
+    }
+    Class<?>[] bridgeParams = bridgeMethod.getParameterTypes();
+    Class<?>[] targetParams = targetMethod.getParameterTypes();
+    for (int i = 0; i < bridgeParams.length; i++) {
+        if (!bridgeParams[i].isAssignableFrom(targetParams[i])) {
+            return false;
+        }
+    }
+    return true;
 }
\ No newline at end of file
