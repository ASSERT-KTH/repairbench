diff --git a/tmp/1a166377-73fe-4d7e-94a5-583a170c3af2_buggy.java b/tmp/3412a137-f3cf-4646-b4dc-d34e10441c34_fixed.java
index fd8eae5..c9e08f4 100644
--- a/tmp/1a166377-73fe-4d7e-94a5-583a170c3af2_buggy.java
+++ b/tmp/3412a137-f3cf-4646-b4dc-d34e10441c34_fixed.java
@@ -1,47 +1,52 @@
-    /**
-     * Adds or updates an item in the series and sends a
-     * {@link SeriesChangeEvent} to all registered listeners.
-     *
-     * @param x  the x-value (<code>null</code> not permitted).
-     * @param y  the y-value (<code>null</code> permitted).
-     *
-     * @return A copy of the overwritten data item, or <code>null</code> if no
-     *         item was overwritten.
-     */
 public XYDataItem addOrUpdate(Number x, Number y) {
     if (x == null) {
         throw new IllegalArgumentException("Null 'x' argument.");
     }
 
-        // if we get to here, we know that duplicate X values are not permitted
     XYDataItem overwritten = null;
     int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
+
+    if (index >= 0) {
         XYDataItem existing = (XYDataItem) this.data.get(index);
         try {
             overwritten = (XYDataItem) existing.clone();
         }
         catch (CloneNotSupportedException e) {
             throw new SeriesException("Couldn't clone XYDataItem!");
         }
+
+        if (!this.allowDuplicateXValues) {
             existing.setY(y);
+        } else {
+            // allow duplicate X values: insert new item *after* existing
+            if (this.autoSort) {
+                int insertIndex = index + 1;
+                // advance insertIndex until next item with different X or end
+                while (insertIndex < this.data.size() &&
+                        this.data.get(insertIndex).getX().equals(x)) {
+                    insertIndex++;
+                }
+                this.data.add(insertIndex, new XYDataItem(x, y));
+            } else {
+                this.data.add(new XYDataItem(x, y));
+            }
+            if (getItemCount() > this.maximumItemCount) {
+                this.data.remove(0);
+            }
         }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
+    } else {
+        // negative index means new unique X value, insert accordingly
         if (this.autoSort) {
+            // index returned by indexOf() when not found is negative
             this.data.add(-index - 1, new XYDataItem(x, y));
-            }
-            else {
+        } else {
             this.data.add(new XYDataItem(x, y));
         }
-            // check if this addition will exceed the maximum item count...
         if (getItemCount() > this.maximumItemCount) {
             this.data.remove(0);
         }
     }
+
     fireSeriesChanged();
     return overwritten;
 }
\ No newline at end of file
