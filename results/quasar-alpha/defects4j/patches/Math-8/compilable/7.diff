diff --git a/tmp/ce78d9f9-f96c-45d9-83e9-7f6e78d9026b_buggy.java b/tmp/fcb908f0-db29-4f46-8020-538987a666bf_fixed.java
index bfa2423..32de701 100644
--- a/tmp/ce78d9f9-f96c-45d9-83e9-7f6e78d9026b_buggy.java
+++ b/tmp/fcb908f0-db29-4f46-8020-538987a666bf_fixed.java
@@ -1,23 +1,27 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
+    // Determine component type by scanning for the first non-null singleton
+    Class<?> componentType = null;
+    for (int i = 0; i < singletons.size(); i++) {
+        T singleton = singletons.get(i);
+        if (singleton != null) {
+            componentType = singleton.getClass();
+            break;
+        }
+    }
+    if (componentType == null) {
+        throw new IllegalStateException("Cannot determine array type because all singleton elements are null");
+    }
+
+    @SuppressWarnings("unchecked")
+    final T[] out = (T[]) java.lang.reflect.Array.newInstance(componentType, sampleSize);
 
     for (int i = 0; i < sampleSize; i++) {
         out[i] = sample();
     }
 
     return out;
-
 }
\ No newline at end of file
