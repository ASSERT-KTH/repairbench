diff --git a/tmp/b3f7d25f-1777-4867-beda-2873aece7945_buggy.java b/tmp/b096d633-e09d-43d2-b2f8-9ad97e2e01e1_fixed.java
index bfa2423..d8c1867 100644
--- a/tmp/b3f7d25f-1777-4867-beda-2873aece7945_buggy.java
+++ b/tmp/b096d633-e09d-43d2-b2f8-9ad97e2e01e1_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Generate a random sample from the distribution.
-     *
-     * @param sampleSize the number of random values to generate.
-     * @return an array representing the random sample.
-     * @throws NotStrictlyPositiveException if {@code sampleSize} is not
-     * positive.
-     */
 public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
     if (sampleSize <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
-                    sampleSize);
+        throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize);
     }
 
-        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
-
-        for (int i = 0; i < sampleSize; i++) {
+    final T[] out;
+    if (sampleSize == 0) {
+        out = (T[]) new Object[0];
+    } else {
+        // Use the runtime class of the first drawn sample to get correct component type
+        T firstSample = sample();
+        out = (T[]) java.lang.reflect.Array.newInstance(firstSample.getClass(), sampleSize);
+        out[0] = firstSample;
+        for (int i = 1; i < sampleSize; i++) {
             out[i] = sample();
         }
+    }
 
     return out;
-
 }
\ No newline at end of file
