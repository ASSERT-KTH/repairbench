diff --git a/tmp/ad16f98d-65ce-4d94-84b2-958fb2ac9f4f_buggy.java b/tmp/33e120b3-7d57-4536-a471-fd2b9b6a3079_fixed.java
index e0ecec8..425367c 100644
--- a/tmp/ad16f98d-65ce-4d94-84b2-958fb2ac9f4f_buggy.java
+++ b/tmp/33e120b3-7d57-4536-a471-fd2b9b6a3079_fixed.java
@@ -1,35 +1,45 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  while (arguments.hasNext()) {
+    ordinal++;
+    if (parameters.hasNext()) {
       parameter = parameters.next();
+    }
+    // else: var_args function: reuse the last parameter
+
     argument = arguments.next();
-      ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    // For parameters that represent var_args (...number),
+    // use the type of that parameter for extra arguments.
+    validator.expectArgumentMatchesParameter(
+        t,
+        argument,
+        getJSType(argument),
+        getJSType(parameter),
+        call,
+        ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
         validator.getReadableJSTypeName(call.getFirstChild(), false),
-              String.valueOf(numArgs), String.valueOf(minArgs),
-              maxArgs != Integer.MAX_VALUE ?
-              " and no more than " + maxArgs + " argument(s)" : "");
+        String.valueOf(numArgs),
+        String.valueOf(minArgs),
+        maxArgs != Integer.MAX_VALUE
+            ? " and no more than " + maxArgs + " argument(s)"
+            : "");
   }
 }
\ No newline at end of file
