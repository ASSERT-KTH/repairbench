diff --git a/tmp/e1c35dea-346f-4e60-847c-ec411ab8205d_buggy.java b/tmp/d2982ff9-d108-44f1-bcd5-ecb89730f035_fixed.java
index e0ecec8..d54cd2f 100644
--- a/tmp/e1c35dea-346f-4e60-847c-ec411ab8205d_buggy.java
+++ b/tmp/d2982ff9-d108-44f1-bcd5-ecb89730f035_fixed.java
@@ -1,35 +1,54 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
+
   Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+  if (parameters.hasNext()) {
     parameter = parameters.next();
-      argument = arguments.next();
+  }
+
+  while (arguments.hasNext()) {
+    Node argument = arguments.next();
     ordinal++;
 
-      validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+    // If there are still fixed params left, use that. Otherwise, we may be in varargs
+    JSType paramType = parameter != null ? getJSType(parameter) : null;
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
+    } else if (functionType.isVarArgs()) {
+      // For variable arguments, use the last parameter's type (usually the var_args param)
+      // and treat each additional argument as matching var_args.
+      // paramType remains the type of the last param
+    } else {
+      // no parameters left, not varargs, ignore as the argument count check below will catch it
+      paramType = null;
+    }
+
+    if (paramType != null) {
+      validator.expectArgumentMatchesParameter(
+          t, argument,
+          getJSType(argument),
+          paramType,
+          call, ordinal);
+    }
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
