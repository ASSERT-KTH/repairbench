diff --git a/tmp/15d5b767-a6af-40b7-a12c-72ff382f7e3a_buggy.java b/tmp/46ce579a-553f-4c8b-9215-d031f99fbc40_fixed.java
index e0ecec8..339861f 100644
--- a/tmp/15d5b767-a6af-40b7-a12c-72ff382f7e3a_buggy.java
+++ b/tmp/46ce579a-553f-4c8b-9215-d031f99fbc40_fixed.java
@@ -1,35 +1,50 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+  while (arguments.hasNext()) {
+    if (parameters.hasNext()) {
       parameter = parameters.next();
-      argument = arguments.next();
+    }
     ordinal++;
+    argument = arguments.next();
+
+    JSType paramType;
+    if (parameter != null) {
+      paramType = getJSType(parameter);
+    } else {
+      // no formal param left: var_args
+      paramType = functionType.getTypeOfThis().getNativeType().getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      if (functionType.isVarArgs()) {
+        paramType = functionType.getTypeOfThis().getNativeType().getNativeType(JSTypeNative.UNKNOWN_TYPE);
+        // assume varargs type matches the last formal param type
+        if (functionType.getParameters().size() > 0) {
+          Node lastParam = functionType.getParameters().getLast();
+          paramType = getJSType(lastParam);
+        }
+      }
+    }
 
     validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+        getJSType(argument), paramType, call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
