diff --git a/tmp/6aaae98e-cf71-4d3c-94a2-60d874442518_buggy.java b/tmp/9ef679d9-52c3-416e-ae57-cc0ac00908d0_fixed.java
index e0ecec8..882bfaf 100644
--- a/tmp/6aaae98e-cf71-4d3c-94a2-60d874442518_buggy.java
+++ b/tmp/9ef679d9-52c3-416e-ae57-cc0ac00908d0_fixed.java
@@ -1,35 +1,46 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
+
+  // Process fixed parameters first
+  while (arguments.hasNext() && parameters.hasNext()) {
     parameter = parameters.next();
     argument = arguments.next();
     ordinal++;
 
     validator.expectArgumentMatchesParameter(t, argument,
         getJSType(argument), getJSType(parameter), call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
+
+  // If function is var_args, process leftover arguments
+  if (functionType.isVarArgs() && parameter != null) {
+    JSType varArgsType = getJSType(parameter);
+    while (arguments.hasNext()) {
+      argument = arguments.next();
+      ordinal++;
+      validator.expectArgumentMatchesParameter(
+          t, argument,
+          getJSType(argument), varArgsType, call, ordinal);
+    }
+  }
 }
\ No newline at end of file
