diff --git a/tmp/9c993965-21fd-4674-8e27-2c19fec35221_buggy.java b/tmp/1194bc99-7d19-450f-b633-1e7a5d4de043_fixed.java
index 86553f4..91d42f0 100644
--- a/tmp/9c993965-21fd-4674-8e27-2c19fec35221_buggy.java
+++ b/tmp/1194bc99-7d19-450f-b633-1e7a5d4de043_fixed.java
@@ -1,57 +1,92 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
-      // Don't traverse functions that are constructors or have the @this
-      // or @override annotation.
+    // Don't traverse functions that are constructors, interfaces, or have
+    // the @this or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
-           jsDoc.isOverride())) {
+         jsDoc.isOverride() ||
+         jsDoc.isInterface())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN)) {
       return false;
     }
+
+    // For assignments, skip traversal if assigning to a prototype property or subproperty,
+    // including computed property assignments (i.e., bracket notation).
+    if (parent != null && parent.getType() == Token.ASSIGN) {
+      Node lhs = parent.getFirstChild();
+
+      if (isPrototypeProperty(lhs)) {
+        return false;
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      // property or subproperty, including bracket notation.
+      if (isPrototypeProperty(lhs)) {
         return false;
       }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
-            return false;
     }
   }
+
+  return true;
 }
 
+/**
+ * Helper to determine whether the given node corresponds to a prototype
+ * property or subproperty assignment, including bracket notation.
+ */
+private boolean isPrototypeProperty(Node lhs) {
+  if (lhs == null) {
+    return false;
+  }
+  if (lhs.isGetProp()) {
+    Node pname = lhs.getLastChild();
+    if (pname != null && pname.getString().equals("prototype")) {
       return true;
     }
+    String qualifiedName = lhs.getQualifiedName();
+    return qualifiedName != null && qualifiedName.contains(".prototype.");
+  } else if (lhs.isGetElem()) {
+    // Handle bracket notation on prototype or its subproperties
+    Node target = lhs.getFirstChild();
+    if (target != null) {
+      String targetName = target.getQualifiedName();
+      if (targetName != null && (targetName.endsWith(".prototype") || targetName.contains(".prototype."))) {
+        return true;
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
