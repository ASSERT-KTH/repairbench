diff --git a/tmp/854d28ef-6be5-49ec-ae32-8ca8f699bb70_buggy.java b/tmp/00879c74-9747-4ac2-936a-eac159e5f7c8_fixed.java
index 41ea16c..c303c30 100644
--- a/tmp/854d28ef-6be5-49ec-ae32-8ca8f699bb70_buggy.java
+++ b/tmp/00879c74-9747-4ac2-936a-eac159e5f7c8_fixed.java
@@ -1,63 +1,72 @@
 /**
  * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
  * Note that the resulting expression will always evaluate to
  * true, as would the x = {...} expression.
  */
 private void replaceAssignmentExpression(Var v, Reference ref,
                                          Map<String, String> varmap) {
   // Compute all of the assignments necessary
   List<Node> nodes = Lists.newArrayList();
   Node val = ref.getAssignedValue();
   blacklistVarReferencesInTree(val, v.scope);
   Preconditions.checkState(val.getType() == Token.OBJECTLIT);
   Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
   for (Node key = val.getFirstChild(); key != null;
        key = key.getNext()) {
     String var = key.getString();
     Node value = key.removeFirstChild();
     // TODO(user): Copy type information.
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)), value));
     all.remove(var);
   }
 
   // TODO(user): Better source information.
   for (String var : all) {
     nodes.add(
       new Node(Token.ASSIGN,
                Node.newString(Token.NAME, varmap.get(var)),
                NodeUtil.newUndefinedNode(null)));
   }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+  // Always append true, so the overall expression evaluates to true.
   nodes.add(new Node(Token.TRUE));
 
+  Node replacement;
+
+  if (nodes.size() == 1) {
+    // Just "true"
+    replacement = nodes.get(0);
+  } else if (nodes.size() == 2) {
+    replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));
+  } else {
     // Join these using COMMA. A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
+    // create a tree. In the tree the first child is the COMMA to match
     // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
     replacement = new Node(Token.COMMA);
     Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+
+    int i = 0;
+    int stop = nodes.size() - 2;
+    while (i < stop) {
+      Node comma = new Node(Token.COMMA);
+      cur.addChildToFront(comma);
       cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+      cur = comma;
+      i++;
     }
     cur.addChildToFront(nodes.get(i));
     cur.addChildToFront(nodes.get(i + 1));
+  }
 
   Node replace = ref.getParent();
   replacement.copyInformationFromForTree(replace);
 
   if (replace.getType() == Token.VAR) {
     replace.getParent().replaceChild(
         replace, NodeUtil.newExpr(replacement));
   } else {
     replace.getParent().replaceChild(replace, replacement);
   }
 }
\ No newline at end of file
