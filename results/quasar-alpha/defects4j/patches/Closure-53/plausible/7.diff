diff --git a/tmp/bed90168-35f4-4bf1-bceb-3dee840b539a_buggy.java b/tmp/52ba665a-0f32-4b58-906f-92b19226fbe7_fixed.java
index 41ea16c..9c079d1 100644
--- a/tmp/bed90168-35f4-4bf1-bceb-3dee840b539a_buggy.java
+++ b/tmp/52ba665a-0f32-4b58-906f-92b19226fbe7_fixed.java
@@ -1,63 +1,76 @@
     /**
      * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.
      * Note that the resulting expression will always evaluate to
      * true, as would the x = {...} expression.
      */
     private void replaceAssignmentExpression(Var v, Reference ref,
                                              Map<String, String> varmap) {
       // Compute all of the assignments necessary
       List<Node> nodes = Lists.newArrayList();
       Node val = ref.getAssignedValue();
       blacklistVarReferencesInTree(val, v.scope);
-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);
+
+      // If the assigned value is an empty object literal, avoid failure
+      if (val.getType() != Token.OBJECTLIT) {
+        throw new IllegalStateException("Expected OBJECTLIT but got: " + val.getType());
+      }
+
       Set<String> all = Sets.newLinkedHashSet(varmap.keySet());
+
       for (Node key = val.getFirstChild(); key != null;
            key = key.getNext()) {
         String var = key.getString();
         Node value = key.removeFirstChild();
         // TODO(user): Copy type information.
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)), value));
         all.remove(var);
       }
 
       // TODO(user): Better source information.
       for (String var : all) {
         nodes.add(
           new Node(Token.ASSIGN,
                    Node.newString(Token.NAME, varmap.get(var)),
                    NodeUtil.newUndefinedNode(null)));
       }
 
-      Node replacement;
-        // All assignments evaluate to true, so make sure that the
-        // expr statement evaluates to true in case it matters.
+      // Always ends with 'true'
       nodes.add(new Node(Token.TRUE));
 
-        // Join these using COMMA.  A COMMA node must have 2 children, so we
-        // create a tree. In the tree the first child be the COMMA to match
-        // the parser, otherwise tree equality tests fail.
+      Node replacement;
+
+      if (nodes.size() == 1) {
+        // Only "true"
+        replacement = nodes.get(0);
+      } else if (nodes.size() == 2) {
+        // Two nodes, connect directly with comma
+        replacement = new Node(Token.COMMA, nodes.get(0), nodes.get(1));
+      } else {
+        // More than 2, chain comma nodes
+        // Reverse the list to build the tree matching parser behavior
         nodes = Lists.reverse(nodes);
         replacement = new Node(Token.COMMA);
         Node cur = replacement;
         int i;
         for (i = 0; i < nodes.size() - 2; i++) {
           cur.addChildToFront(nodes.get(i));
           Node t = new Node(Token.COMMA);
           cur.addChildToFront(t);
           cur = t;
         }
         cur.addChildToFront(nodes.get(i));
         cur.addChildToFront(nodes.get(i + 1));
+      }
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
 
       if (replace.getType() == Token.VAR) {
         replace.getParent().replaceChild(
             replace, NodeUtil.newExpr(replacement));
       } else {
         replace.getParent().replaceChild(replace, replacement);
       }
     }
\ No newline at end of file
