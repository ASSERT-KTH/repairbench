diff --git a/tmp/d1c44c51-ce63-41f1-9427-3f11cfdda27a_buggy.java b/tmp/78dabd98-93ef-4345-af1a-6df22df7eea9_fixed.java
index 9976e43..3b1cd44 100644
--- a/tmp/d1c44c51-ce63-41f1-9427-3f11cfdda27a_buggy.java
+++ b/tmp/78dabd98-93ef-4345-af1a-6df22df7eea9_fixed.java
@@ -1,76 +1,69 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Check parameter lists
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
+
+  while (thatParam != null) {
+    boolean thisIsVarArgs = (thisParam != null) && thisParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam.isVarArgs();
+
+    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;
     JSType thatParamType = thatParam.getJSType();
+
+    if (thisParam == null) {
+      // "this" has no parameter; 
+      // "that" has more parameters not marked as varargs: "this" missing a required formal
+      if (!thatIsVarArgs) {
+        return false;
+      }
+      // else: "that" is varargs, so OK
+    } else {
       if (thisParamType != null) {
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
-
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
-
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
-        thisParam = thisParam.getNext();
-      }
-      if (!thatIsVarArgs) {
-        thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
+    // Both var_args means end of checking parameters.
     if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      break;
+    }
+
+    if (!thatIsVarArgs) {
+      thatParam = thatParam.getNext();
+    }
+
+    if (!thisIsVarArgs && thisParam != null) {
+      thisParam = thisParam.getNext();
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // After loop: "that" formals exhausted.
+  // If "this" still has remaining required formals, then "this" is incompatible.
+  while (thisParam != null) {
+    if (!thisParam.isVarArgs()) {
+      return false;
+    }
+    thisParam = thisParam.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
