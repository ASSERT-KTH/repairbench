diff --git a/tmp/fd0f39af-2d33-4799-b720-b452264f1618_buggy.java b/tmp/25b61b0e-ca47-46ad-9f38-7f898b020747_fixed.java
index 9976e43..b58f529 100644
--- a/tmp/fd0f39af-2d33-4799-b720-b452264f1618_buggy.java
+++ b/tmp/25b61b0e-ca47-46ad-9f38-7f898b020747_fixed.java
@@ -1,76 +1,66 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
-    // that.paramType[i] <: this.paramType[i] (contravariant)
-    //
-    // If this.paramType[i] is required,
-    // then that.paramType[i] is required.
-    //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+  // Parameter contravariance
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
-      // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // Additional parameters in 'that' beyond 'this' are acceptable, because in
+  // practice we allow overriding methods to have fewer required parameters,
+  // but we *do* want to disallow 'this' having additional required parameters
+  // not present in 'that'. That is, 'that' must provide at least as many
+  // required parameters as 'this'.
 
+  if (thisParam != null) {
+    // check if remaining thisParams are still required
+    while (thisParam != null) {
+      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+        // 'this' requires more args than 'that' provides
+        return false;
+      }
+      thisParam = thisParam.getNext();
+    }
+  }
+
+  // otherwise, subtype relation holds
   return true;
 }
\ No newline at end of file
