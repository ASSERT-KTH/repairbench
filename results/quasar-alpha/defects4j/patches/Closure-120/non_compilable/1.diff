diff --git a/tmp/185cd4b4-9292-4f52-a68a-132a3570292e_buggy.java b/tmp/773c5f4d-a28d-4ef5-9b28-3cf164f136c5_fixed.java
index 07b0792..912d14d 100644
--- a/tmp/185cd4b4-9292-4f52-a68a-132a3570292e_buggy.java
+++ b/tmp/773c5f4d-a28d-4ef5-9b28-3cf164f136c5_fixed.java
@@ -1,22 +1,45 @@
 /**
  * @return Whether the variable is only assigned a value once for its
  *     lifetime.
  */
 boolean isAssignedOnceInLifetime() {
   Reference ref = getOneAndOnlyAssignment();
   if (ref == null) {
     return false;
   }
 
   // Make sure this assignment is not in a loop.
   for (BasicBlock block = ref.getBasicBlock();
        block != null; block = block.getParent()) {
     if (block.isFunction) {
+      // If the assignment is outside the function (e.g., global assignment),
+      // ensure it is top-level and not inside a loop nested in the function.
       break;
     } else if (block.isLoop) {
       return false;
     }
   }
 
+  // Additionally, disallow assignments that are in conditional blocks,
+  // since assignment would only happen sometimes.
+  for (BasicBlock block = ref.getBasicBlock();
+       block != null; block = block.getParent()) {
+    if (block.isFunction) {
+      break;
+    } else if (block.isConditional) {
+      return false;
+    }
+  }
+
+  // If the only assignment is after the variable has been read, then it's not
+  // assigned only once in its lifetime effectively.
+  int idx = getReferences().indexOf(ref);
+  for (int i = 0; i < idx; i++) {
+    Reference previousRef = getReferences().get(i);
+    if (previousRef.isRead()) {
+      return false;
+    }
+  }
+
   return true;
 }
\ No newline at end of file
