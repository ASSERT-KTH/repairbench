diff --git a/tmp/8abab43c-7840-4e0a-a0c0-d8e7565554ce_buggy.java b/tmp/d1982a7b-fa3b-434d-9668-b74a439861e4_fixed.java
index 19fd63e..f5ea43c 100644
--- a/tmp/8abab43c-7840-4e0a-a0c0-d8e7565554ce_buggy.java
+++ b/tmp/d1982a7b-fa3b-434d-9668-b74a439861e4_fixed.java
@@ -1,24 +1,37 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
+
     // IE has a bug where event handlers behave differently when
     // their return value is used vs. when their return value is in
     // an EXPR_RESULT. It's pretty freaking weird. See:
     // http://code.google.com/p/closure-compiler/issues/detail?id=291
     // We try to detect this case, and not fold EXPR_RESULTs
     // into other expressions.
 
     // We only have to worry about methods with an implicit 'this'
     // param, or this doesn't happen.
 
+    if (NodeUtil.isExprCall(maybeExpr)) {
+      Node callTarget = maybeExpr.getFirstChild();
+      if (callTarget != null &&
+          (callTarget.isGetProp() || callTarget.isGetElem())) {
+        String propName = callTarget.isGetProp()
+            ? callTarget.getLastChild().getString()
+            : null;
+
+        if ("onchange".equals(propName)) {
+          return false;
+        }
+      }
+    }
+
     return NodeUtil.isExpressionNode(maybeExpr);
   }
-    }
 
   return false;
 }
\ No newline at end of file
