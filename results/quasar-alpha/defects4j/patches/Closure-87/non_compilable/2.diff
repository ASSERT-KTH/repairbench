diff --git a/tmp/0007ea4d-5edd-4d05-9600-a70812f7b5bf_buggy.java b/tmp/1ece5322-fa73-4cf3-ad4e-747dbfec68f8_fixed.java
index 19fd63e..1e6f94f 100644
--- a/tmp/0007ea4d-5edd-4d05-9600-a70812f7b5bf_buggy.java
+++ b/tmp/1ece5322-fa73-4cf3-ad4e-747dbfec68f8_fixed.java
@@ -1,24 +1,31 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+    // Due to IE bug (see issue 291), do not fold EXPR_RESULTs that are
+    // calls to 'on*' methods (like onchange handlers)
+    if (maybeExpr.isExprResult()) {
+      Node expr = maybeExpr.getFirstChild();
+      if (expr != null && expr.isCall()) {
+        Node callee = expr.getFirstChild();
+        if (callee != null && callee.isGetProp()) {
+          Node prop = callee.getLastChild();
+          if (prop != null && prop.isString()) {
+            String propName = prop.getString();
+            if (propName.startsWith("on")) {
+              // Avoid folding event handler calls
+              return false;
+            }
+          }
+        }
+      }
+    }
 
     return NodeUtil.isExpressionNode(maybeExpr);
   }
-    }
-
   return false;
 }
\ No newline at end of file
