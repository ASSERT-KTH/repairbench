diff --git a/tmp/3b59fd88-2b68-4816-8928-f1764febe5f2_buggy.java b/tmp/78aab6ad-71db-4633-b100-815d35c92fbb_fixed.java
index 19fd63e..1579f72 100644
--- a/tmp/3b59fd88-2b68-4816-8928-f1764febe5f2_buggy.java
+++ b/tmp/78aab6ad-71db-4633-b100-815d35c92fbb_fixed.java
@@ -1,24 +1,30 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        Node expr = maybeExpr.getFirstChild();
+        // Detect calls of the form: x.onchange()
+        if (expr != null && expr.isCall()) {
+          Node fn = expr.getFirstChild();
+          if (fn != null) {
+            // If the function is a property access
+            if (fn.isGetProp()) {
+              String propName = fn.getLastChild().getString();
+              if ("onchange".equals(propName)) {
+                return false; // don't fold this block
+              }
+            }
+          }
+        }
+        return true;
+      }
     }
   }
-
   return false;
 }
\ No newline at end of file
