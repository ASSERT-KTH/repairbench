diff --git a/tmp/f24363d7-e9ae-434c-98cc-571ce7a0185a_buggy.java b/tmp/e34c2611-0593-4544-be15-dd96ed3d2f15_fixed.java
index 19fd63e..44732f1 100644
--- a/tmp/f24363d7-e9ae-434c-98cc-571ce7a0185a_buggy.java
+++ b/tmp/e34c2611-0593-4544-be15-dd96ed3d2f15_fixed.java
@@ -1,24 +1,29 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+      if (NodeUtil.isExprCall(maybeExpr)) {
+        Node callTarget = maybeExpr.getFirstChild();
+
+        // Only worry about property accesses (methods)
+        if (callTarget.isGetProp()) {
+          String methodName = callTarget.getLastChild().getString();
+
+          // "onXXX" method names may behave weirdly in IE
+          if (methodName.startsWith("on")) {
+            return false;
+          }
+        }
+      }
 
       return NodeUtil.isExpressionNode(maybeExpr);
     }
   }
 
   return false;
 }
\ No newline at end of file
