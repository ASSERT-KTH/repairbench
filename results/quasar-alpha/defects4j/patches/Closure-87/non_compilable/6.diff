diff --git a/tmp/02a418e8-0dcc-4e94-a220-87224d3f4753_buggy.java b/tmp/554a36be-d222-44cc-8fab-a8a220d86ec5_fixed.java
index 19fd63e..223b57a 100644
--- a/tmp/02a418e8-0dcc-4e94-a220-87224d3f4753_buggy.java
+++ b/tmp/554a36be-d222-44cc-8fab-a8a220d86ec5_fixed.java
@@ -1,24 +1,30 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
-        Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
+    Node child = n.getFirstChild();
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
+    // Check if the single child is an EXPR_RESULT node
+    if (child.getType() == Token.EXPR_RESULT) {
+      Node expr = child.getFirstChild();
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Special case: do NOT fold when callee is ".onchange" property access
+      if (expr.isCall()) {
+        Node callee = expr.getFirstChild();
+        if (callee != null && callee.isGetProp()) {
+          Node prop = callee.getLastChild();
+          if (prop != null && prop.isString()
+              && "onchange".equals(prop.getString())) {
+            return false;
+          }
+        }
       }
     }
 
+    return NodeUtil.isExpressionNode(child);
+  }
+
   return false;
 }
\ No newline at end of file
