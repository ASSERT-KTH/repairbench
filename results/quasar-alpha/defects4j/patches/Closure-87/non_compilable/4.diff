diff --git a/tmp/fe0063f4-1664-43e8-bb92-b8fe7832ef8e_buggy.java b/tmp/dc2c530c-4e3e-482b-8f1e-e1484a04c5a4_fixed.java
index 19fd63e..f06d5f9 100644
--- a/tmp/fe0063f4-1664-43e8-bb92-b8fe7832ef8e_buggy.java
+++ b/tmp/dc2c530c-4e3e-482b-8f1e-e1484a04c5a4_fixed.java
@@ -1,24 +1,22 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {
     Node maybeExpr = n.getFirstChild();
-          // IE has a bug where event handlers behave differently when
-          // their return value is used vs. when their return value is in
-          // an EXPR_RESULT. It's pretty freaking weird. See:
-          // http://code.google.com/p/closure-compiler/issues/detail?id=291
-          // We try to detect this case, and not fold EXPR_RESULTs
-          // into other expressions.
-
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
+    if (NodeUtil.isExprCall(maybeExpr)) {
+      // See http://code.google.com/p/closure-compiler/issues/detail?id=291
+      Node callTarget = maybeExpr.getFirstChild();
+      if (callTarget.isGetProp()) {
+        String propName = callTarget.getLastChild().getString();
+        // Don't fold event handler calls like f.onclick()
+        if (propName.startsWith("on")) {
+          return false;
+        }
+      }
+    }
     return NodeUtil.isExpressionNode(maybeExpr);
   }
-    }
-
   return false;
 }
\ No newline at end of file
