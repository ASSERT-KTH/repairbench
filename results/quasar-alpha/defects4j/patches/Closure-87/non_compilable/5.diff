diff --git a/tmp/41d832d8-f69e-4133-b3a4-788775116a73_buggy.java b/tmp/159a8013-5bc5-4ecb-857a-a13b73c9f729_fixed.java
index 19fd63e..5df6c0a 100644
--- a/tmp/41d832d8-f69e-4133-b3a4-788775116a73_buggy.java
+++ b/tmp/159a8013-5bc5-4ecb-857a-a13b73c9f729_fixed.java
@@ -1,24 +1,39 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
   if (n.getType() == Token.BLOCK) {
     if (n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
-            // We only have to worry about methods with an implicit 'this'
-            // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      // Only fold if it is not a problematic handler call.
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        Node expr = maybeExpr.getFirstChild();
+        if (expr != null && expr.getType() == Token.CALL) {
+          Node callee = expr.getFirstChild();
+          if (callee != null) {
+            // Check if the callee is f.onchange or f['onchange']
+            if (callee.getType() == Token.GETPROP &&
+                "onchange".equals(callee.getLastChild().getString())) {
+              return false;
+            }
+            if (callee.getType() == Token.GETELEM &&
+                callee.getLastChild().isString() &&
+                "onchange".equals(callee.getLastChild().getString())) {
+              return false;
+            }
+          }
+        }
+        return true;
+      }
     }
   }
-
   return false;
 }
\ No newline at end of file
