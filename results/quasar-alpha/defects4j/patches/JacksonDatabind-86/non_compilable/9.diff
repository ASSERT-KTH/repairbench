diff --git a/tmp/11646c2d-29b8-4fe5-8e5e-2ecde1d198a2_buggy.java b/tmp/78172921-a466-4fc2-907d-fad7af83e38c_fixed.java
index e69de29..3ae6357 100644
--- a/tmp/11646c2d-29b8-4fe5-8e5e-2ecde1d198a2_buggy.java
+++ b/tmp/78172921-a466-4fc2-907d-fad7af83e38c_fixed.java
@@ -0,0 +1,47 @@
+@Override
+public JavaType constructType(Type type, TypeBindings context) {
+    // First, check if it's in cache
+    JavaType cached = _typeCache.get(type);
+    if (cached != null) {
+        return cached;
+    }
+
+    // Before resolving, create placeholder in case of recursive/reference types
+    if (type instanceof Class<?>) {
+        Class<?> raw = (Class<?>) type;
+        if (raw == Object.class) {
+            return _unknownType();
+        }
+    }
+
+    ResolvedRecursiveType recursiveType = new ResolvedRecursiveType(null, context);
+    // Put placeholder
+    _typeCache.put(type, recursiveType);
+
+    JavaType result;
+    try {
+        if (type instanceof Class<?>) {
+            result = _fromClass(null, (Class<?>) type, context);
+        } else if (type instanceof ParameterizedType) {
+            result = _fromParamType(context, (ParameterizedType) type);
+        } else if (type instanceof GenericArrayType) {
+            result = _fromArrayType(context, (GenericArrayType) type);
+        } else if (type instanceof TypeVariable<?>) {
+            result = _fromVariable(context, (TypeVariable<?>) type);
+        } else if (type instanceof WildcardType) {
+            result = _fromWildcard(context, (WildcardType) type);
+        } else {
+            throw new IllegalArgumentException("Unrecognized Type: " + type);
+        }
+    } finally {
+        // Replace placeholder with resolved JavaType instance even if failed with exception
+        _typeCache.put(type, recursiveType.getReferent() != null ? recursiveType.getReferent() : recursiveType);
+    }
+
+    if (recursiveType.getReferent() == null || recursiveType.getReferent() == recursiveType) {
+        recursiveType.setReference(result);
+        _typeCache.put(type, result);
+    }
+
+    return result;
+}
\ No newline at end of file
