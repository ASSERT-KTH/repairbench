diff --git a/tmp/d1338678-5611-4adc-b139-3c1b247cc3de_buggy.java b/tmp/11a2353b-52eb-4559-b4b7-7aba6ffbf904_fixed.java
index 72a422c..cd2c2f6 100644
--- a/tmp/d1338678-5611-4adc-b139-3c1b247cc3de_buggy.java
+++ b/tmp/11a2353b-52eb-4559-b4b7-7aba6ffbf904_fixed.java
@@ -1,51 +1,74 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    // Uses -1 to ensure there is something after the &
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) { // '&#' at end of input, nothing more
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        if (start >= seqEnd) { // '&#x' at end of input, nothing more
+            return 0;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // Now, scan for digit chars (hex or decimal), potentially until end of input
+        while (end < seqEnd) {
+            char ch = input.charAt(end);
+            if (ch == ';') {
+                break;
+            }
+            if (isHex) {
+                if (!((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {
+                    break; // non-hex digit terminates
+                }
+            } else {
+                if (!(ch >= '0' && ch <= '9')) {
+                    break; // non-digit terminates
+                }
+            }
             end++;
         }
 
+        if (end == start) {
+            // No numeric chars found
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Advance past consumed chars: "&#", optional 'x', digits, optional ';'
+        int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++;
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
