diff --git a/tmp/4d74cdbf-4d0d-41ed-95cb-a7012d052cc2_buggy.java b/tmp/7e670436-8b00-4f2b-8aeb-03b12c8c194a_fixed.java
index 72a422c..4a2a6e0 100644
--- a/tmp/4d74cdbf-4d0d-41ed-95cb-a7012d052cc2_buggy.java
+++ b/tmp/7e670436-8b00-4f2b-8aeb-03b12c8c194a_fixed.java
@@ -1,51 +1,77 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            return 0;  // nothing after the '&#'
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {  // nothing after the '&#x'
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Parse until we reach a semicolon, or end of input, or an invalid char
+        while (end < seqEnd) {
+            char c = input.charAt(end);
+            if (c == ';') {
+                break;
+            }
+            if (isHex) {
+                if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
+                    break;  // invalid hex digit
+                }
+            } else {
+                if (!(c >= '0' && c <= '9')) {
+                    break;  // invalid decimal digit
+                }
+            }
             end++;
         }
 
+        if (end == start) {  // no digits
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
+        // Calculate consumed chars:
+        // '&#' -> 2
+        // optional 'x' -> isHex ? 1 : 0
+        // digits -> (end - start)
+        // optional ';' -> (input.charAt(end) == ';' ? 1 : 0)
+        int consumed = 2 + (isHex ? 1 : 0) + (end - start);
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++;
+        }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
