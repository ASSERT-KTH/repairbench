diff --git a/tmp/880da8bb-7d08-4f39-9072-09c3c937fb1b_buggy.java b/tmp/56c62796-8a8d-4fcb-8a7f-485213931602_fixed.java
index 72a422c..a8aead8 100644
--- a/tmp/880da8bb-7d08-4f39-9072-09c3c937fb1b_buggy.java
+++ b/tmp/56c62796-8a8d-4fcb-8a7f-485213931602_fixed.java
@@ -1,51 +1,63 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    // Uses -1 to ensure there is something after the &
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            return 0; // nothing after &#
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                return 0; // nothing after &#x
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Scan until ';' or invalid character/end of input
+        while (end < seqEnd && (('0' <= input.charAt(end) && input.charAt(end) <= '9') ||
+                (isHex && (('a' <= input.charAt(end) && input.charAt(end) <= 'f') ||
+                           ('A' <= input.charAt(end) && input.charAt(end) <= 'F'))))) {
             end++;
         }
 
-            int entityValue;
+        // allow missing trailing ';', or have one
+        // if next char is ';', consume it, else don't
+        boolean semiColonPresent = end < seqEnd && input.charAt(end) == ';';
+        int entityEnd = semiColonPresent ? end : end; // stop at 'end' anyway
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            if (end == start) {
+                return 0; // no digits after &# or &#x
             }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
-
+            int entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
+        } catch (NumberFormatException nfe) {
+            return 0; // parse failed
+        }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // calculate consumed length
+        int consumed = 2; // "&" and "#"
+        consumed += (isHex ? 1 : 0); // x if hex
+        consumed += (end - start); // codepoint digits
+        if (semiColonPresent) {
+            consumed += 1; // semicolon
+        }
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
