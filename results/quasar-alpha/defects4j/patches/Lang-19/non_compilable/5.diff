diff --git a/tmp/bb67845b-06b8-422a-a00a-81681dbf740b_buggy.java b/tmp/2ccdb19a-c2e0-4db3-87c2-12ba1d480884_fixed.java
index 72a422c..fad1dbd 100644
--- a/tmp/bb67845b-06b8-422a-a00a-81681dbf740b_buggy.java
+++ b/tmp/2ccdb19a-c2e0-4db3-87c2-12ba1d480884_fixed.java
@@ -1,51 +1,71 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) { // Prevent IndexOutOfBoundsException
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        if(start >= seqEnd) { // No digits after '&#' or '&#x'
+            return 0;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // scan until non-digit or ';' or end of input
+        while (end < seqEnd) {
+            char c = input.charAt(end);
+            if (c == ';') {
+                break;
+            }
+            if (isHex ? !Character.digit(c, 16) >= 0 : !Character.isDigit(c)) {
+                break;
+            }
             end++;
         }
 
+        if (end == start) { // No valid digits found
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            String number = input.subSequence(start, end).toString();
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
+        int consumed = 2 + (end - start);
+        if (isHex) {
+            consumed++;
+        }
+        if (end < seqEnd && input.charAt(end) == ';') {
+            consumed++;
+        }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return consumed;
     }
     return 0;
 }
\ No newline at end of file
