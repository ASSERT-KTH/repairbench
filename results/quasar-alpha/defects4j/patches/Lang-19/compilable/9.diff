diff --git a/tmp/11f0e47a-6a2c-4163-ac15-63561bb40b2c_buggy.java b/tmp/a957b77d-1aa1-4664-93d2-37b9d30664af_fixed.java
index 72a422c..d13219c 100644
--- a/tmp/11f0e47a-6a2c-4163-ac15-63561bb40b2c_buggy.java
+++ b/tmp/a957b77d-1aa1-4664-93d2-37b9d30664af_fixed.java
@@ -1,51 +1,71 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            // nothing after '&#'
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                // nothing after '&#x'
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // find the end of the entity
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        boolean semicolonFound = (end < seqEnd) && (input.charAt(end) == ';');
+
+        // if no semicolon, adjust end back to last digit char
+        if (!semicolonFound) {
+            end = seqEnd;
+        }
+
+        String entity;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            entity = input.subSequence(start, end).toString();
+            if (entity.isEmpty()) {
                 return 0;
             }
+            int entityValue = Integer.parseInt(entity, isHex ? 16 : 10);
 
             if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
+            int consumed = end - index;
+            if (semicolonFound) {
+                consumed++; // account for semicolon
+            }
 
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return consumed;
+        } catch (NumberFormatException nfe) {
+            // invalid number, do not translate
+            return 0;
+        } catch (IndexOutOfBoundsException ioobe) {
+            // defensive: shouldn't happen, but treat as no translation
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
