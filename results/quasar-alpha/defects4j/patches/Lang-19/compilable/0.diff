diff --git a/tmp/8bc4e11a-6544-49a5-9bdc-0f69df0d5e13_buggy.java b/tmp/1cd980f6-c7c4-4a00-9a26-e35b7676a3c9_fixed.java
index 72a422c..4937359 100644
--- a/tmp/8bc4e11a-6544-49a5-9bdc-0f69df0d5e13_buggy.java
+++ b/tmp/1cd980f6-c7c4-4a00-9a26-e35b7676a3c9_fixed.java
@@ -1,51 +1,64 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    // Uses -1 instead of -2, as we only need to check index +1 safely
     if (input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if (start >= seqEnd) {
+            // Not enough chars after "&#", treat as normal text
+            return 0;
+        }
         boolean isHex = false;
 
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            if (start >= seqEnd) {
+                // nothing after the x
+                return 0;
+            }
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+
+        // scan until we find a ';' or hit the input limit
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        boolean semiNext = (end < seqEnd && input.charAt(end) == ';');
+
+        int numberEnd = semiNext ? end : end; // parse from start up to end
+
+        if (start == numberEnd) { // no content to parse
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+            String number = input.subSequence(start, numberEnd).toString();
+            if (number.isEmpty()) {
+                return 0;
             }
+            entityValue = Integer.parseInt(number, isHex ? 16 : 10);
         } catch (NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // compute number of characters consumed
+        return 2 + (numberEnd - (isHex ? start -1 : start)) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
