diff --git a/tmp/9017900b-f53c-4354-ada6-09223f07e7e8_buggy.java b/tmp/6f7b8287-72e4-40e7-831b-a1c9953edaa1_fixed.java
index 72a422c..c6320ed 100644
--- a/tmp/9017900b-f53c-4354-ada6-09223f07e7e8_buggy.java
+++ b/tmp/6f7b8287-72e4-40e7-831b-a1c9953edaa1_fixed.java
@@ -1,51 +1,67 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
+    // Uses -1 to ensure there is something after the '&' to check for '#'
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
+        if(start >= seqEnd) {
+            // Nothing after '&#'
+            return 0;
+        }
+
         boolean isHex = false;
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+        if (start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        if(start >= seqEnd) {
+            // Nothing after '&#' or '&#x'
+            return 0;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // scan until ';' or end of input
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        // if we found a semicolon, parse up to it
+        // if not, parse until end as unfinished entity
+        boolean semiColonFound = (end < seqEnd && input.charAt(end) == ';');
+
+        int parseEnd = semiColonFound ? end : end; // parse from start to end in both cases
+
+        String numberStr = input.subSequence(start, end).toString();
+        if(numberStr.isEmpty()){
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(numberStr, isHex ? 16 :10);
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // Not a valid number, so no translation
             return 0;
         }
 
         if (entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // skip '&#' -> 2
+        // + (possible 'x') -> (isHex ?1:0)
+        // + number length -> (end - start)
+        // + (semicolon, if found) -> (semiColonFound ?1:0)
+        return 2 + (isHex ?1:0) + (end - start) + (semiColonFound ?1:0);
     }
     return 0;
 }
\ No newline at end of file
