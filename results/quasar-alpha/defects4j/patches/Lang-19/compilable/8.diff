diff --git a/tmp/b585bed4-2bc9-472f-a4b5-4270f6c4fb49_buggy.java b/tmp/9de31891-2032-4486-b671-364c418c8bc5_fixed.java
index 72a422c..74eb04c 100644
--- a/tmp/b585bed4-2bc9-472f-a4b5-4270f6c4fb49_buggy.java
+++ b/tmp/9de31891-2032-4486-b671-364c418c8bc5_fixed.java
@@ -1,51 +1,66 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        if (start >= seqEnd) {
+            return 0; // nothing after '&#' or '&#x'
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        // Scan until semicolon or end of string
+        while (end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
+        boolean hasSemicolon = false;
+        if (end < seqEnd && input.charAt(end) == ';') {
+            hasSemicolon = true;
+        }
+
+        // if end==seqEnd, this means no semicolon (unfinished entity), process anyway
+        String entityContent = input.subSequence(start, end).toString();
+        if (entityContent.isEmpty()) {
+            return 0;
+        }
+
         int entityValue;
         try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
+            entityValue = Integer.parseInt(entityContent, isHex ? 16 : 10);
         } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            // invalid number
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        int consumedChars = end - index;
+        if (hasSemicolon) {
+            consumedChars +=1;
+        }
+        return consumedChars;
     }
     return 0;
 }
\ No newline at end of file
