diff --git a/tmp/9cd66db3-f1d7-484b-b274-c49140897965_buggy.java b/tmp/47169971-96bd-4e46-bda8-34938198e54b_fixed.java
index 210695a..00178d8 100644
--- a/tmp/9cd66db3-f1d7-484b-b274-c49140897965_buggy.java
+++ b/tmp/47169971-96bd-4e46-bda8-34938198e54b_fixed.java
@@ -1,32 +1,31 @@
-  /**
-   * Computes the subset of {@code this} and {@code that} types if inequality
-   * is observed. If a value {@code v1} of type {@code number} is not equal to a
-   * value {@code v2} of type {@code (undefined,number)}, we can infer that the
-   * type of {@code v1} is {@code number} and the type of {@code v2} is
-   * {@code number} as well.
-   *
-   * @return a pair containing the restricted type of {@code this} as the first
-   *         component and the restricted type of {@code that} as the second
-   *         element. The returned pair is never {@code null} even though its
-   *         components may be {@code null}
-   */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
-      case UNKNOWN:
       return new TypePair(this, that);
+
+    case UNKNOWN:
+      // If types are scalar and equal (e.g., both void), but equality is "unknown",
+      // then under inequality assumption, their restricted types is bottom (NO_TYPE)
+      JSType restrictedThis = this;
+      JSType restrictedThat = that;
+      // For example, (void, void)
+      if (this.isVoidType() && that.isVoidType()) {
+        restrictedThis = this.getNativeType(JSTypeNative.NO_TYPE);
+        restrictedThat = that.getNativeType(JSTypeNative.NO_TYPE);
+      }
+      return new TypePair(restrictedThis, restrictedThat);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
