diff --git a/tmp/84c94c43-5ea6-4faa-8fff-c186b4736a4b_buggy.java b/tmp/6221c119-ec1e-452d-b65e-5cc55c158085_fixed.java
index 57c40b2..d02650e 100644
--- a/tmp/84c94c43-5ea6-4faa-8fff-c186b4736a4b_buggy.java
+++ b/tmp/6221c119-ec1e-452d-b65e-5cc55c158085_fixed.java
@@ -1,27 +1,31 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
 private void visitGetProp(NodeTraversal t, Node n, Node parent) {
   // obj.prop or obj.method()
   // Lots of types can appear on the left, a call to a void function can
   // never be on the left. getPropertyType will decide what is acceptable
   // and what isn't.
   Node property = n.getLastChild();
   Node objNode = n.getFirstChild();
   JSType childType = getJSType(objNode);
 
   if (childType.isDict()) {
     report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+  }
+
+  boolean isAssignLhs = (n.getJSType() != null) && parent.isAssign();
+  boolean warnForMissingProperty = true;
+
+  // If it's the LHS of an assignment, we still want to check property access,
+  // e.g., to verify the property exists on the object (important for issue 810).
+  // However, we do not want to coerce null or undefined to an Object in this case;
+  // If null/undefined, report 'No properties' warning
+  if (!validator.expectNotNullOrUndefined(
+          t, n, childType, 
           "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+    // null or undefined: do not proceed with property access checking
+    ensureTyped(t, n);
+    return;
+  }
+
   checkPropertyAccess(childType, property.getString(), t, n);
-    }
   ensureTyped(t, n);
 }
\ No newline at end of file
