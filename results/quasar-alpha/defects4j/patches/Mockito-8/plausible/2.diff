diff --git a/tmp/29976b37-28bf-40fc-adda-a75daaedacd6_buggy.java b/tmp/9dc8c812-f727-4374-9a63-98a3324be569_fixed.java
index 42b58d0..5cdbdd9 100644
--- a/tmp/29976b37-28bf-40fc-adda-a75daaedacd6_buggy.java
+++ b/tmp/9dc8c812-f727-4374-9a63-98a3324be569_fixed.java
@@ -1,19 +1,27 @@
 protected void registerTypeVariablesOn(Type classType) {
     if (!(classType instanceof ParameterizedType)) {
         return;
     }
     ParameterizedType parameterizedType = (ParameterizedType) classType;
+
+    // Prevent infinite recursion on types where actual argument equals bound (e.g., self-referencing generic)
+    // Defensive: check already mapped types first
     TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
     Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
     for (int i = 0; i < actualTypeArguments.length; i++) {
         TypeVariable typeParameter = typeParameters[i];
         Type actualTypeArgument = actualTypeArguments[i];
 
+        // Avoid self-referential infinite map causing stack overflows
+        if (actualTypeArgument.equals(typeParameter)) {
+            // do not put mapping from Var -> itself
+            continue;
+        }
+
         if (actualTypeArgument instanceof WildcardType) {
             contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
         } else {
             contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
         }
-            // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");
     }
 }
\ No newline at end of file
