diff --git a/tmp/fb1119d0-bd81-474f-8ae5-16d5bd39fde7_buggy.java b/tmp/1684e6e5-d8a3-468f-8cc4-3dcda0e67945_fixed.java
index 42c5923..e0c50a4 100644
--- a/tmp/fb1119d0-bd81-474f-8ae5-16d5bd39fde7_buggy.java
+++ b/tmp/1684e6e5-d8a3-468f-8cc4-3dcda0e67945_fixed.java
@@ -1,89 +1,84 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
 public Fraction parse(String source, ParsePosition pos) {
     // try to parse improper fraction
     Fraction ret = super.parse(source, pos);
     if (ret != null) {
         return ret;
     }
     
     int initialIndex = pos.getIndex();
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse whole
     Number whole = getWholeFormat().parse(source, pos);
     if (whole == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+        // set index back to initial, error index should already be set character examined.
         pos.setIndex(initialIndex);
         return null;
     }
 
+    int w = whole.intValue();
+
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
     
     // parse numerator
+    int numeratorStartIndex = pos.getIndex();
     Number num = getNumeratorFormat().parse(source, pos);
     if (num == null) {
         // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs should be leading, invalid expression
+    int n = num.intValue();
+    // Check for invalid minus sign in numerator
+    if ((n < 0 && w >= 0) || (n > 0 && w < 0)) {
+        // minus signs should only be leading, invalid
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(numeratorStartIndex);
+        return null;
+    }
 
     // parse '/'
-        int startIndex = pos.getIndex();
+    int slashIndex = pos.getIndex();
     char c = parseNextCharacter(source, pos);
     switch (c) {
     case 0 :
-            // no '/'
-            // return num as a fraction
+        // no '/', treat as whole number
         return new Fraction(num.intValue(), 1);
     case '/' :
         // found '/', continue parsing denominator
         break;
     default :
         // invalid '/'
-            // set index back to initial, error index should be the last
-            // character examined.
         pos.setIndex(initialIndex);
-            pos.setErrorIndex(startIndex);
+        pos.setErrorIndex(slashIndex);
         return null;
     }
 
     // parse whitespace
     parseAndIgnoreWhitespace(source, pos);
 
     // parse denominator
+    int denominatorStartIndex = pos.getIndex();
     Number den = getDenominatorFormat().parse(source, pos);
     if (den == null) {
-            // invalid integer number
-            // set index back to initial, error index should already be set
-            // character examined.
+        // invalid denominator
         pos.setIndex(initialIndex);
         return null;
     }
-        
-            // minus signs must be leading, invalid
-
-        int w = whole.intValue();
-        int n = num.intValue();
     int d = den.intValue();
-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
+    // Denominator must be positive, no minus signs allowed except leading sign of whole part
+    if ((d < 0 && w >= 0) || (d > 0 && w < 0)) {
+        pos.setIndex(initialIndex);
+        pos.setErrorIndex(denominatorStartIndex);
+        return null;
+    }
+    d = Math.abs(d);
+
+    int resultNumerator = (Math.abs(w) * d) + Math.abs(n);
+    int sign = MathUtils.sign(w);
+    return new Fraction(resultNumerator * sign, d);
 }
\ No newline at end of file
