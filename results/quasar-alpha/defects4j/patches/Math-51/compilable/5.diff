diff --git a/tmp/850afaf8-5366-45f0-82ea-c6d9f264d2fc_buggy.java b/tmp/89fa256f-7775-47f8-a2da-0bc2ac08926a_fixed.java
index 6b09955..07da5f4 100644
--- a/tmp/850afaf8-5366-45f0-82ea-c6d9f264d2fc_buggy.java
+++ b/tmp/89fa256f-7775-47f8-a2da-0bc2ac08926a_fixed.java
@@ -1,121 +1,139 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Keep track of inverted intervals
     boolean inverted = false;
+    double prevF0 = f0;
+    double prevF1 = f1;
 
     // Keep finding better approximations.
     while (true) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
         // Update the bounds with the new approximation.
         if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
             x0 = x1;
             f0 = f1;
             inverted = !inverted;
         } else {
             switch (method) {
                 case ILLINOIS:
                     f0 *= 0.5;
                     break;
                 case PEGASUS:
                     f0 *= f1 / (f1 + fx);
                     break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                 default:
                     // Should never happen.
             }
         }
-            // Update from [x0, x1] to [x0, x].
+
+        // Update previous values before assignment
+        prevF0 = f0;
+        prevF1 = f1;
+
         x1 = x;
         f1 = fx;
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // Fix for issue similar to MATH-631: If f1 and f0 have the same sign or close magnitudes for many iterations,
+        // the update can stagnate. To prevent no progress, reset f0 if necessary.
+        if (Math.abs(f1) > Math.abs(prevF1) && Math.abs(f1) < 1e-4) {
+            f0 = computeObjectiveValue(x0);
+        }
+
+        // Termination due to function value accuracy.
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // Termination due to interval width.
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+            switch (allowed) {
+                case ANY_SIDE:
+                    return x1;
+                case LEFT_SIDE:
+                    return inverted ? x1 : x0;
+                case RIGHT_SIDE:
+                    return inverted ? x0 : x1;
+                case BELOW_SIDE:
+                    return (f1 <= 0) ? x1 : x0;
+                case ABOVE_SIDE:
+                    return (f1 >= 0) ? x1 : x0;
+                default:
+                    throw new MathInternalError();
+            }
+        }
+
+        // Additional safeguard: If stagnation is detected (x1 does not change significantly), break.
+        if (FastMath.abs(fx - f1) < 1e-15) {
+            // Can't make further progress, return the best estimate depending on allowed solutions.
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
