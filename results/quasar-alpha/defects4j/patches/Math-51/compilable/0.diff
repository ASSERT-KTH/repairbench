diff --git a/tmp/27005227-d5d0-43d2-8fb1-35c426f25ef8_buggy.java b/tmp/8b4f2a0e-1aef-4bf8-a578-d7a9ee1bbf36_fixed.java
index 6b09955..0243ebc 100644
--- a/tmp/27005227-d5d0-43d2-8fb1-35c426f25ef8_buggy.java
+++ b/tmp/8b4f2a0e-1aef-4bf8-a578-d7a9ee1bbf36_fixed.java
@@ -1,121 +1,138 @@
 /** {@inheritDoc} */
 protected final double doSolve() {
     // Get initial solution
     double x0 = getMin();
     double x1 = getMax();
     double f0 = computeObjectiveValue(x0);
     double f1 = computeObjectiveValue(x1);
 
-        // If one of the bounds is the exact root, return it. Since these are
-        // not under-approximations or over-approximations, we can return them
-        // regardless of the allowed solutions.
+    // If one of the bounds is the exact root, return it.
     if (f0 == 0.0) {
         return x0;
     }
     if (f1 == 0.0) {
         return x1;
     }
 
     // Verify bracketing of initial solution.
     verifyBracketing(x0, x1);
 
     // Get accuracies.
     final double ftol = getFunctionValueAccuracy();
     final double atol = getAbsoluteAccuracy();
     final double rtol = getRelativeAccuracy();
 
-        // Keep track of inverted intervals, meaning that the left bound is
-        // larger than the right bound.
+    // Keep track of inverted intervals.
     boolean inverted = false;
 
-        // Keep finding better approximations.
+    // Initialize last computed values (to detect possible stagnation)
+    double previousX = Double.NaN;
+    double previousF = Double.NaN;
+
     while (true) {
         // Calculate the next approximation.
         final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
         final double fx = computeObjectiveValue(x);
 
-            // If the new approximation is the exact root, return it. Since
-            // this is not an under-approximation or an over-approximation,
-            // we can return it regardless of the allowed solutions.
+        // If the new approximation is the exact root, return it.
         if (fx == 0.0) {
             return x;
         }
 
+        // Save current values
+        final double deltaX = FastMath.abs(x - x1);
+
+        // Check if function value or approximations are stagnating: fallback to bisection.
+        if (previousX == x || previousF == fx || deltaX < Math.ulp(x)) {
+            // Fallback to bisection
+            final double midpoint = 0.5 * (x0 + x1);
+            final double fMid = computeObjectiveValue(midpoint);
+            if (fMid == 0.0) {
+                return midpoint;
+            }
+            if (f0 * fMid < 0) {
+                x1 = midpoint;
+                f1 = fMid;
+            } else {
+                x0 = midpoint;
+                f0 = fMid;
+            }
+            inverted = false; // reset inversion flag on bisection
+            previousX = Double.NaN; // reset stagnation detection
+            previousF = Double.NaN;
+        } else {
+            // Update previously computed values
+            previousX = x;
+            previousF = fx;
+
             // Update the bounds with the new approximation.
             if (f1 * fx < 0) {
-                // The value of x1 has switched to the other bound, thus inverting
-                // the interval.
                 x0 = x1;
                 f0 = f1;
                 inverted = !inverted;
             } else {
                 switch (method) {
                     case ILLINOIS:
                         f0 *= 0.5;
                         break;
                     case PEGASUS:
                         f0 *= f1 / (f1 + fx);
                         break;
-                        // Update formula cannot make any progress: Update the
-                        // search interval.
                     default:
                         // Should never happen.
                 }
             }
             // Update from [x0, x1] to [x0, x].
             x1 = x;
             f1 = fx;
+        }
 
-            // If the function value of the last approximation is too small,
-            // given the function value accuracy, then we can't get closer to
-            // the root than we already are.
+        // If the function value is small enough, accept approximation
         if (FastMath.abs(f1) <= ftol) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     if (inverted) {
                         return x1;
                     }
                     break;
                 case RIGHT_SIDE:
                     if (!inverted) {
                         return x1;
                     }
                     break;
                 case BELOW_SIDE:
                     if (f1 <= 0) {
                         return x1;
                     }
                     break;
                 case ABOVE_SIDE:
                     if (f1 >= 0) {
                         return x1;
                     }
                     break;
                 default:
                     throw new MathInternalError();
             }
         }
 
-            // If the current interval is within the given accuracies, we
-            // are satisfied with the current approximation.
-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
-                                                     atol)) {
+        // If the current interval is small enough, stop
+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
             switch (allowed) {
                 case ANY_SIDE:
                     return x1;
                 case LEFT_SIDE:
                     return inverted ? x1 : x0;
                 case RIGHT_SIDE:
                     return inverted ? x0 : x1;
                 case BELOW_SIDE:
                     return (f1 <= 0) ? x1 : x0;
                 case ABOVE_SIDE:
                     return (f1 >= 0) ? x1 : x0;
                 default:
                     throw new MathInternalError();
             }
         }
     }
 }
\ No newline at end of file
