diff --git a/tmp/95becbb1-8906-4a86-97bd-dc5223d287c7_buggy.java b/tmp/8d92d6f2-1fb9-4f76-8ad8-128b6cfa029e_fixed.java
index 822447c..1c9295b 100644
--- a/tmp/95becbb1-8906-4a86-97bd-dc5223d287c7_buggy.java
+++ b/tmp/8d92d6f2-1fb9-4f76-8ad8-128b6cfa029e_fixed.java
@@ -1,37 +1,39 @@
-    /**
-     * <p>
-     * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
-     * passed.
-     * </p>
-     * 
-     * @param writer
-     *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
-     * @param str
-     *            The <code>String</code> to escape. Assumed to be a non-null value.
-     * @throws IOException
-     *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
-     *             methods.
-     * 
-     * @see #escape(String)
-     * @see Writer
-     */
 public void escape(Writer writer, String str) throws IOException {
     int len = str.length();
     for (int i = 0; i < len; i++) {
         char c = str.charAt(i);
         String entityName = this.entityName(c);
-            if (entityName == null) {
-                if (c > 0x7F) {
-                    writer.write("&#");
-                    writer.write(Integer.toString(c, 10));
-                    writer.write(';');
-                } else {
-                    writer.write(c);
-                }
-            } else {
+        if (entityName != null) {
             writer.write('&');
             writer.write(entityName);
             writer.write(';');
+            continue;
+        }
+
+        if (Character.isHighSurrogate(c) && i + 1 < len) {
+            char d = str.charAt(i + 1);
+            if (Character.isLowSurrogate(d)) {
+                int codePoint = Character.toCodePoint(c, d);
+                writer.write("&#");
+                writer.write(Integer.toString(codePoint, 10));
+                writer.write(';');
+                i++; // Skip the low surrogate
+                continue;
+            }
+        }
+
+        if (Character.isLowSurrogate(c)) {
+            // Unmatched low surrogate, just write as-is
+            writer.write(c);
+            continue;
+        }
+
+        if (c > 0x7F) {
+            writer.write("&#");
+            writer.write(Integer.toString(c, 10));
+            writer.write(';');
+        } else {
+            writer.write(c);
         }
     }
 }
\ No newline at end of file
