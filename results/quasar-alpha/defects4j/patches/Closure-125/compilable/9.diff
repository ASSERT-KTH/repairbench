diff --git a/tmp/04522260-dd72-47df-a61d-6046b6ac3010_buggy.java b/tmp/a3acf99a-cbfd-438f-8c73-a7150cfdf85b_fixed.java
index 7e43c1c..4a57c07 100644
--- a/tmp/04522260-dd72-47df-a61d-6046b6ac3010_buggy.java
+++ b/tmp/a3acf99a-cbfd-438f-8c73-a7150cfdf85b_fixed.java
@@ -1,19 +1,28 @@
 /**
  * Visits a NEW node.
  */
 private void visitNew(NodeTraversal t, Node n) {
   Node constructor = n.getFirstChild();
   JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+  FunctionType fnType = null;
+
   if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
+    fnType = type.toMaybeFunctionType();
+  }
+
+  if (fnType != null && fnType.isConstructor()) {
     visitParameterList(t, n, fnType);
     ensureTyped(t, n, fnType.getInstanceType());
-      } else {
+  } else if (fnType != null) {
+    // If fnType is not a constructor, report error
+    report(t, n, NOT_A_CONSTRUCTOR);
+    ensureTyped(t, n);
+  } else if (type.isEmptyType() || type.isUnknownType()) {
+    // Unknown or unresolved type, allow to pass through without error.
     ensureTyped(t, n);
-      }
   } else {
+    // Definite non-constructor type
     report(t, n, NOT_A_CONSTRUCTOR);
     ensureTyped(t, n);
   }
 }
\ No newline at end of file
