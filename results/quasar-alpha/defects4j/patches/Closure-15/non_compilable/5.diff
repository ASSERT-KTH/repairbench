diff --git a/tmp/a14d1570-1c7b-463f-8201-a39c426d23af_buggy.java b/tmp/40a496bc-e80b-4465-89b6-447975a91bf7_fixed.java
index b56897c..ccdbe18 100644
--- a/tmp/a14d1570-1c7b-463f-8201-a39c426d23af_buggy.java
+++ b/tmp/40a496bc-e80b-4465-89b6-447975a91bf7_fixed.java
@@ -1,27 +1,39 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
+  // where the function returns (possibly without a return statement)
   if (n == null) {
     return false;
   }
 
   // TODO(user): We only care about calls to functions that
   // passes one of the dependent variable to a non-side-effect free
   // function.
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Do not traverse into FOR-IN lhs, since lhs
+  // is evaluated once before the loop starts
+  if (n.isForIn()) {
+    // Skip first child (lhs)
+    Node obj = n.getSecondChild();
+    for (Node c = obj; c != null; c = c.getNext()) {
+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+        return true;
+      }
+    }
+    return false;
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
