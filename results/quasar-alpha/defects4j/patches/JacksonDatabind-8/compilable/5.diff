diff --git a/tmp/828917e1-abc3-49d5-bc88-62a3d66f3892_buggy.java b/tmp/68fbec89-3cc8-40f4-becd-6963d4e10585_fixed.java
index c9da1b7..f61a513 100644
--- a/tmp/828917e1-abc3-49d5-bc88-62a3d66f3892_buggy.java
+++ b/tmp/68fbec89-3cc8-40f4-becd-6963d4e10585_fixed.java
@@ -1,33 +1,43 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
+        // already had explicitly marked one?
+        boolean hadExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if (hadExplicit) {
+            if (!explicit) { // new one not explicit, ignore
+                return;
+            }
+            // both explicit, check duplicates
+        } else {
             if (!explicit) { 
-                    return;
+                // both implicit: ok to override
+                ;
+            } else {
+                // new one explicit, prefer it
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
 
-            // one more thing: ok to override in sub-class
+        // Check for real duplication/override; allow only if different concrete class
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            // Do not consider as conflict if constructors/factory methods are actually same "method"
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                // same underlying method/ctor; ignore by default, leave old in place
+                return;
+            }
+            // else: conflict: two different candidates of the same class type
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
+        // else: allow override (subclass/superclass difference)
     }
+
+    // if new one explicit, mark explicit
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
