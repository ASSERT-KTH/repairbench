diff --git a/tmp/69eba86a-d78a-45e4-8c6f-aff211a36757_buggy.java b/tmp/37cbd32a-4c2f-4061-8ed6-22952ca779b6_fixed.java
index c9da1b7..cbd9547 100644
--- a/tmp/69eba86a-d78a-45e4-8c6f-aff211a36757_buggy.java
+++ b/tmp/37cbd32a-4c2f-4061-8ed6-22952ca779b6_fixed.java
@@ -1,33 +1,42 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        boolean hadExplicit = (_explicitCreators & mask) != 0;
+        if (hadExplicit) {
+            if (!explicit) {
+                // already had explicit, new one isn't; ignore new one
+                return;
+            }
+            // both explicit: verify duplication
+        } else {
             if (!explicit) {
+                // both implicit, nothing to check further
+                // We'll just override below
+            } else {
+                // new one explicit, prefer new
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
         }
 
-            // one more thing: ok to override in sub-class
+        // At this point: either replacing explicit with explicit, or implicit with explicit (already replaced above)
+        // Avoid duplicate exception if equal
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            if (oldOne.getMember() != null && oldOne.getMember().equals(newOne.getMember())) {
+                // same underlying member, just ignore
+                return;
+            }
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
+
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
