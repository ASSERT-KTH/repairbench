diff --git a/tmp/25038d94-b06f-4fe8-8692-c0af145e0dcf_buggy.java b/tmp/eaf381be-9a93-4cf4-b266-ab54950152fc_fixed.java
index c9da1b7..0cf24e8 100644
--- a/tmp/25038d94-b06f-4fe8-8692-c0af145e0dcf_buggy.java
+++ b/tmp/eaf381be-9a93-4cf4-b266-ab54950152fc_fixed.java
@@ -1,33 +1,39 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
+        if ((_explicitCreators & mask) != 0) { // already had explicitly annotated
+            if (!explicit) { // new one is not explicit, keep old
+                return;
+            }
+            // both explicit, may need to fail
+        } else { // old one not explicit
+            if (!explicit) { // neither explicit, prefer first one
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // new one explicit, override old one
         }
 
-            // one more thing: ok to override in sub-class
+        // One more thing: ok to override based on class compatibility
+        // or fallback to specific rules, but in default case avoid throwing unnecessarily
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
-                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
-                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            // [databind#667]: handle multiple creators of the same kind
+            // Instead of always failing with ambiguous match, let's prefer explicit marker
+            if (explicit) {
+                // override old with new explicit one
+            } else {
+                // both not explicit, or old explicit + new implicit handled earlier
+                // should not reach here, but just in case, prefer old
+                return;
+            }
+        } else {
+            // Different subclasses, not a conflict, prefer new explicit or override implicit
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
