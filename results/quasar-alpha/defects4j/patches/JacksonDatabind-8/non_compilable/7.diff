diff --git a/tmp/f73475d2-c5c8-4db9-bdd0-cb7800a42636_buggy.java b/tmp/b0f54bcd-3ef9-498b-9693-a17ba21495ca_fixed.java
index c9da1b7..e220631 100644
--- a/tmp/f73475d2-c5c8-4db9-bdd0-cb7800a42636_buggy.java
+++ b/tmp/b0f54bcd-3ef9-498b-9693-a17ba21495ca_fixed.java
@@ -1,33 +1,40 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if ((_explicitCreators & mask) != 0) { // existing is explicit
             if (!explicit) {
+                return; // keep old explicit, ignore implicit new
+            }
+            // else: both explicit, verify...
+        } else {
+            if (!explicit) {
+                // both implicit: accept new & override old
+                _creators[typeIndex] = _fixAccess(newOne);
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // else: new explicit, override old implicit
         }
 
+        // At this point: either both explicit, or new explicit overriding
+
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
+            // If same raw class (constructors or methods), consider parameter classes
+            Class<?>[] oldParamTypes = oldOne.getParameterTypes();
+            Class<?>[] newParamTypes = newOne.getParameterTypes();
+            if (Arrays.equals(oldParamTypes, newParamTypes)) {
                 // [databind#667]: avoid one particular class of bogus problems
-
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
+            // else: different parameter types, may override
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
