diff --git a/tmp/fad1dab0-81c9-4dce-b57a-0522ab3d87c3_buggy.java b/tmp/5ec561eb-b545-4701-8ae0-eafb70164e3d_fixed.java
index c9da1b7..ca7ffe0 100644
--- a/tmp/fad1dab0-81c9-4dce-b57a-0522ab3d87c3_buggy.java
+++ b/tmp/5ec561eb-b545-4701-8ae0-eafb70164e3d_fixed.java
@@ -1,33 +1,39 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
+        if (oldExplicit) {
+            // already had explicitly annotated, leave as-is
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // both explicit: check for conflict
+        } else {
+            // old was implicit, if new is implicit, leave as-is
+            if (!explicit) {
+                return;
+            }
+            // new explicit should override old implicit
         }
 
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            // Avoid considering same class and same constructor as conflict
+            if (oldOne.getMember().equals(newOne.getMember())) {
+                // probably the same method or constructor, ignore
+                return;
+            }
+            // else, conflicting explicit creators -> error
             throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                     +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
