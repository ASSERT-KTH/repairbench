diff --git a/tmp/5b14c3fd-5695-46ef-b4ec-d7d964725fb4_buggy.java b/tmp/969e0b4f-d45b-4c69-8c1f-bb5140d36da5_fixed.java
index c9da1b7..8de336c 100644
--- a/tmp/5b14c3fd-5695-46ef-b4ec-d7d964725fb4_buggy.java
+++ b/tmp/969e0b4f-d45b-4c69-8c1f-bb5140d36da5_fixed.java
@@ -1,33 +1,34 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
     if (oldOne != null) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if (oldExplicit) {
             if (!explicit) {
+                // Already had explicit, ignore new implicit
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
-            // one more thing: ok to override in sub-class
+            // Both explicit
             if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                // If same kinds of creators, report conflict
                 throw new IllegalArgumentException("Conflicting " + TYPE_DESCS[typeIndex]
                         + " creators: already had explicitly marked " + oldOne + ", encountered " + newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
+            // Else, allow override (creator from subclass or other heuristics)
+        } else {
+            // No previous explicit
+            if (!explicit) {
+                // both implicit, leave existing in place
+                return;
+            }
+            // new explicit, precedence over old implicit --> replace
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
