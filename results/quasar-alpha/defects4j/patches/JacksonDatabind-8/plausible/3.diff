diff --git a/tmp/fec12ab6-9634-4e48-ab8e-48b922b66f35_buggy.java b/tmp/10ca7db3-86c4-43c4-8f35-0ac2ab8eff16_fixed.java
index c9da1b7..cc9bb84 100644
--- a/tmp/fec12ab6-9634-4e48-ab8e-48b922b66f35_buggy.java
+++ b/tmp/10ca7db3-86c4-43c4-8f35-0ac2ab8eff16_fixed.java
@@ -1,33 +1,54 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
-        // already had an explicitly marked one?
+    // already had one?
     if (oldOne != null) {
+        boolean oldExplicit = (_explicitCreators & mask) != 0;
 
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
+        if (oldExplicit) {
+            // already had explicitly annotated, leave as-is
             if (!explicit) {
                 return;
             }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+            // both explicit: verify conflict
+        } else {
+            // if new one not explicit, skip override, keep old one
+            if (!explicit) {
+                return;
+            }
+            // new is explicit, old is implicit: override
         }
 
-            // one more thing: ok to override in sub-class
+        // check for real conflict when both creators are explicit
+        // (or upgrading implicit -> explicit)
         if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+            Class<?> oldRawType = oldOne.getRawParameterType(0);
+            Class<?> newRawType = newOne.getRawParameterType(0);
+            if (oldRawType != newRawType) {
+                // prefer more specific type
+                if (newRawType.isAssignableFrom(oldRawType)) {
+                    // old param type is subtype: keep old
+                    return;
+                } else if (oldRawType.isAssignableFrom(newRawType)) {
+                    // new param type is subtype: override old
+                } else {
+                    // unrelated types: conflict
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+                }
+            } else {
+                // same parameter type (usual case): prefer existing for implicit, or report conflict if both explicit
+                if (oldExplicit && explicit) {
+                    throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
+                            +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+                }
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
