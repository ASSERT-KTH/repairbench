diff --git a/tmp/98f4f0b5-d8a1-494d-bdcf-3bac335017f9_buggy.java b/tmp/31fc1b10-0e09-4060-8203-3f9504a75520_fixed.java
index b98f0a7..ba430e6 100644
--- a/tmp/98f4f0b5-d8a1-494d-bdcf-3bac335017f9_buggy.java
+++ b/tmp/31fc1b10-0e09-4060-8203-3f9504a75520_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+  Node callTarget = constructor;
+  Node argNode = callTarget.getNext();
+  boolean updatedParameters = false;
+  while (argNode != null) {
+    scope = traverse(argNode, scope);
+    // Backward type inference from actual argument to formal parameter.
+    if (ct != null) {
+      JSType paramType = ct.getParameterType(argNode);
+      if (paramType != null && !paramType.isUnknownType()) {
+        updatedParameters = true;
+        // Update with the inferred argument type
+        argNode.getJSType()
+            .restrictByNotNullOrUndefined()
+            .inferPropertyTypesTo(argNode, paramType);
+      }
+    }
+    argNode = argNode.getNext();
   }
   return scope;
 }
\ No newline at end of file
