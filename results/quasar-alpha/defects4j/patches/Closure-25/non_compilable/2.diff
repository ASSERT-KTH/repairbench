diff --git a/tmp/6d5a74de-b25e-4b82-8552-bc041aebfd5c_buggy.java b/tmp/f408428a-ca0f-4b8d-9f31-091d3d5c1ce9_fixed.java
index b98f0a7..536ec1a 100644
--- a/tmp/6d5a74de-b25e-4b82-8552-bc041aebfd5c_buggy.java
+++ b/tmp/f408428a-ca0f-4b8d-9f31-091d3d5c1ce9_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
+
+  Node callTarget = constructor;
+  Node argNode = callTarget.getNext();
+  // Backwards type inference from the constructor call into the argument
+  if (ct != null && argNode != null) {
+    scope = updateBind(scope, ct.getCallType(), argNode);
+  }
+
+  // Traverse the argument nodes normally (for side effects etc.)
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
