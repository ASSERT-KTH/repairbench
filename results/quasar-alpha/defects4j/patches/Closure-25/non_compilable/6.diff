diff --git a/tmp/0ff51d33-fce4-4480-ae96-ae0b0ca5ad2a_buggy.java b/tmp/a6dfe761-541f-4060-bf5b-4a8614b05d2f_fixed.java
index b98f0a7..1e3e260 100644
--- a/tmp/0ff51d33-fce4-4480-ae96-ae0b0ca5ad2a_buggy.java
+++ b/tmp/a6dfe761-541f-4060-bf5b-4a8614b05d2f_fixed.java
@@ -1,29 +1,55 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+    Node callTarget = constructor;
+    Node argNode = callTarget.getNext();
+    // Traverse the arguments
+    int i = 0;
+    while (argNode != null) {
+      scope = traverse(argNode, scope);
+
+      if (ct != null && ct.getSource() != null) {
+        JSType paramType = ct.getTypeOfThis(); // default fallback
+        if (ct.getParameters() != null) {
+          Node paramNode = ct.getParameters().getFirstChild();
+          int j = 0;
+          while (paramNode != null && j < i) {
+            paramNode = paramNode.getNext();
+            j++;
+          }
+          if (paramNode != null) {
+            paramType = paramNode.getJSType();
+          }
+        }
+        if (paramType != null) {
+          backwardsInferenceFromCallSite(argNode, paramType);
+        }
+      }
+
+      argNode = argNode.getNext();
+      i++;
     }
     return scope;
   }
\ No newline at end of file
