diff --git a/tmp/9072c394-cfea-4a6f-b30b-26713d1c1a74_buggy.java b/tmp/7b18c574-ebaf-443b-b380-c9626b9023c3_fixed.java
index b98f0a7..9c76d7b 100644
--- a/tmp/9072c394-cfea-4a6f-b30b-26713d1c1a74_buggy.java
+++ b/tmp/7b18c574-ebaf-443b-b380-c9626b9023c3_fixed.java
@@ -1,29 +1,50 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
+
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
+
   n.setJSType(type);
+
+  // Traverse argument expressions
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
+
+  // Backwards-propagate expected argument types
+  if (ct != null && ct.isConstructor()) {
+    Iterator<Node> params = ct.getParameters() != null ? ct.getParameters().iterator() : null;
+    Node argNode = constructor.getNext();
+    while (argNode != null) {
+      JSType expectedType = null;
+      if (params != null && params.hasNext()) {
+        Node paramNode = params.next();
+        if (paramNode.getJSType() != null) {
+          expectedType = paramNode.getJSType();
+        }
+      }
+      if (expectedType != null) {
+        backwardInference(argNode, expectedType);
+      }
+      argNode = argNode.getNext();
+    }
+  }
+
   return scope;
 }
\ No newline at end of file
