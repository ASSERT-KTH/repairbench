diff --git a/tmp/022a391d-85ed-45cd-a97e-2efcce92ee11_buggy.java b/tmp/6e64aa70-dde3-4d64-a29c-1e08dd9b60fa_fixed.java
index b98f0a7..0939306 100644
--- a/tmp/022a391d-85ed-45cd-a97e-2efcce92ee11_buggy.java
+++ b/tmp/6e64aa70-dde3-4d64-a29c-1e08dd9b60fa_fixed.java
@@ -1,29 +1,36 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
+  FunctionType ct = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+      ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
       }
     }
   }
   n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+  // Traverse arguments and apply possible function argument type information.
+  Node argNode = constructor.getNext();
+  if (ct != null && argNode != null) {
+    scope = traverseFunctionArguments(argNode, scope, ct);
+  } else {
+    for (Node arg = argNode; arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
+  }
   return scope;
 }
\ No newline at end of file
