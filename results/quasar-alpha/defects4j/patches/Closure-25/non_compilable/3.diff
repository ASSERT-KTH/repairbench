diff --git a/tmp/a4760a50-6305-41b8-97ae-235d68c6d6ca_buggy.java b/tmp/14872a9d-c59a-49ee-9bd9-518b25d72386_fixed.java
index b98f0a7..453455b 100644
--- a/tmp/a4760a50-6305-41b8-97ae-235d68c6d6ca_buggy.java
+++ b/tmp/14872a9d-c59a-49ee-9bd9-518b25d72386_fixed.java
@@ -1,29 +1,42 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
   Node constructor = n.getFirstChild();
   scope = traverse(constructor, scope);
   JSType constructorType = constructor.getJSType();
   JSType type = null;
   if (constructorType != null) {
     constructorType = constructorType.restrictByNotNullOrUndefined();
     if (constructorType.isUnknownType()) {
       type = getNativeType(UNKNOWN_TYPE);
     } else {
       FunctionType ct = constructorType.toMaybeFunctionType();
       if (ct == null && constructorType instanceof FunctionType) {
         // If constructorType is a NoObjectType, then toMaybeFunctionType will
         // return null. But NoObjectType implements the FunctionType
         // interface, precisely because it can validly construct objects.
         ct = (FunctionType) constructorType;
       }
       if (ct != null && ct.isConstructor()) {
         type = ct.getInstanceType();
+
+        // Perform backward inference on arguments using the constructor's
+        // parameter information
+        Node argNode = constructor.getNext();
+        int i = 0;
+        for (; argNode != null; argNode = argNode.getNext(), i++) {
+          scope = traverse(argNode, scope);
+          JSType paramType = ct.getCallType().getFormalType(i);
+          if (paramType != null) {
+            reverseInference(argNode, paramType);
+          }
+        }
+        return scope;
       }
     }
   }
   n.setJSType(type);
   for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
     scope = traverse(arg, scope);
   }
   return scope;
 }
\ No newline at end of file
