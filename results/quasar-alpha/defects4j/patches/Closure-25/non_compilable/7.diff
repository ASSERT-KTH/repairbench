diff --git a/tmp/fef87a2a-be68-43ce-a4da-e27fac9ab6af_buggy.java b/tmp/c6ee219d-14b8-4376-8a55-468f168e72cb_fixed.java
index b98f0a7..ac4f778 100644
--- a/tmp/fef87a2a-be68-43ce-a4da-e27fac9ab6af_buggy.java
+++ b/tmp/c6ee219d-14b8-4376-8a55-468f168e72cb_fixed.java
@@ -1,29 +1,39 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+    FunctionType ct = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
-        FunctionType ct = constructorType.toMaybeFunctionType();
+        ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
-      scope = traverse(arg, scope);
+
+    Node callarg = constructor.getNext();
+    for (int i = 0; callarg != null; i++, callarg = callarg.getNext()) {
+      scope = traverse(callarg, scope);
+      if (ct != null) {
+        // Attempt backwards inference on the argument.
+        JSType paramType = ct.getFormalType(i);
+        if (paramType != null) {
+          // loosen to get optionality right
+          paramType = paramType.getGreatestSubtype(getNativeType(OBJECT_TYPE));
+          reverseInfer(callarg, paramType);
         }
+      }
+    }
+
     return scope;
 }
\ No newline at end of file
