diff --git a/tmp/21be440c-d50d-4cbc-9b23-6bbb481b2ae2_buggy.java b/tmp/faeb09b8-6fb8-4ee3-8a6e-9bcf93fc670c_fixed.java
index b98f0a7..1e032ad 100644
--- a/tmp/21be440c-d50d-4cbc-9b23-6bbb481b2ae2_buggy.java
+++ b/tmp/faeb09b8-6fb8-4ee3-8a6e-9bcf93fc670c_fixed.java
@@ -1,29 +1,53 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
-          // If constructorType is a NoObjectType, then toMaybeFunctionType will
-          // return null. But NoObjectType implements the FunctionType
-          // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Perform backwards inference on arguments
+                Node arg = constructor.getNext();
+                if (arg != null) {
+                    FunctionType callTarget = ct;
+                    Iterator<Node> paramIt = callTarget.getParameters().iterator();
+                    for (Node argNode = arg; argNode != null; argNode = argNode.getNext()) {
+                        scope = traverse(argNode, scope);
+                        if (paramIt.hasNext()) {
+                            Node paramNode = paramIt.next();
+                            JSType paramType = paramNode.getJSType();
+                            JSType argType = argNode.getJSType();
+                            if (paramType != null && argType != null) {
+                                JSType restricted = paramType.restrictByNotNullOrUndefined();
+                                if (!restricted.isUnknownType()) {
+                                    argNode.setJSType(restricted.getGreatestSubtype(argType));
                                 }
                             }
+                        } else {
+                            scope = traverse(argNode, scope);
                         }
+                    }
+                    // Skip the default argument traversal since already done
+                    return scope;
+                }
+            }
+        }
+    }
+
     n.setJSType(type);
+    // Fall-back argument traversal when no backward inference
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
