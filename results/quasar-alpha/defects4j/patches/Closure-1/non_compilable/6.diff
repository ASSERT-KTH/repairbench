diff --git a/tmp/b84b4fcd-5afd-49ae-bbf8-8e68c6f3fc32_buggy.java b/tmp/d19169d7-f0d3-40e2-805b-898cdd86cd94_fixed.java
index 61ffdbf..3d07a54 100644
--- a/tmp/b84b4fcd-5afd-49ae-bbf8-8e68c6f3fc32_buggy.java
+++ b/tmp/d19169d7-f0d3-40e2-805b-898cdd86cd94_fixed.java
@@ -1,44 +1,57 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
   Node argList = getFunctionArgList(function);
+
+  // ONLY remove unused params in ADVANCED mode,
+  // or if global variable removal is enabled.
+  boolean shouldRemoveUnusedFunctionArgs = compiler.getOptions().removeUnusedVariables
+      && (compiler.getOptions().removeGlobals || compiler.getOptions().isAdvancedMode());
+
+  // Modify caller sites only if enabled AND unused parameter removal is allowed.
   boolean modifyCallers = modifyCallSites
-        && callSiteOptimizer.canModifyCallers(function);
+      && callSiteOptimizer.canModifyCallers(function)
+      && shouldRemoveUnusedFunctionArgs;
+
   if (!modifyCallers) {
+    if (!shouldRemoveUnusedFunctionArgs) {
+      // leave all params intact in SIMPLE_OPTIMIZATIONS etc.
+      return;
+    }
     // Strip unreferenced args off the end of the function declaration.
     Node lastArg;
     while ((lastArg = argList.getLastChild()) != null) {
       Var var = fnScope.getVar(lastArg.getString());
       if (!referenced.contains(var)) {
         argList.removeChild(lastArg);
         compiler.reportCodeChange();
       } else {
         break;
       }
     }
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
