diff --git a/tmp/f16b2a44-d973-4975-90f6-f1086520871a_buggy.java b/tmp/6fbc3049-be34-4242-80f4-15a541470d44_fixed.java
index 61ffdbf..26fa091 100644
--- a/tmp/f16b2a44-d973-4975-90f6-f1086520871a_buggy.java
+++ b/tmp/6fbc3049-be34-4242-80f4-15a541470d44_fixed.java
@@ -1,44 +1,50 @@
 /**
  * Removes unreferenced arguments from a function declaration and when
  * possible the function's callSites.
  *
  * @param fnScope The scope inside the function
  */
 private void removeUnreferencedFunctionArgs(Scope fnScope) {
   // Notice that removing unreferenced function args breaks
   // Function.prototype.length. In advanced mode, we don't really care
   // about this: we consider "length" the equivalent of reflecting on
   // the function's lexical source.
   //
   // Rather than create a new option for this, we assume that if the user
   // is removing globals, then it's OK to remove unused function args.
   //
   // See http://code.google.com/p/closure-compiler/issues/detail?id=253
 
   Node function = fnScope.getRootNode();
 
   Preconditions.checkState(function.isFunction());
   if (NodeUtil.isGetOrSetKey(function.getParent())) {
     // The parameters object literal setters can not be removed.
     return;
   }
 
+  // Only remove parameters from function declarations when we are aggressively removing unused vars
+  boolean canModifyParams = removeGlobals;
   Node argList = getFunctionArgList(function);
   boolean modifyCallers = modifyCallSites
       && callSiteOptimizer.canModifyCallers(function);
+
   if (!modifyCallers) {
+    if (canModifyParams) {
       // Strip unreferenced args off the end of the function declaration.
       Node lastArg;
       while ((lastArg = argList.getLastChild()) != null) {
         Var var = fnScope.getVar(lastArg.getString());
         if (!referenced.contains(var)) {
           argList.removeChild(lastArg);
           compiler.reportCodeChange();
         } else {
           break;
         }
       }
+    }
+    // else do not change the arg list in simple mode or when conservative
   } else {
     callSiteOptimizer.optimize(fnScope, referenced);
   }
 }
\ No newline at end of file
