diff --git a/tmp/77d62f34-0c65-4530-b630-3f71ba58f2b1_buggy.java b/tmp/31e534de-e7da-4aed-87ba-5d8e8347988b_fixed.java
index d4e6d48..6d672ac 100644
--- a/tmp/77d62f34-0c65-4530-b630-3f71ba58f2b1_buggy.java
+++ b/tmp/31e534de-e7da-4aed-87ba-5d8e8347988b_fixed.java
@@ -1,23 +1,27 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
+    Node arg1 = callTarget.getNext();
+    Node arg2 = (arg1 != null) ? arg1.getNext() : null;
+    // Only fold if exactly 1 argument
+    if (arg1 != null && arg2 == null) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+      if (arg1.isImmutableValue()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            arg1.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
