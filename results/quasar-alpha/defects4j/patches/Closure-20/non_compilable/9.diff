diff --git a/tmp/81326289-d677-436a-a911-e0ad50359f54_buggy.java b/tmp/19910744-d429-483f-a2f9-98333add45f1_fixed.java
index d4e6d48..c5d043c 100644
--- a/tmp/81326289-d677-436a-a911-e0ad50359f54_buggy.java
+++ b/tmp/19910744-d429-483f-a2f9-98333add45f1_fixed.java
@@ -1,23 +1,19 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
     Node value = callTarget.getNext();
-      if (value != null) {
+    Node secondArg = (value != null) ? value.getNext() : null;
+    // Only fold calls with exactly one argument
+    if (value != null && secondArg == null && (value.isLiteralValue() || value.isImmutable())) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
           value.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
