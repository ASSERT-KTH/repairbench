diff --git a/tmp/c4bf87bf-b9a0-43fa-9020-1f54391e9792_buggy.java b/tmp/ece41913-f53a-4135-956f-b951f1426dee_fixed.java
index d4e6d48..ea72db4 100644
--- a/tmp/c4bf87bf-b9a0-43fa-9020-1f54391e9792_buggy.java
+++ b/tmp/ece41913-f53a-4135-956f-b951f1426dee_fixed.java
@@ -1,23 +1,26 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
     // Fold String(a) to '' + (a) on immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
     // slightly different semantics than '' + (a). See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    Node firstArg = callTarget.getNext();
+    Node secondArg = (firstArg != null) ? firstArg.getNext() : null;
+    if (firstArg != null && secondArg == null &&
+        (firstArg.isNumber() || firstArg.isString() || firstArg.isTrue() ||
+         firstArg.isFalse() || firstArg.isNull())) {
       Node addition = IR.add(
           IR.string("").srcref(callTarget),
-            value.detachFromParent());
+          firstArg.detachFromParent());
       n.getParent().replaceChild(n, addition);
       reportCodeChange();
       return addition;
     }
   }
   return n;
 }
\ No newline at end of file
