diff --git a/tmp/7ed16d42-b5d6-4d91-971f-dc14f4a3ebee_buggy.java b/tmp/f611074d-eb26-4126-8b07-89c656c77cc1_fixed.java
index d4e6d48..ef8d74b 100644
--- a/tmp/7ed16d42-b5d6-4d91-971f-dc14f4a3ebee_buggy.java
+++ b/tmp/f611074d-eb26-4126-8b07-89c656c77cc1_fixed.java
@@ -1,23 +1,24 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    Node firstArg = callTarget.getNext();
+    Node secondArg = firstArg != null ? firstArg.getNext() : null;
+
+    // Fold String(a) to '' + (a) only if there's exactly one argument.
+    if (firstArg != null && secondArg == null) {
+      // Make sure the argument is an immutable literal
+      // (number, string, boolean, null, or undefined)
+      if (NodeUtil.isImmutableValue(firstArg)) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            firstArg.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
