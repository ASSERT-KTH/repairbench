diff --git a/tmp/ce59dd78-1976-4861-a93d-011eee529e70_buggy.java b/tmp/49d7743b-5ea6-400e-8f30-1dbba9237ab0_fixed.java
index d4e6d48..89a89f1 100644
--- a/tmp/ce59dd78-1976-4861-a93d-011eee529e70_buggy.java
+++ b/tmp/49d7743b-5ea6-400e-8f30-1dbba9237ab0_fixed.java
@@ -1,23 +1,26 @@
 private Node tryFoldSimpleFunctionCall(Node n) {
   Preconditions.checkState(n.isCall());
   Node callTarget = n.getFirstChild();
   if (callTarget != null && callTarget.isName() &&
         callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
+    // Fold String(a) to '' + (a) on simple immutable literals,
     // which allows further optimizations
     //
     // We can't do this in the general case, because String(a) has
     // slightly different semantics than '' + (a). See
     // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+    Node arg = callTarget.getNext();
+    if (arg != null && arg.getNext() == null) { // only one argument
+      // only fold simple primitives (numbers and strings)
+      if (arg.isNumber() || arg.isString()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
-            value.detachFromParent());
+            arg.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
       }
     }
+  }
   return n;
 }
\ No newline at end of file
