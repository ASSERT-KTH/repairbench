diff --git a/tmp/7af3c9dd-6039-4700-8b1b-9497b954b60b_buggy.java b/tmp/10bfb582-c540-4204-9cc7-989e96423e28_fixed.java
index 85e6a42..e3cb779 100644
--- a/tmp/7af3c9dd-6039-4700-8b1b-9497b954b60b_buggy.java
+++ b/tmp/10bfb582-c540-4204-9cc7-989e96423e28_fixed.java
@@ -1,50 +1,64 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
-            }
+
+        // Save current position, skip filename to later read it back
+        long nameStartPos = archive.getFilePointer();
+        archive.skipBytes(fileNameLen);
+
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
+
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+
+            // Re-read the filename bytes
+            archive.seek(nameStartPos);
+            byte[] fileNameBytes = new byte[fileNameLen];
+            archive.readFully(fileNameBytes);
+
+            String fileName;
+            try {
+                fileName = ZipEncodingHelper.decode(fileNameBytes, "Cp437");
+            } catch (Exception ex) {
+                // fallback if decoding fails
+                fileName = orig;
+            }
+
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
+            // Overwrite with filename from local file header if available
+            ze.setName(fileName);
+
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
 }
\ No newline at end of file
