diff --git a/tmp/067eb640-b87f-43bf-8886-108eba5f2404_buggy.java b/tmp/0a2278a3-d324-4f4b-91dd-2ecad02ba19f_fixed.java
index 85e6a42..64bfd30 100644
--- a/tmp/067eb640-b87f-43bf-8886-108eba5f2404_buggy.java
+++ b/tmp/0a2278a3-d324-4f4b-91dd-2ecad02ba19f_fixed.java
@@ -1,50 +1,75 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
     for (ZipArchiveEntry ze : entries.keySet()) {
         OffsetEntry offsetEntry = entries.get(ze);
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
         int lenToSkip = fileNameLen;
         while (lenToSkip > 0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
         offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
             + SHORT + SHORT + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+
+            // Save previous extra fields before updating name/comment
+            Map<ZipShort, ZipExtraField> origExtraFields = ze.getExtraFields() != null
+                    ? new LinkedHashMap<>()
+                    : null;
+            if (origExtraFields != null) {
+                for (ZipExtraField f : ze.getExtraFields()) {
+                    origExtraFields.put(f.getHeaderId(), f);
+                }
+            }
+
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
+
             if (!orig.equals(ze.getName())) {
                 nameMap.remove(orig);
                 nameMap.put(ze.getName(), ze);
             }
+
+            // Restore local extra fields if they exist
+            if (origExtraFields != null) {
+                for (ZipExtraField f : ze.getExtraFields()) {
+                    ZipExtraField origField = origExtraFields.get(f.getHeaderId());
+                    if (origField != null && origField.getLocalFileDataData() != null) {
+                        f.parseFromLocalFileData(origField.getLocalFileDataData(), 0,
+                                                 origField.getLocalFileDataLength());
+                    }
+                }
+                // Re-save updated fields
+                ze.setExtra();
+            }
         }
     }
 }
\ No newline at end of file
