diff --git a/tmp/3736d619-8dca-44bd-975d-b6e9c63a40d7_buggy.java b/tmp/7fb7e0ef-3678-43f0-86b1-08d2f49c32c6_fixed.java
index 85e6a42..5709fba 100644
--- a/tmp/3736d619-8dca-44bd-975d-b6e9c63a40d7_buggy.java
+++ b/tmp/7fb7e0ef-3678-43f0-86b1-08d2f49c32c6_fixed.java
@@ -1,50 +1,59 @@
 /**
  * Walks through all recorded entries and adds the data available
  * from the local file header.
  *
  * <p>Also records the offsets for the data to read from the
  * entries.</p>
  */
 private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                         entriesWithoutUTF8Flag)
     throws IOException {
     // changing the name of a ZipArchiveEntry is going to change
     // the hashcode - see COMPRESS-164
     // Map needs to be reconstructed in order to keep central
     // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+    Map<ZipArchiveEntry, OffsetEntry> origEntries = new LinkedHashMap<>(entries);
+    entries.clear();
+    for (Map.Entry<ZipArchiveEntry, OffsetEntry> ent : origEntries.entrySet()) {
+        ZipArchiveEntry ze = ent.getKey();
+        OffsetEntry offsetEntry = ent.getValue();
+
         long offset = offsetEntry.headerOffset;
         archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
         byte[] b = new byte[SHORT];
         archive.readFully(b);
         int fileNameLen = ZipShort.getValue(b);
         archive.readFully(b);
         int extraFieldLen = ZipShort.getValue(b);
+
         int lenToSkip = fileNameLen;
         while (lenToSkip >0) {
             int skipped = archive.skipBytes(lenToSkip);
             if (skipped <= 0) {
                 throw new RuntimeException("failed to skip file name in"
                                            + " local file header");
             }
             lenToSkip -= skipped;
         }
+
         byte[] localExtraData = new byte[extraFieldLen];
         archive.readFully(localExtraData);
         ze.setExtra(localExtraData);
-            offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
-                + SHORT + SHORT + fileNameLen + extraFieldLen;
+        offsetEntry.dataOffset = offset
+            + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT
+            + fileNameLen + extraFieldLen;
 
         if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
+            String origName = ze.getName();
             NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
             ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                      nc.comment);
-                if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+            if (!origName.equals(ze.getName())) {
+                nameMap.remove(origName);
                 nameMap.put(ze.getName(), ze);
             }
         }
+        // Always add the current entry with possibly updated key
+        entries.put(ze, offsetEntry);
     }
 }
\ No newline at end of file
