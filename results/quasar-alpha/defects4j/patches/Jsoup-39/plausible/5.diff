diff --git a/tmp/40332a14-5736-4692-a6e7-acfc18c8c0da_buggy.java b/tmp/72c86c87-f42b-4d15-b7de-0b12bf5d16d9_fixed.java
index c4b260c..b8a6c17 100644
--- a/tmp/40332a14-5736-4692-a6e7-acfc18c8c0da_buggy.java
+++ b/tmp/72c86c87-f42b-4d15-b7de-0b12bf5d16d9_fixed.java
@@ -1,51 +1,68 @@
     // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        boolean bomRemoved = false; // track if BOM is removed
+
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+
+            // remove UTF-8 BOM indicator early, before parsing
+            if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                docData = docData.substring(1);
+                bomRemoved = true;
+            }
+
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
-                String foundCharset;
+                String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
-                } else {
+                } else if (meta.hasAttr("charset")) {
                     foundCharset = meta.attr("charset");
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                    if (!foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode
                         charsetName = foundCharset;
                         byteData.rewind();
                         docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+
+                        if (docData.length() > 0 && docData.charAt(0) == 65279) {
+                            docData = docData.substring(1);
+                            bomRemoved = true;
+                        }
+
+                        doc = null; // force parse again below
+                    }
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        // UTF-8 BOM indicator. takes precedence over everything else. rarely used. re-decodes incase above decoded incorrectly
+
             if (docData.length() > 0 && docData.charAt(0) == 65279) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
+                bomRemoved = true;
             }
+        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
+
         return doc;
     }
\ No newline at end of file
