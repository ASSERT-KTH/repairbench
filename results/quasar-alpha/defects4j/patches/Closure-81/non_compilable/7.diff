diff --git a/tmp/0e4c4c6d-29f7-4dbd-8d67-0b7dff25974a_buggy.java b/tmp/19c8975f-cb09-44d9-b783-ca7a5093649c_fixed.java
index 6e05e4b..b74c2a3 100644
--- a/tmp/0e4c4c6d-29f7-4dbd-8d67-0b7dff25974a_buggy.java
+++ b/tmp/19c8975f-cb09-44d9-b783-ca7a5093649c_fixed.java
@@ -1,51 +1,62 @@
 @Override
 Node processFunctionNode(FunctionNode functionNode) {
   Name name = functionNode.getFunctionName();
-      Boolean isUnnamedFunction = false;
+  boolean isUnnamedFunction = false;
   if (name == null) {
     name = new Name();
     name.setIdentifier("");
     isUnnamedFunction = true;
   }
+
+  // If this is a statement (not an expression) and the function is unnamed,
+  // that's a syntax error per ECMAScript
+  if (isUnnamedFunction && !functionNode.isFunctionExpression()) {
+    errorReporter.error("unnamed function statement",
+        sourceString,
+        functionNode.getLineno(),
+        "", // no line source available
+        0);
+  }
+
   Node node = newNode(Token.FUNCTION);
   Node newName = transform(name);
   if (isUnnamedFunction) {
     // Old Rhino tagged the empty name node with the line number of the
     // declaration.
     newName.setLineno(functionNode.getLineno());
     // TODO(bowdidge) Mark line number of paren correctly.
     // Same problem as below - the left paren might not be on the
     // same line as the function keyword.
     int lpColumn = functionNode.getAbsolutePosition() +
         functionNode.getLp();
     newName.setCharno(position2charno(lpColumn));
   }
 
   node.addChildToBack(newName);
   Node lp = newNode(Token.LP);
   // The left paren's complicated because it's not represented by an
   // AstNode, so there's nothing that has the actual line number that it
   // appeared on.  We know the paren has to appear on the same line as the
   // function name (or else a semicolon will be inserted.)  If there's no
   // function name, assume the paren was on the same line as the function.
   // TODO(bowdidge): Mark line number of paren correctly.
   Name fnName = functionNode.getFunctionName();
   if (fnName != null) {
     lp.setLineno(fnName.getLineno());
   } else {
     lp.setLineno(functionNode.getLineno());
   }
   int lparenCharno = functionNode.getLp() +
       functionNode.getAbsolutePosition();
 
   lp.setCharno(position2charno(lparenCharno));
   for (AstNode param : functionNode.getParams()) {
     lp.addChildToBack(transform(param));
   }
   node.addChildToBack(lp);
 
   Node bodyNode = transform(functionNode.getBody());
   parseDirectives(bodyNode);
   node.addChildToBack(bodyNode);
   return node;
 }
\ No newline at end of file
