diff --git a/tmp/ed724f1c-80a5-4195-9dfa-900c94aca944_buggy.java b/tmp/e88a3ab3-23af-4a0d-8ce2-50a7ec1b0b50_fixed.java
index 70ac98c..206b376 100644
--- a/tmp/ed724f1c-80a5-4195-9dfa-900c94aca944_buggy.java
+++ b/tmp/e88a3ab3-23af-4a0d-8ce2-50a7ec1b0b50_fixed.java
@@ -1,95 +1,81 @@
-    /**
-     * Create a fraction given the double value and either the maximum error
-     * allowed or the maximum number of denominator digits.
-     * <p>
-     *
-     * NOTE: This constructor is called with EITHER
-     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE
-     *     (that way the maxDenominator has no effect).
-     * OR
-     *   - a valid maxDenominator value and the epsilon value set to zero
-     *     (that way epsilon only has effect if there is an exact match before
-     *     the maxDenominator value is reached).
-     * </p><p>
-     *
-     * It has been done this way so that the same code can be (re)used for both
-     * scenarios. However this could be confusing to users if it were part of
-     * the public API and this constructor should therefore remain PRIVATE.
-     * </p>
-     *
-     * See JIRA issue ticket MATH-181 for more details:
-     *
-     *     https://issues.apache.org/jira/browse/MATH-181
-     *
-     * @param value the double value to convert to a fraction.
-     * @param epsilon maximum error allowed.  The resulting fraction is within
-     *        {@code epsilon} of {@code value}, in absolute terms.
-     * @param maxDenominator maximum denominator value allowed.
-     * @param maxIterations maximum number of convergents
-     * @throws FractionConversionException if the continued fraction failed to
-     *         converge.
-     */
 private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
     throws FractionConversionException
 {
     long overflow = Integer.MAX_VALUE;
     double r0 = value;
     long a0 = (long) FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+
+    // Check overflow on initial integer part
+    if ((a0 > overflow) || (a0 < -overflow)) {
+        throw new FractionConversionException(value, a0, 1L);
     }
 
-        // check for (almost) integer arguments, which should not go
-        // to iterations.
+    // handle approximate integers immediately
     if (FastMath.abs(a0 - value) < epsilon) {
+        if (a0 > overflow || a0 < -overflow) {
+            throw new FractionConversionException(value, a0, 1L);
+        }
         this.numerator = (int) a0;
         this.denominator = 1;
         return;
     }
 
     long p0 = 1;
     long q0 = 0;
     long p1 = a0;
     long q1 = 1;
 
     long p2 = 0;
     long q2 = 1;
 
     int n = 0;
     boolean stop = false;
     do {
         ++n;
         double r1 = 1.0 / (r0 - a0);
+
+        // check for division by zero, which can cause a1 to overflow
+        if (Double.isInfinite(r1)) {
+            break;
+        }
+
         long a1 = (long) FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
-                throw new FractionConversionException(value, p2, q2);
+
+        p2 = a1 * p1 + p0;
+        q2 = a1 * q1 + q0;
+
+        if ((p2 > overflow || q2 > overflow || p2 < -overflow || q2 < 0)) {
+            break; // cannot continue, we expect an overflow or denominator exceeding limits
         }
 
         double convergent = (double) p2 / (double) q2;
-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
+        if (n < maxIterations &&
+            FastMath.abs(convergent - value) > epsilon &&
+            q2 <= maxDenominator) {
             p0 = p1;
             p1 = p2;
             q0 = q1;
             q1 = q2;
             a0 = a1;
             r0 = r1;
         } else {
             stop = true;
         }
     } while (!stop);
 
     if (n >= maxIterations) {
         throw new FractionConversionException(value, maxIterations);
     }
 
-        if (q2 < maxDenominator) {
+    // Determine which of p1/q1 or p2/q2 is better, including overflow checks
+    if ((q2 <= maxDenominator) && (q2 > 0) && (p2 <= overflow) && (p2 >= -overflow)) {
         this.numerator = (int) p2;
         this.denominator = (int) q2;
-        } else {
+    } else if ((q1 <= maxDenominator) && (q1 > 0) && (p1 <= overflow) && (p1 >= -overflow)) {
         this.numerator = (int) p1;
         this.denominator = (int) q1;
+    } else {
+        // both denominators overflowed or invalid, throw exception
+        throw new FractionConversionException(value, p1, q1);
     }
-
 }
\ No newline at end of file
