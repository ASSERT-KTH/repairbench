diff --git a/tmp/05442382-ac32-456a-a3f4-0e73c3153d79_buggy.java b/tmp/9c6f6515-1182-4574-b7bd-81cb39caa0fe_fixed.java
index 90fe130..ecb58f2 100644
--- a/tmp/05442382-ac32-456a-a3f4-0e73c3153d79_buggy.java
+++ b/tmp/9c6f6515-1182-4574-b7bd-81cb39caa0fe_fixed.java
@@ -1,61 +1,84 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
-        char ch0 = str.charAt(0);
-        char ch1 = str.charAt(1);
-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
     if (len == 2) {
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         return new Locale(str, "");
-        } else {
-            if (str.charAt(2) != '_') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
+    } else if (len == 5) {
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        char ch2 = str.charAt(2);
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
+        if (ch2 != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
         return new Locale(str.substring(0, 2), str.substring(3, 5));
     } else {
-                if (str.charAt(5) != '_') {
+        // Must be at least length 7 to have language, country (or empty), and variant
+        if (len < 7) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+        char ch0 = str.charAt(0);
+        char ch1 = str.charAt(1);
+        char ch2 = str.charAt(2);
+
+        if (ch2 != '_') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
+        int countryStart = 3;
+        int countryEnd = str.indexOf('_', countryStart);
+        String language = str.substring(0, 2);
+        String country;
+        String variant;
+
+        if (countryEnd == -1) {
+            // no variant, so take the rest as country
+            country = str.substring(countryStart);
+            if (country.length() != 2) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            char c0 = country.charAt(0);
+            char c1 = country.charAt(1);
+            if (c0 < 'A' || c0 > 'Z' || c1 < 'A' || c1 > 'Z') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(language, country);
+        } else {
+            country = str.substring(countryStart, countryEnd);
+            variant = str.substring(countryEnd + 1);
+            if (country.length() == 0) {
+                country = "";
+            } else {
+                if (country.length() != 2) {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+                char c0 = country.charAt(0);
+                char c1 = country.charAt(1);
+                if (c0 < 'A' || c0 > 'Z' || c1 < 'A' || c1 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            }
+            if (variant.length() == 0) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(language, country, variant);
         }
     }
 }
\ No newline at end of file
