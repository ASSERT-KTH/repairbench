diff --git a/tmp/28c355ec-bcfe-4a5a-8846-f417e1041772_buggy.java b/tmp/60465089-832f-4597-ab32-02ff9937dc94_fixed.java
index 90fe130..3078c4e 100644
--- a/tmp/28c355ec-bcfe-4a5a-8846-f417e1041772_buggy.java
+++ b/tmp/60465089-832f-4597-ab32-02ff9937dc94_fixed.java
@@ -1,61 +1,60 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
+    if (len == 2) {
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
         return new Locale(str, "");
-        } else {
+    }
+    if (len < 5) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
+    String language = str.substring(0, 2);
+    if (language.charAt(0) < 'a' || language.charAt(0) > 'z' ||
+        language.charAt(1) < 'a' || language.charAt(1) > 'z') {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
+
+    if (len == 5) {
+        // language only / language + country
         char ch3 = str.charAt(3);
         char ch4 = str.charAt(4);
         if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+        return new Locale(language, str.substring(3, 5));
     } else {
-                if (str.charAt(5) != '_') {
+        // Could be language + country + variant OR language + variant (empty country)
+        if (str.charAt(3) == '_' && len >= 6) {
+            // language + _ + _ + variant => language + "" + variant
+            String variant = str.substring(4);
+            if (variant.length() == 0) {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+            return new Locale(language, "", variant);
+        } else if (len >= 7 && str.charAt(5) == '_') {
+            // language + country + _ + variant
+            String country = str.substring(3, 5);
+            char ch3 = country.charAt(0);
+            char ch4 = country.charAt(1);
+            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            String variant = str.substring(6);
+            if (variant.length() == 0) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(language, country, variant);
+        } else {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
         }
     }
 }
\ No newline at end of file
