diff --git a/tmp/b9da50c1-1dc2-4069-bc03-0e001dd96617_buggy.java b/tmp/a3dfb1b9-7197-436a-893a-d8a63147aa2d_fixed.java
index 90fe130..232398a 100644
--- a/tmp/b9da50c1-1dc2-4069-bc03-0e001dd96617_buggy.java
+++ b/tmp/a3dfb1b9-7197-436a-893a-d8a63147aa2d_fixed.java
@@ -1,61 +1,66 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
 public static Locale toLocale(String str) {
     if (str == null) {
         return null;
     }
     int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
-            throw new IllegalArgumentException("Invalid locale format: " + str);
-        }
+    if (len == 2) {
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-        if (len == 2) {
         return new Locale(str, "");
-        } else {
+    }
+    if (len < 5) {
+        throw new IllegalArgumentException("Invalid locale format: " + str);
+    }
     if (str.charAt(2) != '_') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+    String language = str.substring(0, 2);
+    if (language.charAt(0) < 'a' || language.charAt(0) > 'z' ||
+        language.charAt(1) < 'a' || language.charAt(1) > 'z') {
         throw new IllegalArgumentException("Invalid locale format: " + str);
     }
-            if (len == 5) {
-                return new Locale(str.substring(0, 2), str.substring(3, 5));
+    String rest = str.substring(3);
+    int restLen = rest.length();
+
+    // Only language with country? 
+    if (restLen == 2) {
+        // Verify country
+        char ch0 = rest.charAt(0);
+        char ch1 = rest.charAt(1);
+        if (ch0 >= 'A' && ch0 <= 'Z' && ch1 >= 'A' && ch1 <= 'Z') {
+            return new Locale(language, rest);
         } else {
-                if (str.charAt(5) != '_') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
     }
+
+    // language with country and/or variant
+    if (restLen==0) {
+        // falls through to possible language + _ + variant, like fr__POSIX
+        return new Locale(language, "");
     }
+    if (rest.charAt(0) == '_') {
+        String variant = rest.substring(1);
+        if (!variant.isEmpty()) {
+            return new Locale(language, "", variant);
+        } else {
+            return new Locale(language, "", "");
+        }
+    }
+    // else, check for country + variant (like en_GB_xxx)
+    if (restLen >= 3 && rest.charAt(2) == '_') {
+        String country = rest.substring(0,2);
+        char ch0 = country.charAt(0);
+        char ch1 = country.charAt(1);
+        if (ch0 >= 'A' && ch0 <= 'Z' && ch1 >= 'A' && ch1 <= 'Z') {
+            String variant = rest.substring(3);
+            return new Locale(language, country, variant);
+        } else {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+    }
+    throw new IllegalArgumentException("Invalid locale format: " + str);
 }
\ No newline at end of file
