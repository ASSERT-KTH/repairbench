diff --git a/tmp/7e9d1931-557e-45c2-b459-09d70bc9b98f_buggy.java b/tmp/a83145be-44fc-4109-8d52-7b0be3a9486c_fixed.java
index 46817a7..107b8dd 100644
--- a/tmp/7e9d1931-557e-45c2-b459-09d70bc9b98f_buggy.java
+++ b/tmp/a83145be-44fc-4109-8d52-7b0be3a9486c_fixed.java
@@ -1,16 +1,28 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType thatRecord = that.toMaybeRecordType();
+  // Calculate intersection of common properties with equivalent types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+    if (thatRecord.hasProperty(property) &&
+        thatRecord.getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
   }
-    return builder.build();
+  RecordType greatestSubtype = builder.build();
+  // If no common properties (empty record) return union
+  if (greatestSubtype.getProperties().isEmpty()) {
+    return registry.createUnionType(this, that);
+  } else if (greatestSubtype.isEquivalentTo(this)) {
+    return that;
+  } else if (greatestSubtype.isEquivalentTo(that)) {
+    return this;
+  } else {
+    return registry.createUnionType(this, that);
+  }
 }
\ No newline at end of file
