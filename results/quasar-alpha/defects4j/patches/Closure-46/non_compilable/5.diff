diff --git a/tmp/adf90ac2-c659-40d8-babc-07b823124902_buggy.java b/tmp/fe0fdb61-3505-4f43-aed0-f590c0f5abcd_fixed.java
index 46817a7..b7df2ff 100644
--- a/tmp/adf90ac2-c659-40d8-babc-07b823124902_buggy.java
+++ b/tmp/fe0fdb61-3505-4f43-aed0-f590c0f5abcd_fixed.java
@@ -1,16 +1,26 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType otherRecord = that.toMaybeRecordType();
+  // Compute the intersection of common properties with the same types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (otherRecord.hasProperty(property)) {
+      JSType thisPropType = getPropertyType(property);
+      JSType otherPropType = otherRecord.getPropertyType(property);
+      if (thisPropType.isEquivalentTo(otherPropType)) {
+        builder.addProperty(property, thisPropType, getPropertyNode(property));
       }
     }
-    return builder.build();
+  }
+  RecordType intersection = builder.build();
+  // If intersection is empty (no shared equivalent properties), least supertype is their union
+  if (intersection.getPropertiesCount() == 0) {
+    return registry.createUnionType(this, that);
+  }
+  // The least supertype is a record that has only the common equivalent properties
+  // plus in general, the union
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
