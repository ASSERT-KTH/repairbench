diff --git a/tmp/d12f1d95-b6d2-46a8-bc19-7f32afef3eb9_buggy.java b/tmp/bc185a91-5892-4413-ac41-c072de2732e2_fixed.java
index 46817a7..48164ed 100644
--- a/tmp/d12f1d95-b6d2-46a8-bc19-7f32afef3eb9_buggy.java
+++ b/tmp/bc185a91-5892-4413-ac41-c072de2732e2_fixed.java
@@ -1,16 +1,27 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  RecordType thatRecord = that.toMaybeRecordType();
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
+    if (thatRecord.hasProperty(property) &&
+        thatRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
     }
   }
-    return builder.build();
+
+  RecordType meet = builder.build();
+
+  if (meet.getPropertiesCount() == 0) {
+    // No common properties or no equivalent types, so the least supertype
+    // is just the union of the two record types.
+    return registry.createUnionType(this, thatRecord);
+  }
+
+  return meet;
 }
\ No newline at end of file
