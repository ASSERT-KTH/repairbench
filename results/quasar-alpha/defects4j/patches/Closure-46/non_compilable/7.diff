diff --git a/tmp/bbbf30b6-c600-4d40-a3ee-27b98098f319_buggy.java b/tmp/52464e0b-e2d2-412a-87e2-396a52450e70_fixed.java
index 46817a7..07164a9 100644
--- a/tmp/bbbf30b6-c600-4d40-a3ee-27b98098f319_buggy.java
+++ b/tmp/52464e0b-e2d2-412a-87e2-396a52450e70_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  RecordType otherRecord = that.toMaybeRecordType();
+  // Find common properties with equal types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+  for (String prop : properties.keySet()) {
+    if (otherRecord.hasProperty(prop)) {
+      JSType thisPropType = getPropertyType(prop);
+      JSType otherPropType = otherRecord.getPropertyType(prop);
+      if (thisPropType.isEquivalentTo(otherPropType)) {
+        builder.addProperty(prop, thisPropType, getPropertyNode(prop));
       }
     }
-    return builder.build();
+  }
+  RecordType commonSubRecord = builder.build();
+  if (commonSubRecord.getPropertiesCount() == 0) {
+    // no common properties with equal types -> union of the two records
+    return registry.createUnionType(this, that);
+  }
+
+  // The least supertype is a record common to both inputs, so the union type
+  // due to disjoint property names/types is safe here.
+  if (commonSubRecord.isEquivalentTo(this)) {
+    return that;
+  }
+  if (commonSubRecord.isEquivalentTo(that)) {
+    return this;
+  }
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
