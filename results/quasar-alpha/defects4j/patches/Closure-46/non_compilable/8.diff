diff --git a/tmp/75a318b3-6510-4d95-a4c0-96b6583342af_buggy.java b/tmp/9272500f-5015-49ee-a799-33374f97d420_fixed.java
index 46817a7..1ae4e3a 100644
--- a/tmp/75a318b3-6510-4d95-a4c0-96b6583342af_buggy.java
+++ b/tmp/9272500f-5015-49ee-a799-33374f97d420_fixed.java
@@ -1,16 +1,29 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType otherRecord = that.toMaybeRecordType();
+
+  // Collect common properties with equivalent types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (otherRecord.hasProperty(property) &&
+        otherRecord.getPropertyType(property).isEquivalentTo(getPropertyType(property))) {
+      builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
     }
   }
-    return builder.build();
+  RecordType commonRecord = builder.build();
+  if (commonRecord.getPropertiesCount() == 0) {
+    // No common properties with equivalent types, so return union.
+    return registry.createUnionType(this, that);
+  }
+  if (commonRecord.isEquivalentTo(this)) {
+    return that;
+  }
+  if (commonRecord.isEquivalentTo(that)) {
+    return this;
+  }
+  // Otherwise, return the union of input record types
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
