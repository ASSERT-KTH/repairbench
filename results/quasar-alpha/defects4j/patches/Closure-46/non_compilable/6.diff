diff --git a/tmp/b075e7e6-b393-46c0-8562-10e6d8ea9a8c_buggy.java b/tmp/97f03e1b-fa41-4fd1-bea3-f6909032c44d_fixed.java
index 46817a7..3847fd4 100644
--- a/tmp/b075e7e6-b393-46c0-8562-10e6d8ea9a8c_buggy.java
+++ b/tmp/97f03e1b-fa41-4fd1-bea3-f6909032c44d_fixed.java
@@ -1,16 +1,34 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+  RecordType otherRecord = that.toMaybeRecordType();
+
+  // compute common properties with equivalent types
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (otherRecord.hasProperty(property)) {
+      JSType thisPropType = getPropertyType(property);
+      JSType thatPropType = otherRecord.getPropertyType(property);
+      if (thisPropType.isEquivalentTo(thatPropType)) {
+        builder.addProperty(property, thisPropType, getPropertyNode(property));
       }
     }
-    return builder.build();
+  }
+  RecordType commonProps = builder.build();
+
+  // if the common part is exactly one of the records, return the other
+  if (this.isEquivalentTo(that)) {
+    return this;
+  }
+  if (commonProps.isEquivalentTo(this)) {
+    return that;
+  }
+  if (commonProps.isEquivalentTo(that)) {
+    return this;
+  }
+
+  // otherwise, return the union of the two records
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
