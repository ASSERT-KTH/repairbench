diff --git a/tmp/8bf80353-d99b-4398-abc5-98f93a30be27_buggy.java b/tmp/709135d5-040c-44fe-94a3-ddb9b4e4222c_fixed.java
index 46817a7..4897322 100644
--- a/tmp/8bf80353-d99b-4398-abc5-98f93a30be27_buggy.java
+++ b/tmp/709135d5-040c-44fe-94a3-ddb9b4e4222c_fixed.java
@@ -1,16 +1,35 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+  boolean changed = false;
+  RecordType thatRecord = that.toMaybeRecordType();
+
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
+    if (thatRecord.hasProperty(property) &&
+        thatRecord.getPropertyType(property).isEquivalentTo(
             getPropertyType(property))) {
       builder.addProperty(property, getPropertyType(property),
           getPropertyNode(property));
+    } else {
+      changed = true;
     }
   }
-    return builder.build();
+
+  for (String property : thatRecord.getPropertyMap().keySet()) {
+    if (!properties.containsKey(property)) {
+      changed = true;
+    }
+  }
+
+  if (!changed) {
+    // The two record types have exactly the same property set with
+    // equivalent property types.
+    return this;
+  }
+
+  // The least supertype of two distinct record types is simply their union.
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
