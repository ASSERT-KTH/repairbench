diff --git a/tmp/535b18e5-593d-413f-8e48-d912850b9b8f_buggy.java b/tmp/fed91d57-6bd8-41dd-83a8-92b32d4c93d6_fixed.java
index 46817a7..1ab7a03 100644
--- a/tmp/535b18e5-593d-413f-8e48-d912850b9b8f_buggy.java
+++ b/tmp/fed91d57-6bd8-41dd-83a8-92b32d4c93d6_fixed.java
@@ -1,16 +1,30 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+  // Compute intersection of common properties with same types
+  RecordTypeBuilder commonPropsBuilder = new RecordTypeBuilder(registry);
+  boolean hasCommonProperty = false;
+  RecordType thatRecord = that.toMaybeRecordType();
+
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (thatRecord.hasProperty(property)) {
+      JSType thisPropType = getPropertyType(property);
+      JSType thatPropType = thatRecord.getPropertyType(property);
+      if (thisPropType.isEquivalentTo(thatPropType)) {
+        commonPropsBuilder.addProperty(property, thisPropType, getPropertyNode(property));
+        hasCommonProperty = true;
       }
     }
-    return builder.build();
+  }
+
+  if (!hasCommonProperty) {
+    // No common properties => union of the record types
+    return registry.createUnionType(this, that);
+  }
+
+  JSType recordWithCommonProps = commonPropsBuilder.build();
+  return registry.createUnionType(this, that);
 }
\ No newline at end of file
