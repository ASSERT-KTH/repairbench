diff --git a/tmp/95109667-c331-408f-a6cd-37c21c12b4fb_buggy.java b/tmp/94043823-950e-4780-933b-0380c999b38e_fixed.java
index 21f64c6..fec2b59 100644
--- a/tmp/95109667-c331-408f-a6cd-37c21c12b4fb_buggy.java
+++ b/tmp/94043823-950e-4780-933b-0380c999b38e_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLength = seq.length();
+    outer:
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+        // scan to first instance of startChar
         if (startChar != input[offset])
             while (++offset < length && startChar != input[offset]);
+        if (offset >= length) // reached input end
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = offset + seqLength;
+        if (last > length) // candidate sequence would overrun input
+            break;
+        for (int j = 1; i < last; i++, j++) {
+            if (seq.charAt(j) != input[i])
+                continue outer;
+        }
+        // found full sequence
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
