diff --git a/tmp/d8297df4-3e09-49b8-bcae-a1040d09b4f3_buggy.java b/tmp/9f1c947c-df84-4624-9bf2-e23626ffe55f_fixed.java
index 21f64c6..fb52b3a 100644
--- a/tmp/d8297df4-3e09-49b8-bcae-a1040d09b4f3_buggy.java
+++ b/tmp/9f1c947c-df84-4624-9bf2-e23626ffe55f_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxOffset = length - seqLen + 1; // ensure the whole sequence can fit from offset
+    for (int offset = pos; offset < maxOffset; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset < maxOffset && startChar != input[offset]);
+        if (offset >= maxOffset)
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        int last = i + seqLen - 1;
+        int j = 1;
+        while (i < last && seq.charAt(j) == input[i]) {
+            i++;
+            j++;
+        }
         if (i == last) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
