diff --git a/tmp/c24c53dd-3f6d-48b4-95fd-7a707487ac47_buggy.java b/tmp/c5c42625-e1f3-4ec6-b2b6-25c49d3e124c_fixed.java
index 21f64c6..0115a64 100644
--- a/tmp/c24c53dd-3f6d-48b4-95fd-7a707487ac47_buggy.java
+++ b/tmp/c5c42625-e1f3-4ec6-b2b6-25c49d3e124c_fixed.java
@@ -1,23 +1,20 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
+    int seqLen = seq.length();
     for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+        // scan to first instance of startchar
         if (startChar != input[offset])
             while (++offset < length && startChar != input[offset]);
+        if (offset >= length)
+            break;
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        int last = offset + seqLen;
+        if (last > length) // avoid reading past input array
+            break;
+        int j = 1;
+        for (; i < last && seq.charAt(j) == input[i]; i++, j++);
         if (i == last) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
