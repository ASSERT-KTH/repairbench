diff --git a/tmp/84c466ee-8263-4a13-85bb-5ca4564a82a1_buggy.java b/tmp/a544da38-bc9e-48ee-8706-f7901f8fb257_fixed.java
index 21f64c6..43e1740 100644
--- a/tmp/84c466ee-8263-4a13-85bb-5ca4564a82a1_buggy.java
+++ b/tmp/a544da38-bc9e-48ee-8706-f7901f8fb257_fixed.java
@@ -1,23 +1,23 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+    int seqLength = seq.length();
+    int searchLimit = length - seqLength + 1;
+    for (int offset = pos; offset < searchLimit; offset++) {
+        // scan to first instance of startChar:
+        if (startChar != input[offset]) {
+            while (++offset < searchLimit && startChar != input[offset]);
+            if (offset >= searchLimit)
+                break;
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        for (; j < seqLength; i++, j++) {
+            if (input[i] != seq.charAt(j))
+                break;
+        }
+        if (j == seqLength) { // found full sequence
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
