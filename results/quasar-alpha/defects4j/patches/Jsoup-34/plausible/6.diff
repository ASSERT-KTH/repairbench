diff --git a/tmp/f5c67ce5-dd7c-47b2-9e22-6b0cee2959f2_buggy.java b/tmp/1258fadd-ed1d-4420-9ae0-2cd79afd6b9f_fixed.java
index 21f64c6..7defee7 100644
--- a/tmp/f5c67ce5-dd7c-47b2-9e22-6b0cee2959f2_buggy.java
+++ b/tmp/1258fadd-ed1d-4420-9ae0-2cd79afd6b9f_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int maxScan = length - seqLen + 1; // avoid overrunning array
+    outer:
+    for (int offset = pos; offset < maxScan; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
-            int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (startChar != input[offset]) {
+            while (++offset < maxScan && startChar != input[offset]);
+            if (offset >= maxScan)
+                break;
+        }
+        // check rest of seq matches:
+        for (int i = 1; i < seqLen; i++) {
+            if (seq.charAt(i) != input[offset + i])
+                continue outer;
+        }
         return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
