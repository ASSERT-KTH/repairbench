diff --git a/tmp/0ae02c5d-5fe6-4a34-8835-a9850159f56e_buggy.java b/tmp/1eaea624-8d0b-43c8-80ad-07c807116446_fixed.java
index 21f64c6..d6e6a89 100644
--- a/tmp/0ae02c5d-5fe6-4a34-8835-a9850159f56e_buggy.java
+++ b/tmp/1eaea624-8d0b-43c8-80ad-07c807116446_fixed.java
@@ -1,23 +1,30 @@
 /**
  * Returns the number of characters between the current position and the next instance of the input sequence
  *
  * @param seq scan target
  * @return offset between current position and next instance of target. -1 if not found.
  */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
+    int seqLen = seq.length();
+    int lastPossible = length - seqLen; // last offset where seq can fully fit
+    for (int offset = pos; offset <= lastPossible; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset <= lastPossible && startChar != input[offset]);
+        if (offset > lastPossible)
+            break;
+
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int j = 1;
+        int last = seqLen;
+        while (j < last && input[i] == seq.charAt(j)) {
+            i++;
+            j++;
+        }
+        if (j == seqLen) // found full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
