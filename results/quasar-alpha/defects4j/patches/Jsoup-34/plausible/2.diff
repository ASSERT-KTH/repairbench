diff --git a/tmp/adbb02e6-7572-46ae-9d2a-c297de759fb5_buggy.java b/tmp/c4ec0852-1904-418b-83e6-b85e31b6d694_fixed.java
index 21f64c6..a9789ed 100644
--- a/tmp/adbb02e6-7572-46ae-9d2a-c297de759fb5_buggy.java
+++ b/tmp/c4ec0852-1904-418b-83e6-b85e31b6d694_fixed.java
@@ -1,23 +1,21 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
-        for (int offset = pos; offset < length; offset++) {
-            // scan to first instance of startchar:
+    int seqLen = seq.length();
+    int maxScan = length - seqLen + 1;
+    for (int offset = pos; offset < maxScan; offset++) {
         if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+            while (++offset < maxScan && startChar != input[offset]);
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        int last = i + seqLen - 1;
+        if (offset < maxScan) {
+            int j = 1;
+            while (i < last && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
