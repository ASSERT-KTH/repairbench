diff --git a/tmp/0fdcac1c-50a7-4cb2-90b1-814186ad37c1_buggy.java b/tmp/6ec0e652-e6b7-422c-baed-078d66775d9a_fixed.java
index 4b7e1e4..37a67d2 100644
--- a/tmp/0fdcac1c-50a7-4cb2-90b1-814186ad37c1_buggy.java
+++ b/tmp/6ec0e652-e6b7-422c-baed-078d66775d9a_fixed.java
@@ -1,52 +1,85 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                foundLen = true;
+                break;
+            }
+            if (ch == '\n' || ch == '\r') {
+                // skip blank line or stray newline
+                foundLen = false;
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid length character '" + (char) ch + "' in PAX header");
+            }
+            len = len * 10 + (ch - '0');
+        }
+
+        if (ch == -1) { // EOF
+            break;
+        }
+
+        if (!foundLen) {
+            // skip this line and continue
+            continue;
+        }
+
+        if (len <= 0) {
+            // invalid length, skip this line
+            // read until newline
             while ((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+                if (ch == '\n') {
+                    break;
+                }
+            }
+            continue;
+        }
+
+        int bytesReadForThisRecord = read; // the 'len' characters include the length and the rest including \n
+        int remaining = len - bytesReadForThisRecord;
+        if (remaining <= 0) {
+            // Something went wrong, skip this entry
+            for (int skip = 0; skip < remaining * -1; skip++) {
+                // Defensive skip
+                if (i.read() == -1) {
+                    break;
+                }
+            }
+            continue;
+        }
+
+        final byte[] record = new byte[remaining];
+        int got = IOUtils.readFully(i, record);
+        if (got != remaining) {
+            throw new IOException("Failed to read Paxheader record. Expected " + remaining + " bytes, read " + got);
+        }
+
+        final String recordStr = new String(record, CharsetNames.UTF_8);
+        // Drop trailing newline if any
+        final String trimmedRecord = recordStr.endsWith("\n") ? recordStr.substring(0, recordStr.length() -1) : recordStr;
+
+        int equalsPos = trimmedRecord.indexOf('=');
+        if (equalsPos == -1) {
+            // Invalid record, skip
+            continue;
+        }
+        final String keyword = trimmedRecord.substring(0, equalsPos);
+        final String value = trimmedRecord.substring(equalsPos +1);
+        if (value.length() == 0) {
             headers.remove(keyword);
         } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
