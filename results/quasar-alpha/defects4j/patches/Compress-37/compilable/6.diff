diff --git a/tmp/5d2b5f95-b6de-4134-b712-005ad93128f0_buggy.java b/tmp/56f249d0-5ec0-45ca-9935-d6b4b8808099_fixed.java
index 4b7e1e4..c417a7a 100644
--- a/tmp/5d2b5f95-b6de-4134-b712-005ad93128f0_buggy.java
+++ b/tmp/56f249d0-5ec0-45ca-9935-d6b4b8808099_fixed.java
@@ -1,52 +1,74 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
-        while(true){ // get length
+    while(true){
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLen = false;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                foundLen = true;
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // Ignore illegal record or blank lines (e.g., blank lines in PAX header)
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                read = 0;
+                len = 0;
+                // Restart outer loop to process the next header if any
+                continue;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLen) {
+            break; // incomplete header, exit loop
+        }
+
+        // Now parse keyword
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            if (ch == '=') {
                 final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                 final int restLen = len - read;
+                if (restLen < 0) {
+                    // Ignore corrupt record
+                    // skip to the end of record
+                    int skip = 0;
+                    while (skip < len - (read - restLen)) {
+                        int skipped = i.read();
+                        if (skipped == -1) {
+                            break;
+                        }
+                        skip++;
+                    }
+                    break;
+                }
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+                        throw new IOException("Failed to read Paxheader. Expected "
+                                + restLen + " bytes, read " + got);
                     }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                    final String value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
