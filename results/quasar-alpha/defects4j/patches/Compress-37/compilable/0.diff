diff --git a/tmp/888d90d1-b765-45e7-b1d8-e89e8fd78cc2_buggy.java b/tmp/01d0774e-d941-4780-b576-da735f16f73e_fixed.java
index 4b7e1e4..e2898a8 100644
--- a/tmp/888d90d1-b765-45e7-b1d8-e89e8fd78cc2_buggy.java
+++ b/tmp/01d0774e-d941-4780-b576-da735f16f73e_fixed.java
@@ -1,52 +1,89 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
-                                final byte[] rest = new byte[restLen];
-                                final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
-                                headers.put(keyword, value);
-                            }
+                foundLength = true;
                 break;
             }
-                        coll.write((byte) ch);
+            if (ch < '0' || ch > '9') {
+                // Skip invalid header line before length
+                // Read up to next LF to discard bad line
+                while (ch != '\n' && ch != -1) {
+                    ch = i.read();
                 }
-                    break; // Processed single header
+                break;
             }
             len *= 10;
             len += ch - '0';
         }
         if (ch == -1) { // EOF
             break;
         }
+        if (!foundLength) {
+            continue; // invalid line, skip
+        }
+        if (len <= 0) {
+            // Skip zero-length or negative length entries (invalid but robust)
+            // Read up to newline to discard rest
+            int bytesSkipped = read; // already counted chars read so far
+            while (bytesSkipped < len) {
+                int skipped = (int) i.skip(len - bytesSkipped);
+                if (skipped <= 0) {
+                    break;
+                }
+                bytesSkipped += skipped;
+            }
+            continue;
+        }
+        final int entryLen = len - read;  // remaining bytes to read
+        if (entryLen < 1) {
+            // Defensive: malformed record (bad length), skip
+            int bytesSkipped = read;
+            while (bytesSkipped < len) {
+                int skipped = (int) i.skip(len - bytesSkipped);
+                if (skipped <= 0) {
+                    break;
+                }
+                bytesSkipped += skipped;
+            }
+            continue;
+        }
+        // Read entryLen bytes
+        final byte[] rest = new byte[entryLen];
+        final int got = IOUtils.readFully(i, rest);
+        if (got != entryLen) {
+            throw new IOException("Failed to read Paxheader. Expected " + entryLen + " bytes, read " + got);
+        }
+        // Drop trailing newline
+        int lenWithData = rest.length;
+        if (lenWithData > 0 && rest[lenWithData - 1] == '\n') {
+            lenWithData--;
+        }
+        if (lenWithData == 0) {
+            continue;  // skip empty lines
+        }
+        final String entry = new String(rest, 0, lenWithData, CharsetNames.UTF_8);
+        final int equalsIdx = entry.indexOf('=');
+        if (equalsIdx != -1) {
+            final String keyword = entry.substring(0, equalsIdx);
+            final String value = entry.substring(equalsIdx + 1);
+            if (value.length() == 0) {
+                headers.remove(keyword);
+            } else {
+                headers.put(keyword, value);
+            }
+        } else {
+            // malformed entry, skip
+        }
     }
     return headers;
 }
\ No newline at end of file
