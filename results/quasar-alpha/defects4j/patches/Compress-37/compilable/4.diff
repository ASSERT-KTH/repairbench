diff --git a/tmp/8af359e0-bb1e-4d7c-846e-6066a4439e13_buggy.java b/tmp/9b95cbe4-e2e2-456f-83c8-d5df773c9761_fixed.java
index 4b7e1e4..60183ad 100644
--- a/tmp/8af359e0-bb1e-4d7c-846e-6066a4439e13_buggy.java
+++ b/tmp/9b95cbe4-e2e2-456f-83c8-d5df773c9761_fixed.java
@@ -1,52 +1,88 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                foundLength = true;
+                break;
+            }
+            if (ch == '\n') {
+                // skip blank line (e.g., empty line, or invalid with only newline)
+                break;
+            }
+            if (ch < '0' || ch > '9') {
+                // invalid character in length, skip remainder of the line
+                while(ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLength) {
+            // blank or invalid line skipped
+            continue;
+        }
+        if (len <= 0) {
+            // invalid length, skip this record
+            continue;
+        }
+
+        // At this point, we've read to the space, and have a positive len length
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        int keywordLen = 0;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == '=') { // end of keyword
+                break;
+            }
+            coll.write((byte) ch);
+            keywordLen++;
+        }
+
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
         final int restLen = len - read;
+        if (restLen < 0) {
+            // Malformed header, skip this record
+            // Consume remaining bytes to resync
+            for(int skip = len - (read - 1); skip > 0; skip--){
+                if(i.read() == -1) break; 
+            }
+            continue;
+        }
+
         if (restLen == 1) { // only NL
             headers.remove(keyword);
+            // consume the trailing newline
+            i.read();
         } else {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
                 throw new IOException("Failed to read "
                                       + "Paxheader. Expected "
                                       + restLen
                                       + " bytes, read "
                                       + got);
             }
             // Drop trailing NL
             final String value = new String(rest, 0,
                                       restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
