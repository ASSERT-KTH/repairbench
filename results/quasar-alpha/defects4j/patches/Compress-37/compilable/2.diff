diff --git a/tmp/31dcba5c-b975-4bdb-b8e1-ef116a9a38ad_buggy.java b/tmp/2aa3f861-9a40-40e7-9d57-424b26722c70_fixed.java
index 4b7e1e4..e67c11c 100644
--- a/tmp/31dcba5c-b975-4bdb-b8e1-ef116a9a38ad_buggy.java
+++ b/tmp/2aa3f861-9a40-40e7-9d57-424b26722c70_fixed.java
@@ -1,52 +1,98 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
+                foundLength = true;
+                break; // length read finished
+            }
+            if (ch < '0' || ch > '9') {
+                // Invalid character while reading length, skip rest of line
+                do {
+                    ch = i.read();
+                    if (ch == -1) {
+                        break;
+                    }
+                } while (ch != '\n');
+                break; // skip this line, try next
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLength || len <= 0) {
+            continue; // ignore blank/bad line
+        }
+
+        int dataLen = len - read;
+        if (dataLen <= 0) {
+            // skip this record if no data after length
+            // likely a blank or corrupt line
+            // skip up to NL to avoid corrupting next record
+            int remaining = len - read;
+            while (remaining > 0) {
+                int skipped = (int) i.skip(remaining);
+                if (skipped <= 0) {
+                    if (i.read() == -1) {
+                        break;
+                    } else {
+                        skipped = 1;
+                    }
+                }
+                remaining -= skipped;
+            }
+            continue;
+        }
+
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        // read keyword
+        int keywordBytes = 0;
         while ((ch = i.read()) != -1) {
             read++;
-                        if (ch == '='){ // end of keyword
+            dataLen--;
+            keywordBytes++;
+            if (ch == '=') {
+                break;
+            }
+            coll.write((byte) ch);
+            if (dataLen == 0) {
+                break;
+            }
+        }
+        if (ch == -1 || dataLen < 0) {
+            break;
+        }
         final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
+
+        final int restLen = dataLen;
+        if (restLen < 1) {
             headers.remove(keyword);
+            // consume trailing newlines if any
+            continue;
         } else {
             final byte[] rest = new byte[restLen];
             final int got = IOUtils.readFully(i, rest);
             if (got != restLen) {
                 throw new IOException("Failed to read "
                                       + "Paxheader. Expected "
                                       + restLen
                                       + " bytes, read "
                                       + got);
             }
             // Drop trailing NL
             final String value = new String(rest, 0,
                                       restLen - 1, CharsetNames.UTF_8);
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
