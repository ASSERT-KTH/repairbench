diff --git a/tmp/ed97a400-d9a4-4ebe-8b7f-506ab53fb0a6_buggy.java b/tmp/4e8954ca-5297-4698-bd90-b66d047a1364_fixed.java
index 4b7e1e4..99081b3 100644
--- a/tmp/ed97a400-d9a4-4ebe-8b7f-506ab53fb0a6_buggy.java
+++ b/tmp/4e8954ca-5297-4698-bd90-b66d047a1364_fixed.java
@@ -1,52 +1,76 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
+                foundLength = true;
+                break;
+            }
+            if (ch == '\n' || ch == '\r') {
+                // blank line or invalid header line, skip it
+                len = 0;
+                read = 0;
+                continue;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid character '" + (char) ch
+                        + "' in Pax header length");
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1){ // EOF
+            break;
+        }
+        if (!foundLength || len <= 0) {
+            continue; // skip the blank or invalid line
+        }
+        int restLen = len - read;
+        if (restLen <= 0) {
+            // invalid record length, skip this record
+            // but attempt to resync by reading remaining bytes if any
+            for (int skipped = 0; skipped < -restLen; skipped++) {
+                if (i.read() == -1) break;
+            }
+            continue;
+        }
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+        int keywordBytes = 0;
         while((ch = i.read()) != -1) {
             read++;
+            restLen--;
+            keywordBytes++;
             if (ch == '='){ // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
                 final byte[] rest = new byte[restLen];
                 final int got = IOUtils.readFully(i, rest);
                 if (got != restLen) {
                     throw new IOException("Failed to read "
                                           + "Paxheader. Expected "
                                           + restLen
                                           + " bytes, read "
                                           + got);
                 }
                 // Drop trailing NL
                 final String value = new String(rest, 0,
                                           restLen - 1, CharsetNames.UTF_8);
+                if (restLen == 1) { // only NL
+                    headers.remove(keyword);
+                } else {
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
