diff --git a/tmp/2a1faa82-c475-4a46-b728-7f06fde2fe52_buggy.java b/tmp/94a1141b-5e0e-472c-9194-986137db0a21_fixed.java
index 4b7e1e4..341c165 100644
--- a/tmp/2a1faa82-c475-4a46-b728-7f06fde2fe52_buggy.java
+++ b/tmp/94a1141b-5e0e-472c-9194-986137db0a21_fixed.java
@@ -1,52 +1,108 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundDigit = false;
+        // Skip initial blank lines or invalid lines
+        while((ch = i.read()) != -1) {
+            if (ch == '\n' || ch == '\r') {
+                // skip blank lines
+                continue;
+            }
+            if (Character.isWhitespace(ch)) {
+                // skip leading whitespace (shouldn't be in valid pax record, but be lenient)
+                continue;
+            }
+            if (Character.isDigit(ch)) {
+                len = ch - '0';
+                foundDigit = true;
+                read = 1;
+                break;
+            } else {
+                // skip invalid/broken lines
+                while (ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                // if EOF, break outer loop
+                if (ch == -1) {
+                    break;
+                }
+                // else continue reading next line
+            }
+        }
+        if (!foundDigit || ch == -1){
+            break; // EOF
+        }
+
+        // read remaining length digits
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' '){
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                break;
+            }
+            if (!Character.isDigit(ch)) {
+                // corrupt line, skip rest of this line
+                while(ch != -1 && ch != '\n') {
+                    ch = i.read();
+                }
+                break;
+            }
+            len *= 10;
+            len += ch - '0';
+        }
+        if (ch == -1){
+            break; // EOF
+        }
+        if (len <= 0) {
+            // skip invalid zero-length or negative length records
+            continue;
+        }
+        int restLen = len - read;
+        if (restLen <= 0) {
+            // skip invalid records
+            // consume line end if needed
+            if (restLen == 0) {
+                int skipCh = i.read();
+                if (skipCh == -1) {
+                    break;
+                }
+            }
+            continue;
+        }
+
         final byte[] rest = new byte[restLen];
         final int got = IOUtils.readFully(i, rest);
         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
-                                }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + restLen + " bytes, read " + got);
+        }
+        // rest contains: "keyword=value\n"
+        int equals = -1;
+        for (int k = 0; k < restLen; k++) {
+            if (rest[k] == (byte) '=') {
+                equals = k;
+                break;
+            }
+        }
+        if (equals == -1) {
+            // invalid header record, skip
+            continue;
+        }
+        final String keyword = new String(rest, 0, equals, CharsetNames.UTF_8);
+        final String value = new String(rest, equals + 1, restLen - equals - 2, CharsetNames.UTF_8); // exclude trailing \n
+        if (rest[restLen -1] != (byte) '\n') {
+            // Should end on \n, be lenient
+        }
+        if (value.length() == 0) {
+            headers.remove(keyword);
+        } else {
             headers.put(keyword, value);
         }
-                            break;
-                        }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
