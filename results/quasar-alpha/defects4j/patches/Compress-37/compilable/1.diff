diff --git a/tmp/fe132ca2-d698-4a06-87ba-ed92a74374e9_buggy.java b/tmp/969d573b-5803-4590-8efd-90eef53ae53e_fixed.java
index 4b7e1e4..6e25360 100644
--- a/tmp/fe132ca2-d698-4a06-87ba-ed92a74374e9_buggy.java
+++ b/tmp/969d573b-5803-4590-8efd-90eef53ae53e_fixed.java
@@ -1,52 +1,76 @@
 // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
     throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while(true){ // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
-                    final ByteArrayOutputStream coll = new ByteArrayOutputStream();
-                    while((ch = i.read()) != -1) {
-                        read++;
-                        if (ch == '='){ // end of keyword
-                            final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
-                            final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                foundLength = true;
+                break;
+            }
+            // skip if newlines before length start (blank line)
+            if (!foundLength) {
+                if ((ch >= '0') && (ch <= '9')) {
+                    len *= 10;
+                    len += ch - '0';
                 } else {
+                    // invalid char before length, skip rest of line
+                    while (ch != -1 && ch != '\n') {
+                        ch = i.read();
+                    }
+                    break; // skip to next line
+                }
+            }
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLength) {
+            continue; // skip blank line
+        }
+        int restLen = len - read;
+        if (restLen <= 0) {
+            // Skip this invalid or blank (empty length or just newline)
+            // Drain the rest of the line (should be restLen zero, already read)
+            for (int j = 0; j < restLen; j++) {
+                if (i.read() == -1) {
+                    break;
+                }
+            }
+            continue;
+        }
+
+        final ByteArrayOutputStream entryBytes = new ByteArrayOutputStream();
         final byte[] rest = new byte[restLen];
         final int got = IOUtils.readFully(i, rest);
         if (got != restLen) {
-                                    throw new IOException("Failed to read "
-                                                          + "Paxheader. Expected "
-                                                          + restLen
-                                                          + " bytes, read "
-                                                          + got);
+            throw new IOException("Failed to read Paxheader. Expected "
+                                  + restLen + " bytes, read " + got);
         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+        entryBytes.write(rest, 0, restLen);
+
+        final String entry = entryBytes.toString(CharsetNames.UTF_8);
+
+        // Remove trailing newline, it should be there
+        if (entry.endsWith("\n")) {
+            String trimmedEntry = entry.substring(0, entry.length() - 1);
+            final int idx = trimmedEntry.indexOf('=');
+            if (idx != -1) {
+                final String keyword = trimmedEntry.substring(0, idx);
+                final String value = trimmedEntry.substring(idx + 1);
+                if (value.length() == 0) {
+                    headers.remove(keyword);
+                } else {
                     headers.put(keyword, value);
                 }
-                            break;
             }
-                        coll.write((byte) ch);
-                    }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
         }
     }
     return headers;
 }
\ No newline at end of file
