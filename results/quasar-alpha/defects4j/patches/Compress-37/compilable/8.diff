diff --git a/tmp/63feda84-9377-4107-bb68-eae17be34e34_buggy.java b/tmp/b5de4345-887c-4b99-a5ba-2f1cff6bf16e_fixed.java
index 4b7e1e4..12d4889 100644
--- a/tmp/63feda84-9377-4107-bb68-eae17be34e34_buggy.java
+++ b/tmp/b5de4345-887c-4b99-a5ba-2f1cff6bf16e_fixed.java
@@ -1,52 +1,72 @@
-    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
 Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
     final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
     // Format is "length keyword=value\n";
     while (true) { // get length
         int ch;
         int len = 0;
         int read = 0;
+        boolean foundLength = false;
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == ' ') {
-                    // Get keyword
+                foundLength = true;
+                break;
+            }
+            if (ch == '\n') { // skip blank line or ignore empty line
+                // reset read and len, start again to find next record
+                read = 0;
+                len = 0;
+                continue;
+            }
+            if (ch < '0' || ch > '9') {
+                throw new IOException("Invalid length character in PaxHeader: " + ch);
+            }
+            len = len * 10 + (ch - '0');
+        }
+        if (ch == -1) { // EOF
+            break;
+        }
+        if (!foundLength) {
+            // should not happen, but just in case
+            break;
+        }
+        // Edge case: If it was a blank line (len=0), skip reading that record
+        if (len <= 0) {
+            // skip ignoring blank line
+            continue;
+        }
+        int keywordLength = 0;
         final ByteArrayOutputStream coll = new ByteArrayOutputStream();
         while ((ch = i.read()) != -1) {
             read++;
             if (ch == '=') { // end of keyword
                 final String keyword = coll.toString(CharsetNames.UTF_8);
-                            // Get rest of entry
                 final int restLen = len - read;
+                if (restLen < 0) {
+                    throw new IOException("Invalid Paxheader record length");
+                }
                 if (restLen == 1) { // only NL
                     headers.remove(keyword);
                 } else {
                     final byte[] rest = new byte[restLen];
                     final int got = IOUtils.readFully(i, rest);
                     if (got != restLen) {
                         throw new IOException("Failed to read "
                                 + "Paxheader. Expected "
                                 + restLen
                                 + " bytes, read "
                                 + got);
                     }
                     // Drop trailing NL
                     final String value = new String(rest, 0,
                             restLen - 1, CharsetNames.UTF_8);
                     headers.put(keyword, value);
                 }
                 break;
             }
             coll.write((byte) ch);
         }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
-            }
     }
     return headers;
 }
\ No newline at end of file
