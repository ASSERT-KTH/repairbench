diff --git a/tmp/41e92aa7-6d01-4804-9d57-4c328bb9325e_buggy.java b/tmp/47a8af0b-dd79-4ae6-bc1a-90f5e667a654_fixed.java
index efa499e..54e7d31 100644
--- a/tmp/41e92aa7-6d01-4804-9d57-4c328bb9325e_buggy.java
+++ b/tmp/47a8af0b-dd79-4ae6-bc1a-90f5e667a654_fixed.java
@@ -1,35 +1,38 @@
 /**
  * Get the current solution.
  *
  * @return current solution
  */
 protected RealPointValuePair getSolution() {
     int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+    Integer negativeVarBasicRow = negativeVarColumn >= 0 ? getBasicRow(negativeVarColumn) : null;
     double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
 
     Set<Integer> basicRows = new HashSet<Integer>();
     double[] coefficients = new double[getOriginalNumDecisionVariables()];
     for (int i = 0; i < coefficients.length; i++) {
         int colIndex = columnLabels.indexOf("x" + i);
         if (colIndex < 0) {
             coefficients[i] = 0;
             continue;
         }
         Integer basicRow = getBasicRow(colIndex);
             // if the basic row is found to be the objective function row
             // set the coefficient to 0 -> this case handles unconstrained 
             // variables that are still part of the objective function
         if (basicRows.contains(basicRow)) {
             // if multiple variables can take a given value
             // then we choose the first and set the rest equal to 0
             coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
         } else {
             basicRows.add(basicRow);
             coefficients[i] =
                 (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
                 (restrictToNonNegative ? 0 : mostNegative);
+            if (restrictToNonNegative && coefficients[i] < 0) {
+                coefficients[i] = 0;
+            }
         }
     }
     return new RealPointValuePair(coefficients, f.getValue(coefficients));
 }
\ No newline at end of file
