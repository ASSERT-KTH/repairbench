diff --git a/tmp/635c848a-922e-4002-935e-2adc31745fb7_buggy.java b/tmp/52369653-85df-4af7-922d-18ab0ca47caa_fixed.java
index 9d42346..803f06d 100644
--- a/tmp/635c848a-922e-4002-935e-2adc31745fb7_buggy.java
+++ b/tmp/52369653-85df-4af7-922d-18ab0ca47caa_fixed.java
@@ -1,37 +1,45 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
-    // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
       TypeAdapter t =
           new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
       t.write(writer, fieldValue);
     }
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
-        Object fieldValue = typeAdapter.read(reader);
-        if (fieldValue != null || !isPrimitive) {
+      Object fieldValue;
+      if (jsonAdapterPresent) {
+        // Always use the jsonAdapter even for primitives, so e.g. a custom adapter on int can return null
+        fieldValue = typeAdapter.read(reader);
+      } else {
+        // Use default adapter, nullability depends on primitive status
+        fieldValue = typeAdapter.read(reader);
+        if (fieldValue == null && isPrimitive) {
+          // Avoid setting primitive fields to null; skip assignment
+          return;
+        }
+      }
       field.set(value, fieldValue);
     }
-      }
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
       if (!serialized) return false;
       Object fieldValue = field.get(value);
       return fieldValue != value; // avoid recursion for example for Throwable.cause
     }
   };
 }
\ No newline at end of file
