diff --git a/tmp/9e70bf55-83bc-4faa-92e1-f0d2bfe3ce0e_buggy.java b/tmp/fbed91de-eb2d-4069-a62c-64a2d349ecfa_fixed.java
index 99d6a44..b7ace93 100644
--- a/tmp/9e70bf55-83bc-4faa-92e1-f0d2bfe3ce0e_buggy.java
+++ b/tmp/fbed91de-eb2d-4069-a62c-64a2d349ecfa_fixed.java
@@ -1,58 +1,101 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
+        int firstFieldIndex = 0;
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
-            DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+        DurationField weekyears = null;
+        DurationField weeks = null;
+        // Find first 'important' field
+        for (int i = 0; i < count; i++) {
+            DurationField dur = savedFields[i].iField.getDurationField();
+            if (dur != null) {
+                // for week-based year adjustment, capture references
+                if (weekyears == null && 
+                        savedFields[i].iField.getType() == DateTimeFieldType.weekyear().getField(iChrono)) {
+                    weekyears = dur;
+                }
+                if (weeks == null &&
+                        savedFields[i].iField.getType() == DateTimeFieldType.weekOfWeekyear().getField(iChrono)) {
+                    weeks = dur;
+                }
+            }
+            firstFieldIndex = i;
+            break; // always first sorted
+        }
+
+        DurationField first = savedFields[firstFieldIndex].iField.getDurationField();
+
+        if (first != null &&
+            compareReverse(first, months) >= 0 &&
+            compareReverse(first, days) <= 0) {
+            saveField(DateTimeFieldType.year(), iDefaultYear);
+            return computeMillis(resetFields, text);
+        }
+
+        // Fix: check if fields include weekyear AND month AND weekOfWeekyear: adjust base to default weekyear
+        boolean hasWeekyear = false;
+        boolean hasMonth = false;
+        boolean hasWeekOfWeekyear = false;
+        for (int i = 0; i < count; i++) {
+            DateTimeField field = savedFields[i].iField;
+            DateTimeFieldType type = field.getType();
+            if (type == DateTimeFieldType.weekyear()) {
+                hasWeekyear = true;
+            } else if (type == DateTimeFieldType.monthOfYear()) {
+                hasMonth = true;
+            } else if (type == DateTimeFieldType.weekOfWeekyear()) {
+                hasWeekOfWeekyear = true;
+            }
+        }
+        if (hasWeekyear && hasMonth && hasWeekOfWeekyear) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
