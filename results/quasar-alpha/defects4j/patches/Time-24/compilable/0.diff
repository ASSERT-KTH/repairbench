diff --git a/tmp/8212207e-f251-4067-b478-36ea5c0474dd_buggy.java b/tmp/c665e9e6-3c89-4dae-bb34-5cf9badbca31_fixed.java
index 99d6a44..cbb6234 100644
--- a/tmp/8212207e-f251-4067-b478-36ea5c0474dd_buggy.java
+++ b/tmp/c665e9e6-3c89-4dae-bb34-5cf9badbca31_fixed.java
@@ -1,58 +1,86 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
     if (count > 0) {
-            // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
+
+        // Determine if the first saved field has a duration between month and day inclusive
+        boolean isMonthOrDay = compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0;
+
+        if (isMonthOrDay) {
+            boolean hasMonth = false;
+            boolean hasDayOfMonth = false;
+            boolean hasWeek = false;
+            boolean hasWeekyear = false;
+            boolean hasYear = false;
+
+            for (int i = 0; i < count; i++) {
+                DateTimeField field = savedFields[i].iField;
+                if (field == iChrono.monthOfYear()) {
+                    hasMonth = true;
+                } else if (field == iChrono.dayOfMonth()) {
+                    hasDayOfMonth = true;
+                } else if (field == iChrono.weekOfWeekyear()) {
+                    hasWeek = true;
+                } else if (field == iChrono.weekyear()) {
+                    hasWeekyear = true;
+                } else if (field == iChrono.year()) {
+                    hasYear = true;
+                }
+            }
+
+            // Only inject defaultYear if not mixing MONTH/DAY_OF_MONTH with week-based fields
+            if (!(hasMonth && hasDayOfMonth && (hasWeek || hasWeekyear))) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
         }
+    }
 
     long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
