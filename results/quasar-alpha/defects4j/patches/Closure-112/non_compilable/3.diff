diff --git a/tmp/fd91dbfc-6d06-4819-a63b-f9668a0a2feb_buggy.java b/tmp/974c19ef-1b91-4ec4-9c9e-6fc365328f22_fixed.java
index 63641d0..4f0383f 100644
--- a/tmp/fd91dbfc-6d06-4819-a63b-f9668a0a2feb_buggy.java
+++ b/tmp/974c19ef-1b91-4ec4-9c9e-6fc365328f22_fixed.java
@@ -1,33 +1,40 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
+  // Fill in any un-inferred template variables with UNKNOWN, so they don't remain unresolved.
+  // This avoids spurious warnings about unresolved types.
+  if (inferred == null) {
+    inferred = new HashMap<>();
+  } else {
+    inferred = new HashMap<>(inferred);
+  }
+  for (TemplateType key : keys) {
+    if (!inferred.containsKey(key)) {
+      inferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+    }
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types with inferred or UNKNOWN type.
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
