diff --git a/tmp/eb7b5a4b-14a5-4bec-bdf4-4fb2eaaf9017_buggy.java b/tmp/66d92fc4-a848-4d2c-8947-bc3df275b51c_fixed.java
index 63641d0..4f28e76 100644
--- a/tmp/eb7b5a4b-14a5-4bec-bdf4-4fb2eaaf9017_buggy.java
+++ b/tmp/66d92fc4-a848-4d2c-8947-bc3df275b51c_fixed.java
@@ -1,33 +1,37 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
-    // Try to infer the template types
+  // Try to infer the template types from the call arguments
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Fill in missing keys with UNKNOWN to avoid creating raw (non-templatized) functions
+  Map<TemplateType, JSType> completed = new LinkedHashMap<>();
+  for (TemplateType key : keys) {
+    JSType type = inferred.get(key);
+    completed.put(key, type != null ? type : getNativeUnknownType());
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, completed);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
