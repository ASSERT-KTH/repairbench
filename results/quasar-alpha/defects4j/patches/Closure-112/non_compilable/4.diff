diff --git a/tmp/a3a91c0f-f1ad-4ec1-a73a-12485b3604a6_buggy.java b/tmp/a3e89a48-9993-43ee-9a7c-032be6cfacfb_fixed.java
index 63641d0..92fbca6 100644
--- a/tmp/a3a91c0f-f1ad-4ec1-a73a-12485b3604a6_buggy.java
+++ b/tmp/a3e89a48-9993-43ee-9a7c-032be6cfacfb_fixed.java
@@ -1,33 +1,44 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Don't attempt any specialization of nested generic types UNLESS at least one of the
+  // outer generic type parameters was successfully inferred. This preserves template
+  // variables where inference fails (instead of aggressively specializing all of them to ?)
+  boolean foundReplacement = false;
+  for (TemplateType key : keys) {
+    if (inferred != null && inferred.containsKey(key) && 
+        !inferred.get(key).isUnknownType()) {
+      foundReplacement = true;
+      break;
+    }
+  }
+
+  Map<TemplateType, JSType> inferredOrEmpty = (inferred == null) ? ImmutableMap.of() : inferred;
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
   TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+      registry, foundReplacement ? inferredOrEmpty : ImmutableMap.of());
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
