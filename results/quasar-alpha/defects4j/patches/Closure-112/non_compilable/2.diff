diff --git a/tmp/b44642f6-4231-463d-a17a-5b7052ffcce2_buggy.java b/tmp/881bf2ec-7c0b-41a6-8ce7-a967cb8f6759_fixed.java
index 63641d0..95fac26 100644
--- a/tmp/b44642f6-4231-463d-a17a-5b7052ffcce2_buggy.java
+++ b/tmp/881bf2ec-7c0b-41a6-8ce7-a967cb8f6759_fixed.java
@@ -1,33 +1,43 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+ * actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
   final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
       .getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
   Map<TemplateType, JSType> inferred =
       inferTemplateTypesFromParameters(fnType, n);
 
+  // Fill in missing keys with unknown to avoid propagating template types to callers.
+  if (inferred.size() < keys.size()) {
+    Map<TemplateType, JSType> completedInferred =
+        new LinkedHashMap<>();
+    completedInferred.putAll(inferred);
+    for (TemplateType key : keys) {
+      if (!completedInferred.containsKey(key)) {
+        completedInferred.put(key, registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
+      }
+    }
+    inferred = completedInferred;
+  }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  // Replace all template types with the inferred types (or unknown).
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
   FunctionType replacementFnType = fnType.visit(replacer)
       .toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
   n.setJSType(replacementFnType.getReturnType());
 
   return replacer.madeChanges;
 }
\ No newline at end of file
