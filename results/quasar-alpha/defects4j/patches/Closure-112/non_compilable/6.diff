diff --git a/tmp/951e32f3-ffd6-49d9-87b7-0de7f5dff3c6_buggy.java b/tmp/8031ffb2-01c2-450e-b365-fb9a8da32cb7_fixed.java
index 63641d0..9cd4a71 100644
--- a/tmp/951e32f3-ffd6-49d9-87b7-0de7f5dff3c6_buggy.java
+++ b/tmp/8031ffb2-01c2-450e-b365-fb9a8da32cb7_fixed.java
@@ -1,33 +1,49 @@
 /**
  * For functions with function(this: T, ...) and T as parameters, type
  * inference will set the type of this on a function literal argument to the
  * the actual type of T.
  */
 private boolean inferTemplatedTypesForCall(
     Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
+  final ImmutableList<TemplateType> keys =
+      fnType.getTemplateTypeMap().getTemplateKeys();
   if (keys.isEmpty()) {
     return false;
   }
 
   // Try to infer the template types
-    Map<TemplateType, JSType> inferred =
-        inferTemplateTypesFromParameters(fnType, n);
-
+  Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(fnType, n);
 
   // Replace all template types. If we couldn't find a replacement, we
   // replace it with UNKNOWN.
-    TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+  TemplateTypeReplacer replacer = new TemplateTypeReplacer(registry, inferred);
   Node callTarget = n.getFirstChild();
 
-    FunctionType replacementFnType = fnType.visit(replacer)
-        .toMaybeFunctionType();
+  FunctionType replacementFnType = fnType.visit(replacer).toMaybeFunctionType();
   Preconditions.checkNotNull(replacementFnType);
 
   callTarget.setJSType(replacementFnType);
+
+  // If we could not infer some template variables on the *return* type, leave them alone.
+  JSType retType = fnType.getReturnType();
+  if (!retType.isUnknownType() && retType.isTemplatizedType()) {
+    TemplateTypeMap retTypeMap = retType.getTemplateTypeMap();
+    Map<TemplateType, JSType> inferredReturns = new HashMap<>();
+    for (TemplateType key : retTypeMap.getTemplateKeys()) {
+      JSType inferredType = inferred.get(key);
+      // Keep the original template variable if there was no inference.
+      if (inferredType == null) {
+        inferredReturns.put(key, key);
+      } else {
+        inferredReturns.put(key, inferredType);
+      }
+    }
+    TemplateTypeReplacer returnReplacer = new TemplateTypeReplacer(registry, inferredReturns);
+    JSType replacedRetType = retType.visit(returnReplacer);
+    n.setJSType(replacedRetType);
+  } else {
     n.setJSType(replacementFnType.getReturnType());
+  }
 
   return replacer.madeChanges;
 }
\ No newline at end of file
