diff --git a/tmp/3548b0b1-8b8b-4046-a746-9e4125e08557_buggy.java b/tmp/3f812041-c411-4654-83fb-c5ec92253417_fixed.java
index 63641d0..2d72a1d 100644
--- a/tmp/3548b0b1-8b8b-4046-a746-9e4125e08557_buggy.java
+++ b/tmp/3f812041-c411-4654-83fb-c5ec92253417_fixed.java
@@ -1,33 +1,43 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
    * the actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
-
     // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
+    // replace it with the UNKNOWN type, except for template types that are present
+    // in the function's own template keys, because these are meant to be left generic.
+    Map<TemplateType, JSType> completedInferred = new HashMap<>();
+    for (TemplateType key : keys) {
+      JSType type = inferred.get(key);
+      if (type == null) {
+        completedInferred.put(key, key);
+      } else {
+        completedInferred.put(key, type);
+      }
+    }
+
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, completedInferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
