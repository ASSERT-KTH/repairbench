diff --git a/tmp/68b3e786-fbf8-4c66-a802-78891aa40a2e_buggy.java b/tmp/bb238013-cf97-4f8d-9832-5cb6fa94ef8f_fixed.java
index 63641d0..9bf7ca0 100644
--- a/tmp/68b3e786-fbf8-4c66-a802-78891aa40a2e_buggy.java
+++ b/tmp/bb238013-cf97-4f8d-9832-5cb6fa94ef8f_fixed.java
@@ -1,33 +1,40 @@
   /**
    * For functions with function(this: T, ...) and T as parameters, type
    * inference will set the type of this on a function literal argument to the
-   * the actual type of T.
+   * actual type of T.
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
     final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
         .getTemplateKeys();
     if (keys.isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
     Map<TemplateType, JSType> inferred =
         inferTemplateTypesFromParameters(fnType, n);
 
+    // Ensure all templates have a mapping, defaulting to UNKNOWN if not inferred
+    Map<TemplateType, JSType> completeInferred = new HashMap<>();
+    for (TemplateType key : keys) {
+      JSType inferredType = inferred.get(key);
+      if (inferredType == null) {
+        inferredType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
+      }
+      completeInferred.put(key, inferredType);
+    }
 
-    // Replace all template types. If we couldn't find a replacement, we
-    // replace it with UNKNOWN.
     TemplateTypeReplacer replacer = new TemplateTypeReplacer(
-        registry, inferred);
+        registry, completeInferred);
     Node callTarget = n.getFirstChild();
 
     FunctionType replacementFnType = fnType.visit(replacer)
         .toMaybeFunctionType();
     Preconditions.checkNotNull(replacementFnType);
 
     callTarget.setJSType(replacementFnType);
     n.setJSType(replacementFnType.getReturnType());
 
     return replacer.madeChanges;
   }
\ No newline at end of file
