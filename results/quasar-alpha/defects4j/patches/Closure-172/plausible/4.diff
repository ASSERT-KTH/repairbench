diff --git a/tmp/09609b4c-e82f-48d0-ae82-e0843e05447b_buggy.java b/tmp/573890f9-07f3-491f-8f0e-444908e45898_fixed.java
index 7b89a27..85e8159 100644
--- a/tmp/09609b4c-e82f-48d0-ae82-e0843e05447b_buggy.java
+++ b/tmp/573890f9-07f3-491f-8f0e-444908e45898_fixed.java
@@ -1,76 +1,62 @@
-    /**
-     * Determines whether a qualified name is inferred.
-     * NOTE(nicksantos): Determining whether a property is declared or not
-     * is really really obnoxious.
-     *
-     * The problem is that there are two (equally valid) coding styles:
-     *
-     * (function() {
-     *   /* The authoritative definition of goog.bar. /
-     *   goog.bar = function() {};
-     * })();
-     *
-     * function f() {
-     *   goog.bar();
-     *   /* Reset goog.bar to a no-op. /
-     *   goog.bar = function() {};
-     * }
-     *
-     * In a dynamic language with first-class functions, it's very difficult
-     * to know which one the user intended without looking at lots of
-     * contextual information (the second example demonstrates a small case
-     * of this, but there are some really pathological cases as well).
-     *
-     * The current algorithm checks if either the declaration has
-     * JsDoc type information, or @const with a known type,
-     * or a function literal with a name we haven't seen before.
-     */
 private boolean isQualifiedNameInferred(
     String qName, Node n, JSDocInfo info,
     Node rhsValue, JSType valueType) {
   if (valueType == null) {
     return true;
   }
 
-      // Prototypes of constructors and interfaces are always declared.
+  // Prototypes of constructors and interfaces are always declared,
+  // But NOT prototypes of arbitrary objects, like parameter objects.
+  // Avoid marking these as declared because it leads to incorrect warnings.
   if (qName != null && qName.endsWith(".prototype")) {
+    // Check if the base is known to be a constructor or interface.
+    String ownerName = qName.substring(0, qName.length() - ".prototype".length());
+    Var ownerVar = scope.getVar(ownerName);
+    if (ownerVar != null) {
+      JSType ownerType = ownerVar.getType();
+      if (ownerType != null) {
+        ownerType = ownerType.restrictByNotNullOrUndefined();
+        if (ownerType.isConstructor() || ownerType.isInterface()) {
           return false;
         }
+      }
+    }
+  }
 
   boolean inferred = true;
   if (info != null) {
     inferred = !(info.hasType()
         || info.hasEnumParameterType()
         || (isConstantSymbol(info, n) && valueType != null
             && !valueType.isUnknownType())
         || FunctionTypeBuilder.isFunctionTypeDeclaration(info));
   }
 
   if (inferred && rhsValue != null && rhsValue.isFunction()) {
     if (info != null) {
       return false;
     } else if (!scope.isDeclared(qName, false) &&
         n.isUnscopedQualifiedName()) {
 
       // Check if this is in a conditional block.
       // Functions assigned in conditional blocks are inferred.
       for (Node current = n.getParent();
            !(current.isScript() || current.isFunction());
            current = current.getParent()) {
         if (NodeUtil.isControlStructure(current)) {
           return true;
         }
       }
 
       // Check if this is assigned in an inner scope.
       // Functions assigned in inner scopes are inferred.
       AstFunctionContents contents =
           getFunctionAnalysisResults(scope.getRootNode());
       if (contents == null ||
           !contents.getEscapedQualifiedNames().contains(qName)) {
         return false;
       }
     }
   }
   return inferred;
 }
\ No newline at end of file
