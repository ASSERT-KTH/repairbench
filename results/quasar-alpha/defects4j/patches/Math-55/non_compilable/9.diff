diff --git a/tmp/8c3fcf3d-d2b4-44d0-8ed3-d532cb725b1c_buggy.java b/tmp/718182e1-43aa-4950-94f1-6cb6b99d1978_fixed.java
index 1478ee1..1125fec 100644
--- a/tmp/8c3fcf3d-d2b4-44d0-8ed3-d532cb725b1c_buggy.java
+++ b/tmp/718182e1-43aa-4950-94f1-6cb6b99d1978_fixed.java
@@ -1,24 +1,19 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    double ratio = v1.dotProduct(v2) / v2.dotProduct(v2);
+    long bits = Double.doubleToLongBits(ratio);
+    // Consider keeping only the sign bit and the top 8 exponent+mantissa bits to get an 8 bit approximation
+    long mask = 0xFFFFFFFFFFFFFFFFL << (52 - 8);
+    double rho = Double.longBitsToDouble(bits & mask);
 
+    // compute v3 = v1 - rho * v2, avoiding cancellation errors
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // use a more accurate cross product using v3 and v2
+    return new Vector3D(
+                       v3.y * v2.z - v3.z * v2.y,
+                       v3.z * v2.x - v3.x * v2.z,
+                       v3.x * v2.y - v3.y * v2.x);
 
 }
\ No newline at end of file
