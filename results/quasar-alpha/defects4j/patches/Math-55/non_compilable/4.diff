diff --git a/tmp/dd3ba8ac-0424-4ddd-afdc-78d710689841_buggy.java b/tmp/6bbe4952-e717-4f6f-9289-23105ec3061f_fixed.java
index 1478ee1..5ff4d4f 100644
--- a/tmp/dd3ba8ac-0424-4ddd-afdc-78d710689841_buggy.java
+++ b/tmp/6bbe4952-e717-4f6f-9289-23105ec3061f_fixed.java
@@ -1,24 +1,20 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute rho as an 8 bits approximation of (v1 . v2) / (v2 . v2)
+    final double dot = v1.dotProduct(v2);
+    final double norm2 = v2.getNormSq();
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    final double rho = Math.rint(256 * (dot / norm2)) / 256;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho * v2 with compensated subtraction
+    final double x3 = v1.x - rho * v2.x;
+    final double y3 = v1.y - rho * v2.y;
+    final double z3 = v1.z - rho * v2.z;
 
+    // Return cross product of v3 and v2
+    return new Vector3D(
+        y3 * v2.z - z3 * v2.y,
+        z3 * v2.x - x3 * v2.z,
+        x3 * v2.y - y3 * v2.x
+    );
 }
\ No newline at end of file
