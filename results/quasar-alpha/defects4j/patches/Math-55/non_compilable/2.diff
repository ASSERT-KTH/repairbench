diff --git a/tmp/7335f674-6e1f-42b0-a71a-ba3795ed2b4d_buggy.java b/tmp/8626dad4-333f-4a06-8f48-8b919f20f0d9_fixed.java
index 1478ee1..ddf95c5 100644
--- a/tmp/7335f674-6e1f-42b0-a71a-ba3795ed2b4d_buggy.java
+++ b/tmp/8626dad4-333f-4a06-8f48-8b919f20f0d9_fixed.java
@@ -1,24 +1,28 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+    // Compute rho as an 8-bit approximation of (v1.v2) / (v2.v2)
+    double dot = v1.dotProduct(v2);
+    double norm2 = v2.getNormSq();
+    if (norm2 == 0) {
+        // if v2 is the zero vector, fallback to naive implementation
+        return new Vector3D(
+            v1.y * v2.z - v1.z * v2.y,
+            v1.z * v2.x - v1.x * v2.z,
+            v1.x * v2.y - v1.y * v2.x
+        );
+    }
+    double ratio = dot / norm2;
+    long bits = Double.doubleToLongBits(ratio);
+    // keep only the top 8 mantissa bits (truncate lower bits)
+    bits &= 0xFFFFFFFFFFFFF800L;
+    double rho = Double.longBitsToDouble(bits);
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    // Compute v3 = v1 - rho * v2
+    Vector3D v3 = v1.subtract(v2.scalarMultiply(rho));
 
+    return new Vector3D(
+        v3.y * v2.z - v3.z * v2.y,
+        v3.z * v2.x - v3.x * v2.z,
+        v3.x * v2.y - v3.y * v2.x
+    );
 }
\ No newline at end of file
