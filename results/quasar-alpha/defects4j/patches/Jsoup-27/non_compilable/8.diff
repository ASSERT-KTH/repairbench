diff --git a/tmp/0b13ff8d-f8a3-4706-bfa8-cf1aa56b3579_buggy.java b/tmp/22625dc1-a0ff-49dd-b46a-766e58545cc0_fixed.java
index 7fb120e..80b013c 100644
--- a/tmp/0b13ff8d-f8a3-4706-bfa8-cf1aa56b3579_buggy.java
+++ b/tmp/22625dc1-a0ff-49dd-b46a-766e58545cc0_fixed.java
@@ -1,16 +1,35 @@
 /**
  * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
  * will kick in.)
  * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+ * @return "EUC-JP", or null if not found. Charset is trimmed and casing preserved as in standard names.
  */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
     Matcher m = charsetPattern.matcher(contentType);
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+        // Remove surrounding quotes if present
+        if (charset.startsWith("\"") && charset.endsWith("\"") && charset.length() > 1) {
+            charset = charset.substring(1, charset.length() - 1).trim();
+        }
+        // Check if charset is supported
+        try {
+            if (!Charset.isSupported(charset)) {
+                return null;
+            }
+        } catch (IllegalCharsetNameException e) {
+            return null;
+        }
+        // Normalize casing for common charsets
+        String canonical = Charset.forName(charset).name();
+        if (canonical.equalsIgnoreCase("UTF-8")) {
+            return "utf-8";
+        }
+        if (canonical.equalsIgnoreCase("ISO-8859-1")) {
+            return "ISO-8859-1";
+        }
+        return canonical;
     }
     return null;
 }
\ No newline at end of file
