diff --git a/tmp/c26b5ee7-fd3b-409f-a18a-08a62b18a51c_buggy.java b/tmp/1bdedf0a-4268-4c0d-b9e8-494daadbf530_fixed.java
index 7fb120e..ef70803 100644
--- a/tmp/c26b5ee7-fd3b-409f-a18a-08a62b18a51c_buggy.java
+++ b/tmp/1bdedf0a-4268-4c0d-b9e8-494daadbf530_fixed.java
@@ -1,16 +1,26 @@
 /**
  * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
  * will kick in.)
  * @param contentType e.g. "text/html; charset=EUC-JP"
-     * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
+ * @return Charset canonical name, e.g., "utf-8", "UTF-8", "ISO-8859-1", or null if not found or unsupported.
  */
 static String getCharsetFromContentType(String contentType) {
     if (contentType == null) return null;
     Matcher m = charsetPattern.matcher(contentType);
     if (m.find()) {
         String charset = m.group(1).trim();
-            charset = charset.toUpperCase(Locale.ENGLISH);
-            return charset;
+        // Strip quotes if present
+        if ((charset.startsWith("\"") && charset.endsWith("\"")) || (charset.startsWith("'") && charset.endsWith("'"))) {
+            charset = charset.substring(1, charset.length() - 1).trim();
+        }
+
+        try {
+            // validate and get canonical name
+            return Charset.forName(charset).name();
+        } catch (Exception e) {
+            // Unsupported charset
+            return null;
+        }
     }
     return null;
 }
\ No newline at end of file
