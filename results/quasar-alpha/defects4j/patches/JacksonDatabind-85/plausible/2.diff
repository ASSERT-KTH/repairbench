diff --git a/tmp/f33d437d-2001-4172-84a7-b5b42a7fa6f4_buggy.java b/tmp/4bd9afbc-69c3-4206-94f5-312c90d5b6cc_fixed.java
index d926eea..5c69199 100644
--- a/tmp/f33d437d-2001-4172-84a7-b5b42a7fa6f4_buggy.java
+++ b/tmp/4bd9afbc-69c3-4206-94f5-312c90d5b6cc_fixed.java
@@ -1,48 +1,64 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+        final String pattern;
+        final Locale loc;
+
+        if (format.hasPattern()) {
+            pattern = format.getPattern();
+        } else {
+            // 1648: if no pattern, but default DateFormat set, try to preserve that
+            DateFormat df = serializers.getConfig().getDateFormat();
+            if (df instanceof SimpleDateFormat) {
+                pattern = ((SimpleDateFormat) df).toPattern();
+            } else {
+                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            }
+        }
+
+        if (format.hasLocale()) {
+            loc = format.getLocale();
+        } else {
+            Locale providerLoc = serializers.getLocale();
+            if (providerLoc == null && serializers.getConfig() != null) {
+                providerLoc = serializers.getConfig().getLocale();
+            }
+            loc = (providerLoc != null) ? providerLoc : Locale.getDefault();
+        }
+
+        SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);
+
         if (tz == null) {
             tz = serializers.getTimeZone();
+            if (tz == null && serializers.getConfig() != null) {
+                tz = serializers.getConfig().getTimeZone();
             }
-            df.setTimeZone(tz);
-            return withFormat(Boolean.FALSE, df);
+            if (tz == null) {
+                tz = TimeZone.getDefault();
+            }
+        }
+        sdf.setTimeZone(tz);
+        return withFormat(Boolean.FALSE, sdf);
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
