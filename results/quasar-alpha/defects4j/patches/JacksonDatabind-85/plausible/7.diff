diff --git a/tmp/ddb3f0e5-6ed2-4226-82ff-8afbf63eb0e6_buggy.java b/tmp/b8dbfea0-ccf3-4dc1-ac4c-fee159ae28d5_fixed.java
index d926eea..b382ba4 100644
--- a/tmp/ddb3f0e5-6ed2-4226-82ff-8afbf63eb0e6_buggy.java
+++ b/tmp/b8dbfea0-ccf3-4dc1-ac4c-fee159ae28d5_fixed.java
@@ -1,48 +1,67 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                 ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                : null;
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
+
+        if (pattern != null) {
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
+        } else {
+            // [databind#1648]: No pattern override, but format specifies Locale/TimeZone/String
+            DateFormat base = serializers.getConfig().getDateFormat();
+            if (base instanceof StdDateFormat) {
+                // StdDateFormat is immutable, so need to clone and adjust
+                StdDateFormat std = (StdDateFormat) base;
+                StdDateFormat newStd = std.withLocale(loc);
+                if (tz == null) {
+                    tz = serializers.getTimeZone();
                 }
+                newStd = newStd.withTimeZone(tz);
+                return withFormat(Boolean.FALSE, newStd);
+            } else if (base instanceof SimpleDateFormat) {
+                SimpleDateFormat df = (SimpleDateFormat) base;
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
+                SimpleDateFormat newDf = new SimpleDateFormat(df.toPattern(), loc);
+                if (tz == null) {
+                    tz = serializers.getTimeZone();
+                }
+                newDf.setTimeZone(tz);
+                return withFormat(Boolean.FALSE, newDf);
+            } else {
+                // unknown DateFormat type
+                return this;
+            }
+        }
+    }
 
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+    // Otherwise, no change:
     return this;
 }
\ No newline at end of file
