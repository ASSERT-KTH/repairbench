diff --git a/tmp/ecaaffa1-b791-4016-8ece-6d74b9217a53_buggy.java b/tmp/f6169765-f861-4595-8a1f-5ecf288bdc46_fixed.java
index d926eea..bde12d3 100644
--- a/tmp/ecaaffa1-b791-4016-8ece-6d74b9217a53_buggy.java
+++ b/tmp/f6169765-f861-4595-8a1f-5ecf288bdc46_fixed.java
@@ -1,48 +1,55 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
     // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
     // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
         final String pattern = format.hasPattern()
                 ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
+                : null;
         final Locale loc = format.hasLocale()
                 ? format.getLocale()
                 : serializers.getLocale();
-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
+
+        DateFormat base = serializers.getConfig().getDateFormat();
+        DateFormat df;
+
+        if (pattern != null) { // if we have explicit pattern, use it
+            SimpleDateFormat sdf = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
-            df.setTimeZone(tz);
+            sdf.setTimeZone(tz);
+            df = sdf;
+        } else if (base instanceof SimpleDateFormat) { // clone existing one with possible locale & timezone override
+            SimpleDateFormat sdf = (SimpleDateFormat) base;
+            String basePattern = sdf.toPattern();
+            SimpleDateFormat copy = new SimpleDateFormat(basePattern, loc);
+            TimeZone tzToUse = (tz == null) ? sdf.getTimeZone() : tz;
+            copy.setTimeZone(tzToUse);
+            df = copy;
+        } else {
+            // fall back to re-use as is (cannot clone), may be incorrect format or timezone
+            df = base;
+        }
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
