diff --git a/tmp/dfd7b7a0-e96c-4cbf-8565-bc772a343abe_buggy.java b/tmp/01ae3761-8e37-4bb9-bd28-57f4112a2555_fixed.java
index d926eea..636330f 100644
--- a/tmp/dfd7b7a0-e96c-4cbf-8565-bc772a343abe_buggy.java
+++ b/tmp/01ae3761-8e37-4bb9-bd28-57f4112a2555_fixed.java
@@ -1,48 +1,54 @@
 @Override
 public JsonSerializer<?> createContextual(SerializerProvider serializers,
         BeanProperty property) throws JsonMappingException
 {
     if (property == null) {
         return this;
     }
     JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
     if (format == null) {
         return this;
     }
     // Simple case first: serialize as numeric timestamp?
     JsonFormat.Shape shape = format.getShape();
     if (shape.isNumeric()) {
         return withFormat(Boolean.TRUE, null);
     }
 
-        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
-        // First: custom pattern will override things
     if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
             || format.hasLocale() || format.hasTimeZone()) {
         TimeZone tz = format.getTimeZone();
-                    final String pattern = format.hasPattern()
-                                    ? format.getPattern()
-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
-            final Locale loc = format.hasLocale()
-                            ? format.getLocale()
-                            : serializers.getLocale();
+        final String pattern;
+        final Locale loc;
+        if (format.hasPattern()) {
+            pattern = format.getPattern();
+        } else {
+            // If no pattern, get pattern from existing DateFormat if any
+            DateFormat existingDf = serializers.getConfig().getDateFormat();
+            if (existingDf instanceof SimpleDateFormat) {
+                pattern = ((SimpleDateFormat) existingDf).toPattern();
+            } else {
+                // Fallback to ISO-8601 if no pattern provided and original DF is not SimpleDateFormat
+                pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
+            }
+        }
+        if (format.hasLocale()) {
+            loc = format.getLocale();
+        } else {
+            Locale existingLocale = null;
+            DateFormat existingDf = serializers.getConfig().getDateFormat();
+            if (existingDf instanceof SimpleDateFormat) {
+                existingLocale = ((SimpleDateFormat) existingDf).getLocale();
+            }
+            loc = (existingLocale != null) ? existingLocale : serializers.getLocale();
+        }
         SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
         if (tz == null) {
             tz = serializers.getTimeZone();
         }
         df.setTimeZone(tz);
         return withFormat(Boolean.FALSE, df);
     }
 
-        // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
     return this;
 }
\ No newline at end of file
