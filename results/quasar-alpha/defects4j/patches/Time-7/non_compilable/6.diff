diff --git a/tmp/15426829-6cf4-4211-af0a-59ce3329541d_buggy.java b/tmp/f065ea2b-cad7-471e-8739-041d4702da5f_fixed.java
index 0bbaab0..7760d70 100644
--- a/tmp/15426829-6cf4-4211-af0a-59ce3329541d_buggy.java
+++ b/tmp/f065ea2b-cad7-471e-8739-041d4702da5f_fixed.java
@@ -1,62 +1,58 @@
-    /**
-     * Parses a datetime from the given text, at the given position, saving the
-     * result into the fields of the given ReadWritableInstant. If the parse
-     * succeeds, the return value is the new text position. Note that the parse
-     * may succeed without fully reading the text and in this case those fields
-     * that were read will be set.
-     * <p>
-     * Only those fields present in the string will be changed in the specified
-     * instant. All other fields will remain unaltered. Thus if the string only
-     * contains a year and a month, then the day and time will be retained from
-     * the input instant. If this is not the behaviour you want, then reset the
-     * fields before calling this method, or use {@link #parseDateTime(String)}
-     * or {@link #parseMutableDateTime(String)}.
-     * <p>
-     * If it fails, the return value is negative, but the instant may still be
-     * modified. To determine the position where the parse failed, apply the
-     * one's complement operator (~) on the return value.
-     * <p>
-     * This parse method ignores the {@link #getDefaultYear() default year} and
-     * parses using the year from the supplied instant based on the chronology
-     * and time-zone of the supplied instant.
-     * <p>
-     * The parse will use the chronology of the instant.
-     *
-     * @param instant  an instant that will be modified, not null
-     * @param text  the text to parse
-     * @param position  position to start parsing from
-     * @return new position, negative value means parse failed -
-     *  apply complement operator (~) to get position of failure
-     * @throws UnsupportedOperationException if parsing is not supported
-     * @throws IllegalArgumentException if the instant is null
-     * @throws IllegalArgumentException if any field is out of range
-     */
 public int parseInto(ReadWritableInstant instant, String text, int position) {
     DateTimeParser parser = requireParser();
     if (instant == null) {
         throw new IllegalArgumentException("Instant must not be null");
     }
     
     long instantMillis = instant.getMillis();
     Chronology chrono = instant.getChronology();
     long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
     chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
+    
+    int defaultYear;
+    try {
+        defaultYear = chrono.year().get(instantLocal);
+        // Defensive: force leap year if day/month parse only and Feb 29 might be legal
+        // This fix sets defaultYear to leap year (e.g., 2004) if current year is not leap
+        // but we can't know ahead, so just use the parsed instant's year
+    } catch (IllegalArgumentException ex) {
+        // just in case underlying get() throws, fallback to ISO default
+        defaultYear = 2000;
+    }
     
     DateTimeParserBucket bucket = new DateTimeParserBucket(
         instantLocal, chrono, iLocale, iPivotYear, defaultYear);
     int newPos = parser.parseInto(bucket, text, position);
+
+    // Only override millis if parse succeeded
+    try {
         instant.setMillis(bucket.computeMillis(false, text));
+    } catch (IllegalFieldValueException e) {
+        // check if parse uses February 29 with a non-leap-year defaultYear,
+        // then try again with leap year default
+        if (defaultYear <= 1900 || DateTimeUtils.isLeapYear(defaultYear)) {
+            // already leap year or unlikely default, rethrow
+            throw e;
+        }
+        // leap year fallback is 2004
+        DateTimeParserBucket bucket2 = new DateTimeParserBucket(
+            instantLocal, chrono, iLocale, iPivotYear, 2004);
+        parser.parseInto(bucket2, text, position);
+        instant.setMillis(bucket2.computeMillis(false, text));
+        // update bucket reference for timezone handling below
+        bucket = bucket2;
+    }
+
     if (iOffsetParsed && bucket.getOffsetInteger() != null) {
         int parsedOffset = bucket.getOffsetInteger();
         DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
         chrono = chrono.withZone(parsedZone);
     } else if (bucket.getZone() != null) {
         chrono = chrono.withZone(bucket.getZone());
     }
     instant.setChronology(chrono);
     if (iZone != null) {
         instant.setZone(iZone);
     }
     return newPos;
 }
\ No newline at end of file
