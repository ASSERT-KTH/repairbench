diff --git a/tmp/2ee37d18-a0ae-462b-b7ef-85d59af87c49_buggy.java b/tmp/67ef4619-c542-4c31-80c1-ab3bd539640d_fixed.java
index ec6c9ee..7defb23 100644
--- a/tmp/2ee37d18-a0ae-462b-b7ef-85d59af87c49_buggy.java
+++ b/tmp/67ef4619-c542-4c31-80c1-ab3bd539640d_fixed.java
@@ -1,21 +1,42 @@
 //-----------------------------------------------------------------------
 private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {
     if (notPrinter && notParser) {
         throw new IllegalStateException("Builder has created neither a printer nor a parser");
     }
     int size = elementPairs.size();
     if (size >= 2 && elementPairs.get(0) instanceof Separator) {
         Separator sep = (Separator) elementPairs.get(0);
         PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
         sep = sep.finish(f.getPrinter(), f.getParser());
-                return new PeriodFormatter(sep, sep);
+        // Compose the new PeriodPrinter/PeriodParser with the separator together with the first element
+        PeriodPrinter newPrinter;
+        PeriodParser newParser;
+        if (notPrinter) {
+            newPrinter = null;
+        } else {
+            Object first = elementPairs.get(1);
+            PeriodPrinter firstPrinter = (first instanceof PeriodFormatter)
+                ? ((PeriodFormatter) first).getPrinter()
+                : (PeriodPrinter) first;
+            newPrinter = new Composite(new PeriodPrinter[] { firstPrinter, sep });
+        }
+        if (notParser) {
+            newParser = null;
+        } else {
+            Object first = elementPairs.get(1);
+            PeriodParser firstParser = (first instanceof PeriodFormatter)
+                ? ((PeriodFormatter) first).getParser()
+                : (PeriodParser) first;
+            newParser = new Composite(new PeriodParser[] { firstParser, sep });
+        }
+        return new PeriodFormatter(newPrinter, newParser);
     }
     Object[] comp = createComposite(elementPairs);
     if (notPrinter) {
         return new PeriodFormatter(null, (PeriodParser) comp[1]);
     } else if (notParser) {
         return new PeriodFormatter((PeriodPrinter) comp[0], null);
     } else {
         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
     }
 }
\ No newline at end of file
