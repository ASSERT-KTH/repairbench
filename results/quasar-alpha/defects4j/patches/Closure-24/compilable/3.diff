diff --git a/tmp/3a4992c3-8b04-4435-91c7-7fbe39d1e79e_buggy.java b/tmp/ec13a8eb-aa42-4a50-a96d-0c27683dd5c8_fixed.java
index 602226b..4dffd28 100644
--- a/tmp/3a4992c3-8b04-4435-91c7-7fbe39d1e79e_buggy.java
+++ b/tmp/ec13a8eb-aa42-4a50-a96d-0c27683dd5c8_fixed.java
@@ -1,26 +1,24 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+    if (parent != null && parent.isVar()) {
+      if (n.hasChildren()) {
+        Node rhs = n.getFirstChild();
+        if (rhs.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
           String qualifiedName =
               aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
-        } else {
-          // TODO(robbyw): Support using locals for private variables.
+          continue;
+        }
+      }
+      // Not an alias assignment: report error
       report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
     }
   }
 }
\ No newline at end of file
-    }
