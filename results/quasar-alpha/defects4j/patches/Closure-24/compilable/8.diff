diff --git a/tmp/1505bfd1-f6f1-4ac8-90fa-e391b21254de_buggy.java b/tmp/118a5080-1813-4721-a94f-a03c54010729_fixed.java
index 602226b..d4d61b0 100644
--- a/tmp/1505bfd1-f6f1-4ac8-90fa-e391b21254de_buggy.java
+++ b/tmp/118a5080-1813-4721-a94f-a03c54010729_fixed.java
@@ -1,26 +1,28 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
     int type = n.getType();
     Node parent = n.getParent();
+
     if (parent.isVar()) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+      if (n.hasChildren()) {
+        Node child = n.getFirstChild();
+        if (child.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Non-alias local variable assigned non-qualified-name initializer.
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
+        // Variable declaration without initializer is not an alias.
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
