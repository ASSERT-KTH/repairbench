diff --git a/tmp/2e01533b-bf15-4c22-85dc-df0c7f0db097_buggy.java b/tmp/ee97bb3e-56bb-4d16-ae52-0e0fc3c901d4_fixed.java
index 602226b..4b841c2 100644
--- a/tmp/2e01533b-bf15-4c22-85dc-df0c7f0db097_buggy.java
+++ b/tmp/ee97bb3e-56bb-4d16-ae52-0e0fc3c901d4_fixed.java
@@ -1,26 +1,30 @@
 private void findAliases(NodeTraversal t) {
   Scope scope = t.getScope();
   for (Var v : scope.getVarIterable()) {
     Node n = v.getNode();
-        int type = n.getType();
     Node parent = n.getParent();
-        if (parent.isVar()) {
+    if (parent != null && parent.isVar()) {
       if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        Node rhs = n.getFirstChild();
+        if (rhs.isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
           aliases.put(name, aliasVar);
 
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+          String qualifiedName = aliasVar.getInitialValue().getQualifiedName();
           transformation.addAlias(name, qualifiedName);
           // Bleeding functions already get a BAD_PARAMETERS error, so just
           // do nothing.
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
         } else {
-          // TODO(robbyw): Support using locals for private variables.
+          // Not an alias - local assigned to non-qualified value
+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+        }
+      } else {
+        // No initializer or initializer not qualified name
         report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
       }
     }
   }
 }
\ No newline at end of file
