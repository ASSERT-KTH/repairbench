diff --git a/tmp/f973debd-eebc-45d7-96ac-75972f92e2af_buggy.java b/tmp/067f5db2-5141-4ba6-94fe-435b533fc87c_fixed.java
index 6c0aa19..bbbbdb7 100644
--- a/tmp/f973debd-eebc-45d7-96ac-75972f92e2af_buggy.java
+++ b/tmp/067f5db2-5141-4ba6-94fe-435b533fc87c_fixed.java
@@ -1,20 +1,31 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
+    this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;
+    // Prime the buffer with signature bytes in case we're at stream start
+    try {
+        byte[] signatureBuffer = new byte[4];
+        int bytesRead = inputStream.read(signatureBuffer);
+        if (bytesRead > 0) {
             in = new PushbackInputStream(inputStream, buf.capacity());
-        this.allowStoredEntriesWithDataDescriptor =
-            allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+            in.unread(signatureBuffer, 0, bytesRead);
+        } else {
+            in = new PushbackInputStream(inputStream, buf.capacity());
+        }
+    } catch (IOException e) {
+        // fallback: just wrap the input stream without priming
+        in = new PushbackInputStream(inputStream, buf.capacity());
+    }
 }
\ No newline at end of file
