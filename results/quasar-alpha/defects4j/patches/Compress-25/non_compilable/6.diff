diff --git a/tmp/b623ac36-7178-49bf-83ea-4f562b9934f5_buggy.java b/tmp/7c5b72fe-0d22-4d11-b9bc-92c8d85e581f_fixed.java
index 6c0aa19..389bcd2 100644
--- a/tmp/b623ac36-7178-49bf-83ea-4f562b9934f5_buggy.java
+++ b/tmp/7c5b72fe-0d22-4d11-b9bc-92c8d85e581f_fixed.java
@@ -1,20 +1,34 @@
 /**
  * @param encoding the encoding to use for file names, use null
  * for the platform's default encoding
  * @param useUnicodeExtraFields whether to use InfoZIP Unicode
  * Extra Fields (if present) to set the file names.
  * @param allowStoredEntriesWithDataDescriptor whether the stream
  * will try to read STORED entries that use a data descriptor
  * @since 1.1
  */
 public ZipArchiveInputStream(InputStream inputStream,
                              String encoding,
                              boolean useUnicodeExtraFields,
                              boolean allowStoredEntriesWithDataDescriptor) {
     zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     this.useUnicodeExtraFields = useUnicodeExtraFields;
-        in = new PushbackInputStream(inputStream, buf.capacity());
     this.allowStoredEntriesWithDataDescriptor =
         allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+
+    // Read ahead the header signature bytes to determine entry type
+    // this is necessary for proper data descriptors behavior
+    in = new PushbackInputStream(inputStream, buf.capacity() + 4);
+    try {
+        byte[] signatureBytes = new byte[4];
+        int read = inputStream.read(signatureBytes);
+        if (read == 4) {
+            in.unread(signatureBytes, 0, 4);
+        } else if (read > 0) {
+            in.unread(signatureBytes, 0, read);
+        }
+        // else leave empty
+    } catch (IOException e) {
+        // ignore, leave stream as-is
+    }
 }
\ No newline at end of file
