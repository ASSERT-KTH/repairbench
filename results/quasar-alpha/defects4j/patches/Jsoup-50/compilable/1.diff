diff --git a/tmp/e9ed5682-20da-46ef-96dc-96a77bc49976_buggy.java b/tmp/8a9f4931-2ab4-45ee-803d-978d991a9e5b_fixed.java
index 25ca093..8ad5042 100644
--- a/tmp/e9ed5682-20da-46ef-96dc-96a77bc49976_buggy.java
+++ b/tmp/8a9f4931-2ab4-45ee-803d-978d991a9e5b_fixed.java
@@ -1,52 +1,76 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // Detect BOM and initial charset
+    if (charsetName == null) {
+        byteData.mark();
+        if (byteData.remaining() >= 4) {
+            int b1 = byteData.get() & 0xFF;
+            int b2 = byteData.get() & 0xFF;
+            int b3 = byteData.get() & 0xFF;
+            int b4 = byteData.get() & 0xFF;
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            if (b1 == 0x00 && b2 == 0x00 && b3 == 0xFE && b4 == 0xFF) {
+                charsetName = "UTF-32BE";
+            } else if (b1 == 0xFF && b2 == 0xFE && b3 == 0x00 && b4 == 0x00) {
+                charsetName = "UTF-32LE";
+            } else if (b1 == 0xFE && b2 == 0xFF) {
+                charsetName = "UTF-16BE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else if (b1 == 0xFF && b2 == 0xFE) {
+                charsetName = "UTF-16LE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            } else if (b1 == 0xEF && b2 == 0xBB && b3 == 0xBF) {
+                charsetName = "UTF-8";
+                byteData.reset();
+                byteData.position(byteData.position() + 3);
+            } else {
+                byteData.reset();
+                charsetName = defaultCharset;
+            }
+            if (!charsetName.startsWith("UTF-32")) {
+                byteData.reset();
+            }
+        } else {
+            byteData.reset();
+            charsetName = defaultCharset;
+        }
+    }
+
+    // Apply charset from BOM or specified
+    Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+    docData = Charset.forName(charsetName).decode(byteData).toString();
     doc = parser.parseInput(docData, baseUri);
+
+    if (charsetName.equals(defaultCharset)) {
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
-
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charsetName)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
+                byteData.rewind();
                 charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
-                }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
                 docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
                 doc = parser.parseInput(docData, baseUri);
+            }
+        }
+    }
+
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
\ No newline at end of file
