diff --git a/tmp/78ac7e0b-4354-40f9-a4a1-a548b6b555e7_buggy.java b/tmp/c9c63e88-46c1-46ee-9848-dffa08e2e45b_fixed.java
index 25ca093..f983b64 100644
--- a/tmp/78ac7e0b-4354-40f9-a4a1-a548b6b555e7_buggy.java
+++ b/tmp/c9c63e88-46c1-46ee-9848-dffa08e2e45b_fixed.java
@@ -1,52 +1,84 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOMs and override charsetName
+        byteData.mark();
+        if (byteData.remaining() >= 4) {
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+            byte b4 = byteData.get();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            // UTF-32 BE BOM: 00 00 FE FF
+            if ((b1 == 0x00) && (b2 == 0x00) && (b3 == (byte) 0xFE) && (b4 == (byte) 0xFF)) {
+                charsetName = "UTF-32BE";
+            }
+            // UTF-32 LE BOM: FF FE 00 00
+            else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE) && (b3 == 0x00) && (b4 == 0x00)) {
+                charsetName = "UTF-32LE";
+            }
+            // UTF-8 BOM: EF BB BF
+            else if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {
+                charsetName = "UTF-8";
+                byteData.reset();
+                byteData.position(byteData.position() + 3);
+            }
+            // UTF-16 BE BOM: FE FF
+            else if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {
+                charsetName = "UTF-16BE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            }
+            // UTF-16 LE BOM: FF FE
+            else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {
+                charsetName = "UTF-16LE";
+                byteData.reset();
+                byteData.position(byteData.position() + 2);
+            }
+            else {
+                byteData.reset();
+            }
+        } else {
+            byteData.reset();
+        }
+
+        if (charsetName == null) { // determine from meta or use default
+            docData = Charset.forName(defaultCharset).decode(byteData.slice()).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+                    docData = Charset.forName(charsetName).decode(byteData.slice()).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else {
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
             byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
+            docData = Charset.forName(charsetName).decode(byteData.slice()).toString();
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
