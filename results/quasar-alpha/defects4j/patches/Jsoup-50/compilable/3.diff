diff --git a/tmp/71b2fbd1-6784-457f-a71d-e47bf307efee_buggy.java b/tmp/853b526e-6050-4ac4-ab34-6a9ad563ad29_fixed.java
index 25ca093..b05fb01 100644
--- a/tmp/71b2fbd1-6784-457f-a71d-e47bf307efee_buggy.java
+++ b/tmp/853b526e-6050-4ac4-ab34-6a9ad563ad29_fixed.java
@@ -1,52 +1,152 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    byteData.mark();
+    String bomCharset = null;
+
+    // detect BOM and override charsetName if necessary
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+
+        // Check for BOMs in order from largest to smallest
+        if ((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF)) {
+            bomCharset = "UTF-32BE";
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00)) {
+            bomCharset = "UTF-32LE";
+        } else if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+            bomCharset = "UTF-8";
+            byteData.reset();
+            byteData.get(new byte[3]); // skip 3-byte BOM
+        } else if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) {
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.get(new byte[2]); // skip 2-byte BOM
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) {
+            bomCharset = "UTF-16LE";
+            byteData.reset();
+            byteData.get(new byte[2]); // skip 2-byte BOM
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+
+        if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+            bomCharset = "UTF-8";
+            byteData.position(byteData.position()); // already advanced 3 bytes
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+
+        if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) {
+            bomCharset = "UTF-16BE";
+            byteData.position(byteData.position()); // already advanced 2 bytes
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) {
+            bomCharset = "UTF-16LE";
+            byteData.position(byteData.position()); // already advanced 2 bytes
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        Charset charset = Charset.forName(defaultCharset);
+        docData = charset.decode(byteData.asReadOnlyBuffer()).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                // skip BOM again if present
+                // re-detect BOM after rewind
+                byteData.mark();
+                if (byteData.remaining() >= 4) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    byte b4 = byteData.get();
+
+                    if ((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) ||
+                        (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00)) {
+                        // skip 4-byte BOM
+                    } else if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+                        // skip 3-byte BOM
+                        byteData.reset();
+                        byteData.get(new byte[3]);
+                    } else if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) {
+                        byteData.reset();
+                        byteData.get(new byte[2]);
+                    } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) {
+                        byteData.reset();
+                        byteData.get(new byte[2]);
+                    } else {
+                        byteData.reset();
+                    }
+                } else if (byteData.remaining() >= 3) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) {
+                        byteData.position(byteData.position());
+                    } else {
+                        byteData.reset();
+                    }
+                } else if (byteData.remaining() >= 2) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    if ((b1 == (byte)0xFE && b2 == (byte)0xFF) || (b1 == (byte)0xFF && b2 == (byte)0xFE)) {
+                        byteData.position(byteData.position());
+                    } else {
+                        byteData.reset();
+                    }
+                } else {
+                    byteData.reset();
+                }
+
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
