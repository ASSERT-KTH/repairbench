diff --git a/tmp/eac783cc-a598-4d9d-a1d2-b9cb43ce3913_buggy.java b/tmp/bd2a46c7-5e3c-4051-8ee7-b98124bc7eb7_fixed.java
index 25ca093..2f00af6 100644
--- a/tmp/eac783cc-a598-4d9d-a1d2-b9cb43ce3913_buggy.java
+++ b/tmp/bd2a46c7-5e3c-4051-8ee7-b98124bc7eb7_fixed.java
@@ -1,52 +1,111 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    byteData.mark(); // mark at the start to allow reset after BOM detection
+
+    // Detect BOM
+    String bomCharset = null;
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+
+        if (b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF) {
+            bomCharset = "UTF-32BE";
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00) {
+            bomCharset = "UTF-32LE";
+        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+            byteData.reset();
+            byteData.position(byteData.position() + 3); // skip BOM bytes
+        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.position(byteData.position() + 2); // skip BOM bytes
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            byteData.reset();
+            byteData.position(byteData.position() + 2); // skip BOM bytes
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+            byteData.reset();
+            byteData.position(byteData.position() + 3);
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.position(byteData.position() + 2);
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+            byteData.reset();
+            byteData.position(byteData.position() + 2);
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        // decode as UTF-8 or BOM charset
+        if (bomCharset != null) {
+            docData = Charset.forName(bomCharset).decode(byteData).toString();
+        } else {
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        }
+
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) { // if not found, will keep utf-8 or bomCharset as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 &&
+                    (bomCharset == null || !foundCharset.equalsIgnoreCase(bomCharset))) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.reset(); // reset buffer to beginning to re-decode
+                doc = null;
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.reset();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
