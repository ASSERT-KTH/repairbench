diff --git a/tmp/d378f492-8936-4062-933c-2237697cd500_buggy.java b/tmp/a9608bfa-c9d3-4044-b501-6a4b121c9886_fixed.java
index 25ca093..ff3f419 100644
--- a/tmp/d378f492-8936-4062-933c-2237697cd500_buggy.java
+++ b/tmp/a9608bfa-c9d3-4044-b501-6a4b121c9886_fixed.java
@@ -1,52 +1,80 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Check if BOM is present and determine charset if not provided
+        if (byteData.remaining() >= 4 && charsetName == null) {
+            byteData.mark();
+            byte b1 = byteData.get();
+            byte b2 = byteData.get();
+            byte b3 = byteData.get();
+            byte b4 = byteData.get();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+            // detect UTF variants with BOM
+            if ((b1 == (byte)0x00 && b2 == (byte)0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF)) { // UTF-32, big-endian
+                charsetName = "UTF-32BE";
+            } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == (byte)0x00 && b4 == (byte)0x00)) { // UTF-32, little-endian
+                charsetName = "UTF-32LE";
+            } else if ((b1 == (byte)0xFE && b2 == (byte)0xFF)) { // UTF-16, big-endian
+                charsetName = "UTF-16BE";
+                byteData.reset();
+                byteData.get(); byteData.get(); // consume only BOM len 2
+            } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE)) { // UTF-16, little-endian
+                charsetName = "UTF-16LE";
+                byteData.reset();
+                byteData.get(); byteData.get(); // consume only BOM len 2
+            } else if ((b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF)) { // UTF-8 BOM
+                charsetName = "UTF-8";
+                byteData.reset();
+                byteData.get(); byteData.get(); byteData.get(); // consume BOM
+            } else {
+                byteData.reset(); // no known BOM detected
+            }
+            if (charsetName != null && (charsetName.startsWith("UTF-32"))) {
+                // reset + consume 4 byte BOM
+                byteData.reset();
+                byteData.get(); byteData.get(); byteData.get(); byteData.get();
+            }
+        }
+
+        if (charsetName == null) {
+            // Use defaultCharset to decode
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+        } else {
+            // decode with provided or BOM-detected charset
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
+            if (charsetName != null)
                 doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
\ No newline at end of file
