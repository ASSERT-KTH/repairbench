diff --git a/tmp/fb1b919d-dd91-4726-bca1-24aca07e71ca_buggy.java b/tmp/bc6f36e5-9964-4072-8c42-3611b52768ea_fixed.java
index 25ca093..21f5579 100644
--- a/tmp/fb1b919d-dd91-4726-bca1-24aca07e71ca_buggy.java
+++ b/tmp/bc6f36e5-9964-4072-8c42-3611b52768ea_fixed.java
@@ -1,52 +1,107 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // detect BOM for automatic charset detection
+    byteData.mark();
+    String bomCharset = null;
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+
+        // BOM detection order matters - detect 4-byte BOMs first
+        if ((b1 == (byte)0x00) && (b2 == (byte)0x00) && (b3 == (byte)0xFE) && (b4 == (byte)0xFF)) {
+            bomCharset = "UTF-32BE";
+        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE) && (b3 == (byte)0x00) && (b4 == (byte)0x00)) {
+            bomCharset = "UTF-32LE";
+        } else if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {
+            byteData.position(byteData.position() - 1); // unread 4th byte
+            bomCharset = "UTF-8";
+        } else if ((b1 == (byte)0xFE) && (b2 == (byte)0xFF)) {
+            // UTF-16BE BOM
+            byteData.position(byteData.position() - 2); // unread 3rd and 4th bytes
+            bomCharset = "UTF-16BE";
+        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE)) {
+            // check if UTF-16LE or UTF-32LE BOM
+            if ((b3 == (byte)0x00) && (b4 == (byte)0x00)) {
+                bomCharset = "UTF-32LE";
+            } else {
+                byteData.position(byteData.position() - 2); // unread 3rd and 4th bytes
+                bomCharset = "UTF-16LE";
+            }
+        } else {
+            byteData.reset();
+        }
+        // reset will set buffer position back if no BOM found
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        if ((b1 == (byte)0xEF) && (b2 == (byte)0xBB) && (b3 == (byte)0xBF)) {
+            bomCharset = "UTF-8";
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if ((b1 == (byte)0xFE) && (b2 == (byte)0xFF)) {
+            bomCharset = "UTF-16BE";
+        } else if ((b1 == (byte)0xFF) && (b2 == (byte)0xFE)) {
+            bomCharset = "UTF-16LE";
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && (charsetName == null || !foundCharset.equalsIgnoreCase(charsetName))) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri);
+                doc.outputSettings().charset(charsetName);
+                return doc;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    }
+
+    if (doc == null) {
+        byteData.rewind();
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
+
     return doc;
 }
\ No newline at end of file
