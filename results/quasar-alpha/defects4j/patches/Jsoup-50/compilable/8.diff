diff --git a/tmp/b9d73fb7-aa26-4a22-8570-d3dd4510f3f3_buggy.java b/tmp/d2f112df-6f7d-4140-8bfe-01ded23b1771_fixed.java
index 25ca093..393b509 100644
--- a/tmp/b9d73fb7-aa26-4a22-8570-d3dd4510f3f3_buggy.java
+++ b/tmp/d2f112df-6f7d-4140-8bfe-01ded23b1771_fixed.java
@@ -1,52 +1,179 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // detect BOM and adjust charsetName accordingly
+    byteData.mark();
+    String bomCharset = null;
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+
+        // UTF-32 BE BOM: 00 00 FE FF
+        if ((b1 == 0x00) && (b2 == 0x00) && (b3 == (byte) 0xFE) && (b4 == (byte) 0xFF)) {
+            bomCharset = "UTF-32BE";
+        }
+        // UTF-32 LE BOM: FF FE 00 00
+        else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE) && (b3 == 0x00) && (b4 == 0x00)) {
+            bomCharset = "UTF-32LE";
+        } else if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {
+            // UTF-8 BOM
+            bomCharset = "UTF-8";
+            byteData.reset();
+            byteData.get(); byteData.get(); byteData.get(); // skip 3
+        } else if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {
+            // UTF-16 BE BOM
+            bomCharset = "UTF-16BE";
+            byteData.reset();
+            byteData.get(); byteData.get(); // skip 2
+        } else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {
+            // possible UTF-16 LE or UTF-32 LE with BOM prefix
+            if ((b3 == 0x00) && (b4 == 0x00)) {
+                bomCharset = "UTF-32LE";
+            } else {
+                bomCharset = "UTF-16LE";
+                byteData.reset();
+                byteData.get(); byteData.get(); // skip 2
+            }
+        }
+        if (!"UTF-8".equals(bomCharset) && !"UTF-16BE".equals(bomCharset) && !"UTF-16LE".equals(bomCharset) && !"UTF-32BE".equals(bomCharset) && !"UTF-32LE".equals(bomCharset)) {
+            // no BOM found
+            byteData.reset();
+        } else if ("UTF-32BE".equals(bomCharset) || "UTF-32LE".equals(bomCharset)) {
+            // skip 4 BOM bytes
+            byteData.reset();
+            byteData.get(); byteData.get(); byteData.get(); byteData.get();
+        }
+    } else if (byteData.remaining() >= 3) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {
+            bomCharset = "UTF-8";
+        }
+        if ("UTF-8".equals(bomCharset)) {
+            // skip 3 BOM bytes
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 2) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {
+            bomCharset = "UTF-16BE";
+        } else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {
+            bomCharset = "UTF-16LE";
+        }
+        if ("UTF-16BE".equals(bomCharset) || "UTF-16LE".equals(bomCharset)) {
+            // skip 2 BOM bytes
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // first parse as UTF-8 (or BOM-detected)
+        Charset charset = Charset.forName(bomCharset != null ? bomCharset : defaultCharset);
+        docData = charset.decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(charset.name())) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
+                // skip BOM again if present and different encoding used initially
+                // re-detect BOM to skip bytes
+                byteData.mark();
+                if (byteData.remaining() >= 4) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    byte b4 = byteData.get();
+                    if ((b1 == 0x00) && (b2 == 0x00) && (b3 == (byte) 0xFE) && (b4 == (byte) 0xFF)) {
+                        // UTF-32BE BOM
+                    } else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE) && (b3 == 0x00) && (b4 == 0x00)) {
+                        // UTF-32LE BOM
+                    } else if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {
+                        byteData.reset();
+                        byteData.get(); byteData.get(); byteData.get();
+                    } else if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {
+                        byteData.reset();
+                        byteData.get(); byteData.get();
+                    } else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {
+                        if ((b3 == 0x00) && (b4 == 0x00)) {
+                            // UTF-32LE BOM
+                        } else {
+                            byteData.reset();
+                            byteData.get(); byteData.get();
+                        }
+                    } else {
+                        byteData.reset();
+                    }
+                } else if (byteData.remaining() >= 3) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    byte b3 = byteData.get();
+                    if ((b1 == (byte) 0xEF) && (b2 == (byte) 0xBB) && (b3 == (byte) 0xBF)) {
+                        // UTF-8 BOM
+                    } else {
+                        byteData.reset();
+                    }
+                } else if (byteData.remaining() >= 2) {
+                    byte b1 = byteData.get();
+                    byte b2 = byteData.get();
+                    if ((b1 == (byte) 0xFE) && (b2 == (byte) 0xFF)) {
+                        // UTF-16BE
+                    } else if ((b1 == (byte) 0xFF) && (b2 == (byte) 0xFE)) {
+                        // UTF-16LE
+                    } else {
+                        byteData.reset();
+                    }
+                } else {
+                    byteData.reset();
+                }
+
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = null; // will parse again below
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+        Charset charset = Charset.forName(charsetName);
+        docData = charset.decode(byteData).toString();
     }
+
+    // check if the first char is BOM marker, strip if so
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
