diff --git a/tmp/09f48288-82e1-4bc1-95b1-62b73b055bc0_buggy.java b/tmp/4ae3b539-5ea0-406b-ab2a-9339d0bdbdab_fixed.java
index 25ca093..ca5b948 100644
--- a/tmp/09f48288-82e1-4bc1-95b1-62b73b055bc0_buggy.java
+++ b/tmp/4ae3b539-5ea0-406b-ab2a-9339d0bdbdab_fixed.java
@@ -1,52 +1,102 @@
 // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    String bomCharset = null;
+    byteData.mark();
+    if (byteData.remaining() >= 4) {
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+        byte b4 = byteData.get();
+
+        // Check for UTF-32 BOMs
+        if ((b1 == 0x00 && b2 == 0x00 && b3 == (byte)0xFE && b4 == (byte)0xFF)) {
+            bomCharset = "UTF-32BE";
+        } else if ((b1 == (byte)0xFF && b2 == (byte)0xFE && b3 == 0x00 && b4 == 0x00)) {
+            bomCharset = "UTF-32LE";
+        } else if (b1 == (byte)0xFE && b2 == (byte)0xFF) { // UTF-16 BE BOM
+            bomCharset = "UTF-16BE";
+            byteData.position(byteData.position() - 2); // push back two bytes
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) { // UTF-16 LE BOM
+            bomCharset = "UTF-16LE";
+            byteData.position(byteData.position() - 2);
+        } else if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) { // UTF-8 BOM
+            bomCharset = "UTF-8";
+            byteData.position(byteData.position() - 1); // rewind one byte after BOM
+        } else {
+            // no BOM detected, rewind
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >= 3) { // check for possible UTF-8 BOM
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+        byte b3 = byteData.get();
+
+        if (b1 == (byte)0xEF && b2 == (byte)0xBB && b3 == (byte)0xBF) {
+            bomCharset = "UTF-8";
+        } else {
+            byteData.reset();
+        }
+    } else if (byteData.remaining() >=2) { // check for UTF-16 BOMs
+        byte b1 = byteData.get();
+        byte b2 = byteData.get();
+
+        if (b1 == (byte)0xFE && b2 == (byte)0xFF) {
+            bomCharset = "UTF-16BE";
+        } else if (b1 == (byte)0xFF && b2 == (byte)0xFE) {
+            bomCharset = "UTF-16LE";
+        } else {
+            byteData.reset();
+        }
+    } else {
+        byteData.reset();
+    }
+
+    if (bomCharset != null) {
+        charsetName = bomCharset;
+    }
 
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equalsIgnoreCase(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
-        } else { // specified by content type header (or by user on file load)
+    } else { // specified by content type header, or via BOM detection
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
+    // handling of possible BOM character after decoding with UTF-8
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
\ No newline at end of file
