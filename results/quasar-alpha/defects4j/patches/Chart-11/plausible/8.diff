diff --git a/tmp/a1585964-4e4d-48a9-8a00-74712aa5f536_buggy.java b/tmp/51c62d92-9782-4e65-8132-81d7b2e4aa06_fixed.java
index ad7255c..418f5b4 100644
--- a/tmp/a1585964-4e4d-48a9-8a00-74712aa5f536_buggy.java
+++ b/tmp/51c62d92-9782-4e65-8132-81d7b2e4aa06_fixed.java
@@ -1,42 +1,53 @@
-    /**
-     * Tests two polygons for equality.  If both are <code>null</code> this
-     * method returns <code>true</code>.
-     *
-     * @param p1  path 1 (<code>null</code> permitted).
-     * @param p2  path 2 (<code>null</code> permitted).
-     *
-     * @return A boolean.
-     */
     public static boolean equal(GeneralPath p1, GeneralPath p2) {
         if (p1 == null) {
             return (p2 == null);
         }
         if (p2 == null) {
             return false;
         }
         if (p1.getWindingRule() != p2.getWindingRule()) {
             return false;
         }
         PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
+        PathIterator iterator2 = p2.getPathIterator(null);
         double[] d1 = new double[6];
         double[] d2 = new double[6];
         boolean done = iterator1.isDone() && iterator2.isDone();
         while (!done) {
             if (iterator1.isDone() != iterator2.isDone()) {
                 return false;
             }
             int seg1 = iterator1.currentSegment(d1);
             int seg2 = iterator2.currentSegment(d2);
             if (seg1 != seg2) {
                 return false;
             }
-            if (!Arrays.equals(d1, d2)) {
+            int numPoints;
+            switch (seg1) {
+                case PathIterator.SEG_MOVETO:
+                case PathIterator.SEG_LINETO:
+                    numPoints = 2;
+                    break;
+                case PathIterator.SEG_QUADTO:
+                    numPoints = 4;
+                    break;
+                case PathIterator.SEG_CUBICTO:
+                    numPoints = 6;
+                    break;
+                case PathIterator.SEG_CLOSE:
+                    numPoints = 0;
+                    break;
+                default:
+                    numPoints = 0;
+            }
+            for (int i = 0; i < numPoints; i++) {
+                if (d1[i] != d2[i]) {
                     return false;
                 }
+            }
             iterator1.next();
             iterator2.next();
             done = iterator1.isDone() && iterator2.isDone();
         }
         return true;
     }
\ No newline at end of file
