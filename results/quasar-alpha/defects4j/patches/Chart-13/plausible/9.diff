diff --git a/tmp/3081c92d-572d-4521-ae23-3f7e405433fe_buggy.java b/tmp/901663da-88c4-4bfb-b3e9-72ffdbfb01cb_fixed.java
index 63a7c80..2563bf8 100644
--- a/tmp/3081c92d-572d-4521-ae23-3f7e405433fe_buggy.java
+++ b/tmp/901663da-88c4-4bfb-b3e9-72ffdbfb01cb_fixed.java
@@ -1,77 +1,107 @@
 /**
  * Arranges the items within a container.
  *
  * @param container  the container.
  * @param constraint  the constraint.
  * @param g2  the graphics device.
  *
  * @return The container size after the arrangement.
  */
 protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                            RectangleConstraint constraint) {
     double[] w = new double[5];
     double[] h = new double[5];
     w[0] = constraint.getWidth();
+    double heightConstraint = constraint.getHeight();
+
+    // Arrange the top block
     if (this.topBlock != null) {
         RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                 LengthConstraintType.FIXED, 0.0,
-                    new Range(0.0, constraint.getHeight()),
+                heightConstraint >= 0.0 ? new Range(0.0, heightConstraint) : new Range(0.0, 0.0),
                 LengthConstraintType.RANGE);
         Size2D size = this.topBlock.arrange(g2, c1);
         h[0] = size.height;
     }
+
+    // Arrange the bottom block
     w[1] = w[0];
+    double remainingHeightForBottom = heightConstraint - h[0];
+    if (remainingHeightForBottom < 0.0) {
+        remainingHeightForBottom = 0.0;
+    }
     if (this.bottomBlock != null) {
-            RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+        RectangleConstraint c2 = new RectangleConstraint(w[1], null,
+                LengthConstraintType.FIXED, 0.0,
+                remainingHeightForBottom >= 0.0 ? new Range(0.0, remainingHeightForBottom) : new Range(0.0, 0.0),
+                LengthConstraintType.RANGE);
         Size2D size = this.bottomBlock.arrange(g2, c2);
         h[1] = size.height;
     }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+    double remainingHeight = heightConstraint - h[0] - h[1];
+    if (remainingHeight < 0.0) {
+        remainingHeight = 0.0;
+    }
+    h[2] = remainingHeight;
+
+    // Arrange the left block
     if (this.leftBlock != null) {
         RectangleConstraint c3 = new RectangleConstraint(0.0,
                 new Range(0.0, constraint.getWidth()),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.leftBlock.arrange(g2, c3);
         w[2] = size.width;
     }
+
     h[3] = h[2];
+
+    // Arrange the right block
+    double remainingWidthForRight = constraint.getWidth() - w[2];
+    if (remainingWidthForRight < 0.0) {
+        remainingWidthForRight = 0.0;
+    }
     if (this.rightBlock != null) {
         RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                new Range(0.0, remainingWidthForRight),
                 LengthConstraintType.RANGE, h[2], null,
                 LengthConstraintType.FIXED);
         Size2D size = this.rightBlock.arrange(g2, c4);
         w[3] = size.width;
     }
+
     h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+    double remainingWidth = constraint.getWidth() - w[2] - w[3];
+    if (remainingWidth < 0.0) {
+        remainingWidth = 0.0;
+    }
+    w[4] = remainingWidth;
     RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
+
     if (this.centerBlock != null) {
         this.centerBlock.arrange(g2, c5);
     }
 
+    // Set bounds for the blocks
     if (this.topBlock != null) {
-            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
-                    h[0]));
+        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0]));
     }
     if (this.bottomBlock != null) {
-            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
-                    w[1], h[1]));
+        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1]));
     }
     if (this.leftBlock != null) {
-            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
-                    h[2]));
+        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2]));
     }
     if (this.rightBlock != null) {
-            this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
-                    w[3], h[3]));
+        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3]));
     }
     if (this.centerBlock != null) {
-            this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
-                    h[4]));
+        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4]));
     }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+    // The size of the container is fixed in width, height is total of h[0], h[1], h[2]
+    double totalHeight = h[0] + h[2] + h[1];
+    return new Size2D(constraint.getWidth(), totalHeight);
 }
\ No newline at end of file
