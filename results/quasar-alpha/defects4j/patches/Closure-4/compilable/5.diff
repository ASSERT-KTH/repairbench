diff --git a/tmp/9789ff61-b674-45e5-9be6-5493c37e5b8b_buggy.java b/tmp/4d797da5-f64c-4604-942a-1db9dc16dd27_fixed.java
index d6a560a..9c368e6 100644
--- a/tmp/9789ff61-b674-45e5-9be6-5493c37e5b8b_buggy.java
+++ b/tmp/4d797da5-f64c-4604-942a-1db9dc16dd27_fixed.java
@@ -1,33 +1,32 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Attempt early resolution via registry to avoid error warnings.
   boolean resolved = resolveViaRegistry(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this;  // exit early on cycle detection
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this;  // exit early on cycle detection
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
