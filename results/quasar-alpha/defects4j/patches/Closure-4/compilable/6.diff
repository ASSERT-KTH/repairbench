diff --git a/tmp/846c6487-4a3e-4819-89f7-aa7fefe11b94_buggy.java b/tmp/1d976c91-1884-4a86-a6a4-bbb74e2b7bb1_fixed.java
index d6a560a..f926bdb 100644
--- a/tmp/846c6487-4a3e-4819-89f7-aa7fefe11b94_buggy.java
+++ b/tmp/1d976c91-1884-4a86-a6a4-bbb74e2b7bb1_fixed.java
@@ -1,33 +1,34 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // Attempt to resolve via the registry first
   boolean resolved = resolveViaRegistry(t, enclosing);
+
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Early return to avoid further infinite recursion
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // If resolution via registry failed, try resolution via properties
   resolveViaProperties(t, enclosing);
+
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    return this; // Early return to avoid further infinite recursion
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
