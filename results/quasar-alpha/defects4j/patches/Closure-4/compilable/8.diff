diff --git a/tmp/4c171710-07a3-4eb9-9e6a-0a87f8e89751_buggy.java b/tmp/6f61a96c-1d15-450b-8f76-da42bd6fc494_fixed.java
index d6a560a..061b54e 100644
--- a/tmp/4c171710-07a3-4eb9-9e6a-0a87f8e89751_buggy.java
+++ b/tmp/6f61a96c-1d15-450b-8f76-da42bd6fc494_fixed.java
@@ -1,33 +1,37 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First, detect cycles early to avoid infinite recursion.
+  if (detectImplicitPrototypeCycle()) {
+    handleTypeCycle(t);
+    return this;
+  }
+
+  // Attempt to resolve via registry.
   boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+  if (detectImplicitPrototypeCycle()) { // check again after resolution
     handleTypeCycle(t);
+    return this;
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
-      return registry.isLastGeneration() ?
-          getReferencedType() : this;
+    return registry.isLastGeneration() ? getReferencedType() : this;
   }
 
+  // Attempt to resolve via properties if not resolved by registry.
   resolveViaProperties(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
+  if (detectImplicitPrototypeCycle()) { // check again after resolution
     handleTypeCycle(t);
+    return this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
-    return registry.isLastGeneration() ?
-        getReferencedType() : this;
+  return registry.isLastGeneration() ? getReferencedType() : this;
 }
\ No newline at end of file
