diff --git a/tmp/a152a2da-8de1-43b3-a831-1be888efa476_buggy.java b/tmp/274ffc5a-5c27-4ffd-8477-2fd59e7b7a24_fixed.java
index d6a560a..f5b646c 100644
--- a/tmp/a152a2da-8de1-43b3-a831-1be888efa476_buggy.java
+++ b/tmp/274ffc5a-5c27-4ffd-8477-2fd59e7b7a24_fixed.java
@@ -1,33 +1,34 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
-    boolean resolved = resolveViaRegistry(t, enclosing);
+  // First, attempt to resolve via registry
+  if (resolveViaRegistry(t, enclosing)) {
     if (detectImplicitPrototypeCycle()) {
       handleTypeCycle(t);
     }
-
-    if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // If not resolved, resolve via properties
   resolveViaProperties(t, enclosing);
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   super.resolveInternal(t, enclosing);
-    if (isResolved()) {
+  if (detectImplicitPrototypeCycle()) {
+    // If a cycle is still present after property resolution,
+    // report and break the cycle.
+    handleTypeCycle(t);
+  } else if (isResolved()) {
     finishPropertyContinuations();
   }
+
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
