diff --git a/tmp/5cbe6b04-5607-43d8-ba41-2e0fd56fd160_buggy.java b/tmp/fd409957-0d3b-46ac-a70d-9242285f29ef_fixed.java
index cd412d2..967582b 100644
--- a/tmp/5cbe6b04-5607-43d8-ba41-2e0fd56fd160_buggy.java
+++ b/tmp/fd409957-0d3b-46ac-a70d-9242285f29ef_fixed.java
@@ -1,76 +1,114 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+        // Make sure milliseconds exist
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
         }
+        else if (dateStr.charAt(len - 5) == '.') { // partial milliseconds
+            StringBuilder sb = new StringBuilder(dateStr);
+            int milliLen = len - 1 - (len - 5);
+            if (milliLen < 3) {
+                for (int i = 0; i < 3 - milliLen; ++i) {
+                    sb.insert(len - 1, '0');
+                }
+                dateStr = sb.toString();
+            }
+        }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                len = dateStr.length();
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            }
+
+            // Check for fractional seconds
+            int tIndex = dateStr.indexOf('T');
+            int tzIndex = dateStr.length() - 5;
+            int fracIndex = dateStr.lastIndexOf('.', tzIndex);
+            if (fracIndex >= 0) {
+                int milliLen = tzIndex - fracIndex - 1;
+                if (milliLen < 3) {
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    for (int i = 0; i < 3 - milliLen; ++i) {
+                        sb.insert(fracIndex + 1 + milliLen, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            } else {
+                // Check if seconds are missing, by counting number of colons between 'T' and timezone
+                String timePart = dateStr.substring(tIndex + 1, tzIndex);
+                int colonCount = 0;
+                for (int i = 0; i < timePart.length(); ++i) {
+                    if (timePart.charAt(i) == ':') colonCount++;
+                }
+                StringBuilder sb = new StringBuilder(dateStr);
+                if (colonCount == 1) { // missing seconds
+                    sb.insert(tzIndex, ":00.000");
+                } else { // seconds present, missing milliseconds
+                    sb.insert(tzIndex, ".000");
+                }
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIndex = dateStr.indexOf('T');
+            int timeLen = len - tIndex -1;
+            int fracIndex = dateStr.indexOf('.', tIndex);
+            if(fracIndex >= 0) {
+                int milliLen = len - fracIndex -1;
+                if (milliLen < 4) {
+                    for (int i = 0; i < 4 - milliLen; ++i) {
+                        sb.append('0');
+                    }
+                }
+            } else {
+                // Check if seconds are missing, by counting colons
+                String timePart = dateStr.substring(tIndex + 1);
+                int colonCount = 0;
+                for (int i = 0; i < timePart.length(); ++i) {
+                    if (timePart.charAt(i) == ':') colonCount++;
+                }
+                if (colonCount == 1) {
+                    sb.append(":00.000");
+                } else {
                     sb.append(".000");
                 }
+            }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
