diff --git a/tmp/b1ce532a-ad3f-4a56-88e6-5bac935bde17_buggy.java b/tmp/89f8f8f1-612f-48f8-aa93-3ae231473cfb_fixed.java
index cd412d2..859e3a7 100644
--- a/tmp/b1ce532a-ad3f-4a56-88e6-5bac935bde17_buggy.java
+++ b/tmp/89f8f8f1-612f-48f8-aa93-3ae231473cfb_fixed.java
@@ -1,76 +1,138 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Also handle partial milliseconds
+            int dotIndex = dateStr.lastIndexOf('.');
+            if (dotIndex != -1) {
+                int millisLen = len - 1 - dotIndex - 1; // exclude 'Z'
+                if (millisLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    // Pad with zeros up to 3 digits
+                    for (int i = 0; i < (3 - millisLen); ++i) {
+                        sb.insert(len - 1, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
             if (c == ':') { // remove optional colon
                 // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
                 // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+            // After timezone handling, recompute length
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // pad missing seconds
+            int tIndex = dateStr.indexOf('T');
+            if (tIndex >= 0) {
+                int timeLen = len - tIndex - 1;
+                String timePart = dateStr.substring(tIndex + 1, len - 5); // exclude timezone offset
+                // Check if seconds are missing
+                int colonCount = 0;
+                for (int i = 0; i < timePart.length(); ++i) {
+                    if (timePart.charAt(i) == ':') {
+                        colonCount++;
+                    }
+                }
+                if (colonCount == 1) { // Missing seconds
+                    // Insert ":00" before timezone offset
+                    int insertPos = len - 5;
                     StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                    sb.insert(insertPos, ":00");
+                    dateStr = sb.toString();
+                    len = dateStr.length();
+                }
+            }
+            // Now handle milliseconds
+            int plusIndex = dateStr.lastIndexOf('+');
+            int minusIndex = dateStr.lastIndexOf('-');
+            int timezoneIndex = (plusIndex > minusIndex) ? plusIndex : minusIndex;
+            if (timezoneIndex == -1) {
+                timezoneIndex = len;
+            }
+            int dotIndex = dateStr.lastIndexOf('.', timezoneIndex);
+            if (dotIndex != -1) {
+                int millisEnd = timezoneIndex;
+                int millisLen = millisEnd - dotIndex -1;
+                if (millisLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < (3 - millisLen); ++i) {
+                        sb.insert(dotIndex + 1 + millisLen, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            } else {
+                // No milliseconds, so add ".000" before timezone
+                StringBuilder sb = new StringBuilder(dateStr);
+                sb.insert(timezoneIndex, ".000");
                 dateStr = sb.toString();
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
             // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
+            } else {
+                int dotIndex = dateStr.lastIndexOf('.');
+                if (dotIndex != -1) {
+                    int millisLen = len - dotIndex - 1;
+                    if (millisLen < 3) {
+                        for (int i = 0; i < (3 - millisLen); ++i) {
+                            sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
