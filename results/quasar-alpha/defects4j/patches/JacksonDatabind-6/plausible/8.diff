diff --git a/tmp/6ced9711-c894-4a98-bec1-c8c33750f4ce_buggy.java b/tmp/bbdeb90b-da7f-4918-9be8-a3903c8cf64d_fixed.java
index cd412d2..db59787 100644
--- a/tmp/6ced9711-c894-4a98-bec1-c8c33750f4ce_buggy.java
+++ b/tmp/bbdeb90b-da7f-4918-9be8-a3903c8cf64d_fixed.java
@@ -1,76 +1,140 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Check for partial milliseconds, e.g. ".6" or ".61"
+            int milliStart = dateStr.lastIndexOf('.');
+            if (milliStart > 0 && milliStart < len - 1) {
+                int milliDigits = len - 1 - milliStart - 1; // exclude trailing Z
+                if (milliDigits == 1) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(len - 1, "00");
+                    dateStr = sb.toString();
+                } else if (milliDigits == 2) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(len - 1, "0");
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
             if (c == ':') { // remove optional colon
-                    // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
+                len = dateStr.length();
             } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
                 dateStr += "00";
+                len = dateStr.length();
+            }
+            // May have partial milliseconds we need to pad
+            int milliStart = dateStr.lastIndexOf('.');
+            int tzOffset = dateStr.length() - (dateStr.charAt(dateStr.length() - 5) == '+' || dateStr.charAt(dateStr.length() - 5) == '-' ? 5 : 0);
+            if (milliStart > 0 && milliStart < tzOffset) {
+                int milliDigits = tzOffset - milliStart -1;
+                if (milliDigits == 1) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(milliStart + 2, "00");
+                    dateStr = sb.toString();
+                } else if (milliDigits == 2) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(milliStart + 3, "0");
+                    dateStr = sb.toString();
                 }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            } else {
+                // Check if milliseconds missing entirely and seconds missing
+                int timePartStart = dateStr.indexOf('T');
+                if (timePartStart >= 0) {
+                    int plusPos = dateStr.length() - 5;
+                    int timePartLen = plusPos - timePartStart - 1;
+                    int colonCount = 0;
+                    for (int i = timePartStart +1; i < plusPos; ++i) {
+                        if (dateStr.charAt(i) == ':') {
+                            colonCount++;
+                        }
+                    }
+                    if (colonCount ==1) { // hours and minutes only, no seconds
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                        sb.insert(plusPos, ":00.000");
                         dateStr = sb.toString();
+                        len = dateStr.length();
+                    } else if (colonCount ==2) { // has seconds, but missing milliseconds
+                        if (dateStr.charAt(plusPos -1) != '.' && dateStr.charAt(plusPos -2) != '.') {
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            sb.insert(plusPos, ".000");
+                            dateStr = sb.toString();
+                            len = dateStr.length();
+                        }
+                    }
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+            // If not, plain date, patch 'Z' and possibly milliseconds
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
-                        sb.append(".000");
+            int timePos = dateStr.lastIndexOf('T');
+            if (timePos > -1) {
+                int afterT_len = len - timePos -1;
+                int colonCount = 0;
+                for (int i = timePos +1; i < len; ++i) {
+                    if (dateStr.charAt(i) == ':') {
+                        colonCount++;
                     }
+                }
+                int milliStart = dateStr.lastIndexOf('.');
+                if (colonCount == 1) { // hours and minutes only
+                    sb.append(":00.000Z");
+                } else if (colonCount == 2) { // hours, minutes, seconds
+                    if (milliStart < 0 || milliStart < timePos) {
+                        sb.append(".000Z");
+                    } else {
+                        int milliDigits = len - milliStart -1;
+                        if (milliDigits == 1) {
+                            sb.append("00Z");
+                        } else if (milliDigits == 2) {
+                            sb.append("0Z");
+                        } else {
+                            sb.append('Z');
+                        }
+                    }
+                } else {
                     sb.append('Z');
+                }
+            } else {
+                sb.append('Z');
+            }
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
