diff --git a/tmp/04c088b8-e6a3-469f-b4e2-10768b8dd099_buggy.java b/tmp/9711c796-d575-4edd-81c3-a90ba70aa33f_fixed.java
index cd412d2..fd1c856 100644
--- a/tmp/04c088b8-e6a3-469f-b4e2-10768b8dd099_buggy.java
+++ b/tmp/9711c796-d575-4edd-81c3-a90ba70aa33f_fixed.java
@@ -1,76 +1,124 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
     /* 21-May-2009, tatu: DateFormat has very strict handling of
      * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
      */
 
     /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
      * quite simple because we already set date format timezone to be
      * GMT, and hence can just strip out 'Z' altogether
      */
     int len = dateStr.length();
     char c = dateStr.charAt(len-1);
     DateFormat df;
 
     // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len-4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len-1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Check for partial milliseconds, e.g., ".6Z", ".61Z"
+            int milliStart = dateStr.lastIndexOf('.');
+            if (milliStart >= 0 && milliStart < len - 2) {
+                String milliPart = dateStr.substring(milliStart + 1, len - 1); // exclude 'Z'
+                if (milliPart.length() > 0 && milliPart.length() < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - milliPart.length(); i++) {
+                        sb.insert(len - 1, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
         // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len-3);
             if (c == ':') { // remove optional colon
-                    // remove colon
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len-3, len-2);
                 dateStr = sb.toString();
             } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            // Milliseconds partial or missing; and even seconds may be missing
+
+            // find 'T'
+            int tIndex = dateStr.lastIndexOf('T');
+            int tzSign = Math.max(dateStr.lastIndexOf('+'), dateStr.lastIndexOf('-'));
+            int milliStart = dateStr.lastIndexOf('.', tzSign - 1);
+            int colonAfterT = dateStr.indexOf(':', tIndex);
+            int secondColon = dateStr.indexOf(':', colonAfterT + 1);
+
             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+
+            // Determine if seconds are missing, if time chunk exists
+            boolean hasSeconds = (secondColon > 0) && (secondColon < tzSign);
+            if (!hasSeconds && colonAfterT > 0 && colonAfterT < tzSign) {
+                // append seconds zero
+                sb.insert(tzSign, ":00");
                 dateStr = sb.toString();
+                tzSign += 3;
             }
+
+            // Update milli insertion point after possible seconds append
+            milliStart = sb.lastIndexOf(".", tzSign - 1);
+
+            // Check for missing milliseconds
+            if (milliStart < 0) {
+                sb.insert(tzSign, ".000");
+            } else {
+                String milliPart = sb.substring(milliStart + 1, tzSign);
+                if (milliPart.length() > 0 && milliPart.length() < 3) {
+                    for (int i = 0; i < 3 - milliPart.length(); i++) {
+                        sb.insert(tzSign, '0');
+                    }
+                }
+            }
+            dateStr = sb.toString();
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
             // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
+            } else {
+                // handle potential partial milliseconds
+                int milliStart = dateStr.lastIndexOf('.');
+                if (milliStart >= 0 && milliStart > dateStr.lastIndexOf('T')) {
+                    String milliPart = dateStr.substring(milliStart + 1);
+                    if (milliPart.length() > 0 && milliPart.length() < 3) {
+                        for (int i = 0; i < 3 - milliPart.length(); i++) {
+                            sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
