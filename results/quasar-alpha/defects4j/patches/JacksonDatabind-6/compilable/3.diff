diff --git a/tmp/7444d418-4487-4ef8-b6fe-4f8aca818338_buggy.java b/tmp/81eb1ce6-5040-4671-9b23-5ac455df09aa_fixed.java
index cd412d2..d81cae0 100644
--- a/tmp/7444d418-4487-4ef8-b6fe-4f8aca818338_buggy.java
+++ b/tmp/81eb1ce6-5040-4671-9b23-5ac455df09aa_fixed.java
@@ -1,76 +1,115 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else {
+            // Handle possible partial milliseconds like ".6", ".61", ".123"
+            int milliStart = dateStr.lastIndexOf('.');
+            if (milliStart > dateStr.lastIndexOf('T')) {
+                int milliEnd = len - 1; // excluding final 'Z'
+                int milliLen = milliEnd - milliStart - 1;
+                if (milliLen > 0 && milliLen < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - milliLen; i++) {
+                        sb.insert(milliStart + 1 + milliLen + i, '0');
+                    }
+                    dateStr = sb.toString();
+                }
+            }
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
-                c = dateStr.charAt(len-3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            // fix fractional milliseconds if present
+            int tzIndex = dateStr.lastIndexOf('+');
+            if (tzIndex < 0) {
+                tzIndex = dateStr.lastIndexOf('-');
+            }
+            if (tzIndex >= 0) {
+                c = dateStr.charAt(tzIndex - 3);
+                if (c == ':') {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.delete(tzIndex - 3, tzIndex - 2);
+                    dateStr = sb.toString();
+                    tzIndex--; // string got shorter by 1
+                } else if (c == '+' || c == '-') {
+                    dateStr = new StringBuilder(dateStr).insert(tzIndex + 3, "00").toString();
+                }
+
+                int milliStart = dateStr.lastIndexOf('.', tzIndex);
+                int tIndex = dateStr.lastIndexOf('T', tzIndex);
+                if (milliStart > tIndex) {
+                    int milliLen = tzIndex - milliStart - 1;
+                    if (milliLen > 0 && milliLen < 3) {
                         StringBuilder sb = new StringBuilder(dateStr);
-                    sb.delete(len-3, len-2);
+                        for (int i = 0; i < 3 - milliLen; i++) {
+                            sb.insert(milliStart + 1 + milliLen + i, '0');
+                        }
                         dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
-                    dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
-                len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+                    }
+                } else {
+                    // possibly missing seconds
+                    int colonIdx = dateStr.lastIndexOf(':', tzIndex);
+                    if (colonIdx >= 0) {
+                        if (dateStr.indexOf(':', colonIdx + 1) == -1) { // only one colon in time part
                             StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                            sb.insert(tzIndex, ":00.000");
                             dateStr = sb.toString();
+                        } else {
+                            // seconds present but milliseconds missing
+                            StringBuilder sb = new StringBuilder(dateStr);
+                            sb.insert(tzIndex, ".000");
+                            dateStr = sb.toString();
+                        }
+                    }
+                }
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
-                int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            int tIndex = dateStr.lastIndexOf('T');
+            int timeLen = len - tIndex -1;
+            if (tIndex >=0 && timeLen <=8) {
+                int dotIndex = dateStr.indexOf('.', tIndex);
+                if (dotIndex < 0) {
                     sb.append(".000");
+                } else {
+                    int fracLen = len - dotIndex - 1;
+                    if (fracLen < 3) {
+                        for (int i = 0; i < 3 - fracLen; ++i) {
+                            sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
+
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
