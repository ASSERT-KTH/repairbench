diff --git a/tmp/18c73b36-6f85-4915-8e36-5acc6b6db97c_buggy.java b/tmp/a582e39b-7497-4141-8b46-2a71e2ccccdd_fixed.java
index cd412d2..dc6a569 100644
--- a/tmp/18c73b36-6f85-4915-8e36-5acc6b6db97c_buggy.java
+++ b/tmp/a582e39b-7497-4141-8b46-2a71e2ccccdd_fixed.java
@@ -1,76 +1,106 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else if (dateStr.charAt(len - 5) == '.') {
+            // partial milliseconds before 'Z'
+            int fracLen = len - 1 - (len - 5);
+            StringBuilder sb = new StringBuilder(dateStr);
+            if (fracLen == 1) {
+                sb.insert(len - 1, "00"); // '.x' -> '.x00'
+            } else if (fracLen == 2) {
+                sb.insert(len - 1, "0"); // '.xx' -> '.xx0'
+            }
+            dateStr = sb.toString();
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+
+            int tzOffsetStart = len - 5;
+            int fracEnd = tzOffsetStart;
+            int fracStart = -1;
+
+            // scan backwards to find '.' for fractional seconds, if any
+            for (int i = tzOffsetStart - 1; i >= 0; --i) {
+                char ch = dateStr.charAt(i);
+                if (ch == '.') {
+                    fracStart = i;
+                    break;
+                }
+                // stop if reach 'T' or any non-digit/non-dot char before milliseconds
+                if (!Character.isDigit(ch)) {
+                    break;
+                }
+            }
+
+            if (fracStart >= 0) {
+                int fracLen = fracEnd - fracStart - 1;
+                if (fracLen == 1) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(fracEnd, "00");
+                    dateStr = sb.toString();
+                } else if (fracLen == 2) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    sb.insert(fracEnd, "0");
+                    dateStr = sb.toString();
+                }
+            } else {
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.insert(tzOffsetStart, ".000");
                 dateStr = sb.toString();
             }
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') -1;
             if (timeLen <= 8) {
                 sb.append(".000");
+            } else if (dateStr.indexOf('.') >= 0) {
+                int dotIndex = dateStr.indexOf('.');
+                int fracLen = len - dotIndex -1;
+                if (fracLen == 1) {
+                    sb.append("00");
+                } else if (fracLen == 2) {
+                    sb.append("0");
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
