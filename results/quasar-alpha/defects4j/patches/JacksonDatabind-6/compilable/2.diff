diff --git a/tmp/e6068b4f-ab28-4b9a-991d-19439af60920_buggy.java b/tmp/072895e9-eb3a-43cc-9bde-7ab62e79e5a3_fixed.java
index cd412d2..69bb0bf 100644
--- a/tmp/e6068b4f-ab28-4b9a-991d-19439af60920_buggy.java
+++ b/tmp/072895e9-eb3a-43cc-9bde-7ab62e79e5a3_fixed.java
@@ -1,76 +1,104 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
+    // plain date only?
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
-            // [JACKSON-334]: may be missing milliseconds... if so, add
+        // May be missing milliseconds? Add if necessary
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else if (dateStr.charAt(len - 5) == '.') {
+            // Possibly partial milliseconds, pad to 3 digits
+            int milliStart = len - 5;
+            int milliEnd = len - 1; // before 'Z'
+            String millis = dateStr.substring(milliStart + 1, milliEnd);
+            if (millis.length() < 3) {
+                StringBuilder sb = new StringBuilder(dateStr);
+                for (int i = 0; i < 3 - millis.length(); i++) {
+                    sb.insert(len - 1, '0');
+                }
+                dateStr = sb.toString();
+            }
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+                len = dateStr.length(); // update after change
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
-                }
-                // Milliseconds partial or missing; and even seconds are optional
                 len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
+            }
+            // Now, check millisecond portion
+            // With timezone, offset is 5 chars long (e.g. -0500)
+            // So milliseconds end before that
+            char ch;
+            int tzOffsetIndex = len - 5;
+            // We need to find if there's ms, partial ms, or missing ms
+            int secEndIndex = tzOffsetIndex - 1; // before timezone sign
+            ch = dateStr.charAt(secEndIndex);
+            if (ch != '.') {
+                // missing milliseconds, insert ".000" before offset
                 StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
+                sb.insert(tzOffsetIndex, ".000");
                 dateStr = sb.toString();
+            } else {
+                // partial milliseconds? pad to 3 digits
+                int milliStart = secEndIndex;
+                int milliEnd = tzOffsetIndex;
+                String millis = dateStr.substring(milliStart + 1, milliEnd);
+                if (millis.length() < 3) {
+                    StringBuilder sb = new StringBuilder(dateStr);
+                    for (int i = 0; i < 3 - millis.length(); i++) {
+                        sb.insert(tzOffsetIndex, '0');
+                    }
+                    dateStr = sb.toString();
+                }
             }
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
-            } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
+        } else { // no timezone, treat as 'Z'
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
-                if (timeLen <= 8) {
+            if (timeLen <= 8) { // lacking millis
                 sb.append(".000");
+            } else {
+                int milliStart = dateStr.indexOf('.');
+                if (milliStart >= 0) {
+                    int milliDigits = len - milliStart - 1;
+                    if (milliDigits < 3) {
+                        for (int i = 0; i < 3 - milliDigits; i++) {
+                            sb.append('0');
+                        }
+                    }
+                }
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
-                            _timezone, _locale);
+                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z,
+                        DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
\ No newline at end of file
