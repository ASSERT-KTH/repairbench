diff --git a/tmp/65e282d5-7d28-4b2d-8f7c-e1013e2f2337_buggy.java b/tmp/226a0e53-c43f-4545-ae11-d73610362e48_fixed.java
index cd412d2..5fe42c0 100644
--- a/tmp/65e282d5-7d28-4b2d-8f7c-e1013e2f2337_buggy.java
+++ b/tmp/226a0e53-c43f-4545-ae11-d73610362e48_fixed.java
@@ -1,76 +1,93 @@
 protected Date parseAsISO8601(String dateStr, ParsePosition pos)
 {
-        /* 21-May-2009, tatu: DateFormat has very strict handling of
-         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
-         */
-
-        /* First: do we have "zulu" format ('Z' == "GMT")? If yes, that's
-         * quite simple because we already set date format timezone to be
-         * GMT, and hence can just strip out 'Z' altogether
-         */
     int len = dateStr.length();
     char c = dateStr.charAt(len - 1);
     DateFormat df;
 
-        // [JACKSON-200]: need to support "plain" date...
     if (len <= 10 && Character.isDigit(c)) {
         df = _formatPlain;
         if (df == null) {
             df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);
         }
     } else if (c == 'Z') {
         df = _formatISO8601_z;
         if (df == null) {
             df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);
         }
         // [JACKSON-334]: may be missing milliseconds... if so, add
         if (dateStr.charAt(len - 4) == ':') {
             StringBuilder sb = new StringBuilder(dateStr);
             sb.insert(len - 1, ".000");
             dateStr = sb.toString();
+        } else {
+            dateStr = padPartialMilliseconds(dateStr);
         }
     } else {
-            // Let's see if we have timezone indicator or not...
         if (hasTimeZone(dateStr)) {
             c = dateStr.charAt(len - 3);
-                if (c == ':') { // remove optional colon
-                    // remove colon
+            if (c == ':') {
                 StringBuilder sb = new StringBuilder(dateStr);
                 sb.delete(len - 3, len - 2);
                 dateStr = sb.toString();
-                } else if (c == '+' || c == '-') { // missing minutes
-                    // let's just append '00'
+            } else if (c == '+' || c == '-') {
                 dateStr += "00";
             }
-                // Milliseconds partial or missing; and even seconds are optional
+            // Adjust length after potential modifications
             len = dateStr.length();
-                // remove 'T', '+'/'-' and 4-digit timezone-offset
-                c = dateStr.charAt(len-9);
-                if (Character.isDigit(c)) {
-                    StringBuilder sb = new StringBuilder(dateStr);
-                    sb.insert(len-5, ".000");
-                    dateStr = sb.toString();
-                }
+            dateStr = padPartialMilliseconds(dateStr);
+
             df = _formatISO8601;
             if (_formatISO8601 == null) {
                 df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);
             }
         } else {
-                // If not, plain date. Easiest to just patch 'Z' in the end?
             StringBuilder sb = new StringBuilder(dateStr);
-                // And possible also millisecond part if missing
             int timeLen = len - dateStr.lastIndexOf('T') - 1;
             if (timeLen <= 8) {
                 sb.append(".000");
             }
             sb.append('Z');
             dateStr = sb.toString();
             df = _formatISO8601_z;
             if (df == null) {
                 df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z,
                         _timezone, _locale);
             }
         }
     }
     return df.parse(dateStr, pos);
 }
+
+/**
+ * If the given date string contains fractional seconds (milliseconds) whose
+ * digits count is less than 3, pad with zeros to make 3 digits. If missing, add ".000".
+ */
+private String padPartialMilliseconds(String dateStr)
+{
+    int tzIndex = dateStr.lastIndexOf('+');
+    if (tzIndex < 0) {
+        tzIndex = dateStr.lastIndexOf('-');
+        if (tzIndex <= dateStr.lastIndexOf('T')) {  // timezone sign must be after 'T' separator
+            tzIndex = -1;
+        }
+    }
+    int fracStart = dateStr.indexOf('.', dateStr.indexOf('T'));
+    if (fracStart >= 0 && (tzIndex < 0 || fracStart < tzIndex)) {
+        int fracEnd = (tzIndex > 0) ? tzIndex : dateStr.length();
+        int fracLen = fracEnd - fracStart - 1;
+        if (fracLen < 3) {
+            StringBuilder sb = new StringBuilder(dateStr);
+            for (int i = 0; i < 3 - fracLen; ++i) {
+                sb.insert(fracEnd, '0');
+            }
+            dateStr = sb.toString();
+        }
+    } else {
+        // No fractional seconds; need to insert before timezone, or at end
+        StringBuilder sb = new StringBuilder(dateStr);
+        int insertPos = (tzIndex > 0) ? tzIndex : dateStr.length();
+        sb.insert(insertPos, ".000");
+        dateStr = sb.toString();
+    }
+    return dateStr;
+}
\ No newline at end of file
