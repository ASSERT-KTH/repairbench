diff --git a/tmp/89eb29e6-3fea-44b8-9bd5-af3a1c0e2b8d_buggy.java b/tmp/8a97bfd6-7707-4b4b-8d6f-1d76737e7ff9_fixed.java
index 39dd8e7..84b974b 100644
--- a/tmp/89eb29e6-3fea-44b8-9bd5-af3a1c0e2b8d_buggy.java
+++ b/tmp/8a97bfd6-7707-4b4b-8d6f-1d76737e7ff9_fixed.java
@@ -1,30 +1,36 @@
 private Attribute parseAttribute() {
     tq.consumeWhitespace();
     String key = tq.consumeAttributeKey();
     String value = "";
     tq.consumeWhitespace();
+
+    if (key.length() == 0 || (key.length() > 1 && (key.charAt(0) == '/' || key.charAt(0) == '<'))) {
+        // Probably a garbage token, attempt to recover
+        return null;
+    }
+
     if (tq.matchChomp("=")) {
         tq.consumeWhitespace();
-
         if (tq.matchChomp(SQ)) {
             value = tq.chompTo(SQ);
         } else if (tq.matchChomp(DQ)) {
             value = tq.chompTo(DQ);
         } else {
             StringBuilder valueAccum = new StringBuilder();
             // no ' or " to look for, so scan to end tag or space (or end of stream)
             while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
                 valueAccum.append(tq.consume());
             }
             value = valueAccum.toString();
         }
         tq.consumeWhitespace();
     }
     if (key.length() != 0)
         return Attribute.createFromEncoded(key, value);
     else {
-            tq.consume();
-                
+        if (!tq.isEmpty()) {
+            tq.consume(); // Defensive consume, advance the token queue
+        }
         return null;
     }
 }
\ No newline at end of file
