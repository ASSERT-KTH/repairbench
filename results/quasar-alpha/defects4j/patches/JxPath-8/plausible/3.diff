diff --git a/tmp/ca76e788-fa1a-4d9f-834f-030aa0f3dd62_buggy.java b/tmp/e849a167-4cc9-4567-a778-8ae8fcb869e3_fixed.java
index 98d89dc..f06749f 100644
--- a/tmp/ca76e788-fa1a-4d9f-834f-030aa0f3dd62_buggy.java
+++ b/tmp/e849a167-4cc9-4567-a778-8ae8fcb869e3_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // handle NaN comparision per XPath 1.0 spec: comparisons with NaN always false, except '=' yields true for two NaNs
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            // NaN = NaN is true; NaN < NaN or NaN > NaN are false
+            // evaluateCompare(0) means an equality comparison
+            return evaluateCompare(0);
+        } else {
+            // NaN compared to number: all <, >, = are false
+            return false;
+        }
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
