diff --git a/tmp/74031f0a-8786-420b-8928-73e90067d6d1_buggy.java b/tmp/5fce8c77-3981-4c67-a72c-1b86a3f1feac_fixed.java
index 98d89dc..3dec93b 100644
--- a/tmp/74031f0a-8786-420b-8928-73e90067d6d1_buggy.java
+++ b/tmp/5fce8c77-3981-4c67-a72c-1b86a3f1feac_fixed.java
@@ -1,23 +1,33 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    if (Double.isNaN(ld) && Double.isNaN(rd)) {
+        // When both are NaN, treat them as equal
+        return evaluateCompare(0);
+    }
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // When one is NaN and the other is not, comparison is always false
+        // evaluateCompare only called if both numbers are valid, so return false
+        return false;
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
