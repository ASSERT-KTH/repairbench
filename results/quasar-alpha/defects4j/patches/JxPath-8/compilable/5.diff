diff --git a/tmp/37c8a9e1-4dde-4748-a44b-5fa4449e5e1d_buggy.java b/tmp/04b7b2bb-ace3-4a7e-9dd1-f5e855133932_fixed.java
index 98d89dc..fc97b8d 100644
--- a/tmp/37c8a9e1-4dde-4748-a44b-5fa4449e5e1d_buggy.java
+++ b/tmp/04b7b2bb-ace3-4a7e-9dd1-f5e855133932_fixed.java
@@ -1,23 +1,36 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons explicitly
+    boolean ldNaN = Double.isNaN(ld);
+    boolean rdNaN = Double.isNaN(rd);
+    if (ldNaN && rdNaN) {
+        // In XPath, NaN is only equal to itself
+        return evaluateCompare(0);
+    }
+    if (ldNaN || rdNaN) {
+        // Any comparison with NaN except equality is false
+        return evaluateCompare(-2); // special code indicating unordered
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
