diff --git a/tmp/653d2689-db65-4528-a2d8-6e519c820885_buggy.java b/tmp/1d0cc065-ee13-4d11-8b0f-d7106fbdbb31_fixed.java
index 98d89dc..fe31a15 100644
--- a/tmp/653d2689-db65-4528-a2d8-6e519c820885_buggy.java
+++ b/tmp/1d0cc065-ee13-4d11-8b0f-d7106fbdbb31_fixed.java
@@ -1,23 +1,34 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Handle NaN comparisons explicitly: if either is NaN, treat != unless both NaN and == op
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // Both NaN and equality test
+        if (Double.isNaN(ld) && Double.isNaN(rd)) {
+            return evaluateCompare(0); // considered equal
+        } else {
+            // NaN compared to number: always not equal, not greater, not less
+            return evaluateCompare(-2); // signal unordered
+        }
+    }
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
