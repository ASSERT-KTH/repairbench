diff --git a/tmp/1c89b708-9853-441a-9baa-bd3e67d72c32_buggy.java b/tmp/a7e7cbd2-2e21-4a30-a129-ff5f176efd3c_fixed.java
index 98d89dc..712f789 100644
--- a/tmp/1c89b708-9853-441a-9baa-bd3e67d72c32_buggy.java
+++ b/tmp/a7e7cbd2-2e21-4a30-a129-ff5f176efd3c_fixed.java
@@ -1,23 +1,32 @@
 private boolean compute(Object left, Object right) {
     left = reduce(left);
     right = reduce(right);
 
     if (left instanceof InitialContext) {
         ((InitialContext) left).reset();
     }
     if (right instanceof InitialContext) {
         ((InitialContext) right).reset();
     }
     if (left instanceof Iterator && right instanceof Iterator) {
         return findMatch((Iterator) left, (Iterator) right);
     }
     if (left instanceof Iterator) {
         return containsMatch((Iterator) left, right);
     }
     if (right instanceof Iterator) {
         return containsMatch((Iterator) right, left);
     }
     double ld = InfoSetUtil.doubleValue(left);
     double rd = InfoSetUtil.doubleValue(right);
+
+    // Fix: Handle NaN comparisons per XPath spec: NaN != anything (even NaN), so comparisons < or > are false, = is false except NaN=NaN is true
+    if (Double.isNaN(ld) || Double.isNaN(rd)) {
+        // detection depends on the specific subclass operator
+        // typical CoreOperationEqual overrides 'compute' so assumes this is for ordering comparisons
+        // default is: NaN compared with anything (even itself) is unordered, so inequality
+        return evaluateCompare(Double.compare(ld, rd));
+    }
+
     return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1);
 }
\ No newline at end of file
