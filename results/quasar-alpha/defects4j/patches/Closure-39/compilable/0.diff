diff --git a/tmp/8f0dca95-a650-4249-8b55-c7bca016d9f3_buggy.java b/tmp/5abf9d0b-4127-4272-b188-0cdc5661d88f_fixed.java
index e4d90e7..82fcf19 100644
--- a/tmp/8f0dca95-a650-4249-8b55-c7bca016d9f3_buggy.java
+++ b/tmp/5abf9d0b-4127-4272-b188-0cdc5661d88f_fixed.java
@@ -1,45 +1,54 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propType = getPropertyType(property);
+      if (propType == this) {
+        // Recursive reference detected
+        sb.append("{...}");
+      } else {
+        String propTypeStr = forAnnotations
+            ? propType.toAnnotationString()
+            : propType.toString();
+        sb.append(propTypeStr);
+      }
 
       ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+      if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
         sb.append(", ...");
         break;
       }
     }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
