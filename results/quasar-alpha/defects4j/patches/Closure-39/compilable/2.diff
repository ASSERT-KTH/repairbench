diff --git a/tmp/b5af6347-e1b9-4b9e-bd54-e6c1e695231a_buggy.java b/tmp/0f6f84fe-2494-4dcc-8730-894f06de8c4d_fixed.java
index e4d90e7..58ed3ad 100644
--- a/tmp/b5af6347-e1b9-4b9e-bd54-e6c1e695231a_buggy.java
+++ b/tmp/0f6f84fe-2494-4dcc-8730-894f06de8c4d_fixed.java
@@ -1,45 +1,61 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+
+      JSType propType = getPropertyType(property);
+
+      // for recursive record types, prevent infinite recursion
+      if (!forAnnotations && propType == this) {
+        sb.append("{...}");
+      } else {
+        sb.append(propType.toStringHelper(forAnnotations));
+      }
 
       ++i;
+
+      if (forAnnotations) {
+        // for annotations, no pretty-print limit
+        continue;
+      } else {
         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+          if (propertyNames.size() > MAX_PRETTY_PRINTED_PROPERTIES) {
             sb.append(", ...");
+          }
           break;
         }
       }
+    }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
\ No newline at end of file
