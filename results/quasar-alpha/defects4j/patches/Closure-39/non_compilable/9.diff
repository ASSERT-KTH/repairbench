diff --git a/tmp/1394b1aa-f778-4a5d-addd-10f3a0ad4f01_buggy.java b/tmp/ac79cad6-81cb-493f-86e8-fdb1454d1ac0_fixed.java
index e4d90e7..67fb959 100644
--- a/tmp/1394b1aa-f778-4a5d-addd-10f3a0ad4f01_buggy.java
+++ b/tmp/ac79cad6-81cb-493f-86e8-fdb1454d1ac0_fixed.java
@@ -1,45 +1,65 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
   if (hasReferenceName()) {
     return getReferenceName();
   } else if (prettyPrint) {
     // Don't pretty print recursively.
     prettyPrint = false;
 
     // Use a tree set so that the properties are sorted.
     Set<String> propertyNames = Sets.newTreeSet();
     for (ObjectType current = this;
          current != null && !current.isNativeObjectType() &&
              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
          current = current.getImplicitPrototype()) {
       propertyNames.addAll(current.getOwnPropertyNames());
     }
 
     StringBuilder sb = new StringBuilder();
     sb.append("{");
 
     int i = 0;
     for (String property : propertyNames) {
       if (i > 0) {
         sb.append(", ");
       }
 
       sb.append(property);
       sb.append(": ");
-        sb.append(getPropertyType(property).toString());
+      JSType propType = getPropertyType(property);
+
+      // If pretty printing and the property type is referring back to
+      // a type that is already pretty printing, just show {...} 
+      if (prettyPrintInProgress(propType)) {
+        sb.append("{...}");
+      } else {
+        sb.append(propType.toStringHelper(forAnnotations));
+      }
 
       ++i;
       if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+        // If forAnnotations==true, continue printing all properties
+        if (!forAnnotations) {
           sb.append(", ...");
           break;
         }
       }
+    }
 
     sb.append("}");
 
     prettyPrint = true;
     return sb.toString();
   } else {
     return "{...}";
   }
 }
+
+// Helper method to detect recursive types during pretty-printing.
+private boolean prettyPrintInProgress(JSType type) {
+  if (type instanceof ProxyObjectType) {
+    JSType referencedType = ((ProxyObjectType) type).getReferencedType();
+    return referencedType != null && referencedType == this && !prettyPrint;
+  }
+  return false;
+}
\ No newline at end of file
