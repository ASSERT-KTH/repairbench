diff --git a/tmp/c16d271e-4cac-4480-927c-bcce566cfa6c_buggy.java b/tmp/d5d1fcd8-d6d8-4698-a0dc-d6dff16c4cfc_fixed.java
index 139579d..b788f2b 100644
--- a/tmp/c16d271e-4cac-4480-927c-bcce566cfa6c_buggy.java
+++ b/tmp/d5d1fcd8-d6d8-4698-a0dc-d6dff16c4cfc_fixed.java
@@ -1,43 +1,36 @@
 // performance sensitive
 public boolean hasClass(String className) {
     final String classAttr = attributes.get("class");
     final int len = classAttr.length();
     final int wantLen = className.length();
 
     if (len == 0 || len < wantLen) {
         return false;
     }
 
-        // if both lengths are equal, only need compare the className with the attribute
-        if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
-        }
-
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
-        boolean inClass = false;
     int start = 0;
     for (int i = 0; i < len; i++) {
-            if (Character.isWhitespace(classAttr.charAt(i))) {
-                if (inClass) {
-                    // white space ends a class name, compare it with the requested one, ignore case
-                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+        if (Character.isWhitespace(classAttr.charAt(i))) { // word boundary
+            if (i > start) {
+                int wordLen = i - start;
+                if (wordLen == wantLen) {
+                    if (classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
-                    inClass = false;
                 }
-            } else {
-                if (!inClass) {
-                    // we're in a class name : keep the start of the substring
-                    inClass = true;
-                    start = i;
             }
+            start = i + 1;
+        }
+    }
+    // check last word until end of string
+    if (start < len) {
+        int wordLen = len - start;
+        if (wordLen == wantLen) {
+            if (classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                return true;
             }
         }
-
-        // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
     }
 
     return false;
 }
\ No newline at end of file
