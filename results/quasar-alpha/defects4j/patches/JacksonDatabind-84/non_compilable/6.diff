diff --git a/tmp/80fb7a81-1118-45d8-91fc-a51d73fc365f_buggy.java b/tmp/3b676a60-d539-4405-af79-93a77a6ed54b_fixed.java
index e69de29..7344c78 100644
--- a/tmp/80fb7a81-1118-45d8-91fc-a51d73fc365f_buggy.java
+++ b/tmp/3b676a60-d539-4405-af79-93a77a6ed54b_fixed.java
@@ -0,0 +1,39 @@
+@Override
+public JavaType constructType(Type type) {
+    JavaType result = _typeCache.get(type);
+    if (result != null) {
+        return result;
+    }
+    HierarchicType superClass = null;
+    HierarchicType superInterface = null;
+    if (type instanceof Class<?>) {
+        Class<?> cls = (Class<?>) type;
+        // Recursively resolve supertypes FIRST to ensure correct caching
+        Class<?> superCls = cls.getSuperclass();
+        if (superCls != null) {
+            superClass = HierarchicType.valueOf(_fromClass(superCls));
+        }
+        Class<?>[] interfaces = cls.getInterfaces();
+        if (interfaces != null && interfaces.length > 0) {
+            List<HierarchicType> interfaceTypes = new ArrayList<>();
+            for (Class<?> iface : interfaces) {
+                interfaceTypes.add(HierarchicType.valueOf(_fromClass(iface)));
+            }
+            if (interfaceTypes.size() == 1) {
+                superInterface = interfaceTypes.get(0);
+            } else if (interfaceTypes.size() > 1) {
+                // Create a dummy superInterface chaining interfaces as siblings
+                HierarchicType current = interfaceTypes.get(0);
+                for (int i = 1; i < interfaceTypes.size(); i++) {
+                    current.setNextSibling(interfaceTypes.get(i));
+                }
+                superInterface = interfaceTypes.get(0);
+            }
+        }
+        result = _fromClass(cls, superClass, superInterface);
+    } else {
+        result = _fromAny(type, this);
+    }
+    _typeCache.putIfAbsent(type, result);
+    return result;
+}
\ No newline at end of file
