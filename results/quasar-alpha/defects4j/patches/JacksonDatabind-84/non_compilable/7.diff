diff --git a/tmp/dfbe0a4d-0ccc-4de0-a817-d1697b85360d_buggy.java b/tmp/8a6378dd-475b-4458-a81a-fb62bea5ca0c_fixed.java
index e69de29..b904e4b 100644
--- a/tmp/dfbe0a4d-0ccc-4de0-a817-d1697b85360d_buggy.java
+++ b/tmp/8a6378dd-475b-4458-a81a-fb62bea5ca0c_fixed.java
@@ -0,0 +1,34 @@
+@Override
+public JavaType constructType(Type type) {
+    // First, check if this is a supertype already constructed
+    JavaType cached = _typeCache.get(type);
+    if (cached != null) {
+        return cached;
+    }
+
+    // Otherwise, construct the type anew
+    JavaType result;
+    // Actually, resolve recursively if needed
+    synchronized (_typeCache) {
+        // Might have been constructed while we waited
+        cached = _typeCache.get(type);
+        if (cached != null) {
+            return cached;
+        }
+        // Special handling for Class
+        if (type instanceof Class<?>) {
+            result = _fromClass(null, (Class<?>) type, TypeBindings.emptyBindings());
+        } else {
+            result = _constructType(type, TypeBindings.emptyBindings());
+        }
+        // After constructing, cache this for reuse
+        _typeCache.put(type, result);
+    }
+
+    // For subtypes, ensure their superclasses are constructed too, to allow property inheritance
+    JavaType superClass = result.getSuperClass();
+    if (superClass != null && !(superClass instanceof ResolvedRecursiveType)) {
+        constructType(superClass.getRawClass());
+    }
+    return result;
+}
\ No newline at end of file
