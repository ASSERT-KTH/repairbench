diff --git a/tmp/33f577c7-f300-43ea-858c-2284acf6b667_buggy.java b/tmp/6bd7e0f6-109b-4d3b-a1f4-d4e73d8c078a_fixed.java
index e69de29..07e4865 100644
--- a/tmp/33f577c7-f300-43ea-858c-2284acf6b667_buggy.java
+++ b/tmp/6bd7e0f6-109b-4d3b-a1f4-d4e73d8c078a_fixed.java
@@ -0,0 +1,40 @@
+public <T> JavaType constructType(Class<T> cls) {
+    // First, check cache
+    JavaType cached = _typeCache.get(cls);
+    if (cached != null) {
+        return cached;
+    }
+
+    // Create basic type
+    JavaType type;
+    if (cls.isPrimitive()) {
+        type = _constructSimple(cls);
+    } else if (cls.isArray()) {
+        type = _constructArrayType(cls.getComponentType(), null);
+    } else if (Map.class.isAssignableFrom(cls)) {
+        type = _constructMapLikeType(cls, _unknownType(), _unknownType());
+    } else if (Collection.class.isAssignableFrom(cls)) {
+        type = _constructCollectionLikeType(cls, _unknownType());
+    } else {
+        type = _constructSimple(cls);
+    }
+
+    // Handle supertypes to potentially collect base properties for subtype info
+    Class<?> superclass = cls.getSuperclass();
+    if (superclass != null && superclass != Object.class) {
+        JavaType superType = constructType(superclass);
+        type = type.withSuperClass(superType);
+    }
+
+    Class<?>[] interfaces = cls.getInterfaces();
+    if (interfaces != null && interfaces.length > 0) {
+        List<JavaType> intfTypes = new ArrayList<>(interfaces.length);
+        for (Class<?> intf : interfaces) {
+            intfTypes.add(constructType(intf));
+        }
+        type = type.withInterfaces(intfTypes);
+    }
+
+    _typeCache.put(cls, type);
+    return type;
+}
\ No newline at end of file
