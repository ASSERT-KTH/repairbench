diff --git a/tmp/ea557a37-d626-46da-9808-87e051b91721_buggy.java b/tmp/2ff9104c-f8e2-4498-85c9-c6e1172fef7f_fixed.java
index b09cd82..37e3a9d 100644
--- a/tmp/ea557a37-d626-46da-9808-87e051b91721_buggy.java
+++ b/tmp/2ff9104c-f8e2-4498-85c9-c6e1172fef7f_fixed.java
@@ -1,192 +1,211 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
 public static Number createNumber(final String str) throws NumberFormatException {
     if (str == null) {
         return null;
     }
     if (StringUtils.isBlank(str)) {
         throw new NumberFormatException("A blank string is not a valid number");
     }
-        // Need to deal with all possible hex prefixes here
+    // Deal with possible hex number
     final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
     int pfxLen = 0;
     for (final String pfx : hex_prefixes) {
         if (str.startsWith(pfx)) {
             pfxLen += pfx.length();
             break;
         }
     }
     if (pfxLen > 0) { // we have a hex number
         final int hexDigits = str.length() - pfxLen;
-            if (hexDigits > 16) { // too many for Long
+        if (hexDigits > 16) {
             return createBigInteger(str);
         }
-            if (hexDigits > 8) { // too many for an int
+        if (hexDigits > 8) {
             return createLong(str);
         }
         return createInteger(str);
     }
+
     final char lastChar = str.charAt(str.length() - 1);
     String mant;
     String dec;
     String exp;
+
     final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+    final int expPosLower = str.indexOf('e');
+    final int expPosUpper = str.indexOf('E');
+    final int expPos;
+    if (expPosLower > -1) {
+        expPos = expPosLower;
+    } else {
+        expPos = expPosUpper;
+    }
 
     int numDecimals = 0; // Check required precision (LANG-693)
     if (decPos > -1) { // there is a decimal point
-
         if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+            if (expPos < decPos || expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             dec = str.substring(decPos + 1, expPos);
         } else {
             dec = str.substring(decPos + 1);
         }
         mant = str.substring(0, decPos);
-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
+        numDecimals = dec.length();
     } else {
         if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
+            if (expPos > str.length()) {
                 throw new NumberFormatException(str + " is not a valid number.");
             }
             mant = str.substring(0, expPos);
         } else {
             mant = str;
         }
         dec = null;
     }
+
     if (!Character.isDigit(lastChar) && lastChar != '.') {
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length() - 1);
         } else {
             exp = null;
         }
-            //Requesting a specific type..
+
         final String numeric = str.substring(0, str.length() - 1);
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
         switch (lastChar) {
             case 'l':
             case 'L':
-                    if (dec == null
-                        && exp == null
-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
+                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                     try {
                         return createLong(numeric);
-                        } catch (final NumberFormatException nfe) { // NOPMD
+                    } catch (final NumberFormatException nfe) {
                         // Too big for a long
                     }
                     return createBigInteger(numeric);
-
                 }
                 throw new NumberFormatException(str + " is not a valid number.");
             case 'f':
             case 'F':
                 try {
-                        final Float f = NumberUtils.createFloat(numeric);
+                    final Float f = createFloat(numeric);
                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                         return f;
                     }
-
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (final NumberFormatException nfe) {
+                    // ignore
                 }
                 //$FALL-THROUGH$
             case 'd':
             case 'D':
                 try {
-                        final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                    final Double d = createDouble(numeric);
+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                         return d;
                     }
-                    } catch (final NumberFormatException nfe) { // NOPMD
-                        // ignore the bad number
+                } catch (final NumberFormatException nfe) {
+                    // ignore
                 }
                 try {
                     return createBigDecimal(numeric);
-                    } catch (final NumberFormatException e) { // NOPMD
-                        // ignore the bad number
+                } catch (final NumberFormatException e) {
+                    // ignore
                 }
                 //$FALL-THROUGH$
             default:
                 throw new NumberFormatException(str + " is not a valid number.");
+        }
+    }
 
-            }
-        }
-        //User doesn't have a preference on the return type, so let's start
-        //small and go from there...
     if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
+        exp = str.substring(expPos + 1);
     } else {
         exp = null;
     }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+
+    if (dec == null && exp == null) {
         try {
             return createInteger(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+        } catch (final NumberFormatException nfe) {
+            // ignore
         }
         try {
             return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+        } catch (final NumberFormatException nfe) {
+            // ignore
         }
         return createBigInteger(str);
     }
 
-        //Must be a Float, Double, BigDecimal
     final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+
+    /*
+     * HEURISTIC (LANG-931):
+     * Use number of decimal digits and string length to decide if Float is large enough.
+     * Otherwise, try Double, else BigDecimal.
+     */
+
+    // If exponent present, isolate the significand part
+    String sigStr = str;
+    if (expPos > -1) {
+        sigStr = str.substring(0, expPos);
+    }
+
+    // Count significand digits (digits ignoring optional sign and decimal point)
+    int sigDigits = 0;
+    int sigPrecision = 0; // decimal digits after decimal point, for significand
+    boolean decPointSeen = false;
+    boolean sigStartSeen = false;
+    for (int i = 0; i < sigStr.length(); i++) {
+        char ch = sigStr.charAt(i);
+        if (ch == '-' || ch == '+') continue;
+        if (ch == '.') {
+            decPointSeen = true;
+            continue;
+        }
+        if (Character.isDigit(ch)) {
+            if (!sigStartSeen && ch == '0') {
+                continue; // skip leading zeros
+            }
+            sigStartSeen = true;
+            sigDigits++;
+            if (decPointSeen) {
+                sigPrecision++;
+            }
+        } else {
+            // ignore or break?
+            break;
+        }
+    }
+
+    // If significand is short enough and precision is low enough, prefer Float
     try {
         final Float f = createFloat(str);
         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
+            // float is fine unless infinite or underflowed (but original string had nonzero digits)
+            if (sigDigits <= 8 && sigPrecision <= 7) {
                 return f;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
         }
+    } catch (final NumberFormatException nfe) {
+        // ignore
+    }
+
+    // Otherwise, try Double
     try {
         final Double d = createDouble(str);
         if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+            // use Double if within double limits and no underflow
+            // For number of significant digits and decimal digits decide if double is adequate.
+            if (sigDigits <= 17 && sigPrecision <= 16) {
                 return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+        }
+    } catch (final NumberFormatException nfe) {
+        // ignore
     }
 
+    // Otherwise, use BigDecimal for maximum precision
     return createBigDecimal(str);
 }
\ No newline at end of file
