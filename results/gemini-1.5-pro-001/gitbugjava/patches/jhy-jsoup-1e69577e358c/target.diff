diff --git a/tmp/339fdf4b-e15d-4ee5-8978-7fd4555f70e6_buggy.java b/tmp/3aef6f7c-78df-41f6-950d-326dfc9c3840_fixed.java
index c9c77a4..556bbe7 100644
--- a/tmp/339fdf4b-e15d-4ee5-8978-7fd4555f70e6_buggy.java
+++ b/tmp/3aef6f7c-78df-41f6-950d-326dfc9c3840_fixed.java
@@ -1,35 +1,31 @@
     URL build() {
         try {
             // use the URI class to encode non-ascii in path
             URI uri = new URI(
                 u.getProtocol(),
                 u.getUserInfo(),
                 IDN.toASCII(decodePart(u.getHost())), // puny-code
                 u.getPort(),
-                decodePart(u.getPath()),
-                null, null // query and fragment appended later so as not to encode
+                null, null, null // path, query and fragment appended later so as not to encode
             );
 
-            String normUrl = uri.toASCIIString();
-            if (q != null || u.getRef() != null) {
-                StringBuilder sb = StringUtil.borrowBuilder().append(normUrl);
+            StringBuilder normUrl = StringUtil.borrowBuilder().append(uri.toASCIIString());
+            appendToAscii(u.getPath(), false, normUrl);
             if (q != null) {
-                    sb.append('?');
-                    appendToAscii(StringUtil.releaseBuilder(q), true, sb);
+                normUrl.append('?');
+                appendToAscii(StringUtil.releaseBuilder(q), true, normUrl);
             }
             if (u.getRef() != null) {
-                    sb.append('#');
-                    appendToAscii(u.getRef(), false, sb);
+                normUrl.append('#');
+                appendToAscii(u.getRef(), false, normUrl);
             }
-                normUrl = StringUtil.releaseBuilder(sb);
-            }
-            u =  new URL(normUrl);
+            u = new URL(StringUtil.releaseBuilder(normUrl));
             return u;
         } catch (MalformedURLException | URISyntaxException | UnsupportedEncodingException e) {
             // we assert here so that any incomplete normalization issues can be caught in devel. but in practise,
             // the remote end will be able to handle it, so in prod we just pass the original URL.
             // The UnsupportedEncodingException would never happen as always UTF8
             assert Validate.assertFail(e.toString());
             return u;
         }
     }
