diff --git a/tmp/7bd19cfa-7fcb-4739-9e79-68d6b3a64740_buggy.java b/tmp/f1e1ee10-e81b-4961-a2b3-744053e2bbe1_fixed.java
index 658036e..a4edfb6 100644
--- a/tmp/7bd19cfa-7fcb-4739-9e79-68d6b3a64740_buggy.java
+++ b/tmp/f1e1ee10-e81b-4961-a2b3-744053e2bbe1_fixed.java
@@ -1,29 +1,34 @@
     // off-lined to keep main method lean and mean...
     @SuppressWarnings("resource")
     protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,
             TokenBuffer tb) throws IOException
     {
         // As per [JACKSON-614], may have default implementation to use
         JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt);
         if (deser != null) {
             if (tb != null) {
                 tb.writeEndObject();
                 p = tb.asParser(p);
                 // must move to point to the first token:
                 p.nextToken();
             }
             return deser.deserialize(p, ctxt);
         }
         // or, perhaps we just bumped into a "natural" value (boolean/int/double/String)?
         Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType);
         if (result != null) {
             return result;
         }
+        // 14-Oct-2015, tatu: To support [JACKSON-652] need to allow missing
+        //     property case, too: for now only when default typing is dynamic
+        if (_defaultImpl == Object.class && (_typeIdVisible || !_usesExternalPropertyId())) {
+            return super.deserializeTypedFromAny(p, ctxt);
+        }
         // or, something for which "as-property" won't work, changed into "wrapper-array" type:
         if (p.getCurrentToken() == JsonToken.START_ARRAY) {
             return super.deserializeTypedFromAny(p, ctxt);
         }
         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,
                 "missing property '"+_typePropertyName+"' that is to contain type id  (for class "+baseTypeName()+")");
         return null;
     }
