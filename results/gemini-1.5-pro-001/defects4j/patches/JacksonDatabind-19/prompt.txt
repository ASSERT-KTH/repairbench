You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    private JavaType _mapType(Class<?> rawClass)
    {
        // 28-May-2015, tatu: Properties are special, as per [databind#810]
        JavaType[] typeParams = findTypeParameters(rawClass, Map.class);
        // ok to have no types ("raw")
        if (typeParams == null) {
            return MapType.construct(rawClass, _unknownType(), _unknownType());
        }
        // but exactly 2 types if any found
        if (typeParams.length != 2) {
            throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
        }
        return MapType.construct(rawClass, typeParams[0], typeParams[1]);
    }

```

The code fails the following tests.

Test `com.fasterxml.jackson.databind.convert.TestMapConversions::testMapToProperties`:
```java
    // [databind#810]
    public void testMapToProperties() throws Exception
    {
        Bean bean = new Bean();
        bean.A = 129;
        bean.B = "13";
        Properties props = MAPPER.convertValue(bean, Properties.class);

        assertEquals(2, props.size());

        assertEquals("13", props.getProperty("B"));
        // should coercce non-Strings to Strings
        assertEquals("129", props.getProperty("A"));
    }

```
Test `com.fasterxml.jackson.databind.convert.TestMapConversions::testMapToProperties` error:
```
junit.framework.ComparisonFailure: expected:<123> but was:<null>;com.fasterxml.jackson.databind.type.TestTypeFactory::testProperties
```

Test `com.fasterxml.jackson.databind.deser.TestMapDeserialization::testReadProperties`:
```java
    // [databind#810]
    public void testReadProperties() throws Exception
    {
        Properties props = MAPPER.readValue(aposToQuotes("{'a':'foo', 'b':123, 'c':true}"),
                Properties.class);
        assertEquals(3, props.size());
        assertEquals("foo", props.getProperty("a"));
        assertEquals("123", props.getProperty("b"));
        assertEquals("true", props.getProperty("c"));
    }

```
Test `com.fasterxml.jackson.databind.deser.TestMapDeserialization::testReadProperties` error:
```
junit.framework.AssertionFailedError: expected same:<class java.lang.String> was not:<class java.lang.Object>
```

Test `com.fasterxml.jackson.databind.type.TestTypeFactory::testProperties`:
```java
    // [databind#810]: Fake Map type for Properties as <String,String>
    public void testProperties()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(Properties.class);
        assertEquals(MapType.class, t.getClass());
        assertSame(Properties.class, t.getRawClass());

        // so far so good. But how about parameterization?
        assertSame(String.class, ((MapType) t).getKeyType().getRawClass());
        assertSame(String.class, ((MapType) t).getContentType().getRawClass());
    }

```
Test `com.fasterxml.jackson.databind.type.TestTypeFactory::testProperties` error:
```
junit.framework.AssertionFailedError: expected same:<class java.lang.String> was not:<class java.lang.Object>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
