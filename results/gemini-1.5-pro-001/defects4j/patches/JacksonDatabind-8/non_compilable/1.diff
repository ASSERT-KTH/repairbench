diff --git a/tmp/adb44ee4-1ef5-4983-97aa-9dbb5f6ababf_buggy.java b/tmp/820da6c5-acfa-4df0-b2b0-996dd21e0025_fixed.java
index c9da1b7..ebdaac4 100644
--- a/tmp/adb44ee4-1ef5-4983-97aa-9dbb5f6ababf_buggy.java
+++ b/tmp/820da6c5-acfa-4df0-b2b0-996dd21e0025_fixed.java
@@ -1,33 +1,42 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
 
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
+                // both explicit: verify that they are the same
+                if (_verifyExplicitSameAsDefault(oldOne, newOne)) {
+                    return;
                 }
-
-            // one more thing: ok to override in sub-class
-            if (oldOne.getClass() == newOne.getClass()) {
-                // [databind#667]: avoid one particular class of bogus problems
-
+                // otherwise error out
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+            }
+
+            // otherwise one not explicit, but may be implicit
+            if (explicit) {
+                // if old one not explicit, new one is, so override
+                _explicitCreators |= mask;
+                _creators[typeIndex] = _fixAccess(newOne);
+                return;
+            }
+            // neither explicitly annotated... are they same?
+            if (_verifyExplicitSameAsDefault(oldOne, newOne)) {
+                return;
+            }
             // otherwise, which one to choose?
             // new type more generic, use old
             // new type more specific, use it
         }
-        }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
