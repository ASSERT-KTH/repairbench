diff --git a/tmp/1eb88452-90ed-44bb-b760-b65d986e5d05_buggy.java b/tmp/0dfa2f4c-a076-4a47-afee-31b3fa9d09dd_fixed.java
index 4f21a3a..a6dcecc 100644
--- a/tmp/1eb88452-90ed-44bb-b760-b65d986e5d05_buggy.java
+++ b/tmp/0dfa2f4c-a076-4a47-afee-31b3fa9d09dd_fixed.java
@@ -1,14 +1,25 @@
     /**
      * Helper method used by standard deserializer.
      * 
      * @since 2.3
      */
     public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException
     {
+        if (jp.getCurrentToken() == null) { // will be FIELD_NAME _or_ START_ARRAY/START_OBJECT
+            jp.nextToken(); // to get started
+            // and if we start with a name, we need an object around it
+            if (jp.getCurrentToken() == JsonToken.FIELD_NAME) {
+                this.writeStartObject();
+            }
+        }        
         copyCurrentStructure(jp);
         /* 28-Oct-2014, tatu: As per #592, need to support a special case of starting from
          *    FIELD_NAME, which is taken to mean that we are missing START_OBJECT, but need
          *    to assume one did exist.
          */
+        if (jp.getCurrentToken() != null) { // copyCurrentStructure() should leave us at END_OBJECT (etc)
+            // One more thing: as per [databind#2001] need to write closing END_OBJECT as well...
+            this.writeEndObject();
+        }
         return this;
     }
