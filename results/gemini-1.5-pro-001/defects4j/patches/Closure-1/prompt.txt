You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
  /**
   * Removes unreferenced arguments from a function declaration and when
   * possible the function's callSites.
   *
   * @param fnScope The scope inside the function
   */
  private void removeUnreferencedFunctionArgs(Scope fnScope) {
    // Notice that removing unreferenced function args breaks
    // Function.prototype.length. In advanced mode, we don't really care
    // about this: we consider "length" the equivalent of reflecting on
    // the function's lexical source.
    //
    // Rather than create a new option for this, we assume that if the user
    // is removing globals, then it's OK to remove unused function args.
    //
    // See http://code.google.com/p/closure-compiler/issues/detail?id=253

    Node function = fnScope.getRootNode();

    Preconditions.checkState(function.isFunction());
    if (NodeUtil.isGetOrSetKey(function.getParent())) {
      // The parameters object literal setters can not be removed.
      return;
    }

    Node argList = getFunctionArgList(function);
    boolean modifyCallers = modifyCallSites
        && callSiteOptimizer.canModifyCallers(function);
    if (!modifyCallers) {
      // Strip unreferenced args off the end of the function declaration.
      Node lastArg;
      while ((lastArg = argList.getLastChild()) != null) {
        Var var = fnScope.getVar(lastArg.getString());
        if (!referenced.contains(var)) {
          argList.removeChild(lastArg);
          compiler.reportCodeChange();
        } else {
          break;
        }
      }
    } else {
      callSiteOptimizer.optimize(fnScope, referenced);
    }
  }

```

The code fails the following tests.

Test `com.google.javascript.jscomp.CommandLineRunnerTest::testSimpleModeLeavesUnusedParams`:
```java
  public void testSimpleModeLeavesUnusedParams() {
    args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
    testSame("window.f = function(a) {};");
  }

```
Test `com.google.javascript.jscomp.CommandLineRunnerTest::testSimpleModeLeavesUnusedParams` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag1
```

Test `com.google.javascript.jscomp.CommandLineRunnerTest::testForwardDeclareDroppedTypes`:
```java
  public void testForwardDeclareDroppedTypes() {
    args.add("--manage_closure_dependencies=true");

    args.add("--warning_level=VERBOSE");
    test(new String[] {
          "goog.require('beer');",
          "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}",
          "goog.provide('Scotch'); var x = 3;"
         },
         new String[] {
           "var beer = {}; function f(a) {}",
           ""
         });

    test(new String[] {
          "goog.require('beer');",
          "goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}"
         },
         new String[] {
           "var beer = {}; function f(a) {}",
           ""
         },
         RhinoErrorReporter.TYPE_PARSE_ERROR);
  }

```
Test `com.google.javascript.jscomp.CommandLineRunnerTest::testForwardDeclareDroppedTypes` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.IntegrationTest::testIssue787
```

Test `com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag1`:
```java
  public void testDebugFlag1() {
    args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
    args.add("--debug=false");
    test("function foo(a) {}",
         "function foo(a) {}");
  }

```
Test `com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag1` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal1
```

Test `com.google.javascript.jscomp.IntegrationTest::testIssue787`:
```java
  public void testIssue787() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
    level.setOptionsForCompilationLevel(options);
    WarningLevel warnings = WarningLevel.DEFAULT;
    warnings.setOptionsForWarningLevel(options);

    String code = "" +
        "function some_function() {\n" +
        "  var fn1;\n" +
        "  var fn2;\n" +
        "\n" +
        "  if (any_expression) {\n" +
        "    fn2 = external_ref;\n" +
        "    fn1 = function (content) {\n" +
        "      return fn2();\n" +
        "    }\n" +
        "  }\n" +
        "\n" +
        "  return {\n" +
        "    method1: function () {\n" +
        "      if (fn1) fn1();\n" +
        "      return true;\n" +
        "    },\n" +
        "    method2: function () {\n" +
        "      return false;\n" +
        "    }\n" +
        "  }\n" +
        "}";

    String result = "" +
        "function some_function() {\n" +
        "  var a, b;\n" +
        "  any_expression && (b = external_ref, a = function(a) {\n" +
        "    return b()\n" +
        "  });\n" +
        "  return{method1:function() {\n" +
        "    a && a();\n" +
        "    return !0\n" +
        "  }, method2:function() {\n" +
        "    return !1\n" +
        "  }}\n" +
        "}\n" +
        "";

    test(options, code, result);
  }

```
Test `com.google.javascript.jscomp.IntegrationTest::testIssue787` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal2
```

Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal1`:
```java
  public void testRemoveGlobal1() {
    removeGlobal = false;
    testSame("var x=1");
    test("var y=function(x){var z;}", "var y=function(x){}");
  }

```
Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal1` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal3
```

Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal2`:
```java
  public void testRemoveGlobal2() {
    removeGlobal = false;
    testSame("var x=1");
    test("function y(x){var z;}", "function y(x){}");
  }

```
Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal2` error:
```
junit.framework.AssertionFailedError: ;com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue168b
```

Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal3`:
```java
  public void testRemoveGlobal3() {
    removeGlobal = false;
    testSame("var x=1");
    test("function x(){function y(x){var z;}y()}",
         "function x(){function y(x){}y()}");
  }

```
Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testRemoveGlobal3` error:
```
junit.framework.AssertionFailedError:
```

Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue168b`:
```java
  public void testIssue168b() {
    removeGlobal = false;
    test("function a(){" +
         "  (function(x){ b(); })(1);" +
         "}" +
         "function b(){" +
         "  a();" +
         "}",
         "function a(){(function(x){b()})(1)}" +
         "function b(){a()}");
  }

```
Test `com.google.javascript.jscomp.RemoveUnusedVarsTest::testIssue168b` error:
```
junit.framework.AssertionFailedError:
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
