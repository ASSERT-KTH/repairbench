diff --git a/tmp/08182716-5856-45b5-bc2b-585ea1d46583_buggy.java b/tmp/8246afa5-c08a-4cc1-bbfd-86b45d6c4c4a_fixed.java
index 7116384..39ac8de 100644
--- a/tmp/08182716-5856-45b5-bc2b-585ea1d46583_buggy.java
+++ b/tmp/8246afa5-c08a-4cc1-bbfd-86b45d6c4c4a_fixed.java
@@ -1,39 +1,49 @@
     /**
      * Returns at most 63 bits read from the underlying stream.
      *
      * @param count the number of bits to read, must be a positive
      * number not bigger than 63.
      * @return the bits concatenated as a long using the stream's byte order.
      *         -1 if the end of the underlying stream has been reached before reading
      *         the requested number of bits
      * @throws IOException on error
      */
     public long readBits(final int count) throws IOException {
         if (count < 0 || count > MAXIMUM_CACHE_SIZE) {
             throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);
         }
         while (bitsCachedSize < count) {
             final long nextByte = in.read();
             if (nextByte < 0) {
-                return nextByte;
+                if (bitsCachedSize == 0) {
+                    return -1;
+                }
+                final long bitsOut;
+                if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
+                    bitsOut = (bitsCached & MASKS[bitsCachedSize]);
+                } else {
+                    bitsOut = (bitsCached >> (64 - bitsCachedSize)) & MASKS[bitsCachedSize];
+                }
+                bitsCachedSize = 0;
+                return bitsOut;
             }
             if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
                 bitsCached |= (nextByte << bitsCachedSize);
             } else {
                 bitsCached <<= 8;
                 bitsCached |= nextByte;
             }
             bitsCachedSize += 8;
         }
-            // bitsCachedSize >= 57 and left-shifting it 8 bits would cause an overflow
         
         final long bitsOut;
         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
             bitsOut = (bitsCached & MASKS[count]);
             bitsCached >>>= count;
         } else {
             bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];
+            bitsCached <<= count;
         }
         bitsCachedSize -= count;
         return bitsOut;
     }
\ No newline at end of file
