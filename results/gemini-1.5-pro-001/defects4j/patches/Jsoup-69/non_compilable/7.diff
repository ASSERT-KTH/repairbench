diff --git a/tmp/0da26811-19cc-4f5f-a69b-095174f833aa_buggy.java b/tmp/88e84b83-8610-4340-a49f-a37542e2c928_fixed.java
index e69de29..ac13123 100644
--- a/tmp/0da26811-19cc-4f5f-a69b-095174f833aa_buggy.java
+++ b/tmp/88e84b83-8610-4340-a49f-a37542e2c928_fixed.java
@@ -0,0 +1,175 @@
+import org.jsoup.Connection;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.jsoup.nodes.FormElement.ENCODING_ATTRIBUTES;
+
+/**
+ * A HTML Form Element provides ready access to the form's (typically HTML input) elements.
+ */
+public class FormElement extends Element {
+    private static final String _ENC_TYPE = "enctype";
+
+    /**
+     * Create a new, empty form element.
+     * @param tag form element tag
+     * @param baseUri the base uri
+     * @param attributes initial attributes
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the form element's action attribute.
+     * @return action attribute
+     */
+    public String action() {
+        return hasAttr("action") ? absUrl("action") : baseUri();
+    }
+
+    /**
+     * Set the form element's action attribute.
+     * @param action attribute value
+     */
+    public void action(String action) {
+        attr("action", action);
+    }
+
+    /**
+     * Get the form element's method attribute.
+     * @return method attribute, specified or implied
+     */
+    public String method() {
+        String method = attr("method").toLowerCase();
+        if (method.isEmpty())
+            return "get";
+        return method;
+    }
+
+    /**
+     * Set the form element's method attribute.
+     * @param method method to use.
+     */
+    public void method(String method) {
+        attr("method", method);
+    }
+
+    /**
+     * Get the form element's target attribute.
+     * @return target attribute
+     */
+    public String target() {
+        return attr("target");
+    }
+
+    /**
+     * Set the form element's target attribute.
+     * @param target target
+     */
+    public void target(String target) {
+        attr("target", target);
+    }
+
+    /**
+     * Returns the form's encoding. For a normal, text based form, this will return
+     * {@code application/x-www-form-urlencoded}. For a file upload form, this will return
+     * {@code multipart/form-data}.
+     * @return the form's encoding.
+     */
+    public String enctype() {
+        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm
+        // https://www.w3.org/TR/html5/forms.html#multipart-form-data
+        for (String attr : ENCODING_ATTRIBUTES) {
+            if (hasAttr(attr))
+                return attr("enctype");
+        }
+        return hasAttr("enctype") ? attr("enctype").toLowerCase() : "application/x-www-form-urlencoded";
+    }
+
+    /**
+     * Set the form element's encoding type. I.e. "application/x-www-form-urlencoded" or "multipart/form-data".
+     * @param enctype encoding type
+     */
+    public void enctype(String enctype) {
+        attr("enctype", enctype);
+    }
+
+    /**
+     * Get all the form element's input elements.
+     * <p>
+     * Note: this is a fairly expensive operation, as it walks the document tree.
+     * </p>
+     * @return all input elements
+     */
+    public Elements elements() {
+        return select("> input[type!=submit], > button[type!=submit], > textarea, > select");
+    }
+
+    /**
+     * Get all the form element's submit input elements.
+     * @return all submit input elements
+     */
+    public Elements submitElements() {
+        return select("> input[type=submit], > button[type=submit]");
+    }
+
+    /**
+     * Get the data that this form would submit. This is a linear map of input element names to values,
+     * i.e. as it would appear in the URL's query string.
+     * <p>
+     * Plain text fields and checkboxes are represented by input elements. Select options are represented by the
+     * element for the select with the value of the option.
+     * </p>
+     *
+     * @return the data that this form would submit
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // inputs
+        for (Element el : elements()) {
+            if (!el.tag().isFormSubmittable()) continue; // content is form listed but not submitted, like a pre-filled credit card no.
+
+            String name = el.attr("name");
+            if (name.length() == 0)
+                continue;
+
+            String type = el.attr("type");
+
+            if ("select".equals(el.tagName())) {
+                Elements selectedOptions = ((Select)el).selectedOptions();
+                // optimization for speed: only add if one option is selected
+                if (selectedOptions.size() == 1) {
+                    data.add(HttpConnection.KeyVal.create(name, selectedOptions.get(0).val()));
+                }
+            } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+                // only add checkbox or radio if they have a value defined
+                // otherwise we'd end up with a bunch of key/value pairs with name=name and value=on
+                if (el.hasAttr("value")) {
+                    if (el.hasAttr("checked")) {
+                        final String ignoreValue = "on";
+                        String value = el.attr("value");
+                        if (!value.equalsIgnoreCase(ignoreValue))
+                            data.add(HttpConnection.KeyVal.create(name, value));
+                    }
+                }
+            } else {
+                data.add(HttpConnection.KeyVal.create(name, el.attr("value")));
+            }
+        }
+        return data;
+    }
+
+    @Override
+    public String toString() {
+        return String.format("<form %s action=\"%s\">%s</form>", attributes.toString(), action(), childNodes.toString());
+    }
+
+    @Override
+    public FormElement clone() {
+        return (FormElement) super.clone();
+    }
+}
\ No newline at end of file
