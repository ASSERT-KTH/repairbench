diff --git a/tmp/2bf7f111-8c55-4d6b-980a-94023b034569_buggy.java b/tmp/e101454a-fc3b-49c3-8967-812537b6c092_fixed.java
index e69de29..73fe73a 100644
--- a/tmp/2bf7f111-8c55-4d6b-980a-94023b034569_buggy.java
+++ b/tmp/e101454a-fc3b-49c3-8967-812537b6c092_fixed.java
@@ -0,0 +1,181 @@
+import org.jsoup.Connection;
+import org.jsoup.select.Elements;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.jsoup.internal.StringUtil.isBlank;
+
+/**
+ * A HTML Form Element provides ready access to the form fields/controls that are associated with it.
+ */
+public class FormElement extends Element {
+    private static final String _encType = "enctype";
+
+    /**
+     * Construct a new, empty form element
+     * @param tag form tag
+     * @param baseUri the base URI
+     * @param attributes initial attributes
+     */
+    public FormElement(Tag tag, String baseUri, Attributes attributes) {
+        super(tag, baseUri, attributes);
+    }
+
+    /**
+     * Get the form element's absolute action URL, with any relative URLs (e.g. an action attribute of "submit.php")
+     * resolved against the document's base URI.
+     * <p>
+     * If the form's absolute action URL cannot be determined (e.g. because it is not set, or the document has no base
+     * URI), it is returned as-is.
+     * @return absolute action URL
+     */
+    public String absoluteAction() {
+        return absUrl("action");
+    }
+
+    /**
+     * Set the form element's absolute action URL.
+     * @param url absolute URL
+     * @return this
+     */
+    public FormElement action(String url) {
+        attr("action", url);
+        return this;
+    }
+
+    /**
+     * Get the form element's method. (E.g. post, get)
+     * @return method, if set (for example {@code post} or {@code get}. Default is {@code get}
+     */
+    public String method() {
+        return attr("method").toLowerCase();
+    }
+
+    /**
+     * Set the form element's method
+     * @param method method, e.g. post, get
+     * @return this
+     */
+    public FormElement method(String method) {
+        attr("method", method);
+        return this;
+    }
+
+    /**
+     * Get the form element's character set encoding.
+     * @return character set encoding, blank string if not set. (For example {@code utf-8}, {@code ISO-8859-1})
+     * @deprecated Use {@link #acceptCharset()} instead
+     */
+    @Deprecated
+    public String charset() {
+        return attr("charset");
+    }
+
+    /**
+     * Set the form element's character set encoding.
+     * @param charset character set encoding
+     * @return this
+     * @deprecated Use {@link #acceptCharset(String)} instead
+     */
+    @Deprecated
+    public FormElement charset(String charset) {
+        attr("charset", charset);
+        return this;
+    }
+
+    /**
+     * Get the form element's accept-charset attribute.
+     * @return accept-charset attribute, blank string if not set. (For example {@code utf-8}, {@code ISO-8859-1})
+     */
+    public String acceptCharset() {
+        return attr("accept-charset");
+    }
+
+    /**
+     * Set the form element's accept-charset attribute.
+     * @param acceptCharset accept-charset attribute
+     * @return this
+     */
+    public FormElement acceptCharset(String acceptCharset) {
+        attr("accept-charset", acceptCharset);
+        return this;
+    }
+
+    /**
+     * Get the form element's request enctype.
+     * @return request enctype, default if not set (for example {@code application/x-www-form-urlencoded},
+     * {@code multipart/form-data}).
+     */
+    public String enctype() {
+        return attr(_encType).toLowerCase();
+    }
+
+    /**
+     * Set the form element's request enctype.
+     * @param enctype request enctype
+     * @return this
+     */
+    public FormElement enctype(String enctype) {
+        attr(_encType, enctype);
+        return this;
+    }
+
+    /**
+     * Get this form's submit elements.
+     * @return submit elements
+     */
+    public Elements submit() {
+        return select("input[type=submit], input[type=image], button[type=submit]");
+    }
+
+    /**
+     * Prepare to submit this form. A Connection object is created with the request set up from the form's values. You
+     * can then set up other options (like user-agent, timeout, follow-redirects, etc), then execute it to submit the
+     * form.
+     * @return a prepared connection to execute
+     */
+    public Connection submit() {
+        String action = hasAttr("action") ? absUrl("action") : baseUri();
+        return Jsoup.connect(action)
+            .data(formData())
+            .method(attr("method").toUpperCase().equals("POST") ? Connection.Method.POST : Connection.Method.GET);
+    }
+
+    /**
+     * Get the data that should be submitted from this form. The returned list is serializable to the Request.
+     * @return a list of key vals
+     */
+    public List<Connection.KeyVal> formData() {
+        ArrayList<Connection.KeyVal> data = new ArrayList<>();
+
+        // inputs
+        for (Element el : select("input[type=text], input[type=password], input[type=hidden], input[type=number], " +
+                "input[type=search], input[type=email], input[type=tel], input[type=url], input:not([type]), " +
+                "input[type=checkbox]:checked, input[type=radio]:checked, select, textarea")) {
+            String name = el.attr("name");
+            if (!isBlank(name)) {
+                String value = el.val();
+
+                if ("select".equals(el.tagName())) {
+                    Elements options = el.select("option:selected");
+                    boolean set = false;
+                    for (Element option : options) {
+                        if (option.hasAttr("value"))
+                            data.add(KeyVal.create(name, option.val()));
+                        else if (!option.hasAttr("disabled")) {
+                            // only use first if it doesn't have a value, and isn't disabled
+                            if (!set) {
+                                data.add(KeyVal.create(name, option.val()));
+                                set = true;
+                            }
+                        }
+                    }
+                } else {
+                    data.add(KeyVal.create(name, value));
+                }
+            }
+        }
+        return data;
+    }
+}
\ No newline at end of file
