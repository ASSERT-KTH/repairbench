You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
    //-----------------------------------------------------------------------
    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
        // overridden as superclass algorithm can't handle
        // 2004-02-29 + 48 months -> 2008-02-29 type dates
        if (valueToAdd == 0) {
            return values;
        }
            // month is largest field and being added to, such as month-day
        if (DateTimeUtils.isContiguous(partial)) {
            long instant = 0L;
            for (int i = 0, isize = partial.size(); i < isize; i++) {
                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
            }
            instant = add(instant, valueToAdd);
            return iChronology.get(partial, instant);
        } else {
            return super.add(partial, fieldIndex, values, valueToAdd);
        }
    }

```

The code fails the following tests.

Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap`:
```java
    public void testPlusMonths_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(-1);
        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28];org.joda.time.TestMonthDay_Basics::testPlusMonths_int_fromLeap
```

Test `org.joda.time.TestMonthDay_Basics::testMinusDays_int_negativeFromLeap`:
```java
    public void testMinusDays_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusDays(-1);
        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testMinusDays_int_negativeFromLeap` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28];org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeEndOfMonthAdjust
```

Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_fromLeap`:
```java
    public void testPlusMonths_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(1);
        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_fromLeap` error:
```
junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>;org.joda.time.TestMonthDay_Basics::testMinusMonths_int_endOfMonthAdjust
```

Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeEndOfMonthAdjust`:
```java
    public void testPlusMonths_int_negativeEndOfMonthAdjust() {
        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(-1);
        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeEndOfMonthAdjust` error:
```
junit.framework.AssertionFailedError: expected:<--02-29> but was:<--02-28>;org.joda.time.TestMonthDay_Basics::testMinusMonths_int_negativeFromLeap
```

Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_endOfMonthAdjust`:
```java
    public void testMinusMonths_int_endOfMonthAdjust() {
        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(1);
        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_endOfMonthAdjust` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28];org.joda.time.TestMonthDay_Basics::testMinusMonths_int_fromLeap
```

Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_negativeFromLeap`:
```java
    public void testMinusMonths_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(-1);
        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_negativeFromLeap` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28];org.joda.time.TestMonthDay_Basics::testPlusDays_int_fromLeap
```

Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_fromLeap`:
```java
    public void testMinusMonths_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(1);
        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testMinusMonths_int_fromLeap` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]
```

Test `org.joda.time.TestMonthDay_Basics::testPlusDays_int_fromLeap`:
```java
    public void testPlusDays_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusDays(1);
        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
        assertEquals(expected, result);
    }

```
Test `org.joda.time.TestMonthDay_Basics::testPlusDays_int_fromLeap` error:
```
org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
