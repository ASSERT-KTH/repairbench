diff --git a/tmp/7a27fb2a-8015-4d2e-ae9e-1a311e5ebea2_buggy.java b/tmp/7401061f-52c1-4a5b-b35d-b18447d04aa9_fixed.java
index b98f0a7..3a1be21 100644
--- a/tmp/7a27fb2a-8015-4d2e-ae9e-1a311e5ebea2_buggy.java
+++ b/tmp/7401061f-52c1-4a5b-b35d-b18447d04aa9_fixed.java
@@ -1,29 +1,40 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Propagate the type to the arguments.
+          Node paramsNode = ct.getParametersNode();
+          if (paramsNode != null) {
+            Node argsNode = constructor.getNext();
+            for (Node arg = paramsNode.getFirstChild(), argType = argsNode;
+                arg != null && argType != null;
+                arg = arg.getNext(), argType = argType.getNext()) {
+              scope = flowInference.assignTo(scope, argType,
+                  arg.getJSType(), getInferredTypeOf(n));
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
