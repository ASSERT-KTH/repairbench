diff --git a/tmp/b26b671f-4a00-4c38-b352-a4fb26636bd9_buggy.java b/tmp/d6d696e3-1017-4f76-a03e-2966c2424f36_fixed.java
index b98f0a7..a853e75 100644
--- a/tmp/b26b671f-4a00-4c38-b352-a4fb26636bd9_buggy.java
+++ b/tmp/d6d696e3-1017-4f76-a03e-2966c2424f36_fixed.java
@@ -1,29 +1,38 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
 
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Propagate the types of the arguments to parameters.
+          Node param = ct.getParametersNode().getFirstChild();
+          for (Node arg = constructor.getNext(); arg != null && param != null;
+               arg = arg.getNext(), param = param.getNext()) {
+            JSType paramType = param.getJSType();
+            if (paramType != null && paramType.isSubtypeOf(arg.getJSType())) {
+              scope = narrowType(scope, arg, paramType);
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
