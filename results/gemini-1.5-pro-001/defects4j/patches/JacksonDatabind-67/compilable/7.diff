diff --git a/tmp/00a07644-9181-4c4e-b11f-a73b77efe375_buggy.java b/tmp/010eda35-4e59-456e-a47d-48d493f29edf_fixed.java
index bc80637..7f13477 100644
--- a/tmp/00a07644-9181-4c4e-b11f-a73b77efe375_buggy.java
+++ b/tmp/010eda35-4e59-456e-a47d-48d493f29edf_fixed.java
@@ -1,33 +1,44 @@
     @Override
     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,
             JavaType type)
         throws JsonMappingException
     {
         final DeserializationConfig config = ctxt.getConfig();
         KeyDeserializer deser = null;
+        // First: handle custom deserializers (from module, annotations)
         if (_factoryConfig.hasKeyDeserializers()) {
             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());
             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {
                 deser = d.findKeyDeserializer(type, config, beanDesc);
                 if (deser != null) {
                     break;
                 }
             }
         }
-        // the only non-standard thing is this:
+        // and then post-processing
+        if (deser != null) {
+            if (_factoryConfig.hasDeserializerModifiers()) {
+                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
+                    KeyDeserializer modDeser = mod.modifyKeyDeserializer(config, type, deser);
+                    if (modDeser != deser) {
+                        deser = modDeser;
+                        // [databind#164]: And handle recursive chaining here...
+                        if (_factoryConfig.hasDeserializerModifiers()) {
+                            for (BeanDeserializerModifier mod2 : _factoryConfig.deserializerModifiers()) {
+                                deser = mod2.modifyKeyDeserializer(config, type, deser);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        // But if none found, need to use standard ones
         if (deser == null) {
+            // the only non-standard thing is this:
             if (type.isEnumType()) {
                 return _createEnumKeyDeserializer(ctxt, type);
             }
             deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);
         }
-        // and then post-processing
-        if (deser != null) {
-            if (_factoryConfig.hasDeserializerModifiers()) {
-                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
-                    deser = mod.modifyKeyDeserializer(config, type, deser);
-                }
-            }
-        }
         return deser;
     }
