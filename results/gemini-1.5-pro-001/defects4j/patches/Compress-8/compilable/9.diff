diff --git a/tmp/dd517385-106c-4836-b891-26a1bf8d522a_buggy.java b/tmp/60c6f967-80b1-4423-bcd2-311189ea1a94_fixed.java
index e087f95..fe6fe61 100644
--- a/tmp/dd517385-106c-4836-b891-26a1bf8d522a_buggy.java
+++ b/tmp/60c6f967-80b1-4423-bcd2-311189ea1a94_fixed.java
@@ -1,53 +1,69 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        if (length < 2) {
+            throw new IllegalArgumentException("At least 2 bytes needed");
+        }
+
+        int i = offset;
+        for (; i < end; i++){
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // CheckStyle:MagicNumber OFF
+                // we are done, we need to consume at least one digit
+                if (end - i > length - 2) {
+                // CheckStyle:MagicNumber ON
                     break;
                 }
+            }
 
         // Skip leading spaces
             if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+                if (!stillPadding) {
+                    // embedded space/NUL?
+                    if (i < end - 1 && (buffer[i + 1] == ' ' || buffer[i + 1] == 0)) {
+                        i++; // advance to the last space/NUL if any
+                    }
+                    break;
                 }
                 if (currentByte == (byte) ' ') {
-                break;
+                    stillPadding = false;
                 }
+                continue;
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
+        // Check for trailing space/NUL
+        if (i == end || (i != end - 1 && buffer[i] != ' ' && buffer[i] != 0)) {
+            throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, i, buffer[i]));
+        }
+
         return result;
     }
