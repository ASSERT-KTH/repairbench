diff --git a/tmp/7eefd61f-0e3f-4f33-92b0-3bb308dd6e0d_buggy.java b/tmp/d0189f4a-a2c7-4fe6-8b7e-a43ed1f38043_fixed.java
index e087f95..c7f185d 100644
--- a/tmp/7eefd61f-0e3f-4f33-92b0-3bb308dd6e0d_buggy.java
+++ b/tmp/d0189f4a-a2c7-4fe6-8b7e-a43ed1f38043_fixed.java
@@ -1,53 +1,79 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " < 2");
+        }
+
+        int i = offset;
+        // Skip leading spaces and zeros
+        for (; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
-                break;
-            }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
-                   continue;
+                return 0L;
             }
             if (currentByte == (byte) ' ') {
+                continue;
+            }
+            if (currentByte == '0') {
+                stillPadding = false;
+                continue;
+            }
+            if (currentByte >= '1' && currentByte <= '7') {
+                stillPadding = false;
+                result = (result << 3) + (currentByte - '0'); // convert from ASCII
                 break;
             }
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, currentByte));
         }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
+        // Must have at least one digit
+        if (i >= end) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, (byte) 0));
+        }
 
-            stillPadding = false;
+        // Parse remaining digits
+        for (++i; i < end; i++) {
+            final byte currentByte = buffer[i];
+            if (currentByte == ' ' || currentByte == 0) {
+                // Check for trailing space/NUL
+                for (++i; i < end; i++) {
+                    if (buffer[i] != ' ' && buffer[i] != 0) {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, i, currentByte));
+                    }
+                }
+                return result;
+            }
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         }
 
-        return result;
+        throw new IllegalArgumentException(
+            exceptionMessage(buffer, offset, length, i - 1, buffer[i - 1]));
     }
\ No newline at end of file
