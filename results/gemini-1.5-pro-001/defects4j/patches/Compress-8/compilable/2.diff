diff --git a/tmp/0b94bfdc-20f6-4906-8976-f74cb6330678_buggy.java b/tmp/9ecfb685-4f0e-4049-929a-f57a4a7fd46b_fixed.java
index e087f95..0950edb 100644
--- a/tmp/0b94bfdc-20f6-4906-8976-f74cb6330678_buggy.java
+++ b/tmp/9ecfb685-4f0e-4049-929a-f57a4a7fd46b_fixed.java
@@ -1,53 +1,74 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " < 2");
+        }
+
+        int i = offset;
+        // Skip leading spaces and NULs
+        while (i < end) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                i++;
+            } else {
+                stillPadding = false;
                 break;
             }
+        }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Must have at least one digit
         if (stillPadding) {
-                   continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
+            throw new IllegalArgumentException(
+                exceptionMessage(buffer, offset, length, i, (byte) 0));
         }
 
+        for (; i < end; i++){
+            final byte currentByte = buffer[i];
+
             // Must have trailing NUL or space
             // May have additional NUL or space
+            if (currentByte == (byte) ' ' || currentByte == 0) {
+                // Check for additional NUL or space
+                if ((i + 1) < end) {
+                    i++;
+                    while (i < end) {
+                        if (buffer[i] != (byte) ' ' && buffer[i] != 0) {
+                            throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, i, currentByte));
+                        }
+                        i++;
+                    }
+                }
+                break;
+            }
 
-            stillPadding = false;
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                    exceptionMessage(buffer, offset, length, i, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
