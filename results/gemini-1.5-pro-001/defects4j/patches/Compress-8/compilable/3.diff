diff --git a/tmp/c0efa773-fdce-4e21-87e6-17e8b3f5e26d_buggy.java b/tmp/4d22b4f0-3d79-4798-b549-322288682964_fixed.java
index e087f95..bb198e0 100644
--- a/tmp/c0efa773-fdce-4e21-87e6-17e8b3f5e26d_buggy.java
+++ b/tmp/4d22b4f0-3d79-4798-b549-322288682964_fixed.java
@@ -1,53 +1,67 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
 
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " must be at least 2");
+        }
+
         for (int i = start; i < end; i++){
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
+        // Skip leading spaces and NULs
             if (stillPadding) {
+                if (currentByte == (byte) ' ' || currentByte == 0) {
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
+            }
+
+            if (currentByte == 0 || currentByte == (byte) ' ') {
+                // Check for trailing space/NUL.
+                // The previous character must have been a digit.
+                if (i == start || stillPadding) {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+
+                // Check for an additional space/NUL
+                i++;
+                if (i < end) {
+                    final byte trailingByte = buffer[i];
+                    if (trailingByte != 0 && trailingByte != (byte) ' ') {
+                        throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                    }
+                }
                 break;
             }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
