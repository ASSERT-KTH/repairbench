diff --git a/tmp/9d08cd18-86b7-4512-aa60-f962e0473b2d_buggy.java b/tmp/dc9cca13-30d1-41fe-a562-436210217747_fixed.java
index e087f95..f6f64fd 100644
--- a/tmp/9d08cd18-86b7-4512-aa60-f962e0473b2d_buggy.java
+++ b/tmp/dc9cca13-30d1-41fe-a562-436210217747_fixed.java
@@ -1,53 +1,70 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
-        int     start = offset;
 
-        for (int i = start; i < end; i++){
-            final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
+        if (length < 2) {
+            throw new IllegalArgumentException("Length " + length + " < 2");
         }
 
-        // Skip leading spaces
+        int i = offset;
+        // Skip leading spaces and zeros
+        for (; i < end; i++) {
+            final byte currentByte = buffer[i];
             if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
+            if (currentByte == 0 && i + 1 == end) {
+                // buffer has trailing NUL
                 break;
             }
+            if (currentByte == 0) {
+                // Embedded NUL
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
             stillPadding = false;
+            break;
+        }
+
+        // Must have at least one digit
+        if (stillPadding) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i, buffer[offset]));
+        }
+
+        for (; i < end; i++) {
+            final byte currentByte = buffer[i];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
-                        exceptionMessage(buffer, offset, length, start, currentByte));
+                        exceptionMessage(buffer, offset, length, i, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         }
 
+        // Check trailing space/NUL
+        if (i < end + 2
+            && (buffer[i - 1] != ' ' && buffer[i - 1] != 0)) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, i - 1, buffer[i - 1]));
+        }
         return result;
     }
