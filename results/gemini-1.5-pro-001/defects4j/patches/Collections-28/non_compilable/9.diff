diff --git a/tmp/cf073cf4-0250-45f5-93d8-4aaac924b9a4_buggy.java b/tmp/dc60be07-abb1-4412-8b2f-ad72df5d08c1_fixed.java
index e69de29..cc73224 100644
--- a/tmp/cf073cf4-0250-45f5-93d8-4aaac924b9a4_buggy.java
+++ b/tmp/dc60be07-abb1-4412-8b2f-ad72df5d08c1_fixed.java
@@ -0,0 +1,28 @@
+    @Override
+    public void clear() {
+        // NOTE: Clear modifies the collection this map is based on,
+        //       but we have no guarantee that our prefix is still valid
+        //       after modification.  For example, calling clear will
+        //       cause this to be thrown:
+        //
+        //       PatriciaTrie<String, String> trie = new PatriciaTrie<String, String>();
+        //       trie.put("Anna", "Anna");
+        //       trie.put("Anael", "Anael");
+        //       SortedMap<String, String> map = trie.prefixMap("An");
+        //       map.clear();
+        //       trie.put("Bob", "Bob");
+        //       trie.keySet().iterator().next();
+        //
+        //       The prefixMap and the iterator in the above example
+        //       share the same PrefixNode.  The iterator is reset to
+        //       the root, since that is the safe thing to do, but the
+        //       prefixMap is not notified.  If the prefixMap is used,
+        //       this will result in an IllegalArgumentException.
+        //
+        //       Since there is no way to determine if the parent trie
+        //       has been modified, we simply clear this map and make
+        //       it invalid.
+        _prefix = null;
+        _root = null;
+        _original = null;
+    }
\ No newline at end of file
