diff --git a/tmp/6e8cac2a-a366-447f-97ad-bd2b541639df_buggy.java b/tmp/40181c31-b289-40f8-b18e-e17753373ebd_fixed.java
index e69de29..5d5288a 100644
--- a/tmp/6e8cac2a-a366-447f-97ad-bd2b541639df_buggy.java
+++ b/tmp/40181c31-b289-40f8-b18e-e17753373ebd_fixed.java
@@ -0,0 +1,238 @@
+import java.util.HashMap;
+import java.util.Map;
+
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.TypeBindings;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+
+public class RecursiveType extends JavaType
+{
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Placeholder used before actual full type is available
+     */
+    private final JavaType _placeHolder;
+
+    private final Class<?> _class;
+    
+    /**
+     * Recursion context at point of `_class` being set
+     */
+    private final TypeBindings _bindings;
+
+    private JavaType _superType;
+    private JavaType[] _interfaceTypes;
+
+    // Transient because sharing not safe; only needed during linking
+    // phase in some cases
+    private transient RecursiveType _referencedType;
+
+    public RecursiveType(Class<?> erasedType, JavaType placeHolder)
+    {
+        super(erasedType, placeHolder.hashCode(), placeHolder.getRawClass(),
+                placeHolder.getTypeHandler(), placeHolder.getContentTypeHandler(),
+                // should these be passed as is?
+                placeHolder.getBindings(), placeHolder, placeHolder.isContainerType(),
+                placeHolder.isReferenceType());
+        _class = erasedType;
+        _placeHolder = placeHolder;
+        // 01-Jul-2016, tatu: Important! Let's use "empty" bindings to begin with
+        //   (both to simplify logic, and ensure we can handle recursive self-references)
+        _bindings = TypeBindings.emptyBindings();
+    }
+
+    public void setReference(RecursiveType ref)
+    {
+        // sanity check (should never occur)
+        if (ref == this || _referencedType == ref) {
+            return;
+        }
+        _referencedType = ref;
+    }
+
+    @Override
+    public JavaType withContentType(JavaType contentType) {
+        // 28-Sep-2016, tatu: Not sure if this can ever occur, but just in case
+        throw new IllegalArgumentException("Cannot override content type of "+this);
+    }
+    
+    @Override
+    public RecursiveType withTypeHandler(Object h) {
+        return (RecursiveType) _narrow(h);
+    }
+
+    @Override
+    public JavaType withContentTypeHandler(Object h)
+    {
+        // 28-Sep-2016, tatu: Not sure if this can ever occur, but just in case
+        throw new IllegalArgumentException("Cannot override content type of "+this);
+    }
+
+    @Override
+    public RecursiveType withValueHandler(Object h) {
+        return (RecursiveType) _narrow(h);
+    }
+
+    @Override
+    public JavaType withContentValueHandler(Object h) {
+        return (RecursiveType) _narrow(h);
+    }
+    
+    @Override
+    protected JavaType _narrow(Object h) {
+        // Almost same as super-class implementation, except for this:
+        RecursiveType result = new RecursiveType(_class, _placeHolder);
+        result._superType = _superType;
+        result._interfaceTypes = _interfaceTypes;
+        // 11-May-2016, tatu: Also important to connect these!
+        result._referencedType = _referencedType;
+        return result;
+    }
+
+    @Override
+    public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
+    {
+        if ((rawType == _class) || !_class.isAssignableFrom(rawType)) {
+            return null;
+        }
+        // 02-May-2016, tatu: Not sure if this actually works (or if original
+        //   works either)... need to revisit, try to simplify. But can only
+        //   do much here, really
+        if (_superType == null) {
+            _superType = superClass;
+            _interfaceTypes = superInterfaces;
+            // [databind#1647]: If by now we have resolved a reference, need to
+            //     use that type's refinements
+            if (_referencedType != null) {
+                _referencedType = (RecursiveType) _referencedType.refine(rawType, bindings,
+                        superClass, superInterfaces);
+            }
+            return this;
+        }
+        return new RecursiveType(_class, _placeHolder)
+            .refine(rawType, bindings, superClass, superInterfaces);
+    }
+
+    /**
+     * Method that is to be called to check whether this type
+     * is now fully resolved, and if not, to resolve it.
+     */
+    public JavaType getSuperClass()
+    {
+        if (_superType != null) {
+            return _superType;
+        }
+        if (_referencedType != null) {
+            return _referencedType.getSuperClass();
+        }
+        _superType = _placeHolder.getSuperClass();
+        if (_superType != null) {
+            _superType = buildCanonical(TypeFactory.unknownType(), _superType, new HashMap<Object, JavaType>());
+        }
+        return _superType;
+    }
+
+    @Override
+    public JavaType[] getInterfaces() { 
+        if (_interfaceTypes == null) {
+            if (_referencedType != null) {
+                return _interfaceTypes = _referencedType.getInterfaces();
+            }
+            if (_placeHolder != null) {
+                _interfaceTypes = _placeHolder.getInterfaces();
+            }
+            if (_interfaceTypes == null) {
+                _interfaceTypes = new JavaType[0];
+            }
+        }
+        return _interfaceTypes;
+    }
+    
+    @Override
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder(40).append("[recursive ");
+        sb.append(_class.getName());
+        if (_referencedType != null) {
+            sb.append(" -> ").append(_referencedType.getRawClass().getName());
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null || o.getClass() != getClass()) return false;
+
+        RecursiveType other = (RecursiveType) o;
+
+        // first: must use same placeholder
+        if (_placeHolder != other._placeHolder) {
+            if (_placeHolder == null || !_placeHolder.equals(other._placeHolder)) {
+                return false;
+            }
+        }
+        // and then actual concrete type (or if not available, same name)
+        if (_class != other._class) {
+            return false;
+        }
+        return true;
+    }
+    
+    /**
+     * Helper method that will try to expand given type if it is a
+     * {@link RecursiveType}, and it points to the type being constructed
+     * (direct or indirect self-reference). If so, placeholder type
+     * is returned to terminate recursion; otherwise original type is
+     * passed as is.
+     *
+     * @param tc Type context to use for constructing canonical type, if type
+     *    cannot be simplified
+     * @param type Type to check
+     * @param seenTypes Map that keeps track of already seen types; used to
+     *   detect and break endless recursion
+     */
+    private JavaType buildCanonical(JavaType tc, JavaType type, Map<Object, JavaType> seenTypes)
+    {
+        if (!(type instanceof RecursiveType)) {
+            return type;
+        }
+        RecursiveType rt = (RecursiveType) type;
+        // Has it been resolved to a real type?
+        if (rt._referencedType != null) {
+            return rt._referencedType;
+        }
+        Class<?> rawType = rt._class;
+        final Object key = rt._placeHolder;
+        JavaType canon = seenTypes.get(key);
+        if (canon != null) {
+            // 24-Feb-2016, tatu: Important: although we efficiently managed to
+            //    break infinite loop, it'd still be nice to use canonical
+            //    type if we happen to have one...
+            return canon;
+        }
+        // Nope, not yet; need to "materialize"
+        seenTypes.put(key, type);
+        // First, super-type:
+        JavaType newSuper = (rt._superType == null) ? tc.getRawClass(rawType).getSuperClass() : rt._superType;
+        // and then interfaces...
+        JavaType[] newInterfaces = null;
+        JavaType[] oldInterfaces = rt._interfaceTypes;
+        final int len = (oldInterfaces == null) ? 0 : oldInterfaces.length;
+        if (len > 0) {
+            newInterfaces = new JavaType[len];
+            for (int i = 0; i < len; ++i) {
+                newInterfaces[i] = buildCanonical(tc, oldInterfaces[i], seenTypes);
+            }
+        }
+        // and now we have components; can construct canonical type which is then
+        // connected to recursive type
+        canon = tc.constructSimpleType(rt._class, _bindings, newSuper, newInterfaces);
+        rt.setReference((RecursiveType) canon);
+        // Ok, then, can simplify and return:
+        return canon; 
+    }
+}
\ No newline at end of file
