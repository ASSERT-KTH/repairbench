diff --git a/tmp/be5d7581-ebc8-438e-863d-cf4bc382fe28_buggy.java b/tmp/4260e6a1-c969-4075-a997-c6a8adfda18b_fixed.java
index e69de29..a26302d 100644
--- a/tmp/be5d7581-ebc8-438e-863d-cf4bc382fe28_buggy.java
+++ b/tmp/4260e6a1-c969-4075-a997-c6a8adfda18b_fixed.java
@@ -0,0 +1,81 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.lang.reflect.TypeVariable;
+import java.util.*;
+
+import com.fasterxml.jackson.databind.JavaType;
+
+/**
+ * We need a custom variant of {@link TypeBindings} which is aware
+ * of recursive types.
+ */
+public class RecursiveTypeBinding extends TypeBindings
+{
+    private static final long serialVersionUID = 1L;
+
+    private final JavaType _targetType;
+
+    public RecursiveTypeBinding(JavaType targetType) {
+        super(NO_TYPES, null);
+        _targetType = targetType;
+    }
+
+    @Override
+    public JavaType findBoundType(String name) {
+        if (_targetType.getRawClass().getName().contains(name)) {
+            // First: small optimization, let's avoid recursion for very common case
+            return _targetType;
+        }
+        return _findBoundType(name);
+    }
+
+    protected JavaType _findBoundType(String name)
+    {
+        // [databind#1647]: Need to go up the hierarchy...
+        JavaType t = _targetType;
+        while (t != null) {
+            for (JavaType param : t.getBoundTypeParameters()) {
+                if (param.getRawClass().getName().equals(name)) {
+                    return param;
+                }
+            }
+            t = t.getSuperClass();
+        }
+        return null;
+    }
+
+    @Override
+    public List<JavaType> getTypeParameters() {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public int size() { return 0; }
+
+    @Override
+    public JavaType getBoundType(int index) {
+        return null;
+    }
+
+    @Override
+    public boolean isEmpty() { return true; }
+
+    @Override
+    public String toString() {
+        return "[recursive]";
+    }
+
+    @Override
+    public int hashCode() {
+        return _targetType.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (o == this) return true;
+        if (o == null || o.getClass() != getClass()) return false;
+        RecursiveTypeBinding other = (RecursiveTypeBinding) o;
+        return _targetType.equals(other._targetType);
+    }
+}
\ No newline at end of file
