diff --git a/tmp/dcab4b90-610b-43a8-99f6-05da62ee92f6_buggy.java b/tmp/b42b5ca5-8f79-4b71-bcd6-4290eef9d594_fixed.java
index e69de29..9e2d9f8 100644
--- a/tmp/dcab4b90-610b-43a8-99f6-05da62ee92f6_buggy.java
+++ b/tmp/b42b5ca5-8f79-4b71-bcd6-4290eef9d594_fixed.java
@@ -0,0 +1,48 @@
+import com.fasterxml.jackson.databind.JavaType;
+import com.fasterxml.jackson.databind.type.TypeBindings;
+import com.fasterxml.jackson.databind.type.TypeFactory;
+import com.fasterxml.jackson.databind.type.SimpleType;
+
+public class RecursiveType extends SimpleType {
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Placeholder used until real Super-type is known
+     */
+    protected JavaType _superClass;
+
+    public RecursiveType(Class<?> cls, TypeBindings bindings,
+            JavaType superClass, JavaType[] superInts)
+    {
+        super(cls, bindings, superClass, superInts,
+               Object.class == cls, Object.class == cls);
+        _superClass = superClass;
+    }
+
+    @Override
+    protected JavaType _narrow(Class<?> subclass) {
+        return new RecursiveType(subclass, _bindings, _superClass, _superInterfaces);
+    }
+
+    @Override
+    public JavaType getSuperClass() {
+        return _superClass;
+    }
+
+    public void setSuperClass(JavaType superClass) {
+        _superClass = superClass;
+        // Workaround for infinite recursion with TypeFactory.constructType(Class)
+        if (_superClass instanceof RecursiveType) {
+            ((RecursiveType) _superClass).setSuperClass(this);
+        }
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder(40);
+        sb.append("[recursive type; ");
+        sb.append(getRawClass().getName());
+        sb.append(']');
+        return sb.toString();
+    }
+}
\ No newline at end of file
