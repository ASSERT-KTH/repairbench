You are an automatic program repair tool. Your task is to fix the provided buggy code.

The following code contains a buggy function:
```java
  @Override
  public void matchConstraint(JSType constraint) {
    // We only want to match constraints on anonymous types.
    if (hasReferenceName()) {
      return;
    }

    // Handle the case where the constraint object is a record type.
    //
    // param constraint {{prop: (number|undefined)}}
    // function f(constraint) {}
    // f({});
    //
    // We want to modify the object literal to match the constraint, by
    // taking any each property on the record and trying to match
    // properties on this object.
    if (constraint.isRecordType()) {
      matchRecordTypeConstraint(constraint.toObjectType());
    }
  }

```

The code fails the following tests.

Test `com.google.javascript.jscomp.TypeInferenceTest::testRecordInference`:
```java
  public void testRecordInference() {
    inFunction(
        "/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */" +
        "function f(x) {}" +
        "var out = {};" +
        "f(out);");
    assertEquals("{a: (boolean|undefined), b: (string|undefined)}",
        getType("out").toString());
  }

```
Test `com.google.javascript.jscomp.TypeInferenceTest::testRecordInference` error:
```
junit.framework.ComparisonFailure: expected:<{[prop: (string|undefined)]}> but was:<{[]}>
```

Test `com.google.javascript.jscomp.TypeInferenceTest::testIssue785`:
```java
  public void testIssue785() {
    inFunction("/** @param {string|{prop: (string|undefined)}} x */" +
               "function f(x) {}" +
               "var out = {};" +
               "f(out);");
    assertEquals("{prop: (string|undefined)}", getType("out").toString());
  }

```
Test `com.google.javascript.jscomp.TypeInferenceTest::testIssue785` error:
```
junit.framework.ComparisonFailure: expected:<{[prop: (string|undefined)]}> but was:<{[]}>
```


Please provide a fixed version of the buggy function, and only that function, inside a code block.
