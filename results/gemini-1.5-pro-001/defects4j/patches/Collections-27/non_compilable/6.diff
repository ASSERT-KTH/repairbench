diff --git a/tmp/5b7eec36-713d-4a37-a2ed-c081f4b41849_buggy.java b/tmp/0516a00b-1d41-4d3c-bedc-ca8e8326fd40_fixed.java
index e69de29..0c449e4 100644
--- a/tmp/5b7eec36-713d-4a37-a2ed-c081f4b41849_buggy.java
+++ b/tmp/0516a00b-1d41-4d3c-bedc-ca8e8326fd40_fixed.java
@@ -0,0 +1,42 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Map;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+public class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {
+    
+    public MultiValueMap() {
+        super(new HashMap<K, Collection<V>>());
+    }
+
+    //-----------------------------------------------------------------------
+    private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        ois.defaultReadObject();
+        doReadObject(ois);
+    }
+
+    private void writeObject(ObjectOutputStream oos) throws IOException {
+        oos.defaultWriteObject();
+        doWriteObject(oos);
+    }
+
+    @SuppressWarnings("unchecked")
+    private void doReadObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {
+        Object obj = ois.readObject();
+        if (obj instanceof Class == false) {
+            throw new UnsupportedOperationException("Class is not serializable");
+        }
+        Class<?> clazz = (Class<?>) obj;
+        if (clazz.equals(ArrayList.class) == false) {
+            throw new UnsupportedOperationException("Unsupported class: " + clazz.getName());
+        }
+        obj = ois.readObject();
+        if (obj instanceof Map == false) {
+            throw new UnsupportedOperationException("Map is not serializable");
+        }
+        map = (Map<K, Collection<V>>) obj;
+    }
+
+}
\ No newline at end of file
