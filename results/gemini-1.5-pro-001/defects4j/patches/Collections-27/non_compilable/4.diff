diff --git a/tmp/64639c8a-6a2f-4bf1-9526-c1b8cfaec51d_buggy.java b/tmp/d66b78ac-785e-4546-a0bd-7c983b875d67_fixed.java
index e69de29..213a30e 100644
--- a/tmp/64639c8a-6a2f-4bf1-9526-c1b8cfaec51d_buggy.java
+++ b/tmp/d66b78ac-785e-4546-a0bd-7c983b875d67_fixed.java
@@ -0,0 +1,87 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.CollectionUtils;
+
+/**
+ * A {@link Map} implementation that allows for multiple values for a given key.
+ * <p>
+ * This map is implemented internally using a {@link HashMap} to map keys to
+ * {@link Collection}s. It also has the ability to return null for both the
+ * {@link #get(Object)} and {@link #put(Object, Object)} operations.
+ * </p>
+ * <p>
+ * This class is not thread-safe. When it is necessary to use this map from
+ * multiple threads, it must be synchronized externally.
+ * </p>
+ *
+ * @param <K> the type of the keys in this map
+ * @param <V> the type of the values in this map
+ * @since 3.0
+ */
+public class MultiValueMap<K, V> implements Map<K, Object> {
+
+    /**
+     * The map used to store the data
+     */
+    private Map<K, Collection<V>> map;
+
+    /**
+     * The collection class to use
+     */
+    private final Class<? extends Collection<V>> collectionClass;
+
+    /**
+     * Instantiates a new MultiValueMap with a {@link HashMap}
+     * and {@link ArrayList}s.
+     *
+     * @param collectionClass the collection class to use
+     */
+    public MultiValueMap(final Class<? extends Collection<V>> collectionClass) {
+        this(new HashMap<K, Collection<V>>(), collectionClass);
+    }
+
+    /**
+     * Instantiates a new MultiValueMap with the given map and {@link ArrayList}s.
+     *
+     * @param map             the map to use
+     * @param collectionClass the collection class to use
+     */
+    public MultiValueMap(final Map<K, Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        this.map = map;
+        this.collectionClass = collectionClass;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Write the map out using a custom routine.
+     *
+     * @param out the stream to write to
+     * @throws IOException any exception
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     *
+     * @param in the stream to read from
+     * @throws IOException            any exception
+     * @throws ClassNotFoundException any exception
+     */
+    @SuppressWarnings("unchecked")
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        map = (Map<K, Collection<V>>) in.readObject();
+        if (!collectionClass.isInterface() && !CollectionUtils.isSubCollection(collectionClass, Collection.class)) {
+            throw new UnsupportedOperationException("Suspicious collection class: " + collectionClass.getName());
+        }
+    }
+
+}
\ No newline at end of file
