diff --git a/tmp/713644de-7d9a-4f77-9513-1cc597a0fe3f_buggy.java b/tmp/612d5aeb-0ecb-4a82-8cc3-7d77d1b46d18_fixed.java
index e69de29..bd4d9e4 100644
--- a/tmp/713644de-7d9a-4f77-9513-1cc597a0fe3f_buggy.java
+++ b/tmp/612d5aeb-0ecb-4a82-8cc3-7d77d1b46d18_fixed.java
@@ -0,0 +1,115 @@
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.MultiValuedMap;
+
+/**
+ * A customized implementation of {@link MultiValuedMap} designed to deal with
+ * {@link Class} values.
+ * <p>
+ * This class is not thread-safe.
+ * </p>
+ *
+ * @since 4.1
+ * @serial
+ */
+public class MultiValueMap<K, V> extends AbstractMultiValuedMap<K, V> {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = 20150608L;
+
+    /** The factory to use for creating collection views. */
+    private final Factory<? extends Collection<V>> collectionClassFactory;
+
+    /**
+     * Constructor that creates a map with the the specified type.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionClass  the type of the collection to use
+     * @throws NullPointerException if map is null
+     * @throws NullPointerException if the collection class is null
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Class<? extends Collection<V>> collectionClass) {
+        super(map);
+        if (collectionClass == null) {
+            throw new NullPointerException("The collection class must not be null");
+        }
+        this.collectionClassFactory = CollectionUtils.collectionFactory(collectionClass);
+    }
+
+    /**
+     * Constructor that creates a map with the the specified type.
+     *
+     * @param map  the map to decorate, must not be null
+     * @param collectionFactory  the factory to use to create the collection
+     * @throws NullPointerException if map is null
+     * @throws NullPointerException if the collection factory is null
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("The collection factory must not be null");
+        }
+        this.collectionClassFactory = collectionFactory;
+    }
+
+    /**
+     * A constructor that creates a map that uses {@link ArrayList}s as
+     * the collections.
+     *
+     * @param map  the map to decorate, must not be null
+     * @throws NullPointerException if the map is null
+     */
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {
+        this(map, ArrayList.class);
+    }
+
+    /**
+     * Creates a new, empty {@link MultiValueMap} that uses
+     * {@link ArrayList}s as the collections.
+     */
+    public MultiValueMap() {
+        this(new HashMap<>(), ArrayList.class);
+    }
+
+    /**
+     * Write the map out using externalization.  Classes are not written*.
+     *
+     * @param out  the stream to write to
+     * @throws IOException if an error occurs
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(map);
+    }
+
+    /**
+     * Read the map in using externalization.  Classes are not specified*.
+     *
+     * @param in the stream to read from
+     * @throws IOException if an error occurs
+     * @throws ClassNotFoundException if the class is not found
+     */
+    @SuppressWarnings("unchecked")
+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        this.map = (Map<K, Collection<V>>) in.readObject();
+        if (collectionClassFactory == null) {
+            this.collectionClassFactory = CollectionUtils.collectionFactory(ArrayList.class);
+        }
+    }
+
+    @Override
+    protected Collection<V> createCollection() {
+        return this.collectionClassFactory.create();
+    }
+
+}
\ No newline at end of file
