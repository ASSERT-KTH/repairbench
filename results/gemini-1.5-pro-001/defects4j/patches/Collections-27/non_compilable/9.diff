diff --git a/tmp/7e6bac54-6937-4bd2-abd2-458b985a63e6_buggy.java b/tmp/6940ebe4-a2ec-4f28-99ee-aa1c0e77c21c_fixed.java
index e69de29..f2d3711 100644
--- a/tmp/7e6bac54-6937-4bd2-abd2-458b985a63e6_buggy.java
+++ b/tmp/6940ebe4-a2ec-4f28-99ee-aa1c0e77c21c_fixed.java
@@ -0,0 +1,509 @@
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.commons.collections4.Factory;
+import org.apache.commons.collections4.FunctorException;
+import org.apache.commons.collections4.MultiSet;
+import org.apache.commons.collections4.multiset.AbstractMultiSetDecorator;
+
+/**
+ * Provides a very simple multiset implementation that supports the {@code MultiSet} interface.
+ * <p>
+ * As the name implies, this is a simple implementation that is based on grouping keys and values
+ * together into a pair.
+ *
+ * @since 4.1
+ * @param <K> the type held by the multiset
+ * @deprecated since 4.2, use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+ */
+@Deprecated
+public final class MultiValueMap<K, V> extends AbstractMultiSetDecorator<K, V>
+        implements Map<K, Object>, Cloneable, java.io.Serializable {
+
+    /** Serialisation version */
+    private static final long serialVersionUID = 20150612L;
+
+    /** The factory to use to create value collections */
+    private final Factory<? extends Collection<V>> collectionFactory;
+
+    /**
+     * Creates a new empty {@code MultiValueMap} using
+     * {@link org.apache.commons.collections4.map.AbstractMultiValueMap.DefaultValueCollectionFactory}
+     * to create the value collections.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @return a new multi value map
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap() {
+        return new MultiValueMap<>(new HashMap<K, Collection<V>>());
+    }
+
+    /**
+     * Creates a new empty {@code MultiValueMap} using the supplied
+     * {@link Factory} to create the value collections.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @param collectionFactory a factory to create new collection objects to store value
+     * @return a new multi value map
+     * @throws NullPointerException if the factory is null
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Factory<? extends Collection<V>> collectionFactory) {
+        return new MultiValueMap<>(new HashMap<K, Collection<V>>(), collectionFactory);
+    }
+
+    /**
+     * Creates a new {@code MultiValueMap} that wraps the specified map.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @param map the map to wrap
+     * @return a new multi value map
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map) {
+        return new MultiValueMap<>(map);
+    }
+
+    /**
+     * Creates a new empty {@code MultiValueMap} using the supplied
+     * map and {@link Factory} to create the value collections.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @param map the map to wrap
+     * @param collectionFactory a factory to create new collection objects to store value
+     * @return a new multi value map
+     * @throws NullPointerException if the map or factory is null
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map,
+                                                            final Factory<? extends Collection<V>> collectionFactory) {
+        return new MultiValueMap<>(map, collectionFactory);
+    }
+
+    /**
+     * Creates a new {@code MultiValueMap} using
+     * {@link org.apache.commons.collections4.map.AbstractMultiValueMap.DefaultValueCollectionFactory}
+     * to create the value collections.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @param map the map to wrap, which is copied
+     * @param collectionClass the class of collection to use
+     * @return a new multi value map
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? extends Collection<V>> map,
+                                                            final Class<?> collectionClass) {
+        return new MultiValueMap<>(map, collectionClass);
+    }
+
+    /**
+     * Creates a new {@code MultiValueMap} that wraps the specified map
+     * and creates value collections of the specified class.
+     *
+     * @param <K> the key type
+     * @param <V> the element type
+     * @param collectionClass the class of collection to use
+     * @return a new multi value map
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public static <K, V> MultiValueMap<K, V> multiValueMap(final Class<?> collectionClass) {
+        return new MultiValueMap<>(new HashMap<K, Collection<V>>(), collectionClass);
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Constructor.
+     *
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public MultiValueMap() {
+        this(new HashMap<K, Collection<V>>(), new DefaultValueCollectionFactory<V>());
+    }
+
+    /**
+     * Constructor that uses the supplied map and
+     * {@link org.apache.commons.collections4.map.AbstractMultiValueMap.DefaultValueCollectionFactory}.
+     *
+     * @param map the map to decorate
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map) {
+        this(map, new DefaultValueCollectionFactory<V>());
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param map the map to decorate
+     * @param collectionFactory a factory to create new collection objects to store value
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map,
+                         final Factory<? extends Collection<V>> collectionFactory) {
+        super(map);
+        if (collectionFactory == null) {
+            throw new NullPointerException("collectionFactory");
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param map the map to decorate
+     * @param collectionClass the class of collection to use
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public MultiValueMap(final Map<K, ? extends Collection<V>> map, final Class<?> collectionClass) {
+        this(map, new ReflectionBasedCollectionFactory<V>(collectionClass));
+    }
+
+    /**
+     * Constructor.
+     *
+     * @param collectionClass the class of collection to use
+     * @deprecated use {@link org.apache.commons.collections4.multiset.HashMultiSet} instead
+     */
+    @Deprecated
+    public MultiValueMap(final Class<?> collectionClass) {
+        this(new HashMap<K, Collection<V>>(), collectionClass);
+    }
+
+    // -----------------------------------------------------------------------
+    @Override
+    public int size() {
+        int size = 0;
+        for (final Collection<V> col : decorated().values()) {
+            if (col != null) {
+                size += col.size();
+            }
+        }
+        return size;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return decorated().isEmpty();
+    }
+
+    @Override
+    public boolean containsValue(final Object value) {
+        for (final Collection<V> col : decorated().values()) {
+            if (col != null && col.contains(value)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public boolean containsKey(final Object key) {
+        return decorated().containsKey(key);
+    }
+
+    @Override
+    public int getCount(final Object object) {
+        final Collection<V> col = getCollection(object);
+        return col == null ? 0 : col.size();
+    }
+
+    @Override
+    public boolean add(final K object) {
+        return add(object, 1);
+    }
+
+    /**
+     * Adds a number of occurrences of the specified object to the multiset.
+     *
+     * @param object  the object to add
+     * @param occurrences  the number of occurrences to add, may be zero,
+     * in which case no change is made to the multiset
+     * @return {@code true} if the multiset changed
+     */
+    public boolean add(final K object, final int occurrences) {
+        if (occurrences < 1) {
+            return false;
+        }
+        final Collection<V> current = getCollection(object);
+        if (current == null) {
+            decorated().put(object, createCollection(occurrences));
+        } else {
+            for (int i = 0; i < occurrences; i++) {
+                current.add(null);
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public int add(final K key, final V value) {
+        getCollection(key).add(value);
+        return 1;
+    }
+
+    @Override
+    public int remove(final Object object, final int occurrences) {
+        if (occurrences < 1) {
+            return 0;
+        }
+
+        final Collection<V> current = getCollection(object);
+        if (current == null) {
+            return 0;
+        }
+
+        final int oldSize = current.size();
+        if (occurrences > current.size()) {
+            current.clear();
+        } else {
+            for (int i = 0; i < occurrences; i++) {
+                current.remove(null);
+            }
+        }
+        if (current.isEmpty()) {
+            decorated().remove(object);
+        }
+        return oldSize - current.size();
+    }
+
+    @Override
+    public boolean remove(final Object key, final Object value) {
+        final Collection<V> valuesForKey = getCollection(key);
+        final boolean result = valuesForKey != null && valuesForKey.remove(value);
+        if (valuesForKey != null && valuesForKey.isEmpty()) {
+            remove(key);
+        }
+        return result;
+    }
+
+    @Override
+    public void clear() {
+        decorated().clear();
+    }
+
+    @Override
+    public Object put(final K key, final Object value) {
+        return decorated().put(key, (Collection<V>) value);
+    }
+
+    /**
+     * Gets the collection of values associated with the specified key.
+     * This method will never return null, but may return an empty collection.
+     *
+     * @param key the key to retrieve
+     * @return the {@code Collection} of values, will return an empty {@code Collection}
+     * if the key is not present
+     */
+    public Collection<V> getCollection(final Object key) {
+        return decorated().get(key);
+    }
+
+    /**
+     * Gets the collection of values associated with the specified key.
+     *
+     * @param key the key to retrieve
+     * @param create  {@code true} to create the collection if it doesn't exist
+     * @return the {@code Collection} of values, will return {@code null}
+     * if the key is not present and {@code create} is {@code false}
+     */
+    public Collection<V> getCollection(final Object key, final boolean create) {
+        Collection<V> collection = decorated().get(key);
+        if (collection == null && create) {
+            collection = createCollection(1);
+            decorated().put((K) key, collection);
+        }
+        return collection;
+    }
+
+    /**
+     * Removes all values associated with the specified key.
+     *
+     * @param key the key to remove values from
+     * @return the {@code Collection} of values that were associated with the key,
+     * or {@code null} if the key was not present
+     */
+    @Override
+    public Collection<V> remove(final Object key) {
+        final Collection<V> collection = decorated().remove(key);
+        return collection == null ? null : createCollection(collection);
+    }
+
+    /**
+     * Creates a new instance of the value collection.
+     *
+     * @param size  the initial size of the value collection
+     * @return a new value collection
+     */
+    private Collection<V> createCollection(final int size) {
+        final Collection<V> collection = collectionFactory.create();
+        return collection == null ? null : createCollection(collection);
+    }
+
+    /**
+     * Creates a new empty value collection.
+     * <p>
+     * This is called internally to create a new entry for a key.
+     * The created collection will be returned by {@code getCollection} and
+     * {@code getValues}.
+     * </p>
+     * <p>
+     * The default implementation uses the factory to create an empty collection.
+     * Subclasses may provide their own implementation of this method.
+     * </p>
+     *
+     * @return a new, empty value collection
+     */
+    protected Collection<V> createCollection() {
+        return createCollection(1);
+    }
+
+    /**
+     * Creates a collection based on an existing collection.
+     * <p>
+     * This is called internally to copy value collections.
+     * </p>
+     *
+     * @param coll  the existing collection, may be null
+     * @return a new collection containing the data from the parameter collection
+     */
+    protected Collection<V> createCollection(final Collection<V> coll) {
+        if (coll == null) {
+            return null;
+        }
+        final Collection<V> collection = collectionFactory.create();
+        if (collection == null) {
+            return null;
+        }
+        collection.addAll(coll);
+        return collection;
+    }
+
+    // -----------------------------------------------------------------------
+    @Override
+    public MultiSet<K> uniqueSet() {
+        return decorated().keySet();
+    }
+
+    /**
+     * Write the map out using a custom routine.
+     * @param out the stream to write to
+     * @throws IOException if an error occurs while writing to the stream
+     */
+    private void writeObject(final ObjectOutputStream out) throws IOException {
+        out.defaultWriteObject();
+        out.writeObject(decorated());
+    }
+
+    /**
+     * Read the map in using a custom routine.
+     * @param in the stream to read from
+     * @throws IOException if an error occurs while reading from the stream
+     * @throws ClassNotFoundException if an error occurs while reading from the stream
+     */
+    @SuppressWarnings("unchecked") // (HashMap)
+    private void readObject(final ObjectInputStream in)
+            throws IOException, ClassNotFoundException {
+        in.defaultReadObject();
+        decorated((Map<K, ? extends Collection<V>>) in.readObject());
+    }
+
+    /**
+     * Default collection factory.
+     */
+    private static class DefaultValueCollectionFactory<V> implements Factory<Collection<V>>, Serializable {
+        /** Serial version */
+        private static final long serialVersionUID = 20150612L;
+
+        @Override
+        public Collection<V> create() {
+            return new ArrayList<V>();
+        }
+    }
+
+    /**
+     * Reflection based collection factory.
+     */
+    private static class ReflectionBasedCollectionFactory<V> implements Factory<Collection<V>>, Serializable {
+        /** Serial version */
+        private static final long serialVersionUID = 20150612L;
+
+        /** The class of the collection */
+        private final Class<?> collectionClass;
+
+        /**
+         * Create the factory.
+         * @param collectionClass the collection class
+         * @throws NullPointerException if the collection class is null
+         */
+        public ReflectionBasedCollectionFactory(final Class<?> collectionClass) {
+            if (collectionClass == null) {
+                throw new NullPointerException("collectionClass");
+            }
+            if (!Collection.class.isAssignableFrom(collectionClass)) {
+                throw new FunctorException("Specified class is not a Collection: " + collectionClass.getName());
+            }
+            this.collectionClass = collectionClass;
+        }
+
+        @SuppressWarnings("unchecked")
+        @Override
+        public Collection<V> create() {
+            return (Collection<V>) createCollection();
+        }
+
+        /**
+         * Create a collection.
+         * @return the collection
+         */
+        private Object createCollection() {
+            try {
+                return collectionClass.newInstance();
+            } catch (final InstantiationException ex) {
+                throw new FunctorException("Cannot instantiate class: " + collectionClass.getName(), ex);
+            } catch (final IllegalAccessException ex) {
+                throw new FunctorException("Security denied while trying to instantiate class: "
+                        + collectionClass.getName(), ex);
+            }
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public boolean equals(final Object obj) {
+            if (obj instanceof ReflectionBasedCollectionFactory) {
+                return collectionClass.equals(((ReflectionBasedCollectionFactory<?>) obj).collectionClass);
+            }
+            return false;
+        }
+
+        /**
+         * {@inheritDoc}
+         */
+        @Override
+        public int hashCode() {
+            return collectionClass.hashCode();
+        }
+    }
+
+}
\ No newline at end of file
