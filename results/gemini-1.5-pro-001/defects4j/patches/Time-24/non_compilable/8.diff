diff --git a/tmp/3300569f-2286-447e-a3fd-b62ad2eafc8a_buggy.java b/tmp/eb8a79ae-8e50-4415-9349-31df18dfb412_fixed.java
index 99d6a44..e023c0c 100644
--- a/tmp/3300569f-2286-447e-a3fd-b62ad2eafc8a_buggy.java
+++ b/tmp/eb8a79ae-8e50-4415-9349-31df18dfb412_fixed.java
@@ -1,58 +1,69 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
         if (count > 0) {
             // alter base year for parsing if first field is month or day
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
-                saveField(DateTimeFieldType.year(), iDefaultYear);
+                // If the first field is month or day, we use the default year
+                // and year-of-century to set the year to the minimum value
+                // before setting the month/day.  Otherwise, if we parsed in the
+                // day-of-year first, we would end up setting the year to 1970
+                // before setting the day-of-year.
+                int year;
+                if (iChrono.getChronology() instanceof GJChronology) {
+                    year = iChrono.year().get(iChrono.getDateTimeMillis(iDefaultYear, 1, 1, 0));
+                } else {
+                    year = iDefaultYear;
+                }
+                saveField(DateTimeFieldType.year(), year);
                 return computeMillis(resetFields, text);
             }
         }
 
         long millis = iMillis;
         try {
             for (int i = 0; i < count; i++) {
                 millis = savedFields[i].set(millis, resetFields);
             }
         } catch (IllegalFieldValueException e) {
             if (text != null) {
                 e.prependMessage("Cannot parse \"" + text + '"');
             }
             throw e;
         }
         
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
         
         return millis;
     }
