diff --git a/tmp/b2c4aa57-9ded-42cc-bb92-d392d85f3bd2_buggy.java b/tmp/df25e8e3-86d6-4fd3-a153-25cbc71f3d86_fixed.java
index 85e6a42..b6353e8 100644
--- a/tmp/b2c4aa57-9ded-42cc-bb92-d392d85f3bd2_buggy.java
+++ b/tmp/df25e8e3-86d6-4fd3-a153-25cbc71f3d86_fixed.java
@@ -1,50 +1,65 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
+        Map<String, ZipArchiveEntry> origMap = new HashMap<>();
+        for (Map.Entry<String, ZipArchiveEntry> ent : nameMap.entrySet()) {
+            origMap.put(ent.getKey(), ent.getValue());
+        }
+        nameMap.clear();
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
             String orig = ze.getName();
+            if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
+            }
             if (!orig.equals(ze.getName())) {
-                    nameMap.remove(orig);
+                // if the name changed, we need to update the name map
+                ZipArchiveEntry origZa = origMap.get(orig);
+                if (origZa == null) {
+                    // this should not happen as orig is the name of ze
+                    // when still using the central directory encoding
+                    throw new IllegalStateException(
+                        "orig: '" + orig + "' not in orig map - name: '"
+                        + ze.getName() + "'");
+                }
+                nameMap.put(ze.getName(), origZa);
+            } else {
                 nameMap.put(ze.getName(), ze);
             }
         }
     }
-    }
