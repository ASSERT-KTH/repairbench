diff --git a/tmp/b8f4a1f7-00d2-4422-8a2c-e0370dfda1c5_buggy.java b/tmp/a9149437-d6f8-4721-a0e1-e752570d4608_fixed.java
index 85e6a42..9d69e9b 100644
--- a/tmp/b8f4a1f7-00d2-4422-8a2c-e0370dfda1c5_buggy.java
+++ b/tmp/a9149437-d6f8-4721-a0e1-e752570d4608_fixed.java
@@ -1,50 +1,51 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
-            OffsetEntry offsetEntry = entries.get(ze);
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> ze : entries.entrySet()) {
+            ZipArchiveEntry entry = ze.getKey();
+            OffsetEntry offsetEntry = ze.getValue();
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
             int lenToSkip = fileNameLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
                     throw new RuntimeException("failed to skip file name in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+            entry.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
-            if (entriesWithoutUTF8Flag.containsKey(ze)) {
-                String orig = ze.getName();
-                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
-                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
+            if (entriesWithoutUTF8Flag.containsKey(entry)) {
+                String orig = entry.getName();
+                NameAndComment nc = entriesWithoutUTF8Flag.get(entry);
+                ZipUtil.setNameAndCommentFromExtraFields(entry, nc.name,
                                                          nc.comment);
-                if (!orig.equals(ze.getName())) {
+                if (!orig.equals(entry.getName())) {
                     nameMap.remove(orig);
-                    nameMap.put(ze.getName(), ze);
+                    nameMap.put(entry.getName(), entry);
                 }
             }
         }
     }
