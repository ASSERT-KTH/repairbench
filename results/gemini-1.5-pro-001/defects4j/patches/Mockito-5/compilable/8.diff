diff --git a/tmp/31c14aa2-2614-4b59-9c6f-456a88167da2_buggy.java b/tmp/3087b13b-094d-4680-9ce1-43abd744c194_fixed.java
index 9ac2149..db2fc0f 100644
--- a/tmp/31c14aa2-2614-4b59-9c6f-456a88167da2_buggy.java
+++ b/tmp/3087b13b-094d-4680-9ce1-43abd744c194_fixed.java
@@ -1,40 +1,42 @@
     /**
      * Verify the given ongoing verification data, and confirm that it satisfies the delegate verification mode
      * before the full duration has passed.
      *
      * In practice, this polls the delegate verification mode until it is satisfied. If it is not satisfied once
      * the full duration has passed, the last error returned by the delegate verification mode will be thrown
      * here in turn. This may be thrown early if the delegate is unsatisfied and the verification mode is known
      * to never recover from this situation (e.g. {@link AtMost}).
      *
      * If it is satisfied before the full duration has passed, behaviour is dependent on the returnOnSuccess parameter
      * given in the constructor. If true, this verification mode is immediately satisfied once the delegate is. If
      * false, this verification mode is not satisfied until the delegate is satisfied and the full time has passed.
      *
      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
      */
     public void verify(VerificationData data) {
         AssertionError error = null;
 
         timer.start();
         while (timer.isCounting()) {
             try {
                 delegate.verify(data);
 
                 if (returnOnSuccess) {
                     return;
                 } else {
                     error = null;
                 }
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
-                error = handleVerifyException(e);
-            }
+            // This is what caused the JUnit dependency. Not catching this specific exception
+            // means the method can still throw it, and it's in a JUnit-dependent package.
+            //catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+            //    error = handleVerifyException(e);
+            //}
         }
 
         if (error != null) {
             throw error;
         }
     }
