diff --git a/tmp/064dd86e-f4a2-4978-b03f-b70c1b1a3497_buggy.java b/tmp/78cde679-f10d-49ab-8272-00efc8e68fa1_fixed.java
index b12de99..cf5ea6b 100644
--- a/tmp/064dd86e-f4a2-4978-b03f-b70c1b1a3497_buggy.java
+++ b/tmp/78cde679-f10d-49ab-8272-00efc8e68fa1_fixed.java
@@ -1,52 +1,59 @@
     @Override public void visit(NodeTraversal t, Node n, Node parent) {
       if (t.inGlobalScope()) {
         return;
       }
 
       if (n.isReturn() && n.getFirstChild() != null) {
         data.get(t.getScopeRoot()).recordNonEmptyReturn();
       }
 
-      if (t.getScopeDepth() <= 2) {
       // The first-order function analyzer looks at two types of variables:
       //
       // 1) Local variables that are assigned in inner scopes ("escaped vars")
       //
       // 2) Local variables that are assigned more than once.
       //
       // We treat all global variables as escaped by default, so there's
       // no reason to do this extra computation for them.
+      if (t.getScopeDepth() <= 2) {
         return;
       }
 
       if (n.isName() && NodeUtil.isLValue(n) &&
           // Be careful of bleeding functions, which create variables
           // in the inner scope, not the scope where the name appears.
           !NodeUtil.isBleedingFunctionName(n)) {
         String name = n.getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordAssignedName(name);
           }
 
-          if (scope != ownerScope && ownerScope.isLocal()) {
+          // If a variable is assigned in an inner scope, we need to make sure
+          // that it is declared in the outer function scope, otherwise it's
+          // an illegal reference. For example, the following is illegal:
+          // function foo() { function bar() { baz = 3; } }
+          if (scope != ownerScope && ownerScope.isLocal() &&
+              !ownerScope.hasOwnSlot(name)) {
+            t.report(n, JSError.UNDECLARED_VARIABLE, name);
+          } else if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode()).recordEscapedVarName(name);
           }
         }
       } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&
           NodeUtil.isLValue(n)) {
         String name = NodeUtil.getRootOfQualifiedName(n).getString();
         Scope scope = t.getScope();
         Var var = scope.getVar(name);
         if (var != null) {
           Scope ownerScope = var.getScope();
           if (scope != ownerScope && ownerScope.isLocal()) {
             data.get(ownerScope.getRootNode())
                 .recordEscapedQualifiedName(n.getQualifiedName());
           }
         }
       }
     }
\ No newline at end of file
