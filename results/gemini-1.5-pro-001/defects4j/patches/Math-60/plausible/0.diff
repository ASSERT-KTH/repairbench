diff --git a/tmp/41ab20b5-9d58-4851-942e-9dab7b2cce48_buggy.java b/tmp/cfec15e3-ec5e-4168-928c-a899a0104dc5_fixed.java
index 3127f85..243ac55 100644
--- a/tmp/41ab20b5-9d58-4851-942e-9dab7b2cce48_buggy.java
+++ b/tmp/cfec15e3-ec5e-4168-928c-a899a0104dc5_fixed.java
@@ -1,24 +1,28 @@
     /**
      * For this distribution, {@code X}, this method returns {@code P(X < x)}.
      * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
      * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
      *
      * @param x Value at which the CDF is evaluated.
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
+        if (x < (mean - 40 * standardDeviation)) {
+            return 0.0d;
+        } else if (x > (mean + 40 * standardDeviation)) {
+            return 1.0d;
+        } else {
             try {
                 return 0.5 * (1.0 + Erf.erf((dev) /
                         (standardDeviation * FastMath.sqrt(2.0))));
             } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+                if (x < mean) { // JDK 1.5 blows at 38
+                    return 0.0d;
                 } else {
-                throw ex;
+                    return 1.0d;
+                }
             }
         }
     }
