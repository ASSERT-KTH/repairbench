diff --git a/tmp/6adc28dc-ce65-4380-b8a0-7453d5490dc3_buggy.java b/tmp/dda5dd85-b55a-431d-9bf7-9a7a211f87e0_fixed.java
index 46817a7..4df4549 100644
--- a/tmp/6adc28dc-ce65-4380-b8a0-7453d5490dc3_buggy.java
+++ b/tmp/dda5dd85-b55a-431d-9bf7-9a7a211f87e0_fixed.java
@@ -1,16 +1,34 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    // Add properties in this type that are not in that type.
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
+      if (!that.toMaybeRecordType().hasProperty(property)) {
         builder.addProperty(property, getPropertyType(property),
             getPropertyNode(property));
       }
     }
+    // Add properties in that type that are not in this type.
+    for (String property : that.toMaybeRecordType().getProperties()) {
+      if (!hasProperty(property)) {
+        builder.addProperty(
+            property,
+            that.toMaybeRecordType().getPropertyType(property),
+            that.toMaybeRecordType().getPropertyNode(property));
+      }
+    }
+    // Add properties that are in both types.
+    for (String property : properties.keySet()) {
+      if (that.toMaybeRecordType().hasProperty(property)) {
+        builder.addProperty(
+            property,
+            getPropertyType(property).getLeastSupertype(
+                that.toMaybeRecordType().getPropertyType(property)),
+            getPropertyNode(property));
+      }
+    }
     return builder.build();
   }
\ No newline at end of file
