diff --git a/tmp/79176d20-75df-4754-bd12-3d4a89480274_buggy.java b/tmp/47fc0e9a-c941-4ba3-b50b-db968e7f7b14_fixed.java
index 1c875ad..2bd303c 100644
--- a/tmp/79176d20-75df-4754-bd12-3d4a89480274_buggy.java
+++ b/tmp/47fc0e9a-c941-4ba3-b50b-db968e7f7b14_fixed.java
@@ -1,31 +1,20 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
+        int argumentPosition = 0;
+        for (Matcher m : matchers) {
             if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                if (invocation.getMethod().isVarArgs() && invocation.getRawArguments().length > matchers.size() && argumentPosition == matchers.size() - 1) {
+                    //this is vararg - we need to capture all remaining arguments
+                    int remainingArgsCount = invocation.getRawArguments().length - argumentPosition;
+                    Object[] vararg = new Object[remainingArgsCount];
+                    for (int i = 0; i < remainingArgsCount; i++) {
+                        vararg[i] = invocation.getRawArguments()[argumentPosition + i];
                     }
+                    ((CapturesArguments) m).captureFrom(vararg);
+                    return;
+                } else {
+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(argumentPosition, Object.class));
                 }
             }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
+            argumentPosition++;
+        }
     }
\ No newline at end of file
