diff --git a/tmp/4dd8ed3e-ddcf-43ea-ae99-418d3df3a659_buggy.java b/tmp/98cfe5f8-0309-4701-931c-292e65f2081f_fixed.java
index 1c875ad..63f7692 100644
--- a/tmp/4dd8ed3e-ddcf-43ea-ae99-418d3df3a659_buggy.java
+++ b/tmp/98cfe5f8-0309-4701-931c-292e65f2081f_fixed.java
@@ -1,31 +1,19 @@
     public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
+        int argumentPosition = 0;
+        for (Matcher m : matchers) {
+            if (m instanceof CapturesArguments && argumentPosition < invocation.getRawArguments().length) {
+                if (invocation.getMethod().isVarArgs() && invocation.getRawArguments().length == argumentPosition + 1) {
+                    //it is the last argument and it is a vararg:
+                    Object array = invocation.getRawArguments()[argumentPosition];
+                    for (int i = 0; i < Array.getLength(array); i++) {
+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
+                    }
+                    //since we've captured all varargs already, it does not make sense to process other matchers.
+                    return;
                 } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[argumentPosition]);
                 }
             }
+            argumentPosition++;
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
\ No newline at end of file
