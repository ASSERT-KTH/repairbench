diff --git a/tmp/872b4dc0-45ed-4222-ad93-83aedb405ce3_buggy.java b/tmp/9aa47146-583c-4ce0-9660-6ba3962cfdbb_fixed.java
index 544303b..b92d54c 100644
--- a/tmp/872b4dc0-45ed-4222-ad93-83aedb405ce3_buggy.java
+++ b/tmp/9aa47146-583c-4ce0-9660-6ba3962cfdbb_fixed.java
@@ -1,29 +1,29 @@
     /**
      * Get the current solution.
      * <p>
      * {@link #solve} should be called first for this to be the optimal solution.
      * </p>
      * @return current solution
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
         Integer basicRow =
             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         for (int i = 0; i < coefficients.length; i++) {
             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
-                // if multiple variables can take a given value 
-                // then we choose the first and set the rest equal to 0
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
             if (basicRow != null) {
                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
                     if (tableau.getEntry(basicRow, j) == 1) {
-                         coefficients[i] = 0;
+                         coefficients[j] =
+                             (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                             (restrictToNonNegative ? 0 : mostNegative);
                     }
                 }
+                coefficients[i] =
+                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                    (restrictToNonNegative ? 0 : mostNegative);
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
