diff --git a/tmp/1c542e47-0ac3-4697-9684-404c77362768_buggy.java b/tmp/c82d7947-1fe0-4247-a1c9-55d9b381779a_fixed.java
index 5f8ac1a..5adcd78 100644
--- a/tmp/1c542e47-0ac3-4697-9684-404c77362768_buggy.java
+++ b/tmp/c82d7947-1fe0-4247-a1c9-55d9b381779a_fixed.java
@@ -1,34 +1,52 @@
 private int compareNodePointers(
     NodePointer p1,
     int depth1,
     NodePointer p2,
     int depth2) 
 {
+    // Handle cases where one or both pointers are null
+    if (p1 == null && p2 == null) {
+        return 0;
+    }
+    if (p1 == null) {
+        return -1;
+    }
+    if (p2 == null) {
+        return 1;
+    }
+
+    // Handle case where pointers are equal
+    if (p1.equals(p2)) {
+        return 0;
+    }
+
+    // Adjust depths if they are different
     if (depth1 < depth2) {
         int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
         return r == 0 ? -1 : r;
     }
     if (depth1 > depth2) {
         int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
         return r == 0 ? 1 : r;
     }
-        if (p1 == null && p2 == null) {
-            return 0;
-        }
 
-        if (p1 != null && p1.equals(p2)) {
-            return 0;
+    // If we're at the root level and pointers are different
+    if (depth1 == 0) {
+        // Handle case where one pointer is a variable
+        if (p1.isContainer() || p2.isContainer()) {
+            return p1.toString().compareTo(p2.toString());
         }
-
-        if (depth1 == 1) {
         throw new JXPathException(
             "Cannot compare pointers that do not belong to the same tree: '"
                 + p1 + "' and '" + p2 + "'");
     }
+
+    // Compare parent nodes
     int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
     if (r != 0) {
         return r;
     }
 
+    // Compare child nodes
     return p1.parent.compareChildNodePointers(p1, p2);
 }
\ No newline at end of file
