diff --git a/tmp/73e4755d-ff75-4be7-b416-a81c189e6846_buggy.java b/tmp/94182321-b6d7-4c62-8ef1-e80c90b6813b_fixed.java
index d57736b..8fbef00 100644
--- a/tmp/73e4755d-ff75-4be7-b416-a81c189e6846_buggy.java
+++ b/tmp/94182321-b6d7-4c62-8ef1-e80c90b6813b_fixed.java
@@ -1,39 +1,28 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!objType.hasProperty(prop)) {
                         typeToInfer =
                             getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     }
+                    // Only infer the property if it doesn't exist or if it's not declared
+                    if (!objType.hasProperty(prop) || !objType.isPropertyTypeDeclared(prop)) {
                         objType.defineInferredProperty(prop, typeToInfer, null);
                     }
                 }
             }
         }
     }
+}
\ No newline at end of file
