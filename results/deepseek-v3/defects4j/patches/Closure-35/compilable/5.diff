diff --git a/tmp/422f78c6-372f-4c58-9d9f-ab71317c539a_buggy.java b/tmp/880c1d1f-683b-4b63-a970-89c357c3a3e8_fixed.java
index d57736b..4384b16 100644
--- a/tmp/422f78c6-372f-4c58-9d9f-ab71317c539a_buggy.java
+++ b/tmp/880c1d1f-683b-4b63-a970-89c357c3a3e8_fixed.java
@@ -1,39 +1,33 @@
-  /**
-   * Suppose X is an object with inferred properties.
-   * Suppose also that X is used in a way where it would only type-check
-   * correctly if some of those properties are widened.
-   * Then we should be polite and automatically widen X's properties for him.
-   *
-   * For a concrete example, consider:
-   * param x {{prop: (number|undefined)}}
-   * function f(x) {}
-   * f({});
-   *
-   * If we give the anonymous object an inferred property of (number|undefined),
-   * then this code will type-check appropriately.
-   */
 private void inferPropertyTypesToMatchConstraint(
     JSType type, JSType constraint) {
     if (type == null || constraint == null) {
         return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
         ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
         if (objType != null) {
             for (String prop : constraintObj.getOwnPropertyNames()) {
                 JSType propType = constraintObj.getPropertyType(prop);
                 if (!objType.isPropertyTypeDeclared(prop)) {
                     JSType typeToInfer = propType;
                     if (!objType.hasProperty(prop)) {
                         typeToInfer =
                             getNativeType(VOID_TYPE).getLeastSupertype(propType);
                     }
+                    // Only infer the property type if it's compatible with existing type
+                    if (objType.hasProperty(prop)) {
+                        JSType existingType = objType.getPropertyType(prop);
+                        if (!existingType.isSubtype(typeToInfer) && 
+                            !typeToInfer.isSubtype(existingType)) {
+                            continue;
+                        }
+                    }
                     objType.defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
 }
\ No newline at end of file
