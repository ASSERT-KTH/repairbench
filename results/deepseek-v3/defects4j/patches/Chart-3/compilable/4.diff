diff --git a/tmp/9149cadb-461f-48d4-afa9-e822c9c4ce25_buggy.java b/tmp/7b7c9374-bb15-47e3-bbb5-ef938464106b_fixed.java
index 388771b..766b7fd 100644
--- a/tmp/9149cadb-461f-48d4-afa9-e822c9c4ce25_buggy.java
+++ b/tmp/7b7c9374-bb15-47e3-bbb5-ef938464106b_fixed.java
@@ -1,37 +1,42 @@
     /**
      * Creates a new timeseries by copying a subset of the data in this time
      * series.
      *
      * @param start  the index of the first time period to copy.
      * @param end  the index of the last time period to copy.
      *
      * @return A series containing a copy of this times series from start until
      *         end.
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
     public TimeSeries createCopy(int start, int end)
             throws CloneNotSupportedException {
         if (start < 0) {
             throw new IllegalArgumentException("Requires start >= 0.");
         }
         if (end < start) {
             throw new IllegalArgumentException("Requires start <= end.");
         }
         TimeSeries copy = (TimeSeries) super.clone();
         copy.data = new java.util.ArrayList();
         if (this.data.size() > 0) {
             for (int index = start; index <= end; index++) {
                 TimeSeriesDataItem item
                         = (TimeSeriesDataItem) this.data.get(index);
                 TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
                 try {
                     copy.add(clone);
                 }
                 catch (SeriesException e) {
                     e.printStackTrace();
                 }
             }
         }
+        // Recalculate minY and maxY for the copied series
+        copy.updateBoundsForAddedItem(copy.getDataItem(0));
+        for (int i = 1; i < copy.getItemCount(); i++) {
+            copy.updateBoundsForAddedItem(copy.getDataItem(i));
+        }
         return copy;
     }
\ No newline at end of file
