diff --git a/tmp/3be96b8b-596d-4f92-9f20-93af733b1717_buggy.java b/tmp/7a19193c-73fa-4cf9-bdc2-f596e570a93b_fixed.java
index 21f64c6..c96fdaf 100644
--- a/tmp/3be96b8b-596d-4f92-9f20-93af733b1717_buggy.java
+++ b/tmp/7a19193c-73fa-4cf9-bdc2-f596e570a93b_fixed.java
@@ -1,23 +1,33 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
-        // doesn't handle scanning for surrogates
+        if (seq.length() == 0) return -1; // empty sequence
+        
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
                 while(++offset < length && startChar != input[offset]);
+            
+            if (offset >= length) break; // reached end of input
+            
             int i = offset + 1;
             int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            if (last > length) continue; // sequence would extend past end of input
+            
+            boolean match = true;
+            for (int j = 1; j < seq.length(); j++, i++) {
+                if (i >= length || seq.charAt(j) != input[i]) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) // found full sequence
                 return offset - pos;
         }
-        }
         return -1;
     }
\ No newline at end of file
