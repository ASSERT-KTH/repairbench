diff --git a/tmp/7f41888d-7fbd-47e5-91ab-035fc0e35375_buggy.java b/tmp/54729f2e-aee9-4830-bb8e-d5ff1bcb7cd7_fixed.java
index b98f0a7..6830a03 100644
--- a/tmp/7f41888d-7fbd-47e5-91ab-035fc0e35375_buggy.java
+++ b/tmp/54729f2e-aee9-4830-bb8e-d5ff1bcb7cd7_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+                // Add backwards inference for constructor parameters
+                Node args = constructor.getNext();
+                if (args != null && type instanceof ObjectType) {
+                    ObjectType instanceType = (ObjectType) type;
+                    FunctionType constructorFn = ct;
+                    Node params = constructorFn.getParametersNode();
+                    int paramIndex = 0;
+                    for (Node arg = args; arg != null; arg = arg.getNext()) {
+                        if (params != null) {
+                            Node param = params.getChildAtIndex(paramIndex);
+                            if (param != null) {
+                                JSType paramType = param.getJSType();
+                                if (paramType != null) {
+                                    arg.setJSType(paramType);
+                                }
+                            }
+                            paramIndex++;
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
