diff --git a/tmp/f5d48ac2-4b4e-4974-a1c6-b52ccac36cca_buggy.java b/tmp/a6e7ed10-52c7-4d89-998f-56a7b0647b74_fixed.java
index 5f1dcf2..f306e05 100644
--- a/tmp/f5d48ac2-4b4e-4974-a1c6-b52ccac36cca_buggy.java
+++ b/tmp/a6e7ed10-52c7-4d89-998f-56a7b0647b74_fixed.java
@@ -1,41 +1,42 @@
 /** {@inheritDoc} */
 @Override
 protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
     throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (!isConverged()) {  // Check for convergence instead of using while(true)
 
         incrementIterationsCounter();
 
         // save the original vertex
         final RealPointValuePair[] original = simplex;
         final RealPointValuePair best = original[0];
 
         // perform a reflection step
         final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
         if (comparator.compare(reflected, best) < 0) {
 
             // compute the expanded simplex
             final RealPointValuePair[] reflectedSimplex = simplex;
             final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
             if (comparator.compare(reflected, expanded) <= 0) {
                 // accept the reflected simplex
                 simplex = reflectedSimplex;
             }
 
             return;
 
         }
 
         // compute the contracted simplex
         final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
         if (comparator.compare(contracted, best) < 0) {
             // accept the contracted simplex
-
-            // check convergence
+            simplex = original;  // Accept the contracted simplex
             return;
         }
 
+        // If no improvement, break the loop to avoid infinite iteration
+        break;
     }
 
 }
\ No newline at end of file
