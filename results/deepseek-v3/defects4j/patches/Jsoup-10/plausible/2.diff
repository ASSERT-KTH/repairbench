diff --git a/tmp/6bf7936a-5a5d-4930-b75e-179a78a15d37_buggy.java b/tmp/f81d3fe8-7270-4ff2-a7d4-d24568d7d61a_fixed.java
index b4e6f03..0aa59b2 100644
--- a/tmp/6bf7936a-5a5d-4930-b75e-179a78a15d37_buggy.java
+++ b/tmp/f81d3fe8-7270-4ff2-a7d4-d24568d7d61a_fixed.java
@@ -1,44 +1,35 @@
-    /**
-     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
-     * <code>&lt;img src></code>).
-     * <p/>
-     * E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
-     * <p/>
-     * If the attribute value is already absolute (i.e. it starts with a protocol, like
-     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
-     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
-     * absolute using that.
-     * <p/>
-     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
-     * <code>String absUrl = linkEl.attr("abs:href");</code>
-     *
-     * @param attributeKey The attribute key
-     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
-     * could not be made successfully into a URL.
-     * @see #attr
-     * @see java.net.URL#URL(java.net.URL, String)
-     */
 public String absUrl(String attributeKey) {
     Validate.notEmpty(attributeKey);
 
     String relUrl = attr(attributeKey);
     if (!hasAttr(attributeKey)) {
         return ""; // nothing to make absolute with
     } else {
         URL base;
         try {
             try {
                 base = new URL(baseUri);
             } catch (MalformedURLException e) {
                 // the base is unsuitable, but the attribute may be abs on its own, so try that
                 URL abs = new URL(relUrl);
                 return abs.toExternalForm();
             }
+            
+            // Handle relative query URLs by preserving the base path
+            if (relUrl.startsWith("?")) {
+                String basePath = base.getPath();
+                if (basePath.isEmpty()) {
+                    basePath = "/";
+                }
+                URL abs = new URL(base.getProtocol(), base.getHost(), base.getPort(), basePath + relUrl);
+                return abs.toExternalForm();
+            }
+            
             // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
             URL abs = new URL(base, relUrl);
             return abs.toExternalForm();
         } catch (MalformedURLException e) {
             return "";
         }
     }
 }
\ No newline at end of file
