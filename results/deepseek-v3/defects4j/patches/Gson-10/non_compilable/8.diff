diff --git a/tmp/e719f0b8-e4f6-4089-a6a3-b8d73bffd24e_buggy.java b/tmp/8a9c8082-8f2e-42ee-b478-2b038da56884_fixed.java
index 9d42346..bcc15c2 100644
--- a/tmp/e719f0b8-e4f6-4089-a6a3-b8d73bffd24e_buggy.java
+++ b/tmp/8a9c8082-8f2e-42ee-b478-2b038da56884_fixed.java
@@ -1,37 +1,49 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
   // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
       TypeAdapter t =
         new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
       t.write(writer, fieldValue);
     }
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+      if (!serialize) return false;
       Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      // Check if the field value is different from the default value for primitives
+      if (isPrimitive) {
+        Class<?> fieldClass = fieldType.getRawType();
+        if (fieldClass == boolean.class && fieldValue.equals(Boolean.FALSE)) return false;
+        if (fieldClass == byte.class && fieldValue.equals((byte) 0)) return false;
+        if (fieldClass == char.class && fieldValue.equals((char) 0)) return false;
+        if (fieldClass == short.class && fieldValue.equals((short) 0)) return false;
+        if (fieldClass == int.class && fieldValue.equals(0)) return false;
+        if (fieldClass == long.class && fieldValue.equals(0L)) return false;
+        if (fieldClass == float.class && fieldValue.equals(0.0f)) return false;
+        if (fieldClass == double.class && fieldValue.equals(0.0)) return false;
+      }
+      return fieldValue != null;
     }
   };
 }
\ No newline at end of file
