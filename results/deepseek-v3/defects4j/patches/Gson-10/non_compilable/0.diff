diff --git a/tmp/fd79d31f-d21a-4512-9002-9d3c19e997df_buggy.java b/tmp/4c29df95-f75f-4118-804c-ff76d74176cf_fixed.java
index 9d42346..c9551c4 100644
--- a/tmp/fd79d31f-d21a-4512-9002-9d3c19e997df_buggy.java
+++ b/tmp/4c29df95-f75f-4118-804c-ff76d74176cf_fixed.java
@@ -1,37 +1,57 @@
 private ReflectiveTypeAdapterFactory.BoundField createBoundField(
     final Gson context, final Field field, final String name,
     final TypeToken<?> fieldType, boolean serialize, boolean deserialize) {
   final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());
   // special casing primitives here saves ~5% on Android...
   JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);
   TypeAdapter<?> mapped = null;
   if (annotation != null) {
     mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);
   }
   final boolean jsonAdapterPresent = mapped != null;
   if (mapped == null) mapped = context.getAdapter(fieldType);
 
   final TypeAdapter<?> typeAdapter = mapped;
   return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {
     @SuppressWarnings({"unchecked", "rawtypes"}) // the type adapter and field type always agree
     @Override void write(JsonWriter writer, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = field.get(value);
       TypeAdapter t =
         new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());
       t.write(writer, fieldValue);
     }
     @Override void read(JsonReader reader, Object value)
         throws IOException, IllegalAccessException {
       Object fieldValue = typeAdapter.read(reader);
       if (fieldValue != null || !isPrimitive) {
         field.set(value, fieldValue);
       }
     }
     @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {
-        if (!serialized) return false;
+      if (!serialize) return false;
       Object fieldValue = field.get(value);
-        return fieldValue != value; // avoid recursion for example for Throwable.cause
+      // Check if the field value is different from the default value for the field
+      if (isPrimitive) {
+        if (fieldType.getRawType() == boolean.class) {
+          return fieldValue != Boolean.FALSE;
+        } else if (fieldType.getRawType() == char.class) {
+          return fieldValue != Character.MIN_VALUE;
+        } else if (fieldType.getRawType() == byte.class) {
+          return fieldValue != (byte) 0;
+        } else if (fieldType.getRawType() == short.class) {
+          return fieldValue != (short) 0;
+        } else if (fieldType.getRawType() == int.class) {
+          return fieldValue != 0;
+        } else if (fieldType.getRawType() == long.class) {
+          return fieldValue != 0L;
+        } else if (fieldType.getRawType() == float.class) {
+          return fieldValue != 0.0f;
+        } else if (fieldType.getRawType() == double.class) {
+          return fieldValue != 0.0;
+        }
+      }
+      return fieldValue != null;
     }
   };
 }
\ No newline at end of file
