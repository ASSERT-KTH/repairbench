diff --git a/tmp/421a7c27-5277-4972-890f-64145de2c669_buggy.java b/tmp/21e7be36-dfbf-4bbc-9b2e-740922b420ee_fixed.java
index e69de29..31fa169 100644
--- a/tmp/421a7c27-5277-4972-890f-64145de2c669_buggy.java
+++ b/tmp/21e7be36-dfbf-4bbc-9b2e-740922b420ee_fixed.java
@@ -0,0 +1,97 @@
+public SortedMap<K, V> prefixMap(K prefix) {
+    return new PrefixRangeMap(prefix);
+}
+
+private class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final K prefix;
+
+    PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        return new EntrySet();
+    }
+
+    private class EntrySet extends AbstractSet<Entry<K, V>> {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new PrefixEntryIterator(prefix);
+        }
+
+        @Override
+        public int size() {
+            int size = 0;
+            Iterator<Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                size++;
+            }
+            return size;
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (!(o instanceof Entry)) {
+                return false;
+            }
+            Entry<?, ?> entry = (Entry<?, ?>) o;
+            K key = (K) entry.getKey();
+            if (key != null && key.toString().startsWith(prefix.toString())) {
+                PatriciaTrie.this.remove(key);
+                return true;
+            }
+            return false;
+        }
+    }
+
+    private class PrefixEntryIterator implements Iterator<Entry<K, V>> {
+        private final Iterator<Entry<K, V>> delegate;
+        private Entry<K, V> current;
+
+        PrefixEntryIterator(K prefix) {
+            this.delegate = PatriciaTrie.this.entrySet().iterator();
+            this.current = null;
+        }
+
+        @Override
+        public boolean hasNext() {
+            while (delegate.hasNext()) {
+                Entry<K, V> entry = delegate.next();
+                if (entry.getKey().toString().startsWith(prefix.toString())) {
+                    current = entry;
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        @Override
+        public Entry<K, V> next() {
+            if (current == null && !hasNext()) {
+                throw new NoSuchElementException();
+            }
+            Entry<K, V> result = current;
+            current = null;
+            return result;
+        }
+
+        @Override
+        public void remove() {
+            if (current != null) {
+                throw new IllegalStateException();
+            }
+            delegate.remove();
+        }
+    }
+}
\ No newline at end of file
