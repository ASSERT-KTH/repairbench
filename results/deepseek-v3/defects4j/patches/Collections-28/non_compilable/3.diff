diff --git a/tmp/1c72b4cd-c94c-4f21-b5cf-6661e7680c83_buggy.java b/tmp/7dee6555-1d93-47ac-8026-25196ddfa546_fixed.java
index e69de29..733709d 100644
--- a/tmp/1c72b4cd-c94c-4f21-b5cf-6661e7680c83_buggy.java
+++ b/tmp/7dee6555-1d93-47ac-8026-25196ddfa546_fixed.java
@@ -0,0 +1,79 @@
+public SortedMap<K, V> prefixMap(K prefix) {
+    return new PrefixRangeMap(prefix);
+}
+
+private final class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final K prefix;
+
+    PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        return new EntrySet();
+    }
+
+    private final class EntrySet extends AbstractSet<Entry<K, V>> {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new EntryIterator(prefix);
+        }
+
+        @Override
+        public int size() {
+            int size = 0;
+            Iterator<Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                size++;
+            }
+            return size;
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (!(o instanceof Entry)) {
+                return false;
+            }
+            Entry<?, ?> entry = (Entry<?, ?>) o;
+            K key = (K) entry.getKey();
+            if (key != null && key.toString().startsWith(prefix.toString())) {
+                return PatriciaTrie.this.remove(key) != null;
+            }
+            return false;
+        }
+    }
+
+    private final class EntryIterator implements Iterator<Entry<K, V>> {
+        private final Iterator<Entry<K, V>> delegate;
+
+        EntryIterator(K prefix) {
+            this.delegate = PatriciaTrie.this.entrySet().iterator();
+        }
+
+        @Override
+        public boolean hasNext() {
+            return delegate.hasNext();
+        }
+
+        @Override
+        public Entry<K, V> next() {
+            return delegate.next();
+        }
+
+        @Override
+        public void remove() {
+            delegate.remove();
+        }
+    }
+}
\ No newline at end of file
