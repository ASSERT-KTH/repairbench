diff --git a/tmp/b8391173-5b45-4008-b2db-10490d5c48cb_buggy.java b/tmp/c9c6cf88-fbf1-41c6-b9c6-18c63a56e0be_fixed.java
index e69de29..9248f0d 100644
--- a/tmp/b8391173-5b45-4008-b2db-10490d5c48cb_buggy.java
+++ b/tmp/c9c6cf88-fbf1-41c6-b9c6-18c63a56e0be_fixed.java
@@ -0,0 +1,75 @@
+public SortedMap<K, V> prefixMap(K prefix) {
+    if (prefix == null) {
+        throw new NullPointerException("Prefix cannot be null");
+    }
+    
+    return new PrefixRangeMap(prefix);
+}
+
+private class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final K prefix;
+    
+    PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+    
+    @Override
+    public void clear() {
+        Iterator<Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+    
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        return new EntrySet();
+    }
+    
+    private class EntrySet extends AbstractSet<Entry<K, V>> {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new EntryIterator(prefix);
+        }
+        
+        @Override
+        public int size() {
+            int size = 0;
+            Iterator<Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                size++;
+            }
+            return size;
+        }
+        
+        @Override
+        public void clear() {
+            PrefixRangeMap.this.clear();
+        }
+    }
+    
+    private class EntryIterator implements Iterator<Entry<K, V>> {
+        private final Iterator<Entry<K, V>> delegate;
+        
+        EntryIterator(K prefix) {
+            this.delegate = PatriciaTrie.this.entrySet().iterator();
+        }
+        
+        @Override
+        public boolean hasNext() {
+            return delegate.hasNext();
+        }
+        
+        @Override
+        public Entry<K, V> next() {
+            return delegate.next();
+        }
+        
+        @Override
+        public void remove() {
+            delegate.remove();
+        }
+    }
+}
\ No newline at end of file
