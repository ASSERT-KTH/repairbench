diff --git a/tmp/7b63ced8-6c34-44ac-95c7-f2b4acffbfd1_buggy.java b/tmp/4b13903a-eeba-44e6-a290-f03217d33445_fixed.java
index e69de29..b52769d 100644
--- a/tmp/7b63ced8-6c34-44ac-95c7-f2b4acffbfd1_buggy.java
+++ b/tmp/4b13903a-eeba-44e6-a290-f03217d33445_fixed.java
@@ -0,0 +1,91 @@
+public SortedMap<K, V> prefixMap(K prefix) {
+    return new PrefixRangeMap(prefix);
+}
+
+private class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final K prefix;
+
+    PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        return new EntrySet();
+    }
+
+    private class EntrySet extends AbstractSet<Entry<K, V>> {
+        @Override
+        public Iterator<Entry<K, V>> iterator() {
+            return new PrefixEntryIterator(prefix);
+        }
+
+        @Override
+        public int size() {
+            int size = 0;
+            Iterator<Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                size++;
+            }
+            return size;
+        }
+
+        @Override
+        public void clear() {
+            PrefixRangeMap.this.clear();
+        }
+    }
+
+    private class PrefixEntryIterator implements Iterator<Entry<K, V>> {
+        private final K prefix;
+        private Entry<K, V> next;
+        private Entry<K, V> lastReturned;
+
+        PrefixEntryIterator(K prefix) {
+            this.prefix = prefix;
+            this.next = PatriciaTrie.this.firstEntry();
+            advance();
+        }
+
+        private void advance() {
+            while (next != null && !next.getKey().toString().startsWith(prefix.toString())) {
+                next = PatriciaTrie.this.nextEntry(next.getKey());
+            }
+        }
+
+        @Override
+        public boolean hasNext() {
+            return next != null;
+        }
+
+        @Override
+        public Entry<K, V> next() {
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            lastReturned = next;
+            next = PatriciaTrie.this.nextEntry(next.getKey());
+            advance();
+            return lastReturned;
+        }
+
+        @Override
+        public void remove() {
+            if (lastReturned == null) {
+                throw new IllegalStateException();
+            }
+            PatriciaTrie.this.remove(lastReturned.getKey());
+            lastReturned = null;
+        }
+    }
+}
\ No newline at end of file
