diff --git a/tmp/43b53d22-4f1b-43a2-99a3-3a6058e32992_buggy.java b/tmp/27af27f0-262e-47a4-9620-ffbe0fdf374a_fixed.java
index e69de29..c049d5c 100644
--- a/tmp/43b53d22-4f1b-43a2-99a3-3a6058e32992_buggy.java
+++ b/tmp/27af27f0-262e-47a4-9620-ffbe0fdf374a_fixed.java
@@ -0,0 +1,88 @@
+public SortedMap<K, V> prefixMap(K prefix) {
+    if (prefix == null) {
+        throw new NullPointerException("Prefix cannot be null");
+    }
+    
+    return new PrefixRangeMap(prefix);
+}
+
+private final class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final K prefix;
+    private transient Set<Map.Entry<K, V>> entrySet;
+
+    PrefixRangeMap(K prefix) {
+        this.prefix = prefix;
+    }
+
+    @Override
+    public void clear() {
+        Iterator<Map.Entry<K, V>> it = entrySet().iterator();
+        while (it.hasNext()) {
+            it.next();
+            it.remove();
+        }
+    }
+
+    @Override
+    public Set<Map.Entry<K, V>> entrySet() {
+        if (entrySet == null) {
+            entrySet = new EntrySet();
+        }
+        return entrySet;
+    }
+
+    private final class EntrySet extends AbstractSet<Map.Entry<K, V>> {
+        @Override
+        public Iterator<Map.Entry<K, V>> iterator() {
+            return new EntryIterator(prefix);
+        }
+
+        @Override
+        public int size() {
+            int size = 0;
+            Iterator<Map.Entry<K, V>> it = iterator();
+            while (it.hasNext()) {
+                it.next();
+                size++;
+            }
+            return size;
+        }
+
+        @Override
+        public boolean remove(Object o) {
+            if (!(o instanceof Map.Entry)) {
+                return false;
+            }
+            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) o;
+            K key = (K) entry.getKey();
+            if (key != null && key.toString().startsWith(prefix.toString())) {
+                PatriciaTrie.this.remove(key);
+                return true;
+            }
+            return false;
+        }
+    }
+
+    private final class EntryIterator implements Iterator<Map.Entry<K, V>> {
+        private final Iterator<Map.Entry<K, V>> delegate;
+
+        EntryIterator(K prefix) {
+            this.delegate = PatriciaTrie.this.entrySet().iterator();
+        }
+
+        @Override
+        public boolean hasNext() {
+            return delegate.hasNext();
+        }
+
+        @Override
+        public Map.Entry<K, V> next() {
+            return delegate.next();
+        }
+
+        @Override
+        public void remove() {
+            delegate.remove();
+        }
+    }
+}
\ No newline at end of file
