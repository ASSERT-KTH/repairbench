diff --git a/tmp/135777b7-bf83-4817-b312-1b133ed4a2d3_buggy.java b/tmp/7b4c6500-a7e3-455b-af8b-001813633047_fixed.java
index 71189c3..358ffd2 100644
--- a/tmp/135777b7-bf83-4817-b312-1b133ed4a2d3_buggy.java
+++ b/tmp/7b4c6500-a7e3-455b-af8b-001813633047_fixed.java
@@ -1,46 +1,51 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            // Handle the case where the value is a File object
+            Object value = commandLine.getValue(option);
+            if (value instanceof File) {
+                commandLine.setValue(option, ((File) value).getPath());
+            }
+
             option.validate(commandLine);
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
