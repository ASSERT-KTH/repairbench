diff --git a/tmp/9077e6e5-23b4-42f2-b269-79ce43160c8a_buggy.java b/tmp/36f4b825-6805-400c-847a-ef77d4121bcd_fixed.java
index 71189c3..ae456d9 100644
--- a/tmp/9077e6e5-23b4-42f2-b269-79ce43160c8a_buggy.java
+++ b/tmp/36f4b825-6805-400c-847a-ef77d4121bcd_fixed.java
@@ -1,46 +1,56 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
             option.validate(commandLine);
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            // Validate the option's argument based on its type
+            Object value = commandLine.getValue(option);
+            if (value instanceof File) {
+                // Handle File type validation
+                File file = (File) value;
+                if (!file.exists()) {
+                    throw new OptionException(this, ResourceConstants.INVALID_FILE, file.getPath());
+                }
+            } else {
+                // Handle other types of validation
                 option.validate(commandLine);
             }
         }
+    }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
         option.validate(commandLine);
     }
 }
\ No newline at end of file
