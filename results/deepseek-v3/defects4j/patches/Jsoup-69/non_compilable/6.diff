diff --git a/tmp/268e77cf-e47c-48e4-ae0d-5ef3af085ca8_buggy.java b/tmp/7587ef36-8b6f-489d-afbc-dc8b97d0148d_fixed.java
index e69de29..fd722f5 100644
--- a/tmp/268e77cf-e47c-48e4-ae0d-5ef3af085ca8_buggy.java
+++ b/tmp/7587ef36-8b6f-489d-afbc-dc8b97d0148d_fixed.java
@@ -0,0 +1,37 @@
+public List<Connection.KeyVal> formData() {
+    List<Connection.KeyVal> data = new ArrayList<>();
+
+    // iterate the form control elements and accumulate their values
+    for (Element el : elements) {
+        if (!el.tag().isFormSubmittable()) continue; // skip non-submittable elements
+        if (el.hasAttr("disabled")) continue; // skip disabled form inputs
+        String name = el.attr("name");
+        if (name.length() == 0) continue; // skip form controls with no name
+        String type = el.attr("type");
+
+        if ("select".equals(el.tagName())) {
+            Elements options = el.select("option[selected]");
+            for (Element option : options) {
+                data.add(HttpConnection.KeyVal.create(name, option.val()));
+            }
+        } else if ("checkbox".equalsIgnoreCase(type) || "radio".equalsIgnoreCase(type)) {
+            // only add checkbox or radio if they have the checked attribute
+            if (el.hasAttr("checked")) {
+                final String val = el.val().length() > 0 ? el.val() : "on";
+                data.add(HttpConnection.KeyVal.create(name, val));
+            }
+        } else {
+            data.add(HttpConnection.KeyVal.create(name, el.val()));
+        }
+    }
+
+    // Remove elements that have been removed from the DOM
+    data.removeIf(keyVal -> {
+        String name = keyVal.key();
+        return selectFirst("input[name=" + name + "]") == null &&
+               selectFirst("select[name=" + name + "]") == null &&
+               selectFirst("textarea[name=" + name + "]") == null;
+    });
+
+    return data;
+}
\ No newline at end of file
