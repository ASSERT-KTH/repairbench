diff --git a/tmp/22e18d3b-9b9d-4f7a-845e-b3723fba4e6e_buggy.java b/tmp/05f5d1f9-fcae-4314-b7a6-a732146ba69a_fixed.java
index eea9e73..115dacb 100644
--- a/tmp/22e18d3b-9b9d-4f7a-845e-b3723fba4e6e_buggy.java
+++ b/tmp/05f5d1f9-fcae-4314-b7a6-a732146ba69a_fixed.java
@@ -1,41 +1,40 @@
-    /**
-     * <p>Checks if the CharSequence contains any character in the given
-     * set of characters.</p>
-     *
-     * <p>A <code>null</code> CharSequence will return <code>false</code>.
-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>
-     *
-     * <pre>
-     * StringUtils.containsAny(null, *)                = false
-     * StringUtils.containsAny("", *)                  = false
-     * StringUtils.containsAny(*, null)                = false
-     * StringUtils.containsAny(*, [])                  = false
-     * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
-     * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
-     * StringUtils.containsAny("aba", ['z'])           = false
-     * </pre>
-     *
-     * @param cs  the CharSequence to check, may be null
-     * @param searchChars  the chars to search for, may be null
-     * @return the <code>true</code> if any of the chars are found,
-     * <code>false</code> if no match or null input
-     * @since 2.4
-     */
 public static boolean containsAny(CharSequence cs, char[] searchChars) {
     if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
         return false;
     }
     int csLength = cs.length();
     int searchLength = searchChars.length;
     for (int i = 0; i < csLength; i++) {
         char ch = cs.charAt(i);
         for (int j = 0; j < searchLength; j++) {
             if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
+                // Check if the character is part of a surrogate pair
+                if (Character.isHighSurrogate(ch)) {
+                    if (i + 1 < csLength && Character.isLowSurrogate(cs.charAt(i + 1))) {
+                        // Check if the next character is the low surrogate
+                        if (j + 1 < searchLength && Character.isLowSurrogate(searchChars[j + 1])) {
+                            // Compare the full surrogate pair
+                            if (cs.charAt(i + 1) == searchChars[j + 1]) {
                                 return true;
                             }
                         }
                     }
+                } else if (Character.isLowSurrogate(ch)) {
+                    if (i > 0 && Character.isHighSurrogate(cs.charAt(i - 1))) {
+                        // Check if the previous character is the high surrogate
+                        if (j > 0 && Character.isHighSurrogate(searchChars[j - 1])) {
+                            // Compare the full surrogate pair
+                            if (cs.charAt(i - 1) == searchChars[j - 1]) {
+                                return true;
+                            }
+                        }
+                    }
+                } else {
+                    // Not a surrogate character, return true
+                    return true;
+                }
+            }
+        }
+    }
     return false;
 }
\ No newline at end of file
