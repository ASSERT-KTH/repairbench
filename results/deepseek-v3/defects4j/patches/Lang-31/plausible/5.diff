diff --git a/tmp/ac437230-3191-459e-a306-47d9bab3d1fd_buggy.java b/tmp/684d2588-f463-4529-9f78-a509ad4d4db0_fixed.java
index eea9e73..19c1f9c 100644
--- a/tmp/ac437230-3191-459e-a306-47d9bab3d1fd_buggy.java
+++ b/tmp/684d2588-f463-4529-9f78-a509ad4d4db0_fixed.java
@@ -1,41 +1,57 @@
     /**
      * <p>Checks if the CharSequence contains any character in the given
      * set of characters.</p>
      *
      * <p>A <code>null</code> CharSequence will return <code>false</code>.
      * A <code>null</code> or zero length search array will return <code>false</code>.</p>
      *
      * <pre>
      * StringUtils.containsAny(null, *)                = false
      * StringUtils.containsAny("", *)                  = false
      * StringUtils.containsAny(*, null)                = false
      * StringUtils.containsAny(*, [])                  = false
      * StringUtils.containsAny("zzabyycdxx",['z','a']) = true
      * StringUtils.containsAny("zzabyycdxx",['b','y']) = true
      * StringUtils.containsAny("aba", ['z'])           = false
      * </pre>
      *
      * @param cs  the CharSequence to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the <code>true</code> if any of the chars are found,
      * <code>false</code> if no match or null input
      * @since 2.4
      */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
             return false;
         }
         int csLength = cs.length();
         int searchLength = searchChars.length;
         for (int i = 0; i < csLength; i++) {
             char ch = cs.charAt(i);
+            if (Character.isHighSurrogate(ch)) {
+                if (i + 1 < csLength) {
+                    char ch2 = cs.charAt(i + 1);
+                    if (Character.isLowSurrogate(ch2)) {
+                        int codePoint = Character.toCodePoint(ch, ch2);
+                        for (int j = 0; j < searchLength; j++) {
+                            if (j + 1 < searchLength && Character.isHighSurrogate(searchChars[j]) && Character.isLowSurrogate(searchChars[j + 1])) {
+                                int searchCodePoint = Character.toCodePoint(searchChars[j], searchChars[j + 1]);
+                                if (codePoint == searchCodePoint) {
+                                    return true;
+                                }
+                            }
+                        }
+                        i++; // Skip the low surrogate
+                        continue;
+                    }
+                }
+            }
             for (int j = 0; j < searchLength; j++) {
                 if (searchChars[j] == ch) {
-						// ch is a supplementary character
-						// ch is in the Basic Multilingual Plane
                     return true;
                 }
             }
         }
         return false;
     }
\ No newline at end of file
