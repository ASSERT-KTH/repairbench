diff --git a/tmp/9403e5f0-2864-45fc-8d4f-79ed13e5fa44_buggy.java b/tmp/4940e971-808b-4f63-84ae-3b2157aa0167_fixed.java
index fb2b020..3e6191c 100644
--- a/tmp/9403e5f0-2864-45fc-8d4f-79ed13e5fa44_buggy.java
+++ b/tmp/4940e971-808b-4f63-84ae-3b2157aa0167_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
+                // If the property type is a union type, we need to ensure we're not
+                // losing type information when defining the inferred property
+                if (propType.isUnionType()) {
+                    typeToInfer = propType;
+                }
                 defineInferredProperty(prop, typeToInfer, null);
             }
         }
     }
 }
\ No newline at end of file
