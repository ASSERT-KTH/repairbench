diff --git a/tmp/c6c438c4-02cb-409c-8262-b5368b51f433_buggy.java b/tmp/b939341f-291f-4f9e-a792-6011ebed3038_fixed.java
index fb2b020..f89c161 100644
--- a/tmp/c6c438c4-02cb-409c-8262-b5368b51f433_buggy.java
+++ b/tmp/b939341f-291f-4f9e-a792-6011ebed3038_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
             JSType propType = constraintObj.getPropertyType(prop);
             if (!isPropertyTypeDeclared(prop)) {
                 JSType typeToInfer = propType;
                 if (!hasProperty(prop)) {
                     typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                             .getLeastSupertype(propType);
                 }
+                // Ensure that the inferred type is not null or undefined
+                if (typeToInfer != null && !typeToInfer.isNullType() && !typeToInfer.isVoidType()) {
                     defineInferredProperty(prop, typeToInfer, null);
                 }
             }
         }
     }
+}
\ No newline at end of file
