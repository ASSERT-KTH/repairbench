diff --git a/tmp/636272a4-4ce3-4c6b-b95a-ab58c5b8ab3b_buggy.java b/tmp/1a02ee9a-2cae-4da6-af36-df7e516848c2_fixed.java
index b56897c..60c34c2 100644
--- a/tmp/636272a4-4ce3-4c6b-b95a-ab58c5b8ab3b_buggy.java
+++ b/tmp/1a02ee9a-2cae-4da6-af36-df7e516848c2_fixed.java
@@ -1,27 +1,27 @@
 @Override
 public boolean apply(Node n) {
     // When the node is null it means, we reached the implicit return
     // where the function returns (possibly without an return statement)
     if (n == null) {
         return false;
     }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+    // Check if the node is a call or new expression with side effects
+    if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n)) ||
+        (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))) {
         return true;
     }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+    // Check if the node is an "in" expression, which is considered to have side effects
+    if (n.isIn()) {
         return true;
     }
 
-
+    // Recursively check the children of the node
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
             return true;
         }
     }
     return false;
 }
\ No newline at end of file
