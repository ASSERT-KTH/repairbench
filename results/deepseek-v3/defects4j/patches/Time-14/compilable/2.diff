diff --git a/tmp/16d9cbea-3524-483c-b9e2-42e2d48010cb_buggy.java b/tmp/b047aa48-1b2e-432d-b817-ddbb9b0df4a1_fixed.java
index 10616db..98ba7d5 100644
--- a/tmp/16d9cbea-3524-483c-b9e2-42e2d48010cb_buggy.java
+++ b/tmp/b047aa48-1b2e-432d-b817-ddbb9b0df4a1_fixed.java
@@ -1,19 +1,34 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+        
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
+            
+            // Handle month addition with end-of-month adjustment
+            if (fieldIndex == 1) { // 1 typically represents the month field
+                int newMonth = values[fieldIndex] + valueToAdd;
+                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);
+                if (values[1] == 2 && values[0] == 29) { // Leap day case
+                    values[0] = Math.min(values[0], maxDay);
+                }
                 instant = add(instant, valueToAdd);
+                int newMaxDay = iChronology.dayOfMonth().getMaximumValue(instant);
+                values[0] = Math.min(values[0], newMaxDay);
+            } else {
+                instant = add(instant, valueToAdd);
+            }
+            
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
