diff --git a/tmp/959b6a48-2dbd-4691-a9de-ac17c2a6f01b_buggy.java b/tmp/18b9f8f1-9a6a-4f9e-8fa9-1d592575bda0_fixed.java
index 29a9d2f..b6f4aab 100644
--- a/tmp/959b6a48-2dbd-4691-a9de-ac17c2a6f01b_buggy.java
+++ b/tmp/18b9f8f1-9a6a-4f9e-8fa9-1d592575bda0_fixed.java
@@ -1,43 +1,48 @@
 /**
  * Handles a goog.require call.
  */
 private void processRequireCall(NodeTraversal t, Node n, Node parent) {
     Node left = n.getFirstChild();
     Node arg = left.getNext();
     if (verifyLastArgumentIsString(t, left, arg)) {
         String ns = arg.getString();
         ProvidedName provided = providedNames.get(ns);
         if (provided == null || !provided.isExplicitlyProvided()) {
             unrecognizedRequires.add(
                 new UnrecognizedRequire(n, ns, t.getSourceName()));
+            // Report missing provide error only if the namespace is not "goog"
+            if (!ns.equals("goog")) {
+                compiler.report(
+                    t.makeError(n, ProcessClosurePrimitives.MISSING_PROVIDE_ERROR, ns));
+            }
         } else {
             JSModule providedModule = provided.explicitModule;
 
             // This must be non-null, because there was an explicit provide.
             Preconditions.checkNotNull(providedModule);
 
             JSModule module = t.getModule();
             if (moduleGraph != null &&
                 module != providedModule &&
                 !moduleGraph.dependsOn(module, providedModule)) {
                 compiler.report(
                     t.makeError(n, XMODULE_REQUIRE_ERROR, ns,
                         providedModule.getName(),
                         module.getName()));
             }
         }
 
         maybeAddToSymbolTable(left);
         maybeAddStringNodeToSymbolTable(arg);
 
         // Requires should be removed before further processing.
         // Some clients run closure pass multiple times, first with
         // the checks for broken requires turned off. In these cases, we
         // allow broken requires to be preserved by the first run to
         // let them be caught in the subsequent run.
         if (provided != null) {
             parent.detachFromParent();
             compiler.reportCodeChange();
         }
     }
 }
\ No newline at end of file
