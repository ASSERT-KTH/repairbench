diff --git a/tmp/ce49a2cb-6001-491d-903e-a6314a0eabb3_buggy.java b/tmp/f3f7dfad-2f39-48ba-acef-2fb34cb21f99_fixed.java
index 03b03d7..411c196 100644
--- a/tmp/ce49a2cb-6001-491d-903e-a6314a0eabb3_buggy.java
+++ b/tmp/f3f7dfad-2f39-48ba-acef-2fb34cb21f99_fixed.java
@@ -1,25 +1,28 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Check if we're in an overlap and adjust accordingly
+        long adjustedLocal = convertUTCToLocal(adjustedInstant);
+        if (adjustedLocal == local) {
+            return adjustedInstant;
+        }
+        
+        // If we're not in an overlap, return the original instant
+        return instant;
     }
\ No newline at end of file
