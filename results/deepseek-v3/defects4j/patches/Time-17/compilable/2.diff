diff --git a/tmp/7edb765c-92ae-4936-9889-cbda1bf31c22_buggy.java b/tmp/8d21c325-ec76-434f-aea4-52816d017fdb_fixed.java
index 03b03d7..fb9d220 100644
--- a/tmp/7edb765c-92ae-4936-9889-cbda1bf31c22_buggy.java
+++ b/tmp/8d21c325-ec76-434f-aea4-52816d017fdb_fixed.java
@@ -1,25 +1,28 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      * 
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
         
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+        long adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
         
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // Ensure we're returning the correct offset by checking the original conversion
+        long testLocal = convertUTCToLocal(adjustedInstant);
+        if (testLocal != local) {
+            // If the conversion doesn't match, try the other offset
+            adjustedInstant = convertLocalToUTC(local, false, earlierOrLater ? instantBefore : instantAfter);
+        }
+        
+        return adjustedInstant;
     }
\ No newline at end of file
