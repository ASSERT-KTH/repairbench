diff --git a/tmp/6ef3dda4-6543-48ac-9b7f-0f48322365b5_buggy.java b/tmp/660576c7-57df-4159-b847-3c93f6e3b732_fixed.java
index e4d90e7..6b9c1b4 100644
--- a/tmp/6ef3dda4-6543-48ac-9b7f-0f48322365b5_buggy.java
+++ b/tmp/660576c7-57df-4159-b847-3c93f6e3b732_fixed.java
@@ -1,45 +1,70 @@
 @Override
 String toStringHelper(boolean forAnnotations) {
     if (hasReferenceName()) {
         return getReferenceName();
-    } else if (prettyPrint) {
+    } else if (prettyPrint && !forAnnotations) {
         // Don't pretty print recursively.
         prettyPrint = false;
 
         // Use a tree set so that the properties are sorted.
         Set<String> propertyNames = Sets.newTreeSet();
         for (ObjectType current = this;
              current != null && !current.isNativeObjectType() &&
                  propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;
              current = current.getImplicitPrototype()) {
             propertyNames.addAll(current.getOwnPropertyNames());
         }
 
         StringBuilder sb = new StringBuilder();
         sb.append("{");
 
         int i = 0;
         for (String property : propertyNames) {
             if (i > 0) {
                 sb.append(", ");
             }
 
             sb.append(property);
             sb.append(": ");
             sb.append(getPropertyType(property).toString());
 
             ++i;
-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
+            if (i == MAX_PRETTY_PRINTED_PROPERTIES && !forAnnotations) {
                 sb.append(", ...");
                 break;
             }
         }
 
         sb.append("}");
 
         prettyPrint = true;
         return sb.toString();
     } else {
-      return "{...}";
+        // For annotations or when not pretty printing, show all properties
+        Set<String> propertyNames = Sets.newTreeSet();
+        for (ObjectType current = this;
+             current != null && !current.isNativeObjectType();
+             current = current.getImplicitPrototype()) {
+            propertyNames.addAll(current.getOwnPropertyNames());
+        }
+
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+
+        int i = 0;
+        for (String property : propertyNames) {
+            if (i > 0) {
+                sb.append(", ");
+            }
+
+            sb.append(property);
+            sb.append(": ");
+            sb.append(getPropertyType(property).toString());
+
+            ++i;
+        }
+
+        sb.append("}");
+        return sb.toString();
     }
 }
\ No newline at end of file
