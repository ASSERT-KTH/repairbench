diff --git a/tmp/1d3efaf6-66a1-4cce-bec1-2a569f06cff1_buggy.java b/tmp/3e09d226-4fe2-4abc-a717-4119bea47803_fixed.java
index 58a1651..7a670b8 100644
--- a/tmp/1d3efaf6-66a1-4cce-bec1-2a569f06cff1_buggy.java
+++ b/tmp/3e09d226-4fe2-4abc-a717-4119bea47803_fixed.java
@@ -1,32 +1,47 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis resolution, checking if it's an ObjectType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+        // If it's a UnionType, we need to check if all constituents are ObjectTypes
+        UnionType unionType = (UnionType) resolvedTypeOfThis;
+        if (unionType.isObject()) {
+            typeOfThis = unionType.restrictByNotNullOrUndefined();
+        } else {
+            // If not all constituents are ObjectTypes, we keep the original type
+            // and let the upstream error handling deal with it
+            typeOfThis = null;
+        }
+    } else {
+        // If it's neither an ObjectType nor a UnionType, we set it to null
+        // and let the upstream error handling deal with it
+        typeOfThis = null;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
         ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
         resolvedInterfaces.add(resolvedIface);
         changed |= (resolvedIface != iface);
     }
     if (changed) {
         implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
         for (int i = 0; i < subTypes.size(); i++) {
             subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
         }
     }
 
     return super.resolveInternal(t, scope);
 }
\ No newline at end of file
