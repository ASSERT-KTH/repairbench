diff --git a/tmp/d1728887-7c2f-4ddb-8906-470d011dae7f_buggy.java b/tmp/d0e27977-c5e2-4fc4-938e-f13d2335c9a7_fixed.java
index 19fd63e..c6ebe05 100644
--- a/tmp/d1728887-7c2f-4ddb-8906-470d011dae7f_buggy.java
+++ b/tmp/d0e27977-c5e2-4fc4-938e-f13d2335c9a7_fixed.java
@@ -1,24 +1,35 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
             // IE has a bug where event handlers behave differently when
             // their return value is used vs. when their return value is in
             // an EXPR_RESULT. It's pretty freaking weird. See:
             // http://code.google.com/p/closure-compiler/issues/detail?id=291
             // We try to detect this case, and not fold EXPR_RESULTs
             // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                Node exprChild = maybeExpr.getFirstChild();
+                // Don't fold if the expression is a function call that might be an event handler
+                if (exprChild != null && exprChild.getType() == Token.CALL) {
+                    Node target = exprChild.getFirstChild();
+                    if (target != null && target.getType() == Token.GETPROP) {
+                        String propName = target.getLastChild().getString();
+                        if (propName != null && propName.startsWith("on")) {
+                            return false;
+                        }
+                    }
+                }
+                return true;
+            }
         }
     }
-
     return false;
 }
\ No newline at end of file
