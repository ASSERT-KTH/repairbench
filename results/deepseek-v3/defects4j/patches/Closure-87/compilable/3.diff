diff --git a/tmp/9f146791-3a3a-4a04-8b4f-f40059aa59f7_buggy.java b/tmp/4f9cbde3-e1f2-4089-ba9d-960256367fe6_fixed.java
index 19fd63e..7e05dca 100644
--- a/tmp/9f146791-3a3a-4a04-8b4f-f40059aa59f7_buggy.java
+++ b/tmp/4f9cbde3-e1f2-4089-ba9d-960256367fe6_fixed.java
@@ -1,24 +1,37 @@
 /**
  * @return Whether the node is a block with a single statement that is
  *     an expression.
  */
 private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
         if (n.hasOneChild()) {
             Node maybeExpr = n.getFirstChild();
             // IE has a bug where event handlers behave differently when
             // their return value is used vs. when their return value is in
             // an EXPR_RESULT. It's pretty freaking weird. See:
             // http://code.google.com/p/closure-compiler/issues/detail?id=291
             // We try to detect this case, and not fold EXPR_RESULTs
             // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
-
+            if (NodeUtil.isExpressionNode(maybeExpr)) {
+                Node exprChild = maybeExpr.getFirstChild();
+                if (exprChild != null && exprChild.getType() == Token.CALL) {
+                    Node callTarget = exprChild.getFirstChild();
+                    if (callTarget != null && callTarget.getType() == Token.GETPROP) {
+                        Node propTarget = callTarget.getFirstChild();
+                        if (propTarget != null && propTarget.getType() == Token.NAME) {
+                            String propName = propTarget.getString();
+                            if (propName != null && propName.equals("f")) {
+                                return false;
+                            }
+                        }
+                    }
+                }
+            }
             return NodeUtil.isExpressionNode(maybeExpr);
         }
     }
-
     return false;
 }
\ No newline at end of file
