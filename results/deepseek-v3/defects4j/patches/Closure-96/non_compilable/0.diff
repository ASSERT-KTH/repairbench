diff --git a/tmp/e0714a60-410e-46e1-9ee9-9806a8523f52_buggy.java b/tmp/70f6236d-3c71-4a05-aad7-9d0ce2ed3889_fixed.java
index e0ecec8..1ee9d41 100644
--- a/tmp/e0714a60-410e-46e1-9ee9-9806a8523f52_buggy.java
+++ b/tmp/70f6236d-3c71-4a05-aad7-9d0ce2ed3889_fixed.java
@@ -1,35 +1,45 @@
 /**
  * Visits the parameters of a CALL or a NEW node.
  */
 private void visitParameterList(NodeTraversal t, Node call,
     FunctionType functionType) {
   Iterator<Node> arguments = call.children().iterator();
   arguments.next(); // skip the function name
 
   Iterator<Node> parameters = functionType.getParameters().iterator();
   int ordinal = 0;
   Node parameter = null;
   Node argument = null;
-    while (arguments.hasNext() &&
-           parameters.hasNext()) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-        parameter = parameters.next();
+  boolean isVarArgs = functionType.isVarArgs();
+  
+  while (arguments.hasNext()) {
     argument = arguments.next();
     ordinal++;
     
+    if (parameters.hasNext()) {
+      parameter = parameters.next();
+    } else if (!isVarArgs) {
+      // If we're out of parameters and it's not varargs, we're done
+      break;
+    }
+    
+    // For varargs, use the last parameter's type
+    JSType paramType = isVarArgs && !parameters.hasNext() ?
+        functionType.getLastParameterType() :
+        getJSType(parameter);
+        
     validator.expectArgumentMatchesParameter(t, argument,
-          getJSType(argument), getJSType(parameter), call, ordinal);
+        getJSType(argument), paramType, call, ordinal);
   }
 
   int numArgs = call.getChildCount() - 1;
   int minArgs = functionType.getMinArguments();
   int maxArgs = functionType.getMaxArguments();
   if (minArgs > numArgs || maxArgs < numArgs) {
     report(t, call, WRONG_ARGUMENT_COUNT,
             validator.getReadableJSTypeName(call.getFirstChild(), false),
             String.valueOf(numArgs), String.valueOf(minArgs),
             maxArgs != Integer.MAX_VALUE ?
             " and no more than " + maxArgs + " argument(s)" : "");
   }
 }
\ No newline at end of file
