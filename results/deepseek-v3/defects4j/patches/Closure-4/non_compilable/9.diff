diff --git a/tmp/664c75ad-2152-4a33-ad9b-a81195d8146d_buggy.java b/tmp/96006f37-72bd-447f-a5b2-98e7292b6ae2_fixed.java
index d6a560a..2854b2b 100644
--- a/tmp/664c75ad-2152-4a33-ad9b-a81195d8146d_buggy.java
+++ b/tmp/96006f37-72bd-447f-a5b2-98e7292b6ae2_fixed.java
@@ -1,33 +1,39 @@
-  /**
-   * Resolve the referenced type within the enclosing scope.
-   */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Early return if we're already resolving this type to prevent cycles
+    if (isResolving()) {
+        handleTypeCycle(t);
+        return this;
+    }
+
+    setResolving(true);
+    try {
+        // Try resolving via registry first
         boolean resolved = resolveViaRegistry(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         if (resolved) {
             super.resolveInternal(t, enclosing);
             finishPropertyContinuations();
             return registry.isLastGeneration() ?
                 getReferencedType() : this;
         }
 
+        // Try resolving via properties if registry resolution failed
         resolveViaProperties(t, enclosing);
         if (detectImplicitPrototypeCycle()) {
             handleTypeCycle(t);
         }
 
         super.resolveInternal(t, enclosing);
         if (isResolved()) {
             finishPropertyContinuations();
         }
         return registry.isLastGeneration() ?
             getReferencedType() : this;
+    } finally {
+        setResolving(false);
+    }
 }
\ No newline at end of file
