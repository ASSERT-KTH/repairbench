diff --git a/tmp/834fb742-f689-4af0-896e-77d4ee8e1736_buggy.java b/tmp/ac28ac3c-4e86-4dce-beea-3865f922f348_fixed.java
index d6a560a..446f9bb 100644
--- a/tmp/834fb742-f689-4af0-896e-77d4ee8e1736_buggy.java
+++ b/tmp/ac28ac3c-4e86-4dce-beea-3865f922f348_fixed.java
@@ -1,33 +1,37 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+    // Check for cycles before attempting resolution
+    if (detectImplicitPrototypeCycle()) {
+        handleTypeCycle(t);
+        return this; // Return early to prevent infinite recursion
+    }
+
+    // Attempt resolution via registry first
     boolean resolved = resolveViaRegistry(t, enclosing);
-    if (detectImplicitPrototypeCycle()) {
-      handleTypeCycle(t);
-    }
     
     if (resolved) {
         super.resolveInternal(t, enclosing);
         finishPropertyContinuations();
         return registry.isLastGeneration() ?
             getReferencedType() : this;
     }
 
+    // If not resolved via registry, try via properties
     resolveViaProperties(t, enclosing);
+    
+    // Check for cycles again after property resolution
     if (detectImplicitPrototypeCycle()) {
         handleTypeCycle(t);
+        return this; // Return early to prevent infinite recursion
     }
 
     super.resolveInternal(t, enclosing);
     if (isResolved()) {
         finishPropertyContinuations();
     }
     return registry.isLastGeneration() ?
         getReferencedType() : this;
 }
\ No newline at end of file
