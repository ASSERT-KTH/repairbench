diff --git a/tmp/bf1241a4-930b-4e88-8bdb-e9c3cfb5f515_buggy.java b/tmp/2dd8853e-0af6-43c0-bbd2-b400b628c24d_fixed.java
index 5abdeb5..1a29c39 100644
--- a/tmp/bf1241a4-930b-4e88-8bdb-e9c3cfb5f515_buggy.java
+++ b/tmp/2dd8853e-0af6-43c0-bbd2-b400b628c24d_fixed.java
@@ -1,29 +1,36 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
-              // Don't count lhs of top-level assignment chain
+                if (n.isName() && n.getString().equals(varName)) {
+                    // Count the use unless it's the left-hand side of a direct assignment
+                    // and not part of a conditional expression
+                    if (!(parent.isAssign() && 
+                          parent.getFirstChild() == n &&
+                          !isInsideConditional(parent))) {
                         numUsesWithinCfgNode++;
                     }
                 }
+            }
 
+            private boolean isInsideConditional(Node node) {
+                Node current = node;
+                while (current != null) {
+                    if (current.isHook()) {
+                        return true;
+                    }
+                    current = current.getParent();
+                }
+                return false;
+            }
         };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
