diff --git a/tmp/a8d84870-fcad-4ed1-80ba-6e059c1c6480_buggy.java b/tmp/fe871875-4e14-49f3-8bc2-893d8bf5b2c9_fixed.java
index 5abdeb5..74d3b24 100644
--- a/tmp/a8d84870-fcad-4ed1-80ba-6e059c1c6480_buggy.java
+++ b/tmp/fe871875-4e14-49f3-8bc2-893d8bf5b2c9_fixed.java
@@ -1,29 +1,30 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
                 @Override
                 public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                    if (n.isName() && n.getString().equals(varName)) {
                         // Don't count lhs of top-level assignment chain
+                        if (parent.isAssign() && parent.getFirstChild() == n) {
+                            return;
+                        }
+                        // Don't count lhs of assignment in conditional expression
+                        if (parent.isHook() && parent.getFirstChild() != n) {
+                            Node hookParent = parent.getParent();
+                            if (hookParent.isAssign() && hookParent.getFirstChild() == parent) {
+                                return;
+                            }
+                        }
                         numUsesWithinCfgNode++;
                     }
                 }
-
             };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
