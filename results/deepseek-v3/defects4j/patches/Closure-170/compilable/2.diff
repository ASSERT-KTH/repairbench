diff --git a/tmp/1468a5cb-b8f7-466f-b3c6-f237f64357c0_buggy.java b/tmp/c8b12822-ea69-408f-9dd7-bd5bbfc26a41_fixed.java
index 5abdeb5..51c274d 100644
--- a/tmp/1468a5cb-b8f7-466f-b3c6-f237f64357c0_buggy.java
+++ b/tmp/c8b12822-ea69-408f-9dd7-bd5bbfc26a41_fixed.java
@@ -1,29 +1,25 @@
     /**
      * Computes the number of uses of the variable varName and store it in
      * numUseWithinUseCfgNode.
      */
     private void getNumUseInUseCfgNode(final Node cfgNode) {
-
         numUsesWithinCfgNode = 0;
         AbstractCfgNodeTraversalCallback gatherCb =
             new AbstractCfgNodeTraversalCallback() {
 
             @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
-          if (n.isName() && n.getString().equals(varName) &&
-            // We make a special exception when the entire cfgNode is a chain
-            // of assignments, since in that case the assignment statements
-            // will happen after the inlining of the right hand side.
-            // TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
-            //   and remove this special case.
-              !(parent.isAssign() &&
-               (parent.getFirstChild() == n))) {
+                if (n.isName() && n.getString().equals(varName)) {
                     // Don't count lhs of top-level assignment chain
+                    if (!(parent.isAssign() && (parent.getFirstChild() == n))) {
+                        // Don't count lhs of assignments inside conditional expressions
+                        if (!(parent.isHook() && parent.getFirstChild() != n)) {
                             numUsesWithinCfgNode++;
                         }
                     }
-
+                }
+            }
         };
 
         NodeTraversal.traverse(compiler, cfgNode, gatherCb);
     }
\ No newline at end of file
