diff --git a/tmp/944c1721-8299-4daa-bc19-68f77fc21d85_buggy.java b/tmp/24a73790-5473-405a-b410-5ccf32e1ef78_fixed.java
index dc93be3..45a1b14 100644
--- a/tmp/944c1721-8299-4daa-bc19-68f77fc21d85_buggy.java
+++ b/tmp/24a73790-5473-405a-b410-5ccf32e1ef78_fixed.java
@@ -1,14 +1,23 @@
     Element insert(Token.StartTag startTag) {
         // handle empty unknown tags
         // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
         if (startTag.isSelfClosing()) {
+            Tag tag = Tag.valueOf(startTag.name());
+            if (tag.isKnownTag() && !tag.isEmpty()) {
+                // For known non-empty tags, create a normal element and don't emit end tag
+                Element el = new Element(tag, baseUri, startTag.attributes);
+                insert(el);
+                return el;
+            } else {
+                // For unknown tags or known empty tags, handle as self-closing
                 Element el = insertEmpty(startTag);
                 stack.add(el);
                 tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing
                 return el;
             }
+        }
         
         Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
         insert(el);
         return el;
     }
\ No newline at end of file
