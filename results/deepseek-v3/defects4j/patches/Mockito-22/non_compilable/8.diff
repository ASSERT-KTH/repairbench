diff --git a/tmp/1a025bfd-a0da-4218-9fbb-770be66a3a33_buggy.java b/tmp/b5021b11-d024-463c-a1c6-80bf185b04ba_fixed.java
index 111ba5e..6270720 100644
--- a/tmp/1a025bfd-a0da-4218-9fbb-770be66a3a33_buggy.java
+++ b/tmp/b5021b11-d024-463c-a1c6-80bf185b04ba_fixed.java
@@ -1,9 +1,46 @@
     public static boolean areEqual(Object o1, Object o2) {
         if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+            if (!isArray(o2)) {
+                return false;
+            }
+            // Handle primitive arrays and object arrays separately
+            if (o1.getClass().getComponentType().isPrimitive() || o2.getClass().getComponentType().isPrimitive()) {
+                return arePrimitiveArraysEqual(o1, o2);
+            } else {
+                return areObjectArraysEqual(o1, o2);
+            }
         } else {
             return o1.equals(o2);
         }
     }
+
+    private static boolean arePrimitiveArraysEqual(Object array1, Object array2) {
+        if (array1 instanceof int[] && array2 instanceof int[]) {
+            return Arrays.equals((int[]) array1, (int[]) array2);
+        } else if (array1 instanceof long[] && array2 instanceof long[]) {
+            return Arrays.equals((long[]) array1, (long[]) array2);
+        } else if (array1 instanceof short[] && array2 instanceof short[]) {
+            return Arrays.equals((short[]) array1, (short[]) array2);
+        } else if (array1 instanceof byte[] && array2 instanceof byte[]) {
+            return Arrays.equals((byte[]) array1, (byte[]) array2);
+        } else if (array1 instanceof char[] && array2 instanceof char[]) {
+            return Arrays.equals((char[]) array1, (char[]) array2);
+        } else if (array1 instanceof float[] && array2 instanceof float[]) {
+            return Arrays.equals((float[]) array1, (float[]) array2);
+        } else if (array1 instanceof double[] && array2 instanceof double[]) {
+            return Arrays.equals((double[]) array1, (double[]) array2);
+        } else if (array1 instanceof boolean[] && array2 instanceof boolean[]) {
+            return Arrays.equals((boolean[]) array1, (boolean[]) array2);
+        }
+        return false;
+    }
+
+    private static boolean areObjectArraysEqual(Object array1, Object array2) {
+        return Arrays.deepEquals((Object[]) array1, (Object[]) array2);
+    }
+
+    private static boolean isArray(Object obj) {
+        return obj != null && obj.getClass().isArray();
+    }
\ No newline at end of file
