diff --git a/tmp/89590a62-5fe7-478d-9d56-7e5779dfd129_buggy.java b/tmp/5403b65e-ac66-4b5f-848f-d7d1640b205a_fixed.java
index 9353941..63c7020 100644
--- a/tmp/89590a62-5fe7-478d-9d56-7e5779dfd129_buggy.java
+++ b/tmp/5403b65e-ac66-4b5f-848f-d7d1640b205a_fixed.java
@@ -1,30 +1,31 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
         if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+            // Check if this is part of a compound assignment
+            Node parent = n.getParent();
+            if (parent.isAssign() && parent.getFirstChild() == n) {
+                // For compound assignments, we need to check the RHS for reads
+                Node rhs = parent.getLastChild();
+                VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+                if (rhsState == VariableLiveness.READ) {
+                    return VariableLiveness.READ;
+                }
+            }
             return VariableLiveness.KILL;
         } else {
             return VariableLiveness.READ;
         }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
          child != null; child = child.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
             VariableLiveness state = isVariableReadBeforeKill(child, variable);
             if (state != VariableLiveness.MAYBE_LIVE) {
                 return state;
             }
         }
     }
     return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
