diff --git a/tmp/929fd416-c30c-40d5-99f4-b514e4f4e78b_buggy.java b/tmp/beb7af3f-035c-41ef-a8dd-d130768c3c64_fixed.java
index 9353941..260fcba 100644
--- a/tmp/929fd416-c30c-40d5-99f4-b514e4f4e78b_buggy.java
+++ b/tmp/beb7af3f-035c-41ef-a8dd-d130768c3c64_fixed.java
@@ -1,30 +1,43 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // If we find a READ before a KILL, return READ
+          if (state == VariableLiveness.READ) {
             return state;
           }
+          // If we find a KILL, check if there's a READ in the remaining children
+          if (state == VariableLiveness.KILL) {
+            for (Node sibling = child.getNext(); sibling != null; sibling = sibling.getNext()) {
+              VariableLiveness siblingState = isVariableReadBeforeKill(sibling, variable);
+              if (siblingState == VariableLiveness.READ) {
+                return VariableLiveness.READ;
+              }
+            }
+            return VariableLiveness.KILL;
+          }
+        }
       }
     }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
