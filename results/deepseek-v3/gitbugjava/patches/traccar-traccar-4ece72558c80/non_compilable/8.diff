diff --git a/tmp/ace9e958-6345-417e-995b-9b8e79e437a0_buggy.java b/tmp/1d3b73ad-ab2b-4822-9208-d742e5c4205f_fixed.java
index 0a8838d..37d2684 100644
--- a/tmp/ace9e958-6345-417e-995b-9b8e79e437a0_buggy.java
+++ b/tmp/1d3b73ad-ab2b-4822-9208-d742e5c4205f_fixed.java
@@ -1,61 +1,68 @@
 private List<Position> parseData(
         Channel channel, SocketAddress remoteAddress, ByteBuf buf, int locationPacketId, String... imei) {
     List<Position> positions = new LinkedList<>();
 
     if (!connectionless) {
         buf.readUnsignedInt(); // data length
     }
 
     int codec = buf.readUnsignedByte();
     int count = buf.readUnsignedByte();
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
     if (deviceSession == null) {
         return null;
     }
     String model = getCacheManager().getObject(Device.class, deviceSession.getDeviceId()).getModel();
 
     for (int i = 0; i < count; i++) {
         Position position = new Position(getProtocolName());
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setValid(true);
 
         if (codec == CODEC_13) {
             buf.readUnsignedByte(); // type
             int length = buf.readInt() - 4;
             getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
+            String result;
             if (isPrintable(buf, length)) {
-                    position.set(Position.KEY_RESULT,
-                            buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim());
+                result = buf.readCharSequence(length, StandardCharsets.US_ASCII).toString().trim();
+                // Extract driver unique ID from the result if it contains it
+                if (result.contains("|")) {
+                    String[] parts = result.split("\\|");
+                    if (parts.length > 6) {
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, parts[6]);
+                    }
+                }
+                position.set(Position.KEY_RESULT, result);
             } else {
-                    position.set(Position.KEY_RESULT,
-                            ByteBufUtil.hexDump(buf.readSlice(length)));
+                position.set(Position.KEY_RESULT, ByteBufUtil.hexDump(buf.readSlice(length)));
             }
         } else if (codec == CODEC_12) {
             decodeSerial(channel, remoteAddress, deviceSession, position, buf);
         } else {
             decodeLocation(position, buf, codec, model);
         }
 
         if (!position.getOutdated() || !position.getAttributes().isEmpty()) {
             positions.add(position);
         }
     }
 
     if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
         ByteBuf response = Unpooled.buffer();
         if (connectionless) {
             response.writeShort(5);
             response.writeShort(0);
             response.writeByte(0x01);
             response.writeByte(locationPacketId);
             response.writeByte(count);
         } else {
             response.writeInt(count);
         }
         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
     }
 
     return positions.isEmpty() ? null : positions;
 }
\ No newline at end of file
