diff --git a/tmp/1ee7056d-2866-40e4-b922-08470f5011a4_buggy.java b/tmp/0852ee58-fcf5-427f-8102-f7180622a9fb_fixed.java
index 3da904d..2c8b33e 100644
--- a/tmp/1ee7056d-2866-40e4-b922-08470f5011a4_buggy.java
+++ b/tmp/0852ee58-fcf5-427f-8102-f7180622a9fb_fixed.java
@@ -1,73 +1,94 @@
 private Position decodePosition(DeviceSession deviceSession, String data) {
 
     Parser parser = new Parser(PATTERN_POSITION, data);
     if (!parser.matches()) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
     position.setValid(parser.next().equals("A"));
     position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
     position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
     position.setCourse(parser.nextDouble(0));
     position.setAltitude(parser.nextDouble(0));
 
     position.set(Position.KEY_SATELLITES, parser.nextInt(0));
     position.set(Position.KEY_RSSI, parser.nextInt(0));
     position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
     position.set(Position.KEY_STEPS, parser.nextInt(0));
 
     int status = parser.nextHexInt(0);
     position.set(Position.KEY_ALARM, decodeAlarm(status));
     if (BitUtil.check(status, 4)) {
         position.set(Position.KEY_MOTION, true);
     }
 
     String[] values = parser.next().split(",");
     int index = 0;
 
     Network network = new Network();
 
+    // Handle cell tower information
+    if (index < values.length) {
+        try {
             int cellCount = Integer.parseInt(values[index++]);
             if (cellCount > 0) {
                 index += 1; // timing advance
-            int mcc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
-            int mnc = !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                int mcc = index < values.length && !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
+                int mnc = index < values.length && !values[index].isEmpty() ? Integer.parseInt(values[index++]) : 0;
 
-            for (int i = 0; i < cellCount; i++) {
-                int lac = Integer.parseInt(values[index++]);
-                int cid = Integer.parseInt(values[index++]);
+                for (int i = 0; i < cellCount && index + 2 < values.length; i++) {
+                    try {
+                        int lac = Integer.parseInt(values[index++], 16); // Parse LAC as hex
+                        int cid = Integer.parseInt(values[index++], 16); // Parse CID as hex
                         String rssi = values[index++];
                         if (!rssi.isEmpty()) {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, Integer.parseInt(rssi)));
                         } else {
                             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
                         }
+                    } catch (NumberFormatException e) {
+                        // Skip invalid cell tower data
+                        index += 2;
+                    }
+                }
+            }
+        } catch (NumberFormatException e) {
+            // Skip cell tower parsing if there's an error
         }
     }
 
+    // Handle WiFi information
     if (index < values.length && !values[index].isEmpty()) {
+        try {
             int wifiCount = Integer.parseInt(values[index++]);
 
-            for (int i = 0; i < wifiCount; i++) {
+            for (int i = 0; i < wifiCount && index + 1 < values.length; i++) {
                 index += 1; // wifi name
                 String macAddress = values[index++];
                 String rssi = values[index++];
                 if (!macAddress.isEmpty() && !macAddress.equals("0") && !rssi.isEmpty()) {
+                    try {
                         network.addWifiAccessPoint(WifiAccessPoint.from(macAddress, Integer.parseInt(rssi)));
+                    } catch (NumberFormatException e) {
+                        // Skip invalid WiFi data
                     }
                 }
             }
+        } catch (NumberFormatException e) {
+            // Skip WiFi parsing if there's an error
+        }
+    }
 
     if (network.getCellTowers() != null || network.getWifiAccessPoints() != null) {
         position.setNetwork(network);
     }
 
     return position;
 }
\ No newline at end of file
