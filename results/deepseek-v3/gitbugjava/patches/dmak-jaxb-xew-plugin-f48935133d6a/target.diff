diff --git a/tmp/d4acebb9-be81-4fc9-b3b7-3c913c5dc1c5_buggy.java b/tmp/b8bcab39-c8c9-4e93-98f4-087bde032639_fixed.java
index 47a8941..859aa06 100644
--- a/tmp/d4acebb9-be81-4fc9-b3b7-3c913c5dc1c5_buggy.java
+++ b/tmp/b8bcab39-c8c9-4e93-98f4-087bde032639_fixed.java
@@ -1,53 +1,59 @@
 	/**
 	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
 	 */
 	private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
 		// Modify the container so it now refers the class. Container can be a class or package.
 		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
 		JClassContainer grandParent = parent.parentContainer();
 		// Allows to track class name collisions:
 		Map<String, JDefinedClass> classes;
 
 		// FIXME: Pending https://java.net/jira/browse/JAXB-957
 		if (grandParent.isClass()) {
 			// Element class should be added as its container child:
 			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
 			classes = getPrivateField(grandParentClass, "classes");
 		}
 		else {
 			JPackage grandParentPackage = (JPackage) grandParent;
 
 			writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
 			classes = getPrivateField(grandParentPackage, "classes");
 
 			// In this scenario class should have "static" modifier reset otherwise it won't compile:
 			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
 			for (ClassOutline classOutline : outline.getClasses()) {
 				if (classOutline.implClass == clazz) {
 					XSComponent sc = classOutline.target.getSchemaComponent();
 
 					// FIXME: Inner class is always a local declaration.
 					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
 
 					setPrivateField(sc, "anonymous", Boolean.FALSE);
 
 					break;
 				}
 			}
 		}
 
-		if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+		// Rename the class in case there is class name collision.
+		// FIXME: Should that be doublechecked after renaming?
+		if (classes.containsKey(clazz.name()) || classes.containsKey(clazz.name().toUpperCase())) {
+			String newName = parent.name() + clazz.name();
+			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + newName);
+			setPrivateField(clazz, "name", newName);
 		}
 
-		classes.put(clazz.name(), clazz);
+		// Special treatment for the case when "classes" map holds class names in upper case
+		// (true for case-sensitive filesystems, see usages of JCodeModel.isCaseSensitiveFileSystem):
+		boolean allClassNamesInUpperCase = classes.keySet().stream().allMatch(key -> key.equals(key.toUpperCase()));
+		classes.put(allClassNamesInUpperCase ? clazz.name().toUpperCase() : clazz.name(), clazz);
 
 		// Finally modify the class so that it refers back the container:
 		setPrivateField(clazz, "outer", grandParent);
 	}
