diff --git a/tmp/0aad8db6-2dbf-4db9-aa7e-bfd56661f732_buggy.java b/tmp/a6980e96-6454-4a65-b552-cd83f1a14dea_fixed.java
index 2444d12..7334bc5 100644
--- a/tmp/0aad8db6-2dbf-4db9-aa7e-bfd56661f732_buggy.java
+++ b/tmp/a6980e96-6454-4a65-b552-cd83f1a14dea_fixed.java
@@ -1,29 +1,37 @@
-    // Evaluates the given postfix expression string and returns the result.
 public static int postfixEvaluate(final String exp) {
     Stack<Integer> s = new Stack<Integer>();
     Scanner tokens = new Scanner(exp);
 
     while (tokens.hasNext()) {
         if (tokens.hasNextInt()) {
             s.push(tokens.nextInt()); // If int then push to stack
         } else { // else pop top two values and perform the operation
+            String op = tokens.next();
+
+            if (s.size() < 2) {
+                tokens.close();
+                throw new IllegalArgumentException("exp is not a proper postfix expression.");
+            }
+
             int num2 = s.pop();
             int num1 = s.pop();
-                String op = tokens.next();
 
             switch (op) {
                 case "+" -> s.push(num1 + num2);
                 case "-" -> s.push(num1 - num2);
                 case "*" -> s.push(num1 * num2);
                 case "/" -> s.push(num1 / num2);
-                    default -> throw new IllegalArgumentException("exp contains an unknown operation.");
+                default -> {
+                    tokens.close();
+                    throw new IllegalArgumentException("exp contains an unknown operation.");
+                }
             }
             //  "+", "-", "*", "/"
         }
     }
     tokens.close();
     if (s.size() != 1) {
         throw new IllegalArgumentException("exp is not a proper postfix expression.");
     }
     return s.pop();
 }
\ No newline at end of file
