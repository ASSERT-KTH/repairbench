diff --git a/tmp/247ad268-f24b-4719-8707-7cdcdf04b582_buggy.java b/tmp/c4693c1d-c317-4742-b7fb-71b7770a29d9_fixed.java
index 27f2719..570836b 100644
--- a/tmp/247ad268-f24b-4719-8707-7cdcdf04b582_buggy.java
+++ b/tmp/c4693c1d-c317-4742-b7fb-71b7770a29d9_fixed.java
@@ -1,90 +1,129 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
-        if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
-            return null;
-        }
-
-        Position position = new Position(getProtocolName());
-        position.setDeviceId(deviceSession.getDeviceId());
-
     String type = sentence.substring(1, 2);
-        position.set(Position.KEY_TYPE, type);
+
+    if (!sentence.matches("![35A-D],.*")) {
+        return null;
+    }
+
+    Position position = new Position(getProtocolName());
 
     if (type.equals("3")) {
 
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
+        if (deviceSession == null) {
+            return null;
+        }
+        position.setDeviceId(deviceSession.getDeviceId());
+
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
+        if (deviceSession == null) {
+            return null;
+        }
+        position.setDeviceId(deviceSession.getDeviceId());
+
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
+        String deviceId = parser.next();
+        parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); // skip to device id
+        deviceId = parser.next();
+
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, deviceId);
+        if (deviceSession == null) {
+            return null;
+        }
+        position.setDeviceId(deviceSession.getDeviceId());
+
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
+        String deviceId = parser.next();
+        parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); // skip to device id
+        deviceId = parser.next();
+
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, deviceId);
+        if (deviceSession == null) {
+            return null;
+        }
+        position.setDeviceId(deviceSession.getDeviceId());
+
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
+        String deviceId = parser.next();
+        parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); parser.next(); // skip to device id
+        deviceId = parser.next();
+
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, deviceId);
+        if (deviceSession == null) {
+            return null;
+        }
+        position.setDeviceId(deviceSession.getDeviceId());
+
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
