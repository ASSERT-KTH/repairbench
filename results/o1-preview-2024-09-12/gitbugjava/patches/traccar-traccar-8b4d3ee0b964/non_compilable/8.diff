diff --git a/tmp/62dfe590-40ab-401e-a0dd-f8377398b363_buggy.java b/tmp/29870961-c7ce-4325-8557-80cb52d73d2e_fixed.java
index 27f2719..b791751 100644
--- a/tmp/62dfe590-40ab-401e-a0dd-f8377398b363_buggy.java
+++ b/tmp/29870961-c7ce-4325-8557-80cb52d73d2e_fixed.java
@@ -1,90 +1,140 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
+        if (values.length >= 2) {
             position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
+        }
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
+
+private static final Pattern PATTERN_A = Pattern.compile(
+        "!A," +
+        "(\\d+/\\d+/\\d+)," +
+        "(\\d+:\\d+:\\d+)," +
+        "([\\d.-]+)," +
+        "([\\d.-]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)?," +
+        "([\\d]+)");
+
+private static final Pattern PATTERN_BD = Pattern.compile(
+        "![BD]," +
+        "(\\d+/\\d+/\\d+)," +
+        "(\\d+:\\d+:\\d+)," +
+        "([\\d.-]+)," +
+        "([\\d.-]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)," +
+        "([\\da-fA-F]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)," +
+        "(\\d+)," +
+        "(\\d+)," +
+        "([\\d.]+)?");
+
+private static final Pattern PATTERN_C = Pattern.compile(
+        "!C," +
+        "(\\d+/\\d+/\\d+)," +
+        "(\\d+:\\d+:\\d+)," +
+        "([\\d.-]+)," +
+        "([\\d.-]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)," +
+        "([\\da-fA-F]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)," +
+        "([\\d.]+)?," +
+        "([0-9a-fA-F]+)");
+
+private void decodeFix(Position position, Parser parser) {
+    // Implementation of decodeFix goes here
+}
+
+private void decodeState(Position position, Parser parser) {
+    // Implementation of decodeState goes here
+}
\ No newline at end of file
