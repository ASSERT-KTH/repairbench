diff --git a/tmp/1a921820-29ec-4de1-98d9-8ae7da6838f3_buggy.java b/tmp/4d9b5b74-97b0-4492-8029-7cdec72b928d_fixed.java
index 27f2719..cdcc6d2 100644
--- a/tmp/1a921820-29ec-4de1-98d9-8ae7da6838f3_buggy.java
+++ b/tmp/4d9b5b74-97b0-4492-8029-7cdec72b928d_fixed.java
@@ -1,90 +1,130 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
 
     if (sentence.startsWith("!1,")) {
         int index = sentence.indexOf(',', 3);
         if (index < 0) {
             index = sentence.length();
         }
         getDeviceSession(channel, remoteAddress, sentence.substring(3, index));
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
     if (deviceSession == null || !sentence.matches("![35A-D],.*")) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
 
     String type = sentence.substring(1, 2);
     position.set(Position.KEY_TYPE, type);
 
     if (type.equals("3")) {
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RESULT, sentence.substring(3));
 
         return position;
 
     } else if (type.equals("5")) {
 
         String[] values = sentence.split(",");
 
         getLastLocation(position, null);
 
         position.set(Position.KEY_RSSI, Integer.parseInt(values[1]));
         if (values.length >= 4) {
             position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
         }
 
         return position;
 
     } else if (type.equals("B") || type.equals("D")) {
 
+        Pattern PATTERN_BD = new PatternBuilder()
+                .text("!").expression("[BD],")
+                .number("(dd)/(dd)/(dd),") // date
+                .number("(dd?):(dd?):(dd),") // time
+                .number("(-?d+.d+),(-?d+.d+),") // latitude, longitude
+                .number("(d+),") // speed
+                .number("(d+),") // course
+                .expression("([0-9a-fA-F]{6}),") // state
+                .number("(d+.d+),") // altitude
+                .number("(d+),") // battery
+                .number("(d+),") // satellites
+                .number("(d+),") // satellites visible
+                .number("(d*.?d*)") // hdop
+                .compile();
+
         Parser parser = new Parser(PATTERN_BD, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
         position.set(Position.KEY_SATELLITES_VISIBLE, parser.nextInt(0));
         position.set(Position.KEY_HDOP, parser.nextDouble(0));
 
         return position;
 
     } else if (type.equals("C")) {
 
+        Pattern PATTERN_C = new PatternBuilder()
+                .text("!C,")
+                .number("(dd?)/(dd?)/(dd?),") // date
+                .number("(dd?):(dd?):(dd?),") // time
+                .number("(-?d+.d+),(-?d+.d+),") // latitude, longitude
+                .number("(d+),") // speed
+                .number("(d+),") // course
+                .expression("([0-9a-fA-F]{6}),") // state
+                .number("([d.]+),") // odometer
+                .number("(d+),") // battery
+                .number("([d.]+),") // adc1
+                .number("([d.]+),") // adc2
+                .number("(d*)") // report id
+                .compile();
+
         Parser parser = new Parser(PATTERN_C, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
         decodeState(position, parser);
 
         return position;
 
     } else if (type.equals("A")) {
 
+        Pattern PATTERN_A = new PatternBuilder()
+                .text("!A,")
+                .number("(dd?)/(dd?)/(dd?),") // date
+                .number("(dd?):(dd?):(dd?),") // time
+                .number("(-?d+.d+),(-?d+.d+),") // latitude, longitude
+                .number("([d.]+),") // speed
+                .number("([d.]+),") // course
+                .number("(d+)") // report id
+                .compile();
+
         Parser parser = new Parser(PATTERN_A, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         decodeFix(position, parser);
 
         return position;
 
     }
 
     return null;
 }
\ No newline at end of file
