diff --git a/tmp/79adc7d1-ce6a-4776-b565-97b4ac22b2c1_buggy.java b/tmp/135fcd01-a1ea-4926-9e33-d9dfb9e181df_fixed.java
index 47a8941..269eae9 100644
--- a/tmp/79adc7d1-ce6a-4776-b565-97b4ac22b2c1_buggy.java
+++ b/tmp/135fcd01-a1ea-4926-9e33-d9dfb9e181df_fixed.java
@@ -1,53 +1,66 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
     // Modify the container so it now refers the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
+    // Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
-			setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
+        // Use public API to remove the "static" modifier
+        clazz.mods().setStatic(false);
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
+                    // Attempt to set the 'anonymous' field via reflection
+                    try {
+                        Field anonymousField = sc.getClass().getDeclaredField("anonymous");
+                        anonymousField.setAccessible(true);
+                        anonymousField.set(sc, Boolean.FALSE);
+                    } catch (NoSuchFieldException | IllegalAccessException e) {
+                        // Handle exceptions appropriately
+                        e.printStackTrace();
+                    }
+                }
                 break;
             }
         }
     }
 
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        // Use public API to set the class name
+        clazz.name(parent.name() + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+    // Modify the class so that it refers back to the grandparent container
+    try {
+        Field outerField = clazz.getClass().getDeclaredField("outer");
+        outerField.setAccessible(true);
+        outerField.set(clazz, grandParent);
+    } catch (NoSuchFieldException | IllegalAccessException e) {
+        // Handle exceptions appropriately
+        e.printStackTrace();
+    }
 }
\ No newline at end of file
