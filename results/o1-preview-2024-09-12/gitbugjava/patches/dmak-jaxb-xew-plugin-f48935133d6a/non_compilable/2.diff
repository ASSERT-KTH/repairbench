diff --git a/tmp/95789f18-252c-431b-ab08-83e357a8b42f_buggy.java b/tmp/4f20d9b9-7d3e-4a43-b22b-4f632d1194f6_fixed.java
index 47a8941..50c8514 100644
--- a/tmp/95789f18-252c-431b-ab08-83e357a8b42f_buggy.java
+++ b/tmp/4f20d9b9-7d3e-4a43-b22b-4f632d1194f6_fixed.java
@@ -1,53 +1,60 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be an inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
-		JClassContainer grandParent = parent.parentContainer();
-		// Allows to track class name collisions:
+    // Modify the container so it now refers to the class. Container can be a class or package.
+    JClassContainer parentContainer = clazz.parentContainer();
+
+    if (!parentContainer.isClass()) {
+        // Parent is not a class, cannot move up
+        writeSummary("\tClass " + clazz.fullName() + " does not have a parent class to move up from.");
+        return;
+    }
+
+    JDefinedClass parent = (JDefinedClass) parentContainer;
+    JClassContainer grandParentContainer = parent.parentContainer();
+
+    // Allows tracking of class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
-		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
-			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
+    if (grandParentContainer.isClass()) {
+        // Element class should be added as its container's child:
+        JDefinedClass grandParentClass = (JDefinedClass) grandParentContainer;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
-			JPackage grandParentPackage = (JPackage) grandParent;
+    } else if (grandParentContainer.isPackage()) {
+        JPackage grandParentPackage = (JPackage) grandParentContainer;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario, the class should have the "static" modifier removed; otherwise, it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
                 // FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
                 setPrivateField(sc, "anonymous", Boolean.FALSE);
 
                 break;
             }
         }
+    } else {
+        throw new IllegalArgumentException("Unknown grandparent container type");
     }
 
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+    // Finally, modify the class so that it refers back to the container:
+    setPrivateField(clazz, "outer", grandParentContainer);
 }
\ No newline at end of file
