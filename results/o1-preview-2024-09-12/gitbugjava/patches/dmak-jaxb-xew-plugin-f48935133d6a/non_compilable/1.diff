diff --git a/tmp/76b9b46c-4200-4170-a108-323bfed163e6_buggy.java b/tmp/4f5f0fe4-e50f-4baa-88eb-84d2cf107220_fixed.java
index 47a8941..9bf270d 100644
--- a/tmp/76b9b46c-4200-4170-a108-323bfed163e6_buggy.java
+++ b/tmp/4f5f0fe4-e50f-4baa-88eb-84d2cf107220_fixed.java
@@ -1,53 +1,81 @@
 /**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
+ * Move the given class to its grandparent (either class or package). The given {@code clazz} should be inner class.
  */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
-		JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
-		JClassContainer grandParent = parent.parentContainer();
+    // Modify the container so it now refers to the class. Container can be a class or package.
+    JClassContainer parentContainer = clazz.parentContainer();
+    if (parentContainer == null) {
+        writeSummary("\tCannot move class " + clazz.fullName() + " up, no parent container.");
+        return;
+    }
+    JClassContainer grandParentContainer = null;
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
-		// FIXME: Pending https://java.net/jira/browse/JAXB-957
-		if (grandParent.isClass()) {
-			// Element class should be added as its container child:
-			JDefinedClass grandParentClass = (JDefinedClass) grandParent;
+    if (parentContainer.isClass()) {
+        JDefinedClass parentClass = (JDefinedClass) parentContainer;
+        grandParentContainer = parentClass.parentContainer();
+    } else if (parentContainer.isPackage()) {
+        JPackage parentPackage = (JPackage) parentContainer;
+        grandParentContainer = parentPackage.parent();
+    } else {
+        writeSummary("\tCannot move class " + clazz.fullName() + " up, unknown parent container type.");
+        return;
+    }
+
+    if (grandParentContainer == null) {
+        writeSummary("\tCannot move class " + clazz.fullName() + " up, no grandparent container.");
+        return;
+    }
+
+    if (grandParentContainer.isClass()) {
+        JDefinedClass grandParentClass = (JDefinedClass) grandParentContainer;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
-			JPackage grandParentPackage = (JPackage) grandParent;
+    } else if (grandParentContainer.isPackage()) {
+        JPackage grandParentPackage = (JPackage) grandParentContainer;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
         // In this scenario class should have "static" modifier reset otherwise it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
+                if (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal()) {
                     setPrivateField(sc, "anonymous", Boolean.FALSE);
+                }
 
                 break;
             }
         }
+    } else {
+        writeSummary("\tCannot move class " + clazz.fullName() + " up, unknown grandparent container type.");
+        return;
     }
 
     if (classes.containsKey(clazz.name())) {
-			writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
-			setPrivateField(clazz, "name", parent.name() + clazz.name());
+        String parentName;
+        if (parentContainer.isClass()) {
+            parentName = ((JDefinedClass) parentContainer).name();
+        } else if (parentContainer.isPackage()) {
+            parentName = ((JPackage) parentContainer).name();
+        } else {
+            parentName = "";
+        }
+
+        writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parentName + clazz.name());
+        setPrivateField(clazz, "name", parentName + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
     // Finally modify the class so that it refers back the container:
-		setPrivateField(clazz, "outer", grandParent);
+    setPrivateField(clazz, "outer", grandParentContainer);
 }
\ No newline at end of file
