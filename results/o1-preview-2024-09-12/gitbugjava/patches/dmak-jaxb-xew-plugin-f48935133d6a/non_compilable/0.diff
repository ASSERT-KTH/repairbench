diff --git a/tmp/fceffac3-4f47-4a55-a5b0-6d22dc0da58c_buggy.java b/tmp/5bf43715-6860-4509-9e86-f70f7d65799a_fixed.java
index 47a8941..3d2a6b2 100644
--- a/tmp/fceffac3-4f47-4a55-a5b0-6d22dc0da58c_buggy.java
+++ b/tmp/5bf43715-6860-4509-9e86-f70f7d65799a_fixed.java
@@ -1,53 +1,55 @@
-	/**
-	 * Move the given class to his grandparent (either class or package). The given {@code clazz} should be inner class.
-	 */
 private void moveClassLevelUp(Outline outline, JDefinedClass clazz) {
-		// Modify the container so it now refers the class. Container can be a class or package.
+    // Modify the container so it now refers to the class. Container can be a class or package.
     JDefinedClass parent = (JDefinedClass) clazz.parentContainer();
     JClassContainer grandParent = parent.parentContainer();
     // Allows to track class name collisions:
     Map<String, JDefinedClass> classes;
 
     // FIXME: Pending https://java.net/jira/browse/JAXB-957
     if (grandParent.isClass()) {
         // Element class should be added as its container child:
         JDefinedClass grandParentClass = (JDefinedClass) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to class " + grandParentClass.fullName());
 
         classes = getPrivateField(grandParentClass, "classes");
-		}
-		else {
+    } else {
         JPackage grandParentPackage = (JPackage) grandParent;
 
         writeSummary("\tMoving inner class " + clazz.fullName() + " to package " + grandParentPackage.name());
 
         classes = getPrivateField(grandParentPackage, "classes");
 
-			// In this scenario class should have "static" modifier reset otherwise it won't compile:
+        // In this scenario, class should have "static" modifier reset; otherwise, it won't compile:
         setPrivateField(clazz.mods(), "mods", Integer.valueOf(clazz.mods().getValue() & ~JMod.STATIC));
 
         for (ClassOutline classOutline : outline.getClasses()) {
             if (classOutline.implClass == clazz) {
                 XSComponent sc = classOutline.target.getSchemaComponent();
 
-					// FIXME: Inner class is always a local declaration.
-					assert (sc instanceof XSDeclaration && ((XSDeclaration) sc).isLocal());
-
-					setPrivateField(sc, "anonymous", Boolean.FALSE);
-
+                if (sc instanceof XSDeclaration) {
+                    XSDeclaration xsDecl = (XSDeclaration) sc;
+                    if (xsDecl.isLocal()) {
+                        setPrivateField(xsDecl, "anonymous", Boolean.FALSE);
+                    }
+                } else if (sc instanceof XSComplexType) {
+                    XSComplexType xsComplexType = (XSComplexType) sc;
+                    if (xsComplexType.isLocal()) {
+                        setPrivateField(xsComplexType, "anonymous", Boolean.FALSE);
+                    }
+                }
                 break;
             }
         }
     }
 
     if (classes.containsKey(clazz.name())) {
         writeSummary("\tRenaming class " + clazz.fullName() + " to class " + parent.name() + clazz.name());
         setPrivateField(clazz, "name", parent.name() + clazz.name());
     }
 
     classes.put(clazz.name(), clazz);
 
-		// Finally modify the class so that it refers back the container:
+    // Finally, modify the class so that it refers back to the container:
     setPrivateField(clazz, "outer", grandParent);
 }
\ No newline at end of file
