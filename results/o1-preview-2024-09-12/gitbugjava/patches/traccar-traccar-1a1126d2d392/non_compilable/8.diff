diff --git a/tmp/fd7efe59-5051-4668-91c9-25da0fe94eaf_buggy.java b/tmp/c9ba00ea-2855-485e-984b-e140dfdb26c3_fixed.java
index 2a0dceb..770eb38 100644
--- a/tmp/fd7efe59-5051-4668-91c9-25da0fe94eaf_buggy.java
+++ b/tmp/c9ba00ea-2855-485e-984b-e140dfdb26c3_fixed.java
@@ -1,68 +1,105 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
-        String type = values[index++].substring(5);
+    if (values.length < 1) return null;
+    String typeValue = values[index++];
+    if (typeValue.length() < 5) return null;
+    String type = typeValue.substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
+    if (index >= values.length) return null;
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
+    if (index >= values.length) return null;
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
+        if (index + 4 >= values.length) {
+            break; // Not enough values for another iteration
+        }
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
         index += 1; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
+    if (index < values.length) {
         position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+    }
+
+    if (index < values.length) {
         position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
+    }
+
+    if (index < values.length) {
         position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
+    }
+
+    if (index < values.length) {
         position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
+    }
 
-        if (values[index].length() == 3) {
+    if (index < values.length && values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    if (index + 1 < values.length) {
+        String dateString = values[index++];
+        String timeString = values[index++];
+        if (!dateString.isEmpty() && !timeString.isEmpty()) {
+            try {
+                position.setTime(dateFormat.parse(dateString + timeString));
+            } catch (ParseException e) {
+                return null;
+            }
+        } else {
+            return null;
+        }
+    } else {
+        return null; // Not enough data to parse date and time
+    }
+
+    if (index + 5 < values.length) {
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
-
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-
         position.setValid(values[index++].equals("1"));
+    } else {
+        // Not enough data to parse position
+        return null;
+    }
 
     return position;
 }
\ No newline at end of file
