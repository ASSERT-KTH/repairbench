diff --git a/tmp/0ae248dc-8346-4f34-a580-49734bcf40af_buggy.java b/tmp/4e5c3d6d-59e9-46a2-ac70-d3e74e6a0295_fixed.java
index 2a0dceb..db90fca 100644
--- a/tmp/0ae248dc-8346-4f34-a580-49734bcf40af_buggy.java
+++ b/tmp/4e5c3d6d-59e9-46a2-ac70-d3e74e6a0295_fixed.java
@@ -1,68 +1,81 @@
 private Position decode4(
         Channel channel, SocketAddress remoteAddress, String[] values) throws ParseException {
     int index = 0;
 
     String type = values[index++].substring(5);
 
     if (!type.equals("STT") && !type.equals("ALT")) {
         return null;
     }
 
     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values[index++]);
     if (deviceSession == null) {
         return null;
     }
 
     Position position = new Position(getProtocolName());
     position.setDeviceId(deviceSession.getDeviceId());
     position.set(Position.KEY_TYPE, type);
 
     position.set(Position.KEY_VERSION_FW, values[index++]);
     index += 1; // model
 
     Network network = new Network();
 
     for (int i = 0; i < 7; i++) {
         int cid = Integer.parseInt(values[index++]);
         int mcc = Integer.parseInt(values[index++]);
         int mnc = Integer.parseInt(values[index++]);
         int lac, rssi;
         if (i == 0) {
             rssi = Integer.parseInt(values[index++]);
             lac = Integer.parseInt(values[index++]);
         } else {
             lac = Integer.parseInt(values[index++]);
             rssi = Integer.parseInt(values[index++]);
         }
         index += 1; // timing advance
         if (cid > 0) {
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
         }
     }
 
     position.setNetwork(network);
 
     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
     position.set(Position.KEY_ARCHIVE, values[index++].equals("0") ? true : null);
     position.set(Position.KEY_INDEX, Integer.parseInt(values[index++]));
     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++]));
 
     if (values[index].length() == 3) {
         index += 1; // collaborative network
     }
 
     DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
-        position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
+    if (index + 1 < values.length) {
+        String dateValue = values[index++];
+        String timeValue = values[index++];
+        if (!dateValue.isEmpty() && !timeValue.isEmpty()) {
+            position.setTime(dateFormat.parse(dateValue + timeValue));
+        }
+    }
+
+    if (index + 3 < values.length) {
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
         position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Double.parseDouble(values[index++]));
+    }
 
+    if (index < values.length) {
         position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
+    }
 
+    if (index < values.length) {
         position.setValid(values[index++].equals("1"));
+    }
 
     return position;
 }
\ No newline at end of file
