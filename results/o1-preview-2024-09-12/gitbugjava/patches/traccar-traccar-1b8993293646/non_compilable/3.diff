diff --git a/tmp/f677ae08-b4e0-4a85-a662-2b53e1c76310_buggy.java b/tmp/f5c81097-0fc6-4017-a540-a808af3688aa_fixed.java
index 7374e5f..c7f7b1c 100644
--- a/tmp/f677ae08-b4e0-4a85-a662-2b53e1c76310_buggy.java
+++ b/tmp/f5c81097-0fc6-4017-a540-a808af3688aa_fixed.java
@@ -1,61 +1,75 @@
     private Object decodeLocationNew(
             Channel channel, SocketAddress remoteAddress, String sentence) {
 
         Parser parser = new Parser(PATTERN_NEW, sentence);
         if (!parser.matches()) {
             return null;
         }
 
         String imei = parser.next();
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;
         }
 
         String index = parser.next();
 
+        String alarmCode = parser.next();
+
+        // Skip the attribute field if it's empty or not needed
+        parser.next();
+
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_ALARM, decodeAlarm(parser.nextInt()));
+        position.set(Position.KEY_ALARM, decodeAlarm(alarmCode));
 
         position.setDeviceTime(parser.nextDateTime());
 
         Network network = new Network();
         network.addCellTower(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt()));
 
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());
         position.set(Position.KEY_STATUS, parser.nextHexInt());
 
+        // Skip reserved field if present
+        if (parser.hasNext()) {
+            parser.next();
+        }
+
         if (parser.hasNext(5)) {
 
             position.setValid(parser.next().equals("A"));
             position.setFixTime(position.getDeviceTime());
             position.set(Position.KEY_SATELLITES, parser.nextInt());
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
             position.setLatitude(parser.nextDouble());
-            position.setLongitude(parser.nextDouble());
+            String longitude = parser.next();
+            if (longitude.contains("*")) {
+                longitude = longitude.substring(0, longitude.indexOf('*'));
+            }
+            position.setLongitude(Double.parseDouble(longitude));
 
         } else {
 
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");
                 String mac = wifi[0].replaceAll("(..)", "$1:");
                 network.addWifiAccessPoint(WifiAccessPoint.from(
                         mac.substring(0, mac.length() - 1), Integer.parseInt(wifi[1])));
             }
 
         }
 
         position.setNetwork(network);
 
         DateFormat dateFormat = new SimpleDateFormat("yyMMddHHmmss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
         String response = index + ",A03," + dateFormat.format(new Date());
         sendResponse(channel, remoteAddress, imei, response);
 
         return position;
     }
\ No newline at end of file
