diff --git a/tmp/4640b316-aec4-4939-8794-fc752ecffeaf_buggy.java b/tmp/6d92f2bf-fd5d-48a9-81d4-072a4b5b81a6_fixed.java
index 1c732f4..c81fe5e 100644
--- a/tmp/4640b316-aec4-4939-8794-fc752ecffeaf_buggy.java
+++ b/tmp/6d92f2bf-fd5d-48a9-81d4-072a4b5b81a6_fixed.java
@@ -1,88 +1,119 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
     sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
+    Map<String, String> values = new HashMap<>();
+
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter != -1) {
             String key = entry.substring(0, delimiter);
             String value = entry.substring(delimiter + 1);
-            switch (key) {
-                case "unit":
-                    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
-                    if (deviceSession != null) {
+            values.put(key, value);
+        }
+    }
+
+    if (!values.containsKey("unit")) {
+        return null;
+    }
+
+    DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, values.get("unit"));
+    if (deviceSession == null) {
+        return null;
+    }
     position.setDeviceId(deviceSession.getDeviceId());
+
+    if (values.containsKey("gps_valid")) {
+        position.setValid(Integer.parseInt(values.get("gps_valid")) != 0);
     }
-                    break;
-                case "gps_valid":
-                    position.setValid(Integer.parseInt(value) != 0);
-                    break;
-                case "datetime_actual":
-                    position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
-                    break;
-                case "latitude":
-                    position.setLatitude(Double.parseDouble(value));
-                    break;
-                case "longitude":
-                    position.setLongitude(Double.parseDouble(value));
-                    break;
-                case "altitude":
-                    position.setAltitude(Double.parseDouble(value));
-                    break;
-                case "velocity":
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
-                    break;
-                case "heading":
-                    position.setCourse(Integer.parseInt(value));
-                    break;
-                case "eventid":
-                    position.set(Position.KEY_EVENT, Integer.parseInt(value));
-                    break;
-                case "mileage":
-                    position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
-                    break;
-                case "satellites":
-                    position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
-                    break;
-                case "ignition":
-                    position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
-                    break;
-                case "door":
-                    position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
-                    break;
-                case "arm":
-                    position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
-                    break;
-                case "fuel":
-                    position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
-                    break;
-                case "rpm":
-                    position.set(Position.KEY_RPM, Integer.parseInt(value));
-                    break;
-                case "main_voltage":
-                    position.set(Position.KEY_POWER, Double.parseDouble(value));
-                    break;
-                case "backup_voltage":
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
-                    break;
+
+    if (values.containsKey("datetime_actual")) {
+        position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(values.get("datetime_actual")));
+    }
+
+    if (values.containsKey("latitude")) {
+        position.setLatitude(Double.parseDouble(values.get("latitude")));
+    }
+
+    if (values.containsKey("longitude")) {
+        position.setLongitude(Double.parseDouble(values.get("longitude")));
+    }
+
+    if (values.containsKey("altitude")) {
+        position.setAltitude(Double.parseDouble(values.get("altitude")));
+    }
+
+    if (values.containsKey("velocity")) {
+        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values.get("velocity"))));
+    }
+
+    if (values.containsKey("heading")) {
+        position.setCourse(Integer.parseInt(values.get("heading")));
+    }
+
+    if (values.containsKey("eventid")) {
+        position.set(Position.KEY_EVENT, Integer.parseInt(values.get("eventid")));
+    }
+
+    if (values.containsKey("mileage")) {
+        position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(values.get("mileage")) * 1000));
+    }
+
+    if (values.containsKey("satellites")) {
+        position.set(Position.KEY_SATELLITES, Integer.parseInt(values.get("satellites")));
+    }
+
+    if (values.containsKey("ignition")) {
+        position.set(Position.KEY_IGNITION, Integer.parseInt(values.get("ignition")) != 0);
+    }
+
+    if (values.containsKey("door")) {
+        position.set(Position.KEY_DOOR, Integer.parseInt(values.get("door")) != 0);
+    }
+
+    if (values.containsKey("arm")) {
+        position.set(Position.KEY_ARMED, Integer.parseInt(values.get("arm")) != 0);
+    }
+
+    if (values.containsKey("fuel")) {
+        position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(values.get("fuel")));
+    }
+
+    if (values.containsKey("rpm")) {
+        position.set(Position.KEY_RPM, Integer.parseInt(values.get("rpm")));
+    }
+
+    if (values.containsKey("main_voltage")) {
+        position.set(Position.KEY_POWER, Double.parseDouble(values.get("main_voltage")));
+    }
+
+    if (values.containsKey("backup_voltage")) {
+        position.set(Position.KEY_BATTERY, Double.parseDouble(values.get("backup_voltage")));
+    }
+
+    for (String key : values.keySet()) {
+        String value = values.get(key);
+        switch (key) {
             case "analog1":
             case "analog2":
             case "analog3":
-                    position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                int index = key.charAt(key.length() - 1) - '0';
+                position.set(Position.PREFIX_ADC + index, Double.parseDouble(value));
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
             default:
                 position.set(key, value);
                 break;
         }
     }
 
     return position;
 }
\ No newline at end of file
