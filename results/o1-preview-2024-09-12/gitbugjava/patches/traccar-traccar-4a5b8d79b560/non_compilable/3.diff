diff --git a/tmp/1cc021ba-9ce5-42df-a289-2725aeee81dc_buggy.java b/tmp/78cf86d1-899d-4b27-8300-5a3d9385c18b_fixed.java
index 1c732f4..bd92904 100644
--- a/tmp/1cc021ba-9ce5-42df-a289-2725aeee81dc_buggy.java
+++ b/tmp/78cf86d1-899d-4b27-8300-5a3d9385c18b_fixed.java
@@ -1,88 +1,177 @@
 @Override
 protected Object decode(
         Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
     String sentence = (String) msg;
-        sentence = sentence.substring(sentence.indexOf('|') + 1, sentence.lastIndexOf('|'));
+    int start = sentence.indexOf('|') + 1;
+    int end = sentence.lastIndexOf('|');
+    if (start == 0 || end <= start) {
+        return null; // Invalid message format
+    }
+    sentence = sentence.substring(start, end);
 
     Position position = new Position();
     position.setProtocol(getProtocolName());
 
     for (String entry : sentence.split(",")) {
         int delimiter = entry.indexOf('=');
+        if (delimiter <= 0 || delimiter >= entry.length() - 1) {
+            continue; // Skip entry if '=' not found or no key/value
+        }
         String key = entry.substring(0, delimiter);
         String value = entry.substring(delimiter + 1);
         switch (key) {
             case "unit":
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                 if (deviceSession != null) {
                     position.setDeviceId(deviceSession.getDeviceId());
+                } else {
+                    return null; // Device session not found
                 }
                 break;
             case "gps_valid":
+                try {
                     position.setValid(Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "datetime_actual":
+                try {
                     position.setTime(new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").parse(value));
+                } catch (ParseException e) {
+                    // Handle invalid date format
+                    position.setTime(new Date()); // Set current time as fallback
+                }
                 break;
             case "latitude":
+                try {
                     position.setLatitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "longitude":
+                try {
                     position.setLongitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "altitude":
+                try {
                     position.setAltitude(Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "velocity":
+                try {
                     position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "heading":
+                try {
                     position.setCourse(Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "eventid":
+                try {
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "mileage":
+                try {
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "satellites":
+                try {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "ignition":
+                try {
                     position.set(Position.KEY_IGNITION, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "door":
+                try {
                     position.set(Position.KEY_DOOR, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "arm":
+                try {
                     position.set(Position.KEY_ARMED, Integer.parseInt(value) != 0);
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "fuel":
+                try {
                     position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "rpm":
+                try {
                     position.set(Position.KEY_RPM, Integer.parseInt(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "main_voltage":
+                try {
                     position.set(Position.KEY_POWER, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "backup_voltage":
+                try {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "analog1":
             case "analog2":
             case "analog3":
+                try {
                     position.set(Position.PREFIX_ADC + (key.charAt(key.length() - 1) - '0'), Double.parseDouble(value));
+                } catch (NumberFormatException e) {
+                    // Handle invalid number format
+                }
                 break;
             case "extra1":
             case "extra2":
             case "extra3":
+                position.set(key, value);
+                break;
             default:
                 position.set(key, value);
                 break;
         }
     }
 
+    if (position.getDeviceId() == null) {
+        return null; // Device ID not set, cannot proceed
+    }
+
     return position;
 }
\ No newline at end of file
