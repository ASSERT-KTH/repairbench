diff --git a/tmp/337b0327-1c03-42f8-8f2c-906e418ecdc8_buggy.java b/tmp/1f9cb53d-f6db-4fbb-893e-a355e635d1f8_fixed.java
index f506479..a334d7c 100644
--- a/tmp/337b0327-1c03-42f8-8f2c-906e418ecdc8_buggy.java
+++ b/tmp/1f9cb53d-f6db-4fbb-893e-a355e635d1f8_fixed.java
@@ -1,64 +1,86 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
-            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
-
-            processor.consume(groupArg.getIdentity(), arguments);
-
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
-            argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+    argsByName.put(groupArg.getIdentity().getName().toLowerCase(), groupArg.getIdentity());
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
+    while (true)
+    {
+        if (arguments.isEmpty())
+        {
+            break;
+        }
+
+        NameValuePair nextArg = arguments.peekFirst();
+        if (nextArg == NameValuePair.NULL)
+        {
+            arguments.pollFirst();
+            continue;
+        }
+
+        if (nextArg.name == null || !nextArg.name.equalsIgnoreCase(groupArg.getIdentity().getName()))
+        {
+            break;
+        }
+
+        final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
+        final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+
+        // Consume the group's identity (required)
+        processor.consume(groupArg.getIdentity(), arguments);
+
+        // Now consume other args for this group
         while (!arguments.isEmpty())
         {
             final NameValuePair argument = arguments.peekFirst();
             if (argument == NameValuePair.NULL)
             {
                 arguments.pollFirst();
                 continue;
             }
 
             if (argument.name == null)
             {
                 throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
             }
 
             final DslArg arg = argsByName.get(argument.name.toLowerCase());
             if (arg == null)
             {
                 break;
             }
 
             final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
             if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
             {
                 break;
             }
 
             checkValidValue(arg, argument.value);
             argValues.add(argument.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
+        // Now collect values into valuesByName
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
             final SimpleDslParam param = processor.collect(simpleDslArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
