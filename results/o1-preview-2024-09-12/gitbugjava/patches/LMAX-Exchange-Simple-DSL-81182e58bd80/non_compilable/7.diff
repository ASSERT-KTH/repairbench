diff --git a/tmp/827e7125-7749-4000-89ef-ce39f9f28206_buggy.java b/tmp/f17e2b00-1f1f-401f-aff3-e367f9ad3503_fixed.java
index f506479..47aafb8 100644
--- a/tmp/827e7125-7749-4000-89ef-ce39f9f28206_buggy.java
+++ b/tmp/f17e2b00-1f1f-401f-aff3-e367f9ad3503_fixed.java
@@ -1,64 +1,88 @@
 void consume(final RepeatingArgGroup groupArg, final Deque<NameValuePair> arguments)
 {
-            final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
-            final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
-
-            processor.consume(groupArg.getIdentity(), arguments);
-
     final Map<String, SimpleDslArg> argsByName = new HashMap<>();
+
     argsByName.put(groupArg.getIdentity().getName(), groupArg.getIdentity());
+
     for (SimpleDslArg dslArg : groupArg.getOtherArgs())
     {
         if (argsByName.put(dslArg.getName().toLowerCase(), dslArg) != null)
         {
             throw new IllegalArgumentException("Duplicate parameter '" + dslArg.getName() + "' in group " + groupArg.getName());
         }
     }
 
-            while (!arguments.isEmpty())
+    while (true)
     {
+        if (arguments.isEmpty())
+        {
+            break;
+        }
+
         final NameValuePair argument = arguments.peekFirst();
+
         if (argument == NameValuePair.NULL)
         {
             arguments.pollFirst();
             continue;
         }
 
-                if (argument.name == null)
+        if (argument.name == null || !groupArg.getIdentity().getName().equalsIgnoreCase(argument.name))
         {
-                    throw new IllegalArgumentException("Unexpected ambiguous argument " + argument.originalValue);
+            break;
+        }
+
+        final Map<DslArg, List<String>> valuesByArg = new HashMap<>();
+        final SimpleArgumentProcessor processor = new SimpleArgumentProcessor(valuesByArg, "Did not supply a value for %s in group " + groupArg.getName());
+
+        // Consume the group identity
+        processor.consume(groupArg.getIdentity(), arguments);
+
+        while (!arguments.isEmpty())
+        {
+            final NameValuePair arg = arguments.peekFirst();
+            if (arg == NameValuePair.NULL)
+            {
+                arguments.pollFirst();
+                continue;
+            }
+
+            if (arg.name == null)
+            {
+                throw new IllegalArgumentException("Unexpected ambiguous argument " + arg.originalValue);
             }
 
-                final DslArg arg = argsByName.get(argument.name.toLowerCase());
-                if (arg == null)
+            // Check if argument name is in argsByName and it's not the identity again.
+            final DslArg dslArg = argsByName.get(arg.name.toLowerCase());
+            if (dslArg == null || dslArg == groupArg.getIdentity())
             {
                 break;
             }
 
-                final List<String> argValues = valuesByArg.computeIfAbsent(arg, k -> new ArrayList<>());
-                if (!argValues.isEmpty() && !arg.isAllowMultipleValues())
+            final List<String> argValues = valuesByArg.computeIfAbsent(dslArg, k -> new ArrayList<>());
+            if (!argValues.isEmpty() && !dslArg.isAllowMultipleValues())
             {
                 break;
             }
 
-                checkValidValue(arg, argument.value);
-                argValues.add(argument.value);
+            checkValidValue(dslArg, arg.value);
+            argValues.add(arg.value);
             arguments.pollFirst();
         }
 
-            // TODO: this whole thing here is a bit hacky!
         final Map<String, List<String>> valuesByName = new HashMap<>();
         for (final SimpleDslArg simpleDslArg : argsByName.values())
         {
             final SimpleDslParam param = processor.collect(simpleDslArg);
             if (param.hasValue())
             {
                 valuesByName.put(param.getName().toLowerCase(), param.getValuesAsList());
             }
         }
 
         final DslArg[] dslArgs = new DslArg[groupArg.getOtherArgs().length + 1];
         dslArgs[0] = groupArg.getIdentity();
         System.arraycopy(groupArg.getOtherArgs(), 0, dslArgs, 1, groupArg.getOtherArgs().length);
         groupsByArg.computeIfAbsent(groupArg, k -> new ArrayList<>()).add(new RepeatingParamValues(dslArgs, valuesByName));
     }
+}
\ No newline at end of file
