diff --git a/tmp/90cf38c2-1ed3-423d-bd48-5f9d8ccb1dc4_buggy.java b/tmp/0f6fc438-5261-487f-87dd-b7efd08ce2cd_fixed.java
index ad77f15..f90d38e 100644
--- a/tmp/90cf38c2-1ed3-423d-bd48-5f9d8ccb1dc4_buggy.java
+++ b/tmp/0f6fc438-5261-487f-87dd-b7efd08ce2cd_fixed.java
@@ -1,112 +1,210 @@
     private void decodeFragment(Position position, String fragment) {
 
         int dataIndex = fragment.indexOf(':');
         int index = 0;
         String[] values;
         if (fragment.length() == dataIndex + 1) {
             values = new String[0];
         } else {
             values = fragment.substring(dataIndex + 1).split(";");
         }
 
         switch (fragment.substring(0, dataIndex)) {
             case "GPS":
+                if (index < values.length) {
                     position.setValid(values[index++].equals("A"));
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
-                    position.setLatitude(-position.getLatitude());
+                } else {
+                    index++;
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
-                    position.setLongitude(-position.getLongitude());
+                if (index < values.length && values[index].length() >= 1) {
+                    char latHemisphere = values[index].charAt(0);
+                    String latValue = values[index++].substring(1);
+                    if (!latValue.isEmpty()) {
+                        double latitude = Double.parseDouble(latValue);
+                        if (latHemisphere == 'S') {
+                            latitude = -latitude;
                         }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
+                        position.setLatitude(latitude);
                     }
+                }
+                if (index < values.length && values[index].length() >= 1) {
+                    char lonHemisphere = values[index].charAt(0);
+                    String lonValue = values[index++].substring(1);
+                    if (!lonValue.isEmpty()) {
+                        double longitude = Double.parseDouble(lonValue);
+                        if (lonHemisphere == 'W') {
+                            longitude = -longitude;
+                        }
+                        position.setLongitude(longitude);
+                    }
+                }
+                if (index < values.length) {
+                    String speedStr = values[index++];
+                    if (!speedStr.isEmpty()) {
+                        position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(speedStr)));
+                    }
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.setAltitude(Integer.parseInt(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
                 break;
             case "GSM":
                 index += 1; // registration status
                 index += 1; // signal strength
+                if (index + 4 < values.length) {
                     position.setNetwork(new Network(CellTower.from(
                             Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
                             Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
                             Integer.parseInt(values[index++]))));
+                }
                 break;
             case "COT":
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+                    if (hours.length > 0 && !hours[0].isEmpty()) {
+                        int totalSeconds = (Integer.parseInt(hours[0]) * 3600
+                                + (hours.length > 1 && !hours[1].isEmpty() ? Integer.parseInt(hours[1]) * 60 : 0)
+                                + (hours.length > 2 && !hours[2].isEmpty() ? Integer.parseInt(hours[2]) : 0));
+                        position.set(Position.KEY_HOURS, totalSeconds * 1000);
+                    }
+                    index++;
+                } else {
+                    index++;
                 }
                 break;
             case "ADC":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
-                if (index < values.length) {
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+                } else {
+                    index++;
                 }
                 break;
             case "DTT":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+                } else {
+                    index++;
+                }
+                if (index < values.length) {
+                    String ioStr = values[index++];
+                    if (!ioStr.isEmpty()) {
+                        int io = Integer.parseInt(ioStr, 16);
                         position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                         position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                         position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                         position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                         position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                         position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                         position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                         position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
                     }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
+                }
+                if (index + 1 < values.length) {
+                    String geofence1 = values[index++];
+                    String geofence2 = values[index++];
+                    position.set(Position.KEY_GEOFENCE, geofence1 + geofence2);
+                } else {
+                    index += 2;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("eventStatus", values[index++]);
-                if (index < values.length) {
+                } else {
+                    index++;
+                }
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("packetType", values[index++]);
                 }
                 break;
             case "ETD":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("eventData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "OBD":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("obd", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "TAG":
+                if (index < values.length && !values[index].isEmpty()) {
                     position.set("tagData", values[index++]);
+                } else {
+                    index++;
+                }
                 break;
             case "IWD":
                 while (index < values.length) {
+                    if (index < values.length && !values[index].isEmpty()) {
                         int sensorIndex = Integer.parseInt(values[index++]);
+                        if (index < values.length && !values[index].isEmpty()) {
                             int dataType = Integer.parseInt(values[index++]);
                             if (dataType == 0) {
+                                if (index < values.length && !values[index].isEmpty()) {
                                     position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                                } else {
+                                    index++;
+                                }
                             } else if (dataType == 1) {
                                 index += 1; // temperature sensor serial number
+                                if (index < values.length && !values[index].isEmpty()) {
                                     position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                                } else {
+                                    index++;
+                                }
+                            }
+                        } else {
+                            index++;
+                        }
+                    } else {
+                        index++;
                     }
                 }
                 break;
             default:
                 break;
         }
     }
\ No newline at end of file
