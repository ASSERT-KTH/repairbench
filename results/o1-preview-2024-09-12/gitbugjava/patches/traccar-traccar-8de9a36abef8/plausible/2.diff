diff --git a/tmp/b7c87bba-2f47-4e56-8cd2-11a355e6ea03_buggy.java b/tmp/39b06415-8bc5-4b86-a3ca-300eb135526f_fixed.java
index ad77f15..4a17340 100644
--- a/tmp/b7c87bba-2f47-4e56-8cd2-11a355e6ea03_buggy.java
+++ b/tmp/39b06415-8bc5-4b86-a3ca-300eb135526f_fixed.java
@@ -1,112 +1,217 @@
 private void decodeFragment(Position position, String fragment) {
 
     int dataIndex = fragment.indexOf(':');
-        int index = 0;
+    int[] index = new int[]{0};
     String[] values;
     if (fragment.length() == dataIndex + 1) {
         values = new String[0];
     } else {
         values = fragment.substring(dataIndex + 1).split(";");
     }
 
     switch (fragment.substring(0, dataIndex)) {
-            case "GPS":
-                position.setValid(values[index++].equals("A"));
-                position.set(Position.KEY_SATELLITES, Integer.parseInt(values[index++]));
-                position.setLatitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'S') {
+        case "GPS": {
+            String value;
+            value = nextValue(values, index);
+            position.setValid("A".equals(value));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.setLatitude(Double.parseDouble(value.substring(1)));
+                if (value.charAt(0) == 'S') {
                     position.setLatitude(-position.getLatitude());
                 }
-                position.setLongitude(Double.parseDouble(values[index].substring(1)));
-                if (values[index++].charAt(0) == 'W') {
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.setLongitude(Double.parseDouble(value.substring(1)));
+                if (value.charAt(0) == 'W') {
                     position.setLongitude(-position.getLongitude());
                 }
-                if (!values[index++].isEmpty()) {
-                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(values[index - 1])));
             }
-                position.setCourse(Integer.parseInt(values[index++]));
-                if (index < values.length) {
-                    position.setAltitude(Integer.parseInt(values[index++]));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(value)));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_HDOP, Double.parseDouble(values[index++]));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.setCourse(Double.parseDouble(value));
             }
-                if (index < values.length) {
-                    position.set(Position.KEY_VDOP, Double.parseDouble(values[index++]));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.setAltitude(Double.parseDouble(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_HDOP, Double.parseDouble(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_VDOP, Double.parseDouble(value));
             }
             break;
-            case "GSM":
-                index += 1; // registration status
-                index += 1; // signal strength
-                position.setNetwork(new Network(CellTower.from(
-                        Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++], 16), Integer.parseInt(values[index++], 16),
-                        Integer.parseInt(values[index++]))));
+        }
+        case "GSM": {
+            index[0] += 2; // skip registration status and signal strength
+            String mccStr = nextValue(values, index);
+            String mncStr = nextValue(values, index);
+            String lacStr = nextValue(values, index);
+            String cidStr = nextValue(values, index);
+            String signalStr = nextValue(values, index);
+            if (mccStr != null && mncStr != null && lacStr != null && cidStr != null && signalStr != null &&
+                !mccStr.isEmpty() && !mncStr.isEmpty() && !lacStr.isEmpty() && !cidStr.isEmpty() && !signalStr.isEmpty()) {
+                int mcc = Integer.parseInt(mccStr);
+                int mnc = Integer.parseInt(mncStr);
+                int lac = Integer.parseInt(lacStr, 16);
+                int cid = Integer.parseInt(cidStr, 16);
+                int signal = Integer.parseInt(signalStr);
+                position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid, signal)));
+            }
             break;
-            case "COT":
-                if (index < values.length) {
-                    position.set(Position.KEY_ODOMETER, Long.parseLong(values[index++]));
         }
-                if (index < values.length) {
-                    String[] hours = values[index].split("-");
-                    position.set(Position.KEY_HOURS, (Integer.parseInt(hours[0]) * 3600
-                            + (hours.length > 1 ? Integer.parseInt(hours[1]) * 60 : 0)
-                            + (hours.length > 2 ? Integer.parseInt(hours[2]) : 0)) * 1000);
+        case "COT": {
+            String value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_ODOMETER, Long.parseLong(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                String[] hours = value.split("-");
+                int totalSeconds = 0;
+                if (hours.length > 0 && !hours[0].isEmpty()) {
+                    totalSeconds += Integer.parseInt(hours[0]) * 3600;
+                }
+                if (hours.length > 1 && !hours[1].isEmpty()) {
+                    totalSeconds += Integer.parseInt(hours[1]) * 60;
+                }
+                if (hours.length > 2 && !hours[2].isEmpty()) {
+                    totalSeconds += Integer.parseInt(hours[2]);
+                }
+                position.set(Position.KEY_HOURS, totalSeconds * 1000L);
             }
             break;
-            case "ADC":
-                position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
-                if (index < values.length) {
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(values[index++]));
         }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 1, Double.parseDouble(values[index++]));
+        case "ADC": {
+            String value;
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_POWER, Double.parseDouble(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_BATTERY, Double.parseDouble(value));
             }
-                if (index < values.length) {
-                    position.set(Position.PREFIX_ADC + 2, Double.parseDouble(values[index++]));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.PREFIX_ADC + 1, Double.parseDouble(value));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.PREFIX_ADC + 2, Double.parseDouble(value));
             }
             break;
-            case "DTT":
-                position.set(Position.KEY_STATUS, Integer.parseInt(values[index++], 16));
-                if (!values[index++].isEmpty()) {
-                    int io = Integer.parseInt(values[index - 1], 16);
+        }
+        case "DTT": {
+            String value;
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set(Position.KEY_STATUS, Integer.parseInt(value, 16));
+            }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                int io = Integer.parseInt(value, 16);
                 position.set(Position.KEY_IGNITION, BitUtil.check(io, 0));
                 position.set(Position.PREFIX_IN + 1, BitUtil.check(io, 1));
                 position.set(Position.PREFIX_IN + 2, BitUtil.check(io, 2));
                 position.set(Position.PREFIX_IN + 3, BitUtil.check(io, 3));
                 position.set(Position.PREFIX_IN + 4, BitUtil.check(io, 4));
                 position.set(Position.PREFIX_OUT + 1, BitUtil.check(io, 5));
                 position.set(Position.PREFIX_OUT + 2, BitUtil.check(io, 6));
                 position.set(Position.PREFIX_OUT + 3, BitUtil.check(io, 7));
             }
-                position.set(Position.KEY_GEOFENCE, values[index++] + values[index++]);
-                position.set("eventStatus", values[index++]);
-                if (index < values.length) {
-                    position.set("packetType", values[index++]);
+
+            String geofenceValue1 = nextValue(values, index);
+            String geofenceValue2 = nextValue(values, index);
+            position.set(Position.KEY_GEOFENCE, (geofenceValue1 != null ? geofenceValue1 : "") + (geofenceValue2 != null ? geofenceValue2 : ""));
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set("eventStatus", value);
             }
+
+            value = nextValue(values, index);
+            if (value != null && !value.isEmpty()) {
+                position.set("packetType", value);
+            }
+
             break;
-            case "ETD":
-                position.set("eventData", values[index++]);
+        }
+        case "ETD": {
+            String value = nextValue(values, index);
+            position.set("eventData", value);
             break;
-            case "OBD":
-                position.set("obd", values[index++]);
+        }
+        case "OBD": {
+            String value = nextValue(values, index);
+            position.set("obd", value);
             break;
-            case "TAG":
-                position.set("tagData", values[index++]);
+        }
+        case "TAG": {
+            String value = nextValue(values, index);
+            position.set("tagData", value);
             break;
-            case "IWD":
-                while (index < values.length) {
-                    int sensorIndex = Integer.parseInt(values[index++]);
-                    int dataType = Integer.parseInt(values[index++]);
+        }
+        case "IWD": {
+            while (index[0] < values.length) {
+                String sensorIndexStr = nextValue(values, index);
+                String dataTypeStr = nextValue(values, index);
+                if (sensorIndexStr != null && !sensorIndexStr.isEmpty() &&
+                    dataTypeStr != null && !dataTypeStr.isEmpty()) {
+                    int sensorIndex = Integer.parseInt(sensorIndexStr);
+                    int dataType = Integer.parseInt(dataTypeStr);
                     if (dataType == 0) {
-                        position.set(Position.KEY_DRIVER_UNIQUE_ID, values[index++]);
+                        String driverId = nextValue(values, index);
+                        position.set(Position.KEY_DRIVER_UNIQUE_ID, driverId);
                     } else if (dataType == 1) {
-                        index += 1; // temperature sensor serial number
-                        position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(values[index++]));
+                        index[0] += 1; // Ignore sensor serial number
+                        String tempValue = nextValue(values, index);
+                        if (tempValue != null && !tempValue.isEmpty()) {
+                            position.set(Position.PREFIX_TEMP + sensorIndex, Double.parseDouble(tempValue));
                         }
                     }
+                } else {
+                    // Not enough data to parse, break the loop
                     break;
+                }
+            }
+            break;
+        }
         default:
             break;
     }
 }
+
+private String nextValue(String[] values, int[] index) {
+    if (index[0] < values.length) {
+        return values[index[0]++];
+    } else {
+        index[0]++;
+        return null;
+    }
+}
\ No newline at end of file
