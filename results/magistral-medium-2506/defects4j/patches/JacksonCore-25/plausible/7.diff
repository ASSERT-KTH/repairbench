diff --git a/tmp/7448433e-6b68-409b-bbd3-434c53c12f38_buggy.java b/tmp/8482f78e-42bd-4695-9079-572c6b5599e5_fixed.java
index 8dfbd84..e1564e8 100644
--- a/tmp/7448433e-6b68-409b-bbd3-434c53c12f38_buggy.java
+++ b/tmp/8482f78e-42bd-4695-9079-572c6b5599e5_fixed.java
@@ -1,43 +1,43 @@
     private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
     {
         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
         char[] outBuf = _textBuffer.getCurrentSegment();
         int outPtr = _textBuffer.getCurrentSegmentSize();
-        final int maxCode = codes.length;
+        final int maxCode = codes.length - 1; // Changed from codes.length to codes.length - 1 to handle valid indices properly
 
         while (true) {
             if (_inputPtr >= _inputEnd) {
                 if (!_loadMore()) { // acceptable for now (will error out later)
                     break;
                 }
             }
             char c = _inputBuffer[_inputPtr];
             int i = (int) c;
-            if (i <= maxCode) {
+            if (i <= maxCode) { // Now properly checks against valid array indices
                 if (codes[i] != 0) {
                     break;
                 }
             } else if (!Character.isJavaIdentifierPart(c)) {
                 break;
             }
             ++_inputPtr;
             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
             // Ok, let's add char to output:
             outBuf[outPtr++] = c;
 
             // Need more room?
             if (outPtr >= outBuf.length) {
                 outBuf = _textBuffer.finishCurrentSegment();
                 outPtr = 0;
             }
         }
         _textBuffer.setCurrentLength(outPtr);
         {
             TextBuffer tb = _textBuffer;
             char[] buf = tb.getTextBuffer();
             int start = tb.getTextOffset();
             int len = tb.size();
 
             return _symbols.findSymbol(buf, start, len, hash);
         }
     }
\ No newline at end of file
