diff --git a/tmp/e2a9ac19-3880-4bf3-b682-8e4686f88c20_buggy.java b/tmp/33f13eb6-056e-48cd-9dda-0ee8546771c9_fixed.java
index 8dfbd84..6991649 100644
--- a/tmp/e2a9ac19-3880-4bf3-b682-8e4686f88c20_buggy.java
+++ b/tmp/33f13eb6-056e-48cd-9dda-0ee8546771c9_fixed.java
@@ -1,43 +1,43 @@
 private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException
 {
     _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
     char[] outBuf = _textBuffer.getCurrentSegment();
     int outPtr = _textBuffer.getCurrentSegmentSize();
-        final int maxCode = codes.length;
+    final int maxCode = codes.length - 1; // Fixed: changed from codes.length to codes.length - 1
 
     while (true) {
         if (_inputPtr >= _inputEnd) {
             if (!_loadMore()) { // acceptable for now (will error out later)
                 break;
             }
         }
         char c = _inputBuffer[_inputPtr];
         int i = (int) c;
         if (i <= maxCode) {
             if (codes[i] != 0) {
                 break;
             }
         } else if (!Character.isJavaIdentifierPart(c)) {
             break;
         }
         ++_inputPtr;
         hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
         // Ok, let's add char to output:
         outBuf[outPtr++] = c;
 
         // Need more room?
         if (outPtr >= outBuf.length) {
             outBuf = _textBuffer.finishCurrentSegment();
             outPtr = 0;
         }
     }
     _textBuffer.setCurrentLength(outPtr);
     {
         TextBuffer tb = _textBuffer;
         char[] buf = tb.getTextBuffer();
         int start = tb.getTextOffset();
         int len = tb.size();
 
         return _symbols.findSymbol(buf, start, len, hash);
     }
 }
\ No newline at end of file
