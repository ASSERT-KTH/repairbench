diff --git a/tmp/355b05dc-48fb-42c4-bb20-695356987389_buggy.java b/tmp/a958769f-66d5-4343-83f0-8e5851db956a_fixed.java
index 877a1a1..1496ad7 100644
--- a/tmp/355b05dc-48fb-42c4-bb20-695356987389_buggy.java
+++ b/tmp/a958769f-66d5-4343-83f0-8e5851db956a_fixed.java
@@ -1,14 +1,66 @@
     /**
       * Returns the percentage of values that are equal to v
      * (as a proportion between 0 and 1).
      * <p>
      * Returns <code>Double.NaN</code> if no values have been added.</p>
      *
      * @param v the value to lookup
      * @return the proportion of values equal to v
      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0
      */
     @Deprecated
     public double getPct(Object v) {
-        return getCumPct((Comparable<?>) v);
+        if (v instanceof Number) {
+            // For Number types, we need to handle possible type mismatches
+            // by checking all numeric values that might be equivalent
+            long count = 0;
+            long total = 0;
+            for (Object[] entry : getCounts().entrySet()) {
+                Object key = entry[0];
+                Long frequency = (Long) entry[1];
+                total += frequency;
+                if (key instanceof Number) {
+                    Number keyNum = (Number) key;
+                    Number vNum = (Number) v;
+                    // Compare values numerically, not by reference
+                    if (compareNumbers(keyNum, vNum) == 0) {
+                        count += frequency;
+                    }
+                }
+            }
+            return total == 0 ? Double.NaN : (double) count / (double) total;
+        } else {
+            // For non-Number types, do regular comparison
+            long count = 0;
+            long total = 0;
+            for (Object[] entry : getCounts().entrySet()) {
+                Object key = entry[0];
+                Long frequency = (Long) entry[1];
+                total += frequency;
+                if (key.equals(v)) {
+                    count += frequency;
+                }
+            }
+            return total == 0 ? Double.NaN : (double) count / (double) total;
+        }
+    }
+
+    /**
+     * Helper method to compare two Numbers numerically
+     */
+    private int compareNumbers(Number n1, Number n2) {
+        // If both are integers (byte, short, int, long)
+        if (isInteger(n1) && isInteger(n2)) {
+            return Long.compare(n1.longValue(), n2.longValue());
+        }
+        // Otherwise compare as doubles
+        return Double.compare(n1.doubleValue(), n2.doubleValue());
+    }
+
+    /**
+     * Check if a number is an integer type
+     */
+    private boolean isInteger(Number n) {
+        return n instanceof Byte || n instanceof Short ||
+               n instanceof Integer || n instanceof Long;
     }
\ No newline at end of file
