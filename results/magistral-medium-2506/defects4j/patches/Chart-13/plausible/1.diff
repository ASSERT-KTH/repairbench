diff --git a/tmp/8d9579b2-d02d-42c5-abbe-f335c9e36f15_buggy.java b/tmp/72f5273f-ee54-4fc7-ab15-3ee8a2ea4175_fixed.java
index 63a7c80..55a24b7 100644
--- a/tmp/8d9579b2-d02d-42c5-abbe-f335c9e36f15_buggy.java
+++ b/tmp/72f5273f-ee54-4fc7-ab15-3ee8a2ea4175_fixed.java
@@ -1,77 +1,117 @@
     /**
      * Arranges the items within a container.
      *
      * @param container  the container.
      * @param constraint  the constraint.
      * @param g2  the graphics device.
      *
      * @return The container size after the arrangement.
      */
     protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                                RectangleConstraint constraint) {
         double[] w = new double[5];
         double[] h = new double[5];
         w[0] = constraint.getWidth();
+
+        // Initialize heights for top and bottom blocks
+        h[0] = 0.0; // top block height
         if (this.topBlock != null) {
             RectangleConstraint c1 = new RectangleConstraint(w[0], null,
                     LengthConstraintType.FIXED, 0.0,
                     new Range(0.0, constraint.getHeight()),
                     LengthConstraintType.RANGE);
             Size2D size = this.topBlock.arrange(g2, c1);
             h[0] = size.height;
         }
-        w[1] = w[0];
+
+        // Initialize heights for bottom block
+        h[1] = 0.0; // bottom block height
         if (this.bottomBlock != null) {
+            double maxHeightForBottom = constraint.getHeight() - h[0];
+            if (maxHeightForBottom < 0) {
+                maxHeightForBottom = 0;
+            }
             RectangleConstraint c2 = new RectangleConstraint(w[0], null,
-                    LengthConstraintType.FIXED, 0.0, new Range(0.0,
-                    constraint.getHeight() - h[0]), LengthConstraintType.RANGE);
+                    LengthConstraintType.FIXED, 0.0,
+                    new Range(0.0, maxHeightForBottom),
+                    LengthConstraintType.RANGE);
             Size2D size = this.bottomBlock.arrange(g2, c2);
             h[1] = size.height;
         }
-        h[2] = constraint.getHeight() - h[1] - h[0];
+
+        // Calculate available height for middle section
+        double availableHeight = constraint.getHeight() - h[0] - h[1];
+        if (availableHeight < 0) {
+            availableHeight = 0;
+        }
+        h[2] = availableHeight; // height for left/right/center blocks
+
+        w[1] = w[0];  // width for bottom block (same as top/container)
+
+        // Calculate width for left block
+        w[2] = 0.0; // left block width
         if (this.leftBlock != null) {
+            double maxWidthForLeft = constraint.getWidth();
             RectangleConstraint c3 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth()),
+                    new Range(0.0, maxWidthForLeft),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.leftBlock.arrange(g2, c3);
             w[2] = size.width;
         }
-        h[3] = h[2];
+
+        h[3] = h[2]; // height for right block (same as left/center)
+
+        // Calculate width for right block
+        w[3] = 0.0; // right block width
         if (this.rightBlock != null) {
+            double maxWidthForRight = constraint.getWidth() - w[2];
+            if (maxWidthForRight < 0) {
+                maxWidthForRight = 0;
+            }
             RectangleConstraint c4 = new RectangleConstraint(0.0,
-                    new Range(0.0, constraint.getWidth() - w[2]),
+                    new Range(0.0, maxWidthForRight),
                     LengthConstraintType.RANGE, h[2], null,
                     LengthConstraintType.FIXED);
             Size2D size = this.rightBlock.arrange(g2, c4);
             w[3] = size.width;
         }
-        h[4] = h[2];
-        w[4] = constraint.getWidth() - w[3] - w[2];
+
+        h[4] = h[2]; // height for center block
+        w[4] = constraint.getWidth() - w[2] - w[3]; // width for center block
+        if (w[4] < 0) {
+            w[4] = 0;
+        }
+
+        // Arrange center block
         RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);
         if (this.centerBlock != null) {
             this.centerBlock.arrange(g2, c5);
         }
 
+        // Position all blocks
         if (this.topBlock != null) {
             this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],
                     h[0]));
         }
         if (this.bottomBlock != null) {
             this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],
                     w[1], h[1]));
         }
         if (this.leftBlock != null) {
             this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
                     h[2]));
         }
         if (this.rightBlock != null) {
             this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],
                     w[3], h[3]));
         }
         if (this.centerBlock != null) {
             this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],
                     h[4]));
         }
-        return new Size2D(constraint.getWidth(), constraint.getHeight());
+
+        // Return the overall size
+        double totalHeight = h[0] + h[2] + h[1];
+        return new Size2D(constraint.getWidth(), totalHeight);
     }
\ No newline at end of file
