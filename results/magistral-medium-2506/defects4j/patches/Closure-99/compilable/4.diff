diff --git a/tmp/08202990-b4e7-45a4-9fd1-a54966877259_buggy.java b/tmp/90c0dfb2-a946-45e4-895d-6e092e199732_fixed.java
index 86553f4..208b8c4 100644
--- a/tmp/08202990-b4e7-45a4-9fd1-a54966877259_buggy.java
+++ b/tmp/90c0dfb2-a946-45e4-895d-6e092e199732_fixed.java
@@ -1,57 +1,74 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+          pType == Token.ASSIGN ||
+          pType == Token.GETPROP)) {  // Added GETPROP to handle a.protoype.b cases
       return false;
     }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+      if (lhs.getType() == Token.GETPROP) {
+        // Check for both direct prototype assignment and nested property access
+        Node propertyNameNode = lhs.getLastChild();
+        String propertyName = propertyNameNode.getString();
+        if ("prototype".equals(propertyName)) {
           return false;
         }
-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
+
+        // Also check if the GETPROP chain contains a prototype
+        Node current = lhs;
+        while (current != null && current.getType() == Token.GETPROP) {
+          if ("prototype".equals(current.getLastChild().getString())) {
             return false;
           }
+          current = current.getFirstChild();
+        }
+      }
+      if (lhs.getQualifiedName() != null) {
+        String qualifiedName = lhs.getQualifiedName();
+        if (qualifiedName.contains(".prototype.") || qualifiedName.endsWith(".prototype")) {
+          return false;
+        }
+      }
     }
   }
 
   return true;
 }
\ No newline at end of file
