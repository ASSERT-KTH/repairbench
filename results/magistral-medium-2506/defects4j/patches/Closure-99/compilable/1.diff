diff --git a/tmp/2ed1fe7c-2697-4704-ab96-6b2fbf04bd66_buggy.java b/tmp/51f040a9-e3b8-4094-9ec0-070c0e128654_fixed.java
index 86553f4..0c4049e 100644
--- a/tmp/2ed1fe7c-2697-4704-ab96-6b2fbf04bd66_buggy.java
+++ b/tmp/51f040a9-e3b8-4094-9ec0-070c0e128654_fixed.java
@@ -1,57 +1,72 @@
-  /**
-   * Since this pass reports errors only when a global {@code this} keyword
-   * is encountered, there is no reason to traverse non global contexts.
-   */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
+            pType == Token.ASSIGN ||
+            pType == Token.GETPROP)) {  // Added GETPROP to handle prototype assignments
         return false;
       }
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
       } else {
         // Only traverse the right side if it's not an assignment to a prototype
         // property or subproperty.
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+          if (lhs.getType() == Token.GETPROP) {
+            String lastProp = lhs.getLastChild().getString();
+            if ("prototype".equals(lastProp)) {
               return false;
             }
+            // Check if lhs is a chain with 'prototype' in it
+            Node child = lhs.getFirstChild();
+            while (child != null) {
+              if (child.getType() == Token.GETPROP &&
+                  "prototype".equals(child.getLastChild().getString())) {
+                return false;
+              }
+              child = child.getNext();
+            }
+          }
           if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
             return false;
           }
       }
     }
 
+    // Don't traverse prototype properties or nested prototype assignments
+    if (parent != null && parent.getType() == Token.GETPROP) {
+      if ("prototype".equals(parent.getLastChild().getString())) {
+        return false;
+      }
+    }
+
     return true;
   }
\ No newline at end of file
