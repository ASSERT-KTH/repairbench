diff --git a/tmp/f0256aef-97b7-4869-9412-4c5f7cdd5f64_buggy.java b/tmp/e4827b7b-9fc4-4b68-ac82-eaef4b675f8b_fixed.java
index 0f439b3..ab60e5e 100644
--- a/tmp/f0256aef-97b7-4869-9412-4c5f7cdd5f64_buggy.java
+++ b/tmp/e4827b7b-9fc4-4b68-ac82-eaef4b675f8b_fixed.java
@@ -1,38 +1,51 @@
 /**
  * Reads bytes from the current tar archive entry.
  *
  * This method is aware of the boundaries of the current
  * entry in the archive and will deal with them as if they
  * were this stream's start and EOF.
  *
  * @param buf The buffer into which to place bytes read.
  * @param offset The offset at which to place bytes read.
  * @param numToRead The number of bytes to read.
  * @return The number of bytes read, or -1 at EOF.
  * @throws IOException on error
  */
 @Override
 public int read(byte[] buf, int offset, int numToRead) throws IOException {
     int totalRead = 0;
 
     if (hasHitEOF || entryOffset >= entrySize) {
         return -1;
     }
 
     if (currEntry == null) {
         throw new IllegalStateException("No current tar entry");
     }
 
-        numToRead = Math.min(numToRead, available());
+    long remaining = entrySize - entryOffset;
+    if (remaining <= 0) {
+        return -1;
+    }
+
+    numToRead = (int) Math.min(numToRead, remaining);
 
     totalRead = is.read(buf, offset, numToRead);
-        count(totalRead);
-        
     if (totalRead == -1) {
         hasHitEOF = true;
+        // Check if we hit EOF before reading all expected bytes for this entry
+        if (entryOffset < entrySize) {
+            throw new IOException("Truncated tar archive");
+        }
+        return -1;
     } else {
         entryOffset += totalRead;
+        // Check if we didn't get enough bytes (possible truncated file)
+        if (totalRead < numToRead && (entryOffset < entrySize)) {
+            throw new IOException("Truncated tar archive");
+        }
     }
 
+    count(totalRead);
     return totalRead;
 }
\ No newline at end of file
