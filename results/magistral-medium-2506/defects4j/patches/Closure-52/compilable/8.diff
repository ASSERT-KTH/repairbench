diff --git a/tmp/6ba20ffe-97f5-4a10-b32f-3cab0bd4d51b_buggy.java b/tmp/b8d90b6e-ee6d-48cc-9863-cbf17432b537_fixed.java
index 4b7f469..0100a97 100644
--- a/tmp/6ba20ffe-97f5-4a10-b32f-3cab0bd4d51b_buggy.java
+++ b/tmp/b8d90b6e-ee6d-48cc-9863-cbf17432b537_fixed.java
@@ -1,10 +1,63 @@
 static boolean isSimpleNumber(String s) {
+    if (s.isEmpty()) {
+        return false;
+    }
     int len = s.length();
-    for (int index = 0; index < len; index++) {
+    int index = 0;
+
+    // Check for leading sign (not present in test cases but generally should be handled)
+    if (s.charAt(0) == '-' || s.charAt(0) == '+') {
+        index++;
+    }
+
+    // Check if it's hexadecimal
+    if (index + 1 < len && s.charAt(index) == '0' && (s.charAt(index + 1) == 'x' || s.charAt(index + 1) == 'X')) {
+        index += 2;
+        if (index >= len) return false; // just "0x" is not a number
+        for (; index < len; index++) {
+            char c = s.charAt(index);
+            if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F')) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    // Check if it's octal (leading 0 followed by digits)
+    if (s.charAt(0) == '0' && len > 1) {
+        index = 1;
+        for (; index < len; index++) {
             char c = s.charAt(index);
-      if (c < '0' || c > '9') {
+            if (c < '0' || c > '7') { // octal digits are 0-7
+                break;
+            }
+        }
+        // If we processed all characters as octal digits, it's a valid number
+        if (index == len) {
+            return true;
+        }
+    }
+
+    // Check for regular decimal or floating point
+    boolean hasDecimalPoint = false;
+    boolean hasExponent = false;
+    for (; index < len; index++) {
+        char c = s.charAt(index);
+        if (c == '.') {
+            if (hasDecimalPoint || hasExponent) return false;
+            hasDecimalPoint = true;
+        } else if (c == 'e' || c == 'E') {
+            if (hasExponent) return false;
+            hasExponent = true;
+            if (index + 1 >= len) return false; // exponent must have digits after it
+            char next = s.charAt(index+1);
+            if (next == '+' || next == '-') {
+                index++; // skip the sign after exponent
+                if (index + 1 >= len) return false; // must have digits after sign
+            }
+        } else if (c < '0' || c > '9') {
             return false;
         }
     }
-    return len > 0;
+    return true;
 }
\ No newline at end of file
