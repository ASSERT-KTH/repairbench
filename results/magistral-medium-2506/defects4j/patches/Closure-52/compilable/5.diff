diff --git a/tmp/23f044b1-8b67-4f3b-a5a4-9d7e9698f927_buggy.java b/tmp/fa3d8b71-1efd-44bb-a4b5-8f922ffc505a_fixed.java
index 4b7f469..f688f80 100644
--- a/tmp/23f044b1-8b67-4f3b-a5a4-9d7e9698f927_buggy.java
+++ b/tmp/fa3d8b71-1efd-44bb-a4b5-8f922ffc505a_fixed.java
@@ -1,10 +1,41 @@
 static boolean isSimpleNumber(String s) {
-    int len = s.length();
-    for (int index = 0; index < len; index++) {
-      char c = s.charAt(index);
-      if (c < '0' || c > '9') {
+    if (s.isEmpty()) {
         return false;
     }
+
+    // Check for hexadecimal numbers (0x prefix)
+    if (s.startsWith("0x") || s.startsWith("0X")) {
+        if (s.length() < 3) return false;
+        for (int i = 2; i < s.length(); i++) {
+            char c = s.charAt(i);
+            if (!((c >= '0' && c <= '9') ||
+                  (c >= 'a' && c <= 'f') ||
+                  (c >= 'A' && c <= 'F'))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    // Check for regular numbers (including decimal, octal, etc.)
+    try {
+        // Try parsing as double first (for decimals)
+        Double.parseDouble(s);
+        return true;
+    } catch (NumberFormatException e1) {
+        // If double parsing fails, check if it's an octal literal
+        if (s.startsWith("0") && s.length() > 1) {
+            // Check if all remaining characters are digits 0-7 (for octal)
+            boolean isOctal = true;
+            for (int i = 1; i < s.length(); i++) {
+                char c = s.charAt(i);
+                if (c < '0' || c > '7') {
+                    isOctal = false;
+                    break;
+                }
+            }
+            if (isOctal) return true;
+        }
+        return false;
     }
-    return len > 0;
 }
\ No newline at end of file
