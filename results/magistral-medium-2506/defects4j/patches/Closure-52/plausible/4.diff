diff --git a/tmp/25931882-050a-4ea3-b7de-323de949b86e_buggy.java b/tmp/15ef50ee-1458-423a-b778-96b19a33d742_fixed.java
index 4b7f469..cf1195b 100644
--- a/tmp/25931882-050a-4ea3-b7de-323de949b86e_buggy.java
+++ b/tmp/15ef50ee-1458-423a-b778-96b19a33d742_fixed.java
@@ -1,10 +1,51 @@
 static boolean isSimpleNumber(String s) {
     int len = s.length();
-    for (int index = 0; index < len; index++) {
-      char c = s.charAt(index);
-      if (c < '0' || c > '9') {
+    if (len == 0) {
         return false;
     }
+
+    int index = 0;
+    // Check for leading zero (invalid for decimal numbers, but valid for octal)
+    if (s.charAt(0) == '0') {
+        if (len > 1) {
+            char c = s.charAt(1);
+            if (c == 'x' || c == 'X') {
+                // Hexadecimal
+                return false;
+            }
+            // Could be leading zero decimal number (like 0.2)
+        }
+    }
+
+    // Check if the string represents a number with decimal point
+    boolean hasDecimal = false;
+    for (int i = 0; i < len; i++) {
+        char c = s.charAt(i);
+        if (c == '.') {
+            if (hasDecimal) {
+                return false; // More than one decimal point
+            }
+            hasDecimal = true;
+            // Check if it's a decimal point with digits on both sides
+            // If it's at the start or end without digits, it's not a valid number
+            if (i == 0 || i == len - 1) {
+                return false;
+            }
+        } else if (c < '0' || c > '9') {
+            return false;
+        }
+    }
+
+    // If it's a decimal number, it's not a simple number (digits only)
+    if (hasDecimal) {
+        return false;
+    }
+
+    // Check if it's an octal number (starts with 0 followed by digits)
+    if (len > 1 && s.charAt(0) == '0') {
+        // It's an octal number (e.g., 010) - we want to return false for this case
+        return false;
     }
-    return len > 0;
+
+    return true;
 }
\ No newline at end of file
