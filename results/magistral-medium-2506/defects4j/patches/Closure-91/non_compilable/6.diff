diff --git a/tmp/86ae9ae3-10ad-475f-8a13-16f8a2a1b570_buggy.java b/tmp/33b1c2a3-216d-4391-adb8-ee5a15dc0cd6_fixed.java
index 30d7266..5f2548b 100644
--- a/tmp/86ae9ae3-10ad-475f-8a13-16f8a2a1b570_buggy.java
+++ b/tmp/33b1c2a3-216d-4391-adb8-ee5a15dc0cd6_fixed.java
@@ -1,69 +1,91 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
 
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
 
           // object literal keys
           pType == Token.STRING ||
           pType == Token.NUMBER)) {
       return false;
     }
 
     // Don't traverse functions that are getting lent to a prototype.
+    if (parent.getType() == Token.OBJECTLIT) {
+      for (Node grandParent = parent.getParent(); grandParent != null;
+           grandParent = grandParent.getParent()) {
+        if (grandParent.getType() == Token.CALL) {
+          Node callTarget = grandParent.getFirstChild();
+          if (NodeUtil.isGet(callTarget) &&
+              callTarget.getQualifiedName().endsWith(".prototype")) {
+            return false;
+          }
+          if (grandParent.getChildCount() > callTarget.getChildCount() +
+              (grandParent.isQualifiedName() ? 0 : 1)) {
+            Node secondArg = grandParent.getFirstChild().getNext();
+            if (secondArg != null && secondArg.getType() == Token.OBJECTLIT) {
+              JSDocInfo docInfo = getJsDocInfo(grandParent.getFirstChild());
+              if (docInfo != null && docInfo.isLends()) {
+                return false;
+              }
+            }
+          }
+        }
+      }
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
\ No newline at end of file
