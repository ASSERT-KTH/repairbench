diff --git a/tmp/1fa332bf-8563-4405-9991-cb8fa87678e1_buggy.java b/tmp/d5bdb02d-2f4c-44cb-979e-daa497f9ee44_fixed.java
index 30d7266..16f3b53 100644
--- a/tmp/1fa332bf-8563-4405-9991-cb8fa87678e1_buggy.java
+++ b/tmp/d5bdb02d-2f4c-44cb-979e-daa497f9ee44_fixed.java
@@ -1,69 +1,78 @@
   /**
    * Since this pass reports errors only when a global {@code this} keyword
    * is encountered, there is no reason to traverse non global contexts.
    */
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
     if (n.getType() == Token.FUNCTION) {
       // Don't traverse functions that are constructors or have the @this
       // or @override annotation.
       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
       if (jsDoc != null &&
           (jsDoc.isConstructor() ||
            jsDoc.isInterface() ||
            jsDoc.hasThisType() ||
            jsDoc.isOverride())) {
         return false;
       }
 
       // Don't traverse functions unless they would normally
       // be able to have a @this annotation associated with them. e.g.,
       // var a = function() { }; // or
       // function a() {} // or
       // a.x = function() {}; // or
       // var a = {x: function() {}};
       int pType = parent.getType();
       if (!(pType == Token.BLOCK ||
             pType == Token.SCRIPT ||
             pType == Token.NAME ||
             pType == Token.ASSIGN ||
-
             // object literal keys
             pType == Token.STRING ||
             pType == Token.NUMBER)) {
         return false;
       }
-
-      // Don't traverse functions that are getting lent to a prototype.
     }
 
     if (parent != null && parent.getType() == Token.ASSIGN) {
       Node lhs = parent.getFirstChild();
       Node rhs = lhs.getNext();
 
       if (n == lhs) {
         // Always traverse the left side of the assignment. To handle
         // nested assignments properly (e.g., (a = this).property = c;),
         // assignLhsChild should not be overridden.
         if (assignLhsChild == null) {
           assignLhsChild = lhs;
         }
-      } else {
-        // Only traverse the right side if it's not an assignment to a prototype
-        // property or subproperty.
+      } else if (n == rhs) {
+        // Check if we're assigning to a prototype property
         if (NodeUtil.isGet(lhs)) {
-          if (lhs.getType() == Token.GETPROP &&
-              lhs.getLastChild().getString().equals("prototype")) {
+          // Handle function assignments where the LHS might involve prototype
+          if (lhs.getType() == Token.GETPROP) {
+            Node lastChild = lhs.getLastChild();
+            if (lastChild != null && lastChild.getString().equals("prototype")) {
               return false;
             }
+          }
+          // Check for nested GETPROP (like a.b.prototype)
           Node llhs = lhs.getFirstChild();
-          if (llhs.getType() == Token.GETPROP &&
-              llhs.getLastChild().getString().equals("prototype")) {
+          if (llhs.getType() == Token.GETPROP) {
+            Node lastChild = llhs.getLastChild();
+            if (lastChild != null && lastChild.getString().equals("prototype")) {
               return false;
             }
           }
         }
       }
+    }
+
+    // Check if the parent is a GETPROP where the property is "prototype"
+    if (parent != null && parent.getType() == Token.GETPROP) {
+      Node property = parent.getLastChild();
+      if (property != null && property.getString().equals("prototype")) {
+        return false;
+      }
+    }
 
     return true;
   }
\ No newline at end of file
