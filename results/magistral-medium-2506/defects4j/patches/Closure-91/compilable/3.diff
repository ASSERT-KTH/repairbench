diff --git a/tmp/5a519e02-8e8d-4fc9-8f5c-d53b9b35e671_buggy.java b/tmp/19d08f6e-4f2b-4836-aecd-2472e07ea2da_fixed.java
index 30d7266..416f1e4 100644
--- a/tmp/5a519e02-8e8d-4fc9-8f5c-d53b9b35e671_buggy.java
+++ b/tmp/19d08f6e-4f2b-4836-aecd-2472e07ea2da_fixed.java
@@ -1,69 +1,106 @@
 /**
  * Since this pass reports errors only when a global {@code this} keyword
  * is encountered, there is no reason to traverse non global contexts.
  */
 public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
-
   if (n.getType() == Token.FUNCTION) {
     // Don't traverse functions that are constructors or have the @this
     // or @override annotation.
     JSDocInfo jsDoc = getFunctionJsDocInfo(n);
     if (jsDoc != null &&
         (jsDoc.isConstructor() ||
          jsDoc.isInterface() ||
          jsDoc.hasThisType() ||
          jsDoc.isOverride())) {
       return false;
     }
 
     // Don't traverse functions unless they would normally
     // be able to have a @this annotation associated with them. e.g.,
     // var a = function() { }; // or
     // function a() {} // or
     // a.x = function() {}; // or
     // var a = {x: function() {}};
     int pType = parent.getType();
     if (!(pType == Token.BLOCK ||
           pType == Token.SCRIPT ||
           pType == Token.NAME ||
           pType == Token.ASSIGN ||
-
           // object literal keys
           pType == Token.STRING ||
-            pType == Token.NUMBER)) {
+          pType == Token.NUMBER ||
+          pType == Token.GETELEM ||
+          pType == Token.GETPROP)) {
       return false;
     }
 
     // Don't traverse functions that are getting lent to a prototype.
+    if (isPrototypeAssignment(n, parent)) {
+      return false;
+    }
   }
 
   if (parent != null && parent.getType() == Token.ASSIGN) {
     Node lhs = parent.getFirstChild();
     Node rhs = lhs.getNext();
 
     if (n == lhs) {
       // Always traverse the left side of the assignment. To handle
       // nested assignments properly (e.g., (a = this).property = c;),
       // assignLhsChild should not be overridden.
       if (assignLhsChild == null) {
         assignLhsChild = lhs;
       }
     } else {
       // Only traverse the right side if it's not an assignment to a prototype
       // property or subproperty.
       if (NodeUtil.isGet(lhs)) {
         if (lhs.getType() == Token.GETPROP &&
             lhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
         Node llhs = lhs.getFirstChild();
         if (llhs.getType() == Token.GETPROP &&
             llhs.getLastChild().getString().equals("prototype")) {
           return false;
         }
       }
     }
   }
 
   return true;
 }
+
+private boolean isPrototypeAssignment(Node n, Node parent) {
+  // Check if this function is being assigned to a prototype property
+  if (parent != null && parent.getType() == Token.ASSIGN) {
+    Node lhs = parent.getFirstChild();
+    if (NodeUtil.isGet(lhs)) {
+      Node current = lhs;
+      while (current != null && current.getType() == Token.GETPROP) {
+        if ("prototype".equals(current.getLastChild().getString())) {
+          return true;
+        }
+        current = current.getFirstChild();
+      }
+    }
+  }
+  // Also check for the case where the function is in an object literal
+  // that's being assigned to a prototype
+  if (parent != null && parent.getType() == Token.GETPROP) {
+    Node grandParent = parent.getParent();
+    if (grandParent != null && grandParent.getType() == Token.ASSIGN) {
+      Node lhs = grandParent.getFirstChild();
+      if (NodeUtil.isGet(lhs)) {
+        Node current = lhs;
+        while (current != null && current.getType() == Token.GETPROP) {
+          if ("prototype".equals(current.getLastChild().getString())) {
+            return true;
+          }
+          current = current.getFirstChild();
+        }
+      }
+    }
+  }
+  return false;
+}
\ No newline at end of file
