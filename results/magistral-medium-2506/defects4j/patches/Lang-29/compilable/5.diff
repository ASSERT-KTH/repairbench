diff --git a/tmp/9740070f-c61f-4c80-b473-eb021fe627ba_buggy.java b/tmp/a317a39b-a173-4040-89b5-bb935c29e27c_fixed.java
index 3ec995f..4f2da38 100644
--- a/tmp/9740070f-c61f-4c80-b473-eb021fe627ba_buggy.java
+++ b/tmp/a317a39b-a173-4040-89b5-bb935c29e27c_fixed.java
@@ -1,26 +1,26 @@
-    /**
-     * <p>
-     * Converts the given Java version string to an <code>int</code>.
-     * </p>
-     * 
-     * <p>
-     * Example return values:
-     * </p>
-     * <ul>
-     * <li><code>120</code> for Java 1.2</li>
-     * <li><code>131</code> for Java 1.3.1</li>
-     * <li><code>160</code> for Java 1.6.0_20</li>
-     * </ul>
-     * 
-     * <p>
-     * Patch releases are not reported.
-     * </p>
-     * <p>
-     * This method is package private instead of private to support unit test invocation.
-     * </p>
-     * 
-     * @return the version, for example 131 for Java 1.3.1
-     */
     static float toJavaVersionInt(String version) {
-        return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
+        if (version == null) {
+            return 0;
+        }
+        String[] parts = version.split("[^0-9]");
+        if (parts.length < 2) {
+            return 0;
+        }
+        try {
+            int major = Integer.parseInt(parts[0]);
+            if (major < 1) {
+                return 0;
+            }
+            int minor = 0;
+            if (parts.length >= 2) {
+                minor = Integer.parseInt(parts[1]);
+            }
+            int revision = 0;
+            if (parts.length >= 3) {
+                revision = Integer.parseInt(parts[2]);
+            }
+            return (major * 100) + (minor * 10) + revision;
+        } catch (NumberFormatException e) {
+            return 0;
+        }
     }
\ No newline at end of file
