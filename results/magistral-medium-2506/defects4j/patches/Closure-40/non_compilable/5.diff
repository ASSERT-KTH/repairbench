diff --git a/tmp/1edb839d-beb7-4fdd-9a4c-998c253df57a_buggy.java b/tmp/7146a1a5-8558-4b6b-b555-753d366e8360_fixed.java
index 670114d..5916ef7 100644
--- a/tmp/1edb839d-beb7-4fdd-9a4c-998c253df57a_buggy.java
+++ b/tmp/7146a1a5-8558-4b6b-b555-753d366e8360_fixed.java
@@ -1,48 +1,63 @@
 @Override
 public void visit(NodeTraversal t, Node n, Node parent) {
-
   // Record global variable and function declarations
   if (t.inGlobalScope()) {
     if (NodeUtil.isVarDeclaration(n)) {
       NameInformation ns = createNameInformation(t, n, parent);
       Preconditions.checkNotNull(ns);
       recordSet(ns.name, n);
     } else if (NodeUtil.isFunctionDeclaration(n)) {
       Node nameNode = n.getFirstChild();
       NameInformation ns = createNameInformation(t, nameNode, n);
       if (ns != null) {
         JsName nameInfo = getName(nameNode.getString(), true);
         recordSet(nameInfo.name, nameNode);
       }
     } else if (NodeUtil.isObjectLitKey(n, parent)) {
       NameInformation ns = createNameInformation(t, n, parent);
       if (ns != null) {
         recordSet(ns.name, n);
       }
     }
   }
 
   // Record assignments and call sites
   if (n.isAssign()) {
     Node nameNode = n.getFirstChild();
-
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null) {
       if (ns.isPrototype) {
         recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);
       } else {
         recordSet(ns.name, nameNode);
       }
     }
   } else if (n.isCall()) {
     Node nameNode = n.getFirstChild();
     NameInformation ns = createNameInformation(t, nameNode, n);
     if (ns != null && ns.onlyAffectsClassDef) {
       JsName name = getName(ns.name, false);
       if (name != null) {
         refNodes.add(new ClassDefiningFunctionNode(
             name, n, parent, parent.getParent()));
       }
     }
   }
+  // Handle case where parent is a CALL node with "goog.inherits" pattern
+  if (parent != null && parent.isCall() &&
+      nameNode != null &&
+      nameNode.getQualifiedName().equals("goog.inherits")) {
+    // Process as potential class definition
+    Node funcNode = parent.getFirstChild().getNext();
+    if (funcNode != null && funcNode.isFunction()) {
+      NameInformation ns = createNameInformation(t, funcNode, parent);
+      if (ns != null) {
+        JsName name = getName(ns.name, false);
+        if (name != null) {
+          refNodes.add(new ClassDefiningFunctionNode(
+              name, funcNode, parent, parent.getParent()));
+        }
+      }
+    }
+  }
 }
\ No newline at end of file
