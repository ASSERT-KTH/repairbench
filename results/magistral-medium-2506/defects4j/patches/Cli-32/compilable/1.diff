diff --git a/tmp/2400c345-6e07-4d79-b6cb-4aed9a980c1f_buggy.java b/tmp/411864c6-6b7a-4e3e-92c4-b6b36a165f60_fixed.java
index 14b78fb..5ba2142 100644
--- a/tmp/2400c345-6e07-4d79-b6cb-4aed9a980c1f_buggy.java
+++ b/tmp/411864c6-6b7a-4e3e-92c4-b6b36a165f60_fixed.java
@@ -1,56 +1,53 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
 
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos - startPos < width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos - startPos < width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
             return -1;
         }
 
-
         // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        pos = startPos + width - 1;
 
-        char c;
+        // Ensure pos doesn't exceed text length
+        if (pos >= text.length()) {
+            pos = text.length() - 1;
+        }
 
-        while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
-                && (c != '\n') && (c != '\r'))
+        while ((pos >= startPos) && ((charAtIntro(text, pos) != ' ')
+                && (charAtIntro(text, pos) != '\n') && (charAtIntro(text, pos) != '\r')))
         {
             --pos;
         }
 
         // if we found it - just return
         if (pos > startPos)
         {
-            return pos;
+            return pos + 1; // return position after whitespace
         }
 
         // if we didn't find one, simply chop at startPos+width
         pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
-        {
-            ++pos;
+        if (pos > text.length()) {
+            pos = text.length();
         }
-        return pos == text.length() ? -1 : pos;
+        if (pos == text.length()) {
+            return -1;
+        }
+        return pos;
+    }
+
+    // Helper method to safely get character at position
+    private char charAtIntro(String text, int pos) {
+        if (pos >= text.length()) {
+            return '\0'; // return null character if out of bounds
+        }
+        return text.charAt(pos);
     }
\ No newline at end of file
