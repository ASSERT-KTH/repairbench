diff --git a/tmp/c36a0d7f-0d8a-4812-8ef4-41d805b91ce1_buggy.java b/tmp/ce1b7d8e-8d96-4400-9a2e-475bc40c4808_fixed.java
index 14b78fb..9ffb31a 100644
--- a/tmp/c36a0d7f-0d8a-4812-8ef4-41d805b91ce1_buggy.java
+++ b/tmp/ce1b7d8e-8d96-4400-9a2e-475bc40c4808_fixed.java
@@ -1,56 +1,40 @@
-    /**
-     * Finds the next text wrap position after <code>startPos</code> for the
-     * text in <code>text</code> with the column width <code>width</code>.
-     * The wrap point is the last position before startPos+width having a 
-     * whitespace character (space, \n, \r). If there is no whitespace character
-     * before startPos+width, it will return startPos+width.
-     *
-     * @param text The text being searched for the wrap position
-     * @param width width of the wrapped text
-     * @param startPos position from which to start the lookup whitespace
-     * character
-     * @return postion on which the text must be wrapped or -1 if the wrap
-     * position is at the end of the text
-     */
     protected int findWrapPos(String text, int width, int startPos)
     {
         int pos;
 
         // the line ends before the max wrap pos or a new line char found
-        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
-                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))
+        if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= startPos + width)
+                || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= startPos + width))
         {
             return pos + 1;
         }
         else if (startPos + width >= text.length())
         {
             return -1;
         }
 
-
         // look for the last whitespace character before startPos+width
-        pos = startPos + width;
+        pos = startPos + width - 1; // Changed from startPos + width to startPos + width - 1
 
         char c;
 
         while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
                 && (c != '\n') && (c != '\r'))
         {
             --pos;
         }
 
         // if we found it - just return
         if (pos > startPos)
         {
-            return pos;
+            return pos + 1; // Changed from pos to pos + 1 to include the space character
         }
 
         // if we didn't find one, simply chop at startPos+width
         pos = startPos + width;
-        while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
-               && (c != '\n') && (c != '\r'))
+        if (pos > text.length())
         {
-            ++pos;
+            pos = text.length();
         }
         return pos == text.length() ? -1 : pos;
     }
\ No newline at end of file
