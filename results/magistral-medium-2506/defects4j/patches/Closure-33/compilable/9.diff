diff --git a/tmp/d6b143a9-22c7-4ff5-a23a-77b2454c8a9e_buggy.java b/tmp/c73e8dc6-a21e-4634-acd3-a9a104e432a3_fixed.java
index fb2b020..8b38a76 100644
--- a/tmp/d6b143a9-22c7-4ff5-a23a-77b2454c8a9e_buggy.java
+++ b/tmp/c73e8dc6-a21e-4634-acd3-a9a104e432a3_fixed.java
@@ -1,27 +1,30 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+          // Don't infer undefined for properties that aren't present
+          typeToInfer = propType.restrictByNotNullOrUndefined();
+          if (typeToInfer == null) {
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE);
+          }
         }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
