diff --git a/tmp/be4ae0ab-128e-4165-9268-2bde80ed8ede_buggy.java b/tmp/65fbb70c-ce7d-49a2-81b3-5900fbc7b055_fixed.java
index fb2b020..0d21272 100644
--- a/tmp/be4ae0ab-128e-4165-9268-2bde80ed8ede_buggy.java
+++ b/tmp/65fbb70c-ce7d-49a2-81b3-5900fbc7b055_fixed.java
@@ -1,27 +1,41 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
   // We only want to match contraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
+          // Handle union types by taking the least supertype of all possibilities
+          if (propType.isUnionType()) {
+            UnionType union = (UnionType) propType;
+            JSType result = null;
+            for (JSType alternative : union.getAlternates()) {
+              if (result == null) {
+                result = alternative;
+              } else {
+                result = result.getLeastSupertype(alternative);
+              }
+            }
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(result);
+          } else {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
+        }
         defineInferredProperty(prop, typeToInfer, null);
       }
     }
   }
 }
\ No newline at end of file
