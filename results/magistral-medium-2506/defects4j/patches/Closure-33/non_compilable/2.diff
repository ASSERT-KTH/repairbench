diff --git a/tmp/c34dbbe6-462b-46ee-be1e-aa9a8e5c2620_buggy.java b/tmp/9c750078-9ff6-4b97-8b38-6817c6ac6200_fixed.java
index fb2b020..cc354eb 100644
--- a/tmp/c34dbbe6-462b-46ee-be1e-aa9a8e5c2620_buggy.java
+++ b/tmp/9c750078-9ff6-4b97-8b38-6817c6ac6200_fixed.java
@@ -1,27 +1,36 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
     // We only want to match contraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
     // function f(constraintObj) {}
     // f({});
     //
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
+        } else {
+          // Also consider updating existing property types if they're more general
+          JSType existingType = getPropertyType(prop);
+          if (existingType != null) {
+            JSType newType = existingType.restrictByNotExcluding(propType);
+            if (!newType.equals(existingType)) {
+              defineInferredProperty(prop, newType, null);
+            }
+          }
         }
       }
     }
   }
\ No newline at end of file
