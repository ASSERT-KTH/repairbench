diff --git a/tmp/9c4bb79d-04d4-4fd5-9358-c3ae4e88cf18_buggy.java b/tmp/3820076e-b67a-4cd4-b42a-cdf12be39737_fixed.java
index fb2b020..3e49d3e 100644
--- a/tmp/9c4bb79d-04d4-4fd5-9358-c3ae4e88cf18_buggy.java
+++ b/tmp/3820076e-b67a-4cd4-b42a-cdf12be39737_fixed.java
@@ -1,27 +1,34 @@
 @Override
 public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+  // We only want to match constraints on anonymous types.
 
   // Handle the case where the constraint object is a record type.
   //
   // param constraintObj {{prop: (number|undefined)}}
   // function f(constraintObj) {}
   // f({});
   //
   // We want to modify the object literal to match the constraint, by
   // taking any each property on the record and trying to match
   // properties on this object.
   if (constraintObj.isRecordType()) {
     for (String prop : constraintObj.getOwnPropertyNames()) {
       JSType propType = constraintObj.getPropertyType(prop);
       if (!isPropertyTypeDeclared(prop)) {
         JSType typeToInfer = propType;
         if (!hasProperty(prop)) {
           typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
               .getLeastSupertype(propType);
         }
         defineInferredProperty(prop, typeToInfer, null);
+      } else {
+        // If the property already exists, update its type to match the constraint
+        JSType currentType = getTypeOfProperty(prop);
+        if (currentType != null) {
+          JSType newType = currentType.getLeastSupertype(propType);
+          setPropertyType(prop, newType);
+        }
       }
     }
   }
 }
\ No newline at end of file
