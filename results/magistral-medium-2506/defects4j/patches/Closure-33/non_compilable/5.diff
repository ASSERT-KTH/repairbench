diff --git a/tmp/71a61648-9916-44b0-9d2c-4bea6234e86f_buggy.java b/tmp/bd662e48-d072-4ebf-ac78-adeb293048a4_fixed.java
index fb2b020..70b8383 100644
--- a/tmp/71a61648-9916-44b0-9d2c-4bea6234e86f_buggy.java
+++ b/tmp/bd662e48-d072-4ebf-ac78-adeb293048a4_fixed.java
@@ -1,27 +1,27 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+    // We only want to match constraints on anonymous types.
 
     // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
     if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
+
+    // Handle the case where constraintObj is not a record type
+    if (isAnonymous() && constraintObj.isFunctionType()) {
+      FunctionType constraintFunction = constraintObj.toMaybeFunctionType();
+      if (constraintFunction != null && !getImplicitPrototype().isEquivalentTo(constraintFunction.getImplicitPrototype())) {
+        setImplicitPrototype(constraintFunction.getImplicitPrototype());
+      }
+    }
   }
\ No newline at end of file
