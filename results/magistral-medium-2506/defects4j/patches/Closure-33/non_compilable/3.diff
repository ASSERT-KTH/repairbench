diff --git a/tmp/ef66cac8-3b66-4bb9-baf8-1eaf0626e7e1_buggy.java b/tmp/95394e8d-9e22-4d98-b5e4-2ab56d8cb4bc_fixed.java
index fb2b020..510f2ae 100644
--- a/tmp/ef66cac8-3b66-4bb9-baf8-1eaf0626e7e1_buggy.java
+++ b/tmp/95394e8d-9e22-4d98-b5e4-2ab56d8cb4bc_fixed.java
@@ -1,27 +1,26 @@
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
+    // We only want to match constraints on anonymous types.
+    if (constraintObj.isAnonymous()) {
       // Handle the case where the constraint object is a record type.
       //
       // param constraintObj {{prop: (number|undefined)}}
       // function f(constraintObj) {}
       // f({});
       //
       // We want to modify the object literal to match the constraint, by
       // taking any each property on the record and trying to match
       // properties on this object.
-    if (constraintObj.isRecordType()) {
       for (String prop : constraintObj.getOwnPropertyNames()) {
         JSType propType = constraintObj.getPropertyType(prop);
         if (!isPropertyTypeDeclared(prop)) {
           JSType typeToInfer = propType;
           if (!hasProperty(prop)) {
             typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
                 .getLeastSupertype(propType);
           }
           defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
\ No newline at end of file
