diff --git a/tmp/89ac4a3a-d94f-4b7e-a940-7594bf784fa6_buggy.java b/tmp/bd204822-524c-495c-a0d3-6f1d6372f366_fixed.java
index 233a867..cb664b9 100644
--- a/tmp/89ac4a3a-d94f-4b7e-a940-7594bf784fa6_buggy.java
+++ b/tmp/bd204822-524c-495c-a0d3-6f1d6372f366_fixed.java
@@ -1,73 +1,101 @@
-  /**
-   * Determines whether a function can be inlined at a particular call site.
-   * There are several criteria that the function and reference must hold in
-   * order for the functions to be inlined:
-   * 1) If a call's arguments have side effects,
-   * the corresponding argument in the function must only be referenced once.
-   * For instance, this will not be inlined:
-   * <pre>
-   *     function foo(a) { return a + a }
-   *     x = foo(i++);
-   * </pre>
-   */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+
+          // Also check if the parameter is modified in the function body
+          if (NodeUtil.mayEffectMutableState(cArg, compiler)
+              && isParameterModifiedInBody(fnParam, block)) {
+            return CanInlineResult.NO;
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
+
+  // Helper method to check if a parameter is modified in the function body
+  private boolean isParameterModifiedInBody(Node param, Node block) {
+    String paramName = param.getString();
+    // Walk through the function body to see if the parameter is modified
+    Node current = block.getFirstChild();
+    while (current != null) {
+      if (current.isAssign()) {
+        Node lhs = current.getFirstChild();
+        if (lhs.isName() && lhs.getString().equals(paramName)) {
+          return true;
+        }
+        // Check for property assignments like param.prop = value
+        if (lhs.isGetProp()) {
+          Node target = lhs.getFirstChild();
+          if (target.isName() && target.getString().equals(paramName)) {
+            return true;
+          }
+        }
+        // Check for array assignments like param[index] = value
+        if (lhs.isGetElem()) {
+          Node target = lhs.getFirstChild();
+          if (target.isName() && target.getString().equals(paramName)) {
+            return true;
+          }
+        }
+      }
+      // Check for increment/decrement operators
+      if (current.isInc() || current.isDec()) {
+        Node operand = current.getFirstChild();
+        if (operand.isName() && operand.getString().equals(paramName)) {
+          return true;
+        }
+      }
+      current = current.getNext();
+    }
+    return false;
+  }
\ No newline at end of file
