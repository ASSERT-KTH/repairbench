diff --git a/tmp/9094e727-ca07-4138-8f82-ed1a2246bd97_buggy.java b/tmp/3a0ac08b-1218-4ce6-b5cc-07b3ea41d0dd_fixed.java
index 233a867..5f512f0 100644
--- a/tmp/9094e727-ca07-4138-8f82-ed1a2246bd97_buggy.java
+++ b/tmp/3a0ac08b-1218-4ce6-b5cc-07b3ea41d0dd_fixed.java
@@ -1,73 +1,110 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
-          return CanInlineResult.NO;
+          return CanIn`lineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
+          // Additional check: if the parameter is reassigned in the function body,
+          // we cannot inline if the argument has potential side effects
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+            // Search in the function body if the parameter is being modified
+            boolean isParamModified = false;
+            Node traversal = block.getFirstChild();
+            while (traversal != null) {
+              if (traversal.isAssign() && traversal.getFirstChild().matchesQualifiedName(fnParam.getString())) {
+                isParamModified = true;
+                break;
+              }
+              if (NodeUtil.isModificationOperator(traversal)
+                  && traversal.getLastChild().matchesQualifiedName(fnParam.getString())) {
+                isParamModified = true;
+                break;
+              }
+              traversal = NodeUtil.getNextStatementBody(traversal);
+            }
+            if (isParamModified) {
+              return CanInlineResult.NO;
+            }
+          }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Additional check: look for object mutation in the function body
+          // that might affect this argument
+          if (NodeUtil.isGetOrModifySet(cArg)) {
+            // The parameter is not modified in the function body,
+            // so it might be ok to inline (handled by same-argument case)
+          } else if (NodeUtil.mayEffectMutableState(cArg, compiler)) {
+            // Since this argument might have side effects, we check if
+            // it's used a single time or not in the function
+            String paramName = "";
+            if (fnParam != null) {
+              paramName = fnParam.getString();
+            }
+            int useCount = NodeUtil.getNameReferenceCount(block, paramName);
+            if (useCount > 1) {
               return CanInlineResult.NO;
             }
+          } else {
+            // normal side effects
+            return CanInlineResult.NO;
+          }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
