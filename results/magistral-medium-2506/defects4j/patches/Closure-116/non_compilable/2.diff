diff --git a/tmp/df2168c7-b164-476c-aa39-e277aec2177a_buggy.java b/tmp/62071ea2-e716-4e5f-9a7a-866562ae02c1_fixed.java
index 233a867..09f3a6c 100644
--- a/tmp/df2168c7-b164-476c-aa39-e277aec2177a_buggy.java
+++ b/tmp/62071ea2-e716-4e5f-9a7a-866562ae02c1_fixed.java
@@ -1,73 +1,149 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
+    // Check if the function body modifies any mutable state that could affect arguments
+    if (NodeUtil.mayEffectMutableState(block, compiler)) {
+      return CanInlineResult.NO;
+    }
+
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Check if the function body modifies any parameters
+          if (mayModifyParameter(block, fnNode)) {
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
+
+  private boolean mayModifyParameter(Node block, Node fnNode) {
+    // Check if the function body contains any assignments or operations
+    // that might modify parameters
+    for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {
+      if (child.isAssign()) {
+        // Check if the left-hand side of the assignment is a parameter
+        if (isParameterReference(child.getFirstChild(), fnNode)) {
+          return true;
+        }
+      } else if (child.isExprResult()) {
+        // For expression results, check the underlying expression
+        Node expr = child.getFirstChild();
+        if (expr.isAssign()) {
+          if (isParameterReference(expr.getFirstChild(), fnNode)) {
+            return true;
+          }
+        } else if (expr.isCall()) {
+          // Check if any part of the call modifies parameters
+          if (mayModifyParametersInCall(expr, fnNode)) {
+            return true;
+          }
+        } else if (expr.isIncDec()) {
+          // Increment/decrement operations might modify parameters
+          if (isParameterReference(expr.getFirstChild(), fnNode)) {
+            return true;
+          }
+        }
+      }
+    }
+    return false;
+  }
+
+  private boolean isParameterReference(Node node, Node fnNode) {
+    if (node.isName() || node.isGetProp() || node.isGetElem()) {
+      // Get the parameter names from the function
+      Node paramList = NodeUtil.getFunctionParameters(fnNode);
+      for (Node param = paramList.getFirstChild();
+           param != null;
+           param = param.getNext()) {
+        String paramName = param.getString();
+        // Check if the node (or its base in case of GetProp/GetElem) refers to the parameter
+        if (node.isName() && node.getString().equals(paramName)) {
+          return true;
+        } else if ((node.isGetProp() || node.isGetElem()) &&
+                  node.getFirstChild().getString().equals(paramName)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  private boolean mayModifyParametersInCall(Node callNode, Node fnNode) {
+    // Check if the call might modify any of the parameters
+    // (e.g., by passing them to functions that modify them)
+    for (Node arg = callNode.getFirstChild().getNext();
+         arg != null;
+         arg = arg.getNext()) {
+      if (isParameterReference(arg, fnNode)) {
+        // If an argument is a parameter reference and the function we're calling
+        // might modify its arguments, then we should not inline
+        if (callNode.getFirstChild().isName()) {
+          String calledFunctionName = callNode.getFirstChild().getString();
+          // In a real implementation, you would check if this function modifies its arguments
+          // For now, we'll assume any function call might modify its arguments
+          return true;
+        }
+      }
+    }
+    return false;
+  }
\ No newline at end of file
