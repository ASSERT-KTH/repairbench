diff --git a/tmp/6eaf6d1f-10e5-427b-b12b-25d7f4475a45_buggy.java b/tmp/3e8b59c8-534a-411c-8566-78673ac8afd4_fixed.java
index 233a867..e2939d9 100644
--- a/tmp/6eaf6d1f-10e5-427b-b12b-25d7f4475a45_buggy.java
+++ b/tmp/3e8b59c8-534a-411c-8566-78673ac8afd4_fixed.java
@@ -1,73 +1,114 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
-
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
+    // First check if the function modifies any parameter that has side effects
+    for (Node param : NodeUtil.getFunctionParameters(fnNode).children()) {
+      String paramName = param.getString();
+      if (NodeUtil.isNameReferencesModified(block, paramName)) {
+        // If the parameter is modified in the function body, we need to check
+        // all arguments for side effects
+        Node arg = callNode.getFirstChild().getNext();
+        // Skip the 'this' parameter if present
+        if (!callNode.getFirstChild().isName() &&
+            NodeUtil.isFunctionObjectCall(callNode)) {
+          arg = arg.getNext();
+        }
+        // Check corresponding argument for side effects
+        for (Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+             fnParam != null && arg != null;
+             fnParam = fnParam.getNext(), arg = arg.getNext()) {
+          if (fnParam.getString().equals(paramName) &&
+              NodeUtil.mayHaveSideEffects(arg, compiler)) {
+            return CanInlineResult.NO;
+          }
+        }
+      }
+    }
+
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
           if (NodeUtil.mayEffectMutableState(cArg, compiler)
               && NodeUtil.getNameReferenceCount(
                   block, fnParam.getString()) > 1) {
             return CanInlineResult.NO;
           }
         }
 
+        // Check if the parameter is modified in the function body
+        if (NodeUtil.isNameReferencesModified(block, fnParam.getString())) {
+          if (cArg != null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+            return CanInlineResult.NO;
+          }
+        }
+
         // Move to the next name.
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          // Check if the parameter is modified in the function body
+          boolean paramModified = false;
+          Node currentParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
+          while (currentParam != null) {
+            if (currentParam.getString().equals(cArg.getString())) {
+              paramModified = NodeUtil.isNameReferencesModified(block, currentParam.getString());
+              break;
+            }
+            currentParam = currentParam.getNext();
+          }
+          if (!paramModified) {
+            // Only fail if the parameter isn't modified in the function body
+            // since the behavior might change
             return CanInlineResult.NO;
           }
+        }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
\ No newline at end of file
