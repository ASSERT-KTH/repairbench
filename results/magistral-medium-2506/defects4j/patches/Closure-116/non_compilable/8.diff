diff --git a/tmp/5b9c6bf4-f1a9-4171-ba02-da299e7ba662_buggy.java b/tmp/0b23cf80-7b96-492c-9cb4-460ed85732fc_fixed.java
index 233a867..a8ddd13 100644
--- a/tmp/5b9c6bf4-f1a9-4171-ba02-da299e7ba662_buggy.java
+++ b/tmp/0b23cf80-7b96-492c-9cb4-460ed85732fc_fixed.java
@@ -1,73 +1,110 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
 
-
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-
         // Check for arguments that are evaluated more than once.
         // Note: Unlike block inlining, there it is not possible that a
         // parameter reference will be in a loop.
         if (NodeUtil.mayEffectMutableState(cArg, compiler)
             && NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
           return CanInlineResult.NO;
         }
+        // Also check if the argument has side effects and the parameter is modified or used in assignments
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)
+            && NodeUtil.hasSideEffectingDescendants(
+                block, fnParam.getString(), compiler)) {
+          return CanInlineResult.NO;
+        }
       }
 
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
     // For every call argument check for side-effects, even if there
     // isn't a named parameter to match.
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+        // Check if the argument is used in any way that might cause it to be evaluated multiple times
+        // or interact with side effects in the function body
+        if (fnParam != null) {
+          String paramName = fnParam.getString();
+          if (NodeUtil.getNameReferenceCount(block, paramName) > 1) {
             return CanInlineResult.NO;
           }
+          if (NodeUtil.hasAssignmentTo(block, paramName)) {
+            return CanInlineResult.NO;
+          }
+        }
+      }
+      cArg = cArg.getNext();
+    }
+  }
+
+  // Additional check for functions that might modify properties of arguments
+  for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {
+    if (NodeUtil.mayModifyVariables(child, compiler)) {
+      // If the function modifies variables (other than its own locals), we need to ensure no
+      // argument has side effects, as modification might affect argument evaluation
+      cArg = callNode.getFirstChild().getNext();
+      if (!callNode.getFirstChild().isName()) {
+        if (NodeUtil.isFunctionObjectCall(callNode)) {
           cArg = cArg.getNext();
+        } else {
+          Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
+        }
+      }
+
+      while (cArg != null) {
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+          return CanInlineResult.NO;
+        }
+        cArg = cArg.getNext();
+      }
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
