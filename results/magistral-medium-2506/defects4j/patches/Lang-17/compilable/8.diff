diff --git a/tmp/6e92f5e3-e94c-4064-9401-d3a5c9f7528f_buggy.java b/tmp/866703ce-7b07-408e-a17d-dc2a74502a1f_fixed.java
index b86c1ea..5818976 100644
--- a/tmp/6e92f5e3-e94c-4064-9401-d3a5c9f7528f_buggy.java
+++ b/tmp/866703ce-7b07-408e-a17d-dc2a74502a1f_fixed.java
@@ -1,38 +1,33 @@
     /**
      * Translate an input onto a Writer. This is intentionally final as its algorithm is
      * tightly coupled with the abstract method of this class.
      *
      * @param input CharSequence that is being translated
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
     public final void translate(CharSequence input, Writer out) throws IOException {
         if (out == null) {
             throw new IllegalArgumentException("The Writer must not be null");
         }
         if (input == null) {
             return;
         }
         int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
+        int len = input.length();
         while (pos < len) {
+            final int codePoint = Character.codePointAt(input, pos);
             int consumed = translate(input, pos, out);
             if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+                char[] c = Character.toChars(codePoint);
                 out.write(c);
             }
             else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
+                // contract with translators is that they have to understand codepoints
+                // and they just took care of a surrogate pair
+                pos += consumed;
+                continue;
             }
-                }
-                pos--;
-            }
-            pos++;
+            pos += Character.charCount(codePoint);
         }
     }
\ No newline at end of file
