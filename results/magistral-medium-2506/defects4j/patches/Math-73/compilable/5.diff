diff --git a/tmp/589f6880-dfd5-4ec9-8da6-ccb588a2f6cb_buggy.java b/tmp/6c0aec12-ba00-4ea6-bb54-63b6432814d4_fixed.java
index 757067a..28823c7 100644
--- a/tmp/589f6880-dfd5-4ec9-8da6-ccb588a2f6cb_buggy.java
+++ b/tmp/6c0aec12-ba00-4ea6-bb54-63b6432814d4_fixed.java
@@ -1,63 +1,65 @@
-    /**
-     * Find a zero in the given interval with an initial guess.
-     * <p>Throws <code>IllegalArgumentException</code> if the values of the
-     * function at the three points have the same sign (note that it is
-     * allowed to have endpoints with the same sign if the initial point has
-     * opposite sign function-wise).</p>
-     *
-     * @param f function to solve.
-     * @param min the lower bound for the interval.
-     * @param max the upper bound for the interval.
-     * @param initial the start value to use (must be set to min if no
-     * initial point is known).
-     * @return the value where the function is zero
-     * @throws MaxIterationsExceededException the maximum iteration count
-     * is exceeded
-     * @throws FunctionEvaluationException if an error occurs evaluating
-     *  the function
-     * @throws IllegalArgumentException if initial is not between min and max
-     * (even if it <em>is</em> a root)
-     */
     public double solve(final UnivariateRealFunction f,
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
         verifySequence(min, initial, max);
 
+        // Check if min and max bracket a root
+        double yMin = f.value(min);
+        double yMax = f.value(max);
+        if (yMin * yMax > 0) {
+            throw new IllegalArgumentException("Function values at endpoints do not have opposite signs");
+        }
+
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
         }
 
         // return the first endpoint if it is good enough
-        double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
-        double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // Check if any of the endpoints or initial guess is a root
+        if (yMin == 0.0) {
+            setResult(min, 0);
+            return result;
+        }
+        if (yMax == 0.0) {
+            setResult(max, 0);
+            return result;
+        }
+        if (yInitial == 0.0) {
+            setResult(initial, 0);
+            return result;
+        }
+
+        // Check if the endpoints and initial guess all have the same sign
+        if (yMin * yMax > 0 && yMin * yInitial > 0 && yInitial * yMax > 0) {
+            throw new IllegalArgumentException("Function values at endpoints and initial guess have the same sign");
+        }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);
-
     }
\ No newline at end of file
