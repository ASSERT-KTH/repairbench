diff --git a/tmp/cb7d6f91-f730-4492-ba1b-98891d5a3323_buggy.java b/tmp/391a0e04-393f-4b9b-afc4-0864d3770f6b_fixed.java
index fe73b81..a54d886 100644
--- a/tmp/cb7d6f91-f730-4492-ba1b-98891d5a3323_buggy.java
+++ b/tmp/391a0e04-393f-4b9b-afc4-0864d3770f6b_fixed.java
@@ -1,42 +1,53 @@
 protected JavaType _fromVariable(TypeVariable<?> type, TypeBindings context)
 {
     final String name = type.getName();
     // 19-Mar-2015: Without context, all we can check are bounds.
     if (context == null) {
         // And to prevent infinite loops, now need this:
-            return _unknownType();
+        JavaType boundType = _typeFromBounds(type.getBounds());
+        return (boundType != null) ? boundType : _unknownType();
     } else {
         // Ok: here's where context might come in handy!
         /* 19-Mar-2015, tatu: As per [databind#609], may need to allow
          *   unresolved type variables to handle some cases where bounds
          *   are enough. Let's hope it does not hide real fail cases.
          */
         JavaType actualType = context.findType(name);
         if (actualType != null) {
             return actualType;
         }
     }
 
     /* 29-Jan-2010, tatu: We used to throw exception here, if type was
      *   bound: but the problem is that this can occur for generic "base"
      *   method, overridden by sub-class. If so, we will want to ignore
      *   current type (for method) since it will be masked.
      */
     Type[] bounds = type.getBounds();
 
+    // Handle case where there are no bounds (should default to Object)
+    if (bounds == null || bounds.length == 0) {
+        return _constructType(Object.class, context);
+    }
+
     // With type variables we must use bound information.
     // Theoretically this gets tricky, as there may be multiple
     // bounds ("... extends A & B"); and optimally we might
     // want to choose the best match. Also, bounds are optional;
     // but here we are lucky in that implicit "Object" is
     // added as bounds if so.
-        // Either way let's just use the first bound, for now, and
-        // worry about better match later on if there is need.
 
     /* 29-Jan-2010, tatu: One more problem are recursive types
      *   (T extends Comparable<T>). Need to add "placeholder"
      *   for resolution to catch those.
      */
     context._addPlaceholder(name);
     return _constructType(bounds[0], context);
 }
+
+private JavaType _typeFromBounds(Type[] bounds) {
+    if (bounds == null || bounds.length == 0) {
+        return _constructType(Object.class, null);
+    }
+    return _constructType(bounds[0], null);
+}
\ No newline at end of file
