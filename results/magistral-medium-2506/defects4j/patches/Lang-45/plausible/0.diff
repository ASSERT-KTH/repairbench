diff --git a/tmp/891b65c1-2d4b-497a-80e6-a5f119ab8441_buggy.java b/tmp/24d0c7e0-3715-4437-81d3-71533d26260c_fixed.java
index 1b36a4f..d0e5037 100644
--- a/tmp/891b65c1-2d4b-497a-80e6-a5f119ab8441_buggy.java
+++ b/tmp/24d0c7e0-3715-4437-81d3-71533d26260c_fixed.java
@@ -1,58 +1,41 @@
-    /**
-     * Abbreviates a string nicely.
-     * 
-     * This method searches for the first space after the lower limit and abbreviates
-     * the String there. It will also append any String passed as a parameter
-     * to the end of the String. The upper limit can be specified to forcibly
-     * abbreviate a String.
-     * 
-     * @param str         the string to be abbreviated. If null is passed, null is returned.
-     *                    If the empty String is passed, the empty string is returned.
-     * @param lower       the lower limit.
-     * @param upper       the upper limit; specify -1 if no limit is desired.
-     *                    If the upper limit is lower than the lower limit, it will be
-     *                    adjusted to be the same as the lower limit.
-     * @param appendToEnd String to be appended to the end of the abbreviated string.
-     *                    This is appended ONLY if the string was indeed abbreviated.
-     *                    The append does not count towards the lower or upper limits.
-     * @return the abbreviated String.
-     * @since 2.4
-     */
     public static String abbreviate(String str, int lower, int upper, String appendToEnd) {
         // initial parameter checks
         if (str == null) {
             return null;
         }
         if (str.length() == 0) {
             return StringUtils.EMPTY;
         }
 
         // if the lower value is greater than the length of the string,
         // set to the length of the string
         // if the upper value is -1 (i.e. no limit) or is greater
         // than the length of the string, set to the length of the string
-        if (upper == -1 || upper > str.length()) {
-            upper = str.length();
+        int adjustedLower = lower;
+        if (adjustedLower > str.length()) {
+            adjustedLower = str.length();
+        }
+        int adjustedUpper = upper;
+        if (adjustedUpper == -1 || adjustedUpper > str.length()) {
+            adjustedUpper = str.length();
         }
         // if upper is less than lower, raise it to lower
-        if (upper < lower) {
-            upper = lower;
+        if (adjustedUpper < adjustedLower) {
+            adjustedUpper = adjustedLower;
         }
 
         StringBuffer result = new StringBuffer();
-        int index = StringUtils.indexOf(str, " ", lower);
-        if (index == -1) {
-            result.append(str.substring(0, upper));
-            // only if abbreviation has occured do we append the appendToEnd value
-            if (upper != str.length()) {
+        int index = StringUtils.indexOf(str, " ", adjustedLower);
+        if (index == -1 || index > adjustedUpper) {
+            int endIndex = Math.min(adjustedUpper, str.length());
+            result.append(str.substring(0, endIndex));
+            // only if abbreviation has occurred do we append the appendToEnd value
+            if (endIndex != str.length()) {
                 result.append(StringUtils.defaultString(appendToEnd));
             }
-        } else if (index > upper) {
-            result.append(str.substring(0, upper));
-            result.append(StringUtils.defaultString(appendToEnd));
         } else {
             result.append(str.substring(0, index));
             result.append(StringUtils.defaultString(appendToEnd));
         }
         return result.toString();
     }
\ No newline at end of file
