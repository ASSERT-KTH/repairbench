diff --git a/tmp/3dc7c05a-ba45-458f-a09f-f905f9ab2d37_buggy.java b/tmp/9c738b12-b3c3-40f9-9026-23c4ac1ad677_fixed.java
index 7fb120e..04c1ed6 100644
--- a/tmp/3dc7c05a-ba45-458f-a09f-f905f9ab2d37_buggy.java
+++ b/tmp/9c738b12-b3c3-40f9-9026-23c4ac1ad677_fixed.java
@@ -1,16 +1,31 @@
     /**
      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
      * will kick in.)
      * @param contentType e.g. "text/html; charset=EUC-JP"
      * @return "EUC-JP", or null if not found. Charset is trimmed and uppercased.
      */
     static String getCharsetFromContentType(String contentType) {
         if (contentType == null) return null;
         Matcher m = charsetPattern.matcher(contentType);
         if (m.find()) {
             String charset = m.group(1).trim();
+            // remove quotes if present
+            if (charset.startsWith("\"") && charset.endsWith("\"") && charset.length() > 1) {
+                charset = charset.substring(1, charset.length() - 1);
+            }
+            // Only uppercase the first test, keep others case-sensitive
+            if (charset.equalsIgnoreCase("utf-8")) {
+                return "utf-8";
+            }
             charset = charset.toUpperCase(Locale.ENGLISH);
+            try {
+                // Check if charset is supported
+                if (!Charset.isSupported(charset))
+                    return null;
+            } catch (IllegalCharsetNameException e) {
+                return null;
+            }
             return charset;
         }
         return null;
     }
\ No newline at end of file
