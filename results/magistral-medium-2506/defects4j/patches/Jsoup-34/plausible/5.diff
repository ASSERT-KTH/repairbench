diff --git a/tmp/2b865b48-cc1c-40bd-8b61-ca903e873579_buggy.java b/tmp/3ef7395a-8d59-458d-bc9e-baa874fa10d8_fixed.java
index 21f64c6..fbdbf44 100644
--- a/tmp/2b865b48-cc1c-40bd-8b61-ca903e873579_buggy.java
+++ b/tmp/3ef7395a-8d59-458d-bc9e-baa874fa10d8_fixed.java
@@ -1,23 +1,30 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
+    if (seq.length() == 0)
+        return -1;
+
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
+        if (offset >= length)
+            break;
+
         int i = offset + 1;
         int last = i + seq.length() - 1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        if (last > length) // check if sequence would go past input length
+            continue;
+
+        boolean match = true;
+        for (int j = 1; j < seq.length(); j++) {
+            if (i + j - 1 >= length || seq.charAt(j) != input[i + j - 1]) {
+                match = false;
+                break;
+            }
+        }
+        if (match && (i + seq.length() - 2) < length) // corrected bound check for full sequence
             return offset - pos;
     }
-        }
     return -1;
 }
\ No newline at end of file
