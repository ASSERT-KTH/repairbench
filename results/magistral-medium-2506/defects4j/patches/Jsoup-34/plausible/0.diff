diff --git a/tmp/35f1de5f-1dbe-4932-b103-d2ffeda72ddd_buggy.java b/tmp/2b11e18d-e617-415d-b13a-c7ca1071bf59_fixed.java
index 21f64c6..803efe4 100644
--- a/tmp/35f1de5f-1dbe-4932-b103-d2ffeda72ddd_buggy.java
+++ b/tmp/2b11e18d-e617-415d-b13a-c7ca1071bf59_fixed.java
@@ -1,23 +1,31 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
         char startChar = seq.charAt(0);
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
             if (startChar != input[offset])
-                while(++offset < length && startChar != input[offset]);
+                while(++offset < length && startChar != input[offset]) {
+                    // prevent scanning beyond input length
+                    if (offset >= length - 1) {
+                        break;
+                    }
+                }
+            if (offset >= length) {
+                break;
+            }
             int i = offset + 1;
             int last = i + seq.length()-1;
+            if (last > length) { // prevent checking beyond input bounds
+                continue;
+            }
             if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+                int j = 1;
+                // loop through the sequence
+                for (; i < last && j < seq.length() && seq.charAt(j) == input[i]; i++, j++);
+                if (i == last) { // found full sequence
                     return offset - pos;
                 }
             }
+        }
         return -1;
     }
\ No newline at end of file
