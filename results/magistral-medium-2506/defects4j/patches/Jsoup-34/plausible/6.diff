diff --git a/tmp/7d6c6467-1b81-4e18-9efb-5450325098e4_buggy.java b/tmp/0da660fc-3cd3-4225-b736-6dbdeeef6ec6_fixed.java
index 21f64c6..2c11ce7 100644
--- a/tmp/7d6c6467-1b81-4e18-9efb-5450325098e4_buggy.java
+++ b/tmp/0da660fc-3cd3-4225-b736-6dbdeeef6ec6_fixed.java
@@ -1,23 +1,28 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
     // doesn't handle scanning for surrogates
+    int seqLength = seq.length();
+    if (seqLength == 0) return 0; // empty sequence is always found
+
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
         if (startChar != input[offset])
             while(++offset < length && startChar != input[offset]);
+
+        // don't walk off input
+        if (offset >= length) return -1;
+
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
+        int last = i + seqLength - 1;
+        if (last <= length) { // ensure we don't go past input bounds
+            int j = 1;
+            while (i < last && j < seqLength && seq.charAt(j) == input[i]) {
+                i++;
+                j++;
+            }
             if (i == last) // found full sequence
                 return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
