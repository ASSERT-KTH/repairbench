diff --git a/tmp/ace1b468-995c-480d-8a7c-8fabae1062f9_buggy.java b/tmp/194f71cc-97b1-457d-ad29-5d612f1ef462_fixed.java
index 21f64c6..4f81ef6 100644
--- a/tmp/ace1b468-995c-480d-8a7c-8fabae1062f9_buggy.java
+++ b/tmp/194f71cc-97b1-457d-ad29-5d612f1ef462_fixed.java
@@ -1,23 +1,28 @@
-    /**
-     * Returns the number of characters between the current position and the next instance of the input sequence
-     *
-     * @param seq scan target
-     * @return offset between current position and next instance of target. -1 if not found.
-     */
 int nextIndexOf(CharSequence seq) {
+    if (seq.length() == 0) return 0; // handle empty sequence case
     // doesn't handle scanning for surrogates
     char startChar = seq.charAt(0);
     for (int offset = pos; offset < length; offset++) {
         // scan to first instance of startchar:
-            if (startChar != input[offset])
+        if (startChar != input[offset]) {
             while (++offset < length && startChar != input[offset]);
+            if (offset >= length) break; // prevent out of bounds access
+        }
         int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+        int last = offset + seq.length();
+        if (last > length) continue; // skip if can't fit full sequence here
+
+        // check if the rest of the sequence matches
+        boolean match = true;
+        for (int j = 1; j < seq.length(); j++) {
+            if (i + j - 1 >= length || seq.charAt(j) != input[offset + j]) {
+                match = false;
+                break;
+            }
+        }
+        if (match) {
             return offset - pos;
         }
     }
     return -1;
 }
\ No newline at end of file
