diff --git a/tmp/caffa906-1c0e-4f67-a12d-12abdceca409_buggy.java b/tmp/b7718fb8-3562-4b65-bb6c-705bc8c61e71_fixed.java
index 21f64c6..ab315da 100644
--- a/tmp/caffa906-1c0e-4f67-a12d-12abdceca409_buggy.java
+++ b/tmp/b7718fb8-3562-4b65-bb6c-705bc8c61e71_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Returns the number of characters between the current position and the next instance of the input sequence
      *
      * @param seq scan target
      * @return offset between current position and next instance of target. -1 if not found.
      */
     int nextIndexOf(CharSequence seq) {
         // doesn't handle scanning for surrogates
+        if (seq.length() == 0) return 0; // handle empty sequence case
         char startChar = seq.charAt(0);
+        int seqLength = seq.length();
         for (int offset = pos; offset < length; offset++) {
             // scan to first instance of startchar:
-            if (startChar != input[offset])
+            if (startChar != input[offset]) {
                 while(++offset < length && startChar != input[offset]);
+                if (offset >= length) break; // reached end of buffer without finding startChar
+            }
             int i = offset + 1;
-            int last = i + seq.length()-1;
-            if (offset < length) {
-                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);
-                if (i == last) // found full sequence
+            int end = offset + seqLength;
+            if (end > length) {
+                continue; // not enough remaining characters for a match
+            }
+            boolean match = true;
+            for (int j = 1; j < seqLength; j++) {
+                if (i + j - 1 >= length || seq.charAt(j) != input[offset + j]) {
+                    match = false;
+                    break;
+                }
+            }
+            if (match) {
                 return offset - pos;
             }
         }
         return -1;
     }
\ No newline at end of file
