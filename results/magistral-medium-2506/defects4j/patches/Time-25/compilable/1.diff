diff --git a/tmp/2ea8e0aa-6826-48cd-9ec0-4ecf591ae6da_buggy.java b/tmp/bb4565c7-f294-4e58-b130-438960af8322_fixed.java
index 05aaf2d..859bea9 100644
--- a/tmp/2ea8e0aa-6826-48cd-9ec0-4ecf591ae6da_buggy.java
+++ b/tmp/bb4565c7-f294-4e58-b130-438960af8322_fixed.java
@@ -1,56 +1,40 @@
-    /**
-     * Gets the millisecond offset to subtract from local time to get UTC time.
-     * This offset can be used to undo adding the offset obtained by getOffset.
-     *
-     * <pre>
-     * millisLocal == millisUTC   + getOffset(millisUTC)
-     * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
-     * </pre>
-     *
-     * NOTE: After calculating millisLocal, some error may be introduced. At
-     * offset transitions (due to DST or other historical changes), ranges of
-     * local times may map to different UTC times.
-     * <p>
-     * This method will return an offset suitable for calculating an instant
-     * after any DST gap. For example, consider a zone with a cutover
-     * from 01:00 to 01:59:<br />
-     * Input: 00:00  Output: 00:00<br />
-     * Input: 00:30  Output: 00:30<br />
-     * Input: 01:00  Output: 02:00<br />
-     * Input: 01:30  Output: 02:30<br />
-     * Input: 02:00  Output: 02:00<br />
-     * Input: 02:30  Output: 02:30<br />
-     * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
-     *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
-     * @return the millisecond offset to subtract from local time to get UTC time
-     */
 public int getOffsetFromLocal(long instantLocal) {
     // get the offset at instantLocal (first estimate)
     final int offsetLocal = getOffset(instantLocal);
     // adjust instantLocal using the estimate and recalc the offset
     final long instantAdjusted = instantLocal - offsetLocal;
     final int offsetAdjusted = getOffset(instantAdjusted);
     // if the offsets differ, we must be near a DST boundary
     if (offsetLocal != offsetAdjusted) {
         // we need to ensure that time is always after the DST gap
         // this happens naturally for positive offsets, but not for negative
-            if ((offsetLocal - offsetAdjusted) < 0) {
-                // if we just return offsetAdjusted then the time is pushed
-                // back before the transition, whereas it should be
-                // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
-                if (nextLocal != nextAdjusted) {
-                    return offsetLocal;
+        long instant = instantLocal - offsetLocal;
+        long bestAdjusted = instantAdjusted;
+        int bestOffset = offsetAdjusted;
+
+        // try both possible offsets to see which one is correct
+        int offset1 = offsetLocal;
+        int offset2 = offsetAdjusted;
+        long instantAdjusted1 = instantLocal - offset1;
+        long instantAdjusted2 = instantLocal - offset2;
+
+        // find which adjusted instant is in a valid local time range
+        // (i.e., not in the gap)
+        if (offset1 > offset2) {
+            // going into DST: the gap is at the start of the DST period
+            // we want the later offset (summer time)
+            if (getOffset(instantAdjusted1) == offset1) {
+                return offset1;
             }
+            return offset2;
+        } else {
+            // going out of DST: the gap is at the end of the DST period
+            // we want the earlier offset (summer time)
+            if (getOffset(instantAdjusted2) == offset2) {
+                return offset2;
+            }
+            return offset1;
         }
     }
     return offsetAdjusted;
 }
\ No newline at end of file
