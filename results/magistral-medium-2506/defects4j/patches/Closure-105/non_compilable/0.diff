diff --git a/tmp/8e127dc0-3d30-4cdf-9a3a-7b7d5089b688_buggy.java b/tmp/551333fc-7df5-49a9-8d99-9d3d553f8874_fixed.java
index ef65dd9..25893f9 100644
--- a/tmp/8e127dc0-3d30-4cdf-9a3a-7b7d5089b688_buggy.java
+++ b/tmp/551333fc-7df5-49a9-8d99-9d3d553f8874_fixed.java
@@ -1,92 +1,103 @@
   /**
    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';
    */
   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,
                          Node parent) {
     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
       return;
     }
 
     Node arrayNode = left.getFirstChild();
     Node functionName = arrayNode.getNext();
 
     if ((arrayNode.getType() != Token.ARRAYLIT) ||
         !functionName.getString().equals("join")) {
       return;
     }
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
+
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
         if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
         if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
           sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
       }
       elem = elem.getNext();
     }
 
     if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
     }
-    // one for each comma.
-    foldedSize += arrayFoldedChildren.size() - 1;
 
+    // Calculate the size before making modifications
     int originalSize = InlineCostEstimator.getCost(n);
+    int newSize = foldedSize;
+
+    // Add the cost of the join operation and right node
+    if (arrayFoldedChildren.size() > 1) {
+      // Account for the join operation overhead and separator size
+      newSize += "[].join()".length() + InlineCostEstimator.getCost(right);
+    }
+
+    // Only proceed if folding would be a size improvement
+    if (newSize > originalSize && arrayFoldedChildren.size() > 1) {
+      return;
+    }
+
     switch (arrayFoldedChildren.size()) {
       case 0:
         Node emptyStringNode = Node.newString("");
         parent.replaceChild(n, emptyStringNode);
         break;
 
       case 1:
         Node foldedStringNode = arrayFoldedChildren.remove(0);
-        if (foldedSize > originalSize) {
-          return;
-        }
         arrayNode.detachChildren();
         if (foldedStringNode.getType() != Token.STRING) {
           // If the Node is not a string literal, ensure that
           // it is coerced to a string.
           Node replacement = new Node(Token.ADD,
               Node.newString(""), foldedStringNode);
           foldedStringNode = replacement;
         }
         parent.replaceChild(n, foldedStringNode);
         break;
 
       default:
-        // No folding could actually be performed.
+        // No folding could actually be performed if all children are preserved
         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
           return;
         }
-        int kJoinOverhead = "[].join()".length();
-        foldedSize += kJoinOverhead;
-        foldedSize += InlineCostEstimator.getCost(right);
-        if (foldedSize > originalSize) {
-          return;
-        }
+        // Handle multiple elements case
         arrayNode.detachChildren();
         for (Node node : arrayFoldedChildren) {
           arrayNode.addChildToBack(node);
         }
+        // If we have multiple elements, we need to create a new join operation
+        // with the simplified array and original separator
+        Node newJoin = new Node(Token.GETPROP, arrayNode.cloneTree(),
+            new Node(Token.STRING, "join"));
+        Node joinCall = new Node(Token.CALL, newJoin, right.cloneTree());
+        parent.replaceChild(n, joinCall);
         break;
     }
     t.getCompiler().reportCodeChange();
   }
\ No newline at end of file
