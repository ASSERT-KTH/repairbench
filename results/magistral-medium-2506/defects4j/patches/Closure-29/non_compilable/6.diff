diff --git a/tmp/f4891e67-cf63-4d26-851a-7bf80dfd39ff_buggy.java b/tmp/77aee078-0beb-4212-ac92-48e34c789cb4_fixed.java
index be9c8a3..ff456ab 100644
--- a/tmp/f4891e67-cf63-4d26-851a-7bf80dfd39ff_buggy.java
+++ b/tmp/77aee078-0beb-4212-ac92-48e34c789cb4_fixed.java
@@ -1,94 +1,113 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
+      Set<Node> assignedValues = new HashSet<>();
+      Set<String> propertyNames = new HashSet<>();
+
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
+          // Collect property names being accessed
+          String propName = parent.getLastChild().getString();
+          propertyNames.add(propName);
+
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
           return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
-        // disallow things like x = {b: x.a}.
-        //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
-        // Also, ES5 getters/setters aren't handled by this pass.
+        // Store the assigned object literal
+        assignedValues.add(val);
+
+        // Collect all property names from the object literal
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
           if (child.isGetterDef() ||
               child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
+          String propName = child.getString();
+          propertyNames.add(propName);
+        }
+      }
 
+      // Now check for any references to properties that weren't in the original object
+      // and weren't added through subsequent assignments
+      for (Reference ref : refs) {
+        Node parent = ref.getParent();
+        if (parent.isGetProp()) {
+          String propName = parent.getLastChild().getString();
+          if (!propertyNames.contains(propName)) {
+            // Property wasn't in the original object or any subsequent assignment
+            return false;
+          }
+        }
+      }
 
+      // Check for self-referential assignments across the entire list of object literals
+      for (Node val : assignedValues) {
+        if (val.isObjectLit()) {
+          for (Node child = val.getFirstChild(); child != null;
+               child = child.getNext()) {
             Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
+            // Check if childVal is the parent of any of the passed in references
             for (Reference t : refs) {
               Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
+              while (refNode != null && !NodeUtil.isStatementBlock(refNode)) {
                 if (refNode == childVal) {
                   // There's a self-referential assignment
                   return false;
                 }
                 refNode = refNode.getParent();
               }
             }
           }
-
-
-        // We have found an acceptable object literal assignment. As
-        // long as there are no other assignments that mess things up,
-        // we can inline.
-        ret = true;
         }
-      return ret;
+      }
+
+      // We have found acceptable object literal assignments.
+      return !assignedValues.isEmpty();
     }
\ No newline at end of file
