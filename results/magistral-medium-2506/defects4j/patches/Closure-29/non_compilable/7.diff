diff --git a/tmp/0f86096f-446e-4650-bcc5-4d2c318bac6f_buggy.java b/tmp/3ac46e08-1957-462a-b613-f597a5768245_fixed.java
index be9c8a3..fcee72f 100644
--- a/tmp/0f86096f-446e-4650-bcc5-4d2c318bac6f_buggy.java
+++ b/tmp/3ac46e08-1957-462a-b613-f597a5768245_fixed.java
@@ -1,94 +1,142 @@
     /**
      * Counts the number of direct (full) references to an object.
      * Specifically we check for references of the following type:
      * <pre>
      *   x;
      *   x.fn();
      * </pre>
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
         // Ignore indirect references, like x.y (except x.y(), since
         // the function referenced by y might reference 'this').
         //
         if (parent.isGetProp()) {
           Preconditions.checkState(parent.getFirstChild() == name);
           // A call target maybe using the object as a 'this' value.
           if (gramps.isCall()
               && gramps.getFirstChild() == parent) {
             return false;
           }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
           // object, then the value is undefined. This is not true, because
           // Object.prototype can have arbitrary properties on it.
           //
           // We short-circuit this problem by bailing out if we see a reference
           // to a property that isn't defined on the object literal. This
           // isn't a perfect algorithm, but it should catch most cases.
+          // However, we need to allow for cases where properties are added later.
+          //
+          // So we'll only bail out if the property access is on the RHS of an assignment
+          // or in a call position, not when it's being assigned to.
+
+          boolean foundPropInAssignmentOrCall = false;
+          Node current = gramps;
+          while (current != null && current.getParent() != null) {
+            if (current.isExprResult()) {
+              current = current.getParent();
+              if (current != null && current.isAssign()) {
+                if (current.getSecondChild() == gramps) {
+                  // Property is on RHS of assignment
+                  foundPropInAssignmentOrCall = true;
+                  break;
+                }
+              } else if (current != null && current.isCall()) {
+                // Property is in call position
+                foundPropInAssignmentOrCall = true;
+                break;
+              }
+            }
+            current = current.getParent();
+          }
+
+          if (foundPropInAssignmentOrCall) {
+            return false;
+          }
+
           continue;
         }
 
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;
         }
 
         Node val = ref.getAssignedValue();
         if (val == null) {
           // A var with no assignment.
           continue;
         }
 
         // We're looking for object literal assignments only.
         if (!val.isObjectLit()) {
           return false;
         }
 
-        // Make sure that the value is not self-refential. IOW,
+        // Make sure that the value is not self-referential. IOW,
         // disallow things like x = {b: x.a}.
         //
-        // TODO: Only exclude unorderable self-referential
-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,
-        // but x = {a: 1, b: x.a} is.
-        //
         // Also, ES5 getters/setters aren't handled by this pass.
+        boolean hasGetterOrSetter = false;
         for (Node child = val.getFirstChild(); child != null;
              child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
+          if (child.isGetterDef() || child.isSetterDef()) {
             // ES5 get/set not supported.
+            hasGetterOrSetter = true;
+            break;
+          }
+        }
+
+        if (hasGetterOrSetter) {
           return false;
         }
 
-
+        // Check for self-referential assignments
+        boolean hasSelfReference = false;
+        outer: for (Node child = val.getFirstChild(); child != null;
+                child = child.getNext()) {
           Node childVal = child.getFirstChild();
-          // Check if childVal is the parent of any of the passed in
-          // references, as that is how self-referential assignments
-          // will happen.
+          if (childVal == null) continue;
+
+          // Walk up the tree from the childValue to see if it references any of the refs
+          List<Node> nodesToCheck = new ArrayList<>();
+          nodesToCheck.add(childVal);
+
+          while (!nodesToCheck.isEmpty()) {
+            Node currentNode = nodesToCheck.remove(0);
+            // Check if currentNode is or contains any name from refs
             for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
-                // There's a self-referential assignment
+              Node refNode = t.getNode();
+              if (currentNode == refNode) {
+                hasSelfReference = true;
+                break outer;
+              }
+            }
+
+            // Add children to check list
+            for (Node c = currentNode.getFirstChild();
+                 c != null;
+                 c = c.getNext()) {
+              nodesToCheck.add(c);
+            }
+          }
+        }
+
+        if (hasSelfReference) {
           return false;
         }
-              refNode = refNode.getParent();
-            }
-          }
-        }
-
 
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.
         ret = true;
       }
       return ret;
     }
\ No newline at end of file
