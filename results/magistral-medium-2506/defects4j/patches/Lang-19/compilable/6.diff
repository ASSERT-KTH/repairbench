diff --git a/tmp/cd05cca5-226a-484a-8b09-3a1eb25432a2_buggy.java b/tmp/d741c7f1-29c7-4d1c-87d5-0b274dc90d6b_fixed.java
index 72a422c..9c7b1ef 100644
--- a/tmp/cd05cca5-226a-484a-8b09-3a1eb25432a2_buggy.java
+++ b/tmp/d741c7f1-29c7-4d1c-87d5-0b274dc90d6b_fixed.java
@@ -1,51 +1,72 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if(index + 1 >= seqEnd) {
+            return 0; // Not enough characters to be a valid entity
+        }
+        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start >= seqEnd) {
+                return 0; // No characters after &#
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if(start >= seqEnd) {
+                    return 0; // No characters after &#x
+                }
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while(end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we didn't find a ; and we're at the end, use the end position as is
+            if(end >= seqEnd) {
+                end = seqEnd;
+            }
+
+            if(end <= start) {
+                return 0; // No digits to parse
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // The length includes &#, the optional x/X, the number, and the optional ;
+            int consumedLength = 2 + (isHex ? 1 : 0) + (end - start);
+            // Include the semicolon if it was present
+            if(end < seqEnd && input.charAt(end) == ';') {
+                consumedLength += 1;
+            }
+            return consumedLength;
         }
         return 0;
     }
\ No newline at end of file
