diff --git a/tmp/abb92166-52e0-48b8-b844-746d9cb7267c_buggy.java b/tmp/7ed4bcdb-48c2-4dc4-a3e6-aa4b907ca12a_fixed.java
index 72a422c..7ce7eb3 100644
--- a/tmp/abb92166-52e0-48b8-b844-746d9cb7267c_buggy.java
+++ b/tmp/7ed4bcdb-48c2-4dc4-a3e6-aa4b907ca12a_fixed.java
@@ -1,51 +1,59 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
                 }
 
                 int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+                // Check if there's a semicolon in the remaining string
+                boolean foundSemicolon = false;
+                while(end < seqEnd) {
+                    if(input.charAt(end) == ';') {
+                        foundSemicolon = true;
+                        break;
+                    }
                     end++;
                 }
 
-            int entityValue;
+                // If no semicolon found, don't process (returns 0 at end)
+                if(!foundSemicolon) {
+                    return 0;
+                }
+
                 try {
+                    int entityValue;
                     if(isHex) {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                     } else {
                         entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                     }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                     if(entityValue > 0xFFFF) {
                         char[] chrs = Character.toChars(entityValue);
                         out.write(chrs[0]);
                         out.write(chrs[1]);
                     } else {
                         out.write(entityValue);
                     }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                    return (end + 1) - index; // include the semicolon in the count
+                } catch(NumberFormatException nfe) {
+                    System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                    return 0;
+                }
+            }
         }
         return 0;
     }
\ No newline at end of file
