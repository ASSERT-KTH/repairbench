diff --git a/tmp/9f16a443-1425-4bb6-852c-f5bfac16858a_buggy.java b/tmp/7dd0564d-78ea-4e6d-ab6f-b9af3767a708_fixed.java
index 72a422c..5aefb71 100644
--- a/tmp/9f16a443-1425-4bb6-852c-f5bfac16858a_buggy.java
+++ b/tmp/7dd0564d-78ea-4e6d-ab6f-b9af3767a708_fixed.java
@@ -1,51 +1,77 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check if we have enough characters
+        if (start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
-
-                // Check there's more than just an x after the &#
+            // Check if we have enough characters after the x/X
+            if (start >= seqEnd) {
+                return 0;
+            }
         }
 
         int end = start;
         // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        boolean hasSemicolon = false;
+        while(end < seqEnd && input.charAt(end) != ';') {
             end++;
         }
 
-            int entityValue;
+        // If we found a semicolon, include it in the end position
+        if (end < seqEnd && input.charAt(end) == ';') {
+            hasSemicolon = true;
+        } else {
+            // If we didn't find a semicolon, end is already at seqEnd, but we might not have found a valid number
+            end = seqEnd;
+        }
+
+        // If we didn't move past the start, then we don't have a valid entity
+        if (end == start) {
+            return 0;
+        }
+
         try {
+            String numberStr = input.subSequence(start, end).toString();
+            int entityValue;
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(numberStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                entityValue = Integer.parseInt(numberStr, 10);
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            // Calculate how many characters we processed:
+            // 2 for &#
+            // (end - start) for the number characters
+            // 1 if it was hex (for 'x' or 'X')
+            // 1 if there was a semicolon
+            int length = 2 + (end - start) + (isHex ? 1 : 0) + (hasSemicolon ? 1 : 0);
+            return length;
+        } catch(NumberFormatException nfe) {
+            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            return 0;
+        }
     }
     return 0;
 }
\ No newline at end of file
