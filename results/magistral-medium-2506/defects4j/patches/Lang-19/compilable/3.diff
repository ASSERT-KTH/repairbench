diff --git a/tmp/6eb65313-7dd8-437e-984b-ba98ac8922cf_buggy.java b/tmp/6dd282d8-2f1e-47fb-ac9a-1da52fee7e6d_fixed.java
index 72a422c..a16f0a3 100644
--- a/tmp/6eb65313-7dd8-437e-984b-ba98ac8922cf_buggy.java
+++ b/tmp/6dd282d8-2f1e-47fb-ac9a-1da52fee7e6d_fixed.java
@@ -1,51 +1,71 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
+        // Check bounds before accessing characters
+        if(index >= seqEnd - 1) {
+            return 0;
+        }
+
+        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start < seqEnd) {
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
-
-                // Check there's more than just an x after the &#
                 }
 
                 int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+                // Find the end of the entity (either ';' or end of input)
+                while(end < seqEnd && input.charAt(end) != ';') {
                     end++;
                 }
 
-            int entityValue;
+                // If we didn't find a semicolon, use current end position (might be incomplete)
+                if(end >= seqEnd) {
+                    // Check if we have at least one character after start
+                    if(start >= seqEnd) {
+                        return 0; // incomplete entity
+                    }
+                    // Try to parse whatever we have
+                } else {
+                    // Include the semicolon in the length calculation
+                    end++;
+                }
+
+                // Ensure we don't exceed bounds when creating the substring
+                if(start < seqEnd && end <= seqEnd) {
+                    String numStr = input.subSequence(start, end).toString();
                     try {
+                        if (numStr.isEmpty()) {
+                            return 0; // invalid entity
+                        }
+                        int entityValue;
                         if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                            entityValue = Integer.parseInt(numStr, 16);
                         } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
+                            entityValue = Integer.parseInt(numStr, 10);
                         }
 
                         if(entityValue > 0xFFFF) {
                             char[] chrs = Character.toChars(entityValue);
                             out.write(chrs[0]);
                             out.write(chrs[1]);
                         } else {
                             out.write(entityValue);
                         }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                        return end - index;
+                    } catch(NumberFormatException nfe) {
+                        // Return 0 to skip this match if parsing fails
+                        return 0;
+                    }
+                }
+            }
         }
         return 0;
     }
\ No newline at end of file
