diff --git a/tmp/8835088f-8b8b-4662-ae0f-844ae5a3126b_buggy.java b/tmp/11f98664-7702-4293-8d7b-7613c0ff82fa_fixed.java
index 72a422c..cdaf3be 100644
--- a/tmp/8835088f-8b8b-4662-ae0f-844ae5a3126b_buggy.java
+++ b/tmp/11f98664-7702-4293-8d7b-7613c0ff82fa_fixed.java
@@ -1,51 +1,75 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            // Check if we have enough characters to parse
+            if (start >= seqEnd) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
+            }
 
-                // Check there's more than just an x after the &#
+            // Check if we have enough characters to parse
+            if (start >= seqEnd) {
+                return 0;
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            boolean foundSemicolon = false;
+            while (end < seqEnd && !foundSemicolon) {
+                if (input.charAt(end) == ';') {
+                    foundSemicolon = true;
+                } else {
                     end++;
                 }
+            }
+
+            // If we didn't find a semicolon, treat the end of input as end
+            if (!foundSemicolon && end == seqEnd) {
+                end--; // Don't include the char that we didn't check (since end++ was last op)
+            }
+
+            // If we didn't find a valid entity (i.e., no semicolon and no more chars), return 0
+            if (start >= end) {
+                return 0;
+            }
 
             int entityValue;
             try {
+                String numStr = input.subSequence(start, end).toString();
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(numStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                    entityValue = Integer.parseInt(numStr, 10);
                 }
             } catch(NumberFormatException nfe) {
                 System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
+            } catch (StringIndexOutOfBoundsException e) {
+                return 0;
             }
 
             if(entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
                 out.write(chrs[0]);
                 out.write(chrs[1]);
             } else {
                 out.write(entityValue);
             }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            return 2 + (end - start) + (isHex ? 1 : 0) + (foundSemicolon ? 1 : 0);
         }
         return 0;
     }
\ No newline at end of file
