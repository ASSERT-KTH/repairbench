diff --git a/tmp/8c09022a-e257-45b0-b9d2-259d55a3fb75_buggy.java b/tmp/5005d693-5db0-47da-bd89-f0be55e645c5_fixed.java
index 72a422c..e6d0c7c 100644
--- a/tmp/8c09022a-e257-45b0-b9d2-259d55a3fb75_buggy.java
+++ b/tmp/5005d693-5db0-47da-bd89-f0be55e645c5_fixed.java
@@ -1,51 +1,72 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         int seqEnd = input.length();
         // Uses -2 to ensure there is something after the &#
         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start >= seqEnd) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
             }
 
             int end = start;
             // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+            while(end < seqEnd && input.charAt(end) != ';') {
                 end++;
             }
 
+            // If we didn't find a semicolon, we'll use the end of the string
+            if(end >= seqEnd) {
+                end = seqEnd;
+            }
+
+            try {
+                if(isHex) {
+                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                } else {
+                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                }
+            } catch(NumberFormatException nfe) {
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                return 0;
+            } catch (IndexOutOfBoundsException e) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
-                return 0;
-            }
 
                 if(entityValue > 0xFFFF) {
                     char[] chrs = Character.toChars(entityValue);
                     out.write(chrs[0]);
                     out.write(chrs[1]);
                 } else {
                     out.write(entityValue);
                 }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                // Return the length of the entity we consumed (including ; if present)
+                // The original return was incorrect, let's fix it
+                int consumedLength = (end + (end < seqEnd && input.charAt(end) == ';' ? 1 : 0)) - index;
+                return consumedLength;
+            } catch(NumberFormatException nfe) {
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
