diff --git a/tmp/0f508582-ddf8-45b0-b95c-dca146759fa1_buggy.java b/tmp/d863604c-c339-4351-baad-f4c231c72cce_fixed.java
index 72a422c..19a4f0a 100644
--- a/tmp/0f508582-ddf8-45b0-b95c-dca146759fa1_buggy.java
+++ b/tmp/d863604c-c339-4351-baad-f4c231c72cce_fixed.java
@@ -1,51 +1,74 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     int seqEnd = input.length();
     // Uses -2 to ensure there is something after the &#
     if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if(start >= seqEnd) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
+        }
 
-                // Check there's more than just an x after the &#
+        // If we're already at the end after processing potential 'x'/X
+        if(start >= seqEnd) {
+            return 0;
         }
 
         int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';')
-            {
+        boolean hasSemicolon = false;
+        // Look for semicolon but don't go beyond input length
+        while(end < seqEnd) {
+            if(input.charAt(end) == ';') {
+                hasSemicolon = true;
                 end++;
+                break;
+            }
+            end++;
+        }
+
+        // If we didn't find a semicolon before end of input, we'll try to parse anyway
+        if(!hasSemicolon) {
+            // But only if we have at least one character to parse
+            if(end == start) {
+                return 0;
+            }
         }
 
-            int entityValue;
         try {
+            String numStr = input.subSequence(start, hasSemicolon ? end-1 : end).toString();
+            if(numStr.isEmpty()) {
+                return 0;
+            }
+
             if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(numStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(numStr, 10);
             }
         } catch(NumberFormatException nfe) {
             System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
             return 0;
         }
 
         if(entityValue > 0xFFFF) {
             char[] chrs = Character.toChars(entityValue);
             out.write(chrs[0]);
             out.write(chrs[1]);
         } else {
             out.write(entityValue);
         }
 
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        return 2 + (end - start) + (isHex ? 1 : 0) + (hasSemicolon ? 1 : 0);
     }
     return 0;
 }
\ No newline at end of file
