diff --git a/tmp/d4e44bf8-0827-4637-a31e-364fa1a1267a_buggy.java b/tmp/c1784685-0a86-4316-85a0-2ef89cf66f26_fixed.java
index 1bbc082..cfa1178 100644
--- a/tmp/d4e44bf8-0827-4637-a31e-364fa1a1267a_buggy.java
+++ b/tmp/c1784685-0a86-4316-85a0-2ef89cf66f26_fixed.java
@@ -1,36 +1,48 @@
     /**
      * Write an long integer into a buffer as an octal string if this
      * will fit, or as a binary number otherwise.
      *
      * Uses {@link #formatUnsignedOctalString} to format
      * the value as an octal string with leading zeros.
      * The converted number is followed by a space.
      *
      * @param value The value to write into the buffer.
      * @param buf The destination buffer.
      * @param offset The starting offset into the buffer.
      * @param length The length of the buffer.
      * @return The updated offset.
      * @throws IllegalArgumentException if the value (and trailer)
      * will not fit in the buffer.
      * @since 1.4
      */
     public static int formatLongOctalOrBinaryBytes(
         final long value, final byte[] buf, final int offset, final int length) {
 
         // Check whether we are dealing with UID/GID or SIZE field
         final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
 
         final boolean negative = value < 0;
         if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
             return formatLongOctalBytes(value, buf, offset, length);
         }
 
         if (length < 9) {
-            formatLongBinary(value, buf, offset, length, negative);
+            throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
         }
+
+        final int result;
+        if (length == 8) { // UID/GID fields (8 bytes) are always stored as octal
+            if (negative) {
+                throw new IllegalArgumentException("Value " + value + " is negative and cannot be stored in octal in an 8 byte field.");
+            }
+            if (value > maxAsOctalChar) {
+                throw new IllegalArgumentException("Value " + value + " is too large for " + length + " byte field.");
+            }
+            result = formatLongOctalBytes(value, buf, offset, length);
+        } else {
             formatBigIntegerBinary(value, buf, offset, length, negative);
-
             buf[offset] = (byte) (negative ? 0xff : 0x80);
-        return offset + length;
+            result = offset + length;
+        }
+        return result;
     }
\ No newline at end of file
