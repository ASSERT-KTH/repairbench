diff --git a/tmp/92f777b1-00b1-4051-b963-a2e0f3c75f08_buggy.java b/tmp/03d4b66b-e4f6-43bc-b61d-97c3f1ce7583_fixed.java
index 8da6fb2..0245745 100644
--- a/tmp/92f777b1-00b1-4051-b963-a2e0f3c75f08_buggy.java
+++ b/tmp/03d4b66b-e4f6-43bc-b61d-97c3f1ce7583_fixed.java
@@ -1,163 +1,207 @@
 /**
  * Parse a date from ISO-8601 formatted string. It expects a format
  * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]
  *
  * @param date ISO string to parse in the appropriate format.
  * @param pos The position to start parsing from, updated to where parsing stopped.
  * @return the parsed date
  * @throws ParseException if the date is not in the appropriate format
  */
 public static Date parse(String date, ParsePosition pos) throws ParseException {
     Exception fail = null;
     try {
         int offset = pos.getIndex();
 
         // extract year
         int year = parseInt(date, offset, offset += 4);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract month
         int month = parseInt(date, offset, offset += 2);
         if (checkOffset(date, offset, '-')) {
             offset += 1;
         }
 
         // extract day
         int day = parseInt(date, offset, offset += 2);
         // default time value
         int hour = 0;
         int minutes = 0;
         int seconds = 0;
         int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time
 
         // if the value has no time component (and no time zone), we are done
         boolean hasT = checkOffset(date, offset, 'T');
 
         if (!hasT && (date.length() <= offset)) {
             Calendar calendar = new GregorianCalendar(year, month - 1, day);
 
             pos.setIndex(offset);
             return calendar.getTime();
         }
 
         if (hasT) {
-
             // extract hours, minutes, seconds and milliseconds
             hour = parseInt(date, offset += 1, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
 
             minutes = parseInt(date, offset, offset += 2);
             if (checkOffset(date, offset, ':')) {
                 offset += 1;
             }
             // second and milliseconds can be optional
             if (date.length() > offset) {
                 char c = date.charAt(offset);
                 if (c != 'Z' && c != '+' && c != '-') {
                     seconds = parseInt(date, offset, offset += 2);
                     if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
                     // milliseconds can be optional in the format
                     if (checkOffset(date, offset, '.')) {
                         offset += 1;
                         int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit
                         int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits
                         int fraction = parseInt(date, offset, parseEndOffset);
                         // compensate for "missing" digits
                         switch (parseEndOffset - offset) { // number of digits parsed
                         case 2:
                             milliseconds = fraction * 10;
                             break;
                         case 1:
                             milliseconds = fraction * 100;
                             break;
                         default:
                             milliseconds = fraction;
                         }
                         offset = endOffset;
                     }
                 }
             }
         }
 
         // extract timezone
         if (date.length() <= offset) {
             throw new IllegalArgumentException("No time zone indicator");
         }
 
         TimeZone timezone = null;
         char timezoneIndicator = date.charAt(offset);
 
         if (timezoneIndicator == 'Z') {
             timezone = TIMEZONE_UTC;
             offset += 1;
         } else if (timezoneIndicator == '+' || timezoneIndicator == '-') {
-                String timezoneOffset = date.substring(offset);
+            offset += 1; // move past the '+'
+            int tzOffsetLength = 2; // minimum length (hh)
+            if (offset + 2 <= date.length() && date.charAt(offset + 2) == ':') {
+                tzOffsetLength = 5; // hh:mm format
+            } else if (offset + 1 <= date.length() && date.charAt(offset + 1) == ':') {
+                tzOffsetLength = 5; // h:mm format (unlikely but possible)
+            } else if (offset + 2 <= date.length() &&
+                      Character.isDigit(date.charAt(offset)) &&
+                      Character.isDigit(date.charAt(offset + 1))) {
+                // Check for additional digits after the first two
+                if (offset + 2 < date.length()) {
+                    char c = date.charAt(offset + 2);
+                    if (Character.isDigit(c) && offset + 3 < date.length()) {
+                        char c2 = date.charAt(offset + 3);
+                        if (c2 == ':') {
+                            tzOffsetLength = 5; // hhmm format (but this seems incorrect)
+                        } else {
+                            // Just hh with optional minutes (hhmm)
+                            tzOffsetLength = 4; // hhmm format
+                        }
+                    } else if (c == ':') {
+                        tzOffsetLength = 5; // hh:mm format
+                    }
+                }
+            }
 
-                // When timezone has no minutes, we should append it, valid timezones are, for example: +00:00, +0000 and +00
+            // If we couldn't determine length properly, default to 5 (hh:mm)
+            if (offset + tzOffsetLength > date.length()) {
+                tzOffsetLength = Math.min(5, date.length() - offset);
+            }
 
-                offset += timezoneOffset.length();
+            String timezoneOffset = date.substring(offset - 1, offset + tzOffsetLength - 1);
+
+            offset += tzOffsetLength - 1; // -1 because we already moved past '+' or '-'
             // 18-Jun-2015, tatu: Minor simplification, skip offset of "+0000"/"+00:00"
             if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {
                 timezone = TIMEZONE_UTC;
             } else {
                 // 18-Jun-2015, tatu: Looks like offsets only work from GMT, not UTC...
                 //    not sure why, but that's the way it looks. Further, Javadocs for
                 //    `java.util.TimeZone` specifically instruct use of GMT as base for
                 //    custom timezones... odd.
-                    String timezoneId = "GMT" + timezoneOffset;
+                String timezoneId = "GMT" + normalizeTimezoneOffset(timezoneOffset);
                 //String timezoneId = "UTC" + timezoneOffset;
 
                 timezone = TimeZone.getTimeZone(timezoneId);
 
                 String act = timezone.getID();
                 if (!act.equals(timezoneId)) {
                     /* 22-Jan-2015, tatu: Looks like canonical version has colons, but we may be given
                      *    one without. If so, don't sweat.
                      *   Yes, very inefficient. Hopefully not hit often.
                      *   If it becomes a perf problem, add 'loose' comparison instead.
                      */
                     String cleaned = act.replace(":", "");
-                        if (!cleaned.equals(timezoneId)) {
+                    String expectedCleaned = timezoneId.replace(":", "");
+                    if (!cleaned.equals(expectedCleaned)) {
                         throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "
                                 +timezone.getID());
                     }
                 }
             }
         } else {
             throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator+"'");
         }
 
         Calendar calendar = new GregorianCalendar(timezone);
         calendar.setLenient(false);
         calendar.set(Calendar.YEAR, year);
         calendar.set(Calendar.MONTH, month - 1);
         calendar.set(Calendar.DAY_OF_MONTH, day);
         calendar.set(Calendar.HOUR_OF_DAY, hour);
         calendar.set(Calendar.MINUTE, minutes);
         calendar.set(Calendar.SECOND, seconds);
         calendar.set(Calendar.MILLISECOND, milliseconds);
 
         pos.setIndex(offset);
         return calendar.getTime();
         // If we get a ParseException it'll already have the right message/offset.
         // Other exception types can convert here.
     } catch (IndexOutOfBoundsException e) {
         fail = e;
     } catch (NumberFormatException e) {
         fail = e;
     } catch (IllegalArgumentException e) {
         fail = e;
     }
     String input = (date == null) ? null : ('"' + date + "'");
     String msg = fail.getMessage();
     if (msg == null || msg.isEmpty()) {
         msg = "("+fail.getClass().getName()+")";
     }
     ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());
     ex.initCause(fail);
     throw ex;
 }
+
+// Helper method to normalize timezone offset formats
+private static String normalizeTimezoneOffset(String offset) {
+    if (offset.length() == 3) { // format like +01 (missing minutes)
+        return offset + ":00";
+    } else if (offset.length() == 4) { // format like +0100
+        return offset.substring(0, 3) + ":" + offset.substring(3);
+    } else if (offset.length() == 5 && !offset.contains(":")) { // format like +0100 but length 5 (unlikely)
+        return offset.substring(0, 3) + ":" + offset.substring(3);
+    } else if (offset.length() == 2) { // format like +0
+        return offset + ":00";
+    }
+    // Return as-is if it's already in hh:mm format or other valid format
+    return offset;
+}
\ No newline at end of file
