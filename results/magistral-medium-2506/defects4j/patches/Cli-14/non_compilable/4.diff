diff --git a/tmp/891bd62b-9ee8-4e95-95b9-e46e4e991b71_buggy.java b/tmp/baae9984-6e5d-40a3-8d2a-1732b60b6a8a_fixed.java
index 71189c3..76fce9b 100644
--- a/tmp/891bd62b-9ee8-4e95-95b9-e46e4e991b71_buggy.java
+++ b/tmp/baae9984-6e5d-40a3-8d2a-1732b60b6a8a_fixed.java
@@ -1,46 +1,55 @@
     public void validate(final WriteableCommandLine commandLine)
         throws OptionException {
         // number of options found
         int present = 0;
 
         // reference to first unexpected option
         Option unexpected = null;
 
         for (final Iterator i = options.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
 
             // needs validation?
             boolean validate = option.isRequired() || option instanceof Group;
             if (validate) {
                 option.validate(commandLine);
             }
 
             // if the child option is present then validate it
             if (commandLine.hasOption(option)) {
                 if (++present > maximum) {
                     unexpected = option;
-
                     break;
                 }
-
+                // Get the value before validation to ensure type compatibility
+                Object value = commandLine.getValue(option);
+                if (value != null && option.getArgument() != null && option.getArgument().getValidator() != null) {
+                    try {
+                        // Convert to String if needed for validation
+                        String stringValue = (value instanceof File) ? ((File)value).getPath() : value.toString();
+                        option.getArgument().getValidator().validate(stringValue);
+                    } catch (IllegalArgumentException e) {
+                        throw new OptionException(this, ResourceConstants.ILLEGALARGUMENT_TEXT, option.getPreferredName(), e.getMessage());
+                    }
+                }
                 option.validate(commandLine);
             }
         }
 
         // too many options
         if (unexpected != null) {
             throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                       unexpected.getPreferredName());
         }
 
         // too few option
         if (present < minimum) {
             throw new OptionException(this, ResourceConstants.MISSING_OPTION);
         }
 
         // validate each anonymous argument
         for (final Iterator i = anonymous.iterator(); i.hasNext();) {
             final Option option = (Option) i.next();
             option.validate(commandLine);
         }
     }
\ No newline at end of file
