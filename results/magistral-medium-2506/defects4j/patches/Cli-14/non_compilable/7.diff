diff --git a/tmp/a20607f1-1611-481e-a544-015fbefdabb4_buggy.java b/tmp/4840af46-fc91-4220-a0cf-8104b5cde3f3_fixed.java
index 71189c3..9566d14 100644
--- a/tmp/a20607f1-1611-481e-a544-015fbefdabb4_buggy.java
+++ b/tmp/4840af46-fc91-4220-a0cf-8104b5cde3f3_fixed.java
@@ -1,46 +1,62 @@
 public void validate(final WriteableCommandLine commandLine)
     throws OptionException {
     // number of options found
     int present = 0;
 
     // reference to first unexpected option
     Option unexpected = null;
 
     for (final Iterator i = options.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
 
         // needs validation?
         boolean validate = option.isRequired() || option instanceof Group;
         if (validate) {
+            try {
                 option.validate(commandLine);
+            } catch (OptionException e) {
+                // Ignore validation errors here, they'll be handled by the individual option validation
+            }
         }
 
         // if the child option is present then validate it
         if (commandLine.hasOption(option)) {
             if (++present > maximum) {
                 unexpected = option;
-
                 break;
             }
 
+            try {
                 option.validate(commandLine);
+            } catch (OptionException e) {
+                // If validation fails, store the exception and continue
+                if (unexpected == null) {
+                    unexpected = option;
+                    throw e;
+                }
+            }
         }
     }
 
     // too many options
     if (unexpected != null) {
         throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,
                                   unexpected.getPreferredName());
     }
 
     // too few option
     if (present < minimum) {
         throw new OptionException(this, ResourceConstants.MISSING_OPTION);
     }
 
     // validate each anonymous argument
     for (final Iterator i = anonymous.iterator(); i.hasNext();) {
         final Option option = (Option) i.next();
+        try {
             option.validate(commandLine);
+        } catch (OptionException e) {
+            throw new OptionException(this, ResourceConstants.INVALID_ARGUMENT,
+                                     e.getMessage());
+        }
     }
 }
\ No newline at end of file
