diff --git a/tmp/3e3a0ef6-1474-4049-80a4-da377df8387e_buggy.java b/tmp/e3d86502-20c3-49fe-9bda-5add602bb790_fixed.java
index 03b03d7..487789f 100644
--- a/tmp/3e3a0ef6-1474-4049-80a4-da377df8387e_buggy.java
+++ b/tmp/e3d86502-20c3-49fe-9bda-5add602bb790_fixed.java
@@ -1,25 +1,33 @@
 /**
  * Adjusts the offset to be the earlier or later one during an overlap.
  *
  * @param instant  the instant to adjust
  * @param earlierOrLater  false for earlier, true for later
  * @return the adjusted instant millis
  */
 public long adjustOffset(long instant, boolean earlierOrLater) {
     // a bit messy, but will work in all non-pathological cases
 
     // evaluate 3 hours before and after to work out if anything is happening
     long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
     long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
     if (instantBefore == instantAfter) {
         return instant;  // not an overlap (less than is a gap, equal is normal case)
     }
 
     // work out range of instants that have duplicate local times
     long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+    long adjusted = convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
 
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    // Handle the case where we need to stay on the same side of the transition
+    // If we're at the transition point and adjusting to the opposite side
+    if (instant != adjusted) {
+        long currentOffset = getOffset(instant);
+        long adjustedOffset = getOffset(adjusted);
+        if ((adjustedOffset > currentOffset && !earlierOrLater) ||
+            (adjustedOffset < currentOffset && earlierOrLater)) {
+            return instant;
+        }
+    }
+    return adjusted;
 }
\ No newline at end of file
