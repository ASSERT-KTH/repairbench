diff --git a/tmp/c3280807-9be6-4cd2-b3bb-afbdb5ebbb59_buggy.java b/tmp/2d6d8ad2-3bc0-4a3f-8457-e71c8c874b2a_fixed.java
index 03b03d7..6f24288 100644
--- a/tmp/c3280807-9be6-4cd2-b3bb-afbdb5ebbb59_buggy.java
+++ b/tmp/2d6d8ad2-3bc0-4a3f-8457-e71c8c874b2a_fixed.java
@@ -1,25 +1,32 @@
     /**
      * Adjusts the offset to be the earlier or later one during an overlap.
      *
      * @param instant  the instant to adjust
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
         // evaluate 3 hours before and after to work out if anything is happening
         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
 
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
+        long localBefore = convertUTCToLocal(instantBefore);
+        if (instantAfter < instantBefore) {
+            // overlapping case (times go backwards)
+            if (earlierOrLater) {
+                // want later offset (but really earlier time)
+                return instant + (instantBefore - instantAfter);
+            } else {
+                // want earlier offset
+                return instant;
+            }
+        } else {
+            // normal case
             return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        }
     }
\ No newline at end of file
