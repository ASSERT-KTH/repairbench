diff --git a/tmp/26d319ef-670e-44f5-bdd5-8b23fd000f68_buggy.java b/tmp/6f7b11d0-ddb8-4269-a567-54558577dd95_fixed.java
index f650982..068eb4b 100644
--- a/tmp/26d319ef-670e-44f5-bdd5-8b23fd000f68_buggy.java
+++ b/tmp/6f7b11d0-ddb8-4269-a567-54558577dd95_fixed.java
@@ -1,42 +1,61 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
 //        System.err.println("COMPARING: " +
 //            (l == null ? "null" : l.getClass().getName()) + " " +
 //            (r == null ? "null" : r.getClass().getName()));
 
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+    // Fix: Handle case where one side is an Iterator and the other is a String
+    if (l instanceof String && r instanceof Iterator) {
+        Iterator it = (Iterator) r;
+        while (it.hasNext()) {
+            if (equal(l, it.next())) {
+                return true;
+            }
+        }
+        return false;
+    }
+    if (r instanceof String && l instanceof Iterator) {
+        Iterator it = (Iterator) l;
+        while (it.hasNext()) {
+            if (equal(it.next(), r)) {
+                return true;
+            }
+        }
+        return false;
+    }
     return equal(l, r);
 }
\ No newline at end of file
