diff --git a/tmp/8006c0ee-226f-48a0-bc9f-f844c8bf75ce_buggy.java b/tmp/577633d9-f351-4edf-b4e4-545fbdd0fe33_fixed.java
index f650982..0df0a59 100644
--- a/tmp/8006c0ee-226f-48a0-bc9f-f844c8bf75ce_buggy.java
+++ b/tmp/577633d9-f351-4edf-b4e4-545fbdd0fe33_fixed.java
@@ -1,42 +1,52 @@
     /**
      * Compares two values
      */
     protected boolean equal(
         EvalContext context,
         Expression left,
         Expression right)
     {
         Object l = left.compute(context);
         Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
         if (l instanceof InitialContext || l instanceof SelfContext) {
             l = ((EvalContext) l).getSingleNodePointer();
         }
 
         if (r instanceof InitialContext || r instanceof SelfContext) {
             r = ((EvalContext) r).getSingleNodePointer();
         }
 
         if (l instanceof Collection) {
             l = ((Collection) l).iterator();
         }
 
         if (r instanceof Collection) {
             r = ((Collection) r).iterator();
         }
 
         if ((l instanceof Iterator) && !(r instanceof Iterator)) {
-            return contains((Iterator) l, r);
+            // Check if any element in the iterator equals r
+            Iterator<?> it = (Iterator<?>) l;
+            while (it.hasNext()) {
+                if (equal(it.next(), r)) {
+                    return true;
+                }
+            }
+            return false;
         }
         if (!(l instanceof Iterator) && (r instanceof Iterator)) {
-            return contains((Iterator) r, l);
+            // Check if any element in the iterator equals l
+            Iterator<?> it = (Iterator<?>) r;
+            while (it.hasNext()) {
+                if (equal(l, it.next())) {
+                    return true;
+                }
+            }
+            return false;
         }
         if (l instanceof Iterator && r instanceof Iterator) {
             return findMatch((Iterator) l, (Iterator) r);
         }
         return equal(l, r);
     }
\ No newline at end of file
