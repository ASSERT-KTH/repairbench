diff --git a/tmp/d911c508-91f7-4060-88c5-c70078ae857b_buggy.java b/tmp/d50178ef-9526-4ce5-bcf7-d9f647261805_fixed.java
index f650982..cd3abac 100644
--- a/tmp/d911c508-91f7-4060-88c5-c70078ae857b_buggy.java
+++ b/tmp/d50178ef-9526-4ce5-bcf7-d9f647261805_fixed.java
@@ -1,42 +1,61 @@
 /**
  * Compares two values
  */
 protected boolean equal(
     EvalContext context,
     Expression left,
     Expression right)
 {
     Object l = left.compute(context);
     Object r = right.compute(context);
 
-//        System.err.println("COMPARING: " +
-//            (l == null ? "null" : l.getClass().getName()) + " " +
-//            (r == null ? "null" : r.getClass().getName()));
-
     if (l instanceof InitialContext || l instanceof SelfContext) {
         l = ((EvalContext) l).getSingleNodePointer();
     }
 
     if (r instanceof InitialContext || r instanceof SelfContext) {
         r = ((EvalContext) r).getSingleNodePointer();
     }
 
     if (l instanceof Collection) {
         l = ((Collection) l).iterator();
     }
 
     if (r instanceof Collection) {
         r = ((Collection) r).iterator();
     }
 
     if ((l instanceof Iterator) && !(r instanceof Iterator)) {
         return contains((Iterator) l, r);
     }
     if (!(l instanceof Iterator) && (r instanceof Iterator)) {
         return contains((Iterator) r, l);
     }
     if (l instanceof Iterator && r instanceof Iterator) {
         return findMatch((Iterator) l, (Iterator) r);
     }
+
+    // Handle case where one of the values is an Iterator (from collection conversion above)
+    if (l instanceof Iterator) {
+        Iterator it = (Iterator) l;
+        while (it.hasNext()) {
+            Object item = it.next();
+            if (equal(item, r)) {
+                return true;
+            }
+        }
+        return false;
+    }
+    if (r instanceof Iterator) {
+        Iterator it = (Iterator) r;
+        while (it.hasNext()) {
+            Object item = it.next();
+            if (equal(l, item)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     return equal(l, r);
 }
\ No newline at end of file
