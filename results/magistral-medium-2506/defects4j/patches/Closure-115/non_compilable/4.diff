diff --git a/tmp/c6e211fa-cea7-4740-9067-ef71aae3c6c3_buggy.java b/tmp/633f77a7-f323-4abb-841e-82b4ea73ccf9_fixed.java
index 3075782..a5d2d32 100644
--- a/tmp/c6e211fa-cea7-4740-9067-ef71aae3c6c3_buggy.java
+++ b/tmp/633f77a7-f323-4abb-841e-82b4ea73ccf9_fixed.java
@@ -1,82 +1,99 @@
 /**
  * Determines whether a function can be inlined at a particular call site.
  * There are several criteria that the function and reference must hold in
  * order for the functions to be inlined:
  * 1) If a call's arguments have side effects,
  * the corresponding argument in the function must only be referenced once.
  * For instance, this will not be inlined:
  * <pre>
  *     function foo(a) { return a + a }
  *     x = foo(i++);
  * </pre>
  */
 private CanInlineResult canInlineReferenceDirectly(
     Node callNode, Node fnNode) {
   if (!isDirectCallNodeReplacementPossible(fnNode)) {
     return CanInlineResult.NO;
   }
 
   Node block = fnNode.getLastChild();
-
   boolean hasSideEffects = false;
+
+  // Check if the function body has any side effects
   if (block.hasChildren()) {
-      Preconditions.checkState(block.hasOneChild());
+    hasSideEffects = true; // Assume side effects unless proven otherwise
+    if (block.hasOneChild()) {
       Node stmt = block.getFirstChild();
-      if (stmt.isReturn()) {
-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
+      if (stmt.isReturn() && !NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler)) {
+        hasSideEffects = false;
       }
     }
+
+    // Check if any parameters are modified in the function body
+    Node paramList = NodeUtil.getFunctionParameters(fnNode);
+    for (Node param = paramList.getFirstChild(); param != null; param = param.getNext()) {
+      String paramName = param.getString();
+      if (NodeUtil.isNameDeclared(block, paramName)) {
+        return CanInlineResult.NO; // Parameter is modified in the function
+      }
+    }
+  }
+
   // CALL NODE: [ NAME, ARG1, ARG2, ... ]
   Node cArg = callNode.getFirstChild().getNext();
 
   // Functions called via 'call' and 'apply' have a this-object as
   // the first parameter, but this is not part of the called function's
   // parameter list.
   if (!callNode.getFirstChild().isName()) {
     if (NodeUtil.isFunctionObjectCall(callNode)) {
       // TODO(johnlenz): Support replace this with a value.
       if (cArg == null || !cArg.isThis()) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     } else {
       // ".apply" call should be filtered before this.
       Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
     }
   }
 
   // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
   Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
   while (cArg != null || fnParam != null) {
     // For each named parameter check if a mutable argument use more than one.
     if (fnParam != null) {
       if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
-            return CanInlineResult.NO;
-          }
-          // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
-                  block, fnParam.getString()) > 1) {
+        // If the argument has side effects OR might affect mutable state
+        if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||
+            NodeUtil.mayEffectMutableState(cArg, compiler)) {
+          // Check if this parameter is referenced more than once
+          // or if there are potential side effects
+          if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 ||
+              hasSideEffects) {
             return CanInlineResult.NO;
           }
         }
 
+        // Additional check for object/array parameters that might be modified
+        if (NodeUtil.isAssignment(cArg) ||
+            NodeUtil.isFunctionObjectCall(callNode) ||
+            (cArg.isQualifiedName() && NodeUtil.isAssignmentOp(cArg.getParent()))) {
+          return CanInlineResult.NO;
+        }
+      }
       // Move to the next name.
       fnParam = fnParam.getNext();
     }
 
-      // For every call argument check for side-effects, even if there
-      // isn't a named parameter to match.
+    // For every call argument check for side-effects
     if (cArg != null) {
       if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
         return CanInlineResult.NO;
       }
       cArg = cArg.getNext();
     }
   }
 
   return CanInlineResult.YES;
 }
\ No newline at end of file
