diff --git a/tmp/ac54a7ab-e93e-4b02-a5e8-9aeb01b13400_buggy.java b/tmp/3bde10d1-a37a-45cd-b1d0-ce9dd786e60b_fixed.java
index 3075782..3657d6c 100644
--- a/tmp/ac54a7ab-e93e-4b02-a5e8-9aeb01b13400_buggy.java
+++ b/tmp/3bde10d1-a37a-45cd-b1d0-ce9dd786e60b_fixed.java
@@ -1,82 +1,137 @@
   /**
    * Determines whether a function can be inlined at a particular call site.
    * There are several criteria that the function and reference must hold in
    * order for the functions to be inlined:
    * 1) If a call's arguments have side effects,
    * the corresponding argument in the function must only be referenced once.
    * For instance, this will not be inlined:
    * <pre>
    *     function foo(a) { return a + a }
    *     x = foo(i++);
    * </pre>
    */
   private CanInlineResult canInlineReferenceDirectly(
       Node callNode, Node fnNode) {
     if (!isDirectCallNodeReplacementPossible(fnNode)) {
       return CanInlineResult.NO;
     }
 
     Node block = fnNode.getLastChild();
 
+    // Check if the function modifies its parameters
+    List<String> modifiedParams = getModifiedParameters(fnNode);
+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);
+    Node param = fnParams.getFirstChild();
+    while (param != null) {
+      String paramName = param.getString();
+      if (modifiedParams.contains(paramName)) {
+        return CanInlineResult.NO;
+      }
+      param = param.getNext();
+    }
+
     boolean hasSideEffects = false;
     if (block.hasChildren()) {
       Preconditions.checkState(block.hasOneChild());
       Node stmt = block.getFirstChild();
       if (stmt.isReturn()) {
         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);
       }
     }
     // CALL NODE: [ NAME, ARG1, ARG2, ... ]
     Node cArg = callNode.getFirstChild().getNext();
 
     // Functions called via 'call' and 'apply' have a this-object as
     // the first parameter, but this is not part of the called function's
     // parameter list.
     if (!callNode.getFirstChild().isName()) {
       if (NodeUtil.isFunctionObjectCall(callNode)) {
         // TODO(johnlenz): Support replace this with a value.
         if (cArg == null || !cArg.isThis()) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       } else {
         // ".apply" call should be filtered before this.
         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
       }
     }
 
     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
     while (cArg != null || fnParam != null) {
       // For each named parameter check if a mutable argument use more than one.
       if (fnParam != null) {
         if (cArg != null) {
-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {
+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
+            // Check if the parameter is used more than once in the function
+            if (NodeUtil.getNameReferenceCount(
+                block, fnParam.getString()) > 1) {
               return CanInlineResult.NO;
             }
+          }
           // Check for arguments that are evaluated more than once.
-          // Note: Unlike block inlining, there it is not possible that a
-          // parameter reference will be in a loop.
-          if (NodeUtil.mayEffectMutableState(cArg, compiler)
-              && NodeUtil.getNameReferenceCount(
+          if (NodeUtil.mayEffectMutableState(cArg, compiler)) {
+            if (NodeUtil.getNameReferenceCount(
                 block, fnParam.getString()) > 1) {
               return CanInlineResult.NO;
             }
           }
-
-        // Move to the next name.
+        }
         fnParam = fnParam.getNext();
       }
 
       // For every call argument check for side-effects, even if there
       // isn't a named parameter to match.
       if (cArg != null) {
         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
           return CanInlineResult.NO;
         }
         cArg = cArg.getNext();
       }
     }
 
     return CanInlineResult.YES;
   }
+
+  // Helper method to detect modified parameters
+  private List<String> getModifiedParameters(Node fnNode) {
+    List<String> modifiedParams = new ArrayList<>();
+    Node block = fnNode.getLastChild();
+    Node paramList = NodeUtil.getFunctionParameters(fnNode);
+
+    // Collect all parameter names
+    Set<String> paramNames = new HashSet<>();
+    Node param = paramList.getFirstChild();
+    while (param != null) {
+      paramNames.add(param.getString());
+      param = param.getNext();
+    }
+
+    // Check for assignments to parameters in the function body
+    NodeVisitor visitor = new NodeVisitor() {
+      @Override
+      public void visit(NodeTraversal t, Node n) {
+        if (n.isAssign()) {
+          Node lhs = n.getFirstChild();
+          if (lhs.isQualifiedName()) {
+            String name = lhs.getQualifiedName();
+            if (paramNames.contains(name)) {
+              modifiedParams.add(name);
+            }
+          } else if (lhs.isName()) {
+            String name = lhs.getString();
+            if (paramNames.contains(name)) {
+              modifiedParams.add(name);
+            }
+          } else if (lhs.isBracketAccess()) {
+            // Handle array/object modifications
+            // This is a simplified check - in real implementation we'd need to
+            // analyze if the base object is a parameter
+          }
+        }
+      }
+    };
+    NodeTraversal.traverse(compiler, block, visitor);
+    return modifiedParams;
+  }
\ No newline at end of file
