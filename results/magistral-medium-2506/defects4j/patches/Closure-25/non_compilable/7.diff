diff --git a/tmp/13ab2df1-5968-4445-9743-9fcf5b5f46e2_buggy.java b/tmp/76f942cc-9146-4b1b-972c-6852fe20e04a_fixed.java
index b98f0a7..0b2a1e1 100644
--- a/tmp/13ab2df1-5968-4445-9743-9fcf5b5f46e2_buggy.java
+++ b/tmp/76f942cc-9146-4b1b-972c-6852fe20e04a_fixed.java
@@ -1,29 +1,49 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Add backward inference for constructor parameters
+          if (type != null) {
+            FunctionType functionType = ct;
+            int paramCount = Math.min(n.getChildCount() - 1, functionType.getParameters().size());
+            for (int i = 0; i < paramCount; i++) {
+              Node arg = constructor.getNext().getChildAt(i);
+              if (arg != null) {
+                JSType paramType = functionType.getParameters().get(i);
+                if (paramType != null) {
+                  // Update the argument type based on the constructor's parameter type
+                  JSType currentArgType = arg.getJSType();
+                  if (currentArgType == null) {
+                    arg.setJSType(paramType);
+                  } else {
+                    // Combine the types
+                    arg.setJSType(currentArgType.getLeastCommonSupertype(paramType));
+                  }
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
