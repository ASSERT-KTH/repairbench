diff --git a/tmp/55fdbbfb-15c9-4950-bf2b-c6c5bfb24c46_buggy.java b/tmp/6da51f9e-ee0c-4df1-90e1-04d30a5d05dc_fixed.java
index b98f0a7..1e276a7 100644
--- a/tmp/55fdbbfb-15c9-4950-bf2b-c6c5bfb24c46_buggy.java
+++ b/tmp/6da51f9e-ee0c-4df1-90e1-04d30a5d05dc_fixed.java
@@ -1,29 +1,59 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Also traverse the arguments to ensure their types are inferred correctly
+    Node arg = constructor.getNext();
+    while (arg != null) {
       scope = traverse(arg, scope);
+
+      // If the constructor has type information about its parameters,
+      // we can refine the argument types based on the constructor's expectations
+      if (constructorType != null && constructorType.toMaybeFunctionType() != null) {
+        FunctionType ct = constructorType.toMaybeFunctionType();
+        if (ct != null) {
+          int paramIndex = 0;
+          Node param = arg;
+          while (param != null && paramIndex < ct.getParametersCount()) {
+            JSType paramType = ct.getParameterType(paramIndex);
+            if (paramType != null) {
+              // Update the argument's type based on the parameter type
+              Node oldArg = arg;
+              arg.setJSType(paramType);
+              // Note: We might need to adjust the scope as well if we want
+              // the backwards inference to work properly
+              if (paramIndex == 0 && ct.getParametersCount() > 0 &&
+                  ct.getParameterType(0) != null) {
+                // For the first argument, we can do more precise inference
+                arg.setJSType(ct.getParameterType(0));
+              }
+            }
+            param = param.getNext();
+            paramIndex++;
+          }
+        }
+      }
+      arg = arg.getNext();
     }
     return scope;
   }
\ No newline at end of file
