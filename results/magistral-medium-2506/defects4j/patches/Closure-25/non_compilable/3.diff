diff --git a/tmp/403ab62e-c012-4ad6-a3d9-fa65946c7500_buggy.java b/tmp/dfb3451f-8986-476e-bd85-bc67eefe4f6a_fixed.java
index b98f0a7..6be56aa 100644
--- a/tmp/403ab62e-c012-4ad6-a3d9-fa65946c7500_buggy.java
+++ b/tmp/dfb3451f-8986-476e-bd85-bc67eefe4f6a_fixed.java
@@ -1,29 +1,50 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Add parameter types for backwards inference
+          if (n.hasChildren() && n.getChildCount() > 1) {
+            Node argNode = constructor.getNext();
+            int paramIndex = 0;
+            while (argNode != null) {
+              if (paramIndex < ct.getParametersCount()) {
+                JSType paramType = ct.getParameterType(paramIndex);
+                if (paramType != null) {
+                  // Apply the parameter type to the argument
+                  JSType argType = argNode.getJSType();
+                  if (argType != null) {
+                    // Union the expected parameter type with the current argument type
+                    argNode.setJSType(argType.getLeastSupertype(paramType));
+                  } else {
+                    argNode.setJSType(paramType);
+                  }
+                }
+              }
+              argNode = argNode.getNext();
+              paramIndex++;
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
