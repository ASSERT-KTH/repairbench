diff --git a/tmp/241feab9-92b1-456b-8e8f-b6f5c7576e21_buggy.java b/tmp/5b0d1590-dfd1-4811-8479-92793ae902b5_fixed.java
index b98f0a7..9c2f412 100644
--- a/tmp/241feab9-92b1-456b-8e8f-b6f5c7576e21_buggy.java
+++ b/tmp/5b0d1590-dfd1-4811-8479-92793ae902b5_fixed.java
@@ -1,29 +1,47 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
         constructorType = constructorType.restrictByNotNullOrUndefined();
         if (constructorType.isUnknownType()) {
             type = getNativeType(UNKNOWN_TYPE);
         } else {
             FunctionType ct = constructorType.toMaybeFunctionType();
             if (ct == null && constructorType instanceof FunctionType) {
                 // If constructorType is a NoObjectType, then toMaybeFunctionType will
                 // return null. But NoObjectType implements the FunctionType
                 // interface, precisely because it can validly construct objects.
                 ct = (FunctionType) constructorType;
             }
             if (ct != null && ct.isConstructor()) {
                 type = ct.getInstanceType();
+
+                // Add type information for constructor parameters
+                if (ct.isConstructor()) {
+                    // Get the parameter types from the constructor function
+                    List<JSType> paramTypes = ct.getParameters();
+                    if (paramTypes != null && !paramTypes.isEmpty()) {
+                        // Get the arguments passed to the constructor
+                        Node arg = constructor.getNext();
+                        int i = 0;
+                        while (arg != null && i < paramTypes.size()) {
+                            // Propagate the parameter type to the argument
+                            if (arg.getJSType() == null) {
+                                arg.setJSType(paramTypes.get(i));
+                            }
+                            arg = arg.getNext();
+                            i++;
+                        }
+                    }
+                }
             }
         }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
