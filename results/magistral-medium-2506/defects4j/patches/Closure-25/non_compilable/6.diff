diff --git a/tmp/7ea716ec-8966-4a65-98e8-448eca34915e_buggy.java b/tmp/4bd92da9-6441-47ac-96e5-468462994da0_fixed.java
index b98f0a7..d41b217 100644
--- a/tmp/7ea716ec-8966-4a65-98e8-448eca34915e_buggy.java
+++ b/tmp/4bd92da9-6441-47ac-96e5-468462994da0_fixed.java
@@ -1,29 +1,56 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
+
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
+
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
+
+        // Process constructor arguments to infer parameter types
+        Node arg = constructor.getNext();
+        if (ct != null && ct.isConstructor()) {
+          FunctionType functionType = ct;
+          if (functionType.getParameters() != null) {
+            int paramIndex = 0;
+            while (arg != null && paramIndex < functionType.getParameters().size()) {
+              scope = traverse(arg, scope);
+              JSType paramType = functionType.getParameters().get(paramIndex++);
+              if (paramType != null && !paramType.isUnknownType()) {
+                // Apply the parameter type to the argument
+                arg.setJSType(paramType);
               }
+              arg = arg.getNext();
             }
-    n.setJSType(type);
+          }
+        }
+
+        // Process remaining arguments
+        while (arg != null) {
+          scope = traverse(arg, scope);
+          arg = arg.getNext();
+        }
+      }
+    } else {
       for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
         scope = traverse(arg, scope);
       }
+    }
+
+    n.setJSType(type);
     return scope;
 }
\ No newline at end of file
