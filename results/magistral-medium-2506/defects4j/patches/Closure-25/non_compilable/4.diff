diff --git a/tmp/bad74862-a4ae-4729-9eab-3d3d7f4410d2_buggy.java b/tmp/04c77ac7-ffae-4321-bc05-b0e67d3bffe8_fixed.java
index b98f0a7..322e363 100644
--- a/tmp/bad74862-a4ae-4729-9eab-3d3d7f4410d2_buggy.java
+++ b/tmp/04c77ac7-ffae-4321-bc05-b0e67d3bffe8_fixed.java
@@ -1,29 +1,48 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
         }
       }
     }
     n.setJSType(type);
+
+    // Traverse arguments and apply constructor parameter types to them
+    int i = 0;
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      // Traverse the argument to get its type
       scope = traverse(arg, scope);
+
+      // If we have a constructor type and parameter types, apply them
+      if (constructorType != null && ct != null) {
+        if (i < ct.getParameters().size()) {
+          JSType paramType = ct.getParameters().get(i).getType();
+          if (paramType != null) {
+            // Meet the argument's current type with the parameter type
+            JSType currentType = arg.getJSType();
+            if (currentType != null) {
+              JSType joinedType = currentType.getLeastSupertype(paramType);
+              arg.setJSType(joinedType);
+            }
+          }
+        }
+      }
+      i++;
     }
     return scope;
 }
\ No newline at end of file
