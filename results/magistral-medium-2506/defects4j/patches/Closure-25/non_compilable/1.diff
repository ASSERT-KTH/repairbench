diff --git a/tmp/5002f6bc-bb7e-47c5-bb1b-2aa713938133_buggy.java b/tmp/80e91674-047a-44e7-8ae0-ff72027fe665_fixed.java
index b98f0a7..9f68edb 100644
--- a/tmp/5002f6bc-bb7e-47c5-bb1b-2aa713938133_buggy.java
+++ b/tmp/80e91674-047a-44e7-8ae0-ff72027fe665_fixed.java
@@ -1,29 +1,52 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Handle parameter types from constructor
+          if (ct.getParametersCount() > 0 && n.hasChildren()) {
+            Node args = constructor.getNext();
+            if (args != null) {
+              // For each parameter in constructor, update the corresponding argument's type
+              int i = 0;
+              for (JSType paramType : ct.getParameters()) {
+                if (i < n.getChildCount() - 1) {
+                  Node arg = args;
+                  for (int j = 0; j < i; j++) {
+                    arg = arg.getNext();
+                  }
+                  if (arg != null) {
+                    JSType argType = arg.getJSType();
+                    if (argType != null && paramType != null) {
+                      // Update the argument's type based on parameter type
+                      arg.setJSType(argType.getLeastSupertype(paramType));
+                    }
+                  }
+                }
+                i++;
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
