diff --git a/tmp/a7319e9f-a5a0-4248-b5ea-068c031b60bd_buggy.java b/tmp/4d5c9b72-d96f-4109-87ab-e3f4a6545e98_fixed.java
index b98f0a7..dc2480b 100644
--- a/tmp/a7319e9f-a5a0-4248-b5ea-068c031b60bd_buggy.java
+++ b/tmp/4d5c9b72-d96f-4109-87ab-e3f4a6545e98_fixed.java
@@ -1,29 +1,63 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
+
+    // First pass: traverse all arguments to get their types
+    List<Node> args = new ArrayList<>();
+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+      args.add(arg);
+      scope = traverse(arg, scope);
+    }
+
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+
+          // Infer parameter types from argument types
+          if (ct.hasParameterInformation()) {
+            int paramCount = ct.getParametersCount();
+            for (int i = 0; i < args.size() && i < paramCount; i++) {
+              Node arg = args.get(i);
+              JSType argType = arg.getJSType();
+              if (argType != null) {
+                FunctionParamType paramType = ct.getParameterType(i);
+                if (paramType != null && paramType.getType() != null) {
+                  // Update parameter type with argument type information
+                  JSType paramTypeToUpdate = ct.getParameterType(i).getType();
+                  if (paramTypeToUpdate != null && !paramTypeToUpdate.isUnknownType()) {
+                    // Merge the argument type with the parameter type
+                    JSType refinedType = paramTypeToUpdate.meet(argType);
+                    if (paramType != null && refinedType != null) {
+                      ct = ct.withParameterType(i,
+                          paramType.withType(refinedType));
+                    }
+                  }
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
+
+    // Traverse arguments again to propagate the refined types
+    for (Node arg : args) {
       scope = traverse(arg, scope);
     }
+
     return scope;
   }
\ No newline at end of file
