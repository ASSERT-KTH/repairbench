diff --git a/tmp/262b8d17-63a4-41a8-9256-65bdb7b84c1c_buggy.java b/tmp/9ad5ba0e-0398-48a1-af73-e2a3ff37920b_fixed.java
index b98f0a7..088bb09 100644
--- a/tmp/262b8d17-63a4-41a8-9256-65bdb7b84c1c_buggy.java
+++ b/tmp/9ad5ba0e-0398-48a1-af73-e2a3ff37920b_fixed.java
@@ -1,29 +1,55 @@
 private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          // Propagate parameter types for backwards inference
+          if (n.hasChildren() && constructor.hasChildren()) {
+            Node constructorCall = constructor;
+            Node newCall = n;
+            int paramCount = 0;
+            // Skip the constructor's 'this' parameter if it's a FUNCTION node
+            if (constructor.isFunction()) {
+              paramCount = constructor.getChildCount() - 2; // first 2 are name and block
+            } else {
+              paramCount = constructor.getChildCount();
+            }
+
+            // The first child of new is the constructor, subsequent children are args
+            int argIndex = 0;
+            Node arg = constructor.getNext();
+            while (arg != null) {
+              if (argIndex < paramCount) {
+                JSType paramType = ct.getParameterType(argIndex);
+                if (paramType != null && !paramType.isUnknownType()) {
+                  // Infer the argument type from the parameter type
+                  arg.setJSType(paramType);
+                }
+              }
+              argIndex++;
+              arg = arg.getNext();
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
 }
\ No newline at end of file
