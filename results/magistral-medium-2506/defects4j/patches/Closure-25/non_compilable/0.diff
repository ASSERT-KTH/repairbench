diff --git a/tmp/bfd17ecd-90a6-4370-9017-9ee6e5b3fcda_buggy.java b/tmp/0eb42992-3c9b-49e9-8d19-f145ed73a657_fixed.java
index b98f0a7..3d855b8 100644
--- a/tmp/bfd17ecd-90a6-4370-9017-9ee6e5b3fcda_buggy.java
+++ b/tmp/0eb42992-3c9b-49e9-8d19-f145ed73a657_fixed.java
@@ -1,29 +1,46 @@
   private FlowScope traverseNew(Node n, FlowScope scope) {
-
     Node constructor = n.getFirstChild();
     scope = traverse(constructor, scope);
     JSType constructorType = constructor.getJSType();
     JSType type = null;
     if (constructorType != null) {
       constructorType = constructorType.restrictByNotNullOrUndefined();
       if (constructorType.isUnknownType()) {
         type = getNativeType(UNKNOWN_TYPE);
       } else {
         FunctionType ct = constructorType.toMaybeFunctionType();
         if (ct == null && constructorType instanceof FunctionType) {
           // If constructorType is a NoObjectType, then toMaybeFunctionType will
           // return null. But NoObjectType implements the FunctionType
           // interface, precisely because it can validly construct objects.
           ct = (FunctionType) constructorType;
         }
         if (ct != null && ct.isConstructor()) {
           type = ct.getInstanceType();
+          if (type != null && !type.isUnknownType()) {
+            // Perform backward inference for constructor parameters
+            Node callNode = constructor;
+            if (callNode.isCall() && callNode.getFirstChild() != null) {
+              FunctionType fnType = callNode.getFirstChild().getJSType().toMaybeFunctionType();
+              if (fnType != null) {
+                List<Node> args = NodeUtil.getArgs(callNode);
+                List<JSType> paramTypes = fnType.getParameters();
+                for (int i = 0; i < args.size() && i < paramTypes.size(); i++) {
+                  JSType paramType = paramTypes.get(i);
+                  Node arg = args.get(i);
+                  if (arg.getJSType() != null && !paramType.isEquivalentTo(arg.getJSType())) {
+                    arg.setJSType(paramType);
+                  }
+                }
+              }
+            }
+          }
         }
       }
     }
     n.setJSType(type);
     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
       scope = traverse(arg, scope);
     }
     return scope;
   }
\ No newline at end of file
