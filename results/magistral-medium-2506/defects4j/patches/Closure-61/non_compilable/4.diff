diff --git a/tmp/f8a4996d-62f4-4ee9-9b04-b7c9a2715889_buggy.java b/tmp/30419077-79cf-4c6f-87df-60939cb60b5f_fixed.java
index b36c3f0..8aa13d1 100644
--- a/tmp/f8a4996d-62f4-4ee9-9b04-b7c9a2715889_buggy.java
+++ b/tmp/30419077-79cf-4c6f-87df-60939cb60b5f_fixed.java
@@ -1,58 +1,64 @@
   /**
    * Returns true if calls to this function have side effects.
    *
    * @param callNode The call node to inspected.
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
   static boolean functionCallHasSideEffects(
       Node callNode, @Nullable AbstractCompiler compiler) {
     if (callNode.getType() != Token.CALL) {
       throw new IllegalStateException(
           "Expected CALL node, got " + Token.name(callNode.getType()));
     }
 
     if (callNode.isNoSideEffectsCall()) {
       return false;
     }
 
     Node nameNode = callNode.getFirstChild();
 
     // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
+      Node objNode = nameNode.getFirstChild();
+      String methodName = nameNode.getLastChild().getString();
+
+      // Functions in the "Math" namespace have no side effects.
+      if (objNode.getType() == Token.NAME &&
+          "Math".equals(objNode.getString()) &&
+          MATH_METHODS.contains(methodName)) {
+        return false;
+      }
+
       if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(methodName)) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+          && evaluatesToLocalValue(objNode)) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
-
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+        if (objNode.getType() == Token.REGEXP
+            && REGEXP_METHODS.contains(methodName)) {
           return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+        } else if (objNode.getType() == Token.STRING
+            && STRING_REGEXP_METHODS.contains(methodName)) {
           Node param = nameNode.getNext();
           if (param != null &&
               (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
             return false;
         }
       }
     }
 
     return true;
   }
\ No newline at end of file
