diff --git a/tmp/6bd1dcc0-72f1-4c68-86ba-8513150ab1ae_buggy.java b/tmp/78ac1b6d-32ac-434c-b839-0e70f0d19607_fixed.java
index b09cd82..075de3d 100644
--- a/tmp/6bd1dcc0-72f1-4c68-86ba-8513150ab1ae_buggy.java
+++ b/tmp/78ac1b6d-32ac-434c-b839-0e70f0d19607_fixed.java
@@ -1,192 +1,255 @@
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
      * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
      * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
      * prefix is more than 8 - or BigInteger if there are more than 16 digits.
      * </p>
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
      * trying to create successively larger types from the type specified
      * until one is found that can represent the value.</p>
      *
      * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
+     * and then try successively larger types from <code>Long</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
+     * <code>Double</code> to <code>BigDecimal</code>.</p>
      *
      * <p>
      * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
      * be Integer, Long or BigDecimal as appropriate.
      * </p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
      * <p>This method does not trim the input string, i.e., strings with leading
      * or trailing spaces will generate NumberFormatExceptions.</p>
      *
      * @param str  String containing a number, may be null
      * @return Number created from the string (or null if the input is null)
      * @throws NumberFormatException if the value cannot be converted
      */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
             final int hexDigits = str.length() - pfxLen;
             if (hexDigits > 16) { // too many for Long
                 return createBigInteger(str);
             }
             if (hexDigits > 8) { // too many for an int
                 return createLong(str);
             }
             return createInteger(str);
         }
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
+        final int expPos;
+        if (str.indexOf('e') > -1) {
+            expPos = str.indexOf('e');
+        } else {
+            expPos = str.indexOf('E'); // assumes both not present
+        }
         // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
         // and the parsing which will detect if e or E appear in a number due to using the wrong offset
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
 
             if (expPos > -1) { // there is an exponent
                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 dec = str.substring(decPos + 1, expPos);
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
             if (expPos > -1) {
                 if (expPos > str.length()) { // prevents double exponent causing IOOBE
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
                 mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
         if (!Character.isDigit(lastChar) && lastChar != '.') {
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length() - 1);
             } else {
                 exp = null;
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
                         && exp == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         final Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                             //If it's too big for a float or the float value = 0 and the string
                             //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 case 'd' :
                 case 'D' :
                     try {
                         final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
                     //$FALL-THROUGH$
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         }
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
         if (expPos > -1 && expPos < str.length() - 1) {
             exp = str.substring(expPos + 1, str.length());
         } else {
             exp = null;
         }
         if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+            //Must be a Integer, Long or BigInteger
+            // Must be an Integer, Long, or BigInteger
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+                // Too big for an int
             }
             try {
                 return createLong(str);
-            } catch (final NumberFormatException nfe) { // NOPMD
-                // ignore the bad number
+            } catch (final NumberFormatException e) { // NOPMD
+                // Too big for a long
             }
             return createBigInteger(str);
         }
 
-        //Must be a Float, Double, BigDecimal
+        //Must be a Float, Double, or BigDecimal
+        // Must be a Float, Double, or BigDecimal
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        boolean hasDecimals = false;
+
+        if (dec != null && dec.length() > 0) {
+            hasDecimals = true;
+        }
+        if (!hasDecimals && exp != null) { // no decimals but exponent exists
+            hasDecimals = true; // treate as floating number
+        }
+
+        // if the number has a decimal point or exponent, try Float first
+        if (hasDecimals) {
+            // If there's enough digits after the decimal point or exponent,
+            // we might need BigDecimal
+            int requiredPrecision = 0;
+            if (dec != null) {
+                requiredPrecision += dec.length();
+            }
+            if (exp != null) {
                 try {
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
+                    final int exponent = Integer.parseInt(exp);
+                    requiredPrecision += exponent;
+                } catch (final NumberFormatException e) {
+                    // ignore - exponent parsing error will be caught elsewhere
                 }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
             }
+
+            // The following logic tries to determine the best fit type:
+            // For Float to prevent precision loss, the number should have <= 8 significant digits
+            // For Double to prevent precision loss, the number should have <= 16 significant digits
+            // But since we don't have exact significant digit count, we'll use some heuristics
+
             try {
+                // Try Double first, since it's more common and can handle more precision than Float
                 final Double d = createDouble(str);
                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
+                    // Check if the double can actually represent the value without precision loss
+                    // A simple heuristic: if the string representation of the double matches the input string's mantissa,
+                    // then it's safe to use Double (ignoring trailing zeros since they're not significant in floating point)
+                    String doubleStr = Double.toString(d.doubleValue());
+                    int doubleDecimalPos = doubleStr.indexOf('.');
+                    int doubleExpPos = doubleStr.indexOf('E');
+                    if (doubleExpPos == -1) {
+                        doubleExpPos = doubleStr.length();
+                    }
+
+                    String doubleMantDec;
+                    if (doubleDecimalPos > -1) {
+                        doubleMantDec = doubleStr.substring(0, doubleExpPos);
+                    } else {
+                        doubleMantDec = doubleStr.substring(0, doubleExpPos);
+                    }
+
+                    // Normalize both strings (remove leading/trailing zeros after decimal, etc.)
+                    // But this is complex to do accurately, so we'll use a simpler check
+                    if (doubleStr.startsWith(str.replaceFirst("[fFdD]$", ""))) {
                         return d;
                     }
+                }
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
 
+            // Try BigDecimal for cases where Double can't represent the value accurately
+            try {
                 return createBigDecimal(str);
+            } catch (final NumberFormatException e) {
+                // This really shouldn't happen, but just in case
+                throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
+
+        // If we get here, it's probably an integral value (no decimal point or exponent)
+        // which couldn't be parsed as Integer/Long, so fall back to BigInteger
+        return createBigInteger(str);
     }
\ No newline at end of file
