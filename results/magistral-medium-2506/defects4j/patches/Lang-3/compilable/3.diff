diff --git a/tmp/7e2d1138-2b57-464c-89fc-b1c1328ed2d0_buggy.java b/tmp/66972de2-d735-41c1-a326-1c553ee31e62_fixed.java
index b09cd82..4e18d2b 100644
--- a/tmp/7e2d1138-2b57-464c-89fc-b1c1328ed2d0_buggy.java
+++ b/tmp/66972de2-d735-41c1-a326-1c553ee31e62_fixed.java
@@ -1,192 +1,196 @@
-    /**
-     * <p>Turns a string value into a java.lang.Number.</p>
-     *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
-     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
-     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
-     * trying to create successively larger types from the type specified
-     * until one is found that can represent the value.</p>
-     *
-     * <p>If a type specifier is not found, it will check for a decimal point
-     * and then try successively larger types from <code>Integer</code> to
-     * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
-     *
-     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
-     *
-     * <p>This method does not trim the input string, i.e., strings with leading
-     * or trailing spaces will generate NumberFormatExceptions.</p>
-     *
-     * @param str  String containing a number, may be null
-     * @return Number created from the string (or null if the input is null)
-     * @throws NumberFormatException if the value cannot be converted
-     */
     public static Number createNumber(final String str) throws NumberFormatException {
         if (str == null) {
             return null;
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
         }
         // Need to deal with all possible hex prefixes here
         final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
         int pfxLen = 0;
         for(final String pfx : hex_prefixes) {
             if (str.startsWith(pfx)) {
-                pfxLen += pfx.length();
+                pfxLen = pfx.length();
                 break;
             }
         }
         if (pfxLen > 0) { // we have a hex number
             final int hexDigits = str.length() - pfxLen;
             if (hexDigits > 16) { // too many for Long
                 return createBigInteger(str);
             }
             if (hexDigits > 8) { // too many for an int
                 return createLong(str);
             }
             return createInteger(str);
         }
         final char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset
+        final int expPos = Math.max(str.indexOf('e'), str.indexOf('E')); // get the position of e or E
+
+        // if expPos is -1, it means neither e nor E was found, so +1 makes it 0, which is safe
+        final int expPosAdjusted = expPos == -1 ? -1 : expPos + 1;
 
         int numDecimals = 0; // Check required precision (LANG-693)
         if (decPos > -1) { // there is a decimal point
-
-            if (expPos > -1) { // there is an exponent
-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
+            if (expPosAdjusted > -1) { // there is an exponent
+                if (expPosAdjusted < decPos) { // exponent appears before the decimal point (invalid)
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
-                dec = str.substring(decPos + 1, expPos);
+                if (decPos < expPosAdjusted) {
+                    dec = str.substring(decPos + 1, expPosAdjusted - 1); // -1 because expPos is after 'e' or 'E'
+                } else {
+                    dec = "";
+                }
             } else {
                 dec = str.substring(decPos + 1);
             }
             mant = str.substring(0, decPos);
             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
         } else {
-            if (expPos > -1) {
-                if (expPos > str.length()) { // prevents double exponent causing IOOBE
-                    throw new NumberFormatException(str + " is not a valid number.");
+            if (expPosAdjusted > -1) {
+                if (expPosAdjusted > 0) { // there's content before the exponent
+                    mant = str.substring(0, expPosAdjusted - 1);
+                } else {
+                    mant = ""; // shouldn't happen since we check expPos > -1
                 }
-                mant = str.substring(0, expPos);
             } else {
                 mant = str;
             }
             dec = null;
         }
+
+        // Check for exponent part if present
+        String expStr = null;
+        if (expPosAdjusted > -1 && expPosAdjusted < str.length()) {
+            expStr = str.substring(expPosAdjusted);
+        }
+
         if (!Character.isDigit(lastChar) && lastChar != '.') {
-            if (expPos > -1 && expPos < str.length() - 1) {
-                exp = str.substring(expPos + 1, str.length() - 1);
-            } else {
-                exp = null;
+            if (expPosAdjusted > -1 && expPosAdjusted < str.length() - 1) {
+                expStr = str.substring(expPosAdjusted, str.length() - 1);
             }
             //Requesting a specific type..
             final String numeric = str.substring(0, str.length() - 1);
-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+            final boolean allZeros = isAllZeros(mant) && isAllZeros(expStr);
             switch (lastChar) {
                 case 'l' :
                 case 'L' :
                     if (dec == null
-                        && exp == null
+                        && expStr == null
                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                         try {
                             return createLong(numeric);
                         } catch (final NumberFormatException nfe) { // NOPMD
                             // Too big for a long
                         }
                         return createBigInteger(numeric);
-
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
                 case 'f' :
                 case 'F' :
                     try {
                         final Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
-
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    // Fall through to try Double
                 case 'd' :
                 case 'D' :
                     try {
                         final Double d = NumberUtils.createDouble(numeric);
-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                             return d;
                         }
                     } catch (final NumberFormatException nfe) { // NOPMD
                         // ignore the bad number
                     }
                     try {
                         return createBigDecimal(numeric);
                     } catch (final NumberFormatException e) { // NOPMD
                         // ignore the bad number
                     }
-                    //$FALL-THROUGH$
+                    throw new NumberFormatException(str + " is not a valid number.");
                 default :
                     throw new NumberFormatException(str + " is not a valid number.");
+            }
+        }
 
+        // Parse the exponent if present
+        int exponent = 0;
+        if (expStr != null) {
+            try {
+                exponent = Integer.parseInt(expStr.substring(1)); // skip 'e' or 'E' and optional sign
+                if (expStr.charAt(0) == '-') {
+                    exponent = -exponent;
+                } else if (Character.isDigit(expStr.charAt(0))) {
+                    // no sign, already parsed
+                } else if (expStr.charAt(0) == '+') {
+                    // positive exponent, already parsed
                 }
+            } catch (NumberFormatException e) {
+                throw new NumberFormatException(str + " is not a valid number (invalid exponent)");
             }
+        }
+
         //User doesn't have a preference on the return type, so let's start
         //small and go from there...
-        if (expPos > -1 && expPos < str.length() - 1) {
-            exp = str.substring(expPos + 1, str.length());
-        } else {
-            exp = null;
-        }
-        if (dec == null && exp == null) { // no decimal point and no exponent
+        if (dec == null && expStr == null) { // no decimal point and no exponent
             //Must be an Integer, Long, Biginteger
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             try {
                 return createLong(str);
             } catch (final NumberFormatException nfe) { // NOPMD
                 // ignore the bad number
             }
             return createBigInteger(str);
         }
 
         // Must be a Float, Double, BigDecimal
-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
+        // Determine the best type based on magnitude and precision
         try {
-                final Float f = createFloat(str);
-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                    return f;
+            // Try to parse as BigDecimal first to check if it's valid
+            BigDecimal bd = new BigDecimal(str);
+
+            // Now check if it fits in Float range without losing precision
+            if (Math.abs(exponent) <= 38) { // Approximate Float range
+                float fVal = bd.floatValue();
+                BigDecimal fBd = new BigDecimal(Float.toString(fVal));
+                // Compare with some tolerance due to floating point round-off
+                if (bd.subtract(fBd).abs().compareTo(new BigDecimal(1e-6)) <= 0) {
+                    // Check if it would overflow Float
+                    if (!Float.isInfinite(fVal)) {
+                        return Float.valueOf(fVal);
                     }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
                 }
-        try {
-                final Double d = createDouble(str);
-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
-                    return d;
             }
-        } catch (final NumberFormatException nfe) { // NOPMD
-            // ignore the bad number
+
+            // Check if it fits in Double range without losing precision
+            if (Math.abs(exponent) <= 308) { // Approximate Double range
+                double dVal = bd.doubleValue();
+                BigDecimal dBd = new BigDecimal(Double.toString(dVal));
+                // Compare with some tolerance due to floating point round-off
+                if (bd.subtract(dBd).abs().compareTo(new BigDecimal(1e-15)) <= 0) {
+                    // Check if it would overflow Double
+                    if (!Double.isInfinite(dVal)) {
+                        return Double.valueOf(dVal);
+                    }
+                }
             }
 
-        return createBigDecimal(str);
+            // If we get here, return as BigDecimal
+            return bd;
+        } catch (final NumberFormatException nfe) {
+            throw new NumberFormatException(str + " is not a valid number.");
+        }
     }
\ No newline at end of file
