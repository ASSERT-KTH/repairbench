diff --git a/tmp/70cffd85-29d5-4cc2-984c-1f5a81bc5a16_buggy.java b/tmp/50c8f887-dc34-4d89-aa06-461a7093cde1_fixed.java
index 19fe1b4..e5a554d 100644
--- a/tmp/70cffd85-29d5-4cc2-984c-1f5a81bc5a16_buggy.java
+++ b/tmp/50c8f887-dc34-4d89-aa06-461a7093cde1_fixed.java
@@ -1,17 +1,44 @@
 public static boolean isJSIdentifier(String s) {
     int length = s.length();
 
-      if (length == 0 ||
-          !Character.isJavaIdentifierStart(s.charAt(0))) {
+    if (length == 0) {
+        return false;
+    }
+
+    // First character must be a valid identifier start
+    char firstChar = s.charAt(0);
+    if (!Character.isJavaIdentifierStart(firstChar) &&
+        firstChar != '$' && firstChar != '_') {
         return false;
     }
 
     for (int i = 1; i < length; i++) {
-        if (
-            !Character.isJavaIdentifierPart(s.charAt(i))) {
+        char c = s.charAt(i);
+        if (!Character.isJavaIdentifierPart(c) &&
+            c != '$' && c != '\u200c' && c != '\u200d') { // Adding ZWNJ and ZWJ
             return false;
         }
     }
 
+    // Additional checks for reserved words would go here
+    return !isReservedWord(s);
+}
+
+// Helper method to check for reserved words
+private static boolean isReservedWord(String s) {
+    String[] reservedWords = {
+        "break", "case", "catch", "class", "const", "continue", "debugger",
+        "default", "delete", "do", "else", "enum", "export", "extends",
+        "false", "finally", "for", "function", "if", "import", "in",
+        "instanceof", "new", "null", "return", "super", "switch", "this",
+        "throw", "true", "try", "typeof", "var", "void", "while", "with",
+        "yield", "await", "let", "static", "implements", "interface",
+        "package", "private", "protected", "public"
+    };
+    for (String word : reservedWords) {
+        if (word.equals(s)) {
             return true;
         }
+    }
+    return false;
+}
\ No newline at end of file
