diff --git a/tmp/20fab22c-7a27-459a-9cf2-5f793a928575_buggy.java b/tmp/e5508b8c-b8c7-4aec-a4e3-22ba29d7ddde_fixed.java
index 2608424..79051dd 100644
--- a/tmp/20fab22c-7a27-459a-9cf2-5f793a928575_buggy.java
+++ b/tmp/e5508b8c-b8c7-4aec-a4e3-22ba29d7ddde_fixed.java
@@ -1,39 +1,21 @@
-    /**
-     * Convert to multidimensional counter.
-     *
-     * @param index Index in unidimensional counter.
-     * @return the multidimensional counts.
-     * @throws OutOfRangeException if {@code index} is not between
-     * {@code 0} and the value returned by {@link #getSize()} (excluded).
-     */
     public int[] getCounts(int index) {
         if (index < 0 ||
             index >= totalSize) {
             throw new OutOfRangeException(index, 0, totalSize);
         }
 
         final int[] indices = new int[dimension];
+        int remaining = index;
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
+        for (int i = 0; i < dimension; i++) {
             final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
+            if (offset != 0) {
+                indices[i] = remaining / offset;
+                remaining %= offset;
+            } else {
+                indices[i] = 0; // if offset is 0, assumes size 1 in this dimension
             }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
         }
 
-        int idx = 1;
-        while (count < index) {
-            count += idx;
-            ++idx;
-        }
-        --idx;
-        indices[last] = idx;
-
         return indices;
     }
\ No newline at end of file
