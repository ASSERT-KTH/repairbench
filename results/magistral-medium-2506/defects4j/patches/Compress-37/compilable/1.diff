diff --git a/tmp/8177bde6-3af9-4443-bb5b-d3470570b847_buggy.java b/tmp/d44d178f-e2a3-4cc4-a614-98b6702f754c_fixed.java
index 4b7e1e4..ccaf561 100644
--- a/tmp/8177bde6-3af9-4443-bb5b-d3470570b847_buggy.java
+++ b/tmp/d44d178f-e2a3-4cc4-a614-98b6702f754c_fixed.java
@@ -1,52 +1,77 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
+
+            // Read the length
             while((ch = i.read()) != -1) {
-                read++;
                 if (ch == ' ') {
+                    break;
+                }
+                len = len * 10 + (ch - '0');
+            }
+
+            if (ch == -1) { // EOF
+                break;
+            }
+            read++; // account for the space
+
+            if (len <= 0) {
+                // Skip blank lines or invalid lengths
+                // Read until newline (which should be the next character since length was 0)
+                while((ch = i.read()) != -1 && ch != '\n') {
+                    read++;
+                }
+                continue;
+            }
+
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == '='){ // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
-                            } else {
+                    if (restLen > 0) {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        // Drop trailing NL if present
+                        String value;
+                        if (rest.length > 0 && rest[rest.length - 1] == '\n') {
+                            value = new String(rest, 0, restLen - 1, CharsetNames.UTF_8);
+                        } else {
+                            value = new String(rest, CharsetNames.UTF_8);
+                        }
                         headers.put(keyword, value);
+                    } else if (restLen == 0) {
+                        headers.remove(keyword);
+                    }
+                    // Read the newline if it wasn't part of the restLen
+                    if (restLen <= 0) {
+                        ch = i.read();
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
-                }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
+
+            // If we didn't find a complete header, break
+            if (ch == -1) {
                 break;
             }
         }
         return headers;
     }
\ No newline at end of file
