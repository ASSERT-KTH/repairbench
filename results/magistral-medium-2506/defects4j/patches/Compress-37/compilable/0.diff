diff --git a/tmp/45c5968d-8c4b-46dc-a8b1-c5b4f50c7e1b_buggy.java b/tmp/be8aa934-1a72-424d-9d4d-a9265cf1712f_fixed.java
index 4b7e1e4..223b3e8 100644
--- a/tmp/45c5968d-8c4b-46dc-a8b1-c5b4f50c7e1b_buggy.java
+++ b/tmp/be8aa934-1a72-424d-9d4d-a9265cf1712f_fixed.java
@@ -1,52 +1,66 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
-            int read = 0;
-            while((ch = i.read()) != -1) {
-                read++;
-                if (ch == ' '){
+            while((ch = i.read()) != -1 && ch != ' ') {
+                len *= 10;
+                len += ch - '0';
+            }
+            if (ch == -1){ // EOF
+                break;
+            }
+
+            if (len > 0) {
                 // Get keyword
                 final ByteArrayOutputStream coll = new ByteArrayOutputStream();
+                int read = 0;
                 while((ch = i.read()) != -1) {
                     read++;
                     if (ch == '='){ // end of keyword
                         final String keyword = coll.toString(CharsetNames.UTF_8);
                         // Get rest of entry
                         final int restLen = len - read;
                         if (restLen == 1) { // only NL
                             headers.remove(keyword);
                         } else {
                             final byte[] rest = new byte[restLen];
                             final int got = IOUtils.readFully(i, rest);
                             if (got != restLen) {
                                 throw new IOException("Failed to read "
                                                       + "Paxheader. Expected "
                                                       + restLen
                                                       + " bytes, read "
                                                       + got);
                             }
                             // Drop trailing NL
                             final String value = new String(rest, 0,
                                                       restLen - 1, CharsetNames.UTF_8);
                             headers.put(keyword, value);
                         }
                         break;
                     }
                     coll.write((byte) ch);
                 }
-                    break; // Processed single header
+
+                // Read the newline character if present (not part of value)
+                if (len > read && len - read > 0) {
+                    final int remaining = len - read;
+                    // Skip the remaining bytes (including newline)
+                    final long skipped = i.skip(remaining);
+                    if (skipped < remaining) {
+                        throw new IOException("Failed to skip remaining bytes");
                     }
-                len *= 10;
-                len += ch - '0';
                 }
-            if (ch == -1){ // EOF
-                break;
+            } else {
+                // Skip empty lines
+                while ((ch = i.read()) != -1 && ch != '\n') {
+                    // Just read and discard until newline
+                }
             }
         }
         return headers;
     }
\ No newline at end of file
