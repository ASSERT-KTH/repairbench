diff --git a/tmp/c74dee4a-a141-41f6-a690-b880563ec0e3_buggy.java b/tmp/2040b1e7-9e9c-41a3-af01-930ae6cf1d76_fixed.java
index 4b7e1e4..8d735ec 100644
--- a/tmp/c74dee4a-a141-41f6-a690-b880563ec0e3_buggy.java
+++ b/tmp/2040b1e7-9e9c-41a3-af01-930ae6cf1d76_fixed.java
@@ -1,52 +1,72 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
+            // Read length
             while((ch = i.read()) != -1) {
-                read++;
                 if (ch == ' '){
+                    break;
+                }
+                if (ch < '0' || ch > '9') {
+                    throw new IOException("Invalid character in length field");
+                }
+                len = len * 10 + (ch - '0');
+                read++;
+            }
+            if (ch == -1){ // EOF
+                break;
+            }
+
+            if (len <= read) {
+                throw new IOException("Invalid length in PAX header");
+            }
+
             // Get keyword
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == '='){ // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
+                    if (restLen < 0) {
+                        throw new IOException("Invalid length in PAX header");
+                    }
                     if (restLen == 1) { // only NL
                         headers.remove(keyword);
                     } else {
-                                final byte[] rest = new byte[restLen];
+                        final byte[] rest = new byte[restLen - 1]; // subtract 1 for NL
                         final int got = IOUtils.readFully(i, rest);
-                                if (got != restLen) {
+                        if (got != rest.length) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
-                                                          + restLen
+                                                  + rest.length
                                                   + " bytes, read "
                                                   + got);
                         }
-                                // Drop trailing NL
-                                final String value = new String(rest, 0,
-                                                          restLen - 1, CharsetNames.UTF_8);
+                        // Read and drop trailing NL
+                        if (i.read() != '\n') {
+                            throw new IOException("Missing newline in PAX header");
+                        }
+                        final String value = new String(rest, CharsetNames.UTF_8);
                         headers.put(keyword, value);
                     }
                     break;
                 }
                 coll.write((byte) ch);
             }
-                    break; // Processed single header
+            // Skip to end of line if we're not already there
+            while((ch = i.read()) != -1 && ch != '\n') {
+                read++;
             }
-                len *= 10;
-                len += ch - '0';
-            }
-            if (ch == -1){ // EOF
-                break;
+            if (ch == -1 && read < len) { // EOF before end of line
+                throw new IOException("Unexpected EOF in PAX header");
             }
         }
         return headers;
     }
\ No newline at end of file
