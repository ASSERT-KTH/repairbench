diff --git a/tmp/6f6d19b6-baba-4111-ac94-4436ac86fbfc_buggy.java b/tmp/ebfffd2f-ea7e-48ef-975c-c2a05872f127_fixed.java
index 4b7e1e4..153853f 100644
--- a/tmp/6f6d19b6-baba-4111-ac94-4436ac86fbfc_buggy.java
+++ b/tmp/ebfffd2f-ea7e-48ef-975c-c2a05872f127_fixed.java
@@ -1,52 +1,68 @@
     // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
     Map<String, String> parsePaxHeaders(final InputStream i)
         throws IOException {
         final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
         // Format is "length keyword=value\n";
         while(true){ // get length
             int ch;
             int len = 0;
             int read = 0;
+            // Read length (until space)
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == ' '){
-                    // Get keyword
+                    break;
+                }
+                len *= 10;
+                len += ch - '0';
+            }
+            if (ch == -1){ // EOF
+                break;
+            }
+
+            // Now read the rest of the line: keyword=value\n
             final ByteArrayOutputStream coll = new ByteArrayOutputStream();
             while((ch = i.read()) != -1) {
                 read++;
                 if (ch == '='){ // end of keyword
                     final String keyword = coll.toString(CharsetNames.UTF_8);
                     // Get rest of entry
                     final int restLen = len - read;
-                            if (restLen == 1) { // only NL
-                                headers.remove(keyword);
+                    if (restLen <= 0) { // includes cases where restLen is 0 or negative
+                        // Just skip this line (likely blank line)
+                        // Read until newline to skip the rest of the line
+                        while((ch = i.read()) != -1 && ch != '\n') {
+                            // skip characters until newline
+                        }
+                        break;
                     } else {
                         final byte[] rest = new byte[restLen];
                         final int got = IOUtils.readFully(i, rest);
                         if (got != restLen) {
                             throw new IOException("Failed to read "
                                                   + "Paxheader. Expected "
                                                   + restLen
                                                   + " bytes, read "
                                                   + got);
                         }
                         // Drop trailing NL
                         final String value = new String(rest, 0,
                                                   restLen - 1, CharsetNames.UTF_8);
                         headers.put(keyword, value);
-                            }
-                            break;
-                        }
-                        coll.write((byte) ch);
+                        // Read the newline character
+                        i.read();
                     }
                     break; // Processed single header
                 }
-                len *= 10;
-                len += ch - '0';
+                coll.write((byte) ch);
             }
-            if (ch == -1){ // EOF
-                break;
+            if (ch == -1 || (ch == '\n' && read == 1)) { // EOF or blank line
+                // Read until next line if blank line
+                while((ch = i.read()) != -1 && ch != '\n') {
+                    // skip line
+                }
+                continue;
             }
         }
         return headers;
     }
\ No newline at end of file
