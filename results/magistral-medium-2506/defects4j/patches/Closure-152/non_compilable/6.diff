diff --git a/tmp/af9dcd61-6d68-469a-a3ec-a21cb9ee07f8_buggy.java b/tmp/00ac90f7-754b-4ed5-a6e9-cfa58ce34ee6_fixed.java
index 58a1651..76c3e89 100644
--- a/tmp/af9dcd61-6d68-469a-a3ec-a21cb9ee07f8_buggy.java
+++ b/tmp/00ac90f7-754b-4ed5-a6e9-cfa58ce34ee6_fixed.java
@@ -1,32 +1,59 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Bug fix: handle UnionType cases properly
+  JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+  if (resolvedThis.isUnionType()) {
+    UnionType union = resolvedThis.toMaybeUnionType();
+    if (union.isPartitioned()) {
+      // Try to extract object-type components from the union
+      List<ObjectType> objectComponents = new ArrayList<>();
+      for (JSType alt : union.getAlternates()) {
+        if (alt.isObjectType()) {
+          objectComponents.add((ObjectType) alt);
+        }
+      }
+      if (!objectComponents.isEmpty()) {
+        // If there are object components, use them (or a union of them)
+        if (objectComponents.size() == 1) {
+          typeOfThis = objectComponents.get(0);
+        } else {
+          // If multiple object types, create a union of just the object types
+          typeOfThis = new UnionType(objectComponents, false);
+        }
+      } else {
+        // If no object components, fall back to a warning (to be handled upstream)
+        typeOfThis = getNativeType(ObjectType.class);
+      }
+    } else {
+      // If not partitioned, just keep as union (upstream will handle warning)
+      typeOfThis = union;
+    }
+  } else {
+    typeOfThis = (ObjectType) resolvedThis;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
