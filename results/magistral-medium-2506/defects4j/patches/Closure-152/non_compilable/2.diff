diff --git a/tmp/1b199483-d5b7-4e02-b9e9-c181277b0b8b_buggy.java b/tmp/3acaf8e4-6f85-4fe3-94f5-7b30196f5a86_fixed.java
index 58a1651..d72b942 100644
--- a/tmp/1b199483-d5b7-4e02-b9e9-c181277b0b8b_buggy.java
+++ b/tmp/3acaf8e4-6f85-4fe3-94f5-7b30196f5a86_fixed.java
@@ -1,32 +1,58 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
+  // Handle UnionType case for typeOfThis
+  JSType resolvedThisType = safeResolve(typeOfThis, t, scope);
+  if (resolvedThisType instanceof UnionType) {
+    UnionType unionType = (UnionType) resolvedThisType;
+    List<ObjectType> objectComponents = new ArrayList<>();
+    // Check if all components of the union are ObjectTypes
+    boolean allObjectTypes = true;
+    for (JSType component : unionType.getAlternates()) {
+      if (component instanceof ObjectType) {
+        objectComponents.add((ObjectType) component);
+      } else {
+        allObjectTypes = false;
+      }
+    }
+
+    if (allObjectTypes) {
+      // If all components are ObjectTypes, we can treat the union as an ObjectType
+      typeOfThis = unionType;
+    } else {
+      // Otherwise report an error
+      t.report(JSTypeResolution.UNION_TYPE_RESOLVE_ERROR,
+          JSTypeResolution.WARNABLE_ERROR_FORMAT,
+          "type of this must be an object or union of objects. Found: " +
+          resolvedThisType.toString());
+      // Default to Object type
+      typeOfThis = getNativeType(thread.getNativeObjectObject());
+    }
+  } else {
     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
