diff --git a/tmp/24397df0-9941-4fae-9d9b-c8a8ab36ed13_buggy.java b/tmp/52d584f0-6832-487f-abc4-fbc1e8112f07_fixed.java
index 58a1651..b91968f 100644
--- a/tmp/24397df0-9941-4fae-9d9b-c8a8ab36ed13_buggy.java
+++ b/tmp/52d584f0-6832-487f-abc4-fbc1e8112f07_fixed.java
@@ -1,32 +1,56 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
   // Warning about typeOfThis if it doesn't resolve to an ObjectType
   // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  JSType resolvedThis = safeResolve(typeOfThis, t, scope);
+  if (!(resolvedThis instanceof ObjectType)) {
+    // If it's not an ObjectType but is a union that contains ObjectTypes,
+    // we should take the ObjectTypes. Otherwise, we'll let upstream handle the error.
+    if (resolvedThis instanceof UnionType) {
+      UnionType union = (UnionType) resolvedThis;
+      List<ObjectType> objectTypes = new ArrayList<>();
+      for (JSType type : union.getAlternates()) {
+        if (type instanceof ObjectType) {
+          objectTypes.add((ObjectType) type);
+        }
+      }
+      if (!objectTypes.isEmpty()) {
+        // If there are multiple object types, we'll just pick the first one
+        // This preserves existing behavior where only one ObjectType was expected
+        typeOfThis = (ObjectType) objectTypes.get(0);
+      } else {
+        // If there are no object types in the union, keep the original type and let upstream handle it
+        typeOfThis = (ObjectType) resolvedThis;
+      }
+    } else {
+      typeOfThis = (ObjectType) resolvedThis;
+    }
+  } else {
+    typeOfThis = (ObjectType) resolvedThis;
+  }
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
