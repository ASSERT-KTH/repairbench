diff --git a/tmp/05d7bc40-3140-49f6-a949-1154310ce235_buggy.java b/tmp/1e2a7389-78c4-40b3-ac6b-c3ba338336a6_fixed.java
index 58a1651..22ff57f 100644
--- a/tmp/05d7bc40-3140-49f6-a949-1154310ce235_buggy.java
+++ b/tmp/1e2a7389-78c4-40b3-ac6b-c3ba338336a6_fixed.java
@@ -1,32 +1,47 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle UnionType case by getting the underlying ObjectTypes
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      // If it's a union type, we need to ensure all components are ObjectTypes
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      for (JSType alternative : unionType.getAlternates()) {
+        if (!(alternative instanceof ObjectType)) {
+          // The error will be reported by the type checker
+          break;
+        }
+      }
+      // Keep the union type but let the type checker handle the validation
+      typeOfThis = unionType;
+    } else if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else {
+      // Let the type checker handle non-object types
+      typeOfThis = resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
