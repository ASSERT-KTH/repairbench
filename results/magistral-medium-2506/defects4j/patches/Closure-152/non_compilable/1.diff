diff --git a/tmp/80f4f205-9d7a-4e30-8330-07daec2a5ba4_buggy.java b/tmp/c9400685-b7b7-4b79-bb5c-6edf77b797d3_fixed.java
index 58a1651..a15fa3c 100644
--- a/tmp/80f4f205-9d7a-4e30-8330-07daec2a5ba4_buggy.java
+++ b/tmp/c9400685-b7b7-4b79-bb5c-6edf77b797d3_fixed.java
@@ -1,32 +1,50 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle typeOfThis which could be a UnionType
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType) {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    } else if (resolvedTypeOfThis instanceof UnionType) {
+      // Need to check if all components of the UnionType are ObjectTypes
+      UnionType unionType = (UnionType) resolvedTypeOfThis;
+      boolean allObjectTypes = true;
+      for (JSType constituent : unionType.getAlternates()) {
+        if (!(constituent instanceof ObjectType)) {
+          allObjectTypes = false;
+          break;
+        }
+      }
+      if (allObjectTypes) {
+        typeOfThis = unionType;
+      } else {
+        // Report error in a better way? For now, just keep the original type
+      }
+    } else {
+      // Keep the original type but this should be flagged as an error upstream
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
