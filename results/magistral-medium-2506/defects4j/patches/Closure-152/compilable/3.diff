diff --git a/tmp/221bd08d-5e7c-41a4-970c-28fb3fe2f616_buggy.java b/tmp/b671a9c9-3c1f-4633-9a6b-4ceed5a908e6_fixed.java
index 58a1651..fb55e99 100644
--- a/tmp/221bd08d-5e7c-41a4-970c-28fb3fe2f616_buggy.java
+++ b/tmp/b671a9c9-3c1f-4633-9a6b-4ceed5a908e6_fixed.java
@@ -1,32 +1,50 @@
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
   setResolvedTypeInternal(this);
 
   call = (ArrowType) safeResolve(call, t, scope);
   prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+  // Handle UnionType by checking if it's an ObjectType before casting
+  JSType resolvedThisType = safeResolve(typeOfThis, t, scope);
+  if (resolvedThisType instanceof UnionType) {
+    // Check if all components of the UnionType are ObjectTypes
+    boolean allObjectTypes = true;
+    UnionType unionType = (UnionType) resolvedThisType;
+    for (JSType alternate : unionType.getAlternates()) {
+      if (!(alternate instanceof ObjectType)) {
+        allObjectTypes = false;
+        break;
+      }
+    }
+    if (allObjectTypes) {
+      typeOfThis = (ObjectType) resolvedThisType;
+    } else {
+      // If not all are ObjectTypes, keep the existing type but leave a warning
+      // Warning will be handled upstream
+    }
+  } else if (resolvedThisType instanceof ObjectType) {
+    typeOfThis = (ObjectType) resolvedThisType;
+  }
+  // Keep original type if not resolvable to ObjectType
 
   boolean changed = false;
   ImmutableList.Builder<ObjectType> resolvedInterfaces =
       ImmutableList.builder();
   for (ObjectType iface : implementedInterfaces) {
     ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
     resolvedInterfaces.add(resolvedIface);
     changed |= (resolvedIface != iface);
   }
   if (changed) {
     implementedInterfaces = resolvedInterfaces.build();
   }
 
   if (subTypes != null) {
     for (int i = 0; i < subTypes.size(); i++) {
       subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
     }
   }
 
   return super.resolveInternal(t, scope);
 }
\ No newline at end of file
