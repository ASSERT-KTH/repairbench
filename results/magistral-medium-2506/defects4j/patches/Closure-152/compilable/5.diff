diff --git a/tmp/1d0ced6a-f2b1-4118-82d7-905f38978106_buggy.java b/tmp/3264174c-3381-4b50-be35-33fc46351aa0_fixed.java
index 58a1651..fc58c2b 100644
--- a/tmp/1d0ced6a-f2b1-4118-82d7-905f38978106_buggy.java
+++ b/tmp/3264174c-3381-4b50-be35-33fc46351aa0_fixed.java
@@ -1,32 +1,46 @@
   @Override
   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    // Handle UnionType cases for typeOfThis
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof UnionType) {
+      // Find an ObjectType in the union if possible, otherwise use the original type
+      TypeOfThisResolvedToObjectType:
+      for (JSType type : ((UnionType) resolvedTypeOfThis).getAlternates()) {
+        if (type instanceof ObjectType) {
+          typeOfThis = (ObjectType) type;
+          break TypeOfThisResolvedToObjectType;
+        }
+      }
+      // If no ObjectType found in union, use the original type (will be reported as error elsewhere)
+      if (!(typeOfThis instanceof ObjectType)) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+      }
+    } else {
+      typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
         ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
       ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
       resolvedInterfaces.add(resolvedIface);
       changed |= (resolvedIface != iface);
     }
     if (changed) {
       implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
       for (int i = 0; i < subTypes.size(); i++) {
         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
       }
     }
 
     return super.resolveInternal(t, scope);
   }
\ No newline at end of file
