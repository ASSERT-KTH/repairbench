diff --git a/tmp/7d31d524-17d3-4258-9c69-2f58eeeb0ec0_buggy.java b/tmp/4ee7eb45-b48f-42aa-98a1-0a6de881ad78_fixed.java
index 2573d30..c9c9156 100644
--- a/tmp/7d31d524-17d3-4258-9c69-2f58eeeb0ec0_buggy.java
+++ b/tmp/4ee7eb45-b48f-42aa-98a1-0a6de881ad78_fixed.java
@@ -1,20 +1,34 @@
   /**
    * Checks name referenced in node to determine if it might have
    * changed.
    * @return Whether the replacement can be made.
    */
   private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
       return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    Node child = node.getFirstChild();
+    if (child.isName()
+        && isNameAssignedTo(child.getString(), replacement)) {
       return false;
     }
 
+    // Check if the object being accessed is a property of another object
+    // that might have been reassigned
+    if (!child.isName() && isNameAssignedTo(child.getString(), replacement)) {
+      return false;
+    }
+
+    // Check the rest of the property access chain
+    while (!child.isName()) {
+      child = child.getFirstChild();
+      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
+        return false;
+      }
+    }
+
     return true;
   }
\ No newline at end of file
