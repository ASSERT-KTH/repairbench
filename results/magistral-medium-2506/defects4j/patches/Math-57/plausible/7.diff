diff --git a/tmp/0b1a11fb-e6ed-4a69-94b6-0728cd7b827a_buggy.java b/tmp/fa42ccdb-fa8b-45f7-92f3-4a386b29d70e_fixed.java
index ad4b0d8..76e5076 100644
--- a/tmp/0b1a11fb-e6ed-4a69-94b6-0728cd7b827a_buggy.java
+++ b/tmp/fa42ccdb-fa8b-45f7-92f3-4a386b29d70e_fixed.java
@@ -1,47 +1,57 @@
     /**
      * Use K-means++ to choose the initial centers.
      *
      * @param <T> type of the points to cluster
      * @param points the points to choose the initial centers from
      * @param k the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
         chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
 
         // Choose one center uniformly at random from among the data points.
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
             // For each data point x, compute D(x), the distance between x and
             // the nearest center that has already been chosen.
-            int sum = 0;
+            double sumDx2 = 0;
+            final double[] dx2 = new double[pointSet.size()];
             for (int i = 0; i < pointSet.size(); i++) {
                 final T p = pointSet.get(i);
                 final Cluster<T> nearest = getNearestCluster(resultSet, p);
                 final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
+                dx2[i] = d * d;
+                sumDx2 += dx2[i];
             }
 
             // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
+            // probability proportional to D(x)^2
+            if (sumDx2 > 0) {
+                final double r = random.nextDouble() * sumDx2;
+                double cumulativeSum = 0;
                 for (int i = 0; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
+                    cumulativeSum += dx2[i];
+                    if (cumulativeSum >= r) {
                         final T p = pointSet.remove(i);
                         resultSet.add(new Cluster<T>(p));
                         break;
                     }
                 }
+            } else {
+                // In case all distances are zero (all points coincide with existing centers),
+                // pick a random point from the remaining set
+                if (!pointSet.isEmpty()) {
+                    final T p = pointSet.remove(random.nextInt(pointSet.size()));
+                    resultSet.add(new Cluster<T>(p));
+                }
+            }
         }
 
         return resultSet;
-
     }
\ No newline at end of file
