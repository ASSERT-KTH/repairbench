diff --git a/tmp/c9d48f8a-00b7-4497-afdb-b61d3f4a5fd7_buggy.java b/tmp/5b38efe6-d927-48a6-bcea-902c441e0197_fixed.java
index 851ffc2..27d2c76 100644
--- a/tmp/c9d48f8a-00b7-4497-afdb-b61d3f4a5fd7_buggy.java
+++ b/tmp/5b38efe6-d927-48a6-bcea-902c441e0197_fixed.java
@@ -1,70 +1,108 @@
     /**
      * Replace the provide statement.
      *
      * If we're providing a name with no definition, then create one.
      * If we're providing a name with a duplicate definition, then make sure
      * that definition becomes a declaration.
      */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
         if (firstModule == minimumModule) {
           firstNode.getParent().addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
           int indexOfDot = namespace.indexOf('.');
           if (indexOfDot == -1) {
             // Any old place is fine.
             compiler.getNodeForCodeInsertion(minimumModule)
                 .addChildToBack(replacementNode);
           } else {
             // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+            String parentNamespace = namespace.substring(0, indexOfDot);
+            ProvidedName parentName = providedNames.get(parentNamespace);
+
+            // If parent namespace doesn't exist yet, we need to create it first
+            if (parentName == null || parentName.replacementNode == null) {
+              // Create all intermediate namespaces that might be missing
+              String currentNs = "";
+              String[] parts = namespace.split("\\.");
+              for (int i = 0; i < parts.length - 1; i++) {
+                currentNs += (currentNs.isEmpty() ? "" : ".") + parts[i];
+                ProvidedName partialName = providedNames.get(currentNs);
+                if (partialName == null || partialName.replacementNode == null) {
+                  Node nsNode = new Node(Token.ASSIGN);
+                  Node nameNode = new Node(Token.GETPROP);
+                  nameNode.addChildToBack(new Node(Token.NAME, parts[i]));
+                  if (i > 0) {
+                    Node left = new Node(Token.GETPROP);
+                    Node current = left;
+                    for (int j = 0; j < i; j++) {
+                      Node prop = new Node(Token.GETPROP);
+                      prop.addChildToBack(new Node(Token.NAME, parts[j]));
+                      if (j > 0) {
+                        current.addChildToBack(prop);
+                        current = prop;
+                      } else {
+                        current = prop;
+                      }
+                    }
+                    nameNode.addChildToBack(current);
+                  }
+                  nsNode.addChildToBack(nameNode);
+                  nsNode.addChildToBack(new Node(Token.OBJECTLIT));
+                  replacementNode.getParent().addChildBefore(nsNode, replacementNode);
+                  compiler.reportCodeChange();
+                }
+              }
+              // Now add our actual declaration
+              compiler.getNodeForCodeInsertion(minimumModule)
+                  .addChildToBack(replacementNode);
+            } else {
+              // Original logic when parent namespace exists
               parentName.replacementNode.getParent().addChildAfter(
                   replacementNode, parentName.replacementNode);
             }
           }
+        }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
