diff --git a/tmp/cf81d505-2503-415e-98dc-997e9fba243e_buggy.java b/tmp/d47a1b6c-0a66-4a7c-b738-83b110ad722d_fixed.java
index 851ffc2..6bd4a5a 100644
--- a/tmp/cf81d505-2503-415e-98dc-997e9fba243e_buggy.java
+++ b/tmp/d47a1b6c-0a66-4a7c-b738-83b110ad722d_fixed.java
@@ -1,70 +1,77 @@
-    /**
-     * Replace the provide statement.
-     *
-     * If we're providing a name with no definition, then create one.
-     * If we're providing a name with a duplicate definition, then make sure
-     * that definition becomes a declaration.
-     */
     void replace() {
       if (firstNode == null) {
         // Don't touch the base case ('goog').
         replacementNode = candidateDefinition;
         return;
       }
 
       // Handle the case where there is a duplicate definition for an explicitly
       // provided symbol.
       if (candidateDefinition != null && explicitNode != null) {
         explicitNode.detachFromParent();
         compiler.reportCodeChange();
 
         // Does this need a VAR keyword?
         replacementNode = candidateDefinition;
         if (NodeUtil.isExpressionNode(candidateDefinition)) {
           candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);
           Node assignNode = candidateDefinition.getFirstChild();
           Node nameNode = assignNode.getFirstChild();
           if (nameNode.getType() == Token.NAME) {
             // Need to convert this assign to a var declaration.
             Node valueNode = nameNode.getNext();
             assignNode.removeChild(nameNode);
             assignNode.removeChild(valueNode);
             nameNode.addChildToFront(valueNode);
             Node varNode = new Node(Token.VAR, nameNode);
             varNode.copyInformationFrom(candidateDefinition);
             candidateDefinition.getParent().replaceChild(
                 candidateDefinition, varNode);
             nameNode.setJSDocInfo(assignNode.getJSDocInfo());
             compiler.reportCodeChange();
             replacementNode = varNode;
           }
         }
       } else {
         // Handle the case where there's not a duplicate definition.
         replacementNode = createDeclarationNode();
+
+        // Special handling for nested namespaces
+        String parentNamespace = null;
+        String thisNamespace = namespace;
+        int lastDot = namespace.lastIndexOf('.');
+        if (lastDot > 0) {
+          parentNamespace = namespace.substring(0, lastDot);
+          thisNamespace = namespace.substring(lastDot + 1);
+        }
+
         if (firstModule == minimumModule) {
-          firstNode.getParent().addChildBefore(replacementNode, firstNode);
+          // Place it before the firstNode (which will be in the same module)
+          Node parent = firstNode.getParent();
+          parent.addChildBefore(replacementNode, firstNode);
         } else {
           // In this case, the name was implicitly provided by two independent
           // modules. We need to move this code up to a common module.
-          int indexOfDot = namespace.indexOf('.');
-          if (indexOfDot == -1) {
-            // Any old place is fine.
-            compiler.getNodeForCodeInsertion(minimumModule)
-                .addChildToBack(replacementNode);
-          } else {
+          if (parentNamespace != null && parentNamespace.length() > 0) {
             // Add it after the parent namespace.
-            ProvidedName parentName =
-                providedNames.get(namespace.substring(0, indexOfDot));
-            Preconditions.checkNotNull(parentName);
-            Preconditions.checkNotNull(parentName.replacementNode);
+            ProvidedName parentName = providedNames.get(parentNamespace);
+            if (parentName != null && parentName.replacementNode != null) {
               parentName.replacementNode.getParent().addChildAfter(
                   replacementNode, parentName.replacementNode);
+            } else {
+              // If parent namespace not found, add to the common module
+              compiler.getNodeForCodeInsertion(minimumModule)
+                  .addChildToBack(replacementNode);
+            }
+          } else {
+            // Top-level namespace case
+            compiler.getNodeForCodeInsertion(minimumModule)
+                .addChildToBack(replacementNode);
           }
         }
         if (explicitNode != null) {
           explicitNode.detachFromParent();
         }
         compiler.reportCodeChange();
       }
     }
\ No newline at end of file
