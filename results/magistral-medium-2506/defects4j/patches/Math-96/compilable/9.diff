diff --git a/tmp/e26dc064-cc6c-44e3-a220-8237bdfed8f2_buggy.java b/tmp/a8b40ab3-97fd-434c-aaac-3b990a94eb33_fixed.java
index f674e52..2ff7baa 100644
--- a/tmp/e26dc064-cc6c-44e3-a220-8237bdfed8f2_buggy.java
+++ b/tmp/a8b40ab3-97fd-434c-aaac-3b990a94eb33_fixed.java
@@ -1,41 +1,19 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
     public boolean equals(Object other) {
-        boolean ret;
-        
         if (this == other) {
-            ret = true;
-        } else if (other == null) {
-            ret = false;
-        } else  {
-            try {
+            return true;
+        }
+        if (other == null) {
+            return false;
+        }
+        if (!(other instanceof Complex)) {
+            return false;
+        }
         Complex rhs = (Complex)other;
-                if (rhs.isNaN()) {
-                    ret = this.isNaN();
-                } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
-                }
-            } catch (ClassCastException ex) {
-                // ignore exception
-                ret = false;
-            }
+
+        if (this.isNaN() || rhs.isNaN()) {
+            return this.isNaN() && rhs.isNaN();
         }
 
-        return ret;
+        return Double.compare(real, rhs.getReal()) == 0 &&
+               Double.compare(imaginary, rhs.getImaginary()) == 0;
     }
\ No newline at end of file
