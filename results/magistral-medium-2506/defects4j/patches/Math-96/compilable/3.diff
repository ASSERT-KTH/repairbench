diff --git a/tmp/c3e9d479-bdf9-4f73-9ee2-c9cc1c6a1352_buggy.java b/tmp/d3561c28-625f-4e58-9978-705453d6c760_fixed.java
index f674e52..7052b95 100644
--- a/tmp/c3e9d479-bdf9-4f73-9ee2-c9cc1c6a1352_buggy.java
+++ b/tmp/d3561c28-625f-4e58-9978-705453d6c760_fixed.java
@@ -1,41 +1,28 @@
-    /**
-     * Test for the equality of two Complex objects.
-     * <p>
-     * If both the real and imaginary parts of two Complex numbers
-     * are exactly the same, and neither is <code>Double.NaN</code>, the two
-     * Complex objects are considered to be equal.</p>
-     * <p>
-     * All <code>NaN</code> values are considered to be equal - i.e, if either
-     * (or both) real and imaginary parts of the complex number are equal
-     * to <code>Double.NaN</code>, the complex number is equal to 
-     * <code>Complex.NaN</code>.</p>
-     *
-     * @param other Object to test for equality to this
-     * @return true if two Complex objects are equal, false if
-     *         object is null, not an instance of Complex, or
-     *         not equal to this Complex instance
-     * 
-     */
     public boolean equals(Object other) {
         boolean ret;
 
         if (this == other) {
             ret = true;
         } else if (other == null) {
             ret = false;
         } else {
             try {
                 Complex rhs = (Complex)other;
+                if (this.isNaN()) {
+                    ret = rhs.isNaN();
+                } else {
+                    // Check if rhs is NaN, if so return false since this is not NaN
                     if (rhs.isNaN()) {
-                    ret = this.isNaN();
+                        ret = false;
                     } else {
-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                        ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) &&
+                              (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));
+                    }
                 }
             } catch (ClassCastException ex) {
-                // ignore exception
                 ret = false;
             }
         }
 
         return ret;
     }
\ No newline at end of file
