diff --git a/tmp/fc1bccbe-8774-4933-82fa-ec668048ceaa_buggy.java b/tmp/014fe561-2575-480a-a202-491af10adaa6_fixed.java
index e8705ac..ab500e2 100644
--- a/tmp/fc1bccbe-8774-4933-82fa-ec668048ceaa_buggy.java
+++ b/tmp/014fe561-2575-480a-a202-491af10adaa6_fixed.java
@@ -1,24 +1,34 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
+      // Keep track of the "this" context of a call. A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
-
       if (!NodeUtil.isGet(first)) {
+        // Also check if it's a property access call pattern (obj.method())
+        boolean isFreeCall = true;
+        if (first.isGetProp()) {
+          Node target = first.getFirstChild();
+          // If the target is a NEW or GETPROP chain, it's not a free call
+          if (target != null && (target.isNew() || target.isGetProp())) {
+            isFreeCall = false;
+          }
+        }
+        if (isFreeCall) {
           n.putBooleanProp(Node.FREE_CALL, true);
         }
+      }
 
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
