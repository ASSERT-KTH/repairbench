diff --git a/tmp/5fdcf9e1-c0a6-4212-937a-92bccbfa5a3c_buggy.java b/tmp/6fec5f68-ef95-4f9b-9008-38ac263f4865_fixed.java
index e8705ac..b29ffdd 100644
--- a/tmp/5fdcf9e1-c0a6-4212-937a-92bccbfa5a3c_buggy.java
+++ b/tmp/6fec5f68-ef95-4f9b-9008-38ac263f4865_fixed.java
@@ -1,24 +1,39 @@
     /**
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
     private void annotateCalls(Node n) {
       Preconditions.checkState(n.isCall());
 
       // Keep track of of the "this" context of a call.  A call without an
       // explicit "this" is a free call.
       Node first = n.getFirstChild();
 
       // ignore cast nodes.
+      boolean isFreeCall = true;
+      Node target = first;
 
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
+      // Skip through cast nodes
+      while (target.isCast()) {
+        target = target.getFirstChild();
       }
 
+      // If it's a GET node (property access), it's not a free call
+      if (NodeUtil.isGet(target) || target.isGetProp() || target.isGetElem()) {
+        isFreeCall = false;
+      } else if (target.isName()) {
+        // For simple names, we need to check if it's actually a free call
+        isFreeCall = true;
+      } else {
+        isFreeCall = false;
+      }
+
+      n.putBooleanProp(Node.FREE_CALL, isFreeCall);
+
       // Keep track of the context in which eval is called. It is important
       // to distinguish between "(0, eval)()" and "eval()".
       if (first.isName() &&
           "eval".equals(first.getString())) {
         first.putBooleanProp(Node.DIRECT_EVAL, true);
       }
     }
\ No newline at end of file
