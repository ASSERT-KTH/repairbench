diff --git a/tmp/cf826fbc-fc5b-4a82-ad2f-e97417c59ec6_buggy.java b/tmp/bcd375db-5ac9-49f9-a73e-0d97115107d4_fixed.java
index 1303a19..38ba21b 100644
--- a/tmp/cf826fbc-fc5b-4a82-ad2f-e97417c59ec6_buggy.java
+++ b/tmp/bcd375db-5ac9-49f9-a73e-0d97115107d4_fixed.java
@@ -1,45 +1,56 @@
 private Node tryFoldArrayAccess(Node n, Node left, Node right) {
     Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
+    // If GETPROP/GETELEM is used as assignment target we can't fold it here:
     //    "[][0] += 1"
 
+    if (parent.getType() == Token.ASSIGN) {
+      // Don't fold if we're on the left side of an assignment
+      return n;
+    }
+
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
-    for (int i = 0; elem != null && i < intIndex; i++) {
+    int count = 0;
+    while (elem != null && count < intIndex) {
       elem = elem.getNext();
+      count++;
     }
 
     if (elem == null) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
+      // Don't remove child if it's an assignment (we have the parent check above)
+      // or if it's part of an array literal being modified
+      if (parent.getType() != Token.ASSIGN &&
+          !(parent.isAssigned() && parent.getParent().getType() == Token.ASSIGN)) {
         left.removeChild(elem);
       }
+    }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
 }
\ No newline at end of file
