diff --git a/tmp/1186c200-9f21-4051-8c30-7c7c9216195b_buggy.java b/tmp/6e56bf20-a47c-4a41-b96b-eceb63a67083_fixed.java
index 1303a19..e57d58e 100644
--- a/tmp/1186c200-9f21-4051-8c30-7c7c9216195b_buggy.java
+++ b/tmp/6e56bf20-a47c-4a41-b96b-eceb63a67083_fixed.java
@@ -1,45 +1,67 @@
   private Node tryFoldArrayAccess(Node n, Node left, Node right) {
-    Node parent = n.getParent();
-    // If GETPROP/GETELEM is used as assignment target the array literal is
-    // acting as a temporary we can't fold it here:
-    //    "[][0] += 1"
+    // If GETPROP/GETELEM is used as assignment target, don't fold it
+    // For cases like "[][0] = 1" or "[][0] += 1"
+    if (parentCouldIsAssignmentTarget(n)) {
+      return n;
+    }
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into
       // arrays, or strings to index into array methods.
       return n;
     }
 
     double index = right.getDouble();
     int intIndex = (int) index;
     if (intIndex != index) {
       error(INVALID_GETELEM_INDEX_ERROR, right);
       return n;
     }
 
     if (intIndex < 0) {
       error(INDEX_OUT_OF_BOUNDS_ERROR, right);
       return n;
     }
 
     Node elem = left.getFirstChild();
     for (int i = 0; elem != null && i < intIndex; i++) {
       elem = elem.getNext();
     }
 
     if (elem == null) {
-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
-      return n;
+      return n; // Don't report error since we might be in assignment context
     }
 
     if (elem.getType() == Token.EMPTY) {
       elem = NodeUtil.newUndefinedNode(elem);
     } else {
       left.removeChild(elem);
     }
 
     // Replace the entire GETELEM with the value
     n.getParent().replaceChild(n, elem);
     reportCodeChange();
     return elem;
   }
+
+  private boolean parentCouldIsAssignmentTarget(Node n) {
+    Node parent = n.getParent();
+    if (parent == null) return false;
+
+    int parentType = parent.getType();
+    if (parentType == Token.ASSIGN ||
+        parentType == Token.ASSIGN_ADD ||
+        parentType == Token.ASSIGN_SUB ||
+        parentType == Token.ASSIGN_MUL ||
+        parentType == Token.ASSIGN_DIV ||
+        parentType == Token.ASSIGN_MOD ||
+        parentType == Token.ASSIGN_BITOR ||
+        parentType == Token.ASSIGN_BITXOR ||
+        parentType == Token.ASSIGN_BITAND ||
+        parentType == Token.ASSIGN_LSH ||
+        parentType == Token.ASSIGN_RSH ||
+        parentType == Token.ASSIGN_URSH) {
+      return true;
+    }
+    return false;
+  }
\ No newline at end of file
