diff --git a/tmp/73d5fd31-5040-4e64-8af5-c58bca7fb63b_buggy.java b/tmp/e3fa1e75-96ee-4539-8ff1-bb9320693953_fixed.java
index 4e8b037..542aaa4 100644
--- a/tmp/73d5fd31-5040-4e64-8af5-c58bca7fb63b_buggy.java
+++ b/tmp/e3fa1e75-96ee-4539-8ff1-bb9320693953_fixed.java
@@ -1,20 +1,50 @@
-    public List getValues(final Option option,
-                          List defaultValues) {
+public List getValues(final Option option, List defaultValues) {
     // initialize the return list
     List valueList = (List) values.get(option);
 
     // grab the correct default values
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = defaultValues;
     }
 
     // augment the list with the default values
     if ((valueList == null) || valueList.isEmpty()) {
         valueList = (List) this.defaultValues.get(option);
     }
-                // if there are more default values as specified, add them to
-                // the list.
-                    // copy the list first
+    // When valueList is not empty, we may still need to append default values
+    else if (defaultValues != null && !defaultValues.isEmpty()) {
+        // Get the argument configuration to determine max number of values
+        Argument arg = option.getArgument();
+        if (arg != null) {
+            int maxArgs = arg.getMaximum();
+            if (maxArgs == -1) { // unlimited
+                maxArgs = Integer.MAX_VALUE;
+            }
+
+            // Only append default values if we haven't reached the max limit
+            if (valueList.size() < maxArgs) {
+                // Create a new list with input values followed by default values
+                List mergedList = new ArrayList();
+                mergedList.addAll(valueList);
+
+                // Add remaining default values (those that can fit within the max limit)
+                int remainingCapacity = maxArgs - valueList.size();
+                int defaultValuesIndex = 0;
+                while (mergedList.size() < maxArgs && defaultValuesIndex < defaultValues.size()) {
+                    if (remainingCapacity > 0 || maxArgs == -1) {
+                        mergedList.add(defaultValues.get(defaultValuesIndex));
+                        defaultValuesIndex++;
+                        if (remainingCapacity > 0) {
+                            remainingCapacity--;
+                        }
+                    } else {
+                        break;
+                    }
+                }
+                valueList = mergedList;
+            }
+        }
+    }
 
     return valueList == null ? Collections.EMPTY_LIST : valueList;
 }
\ No newline at end of file
