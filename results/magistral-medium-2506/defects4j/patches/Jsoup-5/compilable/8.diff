diff --git a/tmp/478600c6-3f08-4eb9-893e-33ebe35538a7_buggy.java b/tmp/0de2b621-dbe9-479c-836e-50ba269e4cba_fixed.java
index 39dd8e7..872a24d 100644
--- a/tmp/478600c6-3f08-4eb9-893e-33ebe35538a7_buggy.java
+++ b/tmp/0de2b621-dbe9-479c-836e-50ba269e4cba_fixed.java
@@ -1,30 +1,38 @@
     private Attribute parseAttribute() {
         tq.consumeWhitespace();
         String key = tq.consumeAttributeKey();
         String value = "";
         tq.consumeWhitespace();
         if (tq.matchChomp("=")) {
             tq.consumeWhitespace();
 
             if (tq.matchChomp(SQ)) {
                 value = tq.chompTo(SQ);
             } else if (tq.matchChomp(DQ)) {
                 value = tq.chompTo(DQ);
             } else {
                 StringBuilder valueAccum = new StringBuilder();
                 // no ' or " to look for, so scan to end tag or space (or end of stream)
-                while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) {
+                while (!tq.isEmpty() && !tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace()) {
                     valueAccum.append(tq.consume());
                 }
                 value = valueAccum.toString();
             }
             tq.consumeWhitespace();
         }
         if (key.length() != 0)
             return Attribute.createFromEncoded(key, value);
         else {
+            // Consume the erroneous content to recover
+            if (!tq.isEmpty()) {
+                if (tq.matchChomp("=")) {
+                    while (!tq.isEmpty() && !tq.matchesWhitespace() && !tq.matchesAny("<", "/>", ">")) {
                         tq.consume();
-                
+                    }
+                } else {
+                    tq.consume();
+                }
+            }
             return null;
         }
     }
\ No newline at end of file
