diff --git a/tmp/e8ffc8b7-a8f1-4ac8-ab5e-105205e6b0a7_buggy.java b/tmp/cb75268a-651d-4aa5-a82e-879601c70f81_fixed.java
index fecb896..be6afb3 100644
--- a/tmp/e8ffc8b7-a8f1-4ac8-ab5e-105205e6b0a7_buggy.java
+++ b/tmp/cb75268a-651d-4aa5-a82e-879601c70f81_fixed.java
@@ -1,34 +1,53 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+            boolean escaped = last == ESC;
+
+            // Handle quotes
+            if (c.equals('\'') || c.equals('"')) {
+                if (!escaped) {
+                    if (inQuote) {
+                        if (c.equals(quoteChar)) {
+                            inQuote = false;
+                            quoteChar = 0;
+                        }
+                    } else {
+                        inQuote = true;
+                        quoteChar = c;
+                    }
+                }
+            }
+
+            // Only count brackets if not in a quote or escaped
+            if (!inQuote && !escaped) {
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
                 }
-                else if (c.equals(close))
+                else if (c.equals(close)) {
                     depth--;
                 }
+            }
 
-            if (depth > 0 && last != 0)
+            if (depth > 0 && !inQuote)
                 end = pos; // don't include the outer match pair in the return
             last = c;
-        } while (depth > 0);
+        } while (depth > 0 || inQuote);
+
+        // Reset position if we ended in a quote (malformed input)
+        if (inQuote) {
+            pos = 0; // or handle differently?
+            return "";
+        }
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
