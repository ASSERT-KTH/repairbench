diff --git a/tmp/25718f2d-2f4d-487c-8f86-512ce919e1f8_buggy.java b/tmp/bca7b447-650b-47f1-b28d-36bba354ac84_fixed.java
index fecb896..bbb898c 100644
--- a/tmp/25718f2d-2f4d-487c-8f86-512ce919e1f8_buggy.java
+++ b/tmp/bca7b447-650b-47f1-b28d-36bba354ac84_fixed.java
@@ -1,34 +1,54 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
+
+            if (escaped) {
+                // if escaped, skip the next character's special meaning
+                escaped = false;
+                continue;
+            }
+
+            if (c.equals('\\')) {
+                escaped = true;
+                continue;
+            }
+
+            if (c.equals('\'') && !inDoubleQuote) {
+                inSingleQuote = !inSingleQuote;
+                continue;
+            }
+
+            if (c.equals('\"') && !inSingleQuote) {
+                inDoubleQuote = !inDoubleQuote;
+                continue;
+            }
+
+            if (!inSingleQuote && !inDoubleQuote) {
                 if (c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
                 }
                 else if (c.equals(close))
                     depth--;
             }
 
             if (depth > 0 && last != 0)
                 end = pos; // don't include the outer match pair in the return
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        if (end == -1 && start != -1) // case where we started but didn't end balance. return what we have.
+            end = pos;
+
+        return (start >= 0 && end >= start) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
