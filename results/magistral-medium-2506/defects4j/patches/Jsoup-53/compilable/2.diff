diff --git a/tmp/124ab3d2-75cb-405e-a701-6dbebdec806c_buggy.java b/tmp/4ef70eb9-36ed-42f7-acc7-cf4dfd7d8de7_fixed.java
index fecb896..d7f2ceb 100644
--- a/tmp/124ab3d2-75cb-405e-a701-6dbebdec806c_buggy.java
+++ b/tmp/4ef70eb9-36ed-42f7-acc7-cf4dfd7d8de7_fixed.java
@@ -1,34 +1,46 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inQuote = false;
+        char quoteChar = 0;
 
         do {
             if (isEmpty()) break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            // Handle quotes
+            if ((c == '\'' || c == '"') && last != ESC) {
+                if (inQuote) {
+                    if (c == quoteChar) {
+                        inQuote = false; // closing quote
+                    }
+                } else {
+                    inQuote = true;
+                    quoteChar = c.charValue();
+                }
+            }
+
+            if (!inQuote) {
+                if ((last == 0 || last != ESC) && c.equals(open)) {
                     depth++;
                     if (start == -1)
                         start = pos;
-                }
-                else if (c.equals(close))
+                } else if ((last == 0 || last != ESC) && c.equals(close)) {
                     depth--;
+                    if (depth == 0) end = pos; // don't include the closing bracket in the return
+                }
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth > 0)
+                end = pos; // keep updating end position while we're in the balanced section
             last = c;
         } while (depth > 0);
+
+        // If we're still in a quote when we run out of chars, treat it as unbalanced
+        if (inQuote) {
+            return "";
+        }
+
         return (end >= 0) ? queue.substring(start, end) : "";
     }
\ No newline at end of file
