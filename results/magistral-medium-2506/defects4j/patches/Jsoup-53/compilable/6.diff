diff --git a/tmp/f4d7854c-4ee7-43e6-8ac3-b892e2fc7e99_buggy.java b/tmp/55fbc490-bb01-49df-adb6-e7cb8a33f602_fixed.java
index fecb896..48c5837 100644
--- a/tmp/f4d7854c-4ee7-43e6-8ac3-b892e2fc7e99_buggy.java
+++ b/tmp/55fbc490-bb01-49df-adb6-e7cb8a33f602_fixed.java
@@ -1,34 +1,46 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
 public String chompBalanced(char open, char close) {
     int start = -1;
-        int end = -1;
     int depth = 0;
     char last = 0;
+    boolean inQuote = false;
+    char quoteChar = 0;
 
-        do {
-            if (isEmpty()) break;
+    while (!isEmpty()) {
         Character c = consume();
-            if (last == 0 || last != ESC) {
+        if (inQuote) {
+            if (c.equals(quoteChar)) {
+                inQuote = false;
+                quoteChar = 0;
+            } else if (c.equals('\\')) {
+                // skip the next character (it's escaped)
+                if (!isEmpty()) {
+                    consume();
+                }
+            }
+            continue;
+        }
+
+        if (c.equals('\'') || c.equals('"')) {
+            inQuote = true;
+            quoteChar = c;
+            continue;
+        }
+
+        if (last != '\\') {
             if (c.equals(open)) {
                 depth++;
                 if (start == -1)
-                        start = pos;
+                    start = pos - 1; // include the opener
             }
-                else if (c.equals(close))
+            else if (c.equals(close)) {
                 depth--;
+                if (depth == 0) {
+                    // found close match, break and include the closer
+                    return queue.substring(start, pos);
                 }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
-            last = c;
-        } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+            }
+        }
+        last = c.equals('\\') ? '\\' : 0; // track if last was backslash
+    }
+    return "";
 }
\ No newline at end of file
