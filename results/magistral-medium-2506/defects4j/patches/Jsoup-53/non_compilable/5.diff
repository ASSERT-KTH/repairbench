diff --git a/tmp/46958fde-44de-49c4-9a0c-17b28dd4d1ad_buggy.java b/tmp/29e73da1-732d-4825-82fb-ba52af13e853_fixed.java
index fecb896..696829f 100644
--- a/tmp/46958fde-44de-49c4-9a0c-17b28dd4d1ad_buggy.java
+++ b/tmp/29e73da1-732d-4825-82fb-ba52af13e853_fixed.java
@@ -1,34 +1,62 @@
     /**
      * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
      * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
      * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
      * contains text strings; use unescape for that.
      * @param open opener
      * @param close closer
      * @return data matched from the queue
      */
     public String chompBalanced(char open, char close) {
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
+        boolean inSingleQuote = false;
+        boolean inDoubleQuote = false;
+        boolean escaped = false;
 
         do {
             if (isEmpty()) break;
-            Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            char c = consume().charValue();
+
+            // handle quoting and escaping
+            if (!escaped) {
+                if (c == '\\') {
+                    escaped = true;
+                } else if (c == '\'' && !inDoubleQuote) {
+                    inSingleQuote = !inSingleQuote;
+                } else if (c == '"' && !inSingleQuote) {
+                    inDoubleQuote = !inDoubleQuote;
+                }
+            } else {
+                escaped = false; // reset escape state after processing escaped character
+            }
+
+            // only process open/close if not in quotes
+            if (!inSingleQuote && !inDoubleQuote && !escaped) {
+                if (c == open) {
                     depth++;
-                    if (start == -1)
-                        start = pos;
+                    if (start == -1) {
+                        start = pos - 1; // include the opener in the result
                     }
-                else if (c.equals(close))
+                } else if (c == close) {
                     depth--;
+                    if (depth == 0) {
+                        end = pos; // include up to but not including the closer
+                    }
+                }
             }
 
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth > 0 && start != -1) {
+                end = pos; // update end position as we go
+            }
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        if (start != -1 && end != -1) {
+            return queue.substring(start + 1, end); // exclude the open/close chars
+        } else {
+            return "";
+        }
     }
\ No newline at end of file
