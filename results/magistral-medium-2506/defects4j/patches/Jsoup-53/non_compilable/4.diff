diff --git a/tmp/23122c8a-2435-4841-81c5-b6a0d2d57ffe_buggy.java b/tmp/30d3ead0-e768-4ccd-898e-e0e090e43409_fixed.java
index fecb896..10eb9e4 100644
--- a/tmp/23122c8a-2435-4841-81c5-b6a0d2d57ffe_buggy.java
+++ b/tmp/30d3ead0-e768-4ccd-898e-e0e090e43409_fixed.java
@@ -1,34 +1,38 @@
-    /**
-     * Pulls a balanced string off the queue. E.g. if queue is "(one (two) three) four", (,) will return "one (two) three",
-     * and leave " four" on the queue. Unbalanced openers and closers can quoted (with ' or ") or escaped (with \). Those escapes will be left
-     * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for
-     * contains text strings; use unescape for that.
-     * @param open opener
-     * @param close closer
-     * @return data matched from the queue
-     */
     public String chompBalanced(char open, char close) {
+        if (isEmpty())
+            return "";
+
         int start = -1;
         int end = -1;
         int depth = 0;
         char last = 0;
 
         do {
-            if (isEmpty()) break;
+            if (isEmpty())
+                break;
             Character c = consume();
-            if (last == 0 || last != ESC) {
-                if (c.equals(open)) {
+            if (last != ESC) {
+                if (c.equals(open) && (last == 0 || last == SPACE)) { // Handle case where open appears after space
                     depth++;
                     if (start == -1)
-                        start = pos;
+                        start = pos - 1;
                 }
                 else if (c.equals(close))
                     depth--;
             }
-
-            if (depth > 0 && last != 0)
-                end = pos; // don't include the outer match pair in the return
+            if (depth > 0) {
+                if (end == -1 && start != -1)
+                    end = pos - 1;
+                else if (start != -1)
+                    end = pos;
+            }
             last = c;
         } while (depth > 0);
-        return (end >= 0) ? queue.substring(start, end) : "";
+
+        if (end >= 0 && start >= 0 && start < end)
+            return queue.substring(start, end);
+        else if (start >= 0) // Handle case where we have an opener but no closer (unbalanced)
+            return ""; // or perhaps return everything from start to end of queue?
+        else
+            return "";
     }
\ No newline at end of file
