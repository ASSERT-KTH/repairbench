diff --git a/tmp/f05b3a4f-fcba-47d5-8200-98c6c2001be0_buggy.java b/tmp/e0f7c867-df50-4943-bee7-d6df74347996_fixed.java
index 9353941..dfd93e1 100644
--- a/tmp/f05b3a4f-fcba-47d5-8200-98c6c2001be0_buggy.java
+++ b/tmp/e0f7c867-df50-4943-bee7-d6df74347996_fixed.java
@@ -1,30 +1,50 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+        // For assignments that have reads before them in the tree,
+        // we need to properly report the first reference
+        if (state == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        }
+        // Only return KILL if we haven't seen a READ before
+        boolean hasPriorRead = false;
+        for (Node sibling = n.getFirstChild();
+             sibling != child && sibling != null;
+             sibling = sibling.getNext()) {
+          if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
+            VariableLiveness siblingState = isVariableReadBeforeKill(sibling, variable);
+            if (siblingState == VariableLiveness.READ) {
+              hasPriorRead = true;
+              break;
+            }
+          }
+        }
+        if (!hasPriorRead) {
+          return VariableLiveness.KILL;
+        }
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
