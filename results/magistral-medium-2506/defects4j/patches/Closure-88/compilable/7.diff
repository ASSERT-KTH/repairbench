diff --git a/tmp/cd129101-0147-4615-9728-423b4579bee7_buggy.java b/tmp/f3466aba-4ba2-4723-bda9-10e6154dab00_fixed.java
index 9353941..33babfd 100644
--- a/tmp/cd129101-0147-4615-9728-423b4579bee7_buggy.java
+++ b/tmp/f3466aba-4ba2-4723-bda9-10e6154dab00_fixed.java
@@ -1,30 +1,44 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
+  // Track whether we've seen a READ or KILL
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
+
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+      if (childState == VariableLiveness.KILL) {
+        if (result == VariableLiveness.MAYBE_LIVE) {
+          result = VariableLiveness.READ; // A KILL after a READ is still READ
         }
+      } else if (childState == VariableLiveness.READ) {
+        if (result == VariableLiveness.MAYBE_LIVE) {
+          // First occurrence is a read - set result
+          result = VariableLiveness.READ;
+        } else if (result == VariableLiveness.KILL) {
+          // We already had a kill, but now we have a read before it
+          // in execution order (right-to-left evaluation)
+          return VariableLiveness.READ;
         }
       }
-    return VariableLiveness.MAYBE_LIVE;
+      // For MAYBE_LIVE, we continue searching
+    }
+  }
+
+  // After examining all children, if we found a READ anywhere without a preceding KILL,
+  // then it's READ. Otherwise, if we found a KILL without any preceding READ, it's KILL.
+  // Otherwise, it's MAYBE_LIVE.
+  return result;
 }
\ No newline at end of file
