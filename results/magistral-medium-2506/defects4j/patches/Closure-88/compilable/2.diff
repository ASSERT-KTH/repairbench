diff --git a/tmp/9027404c-cde0-47f7-9fd4-c3d0e021eee9_buggy.java b/tmp/e6706f83-654c-4925-b2f1-cb730f115e43_fixed.java
index 9353941..85043b8 100644
--- a/tmp/9027404c-cde0-47f7-9fd4-c3d0e021eee9_buggy.java
+++ b/tmp/e6706f83-654c-4925-b2f1-cb730f115e43_fixed.java
@@ -1,30 +1,40 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
+      // This is a write/kill
       return VariableLiveness.KILL;
     } else {
+      // This is a read
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  boolean hasKill = false;
+  boolean hasRead = false;
+
+  // Check children for variable references in evaluation order
   for (Node child = n.getFirstChild();
        child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      if (state == VariableLiveness.KILL) {
+        hasKill = true;
+      } else if (state == VariableLiveness.READ) {
+        hasRead = true;
+        // We continue checking even if we find a read because we need to know if there's a kill before the first read
       }
     }
   }
+
+  // If we found a read that comes before any kill, then it's a READ
+  if (hasRead && !hasKill) {
+    return VariableLiveness.READ;
+  }
+  // If we found a kill before any read, then it's a KILL
+  if (hasKill && !hasRead) {
+    return VariableLiveness.KILL;
+  }
+  // If we have both or neither in the children, we need to check evaluation order properly
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
