diff --git a/tmp/75b343bf-9df3-4eda-901f-a308c195c1aa_buggy.java b/tmp/95284f4d-9f0c-4ce6-809c-d590a6510acc_fixed.java
index 9353941..bd454b1 100644
--- a/tmp/75b343bf-9df3-4eda-901f-a308c195c1aa_buggy.java
+++ b/tmp/95284f4d-9f0c-4ce6-809c-d590a6510acc_fixed.java
@@ -1,30 +1,58 @@
-  /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
-   */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  // First check children for KILL before READ operations
+  // since KILL takes precedence
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
+      if (state == VariableLiveness.KILL) {
         return state;
       }
+      if (state == VariableLiveness.READ) {
+        // If we find a READ before any KILL in any child, return READ
+        return state;
+      }
+    }
+  }
+
+  // If we didn't find anything in children, check if current node is a binary operation
+  // where the variable might be both read and written (like x = x + 1)
+  if (n.getType() == Token.ASSIGN && n.getFirstChild() != null) {
+    String lhsName = null;
+    Node lhs = n.getFirstChild();
+    if (NodeUtil.isName(lhs)) {
+      lhsName = lhs.getString();
+    }
+
+    if (variable.equals(lhsName)) {
+      // This is an assignment to our variable
+      // We need to check the RHS to see if the variable is read before this kill
+      Node rhs = lhs.getNext();
+      while (rhs != null) {
+        VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+        if (rhsState == VariableLiveness.READ) {
+          return VariableLiveness.READ;
+        } else if (rhsState == VariableLiveness.KILL) {
+          // If there's a KILL in the RHS, it might affect our analysis
+          // But since we're looking for the first reference, we can stop here
+          return VariableLiveness.KILL;
+        }
+        rhs = rhs.getNext();
+      }
     }
   }
+
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
