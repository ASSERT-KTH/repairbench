diff --git a/tmp/f18d3c03-d694-4079-abe7-8cdfe70e34d9_buggy.java b/tmp/aff33c94-b66f-4746-ab73-f3975adfeb2c_fixed.java
index 9353941..6e60eec 100644
--- a/tmp/f18d3c03-d694-4079-abe7-8cdfe70e34d9_buggy.java
+++ b/tmp/aff33c94-b66f-4746-ab73-f3975adfeb2c_fixed.java
@@ -1,30 +1,51 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // First check the current node
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  // If this is an assignment node, we need to check both sides carefully
+  if (NodeUtil.isAssignmentOp(n)) {
+    Node lhs = n.getFirstChild();
+    Node rhs = lhs.getNext();
+
+    // Check LHS first (since it would be evaluated first in any case)
+    VariableLiveness lhsState = isVariableReadBeforeKill(lhs, variable);
+    if (lhsState != VariableLiveness.MAYBE_LIVE) {
+      return lhsState;
+    }
+
+    // If variable wasn't found in LHS, check RHS
+    VariableLiveness rhsState = isVariableReadBeforeKill(rhs, variable);
+    return rhsState;
+  }
+
+  // For other nodes, process children in order
+  boolean foundReference = false;
+  VariableLiveness result = VariableLiveness.MAYBE_LIVE;
+
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      VariableLiveness childState = isVariableReadBeforeKill(child, variable);
+      if (childState != VariableLiveness.MAYBE_LIVE) {
+        if (!foundReference) {
+          // This is the first reference we've found
+          result = childState;
+          foundReference = true;
         }
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+  }
+  return result;
 }
\ No newline at end of file
