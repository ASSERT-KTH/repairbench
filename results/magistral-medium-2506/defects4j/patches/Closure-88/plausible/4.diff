diff --git a/tmp/6fd9764b-b95d-4f14-a373-73a8d40d2d27_buggy.java b/tmp/86b5b125-b6c4-4b90-bdfa-05b9bacad3d0_fixed.java
index 9353941..1ce4c01 100644
--- a/tmp/6fd9764b-b95d-4f14-a373-73a8d40d2d27_buggy.java
+++ b/tmp/86b5b125-b6c4-4b90-bdfa-05b9bacad3d0_fixed.java
@@ -1,30 +1,53 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
  * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
+  // Check for direct reference
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
-    // Expressions are evaluated left-right, depth first.
+  // First check if there's any KILL in the subtree
+  boolean hasKill = false;
+  boolean hasRead = false;
+
+  // We need to traverse all children to properly handle cases where the variable
+  // is used in multiple places
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+      if (state == VariableLiveness.KILL) {
+        hasKill = true;
+      } else if (state == VariableLiveness.READ) {
+        hasRead = true;
       }
+      // We still need to check all children to find all references
     }
   }
+
+  if (hasKill) {
+    if (hasRead) {
+      // There's both a read and kill, so the order matters
+      // We need to find the first reference in evaluation order
+      // Since we can't easily determine order here, we'll conservatively return READ
+      // because if the variable is read before being killed, it's live
+      return VariableLiveness.READ;
+    }
+    return VariableLiveness.KILL;
+  }
+  if (hasRead) {
+    return VariableLiveness.READ;
+  }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
