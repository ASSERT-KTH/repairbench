diff --git a/tmp/49f1f11d-906c-4f56-ba70-e90520fdd381_buggy.java b/tmp/e325c0ca-4dad-41b3-9489-1ad0da175ab5_fixed.java
index 9353941..c41c073 100644
--- a/tmp/49f1f11d-906c-4f56-ba70-e90520fdd381_buggy.java
+++ b/tmp/e325c0ca-4dad-41b3-9489-1ad0da175ab5_fixed.java
@@ -1,30 +1,34 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
         // The expression to which the assignment is made is evaluated before
         // the RHS is evaluated (normal left to right evaluation) but the KILL
         // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
+    VariableLiveness result = VariableLiveness.MAYBE_LIVE;
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
-        if (state != VariableLiveness.MAYBE_LIVE) {
-          return state;
+        if (state == VariableLiveness.READ) {
+          return state; // A read takes precedence if it comes first
+        } else if (state == VariableLiveness.KILL && result != VariableLiveness.READ) {
+          result = state; // Keep track of KILL if we haven't found a READ yet
         }
+        // For MAYBE_LIVE, we continue searching
       }
     }
-    return VariableLiveness.MAYBE_LIVE;
+    return result;
   }
\ No newline at end of file
