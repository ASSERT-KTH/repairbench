diff --git a/tmp/b28a396f-8620-443c-8ff4-e5a6880b684d_buggy.java b/tmp/619f57fe-4a97-49d4-9e7a-cd6978ab1148_fixed.java
index 9353941..7414566 100644
--- a/tmp/b28a396f-8620-443c-8ff4-e5a6880b684d_buggy.java
+++ b/tmp/619f57fe-4a97-49d4-9e7a-cd6978ab1148_fixed.java
@@ -1,30 +1,49 @@
   /**
    * Give an expression and a variable. It returns READ, if the first
    * reference of that variable is a read. It returns KILL, if the first
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
    */
   private VariableLiveness isVariableReadBeforeKill(
       Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
 
     // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
         VariableLiveness state = isVariableReadBeforeKill(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
+          // Only return immediately if it's a READ or KILL at this level
+          // We need to check all children first to see if there's an earlier reference
+          if (NodeUtil.isAssignmentOp(n) ||
+              (n.isAssign() && n.getFirstChild().getNext() != null)) {
+            // For assignment operations, we need to check both sides carefully
+            // First, process left side, then right side
+            Node firstChild = n.getFirstChild();
+            Node secondChild = firstChild.getNext();
+            if (secondChild != null) {
+              // Check left side first
+              VariableLiveness leftState = isVariableReadBeforeKill(firstChild, variable);
+              if (leftState != VariableLiveness.MAYBE_LIVE) {
+                return leftState;
+              }
+              // If left side is MAYBE_LIVE, then check right side
+              VariableLiveness rightState = isVariableReadBeforeKill(secondChild, variable);
+              if (rightState != VariableLiveness.MAYBE_LIVE) {
+                return rightState;
+              }
+            }
+          } else {
             return state;
           }
         }
       }
+    }
     return VariableLiveness.MAYBE_LIVE;
   }
\ No newline at end of file
