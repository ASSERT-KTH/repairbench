diff --git a/tmp/4a85c572-0453-4989-bcaf-2ed97dbf9515_buggy.java b/tmp/a28cd98f-8766-46f3-a3ee-36dce41a70d1_fixed.java
index 9353941..2194a77 100644
--- a/tmp/4a85c572-0453-4989-bcaf-2ed97dbf9515_buggy.java
+++ b/tmp/a28cd98f-8766-46f3-a3ee-36dce41a70d1_fixed.java
@@ -1,30 +1,59 @@
 /**
  * Give an expression and a variable. It returns READ, if the first
  * reference of that variable is a read. It returns KILL, if the first
-   * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+ * reference of that variable is an assignment. It returns MAYBE_LIVE otherwise.
  */
 private VariableLiveness isVariableReadBeforeKill(
     Node n, String variable) {
   if (NodeUtil.isName(n) && variable.equals(n.getString())) {
     if (NodeUtil.isLhs(n, n.getParent())) {
       // The expression to which the assignment is made is evaluated before
       // the RHS is evaluated (normal left to right evaluation) but the KILL
       // occurs after the RHS is evaluated.
       return VariableLiveness.KILL;
     } else {
       return VariableLiveness.READ;
     }
   }
 
+  // Handle logical AND/OR expressions carefully - we need to evaluate all conditions
+  if (n.isAnd() || n.isOr()) {
+    VariableLiveness leftResult = VariableLiveness.MAYBE_LIVE;
+    if (n.getFirstChild() != null) {
+      leftResult = isVariableReadBeforeKill(n.getFirstChild(), variable);
+    }
+
+    VariableLiveness rightResult = VariableLiveness.MAYBE_LIVE;
+    if (n.getFirstChild().getNext() != null) {
+      rightResult = isVariableReadBeforeKill(n.getFirstChild().getNext(), variable);
+    }
+
+    if (leftResult == VariableLiveness.KILL) {
+      // If the first part (left) is KILL, we need to see if there's a read in the right
+      // But since KILL is a definitive action, we should return KILL only if
+      // the right side doesn't override it
+      if (rightResult == VariableLiveness.READ) {
+        // If right is a read, then the KILL might not execute if left is false/true
+        return VariableLiveness.READ;
+      }
+      return VariableLiveness.KILL;
+    }
+
+    if (leftResult != VariableLiveness.MAYBE_LIVE) {
+      return leftResult;
+    }
+    return rightResult;
+  }
+
   // Expressions are evaluated left-right, depth first.
   for (Node child = n.getFirstChild();
       child != null; child = child.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
       VariableLiveness state = isVariableReadBeforeKill(child, variable);
       if (state != VariableLiveness.MAYBE_LIVE) {
         return state;
       }
     }
   }
   return VariableLiveness.MAYBE_LIVE;
 }
\ No newline at end of file
