diff --git a/tmp/41e1fc4d-51d4-4b21-aedf-e777276f2758_buggy.java b/tmp/f8e93443-daf2-4b9c-9efe-b3a89669d3d7_fixed.java
index d6662c7..1e47ce8 100644
--- a/tmp/41e1fc4d-51d4-4b21-aedf-e777276f2758_buggy.java
+++ b/tmp/f8e93443-daf2-4b9c-9efe-b3a89669d3d7_fixed.java
@@ -1,23 +1,35 @@
     /**
      * Parse an entry name from a buffer.
      * Parsing stops when a NUL is found
      * or the buffer length is reached.
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse.
      * @return The entry name.
      */
     public static String parseName(byte[] buffer, final int offset, final int length) {
-        StringBuffer result = new StringBuffer(length);
         int end = offset + length;
+        int realEnd = offset;
 
+        // First find the end of the string (where NUL is or buffer length)
         for (int i = offset; i < end; ++i) {
             if (buffer[i] == 0) {
                 break;
             }
-            result.append((char) buffer[i]);
+            realEnd = i + 1;
         }
 
-        return result.toString();
+        // Then convert the actual bytes to String with proper encoding
+        if (realEnd > offset) {
+            byte[] nameBytes = new byte[realEnd - offset];
+            System.arraycopy(buffer, offset, nameBytes, 0, realEnd - offset);
+            try {
+                return new String(nameBytes, "UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                // Fallback to default encoding if UTF-8 not available
+                return new String(nameBytes);
+            }
+        }
+        return "";
     }
\ No newline at end of file
