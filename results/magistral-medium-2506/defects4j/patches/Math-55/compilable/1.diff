diff --git a/tmp/b47b3765-04b5-49af-8ca3-43d740cc870a_buggy.java b/tmp/c8fb685e-65e9-418f-a543-3392ff2263a9_fixed.java
index 1478ee1..592ce4a 100644
--- a/tmp/b47b3765-04b5-49af-8ca3-43d740cc870a_buggy.java
+++ b/tmp/c8fb685e-65e9-418f-a543-3392ff2263a9_fixed.java
@@ -1,24 +1,44 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
+      // Compute the scaling factor rho to precondition the vectors
+      final double axbX = v1.y * v2.z - v1.z * v2.y;
+      final double axbY = v1.z * v2.x - v1.x * v2.z;
+      final double axbZ = v1.x * v2.y - v1.y * v2.x;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      // return the standard cross product formula if it passes the check
+      // (which it will fail for cancellation prone cases)
+      double r1 = axbX;
+      double r2 = axbY;
+      double r3 = axbZ;
+      if ((FastMath.abs(axbX) <= (1e-50 * FastMath.max(FastMath.abs(v1.y * v2.z),
+                                                     FastMath.abs(v1.z * v2.y))))
+          || (FastMath.abs(axbY) <= (1e-50 * FastMath.max(FastMath.abs(v1.z * v2.x),
+                                                        FastMath.abs(v1.x * v2.z))))
+          || (FastMath.abs(axbZ) <= (1e-50 * FastMath.max(FastMath.abs(v1.x * v2.y),
+                                                        FastMath.abs(v1.y * v2.x))))) {
+          // we have a cancellation problem
 
           // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+          final double v1DotV2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+          final double v2DotV2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+          final double rho = v1DotV2 / v2DotV2;
 
+          // compute v3 = v1 - rho v2
+          final double v3X = v1.x - rho * v2.x;
+          final double v3Y = v1.y - rho * v2.y;
+          final double v3Z = v1.z - rho * v2.z;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+          // return the cross product of v3 and v2
+          return new Vector3D(v3Y * v2.z - v3Z * v2.y,
+                             v3Z * v2.x - v3X * v2.z,
+                             v3X * v2.y - v3Y * v2.x);
+      } else {
+          // no cancellation problem, return standard cross product
+          return new Vector3D(axbX, axbY, axbZ);
+      }
   }
\ No newline at end of file
