diff --git a/tmp/d6f35879-6190-48e7-af98-78fc400a988f_buggy.java b/tmp/c457a87b-b598-46dd-8a4d-12bb72ed12a5_fixed.java
index 1478ee1..08cd910 100644
--- a/tmp/d6f35879-6190-48e7-af98-78fc400a988f_buggy.java
+++ b/tmp/c457a87b-b598-46dd-8a4d-12bb72ed12a5_fixed.java
@@ -1,24 +1,32 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
+      double scale1 = FastMath.max(FastMath.abs(v1.x), FastMath.max(FastMath.abs(v1.y), FastMath.abs(v1.z)));
+      double scale2 = FastMath.max(FastMath.abs(v2.x), FastMath.max(FastMath.abs(v2.y), FastMath.abs(v2.z)));
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+      double scaledX1 = scale1 == 0 ? v1.x : v1.x / scale1;
+      double scaledY1 = scale1 == 0 ? v1.y : v1.y / scale1;
+      double scaledZ1 = scale1 == 0 ? v1.z : v1.z / scale1;
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double scaledX2 = scale2 == 0 ? v2.x : v2.x / scale2;
+      double scaledY2 = scale2 == 0 ? v2.y : v2.y / scale2;
+      double scaledZ2 = scale2 == 0 ? v2.z : v2.z / scale2;
 
+      // compute cross product from scaled vectors
+      double x = scaledY1 * scaledZ2 - scaledZ1 * scaledY2;
+      double y = scaledZ1 * scaledX2 - scaledX1 * scaledZ2;
+      double z = scaledX1 * scaledY2 - scaledY1 * scaledX2;
 
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      if (scale1 != 0 && scale2 != 0) {
+          x *= scale1 * scale2;
+          y *= scale1 * scale2;
+          z *= scale1 * scale2;
+      }
 
+      return new Vector3D(x, y, z);
   }
\ No newline at end of file
