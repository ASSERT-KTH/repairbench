diff --git a/tmp/c462c9ec-4427-427b-9b1c-5b2869333f42_buggy.java b/tmp/665d90aa-0c02-425f-9bc1-88a2c550178c_fixed.java
index 1478ee1..fd53940 100644
--- a/tmp/c462c9ec-4427-427b-9b1c-5b2869333f42_buggy.java
+++ b/tmp/665d90aa-0c02-425f-9bc1-88a2c550178c_fixed.java
@@ -1,24 +1,48 @@
 /** Compute the cross-product of two vectors.
  * @param v1 first vector
  * @param v2 second vector
  * @return the cross product v1 ^ v2 as a new Vector
  */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    double x1 = v1.x;
+    double y1 = v1.y;
+    double z1 = v1.z;
+    double x2 = v2.x;
+    double y2 = v2.y;
+    double z2 = v2.z;
 
+    // Use Kahan's preconditioning to reduce cancellation errors
+    double sx1 = x1 + x2;
+    double sy1 = y1 + y2;
+    double sz1 = z1 + z2;
+    double sx2 = sx1 - x1;
+    double sy2 = sy1 - y1;
+    double sz2 = sz1 - z1;
+    sx2 -= x2;
+    sy2 -= y2;
+    sz2 -= z2;
+    double mx1 = x1 - sx2;
+    double my1 = y1 - sy2;
+    double mz1 = z1 - sz2;
+    double mx2 = x2 + sx2;
+    double my2 = y2 + sy2;
+    double mz2 = z2 + sz2;
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
+    // Compute cross product terms with preconditioned vectors
+    double px = my1 * mz2 - mz1 * my2;
+    double py = mz1 * mx2 - mx1 * mz2;
+    double pz = mx1 * my2 - my1 * mx2;
 
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
+    // Add back the remainder terms
+    double rx = sy2 * sz2 - sz2 * sy2; // should be zero (just for symmetry)
+    double ry = sz2 * sx2 - sx2 * sz2; // should be zero (just for symmetry)
+    double rz = sx2 * sy2 - sy2 * sx2; // should be zero (just for symmetry)
 
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+    double tx = mx1 * sy2 - my1 * sx2;
+    double ty = my1 * sx2 - mx1 * sy2;
+    double tz = 0; // not used
 
+    return new Vector3D(px + (rx + tx),
+                        py + (ry + ty),
+                        pz + rz);
 }
\ No newline at end of file
