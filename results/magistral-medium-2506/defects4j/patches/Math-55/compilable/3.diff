diff --git a/tmp/695bcb71-1d61-4b9d-8ce8-879eed82b402_buggy.java b/tmp/6bc79d19-906a-4c09-91f8-d8ad49a3c570_fixed.java
index 1478ee1..683e7d1 100644
--- a/tmp/695bcb71-1d61-4b9d-8ce8-879eed82b402_buggy.java
+++ b/tmp/6bc79d19-906a-4c09-91f8-d8ad49a3c570_fixed.java
@@ -1,24 +1,36 @@
-  /** Compute the cross-product of two vectors.
-   * @param v1 first vector
-   * @param v2 second vector
-   * @return the cross product v1 ^ v2 as a new Vector
-   */
 public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
-
-
     // rescale both vectors without losing precision,
     // to ensure their norm are the same order of magnitude
 
     // we reduce cancellation errors by preconditioning,
     // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
     // v3 without loss of precision. See Kahan lecture
     // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
     // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
     // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+    final double ax = v1.x;
+    final double ay = v1.y;
+    final double az = v1.z;
+    final double bx = v2.x;
+    final double by = v2.y;
+    final double bz = v2.z;
 
+    double v1Dotv2 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+    double v2Dotv2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+
+    double rho;
+    if (v2Dotv2 != 0) {
+        rho = v1Dotv2 / v2Dotv2;
+    } else {
+        rho = 0;
+    }
+
+    // compute v3 = v1 - rho * v2 (this should have lower magnitude than v1)
+    final double x3 = ax - rho * bx;
+    final double y3 = ay - rho * by;
+    final double z3 = az - rho * bz;
 
     // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
-
+    return new Vector3D(y3 * bz - z3 * by, z3 * bx - x3 * bz, x3 * by - y3 * bx);
 }
\ No newline at end of file
