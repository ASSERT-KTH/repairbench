diff --git a/tmp/be24f74d-db6c-4234-bf27-21c74eaee8b6_buggy.java b/tmp/4ecf0d30-61c6-4a9b-8fad-f4cbf32cacf0_fixed.java
index 1478ee1..923d5b9 100644
--- a/tmp/be24f74d-db6c-4234-bf27-21c74eaee8b6_buggy.java
+++ b/tmp/4ecf0d30-61c6-4a9b-8fad-f4cbf32cacf0_fixed.java
@@ -1,24 +1,32 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
+    // compute the cross-product directly
+    double x = v1.y * v2.z - v1.z * v2.y;
+    double y = v1.z * v2.x - v1.x * v2.z;
+    double z = v1.x * v2.y - v1.y * v2.x;
 
+    // check for cancellation errors when vectors are parallel or nearly parallel
+    double max = FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));
+    if (max <= 1.0e-30) {
+      // fall back to extended precision computation
+      return crossProductExtendedPrecision(v1, v2);
+    }
+    return new Vector3D(x, y, z);
+  }
 
-      // rescale both vectors without losing precision,
-      // to ensure their norm are the same order of magnitude
-
-      // we reduce cancellation errors by preconditioning,
-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
-      // v3 without loss of precision. See Kahan lecture
-      // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
-
-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2
-
-
-      // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+  private static Vector3D crossProductExtendedPrecision(final Vector3D v1, final Vector3D v2) {
+    // Use Kahan's approach for better precision
+    double rho = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z) /
+                 (v2.x * v2.x + v2.y * v2.y + v2.z * v2.z);
+    double x1 = v1.x - rho * v2.x;
+    double y1 = v1.y - rho * v2.y;
+    double z1 = v1.z - rho * v2.z;
 
+    return new Vector3D(y1 * v2.z - z1 * v2.y,
+                        z1 * v2.x - x1 * v2.z,
+                        x1 * v2.y - y1 * v2.x);
   }
\ No newline at end of file
