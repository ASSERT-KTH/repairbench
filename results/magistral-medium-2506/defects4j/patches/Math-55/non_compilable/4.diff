diff --git a/tmp/fba5ad2c-c4a8-4eb3-af95-9b0c2c5b6424_buggy.java b/tmp/38d2243e-51b0-414e-9927-9d5c6af9775e_fixed.java
index 1478ee1..d1e4e12 100644
--- a/tmp/fba5ad2c-c4a8-4eb3-af95-9b0c2c5b6424_buggy.java
+++ b/tmp/38d2243e-51b0-414e-9927-9d5c6af9775e_fixed.java
@@ -1,24 +1,39 @@
   /** Compute the cross-product of two vectors.
    * @param v1 first vector
    * @param v2 second vector
    * @return the cross product v1 ^ v2 as a new Vector
    */
   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {
 
-
       // rescale both vectors without losing precision,
       // to ensure their norm are the same order of magnitude
 
       // we reduce cancellation errors by preconditioning,
       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
       // v3 without loss of precision. See Kahan lecture
       // "Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"
       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
 
       // compute rho as an 8 bits approximation of v1.v2 / v2.v2
+      double rhop = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
+      double rhol = 0.0;
+      // split dot product into high and low parts for more accuracy
+      for (DoubleSumProduct dsp : DoubleSumProduct.calculateProduct(
+          v1.x, v2.x, v1.y, v2.y, v1.z, v2.z)) {
+          rhop += dsp.sum();
+          rhol += dsp.getPartialSumProduct();
+      }
 
+      double v2pv2 = v2.x * v2.x + v2.y * v2.y + v2.z * v2.z;
+      // rho is the high-order word of the approximation of this division
+      final double rho = rhop / v2pv2;
+
+      // compute v3 = v1 - rho v2
+      final double v3x = v1.x - rho * v2.x;
+      final double v3y = v1.y - rho * v2.y;
+      final double v3z = v1.z - rho * v2.z;
 
       // compute cross product from v3 and v2 instead of v1 and v2
-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
+      return new Vector3D(v3y * v2.z - v3z * v2.y, v3z * v2.x - v3x * v2.z, v3x * v2.y - v3y * v2.x);
 
   }
\ No newline at end of file
