diff --git a/tmp/74f19ce1-aea1-47b7-9396-18629f978fff_buggy.java b/tmp/38b55439-25cd-4779-9881-8fb0f3e2f09a_fixed.java
index c51c8b1..774afcc 100644
--- a/tmp/74f19ce1-aea1-47b7-9396-18629f978fff_buggy.java
+++ b/tmp/38b55439-25cd-4779-9881-8fb0f3e2f09a_fixed.java
@@ -1,31 +1,51 @@
     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {
       Node nameNode = n.getFirstChild();
       Node parent = n.getParent();
       NameInformation ns = createNameInformation(t, nameNode);
       if (ns != null) {
         if (parent.isFor() && !NodeUtil.isForIn(parent)) {
           // Patch for assignments that appear in the init,
           // condition or iteration part of a FOR loop.  Without
           // this change, all 3 of those parts try to claim the for
           // loop as their dependency scope.  The last assignment in
           // those three fields wins, which can result in incorrect
           // reference edges between referenced and assigned variables.
           //
           // TODO(user) revisit the dependency scope calculation
           // logic.
           if (parent.getFirstChild().getNext() != n) {
             recordDepScope(recordNode, ns);
           } else {
             recordDepScope(nameNode, ns);
           }
+        } else if (n.isAssign()) {
+          // Special case: handle assignments where the RHS is a call expression
+          if (NodeUtil.isAssignmentOp(n)) {
+            recordDepScope(recordNode, ns);
+          } else {
+            // For simple assignment (=), record the RHS (recordNode) as the caller
+            if (nameNode.getType() == Token.NAME) {
+              recordDepScope(recordNode, ns);
+            } else {
+              // For destructuring assignments, we need to handle differently
+              for (Node child : nameNode.children()) {
+                if (child.isName()) {
+                  NameInformation childNs = createNameInformation(t, child);
+                  if (childNs != null) {
+                    recordDepScope(recordNode, childNs);
+                  }
+                }
+              }
+            }
+          }
         } else {
           // The rhs of the assignment is the caller, so it's used by the
           // context. Don't associate it w/ the lhs.
           // FYI: this fixes only the specific case where the assignment is the
           // caller expression, but it could be nested deeper in the caller and
           // we would still get a bug.
           // See testAssignWithCall2 for an example of this.
           recordDepScope(recordNode, ns);
         }
       }
     }
\ No newline at end of file
