diff --git a/tmp/d5e9c244-f46d-49e2-9b73-0ef9d9b52fee_buggy.java b/tmp/231d65d9-95ce-4f87-a991-0c4279d9f576_fixed.java
index 57c40b2..5bfcb54 100644
--- a/tmp/d5e9c244-f46d-49e2-9b73-0ef9d9b52fee_buggy.java
+++ b/tmp/231d65d9-95ce-4f87-a991-0c4279d9f576_fixed.java
@@ -1,27 +1,31 @@
-  /**
-   * Visits a GETPROP node.
-   *
-   * @param t The node traversal object that supplies context, such as the
-   * scope chain to use in name lookups as well as error reporting.
-   * @param n The node being visited.
-   * @param parent The parent of <code>n</code>
-   */
   private void visitGetProp(NodeTraversal t, Node n, Node parent) {
     // obj.prop or obj.method()
     // Lots of types can appear on the left, a call to a void function can
     // never be on the left. getPropertyType will decide what is acceptable
     // and what isn't.
     Node property = n.getLastChild();
     Node objNode = n.getFirstChild();
     JSType childType = getJSType(objNode);
 
     if (childType.isDict()) {
       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
-    } else if (n.getJSType() != null && parent.isAssign()) {
-      return;
-    } else if (validator.expectNotNullOrUndefined(t, n, childType,
+    }
+    // We need to check for null or undefined before checking if parent is an assignment
+    else if (validator.expectNotNullOrUndefined(t, n, childType,
         "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+      // Check property access only if we passed the null/undefined check
       checkPropertyAccess(childType, property.getString(), t, n);
     }
+
+    // Check for assignment case separately
+    if (parent.isAssign()) {
+      // If we're in an assignment context, we still need to check the property access
+      if (!childType.isDict() &&
+          validator.expectNotNullOrUndefined(t, n, childType,
+              "No properties on this expression", getNativeType(OBJECT_TYPE))) {
+        checkPropertyAccess(childType, property.getString(), t, n);
+      }
+    }
+
     ensureTyped(t, n);
   }
\ No newline at end of file
