diff --git a/tmp/1508955e-6b68-4d7c-9d3d-339b100e45db_buggy.java b/tmp/d748f585-cef8-4a5b-a8fd-d99f9048e894_fixed.java
index 6708762..08f52e0 100644
--- a/tmp/1508955e-6b68-4d7c-9d3d-339b100e45db_buggy.java
+++ b/tmp/d748f585-cef8-4a5b-a8fd-d99f9048e894_fixed.java
@@ -1,99 +1,109 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
+        final double[][] c = matrix.getDataRef();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
+            double maxDiag = Double.NEGATIVE_INFINITY;
             swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
+            for (int i = r; i < order; ++i) {
                 int ii = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
+                if (c[ii][ii] > maxDiag) {
+                    maxDiag = c[ii][ii];
                     swap[r] = i;
                 }
             }
 
-
             // swap elements
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
-            // check diagonal element
             int ir = index[r];
-            if (c[ir][ir] < small) {
+            double diag = c[ir][ir];
 
-                if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
-                }
-
-                // check remaining diagonal elements
+            if (Math.abs(diag) < small) {
+                // check if we're done with all columns
+                if (r == order - 1) {
+                    // Check if the remaining diagonal elements are all close to zero
+                    boolean allSmall = true;
                     for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
+                        int ii = index[i];
+                        if (c[ii][ii] < -small) {
+                            allSmall = false;
+                            break;
                         }
                     }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+                    if (allSmall) {
+                        // found the rank
+                        r = order;
                         loop = false;
-
                     } else {
-
+                        throw new NonPositiveDefiniteMatrixException(diag, r, small);
+                    }
+                } else {
+                    // move to next column
+                    ++r;
+                }
+            } else if (diag < 0) {
+                // negative diagonal element - matrix is not positive semi-definite
+                throw new NonPositiveDefiniteMatrixException(diag, r, small);
+            } else {
                 // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+                final double sqrt = Math.sqrt(diag);
                 b[r][r] = sqrt;
                 final double inverse = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
                     c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
                 }
+                for (int i = r + 1; i < order; ++i) {
+                    final int ii = index[i];
+                    c[ii][ir] = 0.0; // zero out lower part since we process in place
+                }
 
                 // prepare next iteration
                 loop = ++r < order;
             }
         }
 
         // build the root matrix
         rank = r;
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
 
     }
\ No newline at end of file
