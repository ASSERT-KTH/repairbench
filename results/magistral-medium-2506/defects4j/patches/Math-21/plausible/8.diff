diff --git a/tmp/10a6eb1e-877a-4a25-94ac-fc36203641c5_buggy.java b/tmp/fff1254a-4b47-4ec4-97b0-afefc87cc8cf_fixed.java
index 6708762..b306ede 100644
--- a/tmp/10a6eb1e-877a-4a25-94ac-fc36203641c5_buggy.java
+++ b/tmp/fff1254a-4b47-4ec4-97b0-afefc87cc8cf_fixed.java
@@ -1,99 +1,107 @@
 /**
  * Decompose a symmetric positive semidefinite matrix.
  *
  * @param matrix Symmetric positive semidefinite matrix.
  * @param small Diagonal elements threshold under which  column are
  * considered to be dependent on previous ones and are discarded.
  * @exception NonPositiveDefiniteMatrixException if the matrix is not
  * positive semidefinite.
  */
 public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
     throws NonPositiveDefiniteMatrixException {
 
     final int order = matrix.getRowDimension();
     final double[][] c = matrix.getData();
     final double[][] b = new double[order][order];
 
     int[] swap  = new int[order];
     int[] index = new int[order];
     for (int i = 0; i < order; ++i) {
         index[i] = i;
     }
 
     int r = 0;
     for (boolean loop = true; loop;) {
 
         // find maximal diagonal element
         swap[r] = r;
         for (int i = r + 1; i < order; ++i) {
             int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
+            int irr = index[swap[r]];
+            if (c[ii][ii] > c[irr][irr]) {
                 swap[r] = i;
             }
         }
 
-
         // swap elements
         if (swap[r] != r) {
             int tmp = index[r];
             index[r] = index[swap[r]];
             index[swap[r]] = tmp;
         }
 
         // check diagonal element
         int ir = index[r];
-            if (c[ir][ir] < small) {
+        if (Math.abs(c[ir][ir]) < small) {
 
-                if (r == 0) {
+            if (c[ir][ir] < -small) {
+                // Negative diagonal element found
                 throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
             }
 
             // check remaining diagonal elements
+            boolean allZero = true;
             for (int i = r; i < order; ++i) {
                 if (c[index[i]][index[i]] < -small) {
                     // there is at least one sufficiently negative diagonal element,
                     // the symmetric positive semidefinite matrix is wrong
                     throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                 }
+                if (Math.abs(c[index[i]][index[i]]) >= small) {
+                    allZero = false;
+                }
             }
 
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
-                ++r;
+            if (allZero) {
+                // all remaining diagonal elements are close to zero
                 loop = false;
+            } else {
+                // continue with next column as some diagonal elements are still non-zero
+                loop = ++r < order;
+            }
 
         } else {
 
             // transform the matrix
             final double sqrt = FastMath.sqrt(c[ir][ir]);
-                b[r][r] = sqrt;
+            b[ir][r] = sqrt; // Store in the original position in B matrix
             final double inverse = 1 / sqrt;
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
                 final double e = inverse * c[ii][ir];
-                    b[i][r] = e;
+                b[ii][r] = e; // Store in the original position in B matrix
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    final double f = c[ii][ij] - e * b[ij][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
-
             // prepare next iteration
             loop = ++r < order;
         }
     }
 
     // build the root matrix
     rank = r;
     root = MatrixUtils.createRealMatrix(order, r);
-        for (int i = 0; i < order; ++i) {
-            for (int j = 0; j < r; ++j) {
-                root.setEntry(index[i], j, b[i][j]);
+    for (int i = 0; i < r; ++i) {
+        for (int j = 0; j < order; ++j) {
+            // Only copy the upper triangular part that we computed
+            if (i <= j) {
+                root.setEntry(index[j], i, b[index[j]][i]);
+            }
         }
     }
-
 }
\ No newline at end of file
