diff --git a/tmp/da3816b6-1ecc-448e-b4c4-b17899e1570b_buggy.java b/tmp/0ad5a8b7-0270-49af-8fe3-9abbba6c343d_fixed.java
index 6708762..907aa8a 100644
--- a/tmp/da3816b6-1ecc-448e-b4c4-b17899e1570b_buggy.java
+++ b/tmp/0ad5a8b7-0270-49af-8fe3-9abbba6c343d_fixed.java
@@ -1,99 +1,123 @@
     /**
      * Decompose a symmetric positive semidefinite matrix.
      *
      * @param matrix Symmetric positive semidefinite matrix.
      * @param small Diagonal elements threshold under which  column are
      * considered to be dependent on previous ones and are discarded.
      * @exception NonPositiveDefiniteMatrixException if the matrix is not
      * positive semidefinite.
      */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            swap[r] = r;
-            for (int i = r + 1; i < order; ++i) {
+            double maxDiag = Double.NEGATIVE_INFINITY;
+            int maxIndex = r;
+            for (int i = r; i < order; ++i) {
                 int ii = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
-                    swap[r] = i;
+                if (c[ii][ii] > maxDiag) {
+                    maxDiag = c[ii][ii];
+                    maxIndex = i;
                 }
             }
-
+            swap[r] = maxIndex;
 
             // swap elements
             if (swap[r] != r) {
-                int tmp = index[r];
-                index[r] = index[swap[r]];
-                index[swap[r]] = tmp;
+                int t1 = index[r];
+                int t2 = index[maxIndex];
+                index[r] = t2;
+                index[maxIndex] = t1;
+
+                // Also swap rows and columns in the matrix
+                double[] tempRow = c[r];
+                c[r] = c[maxIndex];
+                c[maxIndex] = tempRow;
+
+                for (int k = 0; k < order; ++k) {
+                    double temp = c[k][r];
+                    c[k][r] = c[k][maxIndex];
+                    c[k][maxIndex] = temp;
+                }
             }
 
             // check diagonal element
             int ir = index[r];
             if (c[ir][ir] < small) {
+                if (c[ir][ir] < -small) {
+                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                }
 
                 if (r == 0) {
-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                    // The entire matrix is too small; treat as all zeros
+                    rank = 0;
+                    root = MatrixUtils.createRealMatrix(order, 0);
+                    return;
                 }
 
-                // check remaining diagonal elements
-                for (int i = r; i < order; ++i) {
-                    if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
-                    }
-                }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+                // all remaining diagonal elements are close to zero
                 ++r;
                 loop = false;
-
             } else {
+                if (c[ir][ir] <= 0) {
+                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
+                }
 
                 // transform the matrix
                 final double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
                 final double inverse = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
                     final int ii = index[i];
                     final double e = inverse * c[ii][ir];
                     b[i][r] = e;
                     c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
                         final int ij = index[j];
                         final double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
+                    // Update the upper triangular part as well
+                    for (int j = r + 1; j < order; ++j) {
+                        final int ij = index[j];
+                        if (i < j) { // only for upper triangular part
+                            c[ii][ij] = c[ij][ii];
+                        }
+                    }
                 }
-
                 // prepare next iteration
                 loop = ++r < order;
             }
         }
 
+        // Final check for negative diagonal elements
+        for (int i = r; i < order; ++i) {
+            int ii = index[i];
+            if (c[ii][ii] < -small) {
+                throw new NonPositiveDefiniteMatrixException(c[ii][ii], i, small);
+            }
+        }
+
         // build the root matrix
         rank = r;
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
