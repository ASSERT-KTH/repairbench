diff --git a/tmp/8d53990c-c3a2-47e3-a362-169bbafa6a9d_buggy.java b/tmp/e4954b4a-ddac-481f-8f15-e81179ef41bf_fixed.java
index 6708762..afe5858 100644
--- a/tmp/8d53990c-c3a2-47e3-a362-169bbafa6a9d_buggy.java
+++ b/tmp/e4954b4a-ddac-481f-8f15-e81179ef41bf_fixed.java
@@ -1,99 +1,120 @@
-    /**
-     * Decompose a symmetric positive semidefinite matrix.
-     *
-     * @param matrix Symmetric positive semidefinite matrix.
-     * @param small Diagonal elements threshold under which  column are
-     * considered to be dependent on previous ones and are discarded.
-     * @exception NonPositiveDefiniteMatrixException if the matrix is not
-     * positive semidefinite.
-     */
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
         final int order = matrix.getRowDimension();
         final double[][] c = matrix.getData();
         final double[][] b = new double[order][order];
 
         int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
         }
 
         int r = 0;
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
             swap[r] = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
-                int isi = index[swap[i]];
-                if (c[ii][ii] > c[isi][isi]) {
+                int isi = index[swap[r]];
+                if (Math.abs(c[ii][ii]) > Math.abs(c[isi][isi])) {
                     swap[r] = i;
                 }
             }
 
-
             // swap elements
             if (swap[r] != r) {
                 int tmp = index[r];
                 index[r] = index[swap[r]];
                 index[swap[r]] = tmp;
             }
 
             // check diagonal element
             int ir = index[r];
-            if (c[ir][ir] < small) {
+            if (Math.abs(c[ir][ir]) < small) {
+                // Check if we should consider this column as independent
+                boolean independent = true;
+                for (int i = 0; i < r; ++i) {
+                    int ii = index[i];
+                    double sum = 0;
+                    for (int j = 0; j < r; ++j) {
+                        sum += b[ii][j] * b[ir][j];
+                    }
+                    if (Math.abs(c[ii][ir] - sum) > small) {
+                        independent = false;
+                        break;
+                    }
+                }
 
+                if (independent) {
+                    // The column is independent despite small diagonal element
+                    // Consider it as a new basis vector
+                    b[r][r] = Math.sqrt(Math.abs(c[ir][ir])); // use small positive value to avoid division by zero
+                } else {
                     if (r == 0) {
                         throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);
                     }
-
                     // check remaining diagonal elements
+                    boolean allSmall = true;
                     for (int i = r; i < order; ++i) {
                         if (c[index[i]][index[i]] < -small) {
-                        // there is at least one sufficiently negative diagonal element,
-                        // the symmetric positive semidefinite matrix is wrong
                             throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);
                         }
+                        if (Math.abs(c[index[i]][index[i]]) >= small) {
+                            allSmall = false;
                         }
-
-                // all remaining diagonal elements are close to zero, we consider we have
-                // found the rank of the symmetric positive semidefinite matrix
+                    }
+                    if (allSmall) {
                         ++r;
                         loop = false;
-
                     } else {
+                        // continue with next column
+                        ++r;
+                        if (r >= order) {
+                            loop = false;
+                        }
+                    }
+                    continue;
+                }
+            }
 
             // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+            double sqrt;
+            if (c[ir][ir] <= 0) {
+                sqrt = Math.sqrt(small);
+            } else {
+                sqrt = FastMath.sqrt(c[ir][ir]);
+            }
             b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
+            double inverse = 0;
+            if (sqrt != 0) {
+                inverse = 1 / sqrt;
+            }
             for (int i = r + 1; i < order; ++i) {
                 final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                double e = (sqrt == 0) ? 0 : inverse * c[ii][ir];
                 b[i][r] = e;
                 c[ii][ii] -= e * e;
                 for (int j = r + 1; j < i; ++j) {
                     final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                    double f = c[ii][ij] - e * b[j][r];
                     c[ii][ij] = f;
                     c[ij][ii] = f;
                 }
             }
 
             // prepare next iteration
             loop = ++r < order;
         }
-        }
 
         // build the root matrix
         rank = r;
         root = MatrixUtils.createRealMatrix(order, r);
         for (int i = 0; i < order; ++i) {
             for (int j = 0; j < r; ++j) {
                 root.setEntry(index[i], j, b[i][j]);
             }
         }
-
     }
\ No newline at end of file
