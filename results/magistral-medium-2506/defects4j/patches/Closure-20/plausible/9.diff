diff --git a/tmp/f7707ebb-0332-40de-95fb-8a9e6191badf_buggy.java b/tmp/4b56eb94-b9c8-4162-9e15-2565ff064b5f_fixed.java
index d4e6d48..eea5514 100644
--- a/tmp/f7707ebb-0332-40de-95fb-8a9e6191badf_buggy.java
+++ b/tmp/4b56eb94-b9c8-4162-9e15-2565ff064b5f_fixed.java
@@ -1,23 +1,41 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
+
+      // Only fold if there's exactly one argument
+      if (n.getChildCount() == 2) {
         Node value = callTarget.getNext();
         if (value != null) {
+          // Check if the argument is a simple literal or expression that would be safe to convert
+          if (isSimpleLiteralOrExpression(value)) {
             Node addition = IR.add(
                 IR.string("").srcref(callTarget),
                 value.detachFromParent());
             n.getParent().replaceChild(n, addition);
             reportCodeChange();
             return addition;
           }
         }
+      }
+    }
     return n;
   }
+
+  private boolean isSimpleLiteralOrExpression(Node n) {
+    // Implement a method to check if the node is a simple literal or expression
+    // For simplicity, we'll just check for literals, but in reality you'd want more thorough checks
+    if (n.isNumber() || n.isString()) {
+      return true;
+    }
+    // Also check if it's a call to something that would be safe to convert
+    // But for now, we'll be conservative and only allow literals
+    return false;
+  }
\ No newline at end of file
