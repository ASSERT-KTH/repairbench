diff --git a/tmp/d43654ae-0274-4e15-9be2-db443a979e4b_buggy.java b/tmp/f0341747-f510-4cb4-96a7-735c94894ae8_fixed.java
index d4e6d48..b341efc 100644
--- a/tmp/d43654ae-0274-4e15-9be2-db443a979e4b_buggy.java
+++ b/tmp/f0341747-f510-4cb4-96a7-735c94894ae8_fixed.java
@@ -1,23 +1,36 @@
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
     if (callTarget != null && callTarget.isName() &&
           callTarget.getString().equals("String")) {
       // Fold String(a) to '' + (a) on immutable literals,
       // which allows further optimizations
       //
       // We can't do this in the general case, because String(a) has
       // slightly different semantics than '' + (a). See
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
-      if (value != null) {
+      if (value != null && n.hasOneChild()) {  // Check that there's exactly one argument
+        // Verify that the argument is a simple value we can safely convert
+        if (isSimpleValue(value)) {
           Node addition = IR.add(
               IR.string("").srcref(callTarget),
               value.detachFromParent());
           n.getParent().replaceChild(n, addition);
           reportCodeChange();
           return addition;
         }
       }
+    }
     return n;
   }
+
+  private boolean isSimpleValue(Node value) {
+    // Check if the value is a simple literal or variable that can be safely converted
+    if (value.isString() || value.isNumber() || value.isTrue() || value.isFalse() ||
+        value.isNull() || value.isVoid() || value.isName()) {
+      return true;
+    }
+    // For other cases (like objects with valueOf) we shouldn't do the conversion
+    return false;
+  }
\ No newline at end of file
