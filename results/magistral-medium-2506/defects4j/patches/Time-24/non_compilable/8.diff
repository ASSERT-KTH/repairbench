diff --git a/tmp/11112320-2234-4859-90cf-b9d32767da82_buggy.java b/tmp/fbbf7dff-acc7-4a78-aef2-b604c7d8ad3e_fixed.java
index 99d6a44..2c311fb 100644
--- a/tmp/11112320-2234-4859-90cf-b9d32767da82_buggy.java
+++ b/tmp/fbbf7dff-acc7-4a78-aef2-b604c7d8ad3e_fixed.java
@@ -1,58 +1,128 @@
 /**
  * Computes the parsed datetime by setting the saved fields.
  * This method is idempotent, but it is not thread-safe.
  *
  * @param resetFields false by default, but when true, unsaved field values are cleared
  * @param text optional text being parsed, to be included in any error message
  * @return milliseconds since 1970-01-01T00:00:00Z
  * @throws IllegalArgumentException if any field is out of range
  * @since 1.3
  */
 public long computeMillis(boolean resetFields, String text) {
     SavedField[] savedFields = iSavedFields;
     int count = iSavedFieldsCount;
     if (iSavedFieldsShared) {
         iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
         iSavedFieldsShared = false;
     }
     sort(savedFields, count);
+
+    // If we have weekyear and week fields, we need special handling
+    boolean hasWeekYear = false;
+    boolean hasWeek = false;
+    for (int i = 0; i < count; i++) {
+        DateTimeFieldType fieldType = savedFields[i].iField.getType();
+        if (fieldType == DateTimeFieldType.weekyear()) {
+            hasWeekYear = true;
+        } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+            hasWeek = true;
+        }
+    }
+
+    // If we have both weekyear and week, we need to parse them together
+    if (hasWeekYear && hasWeek) {
+        long tempMillis = iMillis;
+        DurationField weeks = DurationFieldType.weeks().getField(iChrono);
+        DurationField days = DurationFieldType.days().getField(iChrono);
+
+        // First process all fields except week-related ones
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType != DateTimeFieldType.weekyear() &&
+                fieldType != DateTimeFieldType.weekOfWeekyear() &&
+                fieldType != DateTimeFieldType.dayOfWeek()) {
+                tempMillis = savedFields[i].set(tempMillis, resetFields);
+            }
+        }
+
+        // Then process weekyear and week together
+        int weekYear = iDefaultYear;
+        int week = 1;
+        int dayOfWeek = 1;
+
+        for (int i = 0; i < count; i++) {
+            SavedField field = savedFields[i];
+            DateTimeFieldType fieldType = field.iField.getType();
+            if (fieldType == DateTimeFieldType.weekyear()) {
+                weekYear = field.getValue();
+            } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {
+                week = field.getValue();
+            } else if (fieldType == DateTimeFieldType.dayOfWeek()) {
+                dayOfWeek = field.getValue();
+            }
+        }
+
+        // Calculate milliseconds from weekyear, week, and dayOfWeek
+        long instant = iChrono.weekyear()
+            .set(iChrono.getDateTimeMillis(weekYear, 1, 1, 0), weekYear);
+
+        instant = iChrono.weekOfWeekyear()
+            .set(instant, week);
+
+        instant = iChrono.dayOfWeek()
+            .set(instant, dayOfWeek);
+
+        // Now process all other fields again with the correct base
+        tempMillis = instant;
+        for (int i = 0; i < count; i++) {
+            DateTimeFieldType fieldType = savedFields[i].iField.getType();
+            if (fieldType != DateTimeFieldType.weekyear() &&
+                fieldType != DateTimeFieldType.weekOfWeekyear() &&
+                fieldType != DateTimeFieldType.dayOfWeek()) {
+                tempMillis = savedFields[i].set(tempMillis, resetFields);
+            }
+        }
+        return tempMillis;
+    }
+
+    // Original implementation for non-week-based parsing
+    long millis = iMillis;
     if (count > 0) {
         // alter base year for parsing if first field is month or day
         DurationField months = DurationFieldType.months().getField(iChrono);
         DurationField days = DurationFieldType.days().getField(iChrono);
         DurationField first = savedFields[0].iField.getDurationField();
         if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
             saveField(DateTimeFieldType.year(), iDefaultYear);
             return computeMillis(resetFields, text);
         }
     }
 
-        long millis = iMillis;
     try {
         for (int i = 0; i < count; i++) {
             millis = savedFields[i].set(millis, resetFields);
         }
     } catch (IllegalFieldValueException e) {
         if (text != null) {
             e.prependMessage("Cannot parse \"" + text + '"');
         }
         throw e;
     }
 
     if (iZone == null) {
         millis -= iOffset;
     } else {
         int offset = iZone.getOffsetFromLocal(millis);
         millis -= offset;
         if (offset != iZone.getOffset(millis)) {
             String message =
                 "Illegal instant due to time zone offset transition (" + iZone + ')';
             if (text != null) {
                 message = "Cannot parse \"" + text + "\": " + message;
             }
             throw new IllegalArgumentException(message);
         }
     }
 
     return millis;
 }
\ No newline at end of file
