diff --git a/tmp/66f71a82-4c99-431d-aa32-a813c298a455_buggy.java b/tmp/0781f834-0a3e-4a25-aeab-06d6a098b193_fixed.java
index 99d6a44..2deb60b 100644
--- a/tmp/66f71a82-4c99-431d-aa32-a813c298a455_buggy.java
+++ b/tmp/0781f834-0a3e-4a25-aeab-06d6a098b193_fixed.java
@@ -1,58 +1,112 @@
     /**
      * Computes the parsed datetime by setting the saved fields.
      * This method is idempotent, but it is not thread-safe.
      *
      * @param resetFields false by default, but when true, unsaved field values are cleared
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
      * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
             iSavedFields = savedFields = (SavedField[])iSavedFields.clone();
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
-        if (count > 0) {
-            // alter base year for parsing if first field is month or day
+
+        // Handle weekyear field specially if it exists
+        int weekYearIndex = -1;
+        int monthIndex = -1;
+        int weekIndex = -1;
+        for (int i = 0; i < count; i++) {
+            SavedField field = savedFields[i];
+            if (field.iField.getType() == DateTimeFieldType.weekyear()) {
+                weekYearIndex = i;
+            } else if (field.iField.getType() == DateTimeFieldType.monthOfYear()) {
+                monthIndex = i;
+            } else if (field.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {
+                weekIndex = i;
+            }
+        }
+
+        if (weekYearIndex != -1 && monthIndex != -1 && weekIndex != -1) {
+            // Handle weekyear-month-week combination
+            // Need to process these fields in the right order (weekyear, week, month would be wrong)
+            // Let's reorder the fields to ensure correct processing
+            SavedField weekYearField = savedFields[weekYearIndex];
+            SavedField monthField = savedFields[monthIndex];
+            SavedField weekField = savedFields[weekIndex];
+
+            // Create a temporary array for the special processing
+            SavedField[] tempFields = new SavedField[3];
+            tempFields[0] = weekYearField;
+            tempFields[1] = monthField;
+            tempFields[2] = weekField;
+
+            // Set millis based on weekyear and week first
+            long millis = iMillis;
+            try {
+                // First set weekyear and week to get a base date
+                millis = tempFields[0].set(millis, resetFields); // weekyear
+                millis = tempFields[2].set(millis, resetFields); // week
+                // Then adjust for month
+                millis = tempFields[1].set(millis, resetFields); // month
+            } catch (IllegalFieldValueException e) {
+                if (text != null) {
+                    e.prependMessage("Cannot parse \"" + text + '"');
+                }
+                throw e;
+            }
+
+            // Process the remaining fields if any
+            for (int i = 0; i < count; i++) {
+                if (i == weekYearIndex || i == monthIndex || i == weekIndex) {
+                    continue;
+                }
+                millis = savedFields[i].set(millis, resetFields);
+            }
+        } else if (count > 0) {
+            // Original logic for other cases
             DurationField months = DurationFieldType.months().getField(iChrono);
             DurationField days = DurationFieldType.days().getField(iChrono);
             DurationField first = savedFields[0].iField.getDurationField();
             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {
                 saveField(DateTimeFieldType.year(), iDefaultYear);
                 return computeMillis(resetFields, text);
             }
-        }
 
             long millis = iMillis;
             try {
                 for (int i = 0; i < count; i++) {
                     millis = savedFields[i].set(millis, resetFields);
                 }
             } catch (IllegalFieldValueException e) {
                 if (text != null) {
                     e.prependMessage("Cannot parse \"" + text + '"');
                 }
                 throw e;
             }
+        } else {
+            long millis = iMillis;
+        }
 
         if (iZone == null) {
             millis -= iOffset;
         } else {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
                 String message =
                     "Illegal instant due to time zone offset transition (" + iZone + ')';
                 if (text != null) {
                     message = "Cannot parse \"" + text + "\": " + message;
                 }
                 throw new IllegalArgumentException(message);
             }
         }
 
         return millis;
     }
\ No newline at end of file
