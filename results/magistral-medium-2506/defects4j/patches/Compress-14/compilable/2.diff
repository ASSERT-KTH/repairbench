diff --git a/tmp/eaa7b1b2-2b92-4c1d-b41c-047e279d2128_buggy.java b/tmp/3eb24435-035a-4ae7-807a-3eac01277cc8_fixed.java
index b81eeca..f0e03bc 100644
--- a/tmp/eaa7b1b2-2b92-4c1d-b41c-047e279d2128_buggy.java
+++ b/tmp/3eb24435-035a-4ae7-807a-3eac01277cc8_fixed.java
@@ -1,78 +1,67 @@
-    /**
-     * Parse an octal string from a buffer.
-     *
-     * <p>Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.</p>
-     *
-     * <p>The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).</p>
-     *
-     * <p>To work-around some tar implementations that insert a
-     * leading NUL this method returns 0 if it detects a leading NUL
-     * since Commons Compress 1.4.</p>
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
         long    result = 0;
         int     end = offset + length;
         int     start = offset;
 
         if (length < 2){
             throw new IllegalArgumentException("Length "+length+" must be at least 2");
         }
 
         boolean allNUL = true;
         for (int i = start; i < end; i++){
             if (buffer[i] != 0){
                 allNUL = false;
                 break;
             }
         }
         if (allNUL) {
             return 0L;
         }
 
-        // Skip leading spaces
+        // Skip leading spaces and NULs (added check for leading NUL)
         while (start < end){
-            if (buffer[start] == ' '){
+            if (buffer[start] == ' ' || buffer[start] == 0){
                 start++;
             } else {
                 break;
             }
         }
 
+        // If we encountered a leading NUL (and now start >= end), return 0
+        if (start >= end) {
+            return 0L;
+        }
+
         // Must have trailing NUL or space
         byte trailer;
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         } else {
             throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, end-1, trailer));
         }
         // May have additional NUL or space
         trailer = buffer[end-1];
         if (trailer == 0 || trailer == ' '){
             end--;
         }
 
+        // Check if we have empty content after stripping leading/trailing spaces/NULs
+        if (start >= end) {
+            return 0L;
+        }
+
         for ( ;start < end; start++) {
             final byte currentByte = buffer[start];
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7'){
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
