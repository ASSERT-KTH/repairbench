diff --git a/tmp/96343923-0474-4a73-9ce6-d3f19cdaf134_buggy.java b/tmp/c06ea61a-4da1-4548-996e-03ba280673e2_fixed.java
index 46817a7..dae77d8 100644
--- a/tmp/96343923-0474-4a73-9ce6-d3f19cdaf134_buggy.java
+++ b/tmp/c06ea61a-4da1-4548-996e-03ba280673e2_fixed.java
@@ -1,16 +1,53 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
+
+    // If neither type has all properties of the other, return a union type
+    boolean allFound = true;
+    for (String prop : properties.keySet()) {
+        if (!that.toMaybeRecordType().hasProperty(prop)) {
+            allFound = false;
+            break;
+        }
+    }
+    if (!allFound) {
+        boolean otherAllFound = true;
+        for (String prop : that.toMaybeRecordType().getProperties().keySet()) {
+            if (!hasProperty(prop)) {
+                otherAllFound = false;
+                break;
+            }
+        }
+        if (!otherAllFound) {
+            // Neither type is a subtype of the other - return union
+            return registry.createUnionType(this, that);
+        }
+    }
+
+    // Try to build acommon supertype
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties().keySet());
+
+    for (String property : allProperties) {
+        JSType thisType = hasProperty(property) ? getPropertyType(property) : null;
+        JSType thatType = that.toMaybeRecordType().hasProperty(property)
+            ? that.toMaybeRecordType().getPropertyType(property) : null;
+
+        if (thisType != null && thatType != null) {
+            // Both have the property - find the least supertype of the types
+            JSType commonType = thisType.getLeastSupertype(thatType);
+            builder.addProperty(property, commonType, null);
+        } else if (thisType != null) {
+            // Only this has the property
+            builder.addProperty(property, thisType, null);
+        } else if (thatType != null) {
+            // Only that has the property
+            builder.addProperty(property, thatType, null);
         }
     }
+
     return builder.build();
 }
\ No newline at end of file
