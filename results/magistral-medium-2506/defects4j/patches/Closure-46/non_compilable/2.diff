diff --git a/tmp/e1104637-0b8d-4baf-8b54-c8fc439d414d_buggy.java b/tmp/35901a8c-ec97-40e1-bad3-60564117746b_fixed.java
index 46817a7..7f6bce9 100644
--- a/tmp/e1104637-0b8d-4baf-8b54-c8fc439d414d_buggy.java
+++ b/tmp/35901a8c-ec97-40e1-bad3-60564117746b_fixed.java
@@ -1,16 +1,36 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    // Create a new builder for the result type
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    // Collect all properties from both types
+    Set<String> allProperties = new HashSet<>(properties.keySet());
+    allProperties.addAll(that.toMaybeRecordType().getProperties());
+
+    // For each property in the union of both types' properties
+    for (String property : allProperties) {
+      if (this.properties.containsKey(property) &&
+          that.toMaybeRecordType().getProperties().containsKey(property)) {
+        // If both have the property, use the least supertype of their types
+        JSType typeA = getPropertyType(property);
+        JSType typeB = that.toMaybeRecordType().getPropertyType(property);
+        if (typeA != null && typeB != null) {
+          builder.addProperty(property, typeA.getLeastSupertype(typeB), null);
         }
+      } else if (this.properties.containsKey(property)) {
+        // If only this has the property, add it as-is
+        builder.addProperty(property, getPropertyType(property), getPropertyNode(property));
+      } else {
+        // If only that has the property, add it as-is
+        builder.addProperty(property, that.toMaybeRecordType().getPropertyType(property),
+           that.toMaybeRecordType().getPropertyNode(property));
       }
-    return builder.build();
+    }
+
+    // The least supertype of two record types is the union of the two record types
+    return registry.createUnionType(this, that.toMaybeRecordType());
   }
\ No newline at end of file
