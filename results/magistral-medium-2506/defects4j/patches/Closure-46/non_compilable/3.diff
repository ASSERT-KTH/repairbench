diff --git a/tmp/37fa4a68-0b43-4873-8eeb-3767122ce4cc_buggy.java b/tmp/9633e49a-6c06-4f85-868a-7eb28221a8b9_fixed.java
index 46817a7..8de8292 100644
--- a/tmp/37fa4a68-0b43-4873-8eeb-3767122ce4cc_buggy.java
+++ b/tmp/9633e49a-6c06-4f85-868a-7eb28221a8b9_fixed.java
@@ -1,16 +1,32 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
         return super.getLeastSupertype(that);
     }
-    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+    RecordType thatRecord = that.toMaybeRecordType();
+    Set<String> allProperties = new HashSet<>();
+    allProperties.addAll(properties.keySet());
+    allProperties.addAll(thatRecord.getPropertyNames());
+
+    // If the property sets are identical and types match, return one of them
+    boolean typesMatch = true;
+    for (String property : allProperties) {
+        if (properties.containsKey(property) && thatRecord.hasProperty(property)) {
+            if (!properties.get(property).isEquivalentTo(
+                    thatRecord.getPropertyType(property))) {
+                typesMatch = false;
+                break;
             }
+        } else {
+            typesMatch = false;
+            break;
         }
-    return builder.build();
+    }
+    if (typesMatch) {
+        return this;
+    }
+
+    // Otherwise return the union of both record types
+    return registry.createUnionType(this, that);
 }
\ No newline at end of file
