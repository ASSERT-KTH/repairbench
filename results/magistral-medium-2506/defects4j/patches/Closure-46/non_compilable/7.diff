diff --git a/tmp/53be99b9-7402-4e7f-821b-6bc60620d3fd_buggy.java b/tmp/8a25a200-507f-4b20-86cd-1ab5efb27ccc_fixed.java
index 46817a7..ba8b8f6 100644
--- a/tmp/53be99b9-7402-4e7f-821b-6bc60620d3fd_buggy.java
+++ b/tmp/8a25a200-507f-4b20-86cd-1ab5efb27ccc_fixed.java
@@ -1,16 +1,40 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
+
+  // If we're not compatible at all, return a union type
+  if (!this.isEquivalentTo(that) &&
+      !this.isSubtype(that) &&
+      !that.isSubtype(this)) {
+    return registry.createUnionType(this, that);
+  }
+
+  // For compatible types, build a record type with the union of properties
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-    for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+
+  // Add all properties from both types
+  Set<String> allProperties = new HashSet<>();
+  allProperties.addAll(properties.keySet());
+  allProperties.addAll(that.toMaybeRecordType().properties.keySet());
+
+  for (String property : allProperties) {
+    JSType thisType = this.hasProperty(property) ? this.getPropertyType(property) : null;
+    JSType thatType = that.toMaybeRecordType().hasProperty(property) ?
+                       that.toMaybeRecordType().getPropertyType(property) : null;
+
+    if (thisType != null && thatType != null) {
+      // Both have the property - take the least supertype of the types
+      builder.addProperty(property, thisType.getLeastSupertype(thatType), null);
+    } else if (thisType != null) {
+      // Only this has the property
+      builder.addProperty(property, thisType, null);
+    } else if (thatType != null) {
+      // Only that has the property
+      builder.addProperty(property, thatType, null);
     }
   }
+
   return builder.build();
 }
\ No newline at end of file
