diff --git a/tmp/12253805-da30-4394-9a23-d1bb23b94361_buggy.java b/tmp/cb10a27a-2831-4448-9ea8-6eb9f537a486_fixed.java
index 46817a7..354bbd8 100644
--- a/tmp/12253805-da30-4394-9a23-d1bb23b94361_buggy.java
+++ b/tmp/cb10a27a-2831-4448-9ea8-6eb9f537a486_fixed.java
@@ -1,16 +1,51 @@
   @Override
   public JSType getLeastSupertype(JSType that) {
     if (!that.isRecordType()) {
       return super.getLeastSupertype(that);
     }
+
+    // First try building a common supertype with compatible properties
     RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+    boolean hasCommonProperties = false;
+    RecordType otherRecord = that.toMaybeRecordType();
+
+    // Check for common properties with compatible types
     for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
+      if (otherRecord.hasProperty(property)) {
+        JSType thisPropType = getPropertyType(property);
+        JSType otherPropType = otherRecord.getPropertyType(property);
+        if (thisPropType.isSubtype(otherPropType) ||
+            otherPropType.isSubtype(thisPropType)) {
+          JSType commonSuperType =
+              thisPropType.getLeastSupertype(otherPropType);
+          builder.addProperty(property, commonSuperType,
+              getPropertyNode(property));
+          hasCommonProperties = true;
+        }
+      }
+    }
+
+    // If we found common properties, check if we can form a supertype
+    // Otherwise, create a union type
+    if (hasCommonProperties) {
+      // Add properties unique to each type (with their original types)
+      // For this type
+      for (String property : properties.keySet()) {
+        if (!otherRecord.hasProperty(property)) {
           builder.addProperty(property, getPropertyType(property),
               getPropertyNode(property));
         }
       }
+      // For the other type
+      for (String property : otherRecord.getProperties()) {
+        if (!hasProperty(property)) {
+          builder.addProperty(property, otherRecord.getPropertyType(property),
+              otherRecord.getPropertyNode(property));
+        }
+      }
       return builder.build();
+    } else {
+      // No common properties, so return union type
+      return registry.createUnionType(this, that);
+    }
   }
\ No newline at end of file
