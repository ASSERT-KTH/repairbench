diff --git a/tmp/e0f2dab4-ac0b-4366-82c0-5525d3ec87a1_buggy.java b/tmp/5deb088b-519a-46c0-a22f-0aa115c520ea_fixed.java
index 46817a7..17012d9 100644
--- a/tmp/e0f2dab4-ac0b-4366-82c0-5525d3ec87a1_buggy.java
+++ b/tmp/5deb088b-519a-46c0-a22f-0aa115c520ea_fixed.java
@@ -1,16 +1,89 @@
 @Override
 public JSType getLeastSupertype(JSType that) {
   if (!that.isRecordType()) {
     return super.getLeastSupertype(that);
   }
   RecordTypeBuilder builder = new RecordTypeBuilder(registry);
+
+  // Get all property names from both types
+  Set<String> allProperties = new HashSet<>();
+  allProperties.addAll(properties.keySet());
+  if (that.isRecordType()) {
+    allProperties.addAll(that.toMaybeRecordType().getProperties());
+  }
+
+  // Add all properties from both types, preserving types where they match
+  for (String property : allProperties) {
+    JSType thisType = properties.containsKey(property) ?
+        getPropertyType(property) : null;
+    JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+    boolean hasThisProperty = properties.containsKey(property);
+    boolean hasThatProperty = that.toMaybeRecordType().hasProperty(property);
+
+    if (hasThisProperty && hasThatProperty) {
+      // If both types have the property with equivalent types, add it as is
+      if (thatType.isEquivalentTo(thisType)) {
+        builder.addProperty(property, thisType, getPropertyNode(property));
+      } else {
+        // Types differ, we need to create a union of the property types
+        JSType unionType = registry.createUnionType(thisType, thatType);
+        builder.addProperty(property, unionType, getPropertyNode(property));
+      }
+    } else if (hasThisProperty) {
+      // Only this type has the property
+      builder.addProperty(property, thisType, getPropertyNode(property));
+    } else if (hasThatProperty) {
+      // Only that type has the property
+      builder.addProperty(property, thatType, null);
+    }
+  }
+
+  // If we're missing any properties that the other type has, we need to union
+  // If we're missing any properties that this type has, we need to union
+  // If there are type mismatches on shared properties, we need to return a union
+
+  // First check if all properties are compatible (types match on shared properties)
+  boolean allPropertiesCompatible = true;
+  for (String property : properties.keySet()) {
+    if (that.toMaybeRecordType().hasProperty(property)) {
+      JSType thisType = getPropertyType(property);
+      JSType thatType = that.toMaybeRecordType().getPropertyType(property);
+      if (!thisType.isEquivalentTo(thatType)) {
+        allPropertiesCompatible = false;
+        break;
+      }
+    }
+  }
+
+  // If not all properties are compatible, we need to create a union type
+  if (!allPropertiesCompatible) {
+    RecordType thisTypeAsRecord = this;
+    RecordType thatTypeAsRecord = that.toMaybeRecordType();
+    return registry.createUnionType(thisTypeAsRecord, thatTypeAsRecord);
+  }
+
+  // If we got here, all shared properties have matching types
+  // Now check if one type has properties the other doesn't
+  boolean hasExtraProperties = false;
   for (String property : properties.keySet()) {
-      if (that.toMaybeRecordType().hasProperty(property) &&
-          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
-              getPropertyType(property))) {
-        builder.addProperty(property, getPropertyType(property),
-            getPropertyNode(property));
+    if (!that.toMaybeRecordType().hasProperty(property)) {
+      hasExtraProperties = true;
+      break;
+    }
+  }
+  for (String property : that.toMaybeRecordType().getProperties()) {
+    if (!properties.containsKey(property)) {
+      hasExtraProperties = true;
+      break;
+    }
   }
+
+  // If there are extra properties in either type, we need to return a union
+  if (hasExtraProperties) {
+    return registry.createUnionType(this, that.toMaybeRecordType());
   }
-    return builder.build();
+
+  // If we get here, both types have exactly the same properties with equivalent types
+  // so we can return either type (they're essentially the same)
+  return this;
 }
\ No newline at end of file
