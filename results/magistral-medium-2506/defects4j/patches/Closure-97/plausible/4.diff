diff --git a/tmp/4c3f08c8-5a9d-4f2a-8af5-dc797f75bbe3_buggy.java b/tmp/0968c22f-ea24-4085-a04f-93dafd388f34_fixed.java
index 1126687..0836f28 100644
--- a/tmp/4c3f08c8-5a9d-4f2a-8af5-dc797f75bbe3_buggy.java
+++ b/tmp/0968c22f-ea24-4085-a04f-93dafd388f34_fixed.java
@@ -1,65 +1,77 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // For unsigned right shift, we need to handle negative numbers
+          // properly by using a long and masking to 32 bits
+          long unsignedVal = lvalInt & 0xFFFFFFFFL; // Convert to unsigned 32-bit
+          result = unsignedVal >>> rvalInt;
+          // Convert back to double, but maintain unsigned nature
+          // For values > Integer.MAX_VALUE, we need to handle them properly
+          if (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE) {
+            // Convert to unsigned long and then to double
+            long shifted = unsignedVal >>> rvalInt;
+            // For serious bit patterns, we might need this:
+            double unsignedResult = shifted & 0xFFFFFFFFL;
+            if (shifted < 0) {
+              unsignedResult = shifted + 0x100000000L;
+            }
+            result = unsignedResult;
+          }
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
