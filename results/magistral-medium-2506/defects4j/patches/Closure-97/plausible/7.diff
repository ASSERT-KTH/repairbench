diff --git a/tmp/13e9c08f-887d-44d6-affb-ab5dd836a59d_buggy.java b/tmp/411d1333-a364-4972-9fd9-803d7537e369_fixed.java
index 1126687..32b8bd0 100644
--- a/tmp/13e9c08f-887d-44d6-affb-ab5dd836a59d_buggy.java
+++ b/tmp/411d1333-a364-4972-9fd9-803d7537e369_fixed.java
@@ -1,65 +1,88 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
+      // Perform the operation in a way that matches JavaScript's 32-bit semantics
       switch (n.getType()) {
         case Token.LSH:
-          result = lvalInt << rvalInt;
+          result = ((long)lvalInt << rvalInt) & 0xFFFFFFFFL;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // For unsigned right shift, we need to handle it as an unsigned 32-bit value
+          long unsignedVal = lvalInt & 0xFFFFFFFFL;
+          result = unsignedVal >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
+      // For LSH and URSH, we might need to convert to double properly
+      // For LSH, if the result overflows 32 bits, we need to sign-extend
+      if (n.getType() == Token.LSH) {
+        // If the shift count is less than 32, we've already masked to 32 bits
+        // If shift count is 0, we keep the original value
+        // Otherwise, if shift count is >= 32, result would be 0 in JavaScript
+        if (rvalInt >= 32) {
+          result = 0;
+        } else {
+          // The & 0xFFFFFFFFL above already ensures we have 32-bit result
+          // But we need to interpret it as signed 32-bit
+          long signedResult = (long)result;
+          if (signedResult >= 0x80000000L) {
+            signedResult -= 0x100000000L;
+          }
+          result = (double) signedResult;
+        }
+      } else if (n.getType() == Token.URSH) {
+        // For URSH, the result is already properly masked as unsigned 32-bit
+      } else {
+        // For regular RSH, result is already correct
+      }
+
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
