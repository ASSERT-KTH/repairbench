diff --git a/tmp/f045a6ef-ee05-4210-97dc-ca5f45db2a79_buggy.java b/tmp/cabde121-9be0-4caa-bb07-6408720a29ad_fixed.java
index 1126687..0cc0211 100644
--- a/tmp/f045a6ef-ee05-4210-97dc-ca5f45db2a79_buggy.java
+++ b/tmp/cabde121-9be0-4caa-bb07-6408720a29ad_fixed.java
@@ -1,65 +1,80 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges.  We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
       // only the lower 5 bits are used when shifting, so don't do anything
       // if the shift amount is outside [0,32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
+      // Mask shift amount to 0-31 (5 bits)
+      rvalInt &= 0x1F;
 
       switch (n.getType()) {
         case Token.LSH:
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          long unsignedResult = ((long) lvalInt) >>> rvalInt;
+          result = unsignedToDouble(unsignedResult);
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
+
+  // Helper method to convert unsigned long to double properly
+  private static double unsignedToDouble(long value) {
+    // Mask to 32 bits since JavaScript uses 32-bit unsigned shifts
+    long mask = 0xFFFFFFFFL;
+    long unsignedVal = value & mask;
+    if (unsignedVal < 0) {
+      // For values greater than Integer.MAX_VALUE, add 2^32 to get the unsigned value
+      unsignedVal += (1L << 32);
+    }
+    return unsignedVal;
+  }
\ No newline at end of file
