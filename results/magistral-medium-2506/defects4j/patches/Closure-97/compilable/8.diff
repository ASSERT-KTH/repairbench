diff --git a/tmp/d1b55786-baaf-4872-aa57-d983ceb58889_buggy.java b/tmp/c0eba142-50da-4efc-ba10-f6aef3396b65_fixed.java
index 1126687..3e568a4 100644
--- a/tmp/d1b55786-baaf-4872-aa57-d983ceb58889_buggy.java
+++ b/tmp/c0eba142-50da-4efc-ba10-f6aef3396b65_fixed.java
@@ -1,65 +1,74 @@
   /**
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
     if (left.getType() == Token.NUMBER &&
         right.getType() == Token.NUMBER) {
 
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
       // check ranges. We do not do anything that would clip the double to
       // a 32-bit range, since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
-      if (!(rval >= 0 && rval < 32)) {
+      // only the lower 5 bits are used when shifting (for right shift, mask to 31 for URSH)
+      if (n.getType() == Token.URSH) {
+        if (!(rval >= 0 && rval <= 31)) {
+          error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+          return n;
+        }
+      } else if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
       // Convert the numbers to ints
       int lvalInt = (int) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
       int rvalInt = (int) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
       }
 
       switch (n.getType()) {
         case Token.LSH:
+          // Mask the shift amount to 5 bits like JavaScript does
+          rvalInt &= 0x1F;
           result = lvalInt << rvalInt;
           break;
         case Token.RSH:
+          // Mask the shift amount to 5 bits like JavaScript does
+          rvalInt &= 0x1F;
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // For URSH, we need to handle negative numbers correctly by treating them as unsigned
+          // Mask shift amount to 5 bits like JavaScript does (but actually max 31 for URSH)
+          rvalInt &= 0x1F;
+          int unsignedVal = lvalInt >>> 0; // Convert to unsigned by masking to 32 bits
+          result = unsignedVal >>> rvalInt;
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +
               Node.tokenToName(n.getType()));
       }
 
       Node newNumber = Node.newNumber(result);
       n.getParent().replaceChild(n, newNumber);
       reportCodeChange();
 
       return newNumber;
     }
 
     return n;
   }
\ No newline at end of file
