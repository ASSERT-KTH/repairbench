diff --git a/tmp/fb4ea5b0-f691-48d8-a68e-7ce6ea75f01e_buggy.java b/tmp/7bf56b7d-8d6f-4364-8245-338108d5b1d2_fixed.java
index fa6828a..55e3755 100644
--- a/tmp/fb4ea5b0-f691-48d8-a68e-7ce6ea75f01e_buggy.java
+++ b/tmp/7bf56b7d-8d6f-4364-8245-338108d5b1d2_fixed.java
@@ -1,5 +1,23 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // Get fields ordered from most specific to least specific
+        List<Field> sortedFields = orderedInstanceFieldsFrom(awaitingInjectionClazz).stream()
+            .sorted((f1, f2) -> {
+                // If one field type is assignable from the other, it's less specific
+                if (f1.getType().isAssignableFrom(f2.getType())) {
+                    return 1; // f2 is more specific
+                } else if (f2.getType().isAssignableFrom(f1.getType())) {
+                    return -1; // f1 is more specific
+                }
+                return 0; // types are equal or unrelated
+            })
+            .collect(Collectors.toList());
+
+        // Track which mocks have been injected to avoid multiple injections
+        Set<Object> injectedMocks = new HashSet<>();
+
+        // Process fields in order of specificity
+        for(Field field : sortedFields) {
+            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance)
+                              .thenInject(injectedMocks);
         }
     }
\ No newline at end of file
