diff --git a/tmp/444bd6d9-93df-4fe4-aa9a-bea4ac73922b_buggy.java b/tmp/8c69478f-35ab-4858-b29f-e031539cf430_fixed.java
index fa6828a..bc54d0e 100644
--- a/tmp/444bd6d9-93df-4fe4-aa9a-bea4ac73922b_buggy.java
+++ b/tmp/8c69478f-35ab-4858-b29f-e031539cf430_fixed.java
@@ -1,5 +1,21 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // First collect all fields that could potentially accept a mock
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+
+        // Process each field, but keep track of which mocks have been injected
+        Set<Object> injectedMocks = new HashSet<>();
+
+        for (Field field : fields) {
+            // Create a new filtered set of mocks for each field, excluding already injected ones
+            Set<Object> availableMocks = new HashSet<>(mocks);
+            availableMocks.removeAll(injectedMocks);
+
+            // Filter and inject only if not already injected
+            Optional<Pair<Object, Field>> candidate = mockCandidateFilter.filterCandidate(availableMocks, field, fieldInstance);
+            if (candidate.isPresent()) {
+                Pair<Object, Field> injectionPair = candidate.get();
+                injectionPair.inject();
+                injectedMocks.add(injectionPair.getLeft());
+            }
         }
     }
\ No newline at end of file
