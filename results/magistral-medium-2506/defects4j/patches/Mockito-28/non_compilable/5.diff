diff --git a/tmp/8bff365f-9f69-4da7-908c-83b3e62f647f_buggy.java b/tmp/44ab1db2-301b-4c60-9af5-7dedf78ec026_fixed.java
index fa6828a..0c6fa4d 100644
--- a/tmp/8bff365f-9f69-4da7-908c-83b3e62f647f_buggy.java
+++ b/tmp/44ab1db2-301b-4c60-9af5-7dedf78ec026_fixed.java
@@ -1,5 +1,31 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+        Set<Field> processedFields = new HashSet<>();
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            Class<?> fieldType = field.getType();
+            // Find the best matching mock for this field type
+            Object bestMatch = null;
+            for (Object mock : mocks) {
+                Class<?> mockType = mock.getClass();
+                if (fieldType.isAssignableFrom(mockType)) {
+                    if (bestMatch == null) {
+                        bestMatch = mock;
+                    } else {
+                        // Check if this is a better match than the current bestMatch
+                        Class<?> currentBestMatchType = bestMatch.getClass();
+                        if (fieldType.isAssignableFrom(mockType) &&
+                            mockType.isAssignableFrom(currentBestMatchType)) {
+                            bestMatch = mock;
+                        }
+                    }
+                }
+            }
+            if (bestMatch != null) {
+                try {
+                    field.setAccessible(true);
+                    field.set(fieldInstance, bestMatch);
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException(e);
+                }
+            }
         }
     }
\ No newline at end of file
