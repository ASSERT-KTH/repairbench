diff --git a/tmp/b477fc45-a96d-4788-9a53-358505e5337e_buggy.java b/tmp/544ccc6d-0518-4fe2-8258-d550d37fbdca_fixed.java
index fa6828a..e814cfb 100644
--- a/tmp/b477fc45-a96d-4788-9a53-358505e5337e_buggy.java
+++ b/tmp/544ccc6d-0518-4fe2-8258-d550d37fbdca_fixed.java
@@ -1,5 +1,37 @@
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        // First collect all fields that could potentially be injected
+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);
+
+        // Keep track of which mocks we've already injected to prevent duplicate injection
+        Set<Object> injectedMocks = new HashSet<Object>();
+
+        for(Field field : fields) {
+            // Get the most specific mock that matches the field type
+            Object bestMatchMock = findBestMockMatch(mocks, field.getType());
+
+            if (bestMatchMock != null && !injectedMocks.contains(bestMatchMock)) {
+                mockCandidateFilter.filterCandidate(Collections.singleton(bestMatchMock), field, fieldInstance)
+                                  .thenInject();
+                injectedMocks.add(bestMatchMock);
             }
         }
+    }
+
+    private Object findBestMockMatch(Set<Object> mocks, Class<?> targetType) {
+        Object bestMatch = null;
+
+        for(Object mock : mocks) {
+            if (targetType.isAssignableFrom(mock.getClass())) {
+                // If we have an exact match, use that
+                if (targetType.equals(mock.getClass())) {
+                    return mock;
+                }
+                // Otherwise keep track of this potential match
+                if (bestMatch == null) {
+                    bestMatch = mock;
+                }
+            }
+        }
+
+        return bestMatch;
+    }
\ No newline at end of file
