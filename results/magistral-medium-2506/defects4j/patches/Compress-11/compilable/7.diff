diff --git a/tmp/d5a1b818-ff37-4547-b0b8-c9d82d38e4be_buggy.java b/tmp/6dfc51ea-6ffe-4ee8-bacf-a534a8907169_fixed.java
index 6b160ef..db9cd55 100644
--- a/tmp/d5a1b818-ff37-4547-b0b8-c9d82d38e4be_buggy.java
+++ b/tmp/6dfc51ea-6ffe-4ee8-bacf-a534a8907169_fixed.java
@@ -1,68 +1,93 @@
     /**
      * Create an archive input stream from an input stream, autodetecting
      * the archive type from the first few bytes of the stream. The InputStream
      * must support marks, like BufferedInputStream.
      *
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
 
         if (!in.markSupported()) {
             throw new IllegalArgumentException("Mark is not supported.");
         }
 
-        final byte[] signature = new byte[12];
+        final boolean[] archiveFound = new boolean[1];
+        ArchiveInputStream result = null;
+
+        try {
+            // First check for !<arch> signature (Debian bug #523787)
+            final byte[] signature = new byte[8];
             in.mark(signature.length);
-        try {
             int signatureLength = in.read(signature);
             in.reset();
+            if (ArArchiveInputStream.matches(signature, signatureLength)) {
+                return new ArArchiveInputStream(in);
+            }
+
+            // Try to check if its a TAR file
+            final byte[] tarheader = new byte[512];
+            in.mark(tarheader.length);
+            signatureLength = in.read(tarheader);
+            in.reset();
+
+            // COMPRESS-117 - improve auto-recognition
+            try {
+                // Create a new TarArchiveInputStream to verify the header
+                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
+                try {
+                    tais.getNextEntry();
+                    archiveFound[0] = true;
+                    return new TarArchiveInputStream(in);
+                } catch (Exception e) { // NOPMD
+                    // Not a valid TAR file
+                } finally {
+                    try {
+                        tais.close();
+                    } catch (IOException e) {
+                        // ignore
+                    }
+                }
+            } catch (Exception e) { // NOPMD
+                // Not a TAR file
+            }
+
+            // Now check other archive types
+            in.mark(12);
+            signatureLength = in.read(signature);
+            in.reset();
             if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+                archiveFound[0] = true;
                 return new ZipArchiveInputStream(in);
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+                archiveFound[0] = true;
                 return new JarArchiveInputStream(in);
-            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
-                return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+                archiveFound[0] = true;
                 return new CpioArchiveInputStream(in);
             }
 
             // Dump needs a bigger buffer to check the signature;
             final byte[] dumpsig = new byte[32];
             in.mark(dumpsig.length);
             signatureLength = in.read(dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+                archiveFound[0] = true;
                 return new DumpArchiveInputStream(in);
             }
-
-            // Tar needs an even bigger buffer to check the signature; read the first block
-            final byte[] tarheader = new byte[512];
-            in.mark(tarheader.length);
-            signatureLength = in.read(tarheader);
-            in.reset();
-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in);
-            }
-            // COMPRESS-117 - improve auto-recognition
-            try {
-                TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
-                tais.getNextEntry();
-                return new TarArchiveInputStream(in);
-            } catch (Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            }
         } catch (IOException e) {
             throw new ArchiveException("Could not use reset and mark operations.", e);
         }
 
+        if (!archiveFound[0]) {
             throw new ArchiveException("No Archiver found for the stream signature");
         }
+        return result;
+    }
\ No newline at end of file
