diff --git a/tmp/25734d9e-33f4-46fd-9b53-d981988230b4_buggy.java b/tmp/b9a142d6-c020-4cb8-887e-65a07c6f79d6_fixed.java
index 875b31b..27c4f99 100644
--- a/tmp/25734d9e-33f4-46fd-9b53-d981988230b4_buggy.java
+++ b/tmp/b9a142d6-c020-4cb8-887e-65a07c6f79d6_fixed.java
@@ -1,54 +1,64 @@
 /**
  * Render the specified text and return the rendered Options
  * in a StringBuffer.
  *
  * @param sb The StringBuffer to place the rendered text into.
  * @param width The number of characters to display per line
  * @param nextLineTabStop The position on the next line for the first tab.
  * @param text The text to be rendered.
  *
  * @return the StringBuffer with the rendered Options contents.
  */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
 
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
         text = padding + text.substring(pos).trim();
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
+        // Check if pos is within padding area, and adjust if necessary
+        if (pos <= padding.length())
         {
+            pos = width; // Force wrap at width if padding is too long
+        }
+
+        // Check if the line is too long and we're wrapping at the padding boundary
+        if ((text.length() > width) && (pos == nextLineTabStop))
+        {
+            // This is the critical fix - we need to allow wrapping after padding
+            pos = Math.min(width, findWrapPos(text, width, padding.length()));
+            if (pos == -1) { // If no good wrap point found, force wrap at width
                 pos = width;
             }
+        }
 
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
     }
 }
\ No newline at end of file
