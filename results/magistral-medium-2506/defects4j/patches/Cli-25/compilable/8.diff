diff --git a/tmp/4e4082d2-fe4a-42f3-88d9-535b4c86b7fc_buggy.java b/tmp/e5f72145-0b6b-49d6-b1cc-900eaa119069_fixed.java
index 875b31b..733cdb9 100644
--- a/tmp/4e4082d2-fe4a-42f3-88d9-535b4c86b7fc_buggy.java
+++ b/tmp/e5f72145-0b6b-49d6-b1cc-900eaa119069_fixed.java
@@ -1,54 +1,68 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
     protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                              int nextLineTabStop, String text)
     {
         int pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(rtrim(text));
-
             return sb;
         }
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
         if (nextLineTabStop >= width)
         {
-            // stops infinite loop happening
             nextLineTabStop = width - 1;
         }
 
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
         final String padding = createPadding(nextLineTabStop);
 
         while (true)
         {
-            text = padding + text.substring(pos).trim();
+            // Get the remaining text but don't trim it yet
+            String remainingText = text.substring(pos);
+            // Apply padding to the remaining text
+            text = padding + remainingText;
+
+            // Now find the wrap position in the new text
             pos = findWrapPos(text, width, 0);
 
             if (pos == -1)
             {
                 sb.append(text);
-
                 return sb;
             }
 
             if ((text.length() > width) && (pos == nextLineTabStop - 1))
             {
                 pos = width;
             }
 
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+            // Extract the line up to pos (accounting for padding)
+            // But don't trim yet since we might have spaces from the original text
+            String lineToAdd = text.substring(0, pos);
+            // Rtrim only the portion we're adding (not the entire remaining text)
+            sb.append(rtrim(lineToAdd)).append(defaultNewLine);
+
+            // Move forward in the original text, not the padded text
+            // First, calculate how much we've consumed from the original text
+            int consumedFromOriginal = 0;
+            if (remainingText.length() > 0) {
+                // Calculate how much of the original text was in this line
+                // Pos could be within the padding, so we need to adjust
+                if (pos < padding.length()) {
+                    consumedFromOriginal = 0; // nothing from original was used
+                } else {
+                    // The amount used from original is pos minus padding length
+                    consumedFromOriginal = pos - padding.length();
+                    // But don't exceed the available remaining text
+                    if (consumedFromOriginal > remainingText.length()) {
+                        consumedFromOriginal = remainingText.length();
+                    }
+                }
+            }
+
+            // Update the remaining text for next iteration
+            text = remainingText.substring(consumedFromOriginal);
         }
     }
\ No newline at end of file
