diff --git a/tmp/81b6a16b-30b6-4ea6-9ebf-c8d02653563b_buggy.java b/tmp/3835b17f-9484-4174-b6a1-40be1aabef56_fixed.java
index 875b31b..b6d98a0 100644
--- a/tmp/81b6a16b-30b6-4ea6-9ebf-c8d02653563b_buggy.java
+++ b/tmp/3835b17f-9484-4174-b6a1-40be1aabef56_fixed.java
@@ -1,54 +1,53 @@
-    /**
-     * Render the specified text and return the rendered Options
-     * in a StringBuffer.
-     *
-     * @param sb The StringBuffer to place the rendered text into.
-     * @param width The number of characters to display per line
-     * @param nextLineTabStop The position on the next line for the first tab.
-     * @param text The text to be rendered.
-     *
-     * @return the StringBuffer with the rendered Options contents.
-     */
 protected StringBuffer renderWrappedText(StringBuffer sb, int width,
                                          int nextLineTabStop, String text)
 {
     int pos = findWrapPos(text, width, 0);
 
     if (pos == -1)
     {
         sb.append(rtrim(text));
-
         return sb;
     }
     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
 
     if (nextLineTabStop >= width)
     {
         // stops infinite loop happening
         nextLineTabStop = width - 1;
     }
 
     // all following lines must be padded with nextLineTabStop space
     // characters
     final String padding = createPadding(nextLineTabStop);
 
     while (true)
     {
-            text = padding + text.substring(pos).trim();
+        String remainingText = text.substring(pos).trim();
+        text = padding + remainingText;
         pos = findWrapPos(text, width, 0);
 
         if (pos == -1)
         {
             sb.append(text);
-
             return sb;
         }
 
         if ((text.length() > width) && (pos == nextLineTabStop - 1))
         {
             pos = width;
         }
 
+        // We need to adjust pos to account for the padding
+        // but only if we're not at the beginning of a line
+        int adjustPos = pos;
+        if (pos > nextLineTabStop) {
+            adjustPos = pos;
+        } else {
+            // Handle case where padding pushes the wrap position
+            adjustPos = width;
+        }
+
         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
+        text = remainingText; // Reset text to original without padding for next iteration
     }
 }
\ No newline at end of file
