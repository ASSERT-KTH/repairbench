diff --git a/tmp/3c50399d-fb3e-41b8-b750-47a680a5b97a_buggy.java b/tmp/c7d1ceaf-0106-4b03-b043-1bcf303e66e7_fixed.java
index 602226b..652dba4 100644
--- a/tmp/3c50399d-fb3e-41b8-b750-47a680a5b97a_buggy.java
+++ b/tmp/c7d1ceaf-0106-4b03-b043-1bcf303e66e7_fixed.java
@@ -1,26 +1,27 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar()) {
+        if (parent != null && parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
+            if (aliasVar != null) {
               aliases.put(name, aliasVar);
-
               String qualifiedName =
                   aliasVar.getInitialValue().getQualifiedName();
               transformation.addAlias(name, qualifiedName);
+            }
             // Bleeding functions already get a BAD_PARAMETERS error, so just
             // do nothing.
             // Parameters of the scope function also get a BAD_PARAMETERS
             // error.
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
