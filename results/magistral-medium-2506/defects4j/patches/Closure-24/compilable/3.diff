diff --git a/tmp/1993a7b6-11d6-438c-b54f-efd59e057f9e_buggy.java b/tmp/2e4c9d55-bc34-4d62-b05c-98e5140f660c_fixed.java
index 602226b..75e1f00 100644
--- a/tmp/1993a7b6-11d6-438c-b54f-efd59e057f9e_buggy.java
+++ b/tmp/2e4c9d55-bc34-4d62-b05c-98e5140f660c_fixed.java
@@ -1,26 +1,28 @@
     private void findAliases(NodeTraversal t) {
       Scope scope = t.getScope();
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
+        if (n == null) {
+          continue;
+        }
         int type = n.getType();
         Node parent = n.getParent();
         if (parent.isVar()) {
           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
           String name = n.getString();
           Var aliasVar = scope.getVar(name);
+          if (aliasVar != null) {
               aliases.put(name, aliasVar);
-
-          String qualifiedName =
-              aliasVar.getInitialValue().getQualifiedName();
+              Node initialValue = aliasVar.getInitialValue();
+              if (initialValue != null && initialValue.isQualifiedName()) {
+                  String qualifiedName = initialValue.getQualifiedName();
                   transformation.addAlias(name, qualifiedName);
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
+              }
+          }
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
     }
\ No newline at end of file
