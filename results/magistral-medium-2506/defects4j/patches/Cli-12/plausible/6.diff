diff --git a/tmp/44f7d28e-0289-4253-b123-b9627832cc18_buggy.java b/tmp/e00b8710-0250-4bd9-a0ff-9535c76a62c2_fixed.java
index 7e64f1d..757cadf 100644
--- a/tmp/44f7d28e-0289-4253-b123-b9627832cc18_buggy.java
+++ b/tmp/e00b8710-0250-4bd9-a0ff-9535c76a62c2_fixed.java
@@ -1,78 +1,98 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        List<String> tokens = new ArrayList<String>();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
+                // check if the option exists first
                 if (options.hasOption(opt))
                 {
                     tokens.add(arg);
                 }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // check for --foo=bar or -foo=bar
+                    int pos = arg.indexOf('=');
+                    if (pos > 0)
                     {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                        String potentialOpt = arg.substring(0, pos);
+                        String optPart = Util.stripLeadingHyphens(potentialOpt);
+
+                        if (options.hasOption(optPart))
+                        {
+                            tokens.add(arg.substring(0, pos));
+                            tokens.add(arg.substring(pos + 1));
+                            continue;
+                        }
                     }
-                    else
+
+                    // check if it's a short option with equals
+                    if (arg.startsWith("-") && arg.length() > 2 && arg.charAt(1) != '-')
+                    {
+                        String shortOpt = arg.substring(0, 2);
+                        String shortOptPart = Util.stripLeadingHyphens(shortOpt);
+
+                        if (options.hasOption(shortOptPart))
                         {
+                            tokens.add(shortOpt);
+                            tokens.add(arg.substring(2));
+                            continue;
+                        }
+                    }
+
                     eatTheRest = stopAtNonOption;
                     tokens.add(arg);
                 }
             }
-            }
             else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
