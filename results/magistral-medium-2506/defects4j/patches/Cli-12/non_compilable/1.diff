diff --git a/tmp/69d7f07b-8b27-4008-ab90-1d9e7f809a74_buggy.java b/tmp/f19f48dd-cde3-42b3-b63c-09e161667809_fixed.java
index 7e64f1d..2d8f55a 100644
--- a/tmp/69d7f07b-8b27-4008-ab90-1d9e7f809a74_buggy.java
+++ b/tmp/f19f48dd-cde3-42b3-b63c-09e161667809_fixed.java
@@ -1,78 +1,146 @@
     /**
      * <p>This flatten method does so using the following rules:
      * <ol>
      *  <li>If an {@link Option} exists for the first character of
      *  the <code>arguments</code> entry <b>AND</b> an {@link Option}
      *  does not exist for the whole <code>argument</code> then
      *  add the first character as an option to the processed tokens
      *  list e.g. "-D" and add the rest of the entry to the also.</li>
      *  <li>Otherwise just add the token to the processed tokens list.
      *  </li>
      * </ol>
      * </p>
      *
      * @param options The Options to parse the arguments by.
      * @param arguments The arguments that have to be flattened.
      * @param stopAtNonOption specifies whether to stop
      * flattening when a non option has been encountered
      * @return a String array of the flattened arguments
      */
     protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)
     {
-        List tokens = new ArrayList();
+        List<String> tokens = new ArrayList<String>();
 
         boolean eatTheRest = false;
 
         for (int i = 0; i < arguments.length; i++)
         {
             String arg = arguments[i];
 
             if ("--".equals(arg))
             {
                 eatTheRest = true;
                 tokens.add("--");
             }
             else if ("-".equals(arg))
             {
                 tokens.add("-");
             }
             else if (arg.startsWith("-"))
             {
                 String opt = Util.stripLeadingHyphens(arg);
 
-                if (options.hasOption(opt))
+                // Check if the argument contains an equals sign
+                int pos = arg.indexOf('=');
+                boolean hasEquals = pos != -1;
+                String optionPart = hasEquals ? arg.substring(0, pos) : arg;
+                String optionName = Util.stripLeadingHyphens(optionPart);
+
+                if (options.hasOption(optionName))
+                {
+                    if (hasEquals)
+                    {
+                        tokens.add(optionPart); // Add the part before '='
+                        tokens.add(arg.substring(pos + 1)); // Add the value after '='
+                    }
+                    else
+                    {
+                        tokens.add(arg);
+                    }
+                }
+                else if (options.hasOption(arg.substring(0, 2)))
+                {
+                    // Handle case where the first two characters are a valid option (like -D)
+                    if (arg.length() > 2)
+                    {
+                        tokens.add(arg.substring(0, 2));
+                        tokens.add(arg.substring(2));
+                    }
+                    else
                     {
                         tokens.add(arg);
                     }
+                }
                 else
                 {
-                    if (options.hasOption(arg.substring(0, 2)))
+                    // Handle cases like -fvalue or -foovalue where 'f' or 'foo' is a valid option
+                    boolean handled = false;
+
+                    // First try to match as a long option (--foo or -foo)
+                    if (opt.startsWith("--"))
+                    {
+                        // Already stripped leading hyphens, but let's handle --foo=bar case
+                        int equalPos = arg.indexOf('=');
+                        if (equalPos > 0)
                         {
-                        // the format is --foo=value or -foo=value
-                        // the format is a special properties option (-Dproperty=value)
-                        tokens.add(arg.substring(0, 2)); // -D
-                        tokens.add(arg.substring(2)); // property=value
+                            String potentialOption = arg.substring(0, equalPos);
+                            String optionValue = arg.substring(equalPos + 1);
+                            String optionToCheck = Util.stripLeadingHyphens(potentialOption);
+
+                            if (options.hasOption(optionToCheck))
+                            {
+                                tokens.add(potentialOption);
+                                tokens.add(optionValue);
+                                handled = true;
+                            }
+                        }
+                    }
+                    else if (opt.startsWith("-"))
+                    {
+                        // Handle single dash options
+                        String optionName = opt.substring(1);
+                        if (options.hasOption(optionName))
+                        {
+                            if (hasEquals)
+                            {
+                                tokens.add(arg.substring(0, pos));
+                                tokens.add(arg.substring(pos + 1));
                             }
                             else
+                            {
+                                tokens.add(arg);
+                            }
+                            handled = true;
+                        }
+                        else if (arg.length() > 1 && options.hasOption(arg.substring(1, 2)))
+                        {
+                            // Handle case like -f=value where -f is a valid option
+                            tokens.add(arg.substring(0, 2)); // -f
+                            tokens.add(arg.substring(2));    // rest (including =value)
+                            handled = true;
+                        }
+                    }
+
+                    if (!handled)
                     {
                         eatTheRest = stopAtNonOption;
                         tokens.add(arg);
                     }
                 }
             }
             else
             {
                 tokens.add(arg);
             }
 
             if (eatTheRest)
             {
                 for (i++; i < arguments.length; i++)
                 {
                     tokens.add(arguments[i]);
                 }
             }
         }
 
-        return (String[]) tokens.toArray(new String[tokens.size()]);
+        return tokens.toArray(new String[tokens.size()]);
     }
\ No newline at end of file
