diff --git a/tmp/b3aeaeb7-f66d-49c4-8522-ccdf0d753099_buggy.java b/tmp/e547c77d-f826-416d-b0a5-7be9d58581f4_fixed.java
index 25ca093..4be8865 100644
--- a/tmp/b3aeaeb7-f66d-49c4-8522-ccdf0d753099_buggy.java
+++ b/tmp/e547c77d-f826-416d-b0a5-7be9d58581f4_fixed.java
@@ -1,52 +1,98 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
-
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        // First try to detect BOM to determine charset
+        Charset detectedCharset = detectCharsetFromBom(byteData);
+        if (detectedCharset != null) {
+            charsetName = detectedCharset.name();
+            byteData.rewind();
+        }
+        // If BOM wasn't found, proceed with the original logic
+        else if (charsetName == null) {
+            // Fallback to detecting charset from meta tags
+            docData = Charset.forName(defaultCharset).decode(byteData.asReadOnlyBuffer()).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        }
+
+        // Now decode with the appropriate charset (whether detected from BOM, meta tag, or provided)
+        if (charsetName == null) {
+            // If we still don't have a charset, use default
+            charsetName = defaultCharset;
+        }
+
+        // Always rewind before decoding
+        byteData.rewind();
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
+
+        // Remove BOM if present (handles UTF-8 BOM specifically)
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static Charset detectCharsetFromBom(ByteBuffer byteData) {
+        byte[] bom = new byte[4];
+        byteData.mark();
+        byteData.get(bom, 0, Math.min(4, byteData.remaining()));
+        byteData.reset();
+
+        if (bom.length >= 2) {
+            // UTF-16 BE
+            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+                return Charset.forName("UTF-16BE");
+            }
+            // UTF-16 LE
+            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+                return Charset.forName("UTF-16LE");
+            }
+        }
+        if (bom.length >= 3) {
+            // UTF-8 BOM
+            if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+                return Charset.forName("UTF-8");
+            }
+        }
+        if (bom.length >= 4) {
+            // UTF-32 BE
+            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 &&
+                bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+                return Charset.forName("UTF-32BE");
+            }
+            // UTF-32 LE
+            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE &&
+                bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+                return Charset.forName("UTF-32LE");
+            }
+        }
+        return null;
+    }
\ No newline at end of file
