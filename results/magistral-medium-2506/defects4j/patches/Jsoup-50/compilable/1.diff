diff --git a/tmp/301da0f8-060d-40fa-afd1-458be7a281bd_buggy.java b/tmp/8c5a1d43-b9b5-4b4b-bdc5-577dedb3a1e3_fixed.java
index 25ca093..194a8d9 100644
--- a/tmp/301da0f8-060d-40fa-afd1-458be7a281bd_buggy.java
+++ b/tmp/8c5a1d43-b9b5-4b4b-bdc5-577dedb3a1e3_fixed.java
@@ -1,52 +1,109 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
 
-        // look for BOM - overrides any other header or input
+        // Detect BOM first, as it overrides any other header or input
+        byteData.mark();
+        String detectedCharset = detectCharsetFromBOM(byteData);
+        if (detectedCharset != null) {
+            charsetName = detectedCharset;
+        } else {
+            byteData.reset();
+        }
 
         if (charsetName == null) { // determine from meta. safe parse as UTF-8
             // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
             if (meta != null) { // if not found, will keep utf-8 as best attempt
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
                     byteData.rewind();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
         } else { // specified by content type header (or by user on file load)
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
+
         if (doc == null) {
+            // Reset the buffer if we haven't parsed yet (or if we're re-parsing after finding charset in meta)
+            byteData.rewind();
+            docData = Charset.forName(charsetName != null ? charsetName : defaultCharset).decode(byteData).toString();
+
+            // Handle BOM if present (for UTF-16/32)
+            if (docData.length() > 0) {
+                char firstChar = docData.charAt(0);
+                if (firstChar == UNICODE_BOM) {
+                    docData = docData.substring(1);
+                } else if (firstChar == '\uFEFF') { // Handle UTF-16/32 BOMs
+                    docData = docData.substring(1);
+                }
+            }
+
             doc = parser.parseInput(docData, baseUri);
             doc.outputSettings().charset(charsetName);
         }
         return doc;
     }
+
+    private static String detectCharsetFromBOM(ByteBuffer data) {
+        data.mark();
+        if (data.remaining() >= 2) {
+            byte first = data.get();
+            byte second = data.get();
+
+            if (first == (byte)0xFE && second == (byte)0xFF) {
+                return "UTF-16BE";
+            } else if (first == (byte)0xFF && second == (byte)0xFE) {
+                return "UTF-16LE";
+            }
+            data.reset();
+        }
+
+        if (data.remaining() >= 4) {
+            byte first = data.get();
+            byte second = data.get();
+            byte third = data.get();
+            byte fourth = data.get();
+
+            if (first == (byte)0x00 && second == (byte)0x00 && third == (byte)0xFE && fourth == (byte)0xFF) {
+                return "UTF-32BE";
+            } else if (first == (byte)0xFF && second == (byte)0xFE && third == (byte)0x00 && fourth == (byte)0x00) {
+                return "UTF-32LE";
+            }
+            data.reset();
+        }
+
+        // Check for UTF-8 BOM
+        if (data.remaining() >= 3) {
+            byte first = data.get();
+            byte second = data.get();
+            byte third = data.get();
+
+            if (first == (byte)0xEF && second == (byte)0xBB && third == (byte)0xBF) {
+                data.reset(); // Skip BOM handling for UTF-8 (handled below)
+                return "UTF-8";
+            }
+            data.reset();
+        }
+        return null;
+    }
\ No newline at end of file
