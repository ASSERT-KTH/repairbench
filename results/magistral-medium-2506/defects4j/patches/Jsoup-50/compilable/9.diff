diff --git a/tmp/4f89bce5-d097-4b7b-b77a-120f542dfc1f_buggy.java b/tmp/4abf982b-67da-411f-bcab-fbf4cb29027c_fixed.java
index 25ca093..1a89ec9 100644
--- a/tmp/4f89bce5-d097-4b7b-b77a-120f542dfc1f_buggy.java
+++ b/tmp/4abf982b-67da-411f-bcab-fbf4cb29027c_fixed.java
@@ -1,52 +1,125 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+    // Check for BOM first, which overrides any other charset declaration
+    CharsetDetected bomCharset = detectBomCharset(byteData);
+    if (bomCharset != null) {
+        charsetName = bomCharset.charsetName;
+        // Reset the buffer position to after the BOM
+        byteData.position(bomCharset.bomLength);
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // If charsetName is still null, try to detect from content
+    if (charsetName == null) {
+        // First attempt with UTF-8 to try and find meta charset
+        byteData.mark();
+        docData = Charset.forName(defaultCharset).decode(duplicate(byteData)).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
-                    byteData.rewind();
+                byteData.reset();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
+                doc = parser.parseInput(docData, baseUri);
             }
+        } else {
+            // If no meta charset found, keep the UTF-8 decoded doc
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
         }
-        } else { // specified by content type header (or by user on file load)
+    } else {
+        // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
-        }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
-            docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
-        }
-        if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+    }
+
+    if (doc != null) {
+        doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
     }
     return doc;
 }
+
+private static ByteBuffer duplicate(ByteBuffer original) {
+    ByteBuffer clone = ByteBuffer.allocate(original.capacity());
+    original.rewind();
+    clone.put(original);
+    original.rewind();
+    clone.flip();
+    return clone;
+}
+
+private static class CharsetDetected {
+    String charsetName;
+    int bomLength;
+}
+
+private static CharsetDetected detectBomCharset(ByteBuffer byteData) {
+    byteData.mark();
+    int remaining = byteData.remaining();
+    if (remaining >= 2) {
+        byte first = byteData.get();
+        byte second = byteData.get();
+
+        if (first == (byte) 0xFE && second == (byte) 0xFF) {
+            return new CharsetDetected() {
+                { charsetName = "UTF-16BE"; bomLength = 2; }
+            };
+        }
+        if (first == (byte) 0xFF && second == (byte) 0xFE) {
+            return new CharsetDetected() {
+                { charsetName = "UTF-16LE"; bomLength = 2; }
+            };
+        }
+
+        if (remaining >= 4) {
+            byte third = byteData.get();
+            byte fourth = byteData.get();
+
+            if (first == (byte) 0x00 && second == (byte) 0x00 && third == (byte) 0xFE && fourth == (byte) 0xFF) {
+                return new CharsetDetected() {
+                    { charsetName = "UTF-32BE"; bomLength = 4; }
+                };
+            }
+            if (first == (byte) 0xFF && second == (byte) 0xFE && third == (byte) 0x00 && fourth == (byte) 0x00) {
+                return new CharsetDetected() {
+                    { charsetName = "UTF-32LE"; bomLength = 4; }
+                };
+            }
+        }
+
+        if (first == (byte) 0xEF && second == (byte) 0xBB) {
+            if (remaining >= 3) {
+                byte third = byteData.get();
+                if (third == (byte) 0xBF) {
+                    return new CharsetDetected() {
+                        { charsetName = "UTF-8"; bomLength = 3; }
+                    };
+                }
+            }
+        }
+    }
+
+    // No BOM detected
+    byteData.reset();
+    return null;
+}
\ No newline at end of file
