diff --git a/tmp/8c18dfea-0c90-44e6-a774-658e051b4af8_buggy.java b/tmp/ef1bfb4d-d8c6-4173-8d75-ae9bb0fbb4f8_fixed.java
index 25ca093..891b120 100644
--- a/tmp/8c18dfea-0c90-44e6-a774-658e051b4af8_buggy.java
+++ b/tmp/ef1bfb4d-d8c6-4173-8d75-ae9bb0fbb4f8_fixed.java
@@ -1,52 +1,108 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String detectedCharset = null;
 
-        // look for BOM - overrides any other header or input
+        // Check for BOM first - this should take precedence over everything
+        byteData.mark();
+        Charset charset = detectCharsetFromBom(byteData);
+        if (charset != null) {
+            charsetName = charset.name();
+            byteData.reset();
+        } else {
+            byteData.reset();
+        }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        if (charsetName == null) {
+            // If no charset specified and no BOM found, try to detect from meta tag
+            // First try reading as UTF-8 (default)
+            byteData.mark();
             docData = Charset.forName(defaultCharset).decode(byteData).toString();
             doc = parser.parseInput(docData, baseUri);
+
             Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+            if (meta != null) {
                 String foundCharset = null;
                 if (meta.hasAttr("http-equiv")) {
                     foundCharset = getCharsetFromContentType(meta.attr("content"));
                 }
                 if (foundCharset == null && meta.hasAttr("charset")) {
                     try {
                         if (Charset.isSupported(meta.attr("charset"))) {
                             foundCharset = meta.attr("charset");
                         }
                     } catch (IllegalCharsetNameException e) {
                         foundCharset = null;
                     }
                 }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+                if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                     foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                     charsetName = foundCharset;
-                    byteData.rewind();
+                    byteData.reset();
                     docData = Charset.forName(foundCharset).decode(byteData).toString();
                     doc = null;
                 }
             }
-        } else { // specified by content type header (or by user on file load)
+            byteData.reset(); // Reset in case we need to read again
+        } else {
+            // Specified by content type header or by user on file load
             Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+
+        // Now actually decode with the determined (or specified) charset
+        if (docData == null || doc == null) {
+            byteData.reset();
+            docData = Charset.forName(charsetName != null ? charsetName : defaultCharset).decode(byteData).toString();
+        }
+
+        // Remove BOM if present in the decoded text
         if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
             docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
         }
+
+        // Parse the document if we haven't yet
         if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
+        } else {
+            doc.outputSettings().charset(charsetName != null ? charsetName : defaultCharset);
         }
+
         return doc;
     }
+
+    private static Charset detectCharsetFromBom(ByteBuffer byteData) {
+        byteData.mark();
+        try {
+            byte[] bom = new byte[4];
+            int length = Math.min(byteData.remaining(), 4);
+            byteData.get(bom, 0, length);
+
+            // Check for UTF-8 BOM (EF BB BF)
+            if (length >= 3 && (bom[0] & 0xFF) == 0xEF && (bom[1] & 0xFF) == 0xBB && (bom[2] & 0xFF) == 0xBF) {
+                return StandardCharsets.UTF_8;
+            }
+            // Check for UTF-16BE BOM (FE FF)
+            if (length >= 2 && (bom[0] & 0xFF) == 0xFE && (bom[1] & 0xFF) == 0xFF) {
+                return StandardCharsets.UTF_16BE;
+            }
+            // Check for UTF-16LE BOM (FF FE)
+            if (length >= 2 && (bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE) {
+                return StandardCharsets.UTF_16LE;
+            }
+            // Check for UTF-32BE BOM (00 00 FE FF)
+            if (length >= 4 && (bom[0] & 0xFF) == 0x00 && (bom[1] & 0xFF) == 0x00 &&
+                (bom[2] & 0xFF) == 0xFE && (bom[3] & 0xFF) == 0xFF) {
+                return Chomsets.UTF_32BE;
+            }
+            // Check for UTF-32LE BOM (FF FE 00 00)
+            if (length >= 4 && (bom[0] & 0xFF) == 0xFF && (bom[1] & 0xFF) == 0xFE &&
+                (bom[2] & 0xFF) == 0x00 && (bom[3] & 0xFF) == 0x00) {
+                return Chomsets.UTF_32LE;
+            }
+        } finally {
+            byteData.reset();
+        }
+        return null;
+    }
\ No newline at end of file
