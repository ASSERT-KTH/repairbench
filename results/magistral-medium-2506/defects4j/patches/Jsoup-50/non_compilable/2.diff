diff --git a/tmp/6e5af9e8-9828-4c50-bef1-b1e522f9f51b_buggy.java b/tmp/207e2538-c270-4271-9471-b212507b700f_fixed.java
index 25ca093..398ac5c 100644
--- a/tmp/6e5af9e8-9828-4c50-bef1-b1e522f9f51b_buggy.java
+++ b/tmp/207e2538-c270-4271-9471-b212507b700f_fixed.java
@@ -1,52 +1,144 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
+    String actualCharset = charsetName;
+    boolean hasBom = false;
 
-        // look for BOM - overrides any other header or input
+    // First check for BOM to determine charset
+    CharsetDecoder decoder = null;
+    try {
+        byteData.mark();
+        Charset bomCharset = detectCharsetFromBom(byteData);
+        if (bomCharset != null) {
+            actualCharset = bomCharset.name();
+            hasBom = true;
+        }
+        byteData.reset();
+    } catch (Exception e) {
+        // If error detecting BOM, proceed with original charset
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+    // If charset still not determined, fall back to meta tag detection
+    if (actualCharset == null) {
+        // First attempt with default charset to read meta tags
+        byteData.mark();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
+        byteData.reset();
+
+        // Look for meta charset declaration
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
-                    foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
-                    byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
+                actualCharset = foundCharset.trim().replaceAll("[\"']", "");
+                doc = null;
+            }
+        }
+        if (doc != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+            // If we found a BOM after initial parsing, we need to re-parse with correct charset
+            actualCharset = defaultCharset;
             doc = null;
         }
     }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
+
+    // Now parse with the correct charset (whether from BOM, meta tag, or provided)
+    if (actualCharset != null) {
+        try {
+            // Use charset-specific decoder that handles BOM properly
+            Charset charset = Charset.forName(actualCharset);
+            CharsetDecoder decoderWithBom = charset.newDecoder()
+                .onMalformedInput(CodingErrorAction.REPLACE)
+                .onUnmappableCharacter(CodingErrorAction.REPLACE);
+
+            // Reset buffer position
+            byteData.rewind();
+            docData = decoderWithBom.decode(byteData).toString();
+        } catch (Exception e) {
+            // Fallback to default charset if error occurs
+            byteData.rewind();
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            actualCharset = defaultCharset;
+        }
+    } else {
+        // No charset specified and couldn't detect from BOM or meta
+        byteData.rewind();
+        docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        actualCharset = defaultCharset;
     }
+
+    // Remove BOM if present
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
     }
+
+    // Parse the document if not already parsed
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+        doc.outputSettings().charset(actualCharset);
     }
     return doc;
 }
+
+private static Charset detectCharsetFromBom(ByteBuffer buffer) {
+    buffer.mark();
+    byte[] bom = new byte[4];
+    int length = Math.min(buffer.remaining(), 4);
+    buffer.get(bom, 0, length);
+
+    // Check for UTF-8 BOM
+    if (length >= 3 && bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+        buffer.position(buffer.position() - length + 3); // skip BOM
+        return Charset.forName("UTF-8");
+    }
+    // Check for UTF-16 BE BOM
+    else if (length >= 2 && bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+        buffer.position(buffer.position() - length + 2); // skip BOM
+        return Charset.forName("UTF-16BE");
+    }
+    // Check for UTF-16 LE BOM
+    else if (length >= 2 && bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+        buffer.position(buffer.position() - length + 2); // skip BOM
+        return Charset.forName("UTF-16LE");
+    }
+    // Check for UTF-32 BE BOM
+    else if (length >= 4 && bom[0] == (byte)0x00 && bom[1] == (byte)0x00 &&
+            bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+        buffer.position(buffer.position() - length + 4); // skip BOM
+        return Charset.forName("UTF-32BE");
+    }
+    // Check for UTF-32 LE BOM
+    else if (length >= 4 && bom[0] == (byte)0xFF && bom[1] == (byte)0xFE &&
+            bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+        buffer.position(buffer.position() - length + 4); // skip BOM
+        return Charset.forName("UTF-32LE");
+    }
+    buffer.reset();
+    return null;
+}
+
+private static String getCharsetFromContentType(String contentType) {
+    if (contentType == null) return null;
+    String[] parts = contentType.split(";");
+    for (String part : parts) {
+        part = part.trim();
+        if (part.toLowerCase().startsWith("charset=")) {
+            String charset = part.substring(8).trim();
+            return charset.replaceAll("[\"']", "");
+        }
+    }
+    return null;
+}
\ No newline at end of file
