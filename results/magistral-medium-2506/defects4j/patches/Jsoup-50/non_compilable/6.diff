diff --git a/tmp/e18762c3-8eae-45db-bf4c-5533eb4a8cfe_buggy.java b/tmp/13c5c30a-ef3d-47ca-83d9-d0972a15c00e_fixed.java
index 25ca093..2da1235 100644
--- a/tmp/e18762c3-8eae-45db-bf4c-5533eb4a8cfe_buggy.java
+++ b/tmp/13c5c30a-ef3d-47ca-83d9-d0972a15c00e_fixed.java
@@ -1,52 +1,126 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // First check for BOM (Byte Order Mark) which overrides other encoding detection
+    byteData.mark();
+    try {
+        // Check for UTF-8 BOM
+        if (byteData.remaining() >= 3) {
+            byte[] bom = new byte[3];
+            byteData.get(bom);
+            if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+                charsetName = "UTF-8";
+                // Skip the BOM
+                byteData = sliceAfterBOM(byteData, 3);
+            } else {
+                byteData.reset();
+            }
+        }
 
+        // Check for UTF-16 BE
+        if (byteData.remaining() >= 2) {
+            byte[] bom = new byte[2];
+            byteData.get(bom);
+            if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+                charsetName = "UTF-16BE";
+                byteData = sliceAfterBOM(byteData, 2);
+            } else {
+                byteData.reset();
+            }
+        }
+
+        // Check for UTF-16 LE
+        if (byteData.remaining() >= 2) {
+            byte[] bom = new byte[2];
+            byteData.get(bom);
+            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+                charsetName = "UTF-16LE";
+                byteData = sliceAfterBOM(byteData, 2);
+            } else {
+                byteData.reset();
+            }
+        }
+
+        // Check for UTF-32 BE
+        if (byteData.remaining() >= 4) {
+            byte[] bom = new byte[4];
+            byteData.get(bom);
+            if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+                charsetName = "UTF-32BE";
+                byteData = sliceAfterBOM(byteData, 4);
+            } else {
+                byteData.reset();
+            }
+        }
+
+        // Check for UTF-32 LE
+        if (byteData.remaining() >= 4) {
+            byte[] bom = new byte[4];
+            byteData.get(bom);
+            if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+                charsetName = "UTF-32LE";
+                byteData = sliceAfterBOM(byteData, 4);
+            } else {
+                byteData.reset();
+            }
+        }
+    } catch (BufferUnderflowException e) {
+        byteData.reset();
+    }
+
+    // Now handle charset detection and parsing
     if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         doc = parser.parseInput(docData, baseUri);
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
         if (meta != null) { // if not found, will keep utf-8 as best attempt
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
             if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
                 byteData.rewind();
                 docData = Charset.forName(foundCharset).decode(byteData).toString();
                 doc = null;
             }
         }
     } else { // specified by content type header (or by user on file load)
         Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
         docData = Charset.forName(charsetName).decode(byteData).toString();
     }
-        if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
+
+    // Handle UTF-8 BOM if present in the decoded text
+    if (docData != null && docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
         byteData.rewind();
         docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
         charsetName = defaultCharset;
         doc = null;
     }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
         doc.outputSettings().charset(charsetName);
     }
     return doc;
 }
+
+private static ByteBuffer sliceAfterBOM(ByteBuffer byteData, int bomLength) {
+    byte[] remaining = new byte[byteData.remaining()];
+    byteData.get(remaining);
+    ByteBuffer newBuffer = ByteBuffer.wrap(remaining, bomLength, remaining.length - bomLength);
+    return newBuffer;
+}
\ No newline at end of file
