diff --git a/tmp/f10a8ba1-d3e0-4cb9-974d-23178ee50521_buggy.java b/tmp/c1ed5eae-2837-4066-b789-f702adba1bac_fixed.java
index 25ca093..7264541 100644
--- a/tmp/f10a8ba1-d3e0-4cb9-974d-23178ee50521_buggy.java
+++ b/tmp/c1ed5eae-2837-4066-b789-f702adba1bac_fixed.java
@@ -1,52 +1,126 @@
-    // todo - this is getting gnarly. needs a rewrite.
 static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
     String docData;
     Document doc = null;
 
-        // look for BOM - overrides any other header or input
+    // First, handle BOM detection before any other processing
+    Charset detectedCharset = detectCharsetFromBOM(byteData);
+    if (detectedCharset != null) {
+        charsetName = detectedCharset.name();
+        // Reset buffer position after BOM detection
+        byteData.rewind();
+        // Skip BOM bytes for the actual content parsing
+        int bomLength = detectedCharset.name().startsWith("UTF-16") ? 2 :
+                        detectedCharset.name().startsWith("UTF-32") ? 4 : 0;
+        if (bomLength > 0) {
+            byteData.position(bomLength);
+        }
+    }
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+    // If charset still not specified, try to determine it from meta tags
+    if (charsetName == null) {
+        // First attempt with default charset to find charset declaration in meta tags
+        ByteBuffer tempBuffer = byteData.duplicate();
+        docData = Charset.forName(defaultCharset).decode(tempBuffer).toString();
         doc = parser.parseInput(docData, baseUri);
+
+        // Look for charset in meta tags
         Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+        if (meta != null) {
             String foundCharset = null;
             if (meta.hasAttr("http-equiv")) {
                 foundCharset = getCharsetFromContentType(meta.attr("content"));
             }
             if (foundCharset == null && meta.hasAttr("charset")) {
                 try {
                     if (Charset.isSupported(meta.attr("charset"))) {
                         foundCharset = meta.attr("charset");
                     }
                 } catch (IllegalCharsetNameException e) {
                     foundCharset = null;
                 }
             }
 
-                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
+            if (foundCharset != null && !foundCharset.isEmpty() && !foundCharset.equals(defaultCharset)) {
                 foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                 charsetName = foundCharset;
+                doc = null; // We'll need to re-parse with the correct charset
+            }
+        }
+    }
+
+    // Now parse with the correct charset (either from BOM, content-type header, or meta tag)
+    if (doc == null) {
+        // Reset buffer to beginning (except if we already skipped BOM)
+        if (!byteData.hasArray() && byteData.position() == 0) {
             byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
         }
-            }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
+        if (charsetName == null) {
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+        } else {
             docData = Charset.forName(charsetName).decode(byteData).toString();
         }
+        doc = parser.parseInput(docData, baseUri);
+    }
+
+    // Handle any remaining BOM in the text if needed (UTF-8 BOM case)
     if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
         docData = docData.substring(1);
+        if (charsetName == null) {
             charsetName = defaultCharset;
-            doc = null;
         }
+    }
+
     if (doc == null) {
         doc = parser.parseInput(docData, baseUri);
+    }
     doc.outputSettings().charset(charsetName);
-        }
     return doc;
 }
+
+private static Charset detectCharsetFromBOM(ByteBuffer byteData) {
+    if (byteData.remaining() >= 4) {
+        byteData.mark();
+        byte[] bom = new byte[4];
+        byteData.get(bom, 0, 4);
+        byteData.reset();
+
+        // Check for UTF-32 BE BOM (00 00 FE FF)
+        if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 && bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
+            return Charset.forName("UTF-32BE");
+        }
+        // Check for UTF-32 LE BOM (FF FE 00 00)
+        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE && bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
+            return Charset.forName("UTF-32LE");
+        }
+    }
+
+    if (byteData.remaining() >= 2) {
+        byteData.mark();
+        byte[] bom = new byte[2];
+        byteData.get(bom, 0, 2);
+        byteData.reset();
+
+        // Check for UTF-16 BE BOM (FE FF)
+        if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
+            return Charset.forName("UTF-16BE");
+        }
+        // Check for UTF-16 LE BOM (FF FE)
+        if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
+            return Charset.forName("UTF-16LE");
+        }
+    }
+
+    // Check for UTF-8 BOM (EF BB BF) if we have at least 3 bytes
+    if (byteData.remaining() >= 3) {
+        byteData.mark();
+        byte[] bom = new byte[3];
+        byteData.get(bom, 0, 3);
+        byteData.reset();
+
+        if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
+            return Charset.forName("UTF-8");
+        }
+    }
+
+    return null; // No BOM detected
+}
\ No newline at end of file
