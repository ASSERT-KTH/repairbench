diff --git a/tmp/59ccf941-d76e-499e-bb4c-26ef37ca2894_buggy.java b/tmp/4f670e85-59f8-45c8-8882-59419798f274_fixed.java
index 25ca093..7e35164 100644
--- a/tmp/59ccf941-d76e-499e-bb4c-26ef37ca2894_buggy.java
+++ b/tmp/4f670e85-59f8-45c8-8882-59419798f274_fixed.java
@@ -1,52 +1,117 @@
-    // todo - this is getting gnarly. needs a rewrite.
     static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
         String docData;
         Document doc = null;
+        String resolvedCharset = charsetName;
 
         // look for BOM - overrides any other header or input
+        byteData.mark();
+        byte[] bomPrefix = new byte[4];
+        byteData.get(bomPrefix);
+        byteData.reset();
 
-        if (charsetName == null) { // determine from meta. safe parse as UTF-8
-            // look for <meta http-equiv="Content-Type" content="text/html;charset=gb2312"> or HTML5 <meta charset="gb2312">
+        try {
+            CharsetDecoder decoder;
+            if (hasBom(bomPrefix)) {
+                String bomCharset = detectCharsetFromBom(bomPrefix);
+                if (bomCharset != null) {
+                    resolvedCharset = bomCharset;
+                }
+            }
+
+            if (resolvedCharset == null) { // determine from meta. parse as default charset first
                 docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 doc = parser.parseInput(docData, baseUri);
                 Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
-            if (meta != null) { // if not found, will keep utf-8 as best attempt
+                if (meta != null) { // if not found, will keep default charset
                     String foundCharset = null;
                     if (meta.hasAttr("http-equiv")) {
                         foundCharset = getCharsetFromContentType(meta.attr("content"));
                     }
                     if (foundCharset == null && meta.hasAttr("charset")) {
                         try {
                             if (Charset.isSupported(meta.attr("charset"))) {
                                 foundCharset = meta.attr("charset");
                             }
                         } catch (IllegalCharsetNameException e) {
                             foundCharset = null;
                         }
                     }
 
                     if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                         foundCharset = foundCharset.trim().replaceAll("[\"']", "");
-                    charsetName = foundCharset;
+                        resolvedCharset = foundCharset;
                         byteData.rewind();
-                    docData = Charset.forName(foundCharset).decode(byteData).toString();
-                    doc = null;
                     }
                 }
-        } else { // specified by content type header (or by user on file load)
-            Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
-            docData = Charset.forName(charsetName).decode(byteData).toString();
             }
+
+            // Now decode with the resolved charset
+            byteData.rewind();
+            if (resolvedCharset == null) {
+                resolvedCharset = defaultCharset;
+            }
+            docData = Charset.forName(resolvedCharset).decode(byteData).toString();
+
+            // Check for BOM in the decoded data (UTF-8 BOM case)
             if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
-            byteData.rewind();
-            docData = Charset.forName(defaultCharset).decode(byteData).toString();
                 docData = docData.substring(1);
-            charsetName = defaultCharset;
-            doc = null;
             }
-        if (doc == null) {
             doc = parser.parseInput(docData, baseUri);
-            doc.outputSettings().charset(charsetName);
+            doc.outputSettings().charset(resolvedCharset);
+        } catch (Exception e) {
+            // Fallback to default charset if anything goes wrong
+            byteData.rewind();
+            docData = Charset.forName(defaultCharset).decode(byteData).toString();
+            doc = parser.parseInput(docData, baseUri);
+            doc.outputSettings().charset(defaultCharset);
         }
         return doc;
     }
+
+    private static boolean hasBom(byte[] bomPrefix) {
+        // Check for UTF-8 BOM
+        if (bomPrefix.length >= 3 && (bomPrefix[0] == (byte)0xEF) && (bomPrefix[1] == (byte)0xBB) && (bomPrefix[2] == (byte)0xBF)) {
+            return true;
+        }
+        // Check for UTF-16 BE BOM
+        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFE) && (bomPrefix[1] == (byte)0xFF)) {
+            return true;
+        }
+        // Check for UTF-16 LE BOM
+        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE)) {
+            return true;
+        }
+        // Check for UTF-32 BE BOM
+        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0x00) && (bomPrefix[1] == (byte)0x00) && (bomPrefix[2] == (byte)0xFE) && (bomPrefix[3] == (byte)0xFF)) {
+            return true;
+        }
+        // Check for UTF-32 LE BOM
+        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE) && (bomPrefix[2] == (byte)0x00) && (bomPrefix[3] == (byte)0x00)) {
+            return true;
+        }
+        return false;
+    }
+
+    private static String detectCharsetFromBom(byte[] bomPrefix) {
+        // UTF-8 BOM
+        if (bomPrefix.length >= 3 && (bomPrefix[0] == (byte)0xEF) && (bomPrefix[1] == (byte)0xBB) && (bomPrefix[2] == (byte)0xBF)) {
+            return "UTF-8";
+        }
+        // UTF-16 BE BOM
+        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFE) && (bomPrefix[1] == (byte)0xFF)) {
+            return "UTF-16BE";
+        }
+        // UTF-16 LE BOM
+        if (bomPrefix.length >= 2 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE)) {
+            return "UTF-16LE";
+        }
+        // UTF-32 BE BOM
+        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0x00) && (bomPrefix[1] == (byte)0x00) && (bomPrefix[2] == (byte)0xFE) && (bomPrefix[3] == (byte)0xFF)) {
+            return "UTF-32BE";
+        }
+        // UTF-32 LE BOM
+        if (bomPrefix.length >= 4 && (bomPrefix[0] == (byte)0xFF) && (bomPrefix[1] == (byte)0xFE) && (bomPrefix[2] == (byte)0x00) && (bomPrefix[3] == (byte)0x00)) {
+            return "UTF-32LE";
+        }
+        return null;
+    }
\ No newline at end of file
