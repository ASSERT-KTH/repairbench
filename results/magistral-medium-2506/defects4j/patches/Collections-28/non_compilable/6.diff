diff --git a/tmp/ba7f5d66-4819-4a25-b434-d3a7f50c9c62_buggy.java b/tmp/4a53f00c-df50-4eb8-9b35-e48f1aac02e3_fixed.java
index e69de29..c3ce2d3 100644
--- a/tmp/ba7f5d66-4819-4a25-b434-d3a7f50c9c62_buggy.java
+++ b/tmp/4a53f00c-df50-4eb8-9b35-e48f1aac02e3_fixed.java
@@ -0,0 +1,57 @@
+@Override
+public SortedMap<K, V> prefixMap(final K prefix) {
+    if (prefix == null) {
+        throw new IllegalArgumentException("Prefix cannot be null");
+    }
+    return new PrefixRangeMap(prefix, length(prefix));
+}
+
+private final class PrefixRangeMap extends AbstractSortedMapDecorator<K, V> implements SortedMap<K, V>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private final K prefix;
+    private final int prefixLength;
+
+    PrefixRangeMap(final K prefix, int prefixLength) {
+        super(new PatriciaTrie<>());
+        this.prefix = prefix;
+        this.prefixLength = prefixLength;
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+        return PatriciaTrie.this.containsKey(key) &&
+               length((K) key) >= prefixLength &&
+               startsWith((K) key, prefix);
+    }
+
+    @Override
+    public V get(Object key) {
+        if (containsKey(key)) {
+            return PatriciaTrie.this.get(key);
+        }
+        return null;
+    }
+
+    @Override
+    public V put(K key, V value) {
+        if (containsKey(key)) {
+            return PatriciaTrie.this.put(key, value);
+        }
+        return null;
+    }
+
+    @Override
+    public void clear() {
+        // Create a copy of keys to avoid ConcurrentModificationException
+        Set<K> keysToRemove = new HashSet<>();
+        for (K key : keySet()) {
+            keysToRemove.add(key);
+        }
+        for (K key : keysToRemove) {
+            PatriciaTrie.this.remove(key);
+        }
+    }
+
+    // ... other overridden methods (headMap, tailMap, entrySet, etc.)
+    // ... implementation of startsWith and length methods
+}
\ No newline at end of file
