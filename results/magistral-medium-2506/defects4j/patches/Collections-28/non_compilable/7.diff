diff --git a/tmp/5b162263-7bba-40d5-a90a-bb7a34912972_buggy.java b/tmp/8ea45ad7-23c2-4508-8584-187fdf8c1026_fixed.java
index e69de29..5f2fe12 100644
--- a/tmp/5b162263-7bba-40d5-a90a-bb7a34912972_buggy.java
+++ b/tmp/8ea45ad7-23c2-4508-8584-187fdf8c1026_fixed.java
@@ -0,0 +1,70 @@
+public SortedMap<K, V> prefixMap(final K key) {
+    if (key == null) {
+        return new UnmodifiableSortedMap(Collections.emptySortedMap());
+    }
+
+    // Find the prefix node
+    final TrieEntry<K, V> entry = getEntry(key);
+    if (entry == null) {
+        return new UnmodifiableSortedMap(Collections.emptySortedMap());
+    }
+
+    // If the key actually exists in the trie, return the subtrie starting at the key's node
+    if (entry.isKey()) {
+        final PatriciaTrieNode<K, V> prefixNode = findPrefixNode(key);
+
+        if (prefixNode == null) {
+            return new UnmodifiableSortedMap(Collections.emptySortedMap());
+        }
+
+        // Return a modifiable view of the subtree
+        return new PrefixRangeMap(prefixNode, this);
+    }
+
+    // Handle the case where the key doesn't exist but we want prefixes of it
+    final PatriciaTrieNode<K, V> prefixNode = nearestMatchForNode[key.length()];
+    if (prefixNode == null) {
+        return new UnmodifiableSortedMap(Collections.emptySortedMap());
+    }
+
+    return new PrefixRangeMap(prefixNode, this);
+}
+
+private class PrefixRangeMap extends AbstractSortedMap<K, V> {
+    private final PatriciaTrieNode<K, V> prefixNode;
+    private final PatriciaTrie<K, V> trie;
+
+    PrefixRangeMap(PatriciaTrieNode<K, V> prefixNode, PatriciaTrie<K, V> trie) {
+        this.prefixNode = prefixNode;
+        this.trie = trie;
+    }
+
+    @Override
+    public void clear() {
+        // Iterate through all entries in this prefix map and remove them from the main trie
+        for (Map.Entry<K, V> entry : entrySet()) {
+            trie.remove(entry.getKey());
+        }
+    }
+
+    // ... other required methods ...
+
+    @Override
+    public Set<Entry<K, V>> entrySet() {
+        final Set<Entry<K, V>> entries = new HashSet<>();
+        collectEntries(prefixNode, "", entries);
+        return entries;
+    }
+
+    private void collectEntries(PatriciaTrieNode<K, V> node, String prefix, Set<Entry<K, V>> entries) {
+        if (node.isKey()) {
+            @SuppressWarnings("unchecked")
+            K key = (K) prefix;
+            entries.add(new AbstractMap.SimpleImmutableEntry<>(key, node.getValue()));
+        }
+
+        for (PatriciaTrieNode<K, V> child : node.children()) {
+            collectEntries(child, prefix + child.getKeyChar(), entries);
+        }
+    }
+}
\ No newline at end of file
