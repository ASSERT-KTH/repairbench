diff --git a/tmp/99f9a428-aab6-4cee-97ed-51d389b1406a_buggy.java b/tmp/5b1ad618-ae71-45f0-ae68-827b3b70b21a_fixed.java
index 6c0aa19..92f771d 100644
--- a/tmp/99f9a428-aab6-4cee-97ed-51d389b1406a_buggy.java
+++ b/tmp/5b1ad618-ae71-45f0-ae68-827b3b70b21a_fixed.java
@@ -1,20 +1,29 @@
     /**
      * @param encoding the encoding to use for file names, use null
      * for the platform's default encoding
      * @param useUnicodeExtraFields whether to use InfoZIP Unicode
      * Extra Fields (if present) to set the file names.
      * @param allowStoredEntriesWithDataDescriptor whether the stream
      * will try to read STORED entries that use a data descriptor
      * @since 1.1
      */
     public ZipArchiveInputStream(InputStream inputStream,
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
         in = new PushbackInputStream(inputStream, buf.capacity());
         this.allowStoredEntriesWithDataDescriptor =
             allowStoredEntriesWithDataDescriptor;
-        // haven't read anything so far
+        // initialize buffer for reading
+        buf.clear();
+        // Set this to true to indicate we haven't read any entries yet
+        current = null;
+        // count of bytes read from current entry payload
+        bytesRead = 0;
+        // total number of bytes for current entry
+        readTotalBytes = 0;
+        // number of crc/length/size values left to be read this data descriptor
+        remainingDataDescriptorsForEntry = 0;
     }
\ No newline at end of file
