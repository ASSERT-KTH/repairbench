diff --git a/tmp/a482a3a6-e615-4b5c-b2ea-8bc43baa1f97_buggy.java b/tmp/95f2ca38-cd62-47b9-ae26-601b72195e24_fixed.java
index 9976e43..1a37423 100644
--- a/tmp/a482a3a6-e615-4b5c-b2ea-8bc43baa1f97_buggy.java
+++ b/tmp/95f2ca38-cd62-47b9-ae26-601b72195e24_fixed.java
@@ -1,76 +1,100 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   // function f(number, number) {}
   // function g(number) {}
   //
   // Then f *should* not be a subtype of g, and g *should* not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
   // That way, you can have a single "no-op" function, and you don't have
   // to create a new no-op function for every possible type signature.
   //
   // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+  while (thisParam != null || thatParam != null) {
+    if (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
       if (thisParamType != null) {
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
+    } else {
+      // If we have remaining parameters in 'this' but not in 'that',
+      // it means 'this' has more parameters, which makes it not a subtype
+      // unless the remaining parameters are optional (which they aren't, since we're past thatParam)
+      if (thisParam != null) {
+        // Check if all remaining parameters in 'this' are optional
+        // If any are required, then 'this' is not a subtype
+        boolean allOptional = true;
+        Node temp = thisParam;
+        while (temp != null) {
+          if (!temp.isOptionalArg()) {
+            allOptional = false;
+            break;
+          }
+          temp = temp.getNext();
+        }
+        if (!allOptional) {
+          return false;
+        }
+      }
+      // If 'that' has more parameters than 'this', it's acceptable as per our special case
+      break;
+    }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // If 'that' has remaining parameters but they're all optional,
+  // it's still acceptable since we can ignore them
+  while (thatParam != null) {
+    if (!thatParam.isOptionalArg()) {
+      return false;
+    }
+    thatParam = thatParam.getNext();
+  }
 
   return true;
 }
\ No newline at end of file
