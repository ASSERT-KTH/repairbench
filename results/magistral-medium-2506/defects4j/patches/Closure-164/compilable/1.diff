diff --git a/tmp/4c646383-9b2b-4b27-81b7-35540217b8b1_buggy.java b/tmp/be6bf311-c141-4ca7-a181-d665c7e24577_fixed.java
index 9976e43..6e95e82 100644
--- a/tmp/4c646383-9b2b-4b27-81b7-35540217b8b1_buggy.java
+++ b/tmp/be6bf311-c141-4ca7-a181-d665c7e24577_fixed.java
@@ -1,76 +1,119 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   // function f(number, number) {}
   // function g(number) {}
   //
   // Then f *should* not be a subtype of g, and g *should* not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
   // That way, you can have a single "no-op" function, and you don't have
   // to create a new no-op function for every possible type signature.
   //
   // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
   while (thisParam != null && thatParam != null) {
     JSType thisParamType = thisParam.getJSType();
     JSType thatParamType = thatParam.getJSType();
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
     boolean thisIsVarArgs = thisParam.isVarArgs();
     boolean thatIsVarArgs = thatParam.isVarArgs();
 
     // "that" can't be a supertype, because it's missing a required argument.
       // NOTE(nicksantos): In our type system, we use {function(...?)} and
       // {function(...NoType)} to to indicate that arity should not be
       // checked. Strictly speaking, this is not a correct formulation,
       // because now a sub-function can required arguments that are var_args
       // in the super-function. So we special-case this.
 
     // don't advance if we have variable arguments
     if (!thisIsVarArgs) {
       thisParam = thisParam.getNext();
     }
     if (!thatIsVarArgs) {
       thatParam = thatParam.getNext();
     }
 
     // both var_args indicates the end
     if (thisIsVarArgs && thatIsVarArgs) {
       thisParam = null;
       thatParam = null;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  // Check if there are remaining parameters in 'this' that aren't in 'that'
+  // This would make 'that' not a supertype (since 'that' would be missing required arguments)
+  if (thisParam != null) {
+    // If remaining parameters in 'this' are optional or varargs, it's okay
+    boolean hasRequiredParam = false;
+    do {
+      if (!thisParam.isOptionalArg() && !thisParam.isVarArgs()) {
+        hasRequiredParam = true;
+        break;
+      }
+      if (!thisParam.isVarArgs()) {
+        thisParam = thisParam.getNext();
+      } else {
+        break; // varargs means no more required params
+      }
+    } while (thisParam != null);
+
+    if (hasRequiredParam && !thisParam.isVarArgs() && !thisParam.isOptionalArg()) {
+      return false;
+    }
+  }
+
+  // Check if there are remaining parameters in 'that' that aren't in 'this'
+  // This would make 'this' not a subtype (since 'this' would be missing arguments)
+  if (thatParam != null) {
+    // If remaining parameters in 'that' are required but not in 'this',
+    // then 'this' isn't a proper subtype
+    boolean hasRequiredParamThatThisMissing = false;
+    do {
+      if (!thatParam.isOptionalArg() && !thatParam.isVarArgs()) {
+        hasRequiredParamThatThisMissing = true;
+        break;
+      }
+      if (!thatParam.isVarArgs()) {
+        thatParam = thatParam.getNext();
+      } else {
+        break; // varargs means no more required params
+      }
+    } while (thatParam != null);
+
+    if (hasRequiredParamThatThisMissing) {
+      return false;
+    }
+  }
 
   return true;
 }
\ No newline at end of file
