diff --git a/tmp/d16aea40-b549-4a02-a5d7-c3523ddf7288_buggy.java b/tmp/e1647e04-4e98-477c-8fd2-27c924b29406_fixed.java
index 9976e43..459910a 100644
--- a/tmp/d16aea40-b549-4a02-a5d7-c3523ddf7288_buggy.java
+++ b/tmp/e1647e04-4e98-477c-8fd2-27c924b29406_fixed.java
@@ -1,76 +1,113 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   // function f(number, number) {}
   // function g(number) {}
   //
   // Then f *should* not be a subtype of g, and g *should* not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
   // That way, you can have a single "no-op" function, and you don't have
   // to create a new no-op function for every possible type signature.
   //
   // So, in this case, g < f, but f !< g
+
+  // Check if 'this' has more required parameters than 'that'
+  // If so, 'that' cannot be a supertype because it's missing required arguments.
+  int thisRequiredCount = countRequiredParameters(this.parameters);
+  int thatRequiredCount = countRequiredParameters(that.parameters);
+  if (thisRequiredCount > thatRequiredCount) {
+    return false;
+  }
+
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
+  while (thisParam != null || thatParam != null) {
+    boolean thisHasParam = thisParam != null;
+    boolean thatHasParam = thatParam != null;
+
+    if (thisHasParam && thatHasParam) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
+
+      // If this has a required parameter but that doesn't have a corresponding parameter,
+      // it's not a subtype (but we already checked this above)
+
       if (thisParamType != null) {
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
       // don't advance if we have variable arguments
       if (!thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
       if (!thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
+    } else if (thisHasParam) {
+      // If 'this' has more parameters than 'that' and they're not all optional
+      if (!thisParam.isVarArgs() &&
+          !thisParam.getJSType().isVacuous()) {
+        return false;
+      }
+      thisParam = thisParam.getNext();
+    } else if (thatHasParam) {
+      // If 'that' has more parameters than 'this', we need to check if they're optional
+      if (!thatParam.isVarArgs() &&
+          !thatParam.getJSType().isVacuous()) {
+        // In theory, this might be okay if the extra parameters are optional,
+        // but we currently don't track that information
+      }
+      thatParam = thatParam.getNext();
+    }
   }
-
-    // "that" can't be a supertype, because it's missing a required arguement.
 
   return true;
 }
+
+private int countRequiredParameters(Node parameters) {
+  int count = 0;
+  Node param = parameters.getFirstChild();
+  while (param != null) {
+    if (!param.isVarArgs() &&
+        (param.getJSType() == null || !param.getJSType().isVacuous())) {
+      count++;
+    }
+    param = param.getNext();
+  }
+  return count;
+}
\ No newline at end of file
