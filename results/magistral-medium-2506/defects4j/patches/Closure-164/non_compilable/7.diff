diff --git a/tmp/db17b2be-8e19-44e9-8dd8-bc645fc1cefd_buggy.java b/tmp/653bacdb-4c8d-4bf0-bfdf-2448c970dca7_fixed.java
index 9976e43..25afcbd 100644
--- a/tmp/db17b2be-8e19-44e9-8dd8-bc645fc1cefd_buggy.java
+++ b/tmp/653bacdb-4c8d-4bf0-bfdf-2448c970dca7_fixed.java
@@ -1,76 +1,115 @@
 @Override
 public boolean isSubtype(JSType other) {
   if (!(other instanceof ArrowType)) {
     return false;
   }
 
   ArrowType that = (ArrowType) other;
 
   // This is described in Draft 2 of the ES4 spec,
   // Section 3.4.7: Subtyping Function Types.
 
   // this.returnType <: that.returnType (covariant)
   if (!this.returnType.isSubtype(that.returnType)) {
     return false;
   }
 
   // that.paramType[i] <: this.paramType[i] (contravariant)
   //
   // If this.paramType[i] is required,
   // then that.paramType[i] is required.
   //
   // In theory, the "required-ness" should work in the other direction as
   // well. In other words, if we have
   //
   // function f(number, number) {}
   // function g(number) {}
   //
   // Then f *should* not be a subtype of g, and g *should* not be
   // a subtype of f. But in practice, we do not implement it this way.
   // We want to support the use case where you can pass g where f is
   // expected, and pretend that g ignores the second argument.
   // That way, you can have a single "no-op" function, and you don't have
   // to create a new no-op function for every possible type signature.
   //
   // So, in this case, g < f, but f !< g
   Node thisParam = parameters.getFirstChild();
   Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
+
+  // First check if the number of required parameters matches
+  int thisRequiredCount = countRequiredParameters(this);
+  int thatRequiredCount = countRequiredParameters(that);
+  if (thisRequiredCount > thatRequiredCount &&
+      !hasVarArgs(that.parameters)) {
+    return false;
+  }
+
+  while (thisParam != null || thatParam != null) {
+    JSType thisParamType = (thisParam != null) ? thisParam.getJSType() : null;
+    JSType thatParamType = (thatParam != null) ? thatParam.getJSType() : null;
+
     if (thisParamType != null) {
       if (thatParamType == null ||
           !thatParamType.isSubtype(thisParamType)) {
         return false;
       }
     }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+    boolean thisIsVarArgs = thisParam != null && thisParam.isVarArgs();
+    boolean thatIsVarArgs = thatParam != null && thatParam.isVarArgs();
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+    // Handle case where one function has more parameters than the other
+    if (thisParam == null && !thatIsVarArgs) {
+      // If "this" has no more parameters but "that" does (and not varargs),
+      // then we can't guarantee the subtype relationship
+      if (!thatParam.getJSType().isUnknown()) {
+        return false;
+      }
+    } else if (thatParam == null && !thisIsVarArgs) {
+      // If "that" has no more parameters but "this" does (and not varargs),
+      // then extra parameters must be optional (handled by countRequiredParameters above)
+    }
 
     // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
+    if (!thisIsVarArgs && thisParam != null) {
       thisParam = thisParam.getNext();
     }
-      if (!thatIsVarArgs) {
+    if (!thatIsVarArgs && thatParam != null) {
       thatParam = thatParam.getNext();
     }
 
     // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+    if ((thisParam == null || thisIsVarArgs) &&
+        (thatParam == null || thatIsVarArgs)) {
+      break;
     }
   }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+  return true;
+}
 
+private int countRequiredParameters(ArrowType type) {
+  int count = 0;
+  Node param = type.parameters.getFirstChild();
+  while (param != null) {
+    if (!param.isOptionalArg() && !param.isVarArgs()) {
+      count++;
+    }
+    if (param.isVarArgs()) {
+      break; // varargs means all remaining are optional
+    }
+    param = param.getNext();
+  }
+  return count;
+}
+
+private boolean hasVarArgs(Node parameters) {
+  Node param = parameters.getFirstChild();
+  while (param != null) {
+    if (param.isVarArgs()) {
       return true;
     }
+    param = param.getNext();
+  }
+  return false;
+}
\ No newline at end of file
