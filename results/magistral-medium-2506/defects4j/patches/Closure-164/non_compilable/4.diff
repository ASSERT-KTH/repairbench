diff --git a/tmp/c5d4ebdc-f62b-48e6-a431-700b298a8578_buggy.java b/tmp/076d1bd9-c9eb-428f-8edc-5128df598902_fixed.java
index 9976e43..efc996f 100644
--- a/tmp/c5d4ebdc-f62b-48e6-a431-700b298a8578_buggy.java
+++ b/tmp/076d1bd9-c9eb-428f-8edc-5128df598902_fixed.java
@@ -1,76 +1,101 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
-    // In theory, the "required-ness" should work in the other direction as
-    // well. In other words, if we have
-    //
-    // function f(number, number) {}
-    // function g(number) {}
-    //
-    // Then f *should* not be a subtype of g, and g *should* not be
-    // a subtype of f. But in practice, we do not implement it this way.
-    // We want to support the use case where you can pass g where f is
-    // expected, and pretend that g ignores the second argument.
-    // That way, you can have a single "no-op" function, and you don't have
-    // to create a new no-op function for every possible type signature.
-    //
-    // So, in this case, g < f, but f !< g
+    // We enforce that the supertype must have at least as many parameters
+    // as the subtype (after accounting for varargs)
+
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
     while (thisParam != null && thatParam != null) {
       JSType thisParamType = thisParam.getJSType();
       JSType thatParamType = thatParam.getJSType();
       if (thisParamType != null) {
         if (thatParamType == null ||
             !thatParamType.isSubtype(thisParamType)) {
           return false;
         }
       }
 
       boolean thisIsVarArgs = thisParam.isVarArgs();
       boolean thatIsVarArgs = thatParam.isVarArgs();
 
+      // Check required arguments
+      if (thisParam.isRequired() && !thatParam.isRequired()) {
+        return false;
+      }
+
       // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
-
-      // don't advance if we have variable arguments
+      if (thisIsVarArgs && !thatIsVarArgs) {
+        // If this has varargs but that doesn't, it's okay as long as we've processed
+        // all of that's parameters (i.e., that has fewer parameters)
+        if (thatParam.getNext() != null) {
+          return false;
+        }
+      } else if (!thisIsVarArgs && thatIsVarArgs) {
+        // If that has varargs but this doesn't, then that must have at least as many parameters
+        if (thisParam.getNext() != null) {
+          return false;
+        }
+      } else {
+        // Normal case - advance both if both are regular parameters
         if (!thisIsVarArgs) {
           thisParam = thisParam.getNext();
         }
         if (!thatIsVarArgs) {
           thatParam = thatParam.getNext();
         }
+      }
 
       // both var_args indicates the end
       if (thisIsVarArgs && thatIsVarArgs) {
         thisParam = null;
         thatParam = null;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // If we've exhausted the parameters of "that" but still have parameters in "this",
+    // then "that" cannot be a supertype (unless this has varargs)
+    if (thisParam != null) {
+      // Check if the remaining parameters in "this" are optional
+      Node currentParam = thisParam;
+      while (currentParam != null) {
+        if (currentParam.isRequired()) {
+          return false;
+        }
+        currentParam = currentParam.getNext();
+      }
+    }
+
+    // If we've exhausted the parameters of "this" but still have parameters in "that",
+    // we need to check if they're all optional
+    if (thatParam != null) {
+      // For "that" to be a supertype, any remaining parameters must be optional
+      Node currentParam = thatParam;
+      while (currentParam != null) {
+        if (currentParam.isRequired()) {
+          return false;
+        }
+        currentParam = currentParam.getNext();
+      }
+    }
 
     return true;
   }
\ No newline at end of file
