diff --git a/tmp/69584105-0576-4657-b84c-d743cfa241e3_buggy.java b/tmp/c3ad7c65-2215-49a7-8a29-aa0597c05737_fixed.java
index 9976e43..a06d2c8 100644
--- a/tmp/69584105-0576-4657-b84c-d743cfa241e3_buggy.java
+++ b/tmp/c3ad7c65-2215-49a7-8a29-aa0597c05737_fixed.java
@@ -1,76 +1,101 @@
   @Override
   public boolean isSubtype(JSType other) {
     if (!(other instanceof ArrowType)) {
       return false;
     }
 
     ArrowType that = (ArrowType) other;
 
     // This is described in Draft 2 of the ES4 spec,
     // Section 3.4.7: Subtyping Function Types.
 
     // this.returnType <: that.returnType (covariant)
     if (!this.returnType.isSubtype(that.returnType)) {
       return false;
     }
 
     // that.paramType[i] <: this.paramType[i] (contravariant)
     //
     // If this.paramType[i] is required,
     // then that.paramType[i] is required.
     //
     // In theory, the "required-ness" should work in the other direction as
     // well. In other words, if we have
     //
     // function f(number, number) {}
     // function g(number) {}
     //
     // Then f *should* not be a subtype of g, and g *should* not be
     // a subtype of f. But in practice, we do not implement it this way.
     // We want to support the use case where you can pass g where f is
     // expected, and pretend that g ignores the second argument.
     // That way, you can have a single "no-op" function, and you don't have
     // to create a new no-op function for every possible type signature.
     //
     // So, in this case, g < f, but f !< g
     Node thisParam = parameters.getFirstChild();
     Node thatParam = that.parameters.getFirstChild();
-    while (thisParam != null && thatParam != null) {
-      JSType thisParamType = thisParam.getJSType();
-      JSType thatParamType = thatParam.getJSType();
-      if (thisParamType != null) {
-        if (thatParamType == null ||
-            !thatParamType.isSubtype(thisParamType)) {
-          return false;
+    while (thisParam != null || thatParam != null) {
+      JSType thisParamType = null;
+      JSType thatParamType = null;
+      boolean thisIsVarArgs = false;
+      boolean thatIsVarArgs = false;
+
+      if (thisParam != null) {
+        thisParamType = thisParam.getJSType();
+        thisIsVarArgs = thisParam.isVarArgs();
       }
+      if (thatParam != null) {
+        thatParamType = thatParam.getJSType();
+        thatIsVarArgs = thatParam.isVarArgs();
       }
 
-      boolean thisIsVarArgs = thisParam.isVarArgs();
-      boolean thatIsVarArgs = thatParam.isVarArgs();
+      // Handle case where one function has more parameters than the other
+      if ((thisParam != null && thatParam == null) ||
+          (thisParam == null && thatParam != null)) {
+        // If this has more required parameters than that, it's not a subtype
+        if (thisParam != null && !thisIsVarArgs) {
+          // The overriding function has more required parameters
+          if (!hasOptionalVarArgsOnly(thatParam, that.parameters)) {
+            return false;
+          }
+        } else if (thatParam != null && !thatIsVarArgs) {
+          // The supertype has more required parameters - which is allowed
+          // but we need to check if the subtype has enough parameters
+        }
+      }
 
-      // "that" can't be a supertype, because it's missing a required argument.
-        // NOTE(nicksantos): In our type system, we use {function(...?)} and
-        // {function(...NoType)} to to indicate that arity should not be
-        // checked. Strictly speaking, this is not a correct formulation,
-        // because now a sub-function can required arguments that are var_args
-        // in the super-function. So we special-case this.
+      if (thisParamType != null && thatParamType != null) {
+        if (!thatParamType.isSubtype(thisParamType)) {
+          return false;
+        }
+      }
 
-      // don't advance if we have variable arguments
-      if (!thisIsVarArgs) {
+      // Advance parameters
+      if (thisParam != null && !thisIsVarArgs) {
         thisParam = thisParam.getNext();
       }
-      if (!thatIsVarArgs) {
+      if (thatParam != null && !thatIsVarArgs) {
         thatParam = thatParam.getNext();
       }
 
-      // both var_args indicates the end
-      if (thisIsVarArgs && thatIsVarArgs) {
-        thisParam = null;
-        thatParam = null;
+      // Both at varargs means we're done
+      if ((thisParam != null && thisIsVarArgs) &&
+          (thatParam != null && thatIsVarArgs)) {
+        break;
       }
     }
 
-    // "that" can't be a supertype, because it's missing a required arguement.
+    // Check if we have remaining non-varargs parameters in one but not the other
+    if (thisParam != null && !thisParam.isVarArgs()) {
+      // This has more required parameters than that
+      return false;
+    }
+    if (thatParam != null && !thatParam.isVarArgs()) {
+      // That has more required parameters than this
+      // This is actually okay - a function with fewer parameters is acceptable
+      // in our type system (we pretend extra parameters are ignored)
+    }
 
     return true;
   }
\ No newline at end of file
