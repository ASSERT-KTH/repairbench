diff --git a/tmp/68534f51-a929-4c47-a59c-2be288957db8_buggy.java b/tmp/cd24ff3e-eab0-4c94-b331-ca1525228b01_fixed.java
index e087f95..7eed019 100644
--- a/tmp/68534f51-a929-4c47-a59c-2be288957db8_buggy.java
+++ b/tmp/cd24ff3e-eab0-4c94-b331-ca1525228b01_fixed.java
@@ -1,53 +1,92 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    // Check length requirement
+    if (length < 2) {
+        throw new IllegalArgumentException(
+            "The length must be at least 2 bytes.");
+    }
+
     long result = 0;
     boolean stillPadding = true;
     int end = offset + length;
     int start = offset;
+    boolean hasDigits = false;
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
         if (currentByte == 0) {
+            // Check if we've seen any digits before NUL
+            if (hasDigits && i < end - 1) {
+                // Check if remaining bytes are all NUL or space
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != ' ') {
+                        throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                    }
+                }
+            }
             break;
         }
 
         // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
         if (stillPadding) {
+            if (currentByte == ' ') {
                 continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
+            } else if (currentByte == '0') {
+                hasDigits = true;
+                continue;
+            } else {
+                stillPadding = false;
             }
         }
 
         // Must have trailing NUL or space
-        // May have additional NUL or space
+        if (currentByte == ' ') {
+            if (i >= end - 1) { // Last character can be space
+                break;
+            } else {
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+        }
 
-            stillPadding = false;
         // CheckStyle:MagicNumber OFF
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
+        stillPadding = false;
+        hasDigits = true;
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
         // CheckStyle:MagicNumber ON
     }
 
+    // Check if we had any digits (unless all NULs)
+    boolean allNulls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
+            break;
+        }
+    }
+    if (!allNulls && !hasDigits) {
+        throw new IllegalArgumentException(
+            "The input must contain at least one digit or all NULs");
+    }
+
+    // Check trailing space/NUL requirement
+    if (!allNulls) {
+        boolean hasTrailer = false;
+        for (int i = Math.max(start, offset); i < end; i++) {
+            if (buffer[i] == 0 || buffer[i] == ' ') {
+                hasTrailer = true;
+                break;
+            }
+        }
+        if (!hasTrailer) {
+            throw new IllegalArgumentException(
+                "The input must contain a trailing space or NUL");
+        }
+    }
+
     return result;
 }
\ No newline at end of file
