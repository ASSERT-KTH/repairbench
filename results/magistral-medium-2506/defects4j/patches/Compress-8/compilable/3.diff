diff --git a/tmp/4a557f4a-9f65-4b45-ac67-72950d458da4_buggy.java b/tmp/db10e783-c212-4463-ac4b-895bf0b489a4_fixed.java
index e087f95..efd55ef 100644
--- a/tmp/4a557f4a-9f65-4b45-ac67-72950d458da4_buggy.java
+++ b/tmp/db10e783-c212-4463-ac4b-895bf0b489a4_fixed.java
@@ -1,53 +1,87 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
+        // Check if all bytes are NUL (0)
+        boolean allNulls = true;
+        for (int i = start; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNulls = false;
+                break;
+            }
+        }
+        if (allNulls) {
+            return 0L;
+        }
+
+        boolean hasTrailingSpaceOrNull = false;
+        int lastNonSpaceOrNullIndex = -1;
+
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
-            if (currentByte == 0) {
-                break;
-            }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
+                if (currentByte != ' ') {
+                    stillPadding = false;
+                }
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
 
             stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+
+            if (currentByte == 0 || currentByte == (byte)' ') {
+                hasTrailingSpaceOrNull = true;
+                // We hit a trailing space or NUL, now check if it's the end or if there's more
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != 0 && buffer[j] != (byte)' ') {
+                        throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, buffer[j]));
+                    }
+                }
+                break;
+            }
+
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                     exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            if (lastNonSpaceOrNullIndex != -1 && i - lastNonSpaceOrNullIndex > 1) {
+                // There was more than one non-space/non-NUL byte between spaces or NULs
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            result = (result << 3) + (currentByte - '0');
+            lastNonSpaceOrNullIndex = i;
+        }
+
+        if (!hasTrailingSpaceOrNull && !allNulls) {
+            throw new IllegalArgumentException(
+                "Input must contain a trailing space or NUL");
         }
 
         return result;
     }
\ No newline at end of file
