diff --git a/tmp/609a0454-066d-4343-8d25-677420206960_buggy.java b/tmp/e2eae102-d141-48d5-a233-7aaed30dfc50_fixed.java
index e087f95..b038b73 100644
--- a/tmp/609a0454-066d-4343-8d25-677420206960_buggy.java
+++ b/tmp/e2eae102-d141-48d5-a233-7aaed30dfc50_fixed.java
@@ -1,53 +1,102 @@
 /**
  * Parse an octal string from a buffer.
  * Leading spaces are ignored.
  * The buffer must contain a trailing space or NUL,
  * and may contain an additional trailing space or NUL.
  *
  * The input buffer is allowed to contain all NULs,
  * in which case the method returns 0L
  * (this allows for missing fields).
  *
  * @param buffer The buffer from which to parse.
  * @param offset The offset into the buffer from which to parse.
  * @param length The maximum number of bytes to parse - must be at least 2 bytes.
  * @return The long value of the octal string.
  * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
  */
 public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+    if (length < 2) {
+        throw new IllegalArgumentException("Length must be at least 2 bytes");
+    }
+
     long    result = 0;
     boolean stillPadding = true;
     int     end = offset + length;
     int     start = offset;
+    boolean hasNonZero = false;
+
+    // Check if all bytes are NULs
+    boolean allNulls = true;
+    for (int i = offset; i < end; i++) {
+        if (buffer[i] != 0) {
+            allNulls = false;
+            break;
+        }
+    }
+    if (allNulls) {
+        return 0L;
+    }
 
     for (int i = start; i < end; i++) {
         final byte currentByte = buffer[i];
+
+        if (stillPadding) {
             if (currentByte == 0) {
                 break;
             }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
+            if (currentByte == ' ') {
                 continue;
             }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+            if (currentByte >= '0' && currentByte <= '7') {
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                hasNonZero = true;
+            } else {
+                break;
+            }
+        }
+
+        if (stillPadding) {
+            continue;
+        }
+
+        if (currentByte == 0 || currentByte == ' ') {
+            // We've found the trailing space/NUL
+            // Check if we've actually parsed something
+            if (i == start && currentByte == ' ') {
+                throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, currentByte));
+            }
+            // Look ahead to see if there's another space/NUL
+            if (i + 1 < end) {
+                byte nextByte = buffer[i+1];
+                if (nextByte != 0 && nextByte != ' ') {
+                    continue; // not actually trailing
+                }
+            }
+            break;
+        }
+
         if (currentByte < '0' || currentByte > '7') {
             throw new IllegalArgumentException(
                 exceptionMessage(buffer, offset, length, start, currentByte));
         }
+
         result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+    }
+
+    // Check for missing trailing space/NUL if we processed any digits
+    if (hasNonZero) {
+        boolean hasTrailer = false;
+        for (int i = end - 1; i >= offset; i--) {
+            if (buffer[i] == 0 || buffer[i] == ' ') {
+                hasTrailer = true;
+                break;
+            }
+        }
+        if (!hasTrailer) {
+            throw new IllegalArgumentException("Missing trailing space/NUL");
+        }
     }
 
     return result;
 }
\ No newline at end of file
