diff --git a/tmp/70528bbd-2c4a-4f00-83fd-a2ddc33b098f_buggy.java b/tmp/9a3ffae5-b521-4aff-9811-7d0bee88048a_fixed.java
index e087f95..046460f 100644
--- a/tmp/70528bbd-2c4a-4f00-83fd-a2ddc33b098f_buggy.java
+++ b/tmp/9a3ffae5-b521-4aff-9811-7d0bee88048a_fixed.java
@@ -1,53 +1,101 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
+        boolean foundNonZero = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
+
+            // Handle all NULs case
+            if (i == start && length >= 2) {
+                boolean allNulls = true;
+                for (int j = start; j < end; j++) {
+                    if (buffer[j] != 0) {
+                        allNulls = false;
+                        break;
+                    }
+                }
+                if (allNulls) {
+                    return 0L;
+                }
+            }
+
             if (currentByte == 0) {
+                if (foundNonZero) {
+                    // We've seen non-NULL bytes before, so this is an embedded NUL
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+                // If we're still in padding, treat this as end of string
+                if (stillPadding) {
+                    continue;
+                }
+                // If we've seen non-padding, break (trailing NUL)
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
-                   continue;
-            }
                 if (currentByte == (byte) ' ') {
-                break;
+                    continue;
                 }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            }
+
+            if (stillPadding && currentByte == '0') {
+                continue;
+            }
+
+            // Check for trailing space/NUL requirement (but allow for leading spaces)
+            if (i == end - 1) {
+                if (currentByte != (byte) ' ' && currentByte != 0) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+                break;
+            }
+
+            // Must have trailing NUL or space
+            if (i == end - 2) {
+                final byte nextByte = buffer[i+1];
+                if (nextByte != (byte) ' ' && nextByte != 0) {
+                    throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, nextByte));
+                }
+            }
+
+            // Check for invalid characters
+            if (currentByte != (byte) ' ' && currentByte != 0) {
                 if (currentByte < '0' || currentByte > '7') {
                     throw new IllegalArgumentException(
                             exceptionMessage(buffer, offset, length, start, currentByte));
                 }
+                foundNonZero = true;
                 result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+            } else if (!stillPadding) {
+                // Found a space or NUL in the middle of the number
+                throw new IllegalArgumentException(exceptionMessage(buffer, offset, length, start, currentByte));
+            }
         }
 
         return result;
     }
\ No newline at end of file
