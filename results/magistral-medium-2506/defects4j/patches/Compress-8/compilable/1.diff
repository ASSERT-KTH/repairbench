diff --git a/tmp/a253bd6b-4a9c-466f-a970-8abb096a2342_buggy.java b/tmp/7cc178aa-1da8-4693-b280-0797ef67c88b_fixed.java
index e087f95..0337cbf 100644
--- a/tmp/a253bd6b-4a9c-466f-a970-8abb096a2342_buggy.java
+++ b/tmp/7cc178aa-1da8-4693-b280-0797ef67c88b_fixed.java
@@ -1,53 +1,90 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("The length must be at least 2 bytes");
+        }
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
+        boolean foundNonZero = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // Check if we've seen non-zero digits before NUL
+                if (!stillPadding && foundNonZero) {
                     break;
                 }
+                if (stillPadding) {
+                    continue;
+                }
+                throw new IllegalArgumentException(
+                        exceptionMessage(buffer, offset, length, start, currentByte));
+            }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
-                   continue;
-            }
                 if (currentByte == (byte) ' ') {
-                break;
+                    continue;
                 }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                // First non-space character
+                if (currentByte == '0' || (currentByte >= '0' && currentByte <= '7')) {
                     stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+                    foundNonZero = true;
+                    // Treat leading zeros as start of number
+                    i--; // re-process this character as non-padding
+                    continue;
+                } else {
+                    // Invalid character in padding area
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+            } else {
+                // Check for trailing space/NUL
+                if (currentByte == (byte) ' ' || currentByte == 0) {
+                    // Check if we've processed at least one digit
+                    if (!foundNonZero) {
+                        throw new IllegalArgumentException(
+                                exceptionMessage(buffer, offset, length, start, currentByte));
+                    }
+                    // After finding the first trailing space/NUL, everything else must be space/NUL
+                    for (int j = i; j < end; j++) {
+                        if (buffer[j] != (byte) ' ' && buffer[j] != 0) {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, buffer[j]));
+                        }
+                    }
+                    break;
+                }
+
+                // Check if current byte is a valid octal digit
                 if (currentByte < '0' || currentByte > '7') {
                     throw new IllegalArgumentException(
                             exceptionMessage(buffer, offset, length, start, currentByte));
                 }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+                foundNonZero = true;
+                result = (result << 3) + (currentByte - '0');
+            }
+        }
+
+        // Check if we have at least one digit and valid trailing space/NUL
+        boolean hasTrailingMarker = false;
+        if (foundNonZero) {
+            for (int i = start; i < end; i++) {
+                if (buffer[i] == (byte) ' ' || buffer[i] == 0) {
+                    hasTrailingMarker = true;
+                    break;
+                }
+            }
+        } else {
+            // All NULs case
+            return 0L;
+        }
+
+        if (!hasTrailingMarker && foundNonZero) {
+            throw new IllegalArgumentException(
+                    exceptionMessage(buffer, offset, length, start, (byte)0));
         }
 
         return result;
     }
\ No newline at end of file
