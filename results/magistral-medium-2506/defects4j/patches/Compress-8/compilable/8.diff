diff --git a/tmp/cd9ffb2b-105a-47e6-ba9a-f431253902f2_buggy.java b/tmp/2f9416bb-7497-4b5c-8305-450d1b81081a_fixed.java
index e087f95..80052cf 100644
--- a/tmp/cd9ffb2b-105a-47e6-ba9a-f431253902f2_buggy.java
+++ b/tmp/2f9416bb-7497-4b5c-8305-450d1b81081a_fixed.java
@@ -1,53 +1,117 @@
     /**
      * Parse an octal string from a buffer.
      * Leading spaces are ignored.
      * The buffer must contain a trailing space or NUL,
      * and may contain an additional trailing space or NUL.
      *
      * The input buffer is allowed to contain all NULs,
      * in which case the method returns 0L
      * (this allows for missing fields).
      *
      * @param buffer The buffer from which to parse.
      * @param offset The offset into the buffer from which to parse.
      * @param length The maximum number of bytes to parse - must be at least 2 bytes.
      * @return The long value of the octal string.
      * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
      */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("Length must be at least 2 bytes");
+        }
+
         long    result = 0;
         boolean stillPadding = true;
         int     end = offset + length;
         int     start = offset;
+        boolean foundNonZero = false;
+
+        // Check if all bytes are NUL
+        boolean allNul = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNul = false;
+                break;
+            }
+        }
+        if (allNul) {
+            return 0L;
+        }
+
+        // Check if buffer ends with at least one space or NUL
+        boolean hasTrailingSpaceOrNul = false;
+        for (int i = end - 1; i >= offset; i--) {
+            if (buffer[i] == ' ' || buffer[i] == 0) {
+                hasTrailingSpaceOrNul = true;
+                break;
+            }
+        }
+        if (!hasTrailingSpaceOrNul) {
+            throw new IllegalArgumentException("Missing trailing space or NUL");
+        }
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
+                // If we encounter a NUL and haven't seen any non-padding chars yet,
+                // it's valid if the rest are NULs (return 0)
+                if (stillPadding) {
+                    boolean allRemainingNul = true;
+                    for (int j = i; j < end; j++) {
+                        if (buffer[j] != 0) {
+                            allRemainingNul = false;
+                            break;
+                        }
+                    }
+                    if (allRemainingNul) {
+                        return 0L;
+                    }
+                }
+                // Otherwise, treat NUL as end of string
+                stillPadding = false;
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
+                if (currentByte == ' ' || currentByte == '0') {
+                    if (currentByte != ' ') {
+                        foundNonZero = true;
+                    }
                     continue;
-            }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
+                } else if (currentByte >= '0' && currentByte <= '7') {
                     stillPadding = false;
+                    foundNonZero = true;
+                } else {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+            }
+
+            if (currentByte == ' ') {
+                // Check if this is a trailing space (allowed) or embedded (invalid)
+                boolean isTrailing = true;
+                for (int j = i + 1; j < end; j++) {
+                    if (buffer[j] != ' ' && buffer[j] != 0) {
+                        isTrailing = false;
+                        break;
+                    }
+                }
+                if (isTrailing) {
+                    break; // valid trailing space
+                } else {
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
+                }
+            }
+
             // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
             // CheckStyle:MagicNumber ON
+            result = (result << 3) + (currentByte - '0'); // convert from ASCII
         }
 
         return result;
     }
\ No newline at end of file
