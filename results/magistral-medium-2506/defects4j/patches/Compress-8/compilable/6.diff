diff --git a/tmp/fb707137-9cc9-482e-b314-d8b6b6661ff7_buggy.java b/tmp/da94660c-6f37-479e-bf1d-0430590ed056_fixed.java
index e087f95..b0531a9 100644
--- a/tmp/fb707137-9cc9-482e-b314-d8b6b6661ff7_buggy.java
+++ b/tmp/da94660c-6f37-479e-bf1d-0430590ed056_fixed.java
@@ -1,53 +1,75 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        // Check minimum length requirement
+        if (length < 2) {
+            throw new IllegalArgumentException("buffer must contain at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
+        boolean sawDigit = false;
 
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
                 break;
             }
 
             // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
             if (stillPadding) {
+                if (currentByte == ' ') {
                     continue;
                 }
-                if (currentByte == (byte) ' ') {
-                break;
-                }
-            }
-
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
                 stillPadding = false;
-            // CheckStyle:MagicNumber OFF
+            }
+
+            // Check for trailing space or NUL
+            if (currentByte == ' ' || currentByte == 0) {
+                // If we've seen digits before, this is valid trailer
+                if (sawDigit) {
+                    break;
+                }
+                // Otherwise continue processing (leading spaces)
+                continue;
+            }
+
+            // Validate digit
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
-            result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
+
+            sawDigit = true;
+            result = (result << 3) + (currentByte - '0');
+        }
+
+        // Check if we had any digits at all (other than leading zeros)
+        // If buffer was all NULs, treat as 0
+        boolean allNuls = true;
+        for (int i = offset; i < end; i++) {
+            if (buffer[i] != 0) {
+                allNuls = false;
+                break;
+            }
+        }
+        if (allNuls) {
+            return 0;
+        }
+
+        // Check if we saw a valid trailer (space or NUL) after digits
+        if (sawDigit) {
+            boolean foundTrailer = false;
+            for (int i = offset; i < end; i++) {
+                if (buffer[i] == ' ' || buffer[i] == 0) {
+                    foundTrailer = true;
+                    break;
+                }
+            }
+            if (!foundTrailer) {
+                throw new IllegalArgumentException("Missing trailing space or NUL");
+            }
         }
 
         return result;
     }
\ No newline at end of file
