diff --git a/tmp/6901bb30-3cb6-43da-9c98-952070b258ef_buggy.java b/tmp/2a23ef11-6cff-4e87-9dd4-369cd6f617ed_fixed.java
index e087f95..4a6cac9 100644
--- a/tmp/6901bb30-3cb6-43da-9c98-952070b258ef_buggy.java
+++ b/tmp/2a23ef11-6cff-4e87-9dd4-369cd6f617ed_fixed.java
@@ -1,53 +1,74 @@
-    /**
-     * Parse an octal string from a buffer.
-     * Leading spaces are ignored.
-     * The buffer must contain a trailing space or NUL,
-     * and may contain an additional trailing space or NUL.
-     *
-     * The input buffer is allowed to contain all NULs,
-     * in which case the method returns 0L
-     * (this allows for missing fields).
-     *
-     * @param buffer The buffer from which to parse.
-     * @param offset The offset into the buffer from which to parse.
-     * @param length The maximum number of bytes to parse - must be at least 2 bytes.
-     * @return The long value of the octal string.
-     * @throws IllegalArgumentException if the trailing space/NUL is missing or if a invalid byte is detected.
-     */
     public static long parseOctal(final byte[] buffer, final int offset, final int length) {
+        if (length < 2) {
+            throw new IllegalArgumentException("length must be at least 2 bytes");
+        }
+
         long result = 0;
         boolean stillPadding = true;
         int end = offset + length;
         int start = offset;
 
+        boolean hasNonZeroContent = false;
+
         for (int i = start; i < end; i++) {
             final byte currentByte = buffer[i];
             if (currentByte == 0) {
-                break;
+                if (!stillPadding && hasNonZeroContent) {
+                    // If we've seen non-zero content, we expect a trailing NUL or space
+                    i++; // skip the trailing NUL (if there's space left, there might be another)
+                    while (i < end && buffer[i] == 0) {
+                        i++;
+                    }
+                    if (i >= end) {
+                        return result;
+                    }
+                    if (buffer[i] == ' ') {
+                        return result;
+                    }
+                    throw new IllegalArgumentException(
+                            exceptionMessage(buffer, offset, length, start, currentByte));
                 }
-
-        // Skip leading spaces
-            if (currentByte == (byte) ' ' || currentByte == '0') {
-                if (stillPadding) {
                 continue;
             }
+
+            // Skip leading spaces
+            if (stillPadding && (currentByte == (byte) ' ' || currentByte == '0')) {
+                if (currentByte != '0') {
+                    continue; // continue only if space, not zero
+                }
+                // If it's '0', we might have content
+                stillPadding = false;
+                hasNonZeroContent = true;
+            } else {
+                stillPadding = false;
+            }
+
             if (currentByte == (byte) ' ') {
-                break;
+                if (stillPadding) {
+                    continue; // leading space
+                } else {
+                    // Check if this is a trailing space (We need to make sure there's nothing after it)
+                    for (int j = i + 1; j < end; j++) {
+                        if (buffer[j] != 0 && buffer[j] != ' ') {
+                            throw new IllegalArgumentException(
+                                    exceptionMessage(buffer, offset, length, start, currentByte));
+                        }
+                    }
+                    return result;
                 }
             }
 
-        // Must have trailing NUL or space
-        // May have additional NUL or space
-
-            stillPadding = false;
-            // CheckStyle:MagicNumber OFF
             if (currentByte < '0' || currentByte > '7') {
                 throw new IllegalArgumentException(
                         exceptionMessage(buffer, offset, length, start, currentByte));
             }
+
+            if (currentByte != '0') {
+                hasNonZeroContent = true;
+            }
+
             result = (result << 3) + (currentByte - '0'); // convert from ASCII
-            // CheckStyle:MagicNumber ON
         }
 
         return result;
     }
\ No newline at end of file
