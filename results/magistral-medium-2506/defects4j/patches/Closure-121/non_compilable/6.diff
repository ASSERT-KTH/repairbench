diff --git a/tmp/56062139-6c19-447b-b075-0199cda6721d_buggy.java b/tmp/14badf26-aa6a-4ea3-b7f8-11623bc4bae2_fixed.java
index 3a790cb..dcb1c6a 100644
--- a/tmp/56062139-6c19-447b-b075-0199cda6721d_buggy.java
+++ b/tmp/14badf26-aa6a-4ea3-b7f8-11623bc4bae2_fixed.java
@@ -1,74 +1,95 @@
     private void inlineNonConstants(
         Var v, ReferenceCollection referenceInfo,
         boolean maybeModifiedArguments) {
       int refCount = referenceInfo.references.size();
+      if (refCount == 0) return;
+
       Reference declaration = referenceInfo.references.get(0);
       Reference init = referenceInfo.getInitializingReference();
       int firstRefAfterInit = (declaration == init) ? 2 : 3;
 
       if (refCount > 1 &&
           isImmutableAndWellDefinedVariable(v, referenceInfo)) {
         // if the variable is referenced more than once, we can only
         // inline it if it's immutable and never defined before referenced.
         Node value;
         if (init != null) {
           value = init.getAssignedValue();
         } else {
           // Create a new node for variable that is never initialized.
           Node srcLocation = declaration.getNode();
           value = NodeUtil.newUndefinedNode(srcLocation);
         }
         Preconditions.checkNotNull(value);
         inlineWellDefinedVariable(v, value, referenceInfo.references);
         staleVars.add(v);
       } else if (refCount == firstRefAfterInit) {
         // The variable likely only read once, try some more
         // complex inlining heuristics.
+        if (firstRefAfterInit <= referenceInfo.references.size()) {
           Reference reference = referenceInfo.references.get(
               firstRefAfterInit - 1);
           if (canInline(declaration, init, reference)) {
             inline(v, declaration, init, reference);
             staleVars.add(v);
           }
+        }
       } else if (declaration != init && refCount == 2) {
         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
           // The only reference is the initialization, remove the assignment and
           // the variable declaration.
           Node value = init.getAssignedValue();
           Preconditions.checkNotNull(value);
           inlineWellDefinedVariable(v, value, referenceInfo.references);
           staleVars.add(v);
         }
       }
 
       // If this variable was not inlined normally, check if we can
       // inline an alias of it. (If the variable was inlined, then the
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
           !staleVars.contains(v) &&
           referenceInfo.isWellDefined() &&
           referenceInfo.isAssignedOnceInLifetime()) {
           // Inlining the variable based solely on well-defined and assigned
           // once is *NOT* correct. We relax the correctness requirement if
           // the variable is declared constant.
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
           if (aliasCandidates.containsKey(nameNode)) {
             AliasCandidate candidate = aliasCandidates.get(nameNode);
             if (!staleVars.contains(candidate.alias) &&
                 !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
+              Reference aliasInit = candidate.refInfo.getInitializingReference();
+              if (aliasInit != null) {
                 Node value = aliasInit.getAssignedValue();
                 Preconditions.checkNotNull(value);
+                list<AliasCandidate> candidateAliasCandidates = new ArrayList<>();
+                // Check if the alias is safe to inline by ensuring it doesn't have
+                // any other references that might modify it
+                if (isSafeToInlineAlias(candidate)) {
                   inlineWellDefinedVariable(candidate.alias,
                       value,
                       candidate.refInfo.references);
                   staleVars.add(candidate.alias);
                 }
               }
             }
           }
         }
+      }
+    }
+
+    // Helper method to check if an alias is safe to inline
+    private boolean isSafeToInlineAlias(AliasCandidate candidate) {
+      // Only inline if the alias has exactly one reference (the initialization)
+      // or if it's only referenced in a way that's safe to inline
+      if (candidate.refInfo.references.size() <= 2) {
+        return true; // should be just declaration and init
+      }
+      // More sophisticated checks can be added here
+      return false;
+    }
\ No newline at end of file
