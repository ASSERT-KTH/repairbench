diff --git a/tmp/e9cf2609-d671-43eb-995e-007916d1459a_buggy.java b/tmp/f8a34e3c-44fb-4f37-9812-ce24e0c19336_fixed.java
index d57736b..0a3fa55 100644
--- a/tmp/e9cf2609-d671-43eb-995e-007916d1459a_buggy.java
+++ b/tmp/f8a34e3c-44fb-4f37-9812-ce24e0c19336_fixed.java
@@ -1,39 +1,41 @@
   /**
    * Suppose X is an object with inferred properties.
    * Suppose also that X is used in a way where it would only type-check
    * correctly if some of those properties are widened.
    * Then we should be polite and automatically widen X's properties for him.
    *
    * For a concrete example, consider:
    * param x {{prop: (number|undefined)}}
    * function f(x) {}
    * f({});
    *
    * If we give the anonymous object an inferred property of (number|undefined),
    * then this code will type-check appropriately.
    */
   private void inferPropertyTypesToMatchConstraint(
       JSType type, JSType constraint) {
     if (type == null || constraint == null) {
       return;
     }
 
     ObjectType constraintObj =
         ObjectType.cast(constraint.restrictByNotNullOrUndefined());
     if (constraintObj != null && constraintObj.isRecordType()) {
       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
       if (objType != null) {
         for (String prop : constraintObj.getOwnPropertyNames()) {
           JSType propType = constraintObj.getPropertyType(prop);
           if (!objType.isPropertyTypeDeclared(prop)) {
             JSType typeToInfer = propType;
             if (!objType.hasProperty(prop)) {
-              typeToInfer =
-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
+              typeToInfer = getNativeType(VOID_TYPE);
+              if (propType != null) {
+                typeToInfer = typeToInfer.getLeastSupertype(propType);
+              }
             }
             objType.defineInferredProperty(prop, typeToInfer, null);
           }
         }
       }
     }
   }
\ No newline at end of file
