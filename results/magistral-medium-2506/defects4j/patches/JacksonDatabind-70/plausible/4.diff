diff --git a/tmp/bf4e3acd-ea6b-4937-9d00-9cafb357e4ef_buggy.java b/tmp/1f3cf824-1cd7-4962-95d3-057e29091574_fixed.java
index 0313249..bb9c51b 100644
--- a/tmp/bf4e3acd-ea6b-4937-9d00-9cafb357e4ef_buggy.java
+++ b/tmp/1f3cf824-1cd7-4962-95d3-057e29091574_fixed.java
@@ -1,32 +1,25 @@
-    /**
-     * Specialized method for removing specified existing entry.
-     * NOTE: entry MUST exist, otherwise an exception is thrown.
-     */
     public void remove(SettableBeanProperty propToRm)
     {
         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
         String key = getPropertyName(propToRm);
         boolean found = false;
 
+        // First pass to find and mark the property to remove
         for (int i = 1, end = _hashArea.length; i < end; i += 2) {
             SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
             if (prop == null) {
                 continue;
             }
-            if (!found) {
-                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
-                //   as only former is lower-case in case-insensitive case
-                found = key.equals(prop.getName());
-                if (found) {
-                    // need to leave a hole here
-                    _propsInOrder[_findFromOrdered(prop)] = null;
+            // Compare using case-insensitive matching if needed
+            if (!found && key.equalsIgnoreCase(prop.getName())) {
+                found = true;
+                // mark this property as removed (but keep iterating to collect all others)
                 continue;
             }
-            }
             props.add(prop);
         }
         if (!found) {
             throw new NoSuchElementException("No entry '"+propToRm.getName()+"' found, can't remove");
         }
         init(props);
     }
\ No newline at end of file
