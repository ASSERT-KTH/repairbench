diff --git a/tmp/ec100334-d246-4959-9e6d-d9ff98127756_buggy.java b/tmp/c5ab0b41-0718-4bdf-b51b-f38357812a4a_fixed.java
index 7d8d756..77870ba 100644
--- a/tmp/ec100334-d246-4959-9e6d-d9ff98127756_buggy.java
+++ b/tmp/c5ab0b41-0718-4bdf-b51b-f38357812a4a_fixed.java
@@ -1,48 +1,61 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            // Handle case where we might get a field name first (like in test case)
+            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                // If it's a field name that matches our type property name, process it
+                if (p.getCurrentName().equals(getTypePropertyName())) {
+                    String typeId = p.nextTextValue();
+                    JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+                    p.nextToken();
+                    Object value = deser.deserialize(p, ctxt);
+                    return value;
+                }
+            }
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
-        // And then need the closing END_OBJECT
-        if (p.nextToken() != JsonToken.END_OBJECT) {
+        // And then need the closing END_OBJECT if we're in an object context
+        if (p.getCurrentToken() == JsonToken.END_OBJECT || p.nextToken() == JsonToken.END_OBJECT) {
+            // We might have already consumed the END_OBJECT token if we had a simple value
+        } else {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
