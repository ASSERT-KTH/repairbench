diff --git a/tmp/18d725a3-22d7-4191-886a-a01218729c75_buggy.java b/tmp/1637bbfc-fddd-4470-9152-bce77185856d_fixed.java
index 7d8d756..ecaec87 100644
--- a/tmp/18d725a3-22d7-4191-886a-a01218729c75_buggy.java
+++ b/tmp/1637bbfc-fddd-4470-9152-bce77185856d_fixed.java
@@ -1,48 +1,67 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
         // first, sanity checks
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
             // should always get field name, but just in case...
             if (p.nextToken() != JsonToken.FIELD_NAME) {
                 throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                         "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
             }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
-        if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+        if (_typeIdVisible) {
+            // Handle case where we need to add type information
+            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
                 // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
                 TokenBuffer tb = new TokenBuffer(null, false);
                 tb.writeStartObject(); // recreate START_OBJECT
                 tb.writeFieldName(_typePropertyName);
                 tb.writeString(typeId);
                 p = JsonParserSequence.createFlattened(tb.asParser(p), p);
                 p.nextToken();
+            } else if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                // If we have a field name, we might be in a case where type info is embedded differently
+                // In this case, we might need to read the field name first
+                String fieldName = p.getCurrentText();
+                p.nextToken(); // move to the value
+                Object value = deser.deserialize(p, ctxt);
+                // We might need to advance to find END_OBJECT
+                while (p.nextToken() != JsonToken.END_OBJECT) {
+                    p.skipChildren();
+                }
+                return value;
+            }
+        } else {
+            // Skip the type info handling if type isn't visible
+            if (p.getCurrentToken() == JsonToken.START_OBJECT) {
+                p.nextToken(); // move past START_OBJECT if we didn't process it above
+            }
         }
 
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
