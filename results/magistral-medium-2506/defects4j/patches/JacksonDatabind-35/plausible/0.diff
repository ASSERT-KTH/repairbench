diff --git a/tmp/08c1458c-7970-48e3-8c4a-6d6e4a96e55f_buggy.java b/tmp/f617f31e-be3c-4d0a-9672-5a7536afa19c_fixed.java
index 7d8d756..09fa784 100644
--- a/tmp/08c1458c-7970-48e3-8c4a-6d6e4a96e55f_buggy.java
+++ b/tmp/f617f31e-be3c-4d0a-9672-5a7536afa19c_fixed.java
@@ -1,48 +1,78 @@
     /**
      * Method that handles type information wrapper, locates actual
      * subtype deserializer to use, and calls it to do actual
      * deserialization.
      */
     @SuppressWarnings("resource")
     private final Object _deserialize(JsonParser p, DeserializationContext ctxt) throws IOException
     {
         // 02-Aug-2013, tatu: May need to use native type ids
         if (p.canReadTypeId()) {
             Object typeId = p.getTypeId();
             if (typeId != null) {
                 return _deserializeWithNativeTypeId(p, ctxt, typeId);
             }
         }
-        // first, sanity checks
+
+        // first, check if we're at the start of the object
         if (p.getCurrentToken() != JsonToken.START_OBJECT) {
+            // If we're not at START_OBJECT, maybe we're at FIELD_NAME (the type id)
+            if (p.getCurrentToken() == JsonToken.FIELD_NAME) {
+                // This might be the type id, let's try to handle it
+                final String typeId = p.getText();
+                JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
+                p.nextToken(); // consume field name
+
+                // Minor complication: we may need to merge type id in?
+                if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
+                    // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
+                    TokenBuffer tb = new TokenBuffer(null, false);
+                    tb.writeStartObject(); // recreate START_OBJECT
+                    tb.writeFieldName(_typePropertyName);
+                    tb.writeString(typeId);
+                    p = JsonParserSequence.createFlattened(tb.asParser(p), p);
+                    p.nextToken();
+                }
+
+                Object value = deser.deserialize(p, ctxt);
+                // And then need the closing END_OBJECT
+                if (p.nextToken() != JsonToken.END_OBJECT) {
+                    throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
+                            "expected closing END_OBJECT after type information and deserialized value");
+                }
+                return value;
+            }
+            // If not FIELD_NAME, then it's a real error
             throw ctxt.wrongTokenException(p, JsonToken.START_OBJECT,
                     "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName());
         }
+
+        // Original path for START_OBJECT case
         // should always get field name, but just in case...
         if (p.nextToken() != JsonToken.FIELD_NAME) {
             throw ctxt.wrongTokenException(p, JsonToken.FIELD_NAME,
                     "need JSON String that contains type id (for subtype of "+baseTypeName()+")");
         }
         final String typeId = p.getText();
         JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId);
         p.nextToken();
 
         // Minor complication: we may need to merge type id in?
         if (_typeIdVisible && p.getCurrentToken() == JsonToken.START_OBJECT) {
             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.
             TokenBuffer tb = new TokenBuffer(null, false);
             tb.writeStartObject(); // recreate START_OBJECT
             tb.writeFieldName(_typePropertyName);
             tb.writeString(typeId);
             p = JsonParserSequence.createFlattened(tb.asParser(p), p);
             p.nextToken();
         }
 
         Object value = deser.deserialize(p, ctxt);
         // And then need the closing END_OBJECT
         if (p.nextToken() != JsonToken.END_OBJECT) {
             throw ctxt.wrongTokenException(p, JsonToken.END_OBJECT,
                     "expected closing END_OBJECT after type information and deserialized value");
         }
         return value;
     }
\ No newline at end of file
