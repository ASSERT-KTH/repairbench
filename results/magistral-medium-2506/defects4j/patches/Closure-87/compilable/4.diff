diff --git a/tmp/3cd9810d-7edd-4bcb-8d60-2ec87bc3368f_buggy.java b/tmp/16d7e6a9-96b2-4a1c-b226-09debdebfc5f_fixed.java
index 19fd63e..26c686a 100644
--- a/tmp/3cd9810d-7edd-4bcb-8d60-2ec87bc3368f_buggy.java
+++ b/tmp/16d7e6a9-96b2-4a1c-b226-09debdebfc5f_fixed.java
@@ -1,24 +1,38 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr) &&
+            !isPotentialEventHandlerCall(maybeExpr)) {
+          return true;
+        }
+      }
     }
+    return false;
   }
 
+  private boolean isPotentialEventHandlerCall(Node n) {
+    if (n.getType() == Token.CALL) {
+      Node target = n.getFirstChild();
+      if (target != null && target.isQualifiedName()) {
+        String qualName = target.getQualifiedName();
+        return qualName.endsWith("onchange")
+            || qualName.endsWith("onclick")
+            || qualName.endsWith("onload");
+      }
+    }
     return false;
   }
\ No newline at end of file
