diff --git a/tmp/4935469f-dd7c-4cde-9b8c-b2e6d1d3c736_buggy.java b/tmp/29725b7e-8475-4e4d-b138-79dee3f9b6ff_fixed.java
index 19fd63e..e537031 100644
--- a/tmp/4935469f-dd7c-4cde-9b8c-b2e6d1d3c736_buggy.java
+++ b/tmp/29725b7e-8475-4e4d-b138-79dee3f9b6ff_fixed.java
@@ -1,24 +1,41 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+          if (NodeUtil.isExpressionNode(maybeExpr)) {
+            // Check for potential IE event handler issue
+            if (maybeExpr.getType() == Token.CALL) {
+              Node target = maybeExpr.getFirstChild();
+              if (target != null) {
+                String propertyName = null;
+                if (target.isGetProp()) {
+                  propertyName = target.getLastChild().getString();
+                } else if (target.isName()) {
+                  propertyName = target.getString();
+                }
+                if (propertyName != null && propertyName.toLowerCase().endsWith("onchange")) {
+                  return false;
+                }
+              }
+            }
+            return true;
+          }
       }
     }
 
     return false;
   }
\ No newline at end of file
