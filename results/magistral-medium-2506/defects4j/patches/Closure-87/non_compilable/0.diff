diff --git a/tmp/ecede598-861e-44ea-8596-4d710f0d00ea_buggy.java b/tmp/6d23cb20-5624-4685-9769-d4ea0cda5287_fixed.java
index 19fd63e..c58f58e 100644
--- a/tmp/ecede598-861e-44ea-8596-4d710f0d00ea_buggy.java
+++ b/tmp/6d23cb20-5624-4685-9769-d4ea0cda5287_fixed.java
@@ -1,24 +1,37 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
 
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (!NodeUtil.isExpressionNode(maybeExpr)) {
+            return false;
+        }
+        Node maybeCall = maybeExpr;
+        if (maybeCall.getType() == Token.EXPR_RESULT) {
+            maybeCall = maybeCall.getFirstChild();
+        }
+        if (maybeCall.getType() == Token.CALL && maybeCall.getFirstChild().getType() == Token.GETPROP) {
+            String propName = maybeCall.getFirstChild().getLastChild().getString();
+            if (propName.equals("onchange") || propName.equals("onchange");) {
+                return false;
+            }
+        }
+        return true;
       }
     }
 
     return false;
   }
\ No newline at end of file
