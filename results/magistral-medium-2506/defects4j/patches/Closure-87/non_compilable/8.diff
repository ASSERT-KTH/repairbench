diff --git a/tmp/cab88220-0c5a-4172-b6e1-5bdb19ea21e5_buggy.java b/tmp/8f36213b-4735-46cd-9661-6e64aab6b1d0_fixed.java
index 19fd63e..f96a9c8 100644
--- a/tmp/cab88220-0c5a-4172-b6e1-5bdb19ea21e5_buggy.java
+++ b/tmp/8f36213b-4735-46cd-9661-6e64aab6b1d0_fixed.java
@@ -1,24 +1,40 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
           // IE has a bug where event handlers behave differently when
           // their return value is used vs. when their return value is in
           // an EXPR_RESULT. It's pretty freaking weird. See:
           // http://code.google.com/p/closure-compiler/issues/detail?id=291
           // We try to detect this case, and not fold EXPR_RESULTs
           // into other expressions.
 
             // We only have to worry about methods with an implicit 'this'
             // param, or this doesn't happen.
 
+          if (isBadIEEventHandler(maybeExpr)) {
+            return false;
+          }
           return NodeUtil.isExpressionNode(maybeExpr);
       }
     }
 
     return false;
   }
+
+  private boolean isBadIEEventHandler(Node maybeExpr) {
+    if (maybeExpr.isCall() && maybeExpr.getFirstChild().getType() == Token.GETPROP) {
+      Node getProp = maybeExpr.getFirstChild();
+      String propName = getProp.getLastChild().getString();
+      // Check for common event handler names
+      if (Arrays.asList("onchange", "onclick", "onload", "onBlur",
+          "onfocus", "onabort", "onactivate").contains(propName)) {
+        return true;
+      }
+    }
+    return false;
+  }
\ No newline at end of file
