diff --git a/tmp/ec0bf5a7-694c-4162-95b9-0aff9e1d248f_buggy.java b/tmp/5553f82b-9aa1-4fd2-995c-df97bd718de9_fixed.java
index 19fd63e..e6d9490 100644
--- a/tmp/ec0bf5a7-694c-4162-95b9-0aff9e1d248f_buggy.java
+++ b/tmp/5553f82b-9aa1-4fd2-995c-df97bd718de9_fixed.java
@@ -1,24 +1,33 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
-    if (n.getType() == Token.BLOCK) {
-      if (n.hasOneChild()) {
+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {
       Node maybeExpr = n.getFirstChild();
       // IE has a bug where event handlers behave differently when
       // their return value is used vs. when their return value is in
       // an EXPR_RESULT. It's pretty freaking weird. See:
       // http://code.google.com/p/closure-compiler/issues/detail?id=291
       // We try to detect this case, and not fold EXPR_RESULTs
       // into other expressions.
 
       // We only have to worry about methods with an implicit 'this'
       // param, or this doesn't happen.
-
-          return NodeUtil.isExpressionNode(maybeExpr);
+      if (NodeUtil.isExpressionNode(maybeExpr)) {
+        // Don't fold blocks containing event handler calls
+        if (NodeUtil.isCall(maybeExpr)) {
+          Node qualifier = maybeExpr.getFirstChild();
+          String methodName = maybeExpr.getLastChild().getString();
+          // Check if this looks like an event handler call (starts with "on")
+          if (methodName.startsWith("on") &&
+              (qualifier.isQualifiedName() ||
+               (qualifier.isGetProp() && qualifier.getFirstChild().isThis()))) {
+            return false;
+          }
+        }
+        return true;
       }
     }
-
     return false;
   }
\ No newline at end of file
