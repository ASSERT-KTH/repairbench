diff --git a/tmp/8a708c65-df0d-4763-8a2e-a6819041648b_buggy.java b/tmp/a0efb353-d37b-4004-ad69-46c0249d0bb0_fixed.java
index 19fd63e..6b55b1f 100644
--- a/tmp/8a708c65-df0d-4763-8a2e-a6819041648b_buggy.java
+++ b/tmp/a0efb353-d37b-4004-ad69-46c0249d0bb0_fixed.java
@@ -1,24 +1,35 @@
   /**
    * @return Whether the node is a block with a single statement that is
    *     an expression.
    */
   private boolean isFoldableExpressBlock(Node n) {
     if (n.getType() == Token.BLOCK) {
       if (n.hasOneChild()) {
         Node maybeExpr = n.getFirstChild();
         // IE has a bug where event handlers behave differently when
         // their return value is used vs. when their return value is in
         // an EXPR_RESULT. It's pretty freaking weird. See:
         // http://code.google.com/p/closure-compiler/issues/detail?id=291
         // We try to detect this case, and not fold EXPR_RESULTs
         // into other expressions.
-
+        //
         // We only have to worry about methods with an implicit 'this'
         // param, or this doesn't happen.
 
-          return NodeUtil.isExpressionNode(maybeExpr);
+        if (NodeUtil.isExpressionNode(maybeExpr)) {
+          // Don't fold if it's a method call that might be affected by IE bug
+          if (maybeExpr.isCall() && maybeExpr.getFirstChild().isGetProp()) {
+            String propertyName = maybeExpr.getFirstChild().getLastChild().getString();
+            if ("onchange".equals(propertyName) ||
+                "onclick".equals(propertyName) ||
+                // Add other event handler names here if needed
+                false) {
+              return false;
+            }
+          }
+          return true;
+        }
       }
     }
-
     return false;
   }
\ No newline at end of file
