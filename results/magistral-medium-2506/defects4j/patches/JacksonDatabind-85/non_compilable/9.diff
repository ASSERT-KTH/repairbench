diff --git a/tmp/5103c2de-b994-4c1d-ada9-0c4f71e77287_buggy.java b/tmp/4d324e76-2695-45d9-89d4-15252f166613_fixed.java
index d926eea..38c7426 100644
--- a/tmp/5103c2de-b994-4c1d-ada9-0c4f71e77287_buggy.java
+++ b/tmp/4d324e76-2695-45d9-89d4-15252f166613_fixed.java
@@ -1,48 +1,64 @@
     @Override
     public JsonSerializer<?> createContextual(SerializerProvider serializers,
             BeanProperty property) throws JsonMappingException
     {
         if (property == null) {
             return this;
         }
         JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());
         if (format == null) {
             return this;
         }
         // Simple case first: serialize as numeric timestamp?
         JsonFormat.Shape shape = format.getShape();
         if (shape.isNumeric()) {
             return withFormat(Boolean.TRUE, null);
         }
 
         // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..
         // First: custom pattern will override things
         if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()
                         || format.hasLocale() || format.hasTimeZone()) {
             TimeZone tz = format.getTimeZone();
             final String pattern = format.hasPattern()
                             ? format.getPattern()
                             : StdDateFormat.DATE_FORMAT_STR_ISO8601;
             final Locale loc = format.hasLocale()
                             ? format.getLocale()
                             : serializers.getLocale();
             SimpleDateFormat df = new SimpleDateFormat(pattern, loc);
             if (tz == null) {
                 tz = serializers.getTimeZone();
             }
             df.setTimeZone(tz);
             return withFormat(Boolean.FALSE, df);
         }
 
         // Otherwise, need one of these changes:
-
-
-        // Jackson's own `StdDateFormat` is quite easy to deal with...
-
-        // 08-Jun-2017, tatu: Unfortunately there's no generally usable
-        //    mechanism for changing `DateFormat` instances (or even clone()ing)
-        //    So: require it be `SimpleDateFormat`; can't config other types
-//            serializers.reportBadDefinition(handledType(), String.format(
-            // Ugh. No way to change `Locale`, create copy; must re-crete completely:
+        // If we have a default date format but no explicit pattern, use it
+        DateFormat df = serializers.getConfig().getDateFormat();
+        if (df != null && !(df instanceof SimpleDateFormat)) {
+            // Handle non-SimpleDateFormat case (like StdDateFormat)
+            if (df instanceof StdDateFormat) {
+                // Clone or create a new instance?
+                StdDateFormat stdFmt = (StdDateFormat)df;
+                stdFmt = stdFmt.clone(); // try cloning
+                stdFmt.setTimeZone(serializers.getTimeZone());
+                stdFmt.setLocale(serializers.getLocale());
+                // Not sure how to properly handle this case, but we'll try to use it
+                return withFormat(Boolean.FALSE, stdFmt);
+            }
+            // For other formats, we can't configure them, so we just use default
             return this;
         }
+
+        // Handle case where date format wasn't configured (default DF is ISO8601)
+        // but we might want to return a serial format using a simple format?
+        // Not sure, but let's return the df here
+        if (df != null && df instanceof SimpleDateFormat) {
+            return withFormat(Boolean.FALSE, df);
+        }
+
+        // Otherwise return current with shape-based config:
+        return withFormat(null, null); // will force default handling
+    }
\ No newline at end of file
