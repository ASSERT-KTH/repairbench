diff --git a/tmp/cc284675-8b5a-4308-8658-eeb36c8feb2f_buggy.java b/tmp/e65f70c0-6a28-42d0-97e8-10be5ba32dbc_fixed.java
index 00914da..15eeaa3 100644
--- a/tmp/cc284675-8b5a-4308-8658-eeb36c8feb2f_buggy.java
+++ b/tmp/e65f70c0-6a28-42d0-97e8-10be5ba32dbc_fixed.java
@@ -1,17 +1,36 @@
     // does not recurse.
     private void normalise(Element element) {
         List<Node> toMove = new ArrayList<Node>();
         for (Node node: element.childNodes) {
             if (node instanceof TextNode) {
                 TextNode tn = (TextNode) node;
                 if (!tn.isBlank())
                     toMove.add(tn);
             }
         }
 
-        for (Node node: toMove) {
+        // Create a new list containing both text nodes and document type nodes (if any)
+        // because document type nodes should also be moved to the body if present
+        List<Node> allToMove = new ArrayList<Node>();
+        for (Node node : element.childNodes) {
+            if (node instanceof TextNode || node.nodeName().equals("#doctype")) {
+                allToMove.add(node);
+            }
+        }
+
+        if (!allToMove.isEmpty()) {
+            for (Node node : allToMove) {
                 element.removeChild(node);
-            body().appendChild(new TextNode(" ", ""));
-            body().appendChild(node);
+            }
+            // Add all nodes to the body in their original order
+            for (Node node : allToMove) {
+                if (node instanceof TextNode || node.nodeName().equals("#doctype")) {
+                    body().insertChildren(0, Collections.singletonList(node));
+                }
+            }
+            // Add a space if needed (for textarea-like normalization)
+            if (!allToMove.isEmpty()) {
+                body().insertChildren(0, Collections.singletonList(new TextNode(" ", "")));
+            }
         }
     }
\ No newline at end of file
