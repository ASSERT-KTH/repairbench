diff --git a/tmp/ea38286e-1f71-4a7c-be6f-42e918dc59cd_buggy.java b/tmp/d7c3460a-7793-4ea2-93d8-4a88083a8357_fixed.java
index 10616db..8a67f34 100644
--- a/tmp/ea38286e-1f71-4a7c-be6f-42e918dc59cd_buggy.java
+++ b/tmp/d7c3460a-7793-4ea2-93d8-4a88083a8357_fixed.java
@@ -1,19 +1,83 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
+
+        // If partial is a MonthDay and day is 29, 30 or 31, we need special handling
+        if (partial instanceof MonthDay) {
+            int month = 0;
+            int day = 0;
+            // Find month and day in the fields array
+            for (int i = 0; i < partial.size(); i++) {
+                if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
+                    month = values[i];
+                } else if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {
+                    day = values[i];
+                }
+            }
+
+            // Special handling for day values that might be adjusted
+            if (day >= 29) {
+                try {
+                    // Try the normal approach
+                    if (DateTimeUtils.isContiguous(partial)) {
+                        long instant = 0L;
+                        for (int i = 0, isize = partial.size(); i < isize; i++) {
+                            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+                        }
+                        instant = add(instant, valueToAdd);
+                        return iChronology.get(partial, instant);
+                    } else {
+                        return super.add(partial, fieldIndex, values, valueToAdd);
+                    }
+                } catch (IllegalFieldValueException e) {
+                    // If it fails, adjust the day first
+                    // Get maximum days for the target month
+                    int targetMonth = month;
+                    int targetDay = day;
+
+                    // Calculate the new month after addition
+                    // For simplicity, we'll use the current year (2000 which is a leap year)
+                    // to get correct month boundaries
+                    long testInstant = iChronology.withZone(DateTimeZone.UTC).setYear(2000, 0, 0).getMillis();
+                    testInstant = iChronology.monthOfYear().set(testInstant, targetMonth + valueToAdd);
+                    int maxDay = iChronology.dayOfMonth().getMaximumValue(testInstant);
+
+                    // If the original day is larger than the target month's max day,
+                    // set it to the last day of the month
+                    if (targetDay > maxDay) {
+                        targetDay = maxDay;
+                    }
+
+                    // Rebuild the values array with adjusted day
+                    int[] newValues = values.clone();
+                    for (int i = 0; i < newValues.length; i++) {
+                        if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
+                            newValues[i] = targetMonth + valueToAdd;
+                        } else if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {
+                            newValues[i] = targetDay;
+                        }
+                    }
+
+                    // For non-contiguous fields or cases where we needed to adjust,
+                    // return the adjusted values
+                    return newValues;
+                }
+            }
+        }
+
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
             return iChronology.get(partial, instant);
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
