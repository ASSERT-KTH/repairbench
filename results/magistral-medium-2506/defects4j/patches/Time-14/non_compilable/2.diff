diff --git a/tmp/b853b9cd-8ca5-47a7-83c7-9aee15e0c0e9_buggy.java b/tmp/2ac1bd0b-4527-4231-80b1-fe9a3a6231bc_fixed.java
index 10616db..a63d993 100644
--- a/tmp/b853b9cd-8ca5-47a7-83c7-9aee15e0c0e9_buggy.java
+++ b/tmp/2ac1bd0b-4527-4231-80b1-fe9a3a6231bc_fixed.java
@@ -1,19 +1,53 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+            // Get the new values from the adjusted instant
+            int[] newValues = iChronology.get(partial, instant);
+
+            // Handle day adjustment for months with fewer days
+            if (partial instanceof MonthDay &&
+                (partial.getFieldType(0) instanceof MonthOfYearFieldType ||
+                 partial.getFieldType(1) instanceof MonthOfYearFieldType)) {
+                int monthIndex = (partial.getFieldType(0) instanceof MonthOfYearFieldType) ? 0 : 1;
+                int dayIndex = (monthIndex == 0) ? 1 : 0;
+
+                int originalMonth = values[monthIndex];
+                int newMonth = newValues[monthIndex];
+                int day = newValues[dayIndex];
+
+                // If moving from February in a leap year to a non-leap year February
+                if (originalMonth == 2 && values[dayIndex] == 29 &&
+                    newMonth == 2 && day == 28) {
+                    newValues[dayIndex] = 29; // Force the day to remain 29
+                    // Check if the year is a leap year
+                    long tempInstant = instant;
+                    int year = iChronology.year().get(tempInstant);
+                    if (!iChronology.year().isLeap(year)) {
+                        // If not a leap year, adjust to last day of February
+                        newValues[dayIndex] = 28;
+                    }
+                } else {
+                    // General case: if day is now invalid for the new month, adjust
+                    int maxDay = iChronology.getDaysInMonthMax(newMonth);
+                    if (day > maxDay) {
+                        newValues[dayIndex] = maxDay;
+                    }
+                }
+            }
+            return newValues;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
