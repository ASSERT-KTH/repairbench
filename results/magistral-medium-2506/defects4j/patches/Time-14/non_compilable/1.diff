diff --git a/tmp/a9015949-4395-4ffe-8e67-a198950314ab_buggy.java b/tmp/eb1c876a-2e68-4401-bbe3-7ff5755c5419_fixed.java
index 10616db..be04a7b 100644
--- a/tmp/a9015949-4395-4ffe-8e67-a198950314ab_buggy.java
+++ b/tmp/eb1c876a-2e68-4401-bbe3-7ff5755c5419_fixed.java
@@ -1,19 +1,49 @@
 //-----------------------------------------------------------------------
 public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
     // overridden as superclass algorithm can't handle
     // 2004-02-29 + 48 months -> 2008-02-29 type dates
     if (valueToAdd == 0) {
         return values;
     }
     // month is largest field and being added to, such as month-day
     if (DateTimeUtils.isContiguous(partial)) {
         long instant = 0L;
         for (int i = 0, isize = partial.size(); i < isize; i++) {
             instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
         }
         instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+
+        // Try getting the new values first with normal behavior
+        int[] newValues = iChronology.get(partial, instant);
+
+        // Handle special cases for month-day when adding months
+        if (partial instanceof MonthDay Bureau) {
+            int oldMonth = values[0];
+            int newMonth = newValues[0];
+            int oldDay = values[1];
+            int newDay = newValues[1];
+
+            // Check if day was adjusted (e.g., Feb 29 -> Feb 28)
+            if (oldDay != newDay) {
+                // Try to get the last day of the target month
+                int lastDayOfNewMonth = iChronology.getDateMidnight(newMonth, 1, 0).month().getMaximumValue();
+                if (oldDay > lastDayOfNewMonth) {
+                    // This is expected adjustment (e.g., Jan 31 -> Feb 28/29)
+                    newValues[1] = lastDayOfNewMonth;
+                } else {
+                    // This might be a leap day issue, try to preserve the original day
+                    // Find a year where the original month/day is valid and use that as base
+                    int baseYear = 2004; // leap year
+                    long baseInstant = iChronology.getDateMidnight(baseYear, oldMonth, oldDay).getMillis();
+                    // Add the months to this base date
+                    long adjustedInstant = add(baseInstant, valueToAdd);
+                    // Get just the month and day
+                    newValues = iChronology.get(partial, adjustedInstant);
+                }
+            }
+        }
+        return newValues;
     } else {
         return super.add(partial, fieldIndex, values, valueToAdd);
     }
 }
\ No newline at end of file
