diff --git a/tmp/07d6ffcb-d5a5-418f-87eb-55a57581fd60_buggy.java b/tmp/512dd2ef-ca2f-4abe-8325-daf3f94b00a6_fixed.java
index 10616db..fdca035 100644
--- a/tmp/07d6ffcb-d5a5-418f-87eb-55a57581fd60_buggy.java
+++ b/tmp/512dd2ef-ca2f-4abe-8325-daf3f94b00a6_fixed.java
@@ -1,19 +1,40 @@
     //-----------------------------------------------------------------------
     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
         // overridden as superclass algorithm can't handle
         // 2004-02-29 + 48 months -> 2008-02-29 type dates
         if (valueToAdd == 0) {
             return values;
         }
         // month is largest field and being added to, such as month-day
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
             }
             instant = add(instant, valueToAdd);
-            return iChronology.get(partial, instant);
+            int[] result = iChronology.get(partial, instant);
+            // Check if the day of month is valid for the result month/year
+            // If not, return the last day of the month
+            if (partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) &&
+                iChronology.getFieldType(DateTimeFieldType.dayOfMonth()).isValid(result[0], result[1]) == false) {
+                // If the day is invalid, set it to the last day of the month
+                int year = 2004; // Starting with a leap year to handle Feb 29
+                int month = result[0];
+                // Find a matching month/year where the day is valid
+                // For Feb 29, we need to ensure we're in a leap year
+                int day = values[1]; // Keep original day value to try to preserve
+                while (!iChronology.dayOfMonth().isValid(year, month, day)) {
+                    if (month == 2 && day == 29) {
+                        // Leap day issue, try to find a valid leap year
+                        int maxDay = iChronology.getChronology().getMaximumValueForFieldType(DateTimeFieldType.dayOfMonth(), month, year);
+                        return new int[] {month, maxDay};
+                    }
+                    // Try to move to a different month or year that might work
+                    year++;
+                }
+            }
+            return result;
         } else {
             return super.add(partial, fieldIndex, values, valueToAdd);
         }
     }
\ No newline at end of file
