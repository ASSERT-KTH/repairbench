diff --git a/tmp/a55fd7cf-d321-4f8b-ac54-c1a76288315c_buggy.java b/tmp/c9708bb2-6db1-4922-bf95-2c7d878c8f35_fixed.java
index 85e6a42..fe01e7c 100644
--- a/tmp/a55fd7cf-d321-4f8b-ac54-c1a76288315c_buggy.java
+++ b/tmp/c9708bb2-6db1-4922-bf95-2c7d878c8f35_fixed.java
@@ -1,50 +1,60 @@
-    /**
-     * Walks through all recorded entries and adds the data available
-     * from the local file header.
-     *
-     * <p>Also records the offsets for the data to read from the
-     * entries.</p>
-     */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
         for (ZipArchiveEntry ze : entries.keySet()) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
+
+            // Read filename bytes from local header
+            byte[] fileNameBytes = new byte[fileNameLen];
+            archive.readFully(fileNameBytes);
+            String fileName = ZipEncodingHelper.UTF8_ZIP_ENCODING.decode(fileNameBytes); // or use default encoding if not UTF-8
+
+            // Store original name to update nameMap if needed
+            String origName = ze.getName();
+
+            // Skip remaining bytes if filename was read successfully
             int lenToSkip = fileNameLen;
-            while (lenToSkip > 0) {
-                int skipped = archive.skipBytes(lenToSkip);
-                if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
-                                               + " local file header");
-                }
-                lenToSkip -= skipped;
+            if (lenToSkip > 0) {
+                archive.skipBytes(lenToSkip);
             }
+
             byte[] localExtraData = new byte[extraFieldLen];
             archive.readFully(localExtraData);
             ze.setExtra(localExtraData);
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
+            // Store the filename from local header
+            String localName = ZipUtil.decodeFileNameFromLocalHeader(fileNameBytes);
+            if (localName != null) {
+                ze.setName(localName);
+            }
+
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
+            // If we changed the name when setting from local header, update map
+            if (!origName.equals(ze.getName())) {
+                nameMap.remove(origName);
+                nameMap.put(ze.getName(), ze);
+            }
         }
     }
\ No newline at end of file
