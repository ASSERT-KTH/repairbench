diff --git a/tmp/68d6041f-107b-4694-a65b-b5d896864992_buggy.java b/tmp/3db948c8-690b-4df4-8557-7c6227cfdd59_fixed.java
index 85e6a42..33df7a8 100644
--- a/tmp/68d6041f-107b-4694-a65b-b5d896864992_buggy.java
+++ b/tmp/3db948c8-690b-4df4-8557-7c6227cfdd59_fixed.java
@@ -1,50 +1,75 @@
     /**
      * Walks through all recorded entries and adds the data available
      * from the local file header.
      *
      * <p>Also records the offsets for the data to read from the
      * entries.</p>
      */
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
         // changing the name of a ZipArchiveEntry is going to change
         // the hashcode - see COMPRESS-164
         // Map needs to be reconstructed in order to keep central
         // directory order
-        for (ZipArchiveEntry ze : entries.keySet()) {
+        for (ZipArchiveEntry ze : new ArrayList<>(entries.keySet())) {
             OffsetEntry offsetEntry = entries.get(ze);
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             byte[] b = new byte[SHORT];
             archive.readFully(b);
             int fileNameLen = ZipShort.getValue(b);
             archive.readFully(b);
             int extraFieldLen = ZipShort.getValue(b);
-            int lenToSkip = fileNameLen;
+
+            // Read the raw file name bytes
+            byte[] fileNameBytes = new byte[fileNameLen];
+            archive.readFully(fileNameBytes);
+
+            // Handle UTF-8 encoding if specified in the extra field
+            if (entriesWithoutUTF8Flag.containsKey(ze)) {
+                NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
+                ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment);
+            } else {
+                // For non-UTF8 entries, use the raw bytes as the name
+                String name = null;
+                try {
+                    name = ZipEncodingHelper.UTF8_ZIP_ENCODING.decode(fileNameBytes);
+                } catch (CharacterCodingException e) {
+                    // If UTF-8 fails, try with default encoding
+                    name = ZipEncodingHelper.UTF8_ZIP_ENCODING.decode(fileNameBytes);
+                }
+                if (!name.equals(ze.getName())) {
+                    String origName = ze.getName();
+                    ze.setName(name);
+                    nameMap.remove(origName);
+                    nameMap.put(name, ze);
+                }
+            }
+
+            // Skip extra fields if present
+            int lenToSkip = extraFieldLen;
             while (lenToSkip > 0) {
                 int skipped = archive.skipBytes(lenToSkip);
                 if (skipped <= 0) {
-                    throw new RuntimeException("failed to skip file name in"
+                    throw new RuntimeException("failed to skip extra field in"
                                                + " local file header");
                 }
                 lenToSkip -= skipped;
             }
-            byte[] localExtraData = new byte[extraFieldLen];
-            archive.readFully(localExtraData);
-            ze.setExtra(localExtraData);
+
             offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
                 String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
                 if (!orig.equals(ze.getName())) {
                     nameMap.remove(orig);
                     nameMap.put(ze.getName(), ze);
                 }
             }
         }
     }
\ No newline at end of file
