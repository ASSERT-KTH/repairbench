diff --git a/tmp/d23b85f1-bf17-40e2-884b-b258f9170975_buggy.java b/tmp/d88dc2cb-9b46-4074-9657-ac5cba9896d3_fixed.java
index 9d69396..da37c57 100644
--- a/tmp/d23b85f1-bf17-40e2-884b-b258f9170975_buggy.java
+++ b/tmp/d88dc2cb-9b46-4074-9657-ac5cba9896d3_fixed.java
@@ -1,46 +1,49 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
-        long storedSum = 0;
-        long unsignedSum = 0;
-        long signedSum = 0;
+    long storedSum = parseChecksum(header);
+    long unsignedSum = calculateSum(header, false);
+    long signedSum = calculateSum(header, true);
 
+    return storedSum == unsignedSum || storedSum == signedSum;
+}
+
+private static long parseChecksum(byte[] header) {
+    long sum = 0;
     int digits = 0;
+    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+        byte b = header[i];
+        if ('0' <= b && b <= '7' && digits < 6) {
+            sum = sum * 8 + (b - '0');
+            digits++;
+        } else if (Character.isWhitespace(b)) {
+            // skip whitespace
+        } else {
+            // If we encounter non-digit characters before we have 6 digits,
+            // treat as if we had a 6-digit number with trailing garbage
+            if (digits == 0) {
+                return 0; // invalid checksum
+            }
+            digits = 6;
+        }
+    }
+    // If we didn't get 6 digits, pad with zeros
+    while (digits < 6) {
+        digits++;
+    }
+    return sum;
+}
+
+private static long calculateSum(byte[] header, boolean useSigned) {
+    long sum = 0;
     for (int i = 0; i < header.length; i++) {
         byte b = header[i];
         if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
+            b = ' '; // treat checksum field as spaces
         }
-                b = ' ';
+        if (useSigned) {
+            sum += b;
+        } else {
+            sum += 0xff & b;
         }
-            unsignedSum += 0xff & b;
-            signedSum += b;
     }
-        return storedSum == unsignedSum || storedSum == signedSum;
+    return sum;
 }
\ No newline at end of file
