diff --git a/tmp/219d18a1-7342-4d95-8dfe-8d09b2a673c4_buggy.java b/tmp/7125cdbb-9122-4e04-9de9-18b69f4e2458_fixed.java
index 9d69396..0226530 100644
--- a/tmp/219d18a1-7342-4d95-8dfe-8d09b2a673c4_buggy.java
+++ b/tmp/7125cdbb-9122-4e04-9de9-18b69f4e2458_fixed.java
@@ -1,46 +1,35 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
     public static boolean verifyCheckSum(byte[] header) {
         long storedSum = 0;
         long unsignedSum = 0;
         long signedSum = 0;
 
-        int digits = 0;
+        // Replace checksum field with spaces for calculation
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
+            header[i] = ' ';
+        }
+
+        // Calculate the checksums
         for (int i = 0; i < header.length; i++) {
             byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
-                if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
-                } else if (digits > 0) {
-                    digits = 6;
-                }
-                b = ' ';
-            }
             unsignedSum += 0xff & b;
             signedSum += b;
         }
-        return storedSum == unsignedSum || storedSum == signedSum;
+
+        // Parse the stored checksum
+        boolean parsing = false;
+        long sum = 0;
+        int digits = 0;
+        for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN && digits < 6; i++) {
+            byte b = header[i];
+            if ('0' <= b && b <= '7') {
+                sum = sum * 8 + b - '0';
+                digits++;
+                parsing = true;
+            } else if (parsing) {
+                // Stop parsing if we encounter a non-digit after starting
+                break;
+            }
+        }
+
+        return sum == unsignedSum || sum == signedSum;
     }
\ No newline at end of file
