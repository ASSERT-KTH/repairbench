diff --git a/tmp/3fceb9e3-9c1c-4280-84d1-7bc540ddc5d5_buggy.java b/tmp/aa3d72e0-b308-4d68-875f-826bacaa522d_fixed.java
index 9d69396..5e85dba 100644
--- a/tmp/3fceb9e3-9c1c-4280-84d1-7bc540ddc5d5_buggy.java
+++ b/tmp/aa3d72e0-b308-4d68-875f-826bacaa522d_fixed.java
@@ -1,46 +1,27 @@
-    /**
-     * Wikipedia <a href="http://en.wikipedia.org/wiki/Tar_(file_format)#File_header">says</a>:
-     * <blockquote>
-     * The checksum is calculated by taking the sum of the unsigned byte values
-     * of the header block with the eight checksum bytes taken to be ascii
-     * spaces (decimal value 32). It is stored as a six digit octal number with
-     * leading zeroes followed by a NUL and then a space. Various
-     * implementations do not adhere to this format. For better compatibility,
-     * ignore leading and trailing whitespace, and get the first six digits. In
-     * addition, some historic tar implementations treated bytes as signed.
-     * Implementations typically calculate the checksum both ways, and treat it
-     * as good if either the signed or unsigned sum matches the included
-     * checksum.
-     * </blockquote>
-     * <p>
-     * The return value of this method should be treated as a best-effort
-     * heuristic rather than an absolute and final truth. The checksum
-     * verification logic may well evolve over time as more special cases
-     * are encountered.
-     *
-     * @param header tar header
-     * @return whether the checksum is reasonably good
-     * @see <a href="https://issues.apache.org/jira/browse/COMPRESS-191">COMPRESS-191</a>
-     * @since 1.5
-     */
 public static boolean verifyCheckSum(byte[] header) {
     long storedSum = 0;
     long unsignedSum = 0;
     long signedSum = 0;
 
+    // First calculate the stored checksum
     int digits = 0;
-        for (int i = 0; i < header.length; i++) {
+    for (int i = CHKSUM_OFFSET; i < CHKSUM_OFFSET + CHKSUMLEN; i++) {
         byte b = header[i];
-            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
         if ('0' <= b && b <= '7' && digits++ < 6) {
-                    storedSum = storedSum * 8 + b - '0';
+            storedSum = storedSum * 8 + (b - '0');
         } else if (digits > 0) {
-                    digits = 6;
+            break; // stop counting digits if non-digits are encountered
         }
-                b = ' ';
     }
+
+    // Calculate checksum with the checksum field assumed to be spaces
+    byte[] copy = Arrays.copyOf(header, header.length);
+    Arrays.fill(copy, CHKSUM_OFFSET, CHKSUM_OFFSET + CHKSUMLEN, (byte) ' ');
+    for (byte b : copy) {
         unsignedSum += 0xff & b;
         signedSum += b;
     }
+
+    // Compare with both signed and unsigned sums
     return storedSum == unsignedSum || storedSum == signedSum;
 }
\ No newline at end of file
