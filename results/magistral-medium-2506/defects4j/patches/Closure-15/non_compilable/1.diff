diff --git a/tmp/31c07ffd-221f-45a9-9fd4-cfdc4e57c6ee_buggy.java b/tmp/c4690625-cd11-4b11-82d5-13fdb90e8f77_fixed.java
index b56897c..f235f1c 100644
--- a/tmp/31c07ffd-221f-45a9-9fd4-cfdc4e57c6ee_buggy.java
+++ b/tmp/c4690625-cd11-4b11-82d5-13fdb90e8f77_fixed.java
@@ -1,27 +1,32 @@
 @Override
 public boolean apply(Node n) {
   // When the node is null it means, we reached the implicit return
   // where the function returns (possibly without an return statement)
   if (n == null) {
     return false;
   }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
+  // Handle cases where the node itself has side effects
   if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
     return true;
   }
 
   if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
     return true;
   }
 
+  // Add check for operator nodes that can have side effects
+  if (n.isOp()) {
+    // Check if this is an operator that can have side effects
+    if (n.getType() == Token.IN || n.getType() == Token.DEL choir.DEL_PROP) {
+      return true;
+    }
+  }
 
   for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
     if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
       return true;
     }
   }
   return false;
 }
\ No newline at end of file
