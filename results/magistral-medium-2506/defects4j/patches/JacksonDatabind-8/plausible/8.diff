diff --git a/tmp/5adaecd2-b645-4f90-bb9e-2bd4cc3722af_buggy.java b/tmp/ab27e120-595b-429c-a9a9-09287b29dc83_fixed.java
index c9da1b7..7e1d274 100644
--- a/tmp/5adaecd2-b645-4f90-bb9e-2bd4cc3722af_buggy.java
+++ b/tmp/ab27e120-595b-429c-a9a9-09287b29dc83_fixed.java
@@ -1,33 +1,39 @@
 protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
 {
     final int mask = (1 << typeIndex);
     _hasNonDefaultCreator = true;
     AnnotatedWithParams oldOne = _creators[typeIndex];
     // already had an explicitly marked one?
     if (oldOne != null) {
-
-            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
-                // but skip, if new one not annotated
-                if (!explicit) {
-                    return;
-                }
-                // both explicit: verify
-                // otherwise only verify if neither explicitly annotated.
-            }
-
         // one more thing: ok to override in sub-class
         if (oldOne.getClass() == newOne.getClass()) {
             // [databind#667]: avoid one particular class of bogus problems
-
+            // If both are the same class and neither is explicit, prefer the new one
+            if (!explicit && ((_explicitCreators & mask) == 0)) {
+                // overwrite the old non-explicit one
+            } else {
                 throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                         +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
-                // otherwise, which one to choose?
-                    // new type more generic, use old
-                // new type more specific, use it
+            }
+        } else {
+            if ((_explicitCreators & mask) != 0) {
+                if (!explicit) {
+                    return;
+                }
+                // both explicit: verify
+            }
+            // Check for more specific type (newOne) vs oldOne's type
+            // If newOne is subclass of oldOne's declaring class, prefer newOne
+            if (newOne.getDeclaringClass().isAssignableFrom(oldOne.getDeclaringClass())) {
+                // newOne is subclass, prefer it
+            } else if (oldOne.getDeclaringClass().isAssignableFrom(newOne.getDeclaringClass())) {
+                // oldOne is subclass, keep it
+                return;
+            }
         }
     }
     if (explicit) {
         _explicitCreators |= mask;
     }
     _creators[typeIndex] = _fixAccess(newOne);
 }
\ No newline at end of file
