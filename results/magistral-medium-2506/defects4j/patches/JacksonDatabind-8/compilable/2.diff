diff --git a/tmp/5e38bb64-144d-40f7-b048-c6ced362781b_buggy.java b/tmp/dd8ceecb-3b69-485a-b293-d890fd0e1f55_fixed.java
index c9da1b7..2414ed5 100644
--- a/tmp/5e38bb64-144d-40f7-b048-c6ced362781b_buggy.java
+++ b/tmp/dd8ceecb-3b69-485a-b293-d890fd0e1f55_fixed.java
@@ -1,33 +1,34 @@
     protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
         AnnotatedWithParams oldOne = _creators[typeIndex];
         // already had an explicitly marked one?
         if (oldOne != null) {
-
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
                     return;
                 }
                 // both explicit: verify
                 // otherwise only verify if neither explicitly annotated.
             }
 
             // one more thing: ok to override in sub-class
             if (oldOne.getClass() == newOne.getClass()) {
                 // [databind#667]: avoid one particular class of bogus problems
-
+                // Only throw if both are explicit or neither is explicit
+                if ((!explicit && (_explicitCreators & mask) == 0) || explicit) {
                     throw new IllegalArgumentException("Conflicting "+TYPE_DESCS[typeIndex]
                             +" creators: already had explicitly marked "+oldOne+", encountered "+newOne);
+                }
                 // otherwise, which one to choose?
                 // new type more generic, use old
                 // new type more specific, use it
             }
         }
         if (explicit) {
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
     }
\ No newline at end of file
