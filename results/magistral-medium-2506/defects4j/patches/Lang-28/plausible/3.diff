diff --git a/tmp/3e257a64-bfd2-4fbc-a276-0f7e296aa303_buggy.java b/tmp/f23fcabc-824f-486a-b328-092a4bdc093a_fixed.java
index 4bbd561..43e7e98 100644
--- a/tmp/3e257a64-bfd2-4fbc-a276-0f7e296aa303_buggy.java
+++ b/tmp/f23fcabc-824f-486a-b328-092a4bdc093a_fixed.java
@@ -1,37 +1,65 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        try {
             if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
                 int start = index + 2;
                 boolean isHex = false;
 
+                // Check bounds before accessing characters
+                if (start >= input.length()) {
+                    return 0;
+                }
+
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
+
+                    // Check bounds again after adjusting start
+                    if (start >= input.length()) {
+                        return 0;
+                    }
                 }
 
                 int end = start;
-            while(input.charAt(end) != ';') {
+                while(end < input.length() && input.charAt(end) != ';') {
                     end++;
                 }
 
+                // If we didn't find a semicolon or it's right after #
+                if (end >= input.length() || end == start - (isHex ? 1 : 0)) {
+                    return 0;
+                }
+
                 int entityValue;
                 try {
+                    String numStr = input.subSequence(start, end).toString();
                     if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                        entityValue = Integer.parseInt(numStr, 16);
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                        entityValue = Integer.parseInt(numStr, 10);
                     }
                 } catch(NumberFormatException nfe) {
                     return 0;
                 }
 
+                // Handle surrogate pairs for supplementary characters
+                if (entityValue <= 0xFFFF) {
                     out.write(entityValue);
+                } else {
+                    // Convert to Unicode surrogate pair for supplementary characters
+                    char[] chars = Character.toChars(entityValue);
+                    out.write(chars);
+                }
+
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        } catch(IndexOutOfBoundsException e) {
+            // If we get any index out of bounds, return 0 (no translation)
+            return 0;
+        }
         return 0;
     }
\ No newline at end of file
