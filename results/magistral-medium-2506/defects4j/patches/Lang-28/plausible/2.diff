diff --git a/tmp/cad88f44-5001-448a-8a2e-486c006e4204_buggy.java b/tmp/7fccd5d8-a505-4e7d-9131-d6f7d39d4883_fixed.java
index 4bbd561..76d4565 100644
--- a/tmp/cad88f44-5001-448a-8a2e-486c006e4204_buggy.java
+++ b/tmp/7fccd5d8-a505-4e7d-9131-d6f7d39d4883_fixed.java
@@ -1,37 +1,57 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+    // Check bounds first
+    if(index < 0 || index >= input.length()) {
+        return 0;
+    }
+
+    if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        // Check bounds for firstChar
+        if(start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if(firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
+        // Check bounds for end
+        if(start >= input.length()) {
+            return 0;
+        }
+
         int end = start;
-            while(input.charAt(end) != ';') {
+        while(end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        // If we didn't find a closing ';', return 0
+        if(end >= input.length()) {
+            return 0;
+        }
+
         int entityValue;
         try {
             if(isHex) {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
             } else {
                 entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
             }
         } catch(NumberFormatException nfe) {
             return 0;
         }
 
-                out.write(entityValue);
+        // Write the character directly to handle supplementary characters
+        out.write(Character.toChars(entityValue));
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
