diff --git a/tmp/e0ef95af-f49d-4435-9932-b4c64b40684c_buggy.java b/tmp/2c12e23c-0198-4744-9a3a-d14296f6d05e_fixed.java
index 4bbd561..03b34dc 100644
--- a/tmp/e0ef95af-f49d-4435-9932-b4c64b40684c_buggy.java
+++ b/tmp/2c12e23c-0198-4744-9a3a-d14296f6d05e_fixed.java
@@ -1,37 +1,60 @@
 /**
  * {@inheritDoc}
  */
 @Override
 public int translate(CharSequence input, int index, Writer out) throws IOException {
     // TODO: Protect from ArrayIndexOutOfBounds
+    if (index < 0 || index + 1 >= input.length()) {
+        return 0;
+    }
+
     if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
         int start = index + 2;
         boolean isHex = false;
 
+        if (start >= input.length()) {
+            return 0;
+        }
+
         char firstChar = input.charAt(start);
         if (firstChar == 'x' || firstChar == 'X') {
             start++;
             isHex = true;
         }
 
         int end = start;
-            while(input.charAt(end) != ';') {
+        while (end < input.length() && input.charAt(end) != ';') {
             end++;
         }
 
+        if (end >= input.length()) {
+            return 0;
+        }
+
         int entityValue;
         try {
+            String numStr = input.subSequence(start, end).toString();
             if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                entityValue = Integer.parseInt(numStr, 16);
             } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                entityValue = Integer.parseInt(numStr, 10);
             }
         } catch (NumberFormatException nfe) {
             return 0;
         }
 
+        // Handle supplementary characters (outside BMP)
+        if (entityValue > 0xFFFF) {
+            entityValue -= 0x10000;
+            char highSurrogate = (char) ((entityValue >> 10) + 0xD800);
+            char lowSurrogate = (char) ((entityValue & 0x3FF) + 0xDC00);
+            out.write(highSurrogate);
+            out.write(lowSurrogate);
+        } else {
             out.write(entityValue);
+        }
+
         return 2 + (end - start) + (isHex ? 1 : 0) + 1;
     }
     return 0;
 }
\ No newline at end of file
