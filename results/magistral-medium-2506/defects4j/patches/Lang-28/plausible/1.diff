diff --git a/tmp/ec37b8e1-8959-4454-ada5-f4b30516b805_buggy.java b/tmp/13e7ff20-383a-4ecf-9be5-85ad586bf388_fixed.java
index 4bbd561..31e5026 100644
--- a/tmp/ec37b8e1-8959-4454-ada5-f4b30516b805_buggy.java
+++ b/tmp/13e7ff20-383a-4ecf-9be5-85ad586bf388_fixed.java
@@ -1,37 +1,57 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        try {
+            if(input.charAt(index) == '&' && index + 1 < input.length() && input.charAt(index + 1) == '#') {
                 int start = index + 2;
                 boolean isHex = false;
 
+                if(start >= input.length()) {
+                    return 0;
+                }
+
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
 
                 int end = start;
-            while(input.charAt(end) != ';') {
+                while(end < input.length() && input.charAt(end) != ';') {
                     end++;
                 }
 
+                if(end >= input.length() || input.charAt(end) != ';') {
+                    return 0;
+                }
+
                 int entityValue;
                 try {
+                    String numStr = input.subSequence(start, end).toString();
                     if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                        entityValue = Integer.parseInt(numStr, 16);
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                        entityValue = Integer.parseInt(numStr, 10);
                     }
 
+                    // Handle characters outside BMP
+                    if (entityValue > 0xFFFF) {
+                        // Write as surrogate pair
+                        char[] surrogates = Character.toChars(entityValue);
+                        out.write(surrogates);
+                    } else {
                         out.write(entityValue);
+                    }
+                } catch(NumberFormatException nfe) {
+                    return 0;
+                }
+
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        } catch(IndexOutOfBoundsException e) {
+            return 0;
+        }
         return 0;
     }
\ No newline at end of file
