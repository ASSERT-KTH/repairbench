diff --git a/tmp/0f4ee570-66f3-4361-92eb-7f293caa2fe1_buggy.java b/tmp/869ff826-2a9c-4f64-8cb1-1b81de3774e2_fixed.java
index 4bbd561..333d296 100644
--- a/tmp/0f4ee570-66f3-4361-92eb-7f293caa2fe1_buggy.java
+++ b/tmp/869ff826-2a9c-4f64-8cb1-1b81de3774e2_fixed.java
@@ -1,37 +1,64 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        try {
+            if(index + 1 < input.length() && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
                 int start = index + 2;
                 boolean isHex = false;
 
+                if(start >= input.length()) {
+                    return 0;
+                }
+
                 char firstChar = input.charAt(start);
                 if(firstChar == 'x' || firstChar == 'X') {
                     start++;
                     isHex = true;
                 }
 
                 int end = start;
-            while(input.charAt(end) != ';') {
+                while(end < input.length() && input.charAt(end) != ';') {
                     end++;
+                    if(end >= input.length()) {
+                        return 0;
+                    }
+                }
+
+                if(end >= input.length()) {
+                    return 0;
+                }
+
+                String entityString = input.subSequence(start, end).toString();
+                if(entityString.isEmpty()) {
+                    return 0;
                 }
 
                 int entityValue;
                 try {
                     if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                        entityValue = Integer.parseInt(entityString, 16);
                     } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
+                        entityValue = Integer.parseInt(entityString, 10);
                     }
                 } catch(NumberFormatException nfe) {
                     return 0;
                 }
 
+                // Handle supplementary characters (Unicode code points > 0xFFFF)
+                if(entityValue > 0xFFFF) {
+                    // Calculate surrogate pair
+                    char[] surrogates = Character.toChars(entityValue);
+                    out.write(surrogates[0]);
+                    out.write(surrogates[1]);
+                } else {
                     out.write(entityValue);
+                }
                 return 2 + (end - start) + (isHex ? 1 : 0) + 1;
             }
+        } catch(IndexOutOfBoundsException e) {
+            return 0;
+        }
         return 0;
     }
\ No newline at end of file
