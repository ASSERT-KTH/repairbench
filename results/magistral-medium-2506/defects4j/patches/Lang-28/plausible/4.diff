diff --git a/tmp/974387aa-366c-4f23-b0d6-61d442192973_buggy.java b/tmp/d5d13023-4ae1-46b1-b22b-add4ef7b40c3_fixed.java
index 4bbd561..ad00c8e 100644
--- a/tmp/974387aa-366c-4f23-b0d6-61d442192973_buggy.java
+++ b/tmp/d5d13023-4ae1-46b1-b22b-add4ef7b40c3_fixed.java
@@ -1,37 +1,56 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
         // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        if(index < input.length() - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if(start >= input.length()) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
             int end = start;
-            while(input.charAt(end) != ';') {
+            while(end < input.length() && input.charAt(end) != ';') {
                 end++;
             }
 
+            if(end >= input.length() || input.charAt(end) != ';') {
+                return 0;
+            }
+
+            String entityStr = input.subSequence(start, end).toString();
+            if(entityStr.isEmpty()) {
+                return 0;
+            }
+
             int entityValue;
             try {
                 if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
 
+                if (entityValue > Character.MAX_VALUE) {
+                    // Handle supplementary characters
+                    char[] chars = Character.toChars(entityValue);
+                    out.write(chars);
+                } else {
                     out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+                }
+                return end - index + 1;
+            } catch(NumberFormatException nfe) {
+                return 0;
+            }
         }
         return 0;
     }
\ No newline at end of file
