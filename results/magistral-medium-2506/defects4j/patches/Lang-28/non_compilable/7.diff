diff --git a/tmp/850d8864-9940-48fc-882b-1e8b0a5c7197_buggy.java b/tmp/4f9624b7-3864-4e5c-be76-e1f9b6c8154c_fixed.java
index 4bbd561..c3feb16 100644
--- a/tmp/850d8864-9940-48fc-882b-1e8b0a5c7197_buggy.java
+++ b/tmp/4f9624b7-3864-4e5c-be76-e1f9b6c8154c_fixed.java
@@ -1,37 +1,62 @@
     /**
      * {@inheritDoc}
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
+        // Protect from ArrayIndexOutOfBounds and check bounds properly
+        int length = input.length();
+        if (index + 1 >= length) {
+            return 0;
+        }
+
         if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
+            if (start >= length) {
+                return 0;
+            }
+
             char firstChar = input.charAt(start);
             if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
             }
 
+            // Find the semicolon
             int end = start;
-            while(input.charAt(end) != ';') {
+            while (end < length && input.charAt(end) != ';') {
                 end++;
             }
 
-            int entityValue;
+            // If no semicolon found or invalid length
+            if (end >= length || end <= start) {
+                return 0;
+            }
+
             try {
+                String entityStr = input.subSequence(start, end).toString();
+                int entityValue;
                 if (isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
+                    entityValue = Integer.parseInt(entityStr, 16);
                 } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
+                    entityValue = Integer.parseInt(entityStr, 10);
                 }
 
+                // Handle supplementary characters (outside BMP)
+                if (entityValue > 0xFFFF) {
+                    int[] codePoints = Character.toCodePoints(entityValue);
+                    for (int codePoint : codePoints) {
+                        out.write(codePoint);
+                    }
+                } else {
                     out.write(entityValue);
+                }
+            } catch (NumberFormatException nfe) {
+                return 0;
+            }
+
             return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
\ No newline at end of file
