diff --git a/tmp/f66f1ac2-aa08-4c40-a426-737bc18e5a2d_buggy.java b/tmp/55592e2c-1e64-4192-b76c-371f7ca4914f_fixed.java
index 139579d..cb85160 100644
--- a/tmp/f66f1ac2-aa08-4c40-a426-737bc18e5a2d_buggy.java
+++ b/tmp/55592e2c-1e64-4192-b76c-371f7ca4914f_fixed.java
@@ -1,43 +1,67 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        if (classAttr == null) return false;
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
+        // also check the last entry even if lengths differ (e.g., "Foo" vs "FOOBAR")
+        if (inClass) {
+            String lastClass = classAttr.substring(start);
+            if (lastClass.length() >= wantLen) { // only check if the remaining is long enough
+                // Check if this substring starts with the wanted classname (case insensitive)
+                boolean matches = true;
+                if (lastClass.length() >= wantLen) {
+                    for (int j = 0; j < wantLen; j++) {
+                        if (Character.toLowerCase(lastClass.charAt(j)) != Character.toLowerCase(className.charAt(j))) {
+                            matches = false;
+                            break;
+                        }
+                    }
+                    if (matches) {
+                        // If the matching part is exactly the wanted length, or followed by whitespace/class-end
+                        if (lastClass.length() == wantLen ||
+                            (len > start + wantLen && Character.isWhitespace(classAttr.charAt(start + wantLen)))) {
+                            return true;
+                        }
+                    }
+                }
+            }
+        }
 
         return false;
     }
\ No newline at end of file
