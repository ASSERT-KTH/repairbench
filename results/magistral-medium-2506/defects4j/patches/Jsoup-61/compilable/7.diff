diff --git a/tmp/2658f521-c9cc-41b6-9fe9-52f0dc171ce9_buggy.java b/tmp/f1820f1b-7856-47a9-a25b-35523a2fb9ed_fixed.java
index 139579d..0ec018e 100644
--- a/tmp/2658f521-c9cc-41b6-9fe9-52f0dc171ce9_buggy.java
+++ b/tmp/f1820f1b-7856-47a9-a25b-35523a2fb9ed_fixed.java
@@ -1,43 +1,55 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        if (classAttr == null) {
+            return false;
+        }
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        if (len == 0 || wantLen == 0) {
             return false;
         }
 
-        // if both lengths are equal, only need compare the className with the attribute
+        // if both lengths are equal, only need compare the className with the attribute (trimmed)
         if (len == wantLen) {
-            return className.equalsIgnoreCase(classAttr);
+            String trimmed = classAttr.trim();
+            return trimmed.equalsIgnoreCase(className);
         }
 
-        // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
+        // otherwise, scan for whitespace and compare regions
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
+        if (inClass) {
+            int lastLength = len - start;
+            if (lastLength == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                return true;
+            }
+        }
+
+        // check for case where the entire string is a single class with no whitespace
+        if (len == wantLen) {
+            return classAttr.equalsIgnoreCase(className);
         }
 
         return false;
     }
\ No newline at end of file
