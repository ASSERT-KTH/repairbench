diff --git a/tmp/9d9b8dcc-366b-4ca5-bc57-5b61aa28ebee_buggy.java b/tmp/42df93dd-7fd9-41b8-9709-28bd2f7564e2_fixed.java
index 139579d..da3536b 100644
--- a/tmp/9d9b8dcc-366b-4ca5-bc57-5b61aa28ebee_buggy.java
+++ b/tmp/42df93dd-7fd9-41b8-9709-28bd2f7564e2_fixed.java
@@ -1,43 +1,73 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        if (classAttr == null) {
+            return false;
+        }
         final int len = classAttr.length();
         final int wantLen = className.length();
 
         if (len == 0 || len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
-        if (inClass && len - start == wantLen) {
-            return classAttr.regionMatches(true, start, className, 0, wantLen);
+        if (inClass && len - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+            return true;
+        }
+
+        // If we haven't found an exact length match, we need to check all possible substrings
+        // This handles cases where class names are part of longer strings (like when separated by whitespace)
+        inClass = false;
+        start = 0;
+        for (int i = 0; i < len; i++) {
+            if (Character.isWhitespace(classAttr.charAt(i)) || i == len - 1) {
+                if (inClass) {
+                    int end = (i == len - 1) ? i + 1 : i;
+                    int currentLen = end - start;
+                    if (currentLen == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                        return true;
+                    }
+                    inClass = false;
+                }
+            } else {
+                if (!inClass) {
+                    inClass = true;
+                    start = i;
+                }
+            }
+        }
+
+        // Also check the last entry if we didn't already (when there's no trailing whitespace)
+        if (inClass && len - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+            return true;
         }
 
         return false;
     }
\ No newline at end of file
