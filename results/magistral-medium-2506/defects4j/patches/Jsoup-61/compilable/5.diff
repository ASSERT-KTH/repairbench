diff --git a/tmp/50bc5d86-1a0d-439d-93c9-a0f3cf21bfbe_buggy.java b/tmp/f0283997-bbc7-4d90-8cd1-778f03e248f7_fixed.java
index 139579d..bb398b9 100644
--- a/tmp/50bc5d86-1a0d-439d-93c9-a0f3cf21bfbe_buggy.java
+++ b/tmp/f0283997-bbc7-4d90-8cd1-778f03e248f7_fixed.java
@@ -1,43 +1,70 @@
     // performance sensitive
     public boolean hasClass(String className) {
         final String classAttr = attributes.get("class");
+        if (classAttr == null || classAttr.isEmpty()) {
+            return false;
+        }
         final int len = classAttr.length();
         final int wantLen = className.length();
 
-        if (len == 0 || len < wantLen) {
+        if (len < wantLen) {
             return false;
         }
 
         // if both lengths are equal, only need compare the className with the attribute
         if (len == wantLen) {
             return className.equalsIgnoreCase(classAttr);
         }
 
         // otherwise, scan for whitespace and compare regions (with no string or arraylist allocations)
         boolean inClass = false;
         int start = 0;
         for (int i = 0; i < len; i++) {
             if (Character.isWhitespace(classAttr.charAt(i))) {
                 if (inClass) {
                     // white space ends a class name, compare it with the requested one, ignore case
                     if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
                         return true;
                     }
                     inClass = false;
                 }
             } else {
                 if (!inClass) {
                     // we're in a class name : keep the start of the substring
                     inClass = true;
                     start = i;
                 }
             }
         }
 
         // check the last entry
         if (inClass && len - start == wantLen) {
             return classAttr.regionMatches(true, start, className, 0, wantLen);
         }
 
+        // also need to check cases where the class attribute has extra characters beyond the wanted length
+        // and we haven't found a match yet (for cases where the class name is a substring of another class name)
+        // Reset and scan again, looking for exact match between whitespace or end of string
+        inClass = false;
+        start = 0;
+        for (int i = 0; i <= len; i++) { // note <= to capture end of string
+            boolean atEnd = i == len;
+            boolean whitespace = !atEnd && Character.isWhitespace(classAttr.charAt(i));
+
+            if (whitespace || atEnd) {
+                if (inClass) {
+                    if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {
+                        return true;
+                    }
+                    inClass = false;
+                }
+            } else {
+                if (!inClass) {
+                    inClass = true;
+                    start = i;
+                }
+            }
+        }
+
         return false;
     }
\ No newline at end of file
