diff --git a/tmp/54f742da-40dd-4308-aa52-354a033e3cee_buggy.java b/tmp/0e8f05c7-253d-4d0a-8f27-0421fd4c132d_fixed.java
index 40f74f7..3587318 100644
--- a/tmp/54f742da-40dd-4308-aa52-354a033e3cee_buggy.java
+++ b/tmp/0e8f05c7-253d-4d0a-8f27-0421fd4c132d_fixed.java
@@ -1,50 +1,58 @@
     public static boolean testNode(Node node, NodeTest test) {
         if (test == null) {
             return true;
         }
         if (test instanceof NodeNameTest) {
             if (node.getNodeType() != Node.ELEMENT_NODE) {
                 return false;
             }
 
             NodeNameTest nodeNameTest = (NodeNameTest) test;
             QName testName = nodeNameTest.getNodeName();
             String namespaceURI = nodeNameTest.getNamespaceURI();
             boolean wildcard = nodeNameTest.isWildcard();
             String testPrefix = testName.getPrefix();
             if (wildcard && testPrefix == null) {
                 return true;
             }
-            if (wildcard
-                || testName.getName()
-                        .equals(DOMNodePointer.getLocalName(node))) {
+            String testLocalName = testName.getName();
+            String nodeLocalName = DOMNodePointer.getLocalName(node);
+
+            // Handle namespace comparison properly
             String nodeNS = DOMNodePointer.getNamespaceURI(node);
+
+            if (wildcard) {
+                // For wildcard tests, only need to check namespace if specified
                 return equalStrings(namespaceURI, nodeNS);
+            } else {
+                // For non-wildcard tests, both local name and namespace must match
+                return testLocalName.equals(nodeLocalName) &&
+                       equalStrings(namespaceURI, nodeNS);
             }
-            return false;
         }
         if (test instanceof NodeTypeTest) {
             int nodeType = node.getNodeType();
             switch (((NodeTypeTest) test).getNodeType()) {
                 case Compiler.NODE_TYPE_NODE :
                     return nodeType == Node.ELEMENT_NODE
                             || nodeType == Node.DOCUMENT_NODE;
                 case Compiler.NODE_TYPE_TEXT :
                     return nodeType == Node.CDATA_SECTION_NODE
                         || nodeType == Node.TEXT_NODE;
                 case Compiler.NODE_TYPE_COMMENT :
                     return nodeType == Node.COMMENT_NODE;
                 case Compiler.NODE_TYPE_PI :
                     return nodeType == Node.PROCESSING_INSTRUCTION_NODE;
             }
             return false;
         }
         if (test instanceof ProcessingInstructionTest) {
             if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
                 String testPI = ((ProcessingInstructionTest) test).getTarget();
                 String nodePI = ((ProcessingInstruction) node).getTarget();
                 return testPI.equals(nodePI);
             }
+            return false; // Added missing return
         }
         return false;
     }
\ No newline at end of file
