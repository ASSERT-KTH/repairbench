diff --git a/tmp/566bed8c-9227-4ba2-bb30-75e4a0336f4a_buggy.java b/tmp/aad1b099-5340-4b7a-80d9-0c879da92a52_fixed.java
index e1fc51f..8db9c2f 100644
--- a/tmp/566bed8c-9227-4ba2-bb30-75e4a0336f4a_buggy.java
+++ b/tmp/aad1b099-5340-4b7a-80d9-0c879da92a52_fixed.java
@@ -1,9 +1,38 @@
 public boolean hasSameMethod(Invocation candidate) {
     //not using method.equals() for 1 good reason:
     //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
     Method m1 = invocation.getMethod();
     Method m2 = candidate.getMethod();
 
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+    // Compare declarating classes first to handle generic forwarding cases
+    if (!m1.getDeclaringClass().equals(m2.getDeclaringClass())) {
+        // Check if one is a bridge method (common with generics)
+        boolean m1IsBridge = m1.isBridge();
+        boolean m2IsBridge = m2.isBridge();
+
+        if (m1IsBridge != m2IsBridge) {
+            // If one is bridge and other isn't, they're different methods
+            return false;
+        }
+
+        // If both are bridge methods, check their original methods
+        if (m1IsBridge) {
+            try {
+                Method m1Original = m1.getDeclaringClass().getSuperclass().getDeclaredMethod(
+                    m1.getName(), m1.getParameterTypes());
+                Method m2Original = m2.getDeclaringClass().getSuperclass().getDeclaredMethod(
+                    m2.getName(), m2.getParameterTypes());
+                return m1Original.equals(m2Original);
+            } catch (NoSuchMethodException e) {
+                return false;
+            }
+        }
+    }
+
+    // Compare method names, parameter types, and return types
+    boolean parametersMatch = Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());
+    boolean returnTypesMatch = m1.getReturnType().equals(m2.getReturnType());
+    boolean namesMatch = m1.getName().equals(m2.getName());
+
+    return parametersMatch && returnTypesMatch && namesMatch;
 }
\ No newline at end of file
