diff --git a/tmp/c43d7827-e4a2-49cc-a0cb-2cbead601f76_buggy.java b/tmp/cd2d9ee4-adaf-4dac-b02f-6bfa71b0f66e_fixed.java
index b05b859..ed80623 100644
--- a/tmp/c43d7827-e4a2-49cc-a0cb-2cbead601f76_buggy.java
+++ b/tmp/cd2d9ee4-adaf-4dac-b02f-6bfa71b0f66e_fixed.java
@@ -1,61 +1,60 @@
   /**
    * Initialize the compiler options. Only necessary if you're not doing
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
     } else if (!options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
-    // All passes must run the variable check. This synthesizes
-    // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // Only add the DiagnosticGroupWarningsGuard if we're not checking symbols
+    // AND there's no warningsGuard OR the warningsGuard doesn't disable CHECK_VARIABLES
+    if (!options.checkSymbols) {
+      // Don't suppress the warning if it's explicitly enabled via jscomp_error
+      boolean suppress = (warningsGuard == null ||
+                         !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES));
+      if (suppress) {
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
       }
+    }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
