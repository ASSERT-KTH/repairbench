diff --git a/tmp/095d0bc5-e313-4daa-a81d-5be5680f7f4f_buggy.java b/tmp/4bb3e7c8-d08f-45c7-9194-a516301a5c8f_fixed.java
index b05b859..6ebee2f 100644
--- a/tmp/095d0bc5-e313-4daa-a81d-5be5680f7f4f_buggy.java
+++ b/tmp/4bb3e7c8-d08f-45c7-9194-a516301a5c8f_fixed.java
@@ -1,61 +1,58 @@
-  /**
-   * Initialize the compiler options. Only necessary if you're not doing
-   * a normal compile() job.
-   */
   public void initOptions(CompilerOptions options) {
     this.options = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
             new LoggerErrorManager(createMessageFormatter(), logger));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
         printer.setSummaryDetailLevel(options.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
 
     // DiagnosticGroups override the plain checkTypes option.
     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = true;
     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
       options.checkTypes = false;
-    } else if (!options.checkTypes) {
+    } else if (options.checkTypes) {
       // If DiagnosticGroups did not override the plain checkTypes
       // option, and checkTypes is enabled, then turn off the
       // parser type warnings.
       options.setWarningLevel(
           DiagnosticGroup.forType(
               RhinoErrorReporter.TYPE_PARSE_ERROR),
           CheckLevel.OFF);
     }
 
     if (options.checkGlobalThisLevel.isOn()) {
       options.setWarningLevel(
           DiagnosticGroups.GLOBAL_THIS,
           options.checkGlobalThisLevel);
     }
 
     // Initialize the warnings guard.
     List<WarningsGuard> guards = Lists.newArrayList();
     guards.add(
         new SuppressDocWarningsGuard(
             getDiagnosticGroups().getRegisteredGroups()));
     guards.add(options.getWarningsGuard());
 
-
     // All passes must run the variable check. This synthesizes
     // variables later so that the compiler doesn't crash. It also
-    // checks the externs file for validity. If you don't want to warn
-    // about missing variable declarations, we shut that specific
-    // error off.
-    if (!options.checkSymbols &&
-        (warningsGuard == null || !warningsGuard.disables(
-            DiagnosticGroups.CHECK_VARIABLES))) {
+    // checks the externs file for validity.
+    // The original condition was incorrect - we should check if we need to disable
+    // the warning even if checkSymbols is true, because warningsGuard might disable it
+    if (warningsGuard == null || !warningsGuard.disables(
+        DiagnosticGroups.CHECK_VARIABLES)) {
+      // Only disable if checkSymbols is false OR if warningsGuard doesn't disable it
+      if (!options.checkSymbols) {
         guards.add(new DiagnosticGroupWarningsGuard(
             DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));
       }
+    }
 
     this.warningsGuard = new ComposeWarningsGuard(guards);
   }
\ No newline at end of file
