diff --git a/tmp/0f0458ee-028d-4de9-9ff7-335b45e8e677_buggy.java b/tmp/33b2e246-4899-4869-8ed3-c4850bff7cb9_fixed.java
index 42c5923..d6a789e 100644
--- a/tmp/0f0458ee-028d-4de9-9ff7-335b45e8e677_buggy.java
+++ b/tmp/33b2e246-4899-4869-8ed3-c4850bff7cb9_fixed.java
@@ -1,89 +1,133 @@
-    /**
-     * Parses a string to produce a {@link Fraction} object.  This method
-     * expects the string to be formatted as a proper fraction.
-     * <p>
-     * Minus signs are only allowed in the whole number part - i.e.,
-     * "-3 1/2" is legitimate and denotes -7/2, but "-3 -1/2" is invalid and
-     * will result in a <code>ParseException</code>.
-     * 
-     * @param source the string to parse
-     * @param pos input/ouput parsing parameter.
-     * @return the parsed {@link Fraction} object.
-     */
     public Fraction parse(String source, ParsePosition pos) {
         // try to parse improper fraction
         Fraction ret = super.parse(source, pos);
         if (ret != null) {
             return ret;
         }
 
         int initialIndex = pos.getIndex();
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse whole
         Number whole = getWholeFormat().parse(source, pos);
         if (whole == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
         // parse numerator
         Number num = getNumeratorFormat().parse(source, pos);
         if (num == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs should be leading, invalid expression
+        // Check for minus sign in numerator (invalid)
+        int numStartIndex = initialIndex + whole.toString().length();
+        while (numStartIndex < source.length() && Character.isWhitespace(source.charAt(numStartIndex))) {
+            numStartIndex++;
+        }
+        if (source.charAt(numStartIndex) == '-') {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(numStartIndex);
+            return null;
+        }
 
         // parse '/'
         int startIndex = pos.getIndex();
         char c = parseNextCharacter(source, pos);
         switch (c) {
         case 0 :
             // no '/'
             // return num as a fraction
             return new Fraction(num.intValue(), 1);
         case '/' :
             // found '/', continue parsing denominator
             break;
         default :
             // invalid '/'
             // set index back to initial, error index should be the last
             // character examined.
             pos.setIndex(initialIndex);
             pos.setErrorIndex(startIndex);
             return null;
         }
 
         // parse whitespace
         parseAndIgnoreWhitespace(source, pos);
 
+        // Check for minus sign in denominator before parsing (invalid)
+        int denStartIndex = pos.getIndex();
+        boolean hasNegativeDenominator = false;
+        if (source.length() > denStartIndex && source.charAt(denStartIndex) == '-') {
+            hasNegativeDenominator = true;
+        }
+
         // parse denominator
         Number den = getDenominatorFormat().parse(source, pos);
         if (den == null) {
             // invalid integer number
             // set index back to initial, error index should already be set
             // character examined.
             pos.setIndex(initialIndex);
             return null;
         }
 
-            // minus signs must be leading, invalid
+        // If we found a negative denominator in our earlier check, reject it
+        if (hasNegativeDenominator) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(denStartIndex);
+            return null;
+        }
+
+        // Check if there's a minus between numerator and denominator
+        // (This would have been caught in earlier parsing, but we want to be sure)
+        if (pos.getIndex() > startIndex && source.charAt(pos.getIndex() - 1) == '-') {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(pos.getIndex() - 1);
+            return null;
+        }
 
         int w = whole.intValue();
         int n = num.intValue();
         int d = den.intValue();
+
+        // Check if denominator is zero (should be caught by parse, but just in case)
+        if (d == 0) {
+            pos.setIndex(initialIndex);
+            pos.setErrorIndex(pos.getIndex());
+            return null;
+        }
+
+        // Check for minus sign between whole number and numerator
+        int wholeEnd = initialIndex + whole.toString().length();
+        int numStart = numStartIndex;
+        if (numStart - wholeEnd > 1) { // More than just whitespace between whole and numerator
+            // Check all non-whitespace characters between whole and numerator
+            boolean foundMinus = false;
+            for (int i = wholeEnd; i < numStart; i++) {
+                if (!Character.isWhitespace(source.charAt(i)) && source.charAt(i) == '-') {
+                    foundMinus = true;
+                    break;
+                }
+            }
+            if (foundMinus) {
+                pos.setIndex(initialIndex);
+                pos.setErrorIndex(numStart - 1);
+                return null;
+            }
+        }
+
         return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
     }
\ No newline at end of file
