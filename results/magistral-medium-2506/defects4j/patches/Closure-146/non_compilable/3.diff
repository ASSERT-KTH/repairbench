diff --git a/tmp/5460831b-7177-4c4e-89cc-84c3d1deebfe_buggy.java b/tmp/94bccb28-d6b8-4c16-b58a-e4cd7aefc6aa_fixed.java
index 210695a..1b93c9b 100644
--- a/tmp/5460831b-7177-4c4e-89cc-84c3d1deebfe_buggy.java
+++ b/tmp/94bccb28-d6b8-4c16-b58a-e4cd7aefc6aa_fixed.java
@@ -1,32 +1,57 @@
 /**
  * Computes the subset of {@code this} and {@code that} types if inequality
  * is observed. If a value {@code v1} of type {@code number} is not equal to a
  * value {@code v2} of type {@code (undefined,number)}, we can infer that the
  * type of {@code v1} is {@code number} and the type of {@code v2} is
  * {@code number} as well.
  *
  * @return a pair containing the restricted type of {@code this} as the first
  *         component and the restricted type of {@code that} as the second
  *         element. The returned pair is never {@code null} even though its
  *         components may be {@code null}
  */
 public TypePair getTypesUnderInequality(JSType that) {
   // unions types
   if (that instanceof UnionType) {
     TypePair p = that.getTypesUnderInequality(this);
     return new TypePair(p.typeB, p.typeA);
   }
 
   // other types
   switch (this.testForEquality(that)) {
     case TRUE:
       return new TypePair(null, null);
 
     case FALSE:
+      // If they're unequal, return the original types since we can't
+      // constrain them further.
+      return new TypePair(this, that);
+
     case UNKNOWN:
+      // When equality is UNKNOWN (might be true or false), we should return the
+      // types that would hold in either case.
+      if (this == NO_TYPE || that == NO_TYPE) {
+        // If one type is NO_TYPE, return as-is since NO_TYPE is a bottom type
+        return new TypePair(this, that);
+      }
+
+      if (this.isUndefinedType() && that.isVoidType()) {
+        // Special case: when testing inequality between undefined and void,
+        // both types should become NO_TYPE (the false case is impossible)
+        return new TypePair(NO_TYPE, NO_TYPE);
+      }
+      else if (that.isUndefinedType() && this.isVoidType()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+      }
+      else if (this.isVoidType() && that.isUndefinedType()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+      }
+      else if (that.isVoidType() && this.isUndefinedType()) {
+        return new TypePair(NO_TYPE, NO_TYPE);
+      }
       return new TypePair(this, that);
   }
 
   // switch case is exhaustive
   throw new IllegalStateException();
 }
\ No newline at end of file
