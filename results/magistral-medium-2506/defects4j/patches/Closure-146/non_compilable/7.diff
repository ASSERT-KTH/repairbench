diff --git a/tmp/4c974fcd-a2da-4579-a592-8446d70c5511_buggy.java b/tmp/80e7709c-0f33-4ede-b61f-a4c0dbe8bced_fixed.java
index 210695a..0713544 100644
--- a/tmp/4c974fcd-a2da-4579-a592-8446d70c5511_buggy.java
+++ b/tmp/80e7709c-0f33-4ede-b61f-a4c0dbe8bced_fixed.java
@@ -1,32 +1,35 @@
   /**
    * Computes the subset of {@code this} and {@code that} types if inequality
    * is observed. If a value {@code v1} of type {@code number} is not equal to a
    * value {@code v2} of type {@code (undefined,number)}, we can infer that the
    * type of {@code v1} is {@code number} and the type of {@code v2} is
    * {@code number} as well.
    *
    * @return a pair containing the restricted type of {@code this} as the first
    *         component and the restricted type of {@code that} as the second
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
   public TypePair getTypesUnderInequality(JSType that) {
-    // unions types
+    // union types
     if (that instanceof UnionType) {
       TypePair p = that.getTypesUnderInequality(this);
       return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
       case TRUE:
         return new TypePair(null, null);
-
       case FALSE:
+        return new TypePair(this, that);
       case UNKNOWN:
+        if (this.isVoid() && that.isVoid()) {
+          return new TypePair(this.getNotEquivalentType(that), this.getNotEquivalentType(that));
+        }
         return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
   }
\ No newline at end of file
