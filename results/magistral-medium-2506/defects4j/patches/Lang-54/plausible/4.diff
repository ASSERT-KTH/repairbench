diff --git a/tmp/4aa7091a-bb62-4e12-bf93-a5b4f7bfc46e_buggy.java b/tmp/e6ab72fe-4cbe-4a9c-bb04-fc11503a35a1_fixed.java
index 90fe130..b5204bf 100644
--- a/tmp/4aa7091a-bb62-4e12-bf93-a5b4f7bfc46e_buggy.java
+++ b/tmp/e6ab72fe-4cbe-4a9c-bb04-fc11503a35a1_fixed.java
@@ -1,61 +1,57 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (len != 2 && len != 5 && !(len >= 7)) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str, "");
         } else {
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
-            char ch3 = str.charAt(3);
-            char ch4 = str.charAt(4);
-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
-                throw new IllegalArgumentException("Invalid locale format: " + str);
-            }
             if (len == 5) {
+                char ch3 = str.charAt(3);
+                char ch4 = str.charAt(4);
+                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             } else {
-                if (str.charAt(5) != '_') {
+                if (str.charAt(2) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                // Handle cases where country code is missing (empty between underscores)
+                int countryStart = 3;
+                int countryEnd = 3;
+                int variantStart = 0;
+                // Find country code (2 chars) if present
+                if (len >= 5) {
+                    char ch3 = str.charAt(3);
+                    char ch4 = str.charAt(4);
+                    if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {
+                        countryEnd = 5;
+                    }
+                }
+                // Check for variant separator
+                int variantSeparator = countryEnd == 5 ? 5 : 3; // after country code or after empty country
+                if (len > variantSeparator && str.charAt(variantSeparator) == '_') {
+                    variantStart = variantSeparator + 1;
+                    if (variantStart <= len) {
+                        return new Locale(str.substring(0, 2),
+                            countryEnd == 5 ? str.substring(3, 5) : "",
+                            str.substring(variantStart));
+                    }
+                }
+                // If we get here, it's invalid format
+                throw new IllegalArgumentException("Invalid locale format: " + str);
             }
         }
     }
\ No newline at end of file
