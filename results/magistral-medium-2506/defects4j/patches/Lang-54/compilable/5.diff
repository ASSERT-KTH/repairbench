diff --git a/tmp/639fe5f1-aa61-4518-b472-f7b560b59fa7_buggy.java b/tmp/64b6ff02-c35d-4ec0-b231-cb14a68cc32a_fixed.java
index 90fe130..888fd52 100644
--- a/tmp/639fe5f1-aa61-4518-b472-f7b560b59fa7_buggy.java
+++ b/tmp/64b6ff02-c35d-4ec0-b231-cb14a68cc32a_fixed.java
@@ -1,61 +1,129 @@
-    /**
-     * <p>Converts a String to a Locale.</p>
-     *
-     * <p>This method takes the string format of a locale and creates the
-     * locale object from it.</p>
-     *
-     * <pre>
-     *   LocaleUtils.toLocale("en")         = new Locale("en", "")
-     *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
-     *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
-     * </pre>
-     *
-     * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
-     * Thus, the result from getVariant() may vary depending on your JDK.</p>
-     *
-     * <p>This method validates the input strictly.
-     * The language code must be lowercase.
-     * The country code must be uppercase.
-     * The separator must be an underscore.
-     * The length must be correct.
-     * </p>
-     *
-     * @param str  the locale String to convert, null returns null
-     * @return a Locale, null if null input
-     * @throws IllegalArgumentException if the string is an invalid format
-     */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (len == 0) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+        // Check for at least language code (len >= 2)
+        if (len < 2) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
+        // Check language code (must be 2 lowercase letters)
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
+
         if (len == 2) {
             return new Locale(str, "");
-        } else {
+        }
+
+        // Check if there's country and/or variant
+        if (len >= 5 && len <= 6) { // language_country or language_country_
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             char ch3 = str.charAt(3);
             char ch4 = str.charAt(4);
             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
             if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
-            } else {
+            } else if (len == 6) { // could be language_country_ with empty variant
                 if (str.charAt(5) != '_') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                return new Locale(str.substring(0, 2), str.substring(3, 5), "");
             }
         }
+
+        // Handle cases with variant (len >=7) or other lengths
+        if (len >= 7) { // language_country_variant
+            if (str.charAt(2) != '_') {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            // Check country code (positions 3-4)
+            if (str.length() >=5) { // needs to be long enough for country check
+                char ch3 = str.charAt(3);
+                char ch4 = str.charAt(4);
+                if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
+                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                }
+            }
+            // Check the second underscore before variant
+            if (str.charAt(len >= 5 ? 2 : 0) == '_' && len >= 7) {
+                int secondUnderscorePos = str.indexOf('_', 3); // look for second underscore after 3
+                if (secondUnderscorePos != -1) {
+                    if (str.charAt(secondUnderscorePos) != '_') {
+                        throw new IllegalArgumentException("Invalid locale format: " + str);
+                    }
+                    String language = str.substring(0, 2);
+                    String country = "";
+                    String variant = "";
+                    if (len >=5) {
+                        country = str.substring(3, 5);
+                    }
+                    if (len > 5) {
+                        if (str.charAt(5) == '_') {
+                            variant = str.substring(6);
+                        } else {
+                            // This case handles "fr__POSIX" style variants
+                            // Look for the first underscore after position 2
+                            int firstUnderscore = str.indexOf('_', 2);
+                            if (firstUnderscore != -1) {
+                                int secondUnderscore = str.indexOf('_', firstUnderscore + 1);
+                                if (secondUnderscore == -1) {
+                                    // No second underscore means variant starts after country
+                                    // but this case is already handled in other if clauses
+                                    throw new IllegalArgumentException("Invalid locale format: " + str);
+                                } else {
+                                    // Format is language country variant with double underscore
+                                    // e.g. "fr__POSIX"
+                                    country = ""; // no country specified in this format?
+                                    variant = str.substring(firstUnderscore + 1);
+                                    return new Locale(language, country, variant);
+                                }
+                            }
+                        }
+                    }
+                    return new Locale(language, country, variant);
+                }
+            }
+            // Fall through for other formats
+            if (str.length() >=5 && str.charAt(2) == '_') {
+                String language = str.substring(0, 2);
+                String country = str.length() >=5 ? str.substring(3,5) : "";
+                String variant = str.length() > 5 ? str.substring(6) : "";
+                if (str.length() > 5 && str.charAt(5) == '_') {
+                    variant = str.substring(6);
+                } else if (str.length() > 5) {
+                    // Handle cases like en__POSIX where country is empty
+                    if (str.charAt(3) == '_') { // pattern: en__POSIX
+                        variant = str.substring(4);
+                        country = "";
+                    } else {
+                        variant = str.substring(5); // but standard format would have variant after 2 underscores
+                    }
+                }
+                return new Locale(language, country, variant);
+            }
+        } else if (len != 2) {
+            throw new IllegalArgumentException("Invalid locale format: " + str);
+        }
+
+        // Handle case where language is followed by double underscore (e.g., "fr__POSIX")
+        if (len >= 4 && str.charAt(2) == '_' && str.charAt(3) == '_') {
+            String variant = str.substring(4);
+            if (variant.indexOf('_') >= 0) {
+                throw new IllegalArgumentException("Invalid locale format: " + str);
+            }
+            return new Locale(str.substring(0, 2), "", variant);
+        }
+
+        throw new IllegalArgumentException("Invalid locale format: " + str);
     }
\ No newline at end of file
