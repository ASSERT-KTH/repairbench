diff --git a/tmp/1f752fde-58f0-4ffb-862f-bd296ee25182_buggy.java b/tmp/699b848a-dd41-4cac-80a2-7f84b1c6dcf3_fixed.java
index 90fe130..4b2821a 100644
--- a/tmp/1f752fde-58f0-4ffb-862f-bd296ee25182_buggy.java
+++ b/tmp/699b848a-dd41-4cac-80a2-7f84b1c6dcf3_fixed.java
@@ -1,61 +1,169 @@
     /**
      * <p>Converts a String to a Locale.</p>
      *
      * <p>This method takes the string format of a locale and creates the
      * locale object from it.</p>
      *
      * <pre>
      *   LocaleUtils.toLocale("en")         = new Locale("en", "")
      *   LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB")
      *   LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#)
      * </pre>
      *
      * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
-     * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
+     * In JDK1.3, the constructor upper cases the variants, in JDK1.4, it doesn't.
      * Thus, the result from getVariant() may vary depending on your JDK.</p>
      *
      * <p>This method validates the input strictly.
      * The language code must be lowercase.
      * The country code must be uppercase.
      * The separator must be an underscore.
      * The length must be correct.
      * </p>
      *
      * @param str  the locale String to convert, null returns null
      * @return a Locale, null if null input
      * @throws IllegalArgumentException if the string is an invalid format
      */
     public static Locale toLocale(String str) {
         if (str == null) {
             return null;
         }
         int len = str.length();
-        if (len != 2 && len != 5 && len < 7) {
+        if (len != 2 && len < 5) {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         char ch0 = str.charAt(0);
         char ch1 = str.charAt(1);
         if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
             throw new IllegalArgumentException("Invalid locale format: " + str);
         }
         if (len == 2) {
             return new Locale(str, "");
         } else {
             if (str.charAt(2) != '_') {
                 throw new IllegalArgumentException("Invalid locale format: " + str);
             }
+            // Check if there's a country code (positions 3-4)
+            if (len >= 5) {
                 char ch3 = str.charAt(3);
                 char ch4 = str.charAt(4);
                 if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
                     throw new IllegalArgumentException("Invalid locale format: " + str);
                 }
+            }
+            // Handle cases with country code and optional variant
             if (len == 5) {
                 return new Locale(str.substring(0, 2), str.substring(3, 5));
             } else {
-                if (str.charAt(5) != '_') {
+                // Check for variant separator (position 5)
+                if (len >= 6 && str.charAt(5) != '_') {
+                    // If there's more content but no separator at position 5, it's invalid
+                    // But now we support cases like "fr__POSIX"
+                    int nextUnderscore = str.indexOf('_', 2);
+                    if (nextUnderscore == -1 || nextUnderscore == 5) {
+                        // Either no additional underscores (invalid for variants)
+                        // Or underscore at position 5 (normal case)
+                    } else {
+                        // Handle cases like "fr__POSIX" where there are two underscores in a row
+                        // after the language code
+                    }
+                }
+                // The variant can start at different positions depending on whether there's a country code
+                String country = "";
+                String variant = "";
+                int countryStart = -1;
+                int variantStart = -1;
+
+                // Find the country and variant parts
+                // The format can be:
+                // 1. language-country-variant (en_US_windows)
+                // 2. language--variant (fr__POSIX)
+                int firstUnderscore = 2; // after language code
+                int secondUnderscore = str.indexOf('_', firstUnderscore + 1);
+
+                if (secondUnderscore != -1 && (secondUnderscore == firstUnderscore + 1 || secondUnderscore > firstUnderscore + 1)) {
+                    // Case where we might have empty country code (like fr__POSIX)
+                    if (secondUnderscore == firstUnderscore + 1) {
+                        // Pattern: language__variant
+                        country = "";
+                        variant = str.substring(secondUnderscore + 1);
+                    } else {
+                        // Normal case with country code: language_country_variant
+                        country = str.substring(firstUnderscore + 1, secondUnderscore);
+                        if (country.length() != 2 || country.charAt(0) < 'A' || country.charAt(0) > 'Z' ||
+                            country.charAt(1) < 'A' || country.charAt(1) > 'Z') {
                             throw new IllegalArgumentException("Invalid locale format: " + str);
                         }
+                        variant = str.substring(secondUnderscore + 1);
+                    }
+                } else if (len > 5) {
+                    // Pattern like language_country_variant (without double underscore)
+                    country = str.substring(3, 5);
+                    variant = str.substring(6);
+                } else {
+                    // Just language and country
+                    country = str.substring(3, 5);
+                }
+
+                // If we haven't set country yet and we have enough length
+                if (country.isEmpty() && len > 5) {
+                    // Check if position 3-4 is a valid country code
+                    if (len >= 5) {
+                        char ch3 = str.charAt(3);
+                        char ch4 = str.charAt(4);
+                        if (ch3 >= 'A' && ch3 <= 'Z' && ch4 >= 'A' && ch4 <= 'Z') {
+                            country = str.substring(3, 5);
+                            variant = len > 5 ? str.substring(6) : "";
+                        }
+                    }
+                }
+
+                // If we still don't have a country (like in fr__POSIX case)
+                if (country.isEmpty()) {
+                    int doubleUnderscorePos = str.indexOf("__");
+                    if (doubleUnderscorePos > 0) {
+                        // Handle fr__POSIX case
+                        String lang = str.substring(0, 2);
+                        variant = str.substring(doubleUnderscorePos + 2);
+                        return new Locale(lang, "", variant);
+                    }
+                }
+
+                if (country.isEmpty()) {
+                    // Try to find the correct parts again
+                    if (len > 5) {
+                        // Default case: language_country_variant
                         return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
                     }
                 }
+
+                // Fallback for complex cases
+                String language = str.substring(0, 2);
+                if (len > 2 && str.charAt(2) == '_') {
+                    int secondSep = str.indexOf('_', 3);
+                    if (secondSep == -1) {
+                        // language_country
+                        country = str.substring(3);
+                        return new Locale(language, country, "");
+                    } else if (secondSep == 3) {
+                        // language__variant
+                        variant = str.substring(secondSep + 1);
+                        return new Locale(language, "", variant);
+                    } else {
+                        // language_country_variant
+                        country = str.substring(3, secondSep);
+                        variant = str.substring(secondSep + 1);
+                        return new Locale(language, country, variant);
+                    }
+                }
+
+                // Default case when nothing special matches
+                if (len > 5) {
+                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
+                } else {
+                    return new Locale(str.substring(0, 2), str.substring(3, 5));
+                }
+            }
+        }
     }
\ No newline at end of file
