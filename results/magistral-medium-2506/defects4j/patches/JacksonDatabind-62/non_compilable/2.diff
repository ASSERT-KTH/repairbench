diff --git a/tmp/a7d1a068-1737-4bd1-85a5-39c3c46c3a5e_buggy.java b/tmp/7bf28f41-2ed0-4e21-9f78-40c1a50f04be_fixed.java
index 6c9090f..f040475 100644
--- a/tmp/a7d1a068-1737-4bd1-85a5-39c3c46c3a5e_buggy.java
+++ b/tmp/7bf28f41-2ed0-4e21-9f78-40c1a50f04be_fixed.java
@@ -1,45 +1,61 @@
-    /**
-     * Method called to finalize setup of this deserializer,
-     * when it is known for which property deserializer is needed
-     * for.
-     */
     @Override
     public CollectionDeserializer createContextual(DeserializationContext ctxt,
             BeanProperty property) throws JsonMappingException
     {
         // May need to resolve types for delegate-based creators:
         JsonDeserializer<Object> delegateDeser = null;
         if (_valueInstantiator != null) {
             if (_valueInstantiator.canCreateUsingDelegate()) {
                 JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig());
                 if (delegateType == null) {
                     throw new IllegalArgumentException("Invalid delegate-creator definition for "+_collectionType
                             +": value instantiator ("+_valueInstantiator.getClass().getName()
                             +") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'");
                 }
                 delegateDeser = findDeserializer(ctxt, delegateType, property);
             }
         }
         // [databind#1043]: allow per-property allow-wrapping of single overrides:
         // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
         //   comes down to "List vs Collection" I suppose... for now, pass Collection
         Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                 JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
         // also, often value deserializer is resolved here:
         JsonDeserializer<?> valueDeser = _valueDeserializer;
 
         // May have a content converter
         valueDeser = findConvertingContentDeserializer(ctxt, property, valueDeser);
         final JavaType vt = _collectionType.getContentType();
         if (valueDeser == null) {
             valueDeser = ctxt.findContextualValueDeserializer(vt, property);
         } else { // if directly assigned, probably not yet contextual, so:
             valueDeser = ctxt.handleSecondaryContextualization(valueDeser, property, vt);
         }
         // and finally, type deserializer needs context as well
         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;
         if (valueTypeDeser != null) {
             valueTypeDeser = valueTypeDeser.forProperty(property);
         }
+
+        // Fix: If we're dealing with an unmodifiable collection, we need to ensure we can create it
+        if (_valueInstantiator == null || !_valueInstantiator.canCreateUsingDelegate()) {
+            if (isUnmodifiableCollectionType(_collectionType.getRawClass())) {
+                // For unmodifiable collections, we need to use a delegate-based creator
+                // since we can't construct them directly
+                ValueInstantiator delegateInst = new StdValueInstantiator(ctxt.getConfig(),
+                    _collectionType.getContentType().getRawClass());
+                return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle)
+                    .withValueInstantiator(delegateInst);
+            }
+        }
+
         return withResolved(delegateDeser, valueDeser, valueTypeDeser, unwrapSingle);
     }
+
+    private boolean isUnmodifiableCollectionType(Class<?> rawClass) {
+        if (rawClass.getName().startsWith("java.util.Collections$")) {
+            // Check common unmodifiable collection types
+            return rawClass.getSimpleName().startsWith("Unmodifiable");
+        }
+        return false;
+    }
\ No newline at end of file
