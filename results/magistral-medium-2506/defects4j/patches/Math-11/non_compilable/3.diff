diff --git a/tmp/d8dfa386-b182-4510-9883-ed5e8fdce6e7_buggy.java b/tmp/d126e994-d69b-47d1-af7f-da85e7561a45_fixed.java
index 51a0115..ba398a0 100644
--- a/tmp/d8dfa386-b182-4510-9883-ed5e8fdce6e7_buggy.java
+++ b/tmp/d126e994-d69b-47d1-af7f-da85e7561a45_fixed.java
@@ -1,11 +1,19 @@
     /** {@inheritDoc} */
     public double density(final double[] vals) throws DimensionMismatchException {
         final int dim = getDimension();
         if (vals.length != dim) {
-            throw new DimensionMismatchException(vals.length, dim);
+            throw new DimensionMismatchException(vals.length, degim);
         }
 
-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *
-            getExponentTerm(vals);
+        double coefficient = FastMath.pow(2 * FastMath.PI, -dim / 2.0) *
+            FastMath.pow(covarianceMatrixDeterminant, -0.5);
+        if (dim == 1) {
+            // Special case for univariate distribution where sigma is a 1x1 matrix
+            // The coefficient should be 1/sqrt(2*pi*sigma) = 1/sqrt(2*pi*covarianceMatrixDeterminant)
+            // But since covarianceMatrixDeterminant is sigma in 1D case,
+            // we need to adjust the formula to match the univariate normal distribution
+            final double sigma = covarianceMatrixDeterminant; // since determinant is equal to the variance in 1D
+            coefficient = 1.0 / FastMath.sqrt(2 * FastMath.PI * sigma);
+        }
+        return coefficient * getExponentTerm(vals);
     }
\ No newline at end of file
