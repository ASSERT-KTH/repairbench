diff --git a/tmp/3ebdd5f6-2976-46b9-90c0-584bccc6d645_buggy.java b/tmp/b5f5bec5-54a4-4197-aa58-9ce964e08173_fixed.java
index d6a560a..f9bcb18 100644
--- a/tmp/3ebdd5f6-2976-46b9-90c0-584bccc6d645_buggy.java
+++ b/tmp/b5f5bec5-54a4-4197-aa58-9ce964e08173_fixed.java
@@ -1,33 +1,38 @@
 /**
  * Resolve the referenced type within the enclosing scope.
  */
 @Override
 JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {
-    // TODO(user): Investigate whether it is really necessary to keep two
-    // different mechanisms for resolving named types, and if so, which order
-    // makes more sense. Now, resolution via registry is first in order to
-    // avoid triggering the warnings built into the resolution via properties.
+  // First try resolving via registry to avoid property resolution warnings
   boolean resolved = resolveViaRegistry(t, enclosing);
+
+  // Detect cycles before proceeding further
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
   }
 
   if (resolved) {
     super.resolveInternal(t, enclosing);
     finishPropertyContinuations();
     return registry.isLastGeneration() ?
         getReferencedType() : this;
   }
 
+  // Try resolving via properties if registry resolution didn't work
   resolveViaProperties(t, enclosing);
+
+  // Check for cycles again after property resolution
   if (detectImplicitPrototypeCycle()) {
     handleTypeCycle(t);
+    // Return here to prevent further processing if cycle detected
+    return registry.isLastGeneration() ?
+        getReferencedType() : this;
   }
 
   super.resolveInternal(t, enclosing);
   if (isResolved()) {
     finishPropertyContinuations();
   }
   return registry.isLastGeneration() ?
       getReferencedType() : this;
 }
\ No newline at end of file
